{
  "name": "mbpp_619_move_num",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_619_move_num.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string num_str = \"\";\n    std::string alpha_str = \"\";\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            num_str += test_str[i];\n        } else {\n            alpha_str += test_str[i];\n        }\n    }\n    return alpha_str + num_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    std::string num_str = \"\";\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            num_str += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    result += num_str;\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result_str = \"\";\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result_str += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result_str += test_str[i];\n        }\n    }\n    return result_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "tmpkonhd0c3: /tmp/tmpkonhd0c3.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for(int i = 0; i < test_str.size(); i++) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for(int i = 0; i < test_str.size(); i++) {\n        if(test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "tmpv9kbhu_c: /tmp/tmpv9kbhu_c.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "tmpaw_30dy2: /tmp/tmpaw_30dy2.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "tmpaw_30dy2: /tmp/tmpaw_30dy2.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.size() - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= 'a' && test_str[j] <= 'z') {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            } else {\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "tmpyyrbi55i: /tmp/tmpyyrbi55i.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n  int i = 0;\n  int j = test_str.length() - 1;\n  while (i < j) {\n    while (i < j && !isdigit(test_str[i])) {\n      i++;\n    }\n    while (i < j && isdigit(test_str[j])) {\n      j--;\n    }\n    if (i < j) {\n      std::swap(test_str[i], test_str[j]);\n    }\n  }\n  return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "tmp0iklvx_j: /tmp/tmp0iklvx_j.cpp:22: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.size() - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= 'a' && test_str[j] <= 'z') {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            } else {\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "tmpyyrbi55i: /tmp/tmpyyrbi55i.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.size() - 1;\n    while(i < j) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            if(test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "tmpsk0nc6_f: /tmp/tmpsk0nc6_f.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while(i < j) {\n        while(i < j && !isdigit(test_str[i])) {\n            i++;\n        }\n        while(i < j && !isalpha(test_str[j])) {\n            j--;\n        }\n        if(i < j) {\n            std::swap(test_str[i], test_str[j]);\n            i++;\n            j--;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "tmpa0yumit9: /tmp/tmpa0yumit9.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.size() - 1;\n    while (i < j) {\n        if (isdigit(test_str[i]) && isalpha(test_str[j])) {\n            std::swap(test_str[i], test_str[j]);\n            i++;\n            j--;\n        }\n        if (!isdigit(test_str[i])) {\n            i++;\n        }\n        if (!isalpha(test_str[j])) {\n            j--;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "tmpk9prq6v8: /tmp/tmpk9prq6v8.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int j = test_str.length() - 1;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            while (test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            }\n            std::swap(test_str[i], test_str[j]);\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "tmpvluin6av: /tmp/tmpvluin6av.cpp:18: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    std::string num_str;\n    for (int i = 0; i < test_str.size(); i++) {\n        if (isdigit(test_str[i])) {\n            num_str += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    result += num_str;\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "tmpaw_30dy2: /tmp/tmpaw_30dy2.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    int i = 0;\n    while (i < test_str.length()) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n        i++;\n    }\n    i = 0;\n    while (i < test_str.length()) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n        i++;\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "tmpx8z2a_fj: /tmp/tmpx8z2a_fj.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    std::string num_str = \"\";\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            num_str += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    result += num_str;\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n  std::string result;\n  std::string num;\n  for (int i = 0; i < test_str.size(); i++) {\n    if (isdigit(test_str[i])) {\n      num += test_str[i];\n    } else {\n      result += test_str[i];\n    }\n  }\n  result += num;\n  return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while(i < j) {\n        while(i < j && !isdigit(test_str[i])) {\n            i++;\n        }\n        while(i < j && !isalpha(test_str[j])) {\n            j--;\n        }\n        if(i < j) {\n            std::swap(test_str[i], test_str[j]);\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "tmpmqv4b3nx: /tmp/tmpmqv4b3nx.cpp:22: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    std::string num_str;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            num_str += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    result += num_str;\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while(i < j) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            if(test_str[j] >= 'a' && test_str[j] <= 'z') {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            } else {\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmpjwkljpun: /tmp/tmpjwkljpun.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp0kjkk6s2: /tmp/tmp0kjkk6s2.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0, j = test_str.size() - 1;\n    while(i < j) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            if(test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp2sers0yt: /tmp/tmp2sers0yt.cpp:23: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while(i < j) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            if(test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp87n0zecv: /tmp/tmp87n0zecv.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while(i < j) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            if(test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp87n0zecv: /tmp/tmp87n0zecv.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    std::string num_str;\n    for (int i = 0; i < test_str.size(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            num_str += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    return result + num_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp_2o04m0h: /tmp/tmp_2o04m0h.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n\tstd::string result;\n\tfor(int i = 0; i < test_str.length(); i++) {\n\t\tif(test_str[i] >= '0' && test_str[i] <= '9') {\n\t\t\tresult.push_back(test_str[i]);\n\t\t}\n\t}\n\tfor(int i = 0; i < test_str.length(); i++) {\n\t\tif(test_str[i] < '0' || test_str[i] > '9') {\n\t\t\tresult.push_back(test_str[i]);\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp3uz19rgi: /tmp/tmp3uz19rgi.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp_2o04m0h: /tmp/tmp_2o04m0h.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "tmpaw_30dy2: /tmp/tmpaw_30dy2.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int len = test_str.length();\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= 'a' && test_str[j] <= 'z') {\n                char temp = test_str[i];\n                test_str[i] = test_str[j];\n                test_str[j] = temp;\n                i++;\n                j--;\n            } else {\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmpn79gr8yu: /tmp/tmpn79gr8yu.cpp:27: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.size() - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmpoj6ch44x: /tmp/tmpoj6ch44x.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    std::string num_str;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            num_str += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    result += num_str;\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    std::string nums = \"\";\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            nums += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    return result + nums;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string str = \"\";\n    std::string num = \"\";\n    for (int i = 0; i < test_str.size(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            num += test_str[i];\n        } else {\n            str += test_str[i];\n        }\n    }\n    return str + num;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n  int i = 0;\n  int j = test_str.size() - 1;\n  while (i < j) {\n    if (std::isdigit(test_str[i])) {\n      if (std::isalpha(test_str[j])) {\n        std::swap(test_str[i], test_str[j]);\n        i++;\n        j--;\n      } else {\n        j--;\n      }\n    } else {\n      i++;\n    }\n  }\n  return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp8_0qtszn: /tmp/tmp8_0qtszn.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    std::string nums = \"\";\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            nums += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    return result + nums;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp6pxgx261: /tmp/tmp6pxgx261.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    std::string num_str = \"\";\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            num_str += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    result += num_str;\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for (int i = 0; i < test_str.size(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.size(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp7iu3h5v4: /tmp/tmp7iu3h5v4.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.size() - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmpoj6ch44x: /tmp/tmpoj6ch44x.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n\tstd::string result;\n\tfor (int i = 0; i < test_str.length(); i++) {\n\t\tif (test_str[i] >= '0' && test_str[i] <= '9') {\n\t\t\tresult += test_str[i];\n\t\t}\n\t}\n\tfor (int i = 0; i < test_str.length(); i++) {\n\t\tif (test_str[i] < '0' || test_str[i] > '9') {\n\t\t\tresult += test_str[i];\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmpj708ja5e: /tmp/tmpj708ja5e.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while(i < j) {\n        if(!isdigit(test_str[i])) {\n            i++;\n        }\n        else if(isdigit(test_str[j])) {\n            j--;\n        }\n        else {\n            std::swap(test_str[i], test_str[j]);\n            i++;\n            j--;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmpczkki50g: /tmp/tmpczkki50g.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    for(int i = 0; i < test_str.length(); i++) {\n        if(isdigit(test_str[i])) {\n            result += test_str[i];\n        }\n    }\n    for(int i = 0; i < test_str.length(); i++) {\n        if(!isdigit(test_str[i])) {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmpo9jrwh33: /tmp/tmpo9jrwh33.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmpfrmcz8lm: /tmp/tmpfrmcz8lm.cpp:23: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isdigit(test_str[i])) {\n            result.push_back(test_str[i]);\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (!isdigit(test_str[i])) {\n            result.push_back(test_str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmpwjojm_1q: /tmp/tmpwjojm_1q.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int len = test_str.length();\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp1inb23a7: /tmp/tmp1inb23a7.cpp:25: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= 'a' && test_str[j] <= 'z') {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            } else {\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp4fu1t34z: /tmp/tmp4fu1t34z.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    std::string nums;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            nums += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    return result + nums;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp0kjkk6s2: /tmp/tmp0kjkk6s2.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp0kjkk6s2: /tmp/tmp0kjkk6s2.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int len = test_str.length();\n    int i = 0;\n    int j = len - 1;\n    while(i < j) {\n        while(i < j && !std::isdigit(test_str[i])) {\n            i++;\n        }\n        while(i < j && !std::isalpha(test_str[j])) {\n            j--;\n        }\n        if(i < j) {\n            std::swap(test_str[i], test_str[j]);\n            i++;\n            j--;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "tmp6zgr4wel: /tmp/tmp6zgr4wel.cpp:25: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int len = test_str.length();\n    int i = 0;\n    int j = len - 1;\n    while(i < j) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            if(test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "tmp6m9vd9np: /tmp/tmp6m9vd9np.cpp:25: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp_2o04m0h: /tmp/tmp_2o04m0h.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp6pxgx261: /tmp/tmp6pxgx261.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "tmpo9d2nx47: /tmp/tmpo9d2nx47.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while(i < j) {\n        if(!isdigit(test_str[i])) {\n            i++;\n        } else if(isdigit(test_str[j])) {\n            j--;\n        } else {\n            std::swap(test_str[i], test_str[j]);\n            i++;\n            j--;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "tmphwvzq_xw: /tmp/tmphwvzq_xw.cpp:22: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int len = test_str.length();\n    int i = 0;\n    int j = len - 1;\n    while(i < j) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            if(test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "tmp6m9vd9np: /tmp/tmp6m9vd9np.cpp:25: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while (i < j) {\n        if (std::isdigit(test_str[i])) {\n            if (std::isalpha(test_str[j])) {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            } else {\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "tmpj8ap0y4k: /tmp/tmpj8ap0y4k.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "tmpaw_30dy2: /tmp/tmpaw_30dy2.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int len = test_str.length();\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp1inb23a7: /tmp/tmp1inb23a7.cpp:25: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int len = test_str.length();\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp1inb23a7: /tmp/tmp1inb23a7.cpp:25: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    std::string num_str = \"\";\n    for (int i = 0; i < test_str.size(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            num_str += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    result += num_str;\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp6pxgx261: /tmp/tmp6pxgx261.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.size() - 1;\n    while (i < j) {\n        if (isdigit(test_str[i])) {\n            if (isalpha(test_str[j])) {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            } else {\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "tmpp9autm7f: /tmp/tmpp9autm7f.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    std::string num;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            num += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    result += num;\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n  int i = 0;\n  int j = test_str.size() - 1;\n  while (i < j) {\n    if (test_str[i] >= '0' && test_str[i] <= '9') {\n      if (test_str[j] >= 'a' && test_str[j] <= 'z') {\n        std::swap(test_str[i], test_str[j]);\n        i++;\n        j--;\n      } else {\n        j--;\n      }\n    } else {\n      i++;\n    }\n  }\n  return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "tmpe41nelt7: /tmp/tmpe41nelt7.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    std::string num = \"\";\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            num += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    result += num;\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int len = test_str.length();\n    int i = 0;\n    int j = len - 1;\n    while(i < j) {\n        while(i < j && !isdigit(test_str[i])) {\n            i++;\n        }\n        while(i < j && isdigit(test_str[j])) {\n            j--;\n        }\n        if(i < j) {\n            std::swap(test_str[i], test_str[j]);\n            i++;\n            j--;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "tmp0uaygpo9: /tmp/tmp0uaygpo9.cpp:25: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int len = test_str.length();\n    int i = 0;\n    int j = len - 1;\n    while(i < j) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            if(test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "tmp6m9vd9np: /tmp/tmp6m9vd9np.cpp:25: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp0kjkk6s2: /tmp/tmp0kjkk6s2.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int len = test_str.length();\n    int i = 0;\n    int j = len - 1;\n    while(i < j) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            if(test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "tmp6m9vd9np: /tmp/tmp6m9vd9np.cpp:25: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    std::string num_str;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isdigit(test_str[i])) {\n            num_str += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    result += num_str;\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.size() - 1;\n    while(i < j) {\n        if(!isdigit(test_str[i])) {\n            i++;\n        }\n        else if(isdigit(test_str[j])) {\n            j--;\n        }\n        else {\n            std::swap(test_str[i], test_str[j]);\n            i++;\n            j--;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "tmpz4i6vb0v: /tmp/tmpz4i6vb0v.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for (int i = 0; i < test_str.size(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.size(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp7iu3h5v4: /tmp/tmp7iu3h5v4.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    std::string num;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isdigit(test_str[i])) {\n            num += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    result += num;\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    std::string nums = \"\";\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            nums += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    return result + nums;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n  std::string result;\n  for (int i = 0; i < test_str.length(); i++) {\n    if (test_str[i] >= '0' && test_str[i] <= '9') {\n      result += test_str[i];\n    }\n  }\n  for (int i = 0; i < test_str.length(); i++) {\n    if (test_str[i] < '0' || test_str[i] > '9') {\n      result += test_str[i];\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "tmpgi38c7d_: /tmp/tmpgi38c7d_.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    std::string num_str = \"\";\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            num_str += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    result += num_str;\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= 'a' && test_str[j] <= 'z') {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            } else {\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp4fu1t34z: /tmp/tmp4fu1t34z.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n\tint len = test_str.length();\n\tint i = 0, j = len - 1;\n\twhile (i < j) {\n\t\tif (test_str[i] >= '0' && test_str[i] <= '9') {\n\t\t\tif (test_str[j] >= '0' && test_str[j] <= '9') {\n\t\t\t\tj--;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstd::swap(test_str[i], test_str[j]);\n\t\t\t\ti++;\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\ti++;\n\t\t}\n\t}\n\treturn test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "tmpndlnomsw: /tmp/tmpndlnomsw.cpp:26: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n  std::string result;\n  for (int i = 0; i < test_str.size(); i++) {\n    if (test_str[i] >= '0' && test_str[i] <= '9') {\n      result += test_str[i];\n    }\n  }\n  for (int i = 0; i < test_str.size(); i++) {\n    if (test_str[i] < '0' || test_str[i] > '9') {\n      result += test_str[i];\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "tmp6gcysugn: /tmp/tmp6gcysugn.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int len = test_str.length();\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp1inb23a7: /tmp/tmp1inb23a7.cpp:25: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for (auto i : test_str) {\n        if (i >= '0' && i <= '9') {\n            result += i;\n        }\n    }\n    for (auto i : test_str) {\n        if (i < '0' || i > '9') {\n            result += i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "tmpx9nb11qw: /tmp/tmpx9nb11qw.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.size() - 1;\n    while (i < j) {\n        if (std::isdigit(test_str[i])) {\n            while (std::isdigit(test_str[j])) {\n                j--;\n            }\n            std::swap(test_str[i], test_str[j]);\n        }\n        i++;\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "tmpaoxjr__r: /tmp/tmpaoxjr__r.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    for (int i = 0; i < test_str.size(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.size(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "tmpqn5qpsod: /tmp/tmpqn5qpsod.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "tmpaw_30dy2: /tmp/tmpaw_30dy2.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.size() - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmpoj6ch44x: /tmp/tmpoj6ch44x.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int len = test_str.length();\n    int i = 0;\n    int j = len - 1;\n    while(i < j) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            if(test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            }\n            else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        }\n        else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "tmpkm_xklm_: /tmp/tmpkm_xklm_.cpp:27: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.size() - 1;\n    while(i < j) {\n        if(!isdigit(test_str[i])) {\n            i++;\n            continue;\n        }\n        if(isdigit(test_str[j])) {\n            j--;\n            continue;\n        }\n        std::swap(test_str[i], test_str[j]);\n        i++;\n        j--;\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "tmpivpp4p84: /tmp/tmpivpp4p84.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    std::string num = \"\";\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            num += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    result += num;\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isdigit(test_str[i])) {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (!isdigit(test_str[i])) {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "tmp_odjpah5: /tmp/tmp_odjpah5.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp0kjkk6s2: /tmp/tmp0kjkk6s2.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp6pxgx261: /tmp/tmp6pxgx261.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "tmpaw_30dy2: /tmp/tmpaw_30dy2.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    std::string nums;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            nums += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    return result + nums;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string str = \"\";\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            str += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= 'a' && test_str[i] <= 'z') {\n            str += test_str[i];\n        }\n    }\n    return str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "tmpwvbynmox: /tmp/tmpwvbynmox.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.size() - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmpoj6ch44x: /tmp/tmpoj6ch44x.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp0kjkk6s2: /tmp/tmp0kjkk6s2.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    std::string num_str;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            num_str += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    result += num_str;\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while(i < j) {\n        while(i < j && !isdigit(test_str[i])) {\n            i++;\n        }\n        while(i < j && !isalpha(test_str[j])) {\n            j--;\n        }\n        if(i < j) {\n            std::swap(test_str[i], test_str[j]);\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "tmpmqv4b3nx: /tmp/tmpmqv4b3nx.cpp:22: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for (int i = 0; i < test_str.size(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.size(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp7iu3h5v4: /tmp/tmp7iu3h5v4.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "tmpaw_30dy2: /tmp/tmpaw_30dy2.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= 'a' && test_str[i] <= 'z') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "tmpd8iqgj9w: /tmp/tmpd8iqgj9w.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.size() - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmpoj6ch44x: /tmp/tmpoj6ch44x.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while(i < j) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            if(test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp87n0zecv: /tmp/tmp87n0zecv.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int len = test_str.length();\n    int i = 0;\n    int j = len - 1;\n    while(i < j) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            if(test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "tmp6m9vd9np: /tmp/tmp6m9vd9np.cpp:25: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int len = test_str.length();\n    int i = 0, j = len - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "tmpovnzv3sp: /tmp/tmpovnzv3sp.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp0kjkk6s2: /tmp/tmp0kjkk6s2.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n  std::string result;\n  std::string num_str;\n  for (int i = 0; i < test_str.length(); i++) {\n    if (test_str[i] >= '0' && test_str[i] <= '9') {\n      num_str += test_str[i];\n    } else {\n      result += test_str[i];\n    }\n  }\n  result += num_str;\n  return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.size() - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmpoj6ch44x: /tmp/tmpoj6ch44x.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp_2o04m0h: /tmp/tmp_2o04m0h.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= 'a' && test_str[j] <= 'z') {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            } else {\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp4fu1t34z: /tmp/tmp4fu1t34z.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int len = test_str.length();\n    int i = 0;\n    int j = len - 1;\n    while(i < j) {\n        while(i < j && !isdigit(test_str[i])) {\n            i++;\n        }\n        while(i < j && isdigit(test_str[j])) {\n            j--;\n        }\n        if(i < j) {\n            std::swap(test_str[i], test_str[j]);\n            i++;\n            j--;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "tmp0uaygpo9: /tmp/tmp0uaygpo9.cpp:25: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int len = test_str.length();\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp1inb23a7: /tmp/tmp1inb23a7.cpp:25: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while(i < j) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            if(test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp87n0zecv: /tmp/tmp87n0zecv.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    std::string num;\n    for (int i = 0; i < test_str.size(); i++) {\n        if (isdigit(test_str[i])) {\n            num += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    result += num;\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp_2o04m0h: /tmp/tmp_2o04m0h.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n\tstd::string result;\n\tstd::string num_str;\n\tfor (int i = 0; i < test_str.length(); i++) {\n\t\tif (isdigit(test_str[i])) {\n\t\t\tnum_str += test_str[i];\n\t\t}\n\t\telse {\n\t\t\tresult += test_str[i];\n\t\t}\n\t}\n\tresult += num_str;\n\treturn result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n  int len = test_str.length();\n  int i = 0;\n  int j = len - 1;\n  while(i < j) {\n    if(test_str[i] >= '0' && test_str[i] <= '9') {\n      if(test_str[j] >= '0' && test_str[j] <= '9') {\n        j--;\n      } else {\n        std::swap(test_str[i], test_str[j]);\n        i++;\n        j--;\n      }\n    } else {\n      i++;\n    }\n  }\n  return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "tmpqi91_b4w: /tmp/tmpqi91_b4w.cpp:25: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp_2o04m0h: /tmp/tmp_2o04m0h.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.size() - 1;\n    while(i < j) {\n        if(!isdigit(test_str[i])) {\n            i++;\n            continue;\n        }\n        if(isdigit(test_str[j])) {\n            j--;\n            continue;\n        }\n        std::swap(test_str[i], test_str[j]);\n        i++;\n        j--;\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "tmpivpp4p84: /tmp/tmpivpp4p84.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    for(int i = 0; i < test_str.size(); i++) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for(int i = 0; i < test_str.size(); i++) {\n        if(test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "tmp0zqylpv9: /tmp/tmp0zqylpv9.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while(i < j) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            if(test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp87n0zecv: /tmp/tmp87n0zecv.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int len = test_str.length();\n    int i = 0;\n    int j = len - 1;\n    while(i < j) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            if(test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "tmp6m9vd9np: /tmp/tmp6m9vd9np.cpp:25: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    std::string num_str;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            num_str += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    result += num_str;\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string res = \"\";\n    int i = 0;\n    while (i < test_str.size()) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            res += test_str[i];\n        }\n        i++;\n    }\n    i = 0;\n    while (i < test_str.size()) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            res += test_str[i];\n        }\n        i++;\n    }\n    return res;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "tmp_aod3ale: /tmp/tmp_aod3ale.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.size() - 1;\n    while (i < j) {\n        if (std::isdigit(test_str[i])) {\n            while (std::isdigit(test_str[j])) {\n                j--;\n            }\n            std::swap(test_str[i], test_str[j]);\n        }\n        i++;\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "tmpaoxjr__r: /tmp/tmpaoxjr__r.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    std::string num = \"\";\n    for(int i = 0; i < test_str.length(); i++) {\n        if(isdigit(test_str[i])) {\n            num += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    result += num;\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    std::string num_str;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            num_str += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    result += num_str;\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while(i < j) {\n        if(!std::isdigit(test_str[i])) {\n            i++;\n        } else if(std::isdigit(test_str[j])) {\n            j--;\n        } else {\n            std::swap(test_str[i], test_str[j]);\n            i++;\n            j--;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "tmps5qrpr5r: /tmp/tmps5qrpr5r.cpp:22: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isdigit(test_str[i])) {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (!isdigit(test_str[i])) {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "tmpmaiwiaol: /tmp/tmpmaiwiaol.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while(i < j) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            if(test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp87n0zecv: /tmp/tmp87n0zecv.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0, j = test_str.length() - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "tmpszna5pkh: /tmp/tmpszna5pkh.cpp:23: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n  int i = 0;\n  int j = test_str.size() - 1;\n  while (i < j) {\n    if (test_str[i] >= '0' && test_str[i] <= '9') {\n      if (test_str[j] >= '0' && test_str[j] <= '9') {\n        j--;\n      } else {\n        std::swap(test_str[i], test_str[j]);\n        i++;\n        j--;\n      }\n    } else {\n      i++;\n    }\n  }\n  return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "tmpxvo9frim: /tmp/tmpxvo9frim.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.size() - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmpoj6ch44x: /tmp/tmpoj6ch44x.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int len = test_str.length();\n    int count = 0;\n    for(int i=0; i<len; i++) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            count++;\n        }\n    }\n    int j = len-1;\n    for(int i=len-1; i>=0; i--) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            test_str[j] = test_str[i];\n            j--;\n        }\n    }\n    for(int i=0; i<len-count; i++) {\n        test_str[i] = ' ';\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "tmps_jwiv37: /tmp/tmps_jwiv37.cpp:26: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.size() - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmpoj6ch44x: /tmp/tmpoj6ch44x.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int len = test_str.length();\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp1inb23a7: /tmp/tmp1inb23a7.cpp:25: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    int i = 0;\n    while (i < test_str.length()) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n            test_str.erase(i, 1);\n        } else {\n            i++;\n        }\n    }\n    return test_str + result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isdigit(test_str[i])) {\n            result.push_back(test_str[i]);\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (!isdigit(test_str[i])) {\n            result.push_back(test_str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmpwjojm_1q: /tmp/tmpwjojm_1q.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    int i = 0;\n    while(test_str[i] != '\\0') {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            result = result + test_str[i];\n        }\n        i++;\n    }\n    i = 0;\n    while(test_str[i] != '\\0') {\n        if(test_str[i] >= 'a' && test_str[i] <= 'z') {\n            result = result + test_str[i];\n        }\n        i++;\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "tmpka8ixmx4: /tmp/tmpka8ixmx4.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp0kjkk6s2: /tmp/tmp0kjkk6s2.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int len = test_str.length();\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            while (j > i && test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            }\n            if (j > i) {\n                std::swap(test_str[i], test_str[j]);\n            }\n        }\n        i++;\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "tmp5cas79zw: /tmp/tmp5cas79zw.cpp:23: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int len = test_str.length();\n    int i = 0;\n    int j = len - 1;\n    while(i < j) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            if(test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "tmp6m9vd9np: /tmp/tmp6m9vd9np.cpp:25: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string str_num;\n    std::string str_alpha;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(isdigit(test_str[i])) {\n            str_num += test_str[i];\n        } else {\n            str_alpha += test_str[i];\n        }\n    }\n    return str_alpha + str_num;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int len = test_str.length();\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp1inb23a7: /tmp/tmp1inb23a7.cpp:25: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    std::string num_str;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(isdigit(test_str[i])) {\n            num_str += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    result += num_str;\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "tmpaw_30dy2: /tmp/tmpaw_30dy2.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    std::string num_str = \"\";\n    for (int i = 0; i < test_str.size(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            num_str += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    result += num_str;\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    int i = 0;\n    while(i < test_str.length()) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n        i++;\n    }\n    i = 0;\n    while(i < test_str.length()) {\n        if(test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n        i++;\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "tmpv01c5eoc: /tmp/tmpv01c5eoc.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while(i < j) {\n        if(!isdigit(test_str[i])) {\n            i++;\n        } else if(!isdigit(test_str[j])) {\n            j--;\n        } else {\n            std::swap(test_str[i], test_str[j]);\n            i++;\n            j--;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "tmp3gzo7x_q: /tmp/tmp3gzo7x_q.cpp:22: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp_2o04m0h: /tmp/tmp_2o04m0h.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0, j = 0;\n    while(i < test_str.size()) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            std::swap(test_str[i], test_str[j]);\n            j++;\n        }\n        i++;\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "tmpn3gjewcs: /tmp/tmpn3gjewcs.cpp:17: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp_2o04m0h: /tmp/tmp_2o04m0h.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp0kjkk6s2: /tmp/tmp0kjkk6s2.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "tmpaw_30dy2: /tmp/tmpaw_30dy2.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while(i < j) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            if(test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp87n0zecv: /tmp/tmp87n0zecv.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    std::string nums = \"\";\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            nums += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    return result + nums;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    std::string num_str = \"\";\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            num_str += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    result += num_str;\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= 'a' && test_str[i] <= 'z') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "tmpd8iqgj9w: /tmp/tmpd8iqgj9w.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp0kjkk6s2: /tmp/tmp0kjkk6s2.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "tmpaw_30dy2: /tmp/tmpaw_30dy2.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int len = test_str.length();\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= 'a' && test_str[j] <= 'z') {\n                char temp = test_str[i];\n                test_str[i] = test_str[j];\n                test_str[j] = temp;\n                i++;\n                j--;\n            } else {\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmpn79gr8yu: /tmp/tmpn79gr8yu.cpp:27: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0, j = test_str.size() - 1;\n    while(i < j) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            if(test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp2sers0yt: /tmp/tmp2sers0yt.cpp:23: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    std::string nums = \"\";\n    for(int i = 0; i < test_str.length(); i++) {\n        if(isdigit(test_str[i])) {\n            nums += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    return result + nums;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122843,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string res;\n    for (int i = 0; i < test_str.size(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            res += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.size(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            res += test_str[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122843,
      "stdout": "",
      "stderr": "tmpjc3817nl: /tmp/tmpjc3817nl.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int len = test_str.length();\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= 'a' && test_str[j] <= 'z') {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            } else {\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122843,
      "stdout": "",
      "stderr": "tmpuj1vwekp: /tmp/tmpuj1vwekp.cpp:25: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    int i = 0;\n    while(i < test_str.length()) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n        i++;\n    }\n    i = 0;\n    while(i < test_str.length()) {\n        if(test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n        i++;\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "tmpv01c5eoc: /tmp/tmpv01c5eoc.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    std::string num = \"\";\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            num += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    result += num;\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122844,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "tmpo9d2nx47: /tmp/tmpo9d2nx47.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.size() - 1;\n    while(i < j) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            if(test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "tmpsk0nc6_f: /tmp/tmpsk0nc6_f.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n  int i = 0;\n  int j = test_str.size() - 1;\n  while(i < j) {\n    if(!std::isdigit(test_str[i])) {\n      i++;\n      continue;\n    }\n    if(std::isdigit(test_str[j])) {\n      j--;\n      continue;\n    }\n    std::swap(test_str[i], test_str[j]);\n    i++;\n    j--;\n  }\n  return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122843,
      "stdout": "",
      "stderr": "tmp_rnzq31k: /tmp/tmp_rnzq31k.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0, j = test_str.size() - 1;\n    while(i < j) {\n        if(!isdigit(test_str[i])) {\n            i++;\n            continue;\n        }\n        if(isdigit(test_str[j])) {\n            j--;\n            continue;\n        }\n        std::swap(test_str[i], test_str[j]);\n        i++;\n        j--;\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122843,
      "stdout": "",
      "stderr": "tmpf8d5hea2: /tmp/tmpf8d5hea2.cpp:23: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int len = test_str.length();\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                char temp = test_str[i];\n                test_str[i] = test_str[j];\n                test_str[j] = temp;\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122844,
      "stdout": "",
      "stderr": "tmpgrzb9fdt: /tmp/tmpgrzb9fdt.cpp:27: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n  int len = test_str.length();\n  int i = 0;\n  int j = len - 1;\n  while(i < j) {\n    if(test_str[i] >= '0' && test_str[i] <= '9') {\n      if(test_str[j] >= '0' && test_str[j] <= '9') {\n        j--;\n      }\n      else {\n        std::swap(test_str[i], test_str[j]);\n        i++;\n        j--;\n      }\n    }\n    else {\n      i++;\n    }\n  }\n  return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122844,
      "stdout": "",
      "stderr": "tmpwde04u7d: /tmp/tmpwde04u7d.cpp:27: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int len = test_str.length();\n    int i = 0;\n    int j = len - 1;\n    while(i < j) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            if(test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            }\n            else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        }\n        else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "tmpkm_xklm_: /tmp/tmpkm_xklm_.cpp:27: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= 'a' && test_str[j] <= 'z') {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            } else {\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp4fu1t34z: /tmp/tmp4fu1t34z.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n  std::string result = \"\";\n  for (int i = 0; i < test_str.length(); i++) {\n    if (test_str[i] >= '0' && test_str[i] <= '9') {\n      result += test_str[i];\n    }\n  }\n  for (int i = 0; i < test_str.length(); i++) {\n    if (test_str[i] < '0' || test_str[i] > '9') {\n      result += test_str[i];\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122844,
      "stdout": "",
      "stderr": "tmprs9f0w82: /tmp/tmprs9f0w82.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "tmpo9d2nx47: /tmp/tmpo9d2nx47.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int len = test_str.length();\n    std::string result = \"\";\n    for(int i = 0; i < len; i++) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for(int i = 0; i < len; i++) {\n        if(test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122843,
      "stdout": "",
      "stderr": "tmpc60aw3a9: /tmp/tmpc60aw3a9.cpp:21: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    std::string num_str;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            num_str += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    result += num_str;\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp0kjkk6s2: /tmp/tmp0kjkk6s2.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp_2o04m0h: /tmp/tmp_2o04m0h.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    std::string num;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            num += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    result += num;\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isdigit(test_str[i])) {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (!isdigit(test_str[i])) {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "tmp_odjpah5: /tmp/tmp_odjpah5.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n  int i = 0;\n  int j = test_str.size() - 1;\n  while (i < j) {\n    if (isdigit(test_str[i]) && isalpha(test_str[j])) {\n      std::swap(test_str[i], test_str[j]);\n      i++;\n      j--;\n    } else if (isdigit(test_str[i]) && isdigit(test_str[j])) {\n      j--;\n    } else if (isalpha(test_str[i]) && isalpha(test_str[j])) {\n      i++;\n      j--;\n    } else if (isalpha(test_str[i]) && isdigit(test_str[j])) {\n      i++;\n    }\n  }\n  return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122844,
      "stdout": "",
      "stderr": "tmp3n6lpw42: /tmp/tmp3n6lpw42.cpp:25: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp0kjkk6s2: /tmp/tmp0kjkk6s2.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.size()-1;\n    while(i < j) {\n        if(!isdigit(test_str[i])) {\n            i++;\n        } else if(isdigit(test_str[j])) {\n            j--;\n        } else {\n            std::swap(test_str[i], test_str[j]);\n            i++;\n            j--;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122843,
      "stdout": "",
      "stderr": "tmpd5cdwag6: /tmp/tmpd5cdwag6.cpp:22: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for(int i = 0; i < test_str.size(); i++) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for(int i = 0; i < test_str.size(); i++) {\n        if(test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "tmpv9kbhu_c: /tmp/tmpv9kbhu_c.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp_2o04m0h: /tmp/tmp_2o04m0h.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp0kjkk6s2: /tmp/tmp0kjkk6s2.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while(i < j) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            if(test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            }\n            else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        }\n        else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122844,
      "stdout": "",
      "stderr": "tmpg_p26vrw: /tmp/tmpg_p26vrw.cpp:26: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int len = test_str.length();\n    int i = 0;\n    int j = len - 1;\n    while(i < j) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            if(test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "tmp6m9vd9np: /tmp/tmp6m9vd9np.cpp:25: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= 'a' && test_str[j] <= 'z') {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            } else {\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp4fu1t34z: /tmp/tmp4fu1t34z.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.size() - 1;\n    while(i < j) {\n        while(i < j && !isdigit(test_str[i])) {\n            i++;\n        }\n        while(i < j && !isalpha(test_str[j])) {\n            j--;\n        }\n        if(i < j) {\n            std::swap(test_str[i], test_str[j]);\n            i++;\n            j--;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122843,
      "stdout": "",
      "stderr": "tmpllwlpdv5: /tmp/tmpllwlpdv5.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "tmpaw_30dy2: /tmp/tmpaw_30dy2.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    std::string num;\n    for(int i = 0; i < test_str.size(); i++) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            num += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    result += num;\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122843,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "tmpaw_30dy2: /tmp/tmpaw_30dy2.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    std::string nums = \"\";\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            nums += test_str[i];\n        }\n        else {\n            result += test_str[i];\n        }\n    }\n    result += nums;\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122844,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}