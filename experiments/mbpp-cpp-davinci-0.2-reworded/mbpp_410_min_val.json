{
  "name": "mbpp_410_min_val",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long() {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the minimum value in a given heterogeneous vector.\nlong min_val(std::vector<Union_std_string_long> listval) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_410_min_val.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = min_val;\n    assert(candidate((std::vector<Union_std_string_long>({(std::string)\"Python\", (std::string)3, (std::string)2, (std::string)4, (std::string)5, (std::string)\"version\"}))) == (2));\n    assert(candidate((std::vector<Union_std_string_long>({(std::string)\"Python\", (std::string)15, (std::string)20, (std::string)25}))) == (15));\n    assert(candidate((std::vector<Union_std_string_long>({(std::string)\"Python\", (std::string)30, (std::string)20, (std::string)40, (std::string)50, (std::string)\"version\"}))) == (20));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long min = listval[0].f1;\n    for(int i = 0; i < listval.size(); i++) {\n        if(listval[i].f1 < min) {\n            min = listval[i].f1;\n        }\n    }\n    return min;",
    "    long min = listval[0].f1;\n    for(int i = 0; i < listval.size(); i++) {\n        if(listval[i].f1 < min) {\n            min = listval[i].f1;\n        }\n    }\n    return min;",
    "    long min = listval[0].f1;\n    for (int i = 0; i < listval.size(); i++) {\n        if (listval[i].f1 < min) {\n            min = listval[i].f1;\n        }\n    }\n    return min;",
    "    long min = listval[0].f1;\n    for (int i = 1; i < listval.size(); i++) {\n        if (listval[i].f1 < min) {\n            min = listval[i].f1;\n        }\n    }\n    return min;",
    "    long min = listval[0].f1;\n    for(int i = 0; i < listval.size(); i++) {\n        if(listval[i].f1 < min) {\n            min = listval[i].f1;\n        }\n    }\n    return min;",
    "    long min = listval[0].f1;\n    for(int i = 0; i < listval.size(); i++) {\n        if(listval[i].f1 < min) {\n            min = listval[i].f1;\n        }\n    }\n    return min;",
    "    long min = listval[0].f1;\n    for (int i = 1; i < listval.size(); i++) {\n        if (listval[i].f1 < min) {\n            min = listval[i].f1;\n        }\n    }\n    return min;",
    "    long min = listval[0].f1;\n    for (int i = 0; i < listval.size(); i++) {\n        if (listval[i].f1 < min) {\n            min = listval[i].f1;\n        }\n    }\n    return min;",
    "    long min = listval[0].f1;\n    for (int i = 0; i < listval.size(); i++) {\n        if (listval[i].f1 < min) {\n            min = listval[i].f1;\n        }\n    }\n    return min;",
    "    long min = listval[0].f1;\n    for(int i = 1; i < listval.size(); i++) {\n        if(min > listval[i].f1) {\n            min = listval[i].f1;\n        }\n    }\n    return min;",
    "    long min = listval[0].f1;\n    for (int i = 0; i < listval.size(); i++) {\n        if (listval[i].f1 < min) {\n            min = listval[i].f1;\n        }\n    }\n    return min;",
    "    long min = listval[0].f1;\n    for (int i = 1; i < listval.size(); i++) {\n        if (listval[i].f1 < min) {\n            min = listval[i].f1;\n        }\n    }\n    return min;",
    "    long min = listval[0].f1;\n    for(int i = 0; i < listval.size(); i++) {\n        if(listval[i].f1 < min) {\n            min = listval[i].f1;\n        }\n    }\n    return min;",
    "    long min = listval[0].f1;\n    for(int i = 0; i < listval.size(); i++) {\n        if(listval[i].f1 < min) {\n            min = listval[i].f1;\n        }\n    }\n    return min;",
    "    long min = listval[0].f1;\n    for(int i=1;i<listval.size();i++) {\n        if(listval[i].f1 < min) {\n            min = listval[i].f1;\n        }\n    }\n    return min;",
    "    long min = listval[0].f1;\n    for(int i = 0; i < listval.size(); i++) {\n        if(min > listval[i].f1) {\n            min = listval[i].f1;\n        }\n    }\n    return min;",
    "    long min = listval[0].f1;\n    for(int i=0; i<listval.size(); i++) {\n        if(listval[i].f1 < min) {\n            min = listval[i].f1;\n        }\n    }\n    return min;",
    "    long min = listval[0].f1;\n    for (int i = 1; i < listval.size(); i++) {\n        if (listval[i].f1 < min) {\n            min = listval[i].f1;\n        }\n    }\n    return min;",
    "    long min = listval[0].f1;\n    for (int i = 0; i < listval.size(); i++) {\n        if (listval[i].f1 < min) {\n            min = listval[i].f1;\n        }\n    }\n    return min;",
    "    long min_val = listval[0].f1;\n    for (int i = 1; i < listval.size(); i++) {\n        if (listval[i].f1 < min_val) {\n            min_val = listval[i].f1;\n        }\n    }\n    return min_val;"
  ]
}