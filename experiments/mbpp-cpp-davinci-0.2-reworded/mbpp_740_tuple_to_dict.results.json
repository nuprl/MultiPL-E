{
  "name": "mbpp_740_tuple_to_dict",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_740_tuple_to_dict.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    for (int i = 0; i < test_tup.size(); i += 2) {\n        test_map[test_tup[i]] = test_tup[i + 1];\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509876,
      "stdout": "",
      "stderr": "/tmp/tmp29f5esck.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp29f5esck.cpp:6:34: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for (int i = 0; i < test_tup.size(); i += 2) {\n      |                                  ^~~~\n/tmp/tmp29f5esck.cpp:7:28: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_map[test_tup[i]] = test_tup[i + 1];\n      |                            ^\n/tmp/tmp29f5esck.cpp:7:47: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_map[test_tup[i]] = test_tup[i + 1];\n      |                                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp29f5esck.cpp:2:\n/tmp/tmp29f5esck.cpp: In function \u2018int main()\u2019:\n/tmp/tmp29f5esck.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp29f5esck.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp29f5esck.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i = 0;\n    while (test_tup) {\n        test_dict[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509876,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpl66a7g5o.cpp:2:\n/tmp/tmpl66a7g5o.cpp: In function \u2018int main()\u2019:\n/tmp/tmpl66a7g5o.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpl66a7g5o.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpl66a7g5o.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    test_dict[1] = 1;\n    test_dict[2] = 2;\n    test_dict[3] = 3;\n    test_dict[4] = 4;\n    test_dict[5] = 5;\n    test_dict[6] = 6;\n    test_dict[7] = 7;\n    test_dict[8] = 8;\n    test_dict[9] = 9;\n    test_dict[10] = 10;\n    test_dict[11] = 11;\n    test_dict[12] = 12;\n    test_dict[13] = 13;\n    test_dict[14] = 14;\n    test_dict[15] = 15;\n    test_dict[16] = 16;\n    test_dict[17] = 17;\n    test_dict[18] = 18;\n    test_dict[19] = 19;\n    test_dict[20] = 20;\n    test_dict[21] = 21;\n    test_dict[22] = 22;\n    test_dict[23] = 23;\n    test_dict[24] = 24;\n    test_dict[25] = 25;\n    test_dict[26] = 26;\n    test_dict[27] = 27;\n    test_dict[28] = 28;\n    test_dict[29] = 29;\n    test_dict[30] = 30;\n    test_dict[31] = 31;\n    test_dict[32] = 32;\n    test_dict[33] = 33;\n    test_dict[34] = 34;\n    test_dict[35] = 35;\n    test_dict[36] = 36;\n    test_dict[37] = 37;\n    test_dict[38] = 38;\n    test_dict[39] = 39;\n    test_dict[40] = 40;\n    test_dict[41] = 41;\n    test_dict[42] = 42;\n    test_dict[43] = 43;\n    test_dict[44] = 44;\n    test_dict[45] = 45;\n    test\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509876,
      "stdout": "",
      "stderr": "/tmp/tmpma_uh2_8.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpma_uh2_8.cpp:51:5: error: \u2018test\u2019 was not declared in this scope\n   51 |     test\n      |     ^~~~\n/tmp/tmpma_uh2_8.cpp:52:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   52 | }\n      | ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpma_uh2_8.cpp:2:\n/tmp/tmpma_uh2_8.cpp: In function \u2018int main()\u2019:\n/tmp/tmpma_uh2_8.cpp:55:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   55 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpma_uh2_8.cpp:56:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   56 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpma_uh2_8.cpp:57:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   57 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long key = test_tup[0];\n    long value = test_tup[1];\n    for (int i = 2; i < test_tup.length; i++) {\n        if (i % 2 == 0) {\n            key = test_tup[i];\n        } else {\n            value = test_tup[i];\n            test_map[key] = value;\n        }\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509876,
      "stdout": "",
      "stderr": "/tmp/tmpvtdb_szj.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpvtdb_szj.cpp:6:26: error: invalid types \u2018long int[int]\u2019 for array subscript\n    6 |     long key = test_tup[0];\n      |                          ^\n/tmp/tmpvtdb_szj.cpp:7:28: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |     long value = test_tup[1];\n      |                            ^\n/tmp/tmpvtdb_szj.cpp:8:34: error: request for member \u2018length\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    8 |     for (int i = 2; i < test_tup.length; i++) {\n      |                                  ^~~~~~\n/tmp/tmpvtdb_szj.cpp:10:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n   10 |             key = test_tup[i];\n      |                             ^\n/tmp/tmpvtdb_szj.cpp:12:31: error: invalid types \u2018long int[int]\u2019 for array subscript\n   12 |             value = test_tup[i];\n      |                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpvtdb_szj.cpp:2:\n/tmp/tmpvtdb_szj.cpp: In function \u2018int main()\u2019:\n/tmp/tmpvtdb_szj.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpvtdb_szj.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long i = 0;\n    while(test_tup) {\n        test_map[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509876,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpy619xawe.cpp:2:\n/tmp/tmpy619xawe.cpp: In function \u2018int main()\u2019:\n/tmp/tmpy619xawe.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpy619xawe.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpy619xawe.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long i = 0;\n    while (test_tup != 0) {\n        test_map[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509876,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmps3b0038s.cpp:2:\n/tmp/tmps3b0038s.cpp: In function \u2018int main()\u2019:\n/tmp/tmps3b0038s.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmps3b0038s.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmps3b0038s.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long i = 0;\n    while (test_tup) {\n        test_map[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509876,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp_gn5paar.cpp:2:\n/tmp/tmp_gn5paar.cpp: In function \u2018int main()\u2019:\n/tmp/tmp_gn5paar.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp_gn5paar.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp_gn5paar.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long key = 0;\n    long value = 0;\n    for (int i = 0; i < test_tup.size(); i++) {\n        if (i % 2 == 0) {\n            key = test_tup[i];\n        }\n        else {\n            value = test_tup[i];\n            test_map[key] = value;\n        }\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509876,
      "stdout": "",
      "stderr": "/tmp/tmpcat8vyh9.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpcat8vyh9.cpp:8:34: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    8 |     for (int i = 0; i < test_tup.size(); i++) {\n      |                                  ^~~~\n/tmp/tmpcat8vyh9.cpp:10:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n   10 |             key = test_tup[i];\n      |                             ^\n/tmp/tmpcat8vyh9.cpp:13:31: error: invalid types \u2018long int[int]\u2019 for array subscript\n   13 |             value = test_tup[i];\n      |                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpcat8vyh9.cpp:2:\n/tmp/tmpcat8vyh9.cpp: In function \u2018int main()\u2019:\n/tmp/tmpcat8vyh9.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpcat8vyh9.cpp:22:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   22 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpcat8vyh9.cpp:23:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   23 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> dict;\n    long i = 0;\n    long j = 1;\n    while (j < test_tup.size()) {\n        dict[test_tup[i]] = test_tup[j];\n        i += 2;\n        j += 2;\n    }\n    return dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509876,
      "stdout": "",
      "stderr": "/tmp/tmp_yml5uvq.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp_yml5uvq.cpp:8:25: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    8 |     while (j < test_tup.size()) {\n      |                         ^~~~\n/tmp/tmp_yml5uvq.cpp:9:24: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    9 |         dict[test_tup[i]] = test_tup[j];\n      |                        ^\n/tmp/tmp_yml5uvq.cpp:9:39: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    9 |         dict[test_tup[i]] = test_tup[j];\n      |                                       ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp_yml5uvq.cpp:2:\n/tmp/tmp_yml5uvq.cpp: In function \u2018int main()\u2019:\n/tmp/tmp_yml5uvq.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp_yml5uvq.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp_yml5uvq.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(7, 8, 9, 10",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long i = 0;\n    while(test_tup) {\n        test_map[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509876,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpy619xawe.cpp:2:\n/tmp/tmpy619xawe.cpp: In function \u2018int main()\u2019:\n/tmp/tmpy619xawe.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpy619xawe.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpy619xawe.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long i = 0;\n    while (test_tup) {\n        test_map[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509876,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp_gn5paar.cpp:2:\n/tmp/tmp_gn5paar.cpp: In function \u2018int main()\u2019:\n/tmp/tmp_gn5paar.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp_gn5paar.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp_gn5paar.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    std::tuple<long,long,long,long,long,long,long,long,long,long> test_tuple = test_tup;\n    for (int i = 0; i < std::tuple_size<decltype(test_tuple)>::value; i += 2) {\n        test_dict[std::get<i>(test_tuple)] = std::get<i + 1>(test_tuple);\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509876,
      "stdout": "",
      "stderr": "/tmp/tmpd44_dyzg.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpd44_dyzg.cpp:6:80: error: conversion from \u2018long int\u2019 to non-scalar type \u2018std::tuple<long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>\u2019 requested\n    6 |     std::tuple<long,long,long,long,long,long,long,long,long,long> test_tuple = test_tup;\n      |                                                                                ^~~~~~~~\n/tmp/tmpd44_dyzg.cpp:8:41: error: no matching function for call to \u2018get<i>(std::tuple<long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>&)\u2019\n    8 |         test_dict[std::get<i>(test_tuple)] = std::get<i + 1>(test_tuple);\n      |                                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpd44_dyzg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/utility:219:5: note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2> constexpr typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type& std::get(std::pair<_Tp1, _Tp2>&)\u2019\n  219 |     get(std::pair<_Tp1, _Tp2>& __in) noexcept\n      |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/utility:219:5: note:   template argument deduction/substitution failed:\n/tmp/tmpd44_dyzg.cpp:8:41: error: the value of \u2018i\u2019 is not usable in a constant expression\n    8 |         test_dict[std::get<i>(test_tuple)] = std::get<i + 1>(test_tuple);\n      |                                         ^\n/tmp/tmpd44_dyzg.cpp:7:14: note: \u2018int i\u2019 is not const\n    7 |     for (int i = 0; i < std::tuple_size<decltype(test_tuple)>::value; i += 2) {\n      |              ^\n/tmp/tmpd44_dyzg.cpp:8:41: note: in template argument for type \u2018long unsigned int\u2019\n    8 |         test_dict[std::get<i>(test_tuple",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long test_tup_arr[test_tup];\n    for (long i = 0; i < test_tup; i++) {\n        test_tup_arr[i] = i;\n    }\n    for (long i = 0; i < test_tup; i++) {\n        test_dict[test_tup_arr[i]] = test_tup_arr[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509876,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpbtrgtro7.cpp:2:\n/tmp/tmpbtrgtro7.cpp: In function \u2018int main()\u2019:\n/tmp/tmpbtrgtro7.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpbtrgtro7.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpbtrgtro7.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    for (int i = 0; i < test_tup.size(); i+=2) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509876,
      "stdout": "",
      "stderr": "/tmp/tmpxvhwfqle.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpxvhwfqle.cpp:6:34: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for (int i = 0; i < test_tup.size(); i+=2) {\n      |                                  ^~~~\n/tmp/tmpxvhwfqle.cpp:7:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmpxvhwfqle.cpp:7:46: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpxvhwfqle.cpp:2:\n/tmp/tmpxvhwfqle.cpp: In function \u2018int main()\u2019:\n/tmp/tmpxvhwfqle.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpxvhwfqle.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpxvhwfqle.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     asse",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    std::tuple<long,long,long,long,long,long,long,long,long,long> test_tuple = test_tup;\n    for(int i=0;i<9;i++) {\n        test_map[std::get<i>(test_tuple)] = std::get<i+1>(test_tuple);\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509876,
      "stdout": "",
      "stderr": "/tmp/tmpcjezvs4e.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpcjezvs4e.cpp:6:80: error: conversion from \u2018long int\u2019 to non-scalar type \u2018std::tuple<long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>\u2019 requested\n    6 |     std::tuple<long,long,long,long,long,long,long,long,long,long> test_tuple = test_tup;\n      |                                                                                ^~~~~~~~\n/tmp/tmpcjezvs4e.cpp:8:40: error: no matching function for call to \u2018get<i>(std::tuple<long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>&)\u2019\n    8 |         test_map[std::get<i>(test_tuple)] = std::get<i+1>(test_tuple);\n      |                                        ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpcjezvs4e.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/utility:219:5: note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2> constexpr typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type& std::get(std::pair<_Tp1, _Tp2>&)\u2019\n  219 |     get(std::pair<_Tp1, _Tp2>& __in) noexcept\n      |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/utility:219:5: note:   template argument deduction/substitution failed:\n/tmp/tmpcjezvs4e.cpp:8:40: error: the value of \u2018i\u2019 is not usable in a constant expression\n    8 |         test_map[std::get<i>(test_tuple)] = std::get<i+1>(test_tuple);\n      |                                        ^\n/tmp/tmpcjezvs4e.cpp:7:13: note: \u2018int i\u2019 is not const\n    7 |     for(int i=0;i<9;i++) {\n      |             ^\n/tmp/tmpcjezvs4e.cpp:8:40: note: in template argument for type \u2018long unsigned int\u2019\n    8 |         test_map[std::get<i>(test_tuple)] = std::get<i+1>(test_tuple);\n      |                        ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long key = 0;\n    long value = 0;\n    for (int i = 0; i < test_tup.size(); i++) {\n        if (i % 2 == 0) {\n            key = test_tup[i];\n        } else {\n            value = test_tup[i];\n            test_dict[key] = value;\n        }\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509876,
      "stdout": "",
      "stderr": "/tmp/tmpu3m0qmzp.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpu3m0qmzp.cpp:8:34: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    8 |     for (int i = 0; i < test_tup.size(); i++) {\n      |                                  ^~~~\n/tmp/tmpu3m0qmzp.cpp:10:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n   10 |             key = test_tup[i];\n      |                             ^\n/tmp/tmpu3m0qmzp.cpp:12:31: error: invalid types \u2018long int[int]\u2019 for array subscript\n   12 |             value = test_tup[i];\n      |                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpu3m0qmzp.cpp:2:\n/tmp/tmpu3m0qmzp.cpp: In function \u2018int main()\u2019:\n/tmp/tmpu3m0qmzp.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpu3m0qmzp.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpu3m0qmzp.cpp:22:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   22 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long test_tup_len = std::tuple_size<decltype(test_tup)>::value;\n    for(long i = 0; i < test_tup_len; i++) {\n        test_dict[std::get<0>(test_tup)] = std::get<1>(test_tup);\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509876,
      "stdout": "",
      "stderr": "/tmp/tmpmgrs1u8w.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpmgrs1u8w.cpp:6:62: error: incomplete type \u2018std::tuple_size<long int>\u2019 used in nested name specifier\n    6 |     long test_tup_len = std::tuple_size<decltype(test_tup)>::value;\n      |                                                              ^~~~~\n/tmp/tmpmgrs1u8w.cpp:8:39: error: no matching function for call to \u2018get<0>(long int&)\u2019\n    8 |         test_dict[std::get<0>(test_tup)] = std::get<1>(test_tup);\n      |                                       ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpmgrs1u8w.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/utility:219:5: note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2> constexpr typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type& std::get(std::pair<_Tp1, _Tp2>&)\u2019\n  219 |     get(std::pair<_Tp1, _Tp2>& __in) noexcept\n      |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/utility:219:5: note:   template argument deduction/substitution failed:\n/tmp/tmpmgrs1u8w.cpp:8:39: note:   mismatched types \u2018std::pair<_Tp1, _Tp2>\u2019 and \u2018long int\u2019\n    8 |         test_dict[std::get<0>(test_tup)] = std::get<1>(test_tup);\n      |                                       ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpmgrs1u8w.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/utility:224:5: note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2> constexpr typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&& std::get(std::pair<_Tp1, _Tp2>&&)\u2019\n  224 |     get(std::pair<_Tp1, _Tp2>&& __in) noexcept\n    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i = 0;\n    while (test_tup) {\n        test_dict[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509876,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpl66a7g5o.cpp:2:\n/tmp/tmpl66a7g5o.cpp: In function \u2018int main()\u2019:\n/tmp/tmpl66a7g5o.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpl66a7g5o.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpl66a7g5o.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i = 0;\n    while (test_tup) {\n        test_dict[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509876,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpl66a7g5o.cpp:2:\n/tmp/tmpl66a7g5o.cpp: In function \u2018int main()\u2019:\n/tmp/tmpl66a7g5o.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpl66a7g5o.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpl66a7g5o.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i=0;\n    while(test_tup) {\n        test_dict[i] = test_tup%10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509876,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpy1bjq4pe.cpp:2:\n/tmp/tmpy1bjq4pe.cpp: In function \u2018int main()\u2019:\n/tmp/tmpy1bjq4pe.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpy1bjq4pe.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpy1bjq4pe.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    for(int i=0;i<test_tup.size();i+=2) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "/tmp/tmpsjk9_1ie.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpsjk9_1ie.cpp:6:28: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(int i=0;i<test_tup.size();i+=2) {\n      |                            ^~~~\n/tmp/tmpsjk9_1ie.cpp:7:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmpsjk9_1ie.cpp:7:46: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpsjk9_1ie.cpp:2:\n/tmp/tmpsjk9_1ie.cpp: In function \u2018int main()\u2019:\n/tmp/tmpsjk9_1ie.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpsjk9_1ie.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpsjk9_1ie.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long key = 0;\n    long value = 0;\n    for (int i = 0; i < test_tup.size(); i++) {\n        if (i % 2 == 0) {\n            key = test_tup[i];\n        }\n        else {\n            value = test_tup[i];\n            test_dict[key] = value;\n        }\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "/tmp/tmpiczk2wv5.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpiczk2wv5.cpp:8:34: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    8 |     for (int i = 0; i < test_tup.size(); i++) {\n      |                                  ^~~~\n/tmp/tmpiczk2wv5.cpp:10:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n   10 |             key = test_tup[i];\n      |                             ^\n/tmp/tmpiczk2wv5.cpp:13:31: error: invalid types \u2018long int[int]\u2019 for array subscript\n   13 |             value = test_tup[i];\n      |                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpiczk2wv5.cpp:2:\n/tmp/tmpiczk2wv5.cpp: In function \u2018int main()\u2019:\n/tmp/tmpiczk2wv5.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpiczk2wv5.cpp:22:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   22 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpiczk2wv5.cpp:23:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   23 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    std::tuple<long,long,long,long,long> test_tuple = std::make_tuple(test_tup,test_tup+1,test_tup+2,test_tup+3,test_tup+4);\n    std::cout << \"Tuple: \" << std::get<0>(test_tuple) << \", \" << std::get<1>(test_tuple) << \", \" << std::get<2>(test_tuple) << \", \" << std::get<3>(test_tuple) << \", \" << std::get<4>(test_tuple) << std::endl;\n    test_dict[std::get<0>(test_tuple)] = std::get<1>(test_tuple);\n    test_dict[std::get<1>(test_tuple)] = std::get<2>(test_tuple);\n    test_dict[std::get<2>(test_tuple)] = std::get<3>(test_tuple);\n    test_dict[std::get<3>(test_tuple)] = std::get<4>(test_tuple);\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpw15n_a4q.cpp:2:\n/tmp/tmpw15n_a4q.cpp: In function \u2018int main()\u2019:\n/tmp/tmpw15n_a4q.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpw15n_a4q.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpw15n_a4q.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    std::tuple<long,long,long,long,long,long,long,long,long,long> test_tuple = test_tup;\n    for(int i=0;i<10;i+=2) {\n        test_dict[std::get<i>(test_tuple)] = std::get<i+1>(test_tuple);\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122657,
      "stdout": "",
      "stderr": "/tmp/tmp35x3uq5u.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp35x3uq5u.cpp:6:80: error: conversion from \u2018long int\u2019 to non-scalar type \u2018std::tuple<long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>\u2019 requested\n    6 |     std::tuple<long,long,long,long,long,long,long,long,long,long> test_tuple = test_tup;\n      |                                                                                ^~~~~~~~\n/tmp/tmp35x3uq5u.cpp:8:41: error: no matching function for call to \u2018get<i>(std::tuple<long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>&)\u2019\n    8 |         test_dict[std::get<i>(test_tuple)] = std::get<i+1>(test_tuple);\n      |                                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp35x3uq5u.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/utility:219:5: note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2> constexpr typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type& std::get(std::pair<_Tp1, _Tp2>&)\u2019\n  219 |     get(std::pair<_Tp1, _Tp2>& __in) noexcept\n      |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/utility:219:5: note:   template argument deduction/substitution failed:\n/tmp/tmp35x3uq5u.cpp:8:41: error: the value of \u2018i\u2019 is not usable in a constant expression\n    8 |         test_dict[std::get<i>(test_tuple)] = std::get<i+1>(test_tuple);\n      |                                         ^\n/tmp/tmp35x3uq5u.cpp:7:13: note: \u2018int i\u2019 is not const\n    7 |     for(int i=0;i<10;i+=2) {\n      |             ^\n/tmp/tmp35x3uq5u.cpp:8:41: note: in template argument for type \u2018long unsigned int\u2019\n    8 |         test_dict[std::get<i>(test_tuple)] = std::get<i+1>(test_tuple);\n      |                 ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long i = 0;\n    while(test_tup) {\n        test_map[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509876,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpy619xawe.cpp:2:\n/tmp/tmpy619xawe.cpp: In function \u2018int main()\u2019:\n/tmp/tmpy619xawe.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpy619xawe.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpy619xawe.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    std::tuple<long,long,long,long,long,long,long,long,long,long> test_tuple = test_tup;\n    for (int i = 0; i < std::tuple_size<decltype(test_tuple)>::value; i+=2) {\n        test_map[std::get<i>(test_tuple)] = std::get<i+1>(test_tuple);\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122657,
      "stdout": "",
      "stderr": "/tmp/tmpumd6gsdt.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpumd6gsdt.cpp:6:80: error: conversion from \u2018long int\u2019 to non-scalar type \u2018std::tuple<long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>\u2019 requested\n    6 |     std::tuple<long,long,long,long,long,long,long,long,long,long> test_tuple = test_tup;\n      |                                                                                ^~~~~~~~\n/tmp/tmpumd6gsdt.cpp:8:40: error: no matching function for call to \u2018get<i>(std::tuple<long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>&)\u2019\n    8 |         test_map[std::get<i>(test_tuple)] = std::get<i+1>(test_tuple);\n      |                                        ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpumd6gsdt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/utility:219:5: note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2> constexpr typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type& std::get(std::pair<_Tp1, _Tp2>&)\u2019\n  219 |     get(std::pair<_Tp1, _Tp2>& __in) noexcept\n      |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/utility:219:5: note:   template argument deduction/substitution failed:\n/tmp/tmpumd6gsdt.cpp:8:40: error: the value of \u2018i\u2019 is not usable in a constant expression\n    8 |         test_map[std::get<i>(test_tuple)] = std::get<i+1>(test_tuple);\n      |                                        ^\n/tmp/tmpumd6gsdt.cpp:7:14: note: \u2018int i\u2019 is not const\n    7 |     for (int i = 0; i < std::tuple_size<decltype(test_tuple)>::value; i+=2) {\n      |              ^\n/tmp/tmpumd6gsdt.cpp:8:40: note: in template argument for type \u2018long unsigned int\u2019\n    8 |         test_map[std::get<i>(test_tuple)] = std::g",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    for (long i = 0; i < test_tup.size(); i+=2) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "/tmp/tmp1k2sjhd4.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp1k2sjhd4.cpp:6:35: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for (long i = 0; i < test_tup.size(); i+=2) {\n      |                                   ^~~~\n/tmp/tmp1k2sjhd4.cpp:7:29: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmp1k2sjhd4.cpp:7:46: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp1k2sjhd4.cpp:2:\n/tmp/tmp1k2sjhd4.cpp: In function \u2018int main()\u2019:\n/tmp/tmp1k2sjhd4.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp1k2sjhd4.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp1k2sjhd4.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(7, 8, 9, 10",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    std::tuple<long,long,long,long,long> test_tuple = std::make_tuple(test_tup,test_tup,test_tup,test_tup,test_tup);\n    auto it = test_tuple;\n    while(it != std::tuple<>()) {\n        test_map[std::get<0>(it)] = std::get<1>(it);\n        it = std::tuple_cat(std::tuple_cat(std::tuple_cat(std::tuple_cat(std::tuple<>(),std::make_tuple(std::get<2>(it))),std::make_tuple(std::get<3>(it))),std::make_tuple(std::get<4>(it))),std::make_tuple(std::get<5>(it)));\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122666,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/functional:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/pstl/glue_algorithm_defs.h:13,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:71,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpg8zh3wnd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple: In instantiation of \u2018constexpr bool std::operator==(const std::tuple<_Tps ...>&, const std::tuple<_Elements ...>&) [with _TElements = {long int, long int, long int, long int, long int}; _UElements = {}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:1447:20:   required from here\n/tmp/tmpg8zh3wnd.cpp:8:14:   in \u2018constexpr\u2019 expansion of \u2018std::operator!=<long int, long int, long int, long int, long int>(it, std::tuple<>())\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:1422:43: error: static assertion failed: tuple objects can only be compared if they have equal sizes.\n 1422 |       static_assert(sizeof...(_TElements) == sizeof...(_UElements),\n      |                     ~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple: In instantiation of \u2018struct std::tuple_element<0, std::tuple<> >\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/utility:114:11:   required by substitution of \u2018template<long unsigned int __i, class _Tp> using __tuple_element_t = typename std::tuple_element::type [with long unsigned int __i = 0; _Tp = std::tuple<>]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:1341:5:   required by substitution of \u2018template<long unsigned int __i, class ... _Elements> constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >&& std::get(const std::tuple<_Elements ...>&&) [with long unsigned int __i = 0; _Elements = {}]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:1394:49:   required from",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long i;\n    for(i=0;i<test_tup.size();i+=2) {\n        test_map[test_tup[i]] = test_tup[i+1];\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122657,
      "stdout": "",
      "stderr": "/tmp/tmp59eu6iea.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp59eu6iea.cpp:7:24: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    7 |     for(i=0;i<test_tup.size();i+=2) {\n      |                        ^~~~\n/tmp/tmp59eu6iea.cpp:8:28: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    8 |         test_map[test_tup[i]] = test_tup[i+1];\n      |                            ^\n/tmp/tmp59eu6iea.cpp:8:45: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    8 |         test_map[test_tup[i]] = test_tup[i+1];\n      |                                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp59eu6iea.cpp:2:\n/tmp/tmp59eu6iea.cpp: In function \u2018int main()\u2019:\n/tmp/tmp59eu6iea.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp59eu6iea.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp59eu6iea.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(st",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> dict;\n    long key = 0;\n    long value = 0;\n    while (test_tup != 0) {\n        value = test_tup % 10;\n        test_tup /= 10;\n        key = test_tup % 10;\n        test_tup /= 10;\n        dict[key] = value;\n    }\n    return dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122657,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp_w4jt4mr.cpp:2:\n/tmp/tmp_w4jt4mr.cpp: In function \u2018int main()\u2019:\n/tmp/tmp_w4jt4mr.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp_w4jt4mr.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp_w4jt4mr.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i = 0;\n    while (test_tup != 0) {\n        test_dict[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122657,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpam3q26ik.cpp:2:\n/tmp/tmpam3q26ik.cpp: In function \u2018int main()\u2019:\n/tmp/tmpam3q26ik.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpam3q26ik.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpam3q26ik.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long i = 0;\n    for (auto it = test_tup.begin(); it != test_tup.end(); it++) {\n        if (i % 2 == 0) {\n            test_map[*it] = *(it + 1);\n        }\n        i++;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "/tmp/tmp1959jz1f.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp1959jz1f.cpp:7:29: error: request for member \u2018begin\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    7 |     for (auto it = test_tup.begin(); it != test_tup.end(); it++) {\n      |                             ^~~~~\n/tmp/tmp1959jz1f.cpp:7:53: error: request for member \u2018end\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    7 |     for (auto it = test_tup.begin(); it != test_tup.end(); it++) {\n      |                                                     ^~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp1959jz1f.cpp:2:\n/tmp/tmp1959jz1f.cpp: In function \u2018int main()\u2019:\n/tmp/tmp1959jz1f.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp1959jz1f.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp1959jz1f.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    for(int i=0;i<test_tup.size();i+=2) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "/tmp/tmpsjk9_1ie.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpsjk9_1ie.cpp:6:28: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(int i=0;i<test_tup.size();i+=2) {\n      |                            ^~~~\n/tmp/tmpsjk9_1ie.cpp:7:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmpsjk9_1ie.cpp:7:46: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpsjk9_1ie.cpp:2:\n/tmp/tmpsjk9_1ie.cpp: In function \u2018int main()\u2019:\n/tmp/tmpsjk9_1ie.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpsjk9_1ie.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpsjk9_1ie.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    for(int i = 0; i < test_tup.size(); i++) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "/tmp/tmpf_4sx_xl.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpf_4sx_xl.cpp:6:33: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(int i = 0; i < test_tup.size(); i++) {\n      |                                 ^~~~\n/tmp/tmpf_4sx_xl.cpp:7:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmpf_4sx_xl.cpp:7:46: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpf_4sx_xl.cpp:2:\n/tmp/tmpf_4sx_xl.cpp: In function \u2018int main()\u2019:\n/tmp/tmpf_4sx_xl.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpf_4sx_xl.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpf_4sx_xl.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    for (long i = 0; i < test_tup.size(); i++) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "/tmp/tmp5ihoahhf.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp5ihoahhf.cpp:6:35: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for (long i = 0; i < test_tup.size(); i++) {\n      |                                   ^~~~\n/tmp/tmp5ihoahhf.cpp:7:29: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmp5ihoahhf.cpp:7:46: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp5ihoahhf.cpp:2:\n/tmp/tmp5ihoahhf.cpp: In function \u2018int main()\u2019:\n/tmp/tmp5ihoahhf.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp5ihoahhf.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp5ihoahhf.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(7, 8, 9, 10,",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    std::tuple<long,long,long,long,long,long,long,long,long,long> test_tuple(test_tup);\n    for(int i=0;i<9;i++) {\n        test_dict[std::get<i>(test_tuple)] = std::get<i+1>(test_tuple);\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122660,
      "stdout": "",
      "stderr": "/tmp/tmpjbi5_sty.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpjbi5_sty.cpp:6:86: error: no matching function for call to \u2018std::tuple<long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>::tuple(long int&)\u2019\n    6 |     std::tuple<long,long,long,long,long,long,long,long,long,long> test_tuple(test_tup);\n      |                                                                                      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/functional:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/pstl/glue_algorithm_defs.h:13,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:71,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpjbi5_sty.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:808:11: note: candidate: \u2018template<class _Alloc, class _Dummy, class ... _UElements, typename std::enable_if<((std::_TC<((10 == sizeof... (_UElements)) && (! std::is_same<std::tuple<long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>, std::tuple<_Tail ...> >::value)), long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>::_MoveConstructibleTuple<_UElements ...>() && (! std::_TC<((10 == sizeof... (_UElements)) && (! std::is_same<std::tuple<long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>, std::tuple<_Tail ...> >::value)), long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>())) && std::_TC<(std::is_same<_Dummy, void>::value && (10 == 1)), long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>::_NonNestedTuple<tuple<_Tail ...>&&>()), bool>::type <anonymous> > std::tu",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    for (int i = 0; i < test_tup.size(); i+=2) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509876,
      "stdout": "",
      "stderr": "/tmp/tmpxvhwfqle.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpxvhwfqle.cpp:6:34: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for (int i = 0; i < test_tup.size(); i+=2) {\n      |                                  ^~~~\n/tmp/tmpxvhwfqle.cpp:7:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmpxvhwfqle.cpp:7:46: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpxvhwfqle.cpp:2:\n/tmp/tmpxvhwfqle.cpp: In function \u2018int main()\u2019:\n/tmp/tmpxvhwfqle.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpxvhwfqle.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpxvhwfqle.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     asse",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> dict;\n    std::tuple<long,long,long,long,long,long,long,long,long,long> tup(test_tup);\n    std::transform(tup.begin(), tup.end(), tup.begin()+1, std::inserter(dict, dict.begin()),\n                   [](auto a, auto b) { return std::make_pair(a, b); });\n    return dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "/tmp/tmpgctgpd_1.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpgctgpd_1.cpp:6:79: error: no matching function for call to \u2018std::tuple<long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>::tuple(long int&)\u2019\n    6 |     std::tuple<long,long,long,long,long,long,long,long,long,long> tup(test_tup);\n      |                                                                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/functional:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/pstl/glue_algorithm_defs.h:13,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:71,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpgctgpd_1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:808:11: note: candidate: \u2018template<class _Alloc, class _Dummy, class ... _UElements, typename std::enable_if<((std::_TC<((10 == sizeof... (_UElements)) && (! std::is_same<std::tuple<long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>, std::tuple<_Tail ...> >::value)), long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>::_MoveConstructibleTuple<_UElements ...>() && (! std::_TC<((10 == sizeof... (_UElements)) && (! std::is_same<std::tuple<long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>, std::tuple<_Tail ...> >::value)), long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>())) && std::_TC<(std::is_same<_Dummy, void>::value && (10 == 1)), long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>::_NonNestedTuple<tuple<_Tail ...>&&>()), bool>::type <anonymous> > std::tuple<_Elements>",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> dict;\n    long i = 0;\n    while (test_tup) {\n        dict[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122657,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpiv4ggy42.cpp:2:\n/tmp/tmpiv4ggy42.cpp: In function \u2018int main()\u2019:\n/tmp/tmpiv4ggy42.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpiv4ggy42.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpiv4ggy42.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    for (int i = 0; i < test_tup.size(); i+=2) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509876,
      "stdout": "",
      "stderr": "/tmp/tmpxvhwfqle.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpxvhwfqle.cpp:6:34: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for (int i = 0; i < test_tup.size(); i+=2) {\n      |                                  ^~~~\n/tmp/tmpxvhwfqle.cpp:7:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmpxvhwfqle.cpp:7:46: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpxvhwfqle.cpp:2:\n/tmp/tmpxvhwfqle.cpp: In function \u2018int main()\u2019:\n/tmp/tmpxvhwfqle.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpxvhwfqle.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpxvhwfqle.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     asse",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long key = 0;\n    long value = 0;\n    for(int i=0; i<test_tup.size(); i++) {\n        if(i%2 == 0) {\n            key = test_tup[i];\n        } else {\n            value = test_tup[i];\n            test_map[key] = value;\n        }\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122657,
      "stdout": "",
      "stderr": "/tmp/tmptntp2bpt.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmptntp2bpt.cpp:8:29: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    8 |     for(int i=0; i<test_tup.size(); i++) {\n      |                             ^~~~\n/tmp/tmptntp2bpt.cpp:10:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n   10 |             key = test_tup[i];\n      |                             ^\n/tmp/tmptntp2bpt.cpp:12:31: error: invalid types \u2018long int[int]\u2019 for array subscript\n   12 |             value = test_tup[i];\n      |                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmptntp2bpt.cpp:2:\n/tmp/tmptntp2bpt.cpp: In function \u2018int main()\u2019:\n/tmp/tmptntp2bpt.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmptntp2bpt.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmptntp2bpt.cpp:22:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   22 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    for (int i = 0; i < test_tup.size(); i+=2) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509876,
      "stdout": "",
      "stderr": "/tmp/tmpxvhwfqle.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpxvhwfqle.cpp:6:34: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for (int i = 0; i < test_tup.size(); i+=2) {\n      |                                  ^~~~\n/tmp/tmpxvhwfqle.cpp:7:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmpxvhwfqle.cpp:7:46: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpxvhwfqle.cpp:2:\n/tmp/tmpxvhwfqle.cpp: In function \u2018int main()\u2019:\n/tmp/tmpxvhwfqle.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpxvhwfqle.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpxvhwfqle.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     asse",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> res;\n    long i = 0;\n    while(test_tup) {\n        res[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return res;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpvyuya29v.cpp:2:\n/tmp/tmpvyuya29v.cpp: In function \u2018int main()\u2019:\n/tmp/tmpvyuya29v.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpvyuya29v.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpvyuya29v.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    for(int i=0;i<test_tup.size();i+=2) {\n        test_map[test_tup[i]] = test_tup[i+1];\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "/tmp/tmpi6a0ep9q.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpi6a0ep9q.cpp:6:28: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(int i=0;i<test_tup.size();i+=2) {\n      |                            ^~~~\n/tmp/tmpi6a0ep9q.cpp:7:28: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_map[test_tup[i]] = test_tup[i+1];\n      |                            ^\n/tmp/tmpi6a0ep9q.cpp:7:45: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_map[test_tup[i]] = test_tup[i+1];\n      |                                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpi6a0ep9q.cpp:2:\n/tmp/tmpi6a0ep9q.cpp: In function \u2018int main()\u2019:\n/tmp/tmpi6a0ep9q.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpi6a0ep9q.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpi6a0ep9q.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std:",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i = 0;\n    while (test_tup != 0) {\n        test_dict[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122657,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpam3q26ik.cpp:2:\n/tmp/tmpam3q26ik.cpp: In function \u2018int main()\u2019:\n/tmp/tmpam3q26ik.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpam3q26ik.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpam3q26ik.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    for(int i=0;i<test_tup.size();i+=2) {\n        test_map[test_tup[i]] = test_tup[i+1];\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "/tmp/tmpi6a0ep9q.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpi6a0ep9q.cpp:6:28: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(int i=0;i<test_tup.size();i+=2) {\n      |                            ^~~~\n/tmp/tmpi6a0ep9q.cpp:7:28: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_map[test_tup[i]] = test_tup[i+1];\n      |                            ^\n/tmp/tmpi6a0ep9q.cpp:7:45: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_map[test_tup[i]] = test_tup[i+1];\n      |                                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpi6a0ep9q.cpp:2:\n/tmp/tmpi6a0ep9q.cpp: In function \u2018int main()\u2019:\n/tmp/tmpi6a0ep9q.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpi6a0ep9q.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpi6a0ep9q.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std:",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    for (int i = 0; i < test_tup.size(); i += 2) {\n        test_dict[test_tup[i]] = test_tup[i + 1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "/tmp/tmp05u_xtd0.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp05u_xtd0.cpp:6:34: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for (int i = 0; i < test_tup.size(); i += 2) {\n      |                                  ^~~~\n/tmp/tmp05u_xtd0.cpp:7:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i + 1];\n      |                             ^\n/tmp/tmp05u_xtd0.cpp:7:48: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i + 1];\n      |                                                ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp05u_xtd0.cpp:2:\n/tmp/tmp05u_xtd0.cpp: In function \u2018int main()\u2019:\n/tmp/tmp05u_xtd0.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp05u_xtd0.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp05u_xtd0.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long key = 0;\n    long value = 0;\n    for(int i = 0; i < test_tup.size(); i++) {\n        if(i%2 == 0) {\n            key = test_tup[i];\n        }\n        else {\n            value = test_tup[i];\n            test_map[key] = value;\n        }\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "/tmp/tmp7kpxzp3c.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp7kpxzp3c.cpp:8:33: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    8 |     for(int i = 0; i < test_tup.size(); i++) {\n      |                                 ^~~~\n/tmp/tmp7kpxzp3c.cpp:10:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n   10 |             key = test_tup[i];\n      |                             ^\n/tmp/tmp7kpxzp3c.cpp:13:31: error: invalid types \u2018long int[int]\u2019 for array subscript\n   13 |             value = test_tup[i];\n      |                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp7kpxzp3c.cpp:2:\n/tmp/tmp7kpxzp3c.cpp: In function \u2018int main()\u2019:\n/tmp/tmp7kpxzp3c.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp7kpxzp3c.cpp:22:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   22 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp7kpxzp3c.cpp:23:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   23 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long temp = test_tup;\n    while(temp > 0) {\n        long key = temp % 10;\n        temp = temp / 10;\n        long value = temp % 10;\n        temp = temp / 10;\n        test_map.insert(std::pair<long,long>(key,value));\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmprc3xjj5q.cpp:2:\n/tmp/tmprc3xjj5q.cpp: In function \u2018int main()\u2019:\n/tmp/tmprc3xjj5q.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmprc3xjj5q.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmprc3xjj5q.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    std::tuple<long,long,long,long,long,long,long,long,long,long> test_tuple = test_tup;\n    for (int i = 0; i < std::tuple_size<decltype(test_tuple)>::value; i++) {\n        test_map[std::get<i>(test_tuple)] = std::get<i+1>(test_tuple);\n        i++;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "/tmp/tmpjpevach_.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpjpevach_.cpp:6:80: error: conversion from \u2018long int\u2019 to non-scalar type \u2018std::tuple<long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>\u2019 requested\n    6 |     std::tuple<long,long,long,long,long,long,long,long,long,long> test_tuple = test_tup;\n      |                                                                                ^~~~~~~~\n/tmp/tmpjpevach_.cpp:8:40: error: no matching function for call to \u2018get<i>(std::tuple<long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>&)\u2019\n    8 |         test_map[std::get<i>(test_tuple)] = std::get<i+1>(test_tuple);\n      |                                        ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpjpevach_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/utility:219:5: note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2> constexpr typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type& std::get(std::pair<_Tp1, _Tp2>&)\u2019\n  219 |     get(std::pair<_Tp1, _Tp2>& __in) noexcept\n      |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/utility:219:5: note:   template argument deduction/substitution failed:\n/tmp/tmpjpevach_.cpp:8:40: error: the value of \u2018i\u2019 is not usable in a constant expression\n    8 |         test_map[std::get<i>(test_tuple)] = std::get<i+1>(test_tuple);\n      |                                        ^\n/tmp/tmpjpevach_.cpp:7:14: note: \u2018int i\u2019 is not const\n    7 |     for (int i = 0; i < std::tuple_size<decltype(test_tuple)>::value; i++) {\n      |              ^\n/tmp/tmpjpevach_.cpp:8:40: note: in template argument for type \u2018long unsigned int\u2019\n    8 |         test_map[std::get<i>(test_tuple)] = std::ge",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long key = 0;\n    long value = 0;\n    while (test_tup) {\n        key = test_tup & 0xFF;\n        test_tup >>= 8;\n        value = test_tup & 0xFF;\n        test_tup >>= 8;\n        test_map[key] = value;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122659,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp1hior9yl.cpp:2:\n/tmp/tmp1hior9yl.cpp: In function \u2018int main()\u2019:\n/tmp/tmp1hior9yl.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp1hior9yl.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp1hior9yl.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i = 0;\n    while(test_tup != 0) {\n        test_dict[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122659,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpje2_g5e4.cpp:2:\n/tmp/tmpje2_g5e4.cpp: In function \u2018int main()\u2019:\n/tmp/tmpje2_g5e4.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpje2_g5e4.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpje2_g5e4.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    for (int i = 0; i < test_tup.size(); i++) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122659,
      "stdout": "",
      "stderr": "/tmp/tmpxz1tbzc6.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpxz1tbzc6.cpp:6:34: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for (int i = 0; i < test_tup.size(); i++) {\n      |                                  ^~~~\n/tmp/tmpxz1tbzc6.cpp:7:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmpxz1tbzc6.cpp:7:46: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpxz1tbzc6.cpp:2:\n/tmp/tmpxz1tbzc6.cpp: In function \u2018int main()\u2019:\n/tmp/tmpxz1tbzc6.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpxz1tbzc6.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpxz1tbzc6.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     asser",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    for (int i = 0; i < test_tup.size(); i+=2) {\n        test_map[test_tup[i]] = test_tup[i+1];\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122659,
      "stdout": "",
      "stderr": "/tmp/tmp09hrevom.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp09hrevom.cpp:6:34: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for (int i = 0; i < test_tup.size(); i+=2) {\n      |                                  ^~~~\n/tmp/tmp09hrevom.cpp:7:28: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_map[test_tup[i]] = test_tup[i+1];\n      |                            ^\n/tmp/tmp09hrevom.cpp:7:45: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_map[test_tup[i]] = test_tup[i+1];\n      |                                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp09hrevom.cpp:2:\n/tmp/tmp09hrevom.cpp: In function \u2018int main()\u2019:\n/tmp/tmp09hrevom.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp09hrevom.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp09hrevom.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(c",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    std::tuple<int,int,int,int,int,int,int,int,int,int> test_tuple(test_tup);\n    for (int i = 0; i < std::tuple_size<decltype(test_tuple)>::value; i++) {\n        test_map[std::get<i>(test_tuple)] = std::get<i+1>(test_tuple);\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122663,
      "stdout": "",
      "stderr": "/tmp/tmpfvekpd38.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpfvekpd38.cpp:6:76: error: no matching function for call to \u2018std::tuple<int, int, int, int, int, int, int, int, int, int>::tuple(long int&)\u2019\n    6 |     std::tuple<int,int,int,int,int,int,int,int,int,int> test_tuple(test_tup);\n      |                                                                            ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/functional:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/pstl/glue_algorithm_defs.h:13,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:71,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpfvekpd38.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:808:11: note: candidate: \u2018template<class _Alloc, class _Dummy, class ... _UElements, typename std::enable_if<((std::_TC<((10 == sizeof... (_UElements)) && (! std::is_same<std::tuple<int, int, int, int, int, int, int, int, int, int>, std::tuple<_Tail ...> >::value)), int, int, int, int, int, int, int, int, int, int>::_MoveConstructibleTuple<_UElements ...>() && (! std::_TC<((10 == sizeof... (_UElements)) && (! std::is_same<std::tuple<int, int, int, int, int, int, int, int, int, int>, std::tuple<_Tail ...> >::value)), int, int, int, int, int, int, int, int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>())) && std::_TC<(std::is_same<_Dummy, void>::value && (10 == 1)), int, int, int, int, int, int, int, int, int, int>::_NonNestedTuple<tuple<_Tail ...>&&>()), bool>::type <anonymous> > std::tuple<_Elements>::tuple(std::allocator_arg_t, const _Alloc&, std::tuple<_Args2 ...>&&)\u2019\n  808 |  explicit tuple(allocator_arg_t __tag, const _Alloc& __a,\n      |           ^~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:808:11: note:   template argument deduction/substitution failed:\n/tmp/tmpfvekpd38.cp",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    std::vector<long> test_vec;\n    while(test_tup > 0) {\n        test_vec.push_back(test_tup % 10);\n        test_tup /= 10;\n    }\n    for(int i = 0; i < test_vec.size(); i += 2) {\n        test_dict[test_vec[i]] = test_vec[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122659,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpndq1ib3t.cpp:2:\n/tmp/tmpndq1ib3t.cpp: In function \u2018int main()\u2019:\n/tmp/tmpndq1ib3t.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpndq1ib3t.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpndq1ib3t.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    for (int i = 0; i < test_tup.size(); i += 2) {\n        test_map[test_tup[i]] = test_tup[i + 1];\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509876,
      "stdout": "",
      "stderr": "/tmp/tmp29f5esck.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp29f5esck.cpp:6:34: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for (int i = 0; i < test_tup.size(); i += 2) {\n      |                                  ^~~~\n/tmp/tmp29f5esck.cpp:7:28: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_map[test_tup[i]] = test_tup[i + 1];\n      |                            ^\n/tmp/tmp29f5esck.cpp:7:47: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_map[test_tup[i]] = test_tup[i + 1];\n      |                                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp29f5esck.cpp:2:\n/tmp/tmp29f5esck.cpp: In function \u2018int main()\u2019:\n/tmp/tmp29f5esck.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp29f5esck.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp29f5esck.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    std::vector<long> test_vec;\n    while (test_tup != 0) {\n        test_vec.push_back(test_tup % 10);\n        test_tup /= 10;\n    }\n    for (int i = 0; i < test_vec.size(); i += 2) {\n        test_dict[test_vec[i]] = test_vec[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122659,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmphqenpipq.cpp:2:\n/tmp/tmphqenpipq.cpp: In function \u2018int main()\u2019:\n/tmp/tmphqenpipq.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmphqenpipq.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmphqenpipq.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    std::tuple<long,long> test_tuple(test_tup,test_tup);\n    std::map<long,long>::iterator it;\n    for(it=test_dict.begin();it!=test_dict.end();it++) {\n        test_dict.insert(std::make_pair(std::get<0>(test_tuple),std::get<1>(test_tuple)));\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122659,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmplmtqt30b.cpp:2:\n/tmp/tmplmtqt30b.cpp: In function \u2018int main()\u2019:\n/tmp/tmplmtqt30b.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmplmtqt30b.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmplmtqt30b.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    std::vector<long> test_vec;\n    for (int i = 0; i < test_tup.size(); i++) {\n        test_vec.push_back(test_tup[i]);\n    }\n    for (int i = 0; i < test_vec.size(); i+=2) {\n        test_dict[test_vec[i]] = test_vec[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122659,
      "stdout": "",
      "stderr": "/tmp/tmpu81x2u0n.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpu81x2u0n.cpp:7:34: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    7 |     for (int i = 0; i < test_tup.size(); i++) {\n      |                                  ^~~~\n/tmp/tmpu81x2u0n.cpp:8:38: error: invalid types \u2018long int[int]\u2019 for array subscript\n    8 |         test_vec.push_back(test_tup[i]);\n      |                                      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpu81x2u0n.cpp:2:\n/tmp/tmpu81x2u0n.cpp: In function \u2018int main()\u2019:\n/tmp/tmpu81x2u0n.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpu81x2u0n.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpu81x2u0n.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long key = 0;\n    long value = 0;\n    for (long i = 0; i < test_tup.size(); i++) {\n        if (i % 2 == 0) {\n            key = test_tup[i];\n        }\n        else {\n            value = test_tup[i];\n            test_dict[key] = value;\n        }\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122659,
      "stdout": "",
      "stderr": "/tmp/tmpgay3802n.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpgay3802n.cpp:8:35: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    8 |     for (long i = 0; i < test_tup.size(); i++) {\n      |                                   ^~~~\n/tmp/tmpgay3802n.cpp:10:29: error: invalid types \u2018long int[long int]\u2019 for array subscript\n   10 |             key = test_tup[i];\n      |                             ^\n/tmp/tmpgay3802n.cpp:13:31: error: invalid types \u2018long int[long int]\u2019 for array subscript\n   13 |             value = test_tup[i];\n      |                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpgay3802n.cpp:2:\n/tmp/tmpgay3802n.cpp: In function \u2018int main()\u2019:\n/tmp/tmpgay3802n.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpgay3802n.cpp:22:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   22 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpgay3802n.cpp:23:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   23 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i = 0;\n    while (i < test_tup.size()) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n        i += 2;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122659,
      "stdout": "",
      "stderr": "/tmp/tmp44myujy_.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp44myujy_.cpp:7:25: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    7 |     while (i < test_tup.size()) {\n      |                         ^~~~\n/tmp/tmp44myujy_.cpp:8:29: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    8 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmp44myujy_.cpp:8:46: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    8 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp44myujy_.cpp:2:\n/tmp/tmp44myujy_.cpp: In function \u2018int main()\u2019:\n/tmp/tmp44myujy_.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp44myujy_.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp44myujy_.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i = 0;\n    while(test_tup) {\n        test_dict[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122659,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpdp6lruud.cpp:2:\n/tmp/tmpdp6lruud.cpp: In function \u2018int main()\u2019:\n/tmp/tmpdp6lruud.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpdp6lruud.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpdp6lruud.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    for (int i = 0; i < test_tup.size(); i++) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122659,
      "stdout": "",
      "stderr": "/tmp/tmpxz1tbzc6.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpxz1tbzc6.cpp:6:34: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for (int i = 0; i < test_tup.size(); i++) {\n      |                                  ^~~~\n/tmp/tmpxz1tbzc6.cpp:7:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmpxz1tbzc6.cpp:7:46: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpxz1tbzc6.cpp:2:\n/tmp/tmpxz1tbzc6.cpp: In function \u2018int main()\u2019:\n/tmp/tmpxz1tbzc6.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpxz1tbzc6.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpxz1tbzc6.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     asser",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> res;\n    std::tuple<long,long,long,long,long,long,long,long,long,long> tup = test_tup;\n    for(int i=0;i<9;i++) {\n        res[std::get<i>(tup)] = std::get<i+1>(tup);\n    }\n    return res;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122659,
      "stdout": "",
      "stderr": "/tmp/tmpsk899hzk.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpsk899hzk.cpp:6:73: error: conversion from \u2018long int\u2019 to non-scalar type \u2018std::tuple<long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>\u2019 requested\n    6 |     std::tuple<long,long,long,long,long,long,long,long,long,long> tup = test_tup;\n      |                                                                         ^~~~~~~~\n/tmp/tmpsk899hzk.cpp:8:28: error: no matching function for call to \u2018get<i>(std::tuple<long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>&)\u2019\n    8 |         res[std::get<i>(tup)] = std::get<i+1>(tup);\n      |                            ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpsk899hzk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/utility:219:5: note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2> constexpr typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type& std::get(std::pair<_Tp1, _Tp2>&)\u2019\n  219 |     get(std::pair<_Tp1, _Tp2>& __in) noexcept\n      |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/utility:219:5: note:   template argument deduction/substitution failed:\n/tmp/tmpsk899hzk.cpp:8:28: error: the value of \u2018i\u2019 is not usable in a constant expression\n    8 |         res[std::get<i>(tup)] = std::get<i+1>(tup);\n      |                            ^\n/tmp/tmpsk899hzk.cpp:7:13: note: \u2018int i\u2019 is not const\n    7 |     for(int i=0;i<9;i++) {\n      |             ^\n/tmp/tmpsk899hzk.cpp:8:28: note: in template argument for type \u2018long unsigned int\u2019\n    8 |         res[std::get<i>(tup)] = std::get<i+1>(tup);\n      |                            ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:60,\n ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    std::vector<long> test_vec;\n    long test_tup_size = test_tup.size();\n    for (int i = 0; i < test_tup_size; i++) {\n        test_vec.push_back(test_tup[i]);\n    }\n    for (int i = 0; i < test_tup_size; i += 2) {\n        test_map[test_vec[i]] = test_vec[i+1];\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122659,
      "stdout": "",
      "stderr": "/tmp/tmp4d7aij84.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp4d7aij84.cpp:7:35: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    7 |     long test_tup_size = test_tup.size();\n      |                                   ^~~~\n/tmp/tmp4d7aij84.cpp:9:38: error: invalid types \u2018long int[int]\u2019 for array subscript\n    9 |         test_vec.push_back(test_tup[i]);\n      |                                      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp4d7aij84.cpp:2:\n/tmp/tmp4d7aij84.cpp: In function \u2018int main()\u2019:\n/tmp/tmp4d7aij84.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp4d7aij84.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp4d7aij84.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i = 0;\n    while(test_tup) {\n        test_dict[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122659,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpdp6lruud.cpp:2:\n/tmp/tmpdp6lruud.cpp: In function \u2018int main()\u2019:\n/tmp/tmpdp6lruud.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpdp6lruud.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpdp6lruud.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    for (int i = 0; i < test_tup.size(); i+=2) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509876,
      "stdout": "",
      "stderr": "/tmp/tmpxvhwfqle.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpxvhwfqle.cpp:6:34: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for (int i = 0; i < test_tup.size(); i+=2) {\n      |                                  ^~~~\n/tmp/tmpxvhwfqle.cpp:7:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmpxvhwfqle.cpp:7:46: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpxvhwfqle.cpp:2:\n/tmp/tmpxvhwfqle.cpp: In function \u2018int main()\u2019:\n/tmp/tmpxvhwfqle.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpxvhwfqle.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpxvhwfqle.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     asse",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> dict;\n    long key = 0;\n    long value = 0;\n    while (test_tup > 0) {\n        value = test_tup % 10;\n        test_tup /= 10;\n        key = test_tup % 10;\n        test_tup /= 10;\n        dict[key] = value;\n    }\n    return dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122659,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpqcu11pq6.cpp:2:\n/tmp/tmpqcu11pq6.cpp: In function \u2018int main()\u2019:\n/tmp/tmpqcu11pq6.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpqcu11pq6.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpqcu11pq6.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> dict;\n    std::tuple<long,long,long,long,long,long> tup(test_tup);\n    for (int i=0; i<std::tuple_size<decltype(tup)>::value; i++) {\n        dict[std::get<i>(tup)] = std::get<i+1>(tup);\n        i++;\n    }\n    return dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122662,
      "stdout": "",
      "stderr": "/tmp/tmppmeszk7_.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmppmeszk7_.cpp:6:59: error: no matching function for call to \u2018std::tuple<long int, long int, long int, long int, long int, long int>::tuple(long int&)\u2019\n    6 |     std::tuple<long,long,long,long,long,long> tup(test_tup);\n      |                                                           ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/functional:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/pstl/glue_algorithm_defs.h:13,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:71,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmppmeszk7_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:808:11: note: candidate: \u2018template<class _Alloc, class _Dummy, class ... _UElements, typename std::enable_if<((std::_TC<((6 == sizeof... (_UElements)) && (! std::is_same<std::tuple<long int, long int, long int, long int, long int, long int>, std::tuple<_Tail ...> >::value)), long int, long int, long int, long int, long int, long int>::_MoveConstructibleTuple<_UElements ...>() && (! std::_TC<((6 == sizeof... (_UElements)) && (! std::is_same<std::tuple<long int, long int, long int, long int, long int, long int>, std::tuple<_Tail ...> >::value)), long int, long int, long int, long int, long int, long int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>())) && std::_TC<(std::is_same<_Dummy, void>::value && (6 == 1)), long int, long int, long int, long int, long int, long int>::_NonNestedTuple<tuple<_Tail ...>&&>()), bool>::type <anonymous> > std::tuple<_Elements>::tuple(std::allocator_arg_t, const _Alloc&, std::tuple<_Args2 ...>&&)\u2019\n  808 |  explicit tuple(allocator_arg_t __tag, const _Alloc& __a,\n      |           ^~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:808:11: note:   template argument deduction/substitution fail",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    test_dict[1] = 1;\n    test_dict[2] = 2;\n    test_dict[3] = 3;\n    test_dict[4] = 4;\n    test_dict[5] = 5;\n    test_dict[6] = 6;\n    test_dict[7] = 7;\n    test_dict[8] = 8;\n    test_dict[9] = 9;\n    test_dict[10] = 10;\n    test_dict[11] = 11;\n    test_dict[12] = 12;\n    test_dict[13] = 13;\n    test_dict[14] = 14;\n    test_dict[15] = 15;\n    test_dict[16] = 16;\n    test_dict[17] = 17;\n    test_dict[18] = 18;\n    test_dict[19] = 19;\n    test_dict[20] = 20;\n    test_dict[21] = 21;\n    test_dict[22] = 22;\n    test_dict[23] = 23;\n    test_dict[24] = 24;\n    test_dict[25] = 25;\n    test_dict[26] = 26;\n    test_dict[27] = 27;\n    test_dict[28] = 28;\n    test_dict[29] = 29;\n    test_dict[30] = 30;\n    test_dict[31] = 31;\n    test_dict[32] = 32;\n    test_dict[33] = 33;\n    test_dict[34] = 34;\n    test_dict[35] = 35;\n    test_dict[36] = 36;\n    test_dict[37] = 37;\n    test_dict[38] = 38;\n    test_dict[39] = 39;\n    test_dict[40] = 40;\n    test_dict[41] = 41;\n    test_dict[42] = 42;\n    test_dict[43] = 43;\n    test_dict[44] = 44;\n    test_dict[45] = 45;\n    test\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509876,
      "stdout": "",
      "stderr": "/tmp/tmpma_uh2_8.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpma_uh2_8.cpp:51:5: error: \u2018test\u2019 was not declared in this scope\n   51 |     test\n      |     ^~~~\n/tmp/tmpma_uh2_8.cpp:52:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   52 | }\n      | ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpma_uh2_8.cpp:2:\n/tmp/tmpma_uh2_8.cpp: In function \u2018int main()\u2019:\n/tmp/tmpma_uh2_8.cpp:55:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   55 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpma_uh2_8.cpp:56:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   56 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpma_uh2_8.cpp:57:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   57 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    for(long i=0;i<test_tup.size();i+=2) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122659,
      "stdout": "",
      "stderr": "/tmp/tmpu4r2tzzv.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpu4r2tzzv.cpp:6:29: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(long i=0;i<test_tup.size();i+=2) {\n      |                             ^~~~\n/tmp/tmpu4r2tzzv.cpp:7:29: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmpu4r2tzzv.cpp:7:46: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpu4r2tzzv.cpp:2:\n/tmp/tmpu4r2tzzv.cpp: In function \u2018int main()\u2019:\n/tmp/tmpu4r2tzzv.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpu4r2tzzv.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpu4r2tzzv.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     asser",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    for (int i = 0; i < test_tup.size(); i++) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122659,
      "stdout": "",
      "stderr": "/tmp/tmpxz1tbzc6.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpxz1tbzc6.cpp:6:34: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for (int i = 0; i < test_tup.size(); i++) {\n      |                                  ^~~~\n/tmp/tmpxz1tbzc6.cpp:7:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmpxz1tbzc6.cpp:7:46: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpxz1tbzc6.cpp:2:\n/tmp/tmpxz1tbzc6.cpp: In function \u2018int main()\u2019:\n/tmp/tmpxz1tbzc6.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpxz1tbzc6.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpxz1tbzc6.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     asser",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i = 0;\n    while(test_tup) {\n        test_dict[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122659,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpdp6lruud.cpp:2:\n/tmp/tmpdp6lruud.cpp: In function \u2018int main()\u2019:\n/tmp/tmpdp6lruud.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpdp6lruud.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpdp6lruud.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    std::vector<long> test_vec;\n    test_vec.push_back(test_tup);\n    for (int i = 0; i < test_vec.size(); i++) {\n        test_dict[test_vec[i]] = test_vec[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122659,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpz17lpghs.cpp:2:\n/tmp/tmpz17lpghs.cpp: In function \u2018int main()\u2019:\n/tmp/tmpz17lpghs.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpz17lpghs.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpz17lpghs.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    std::tuple<long,long,long,long,long> test_tuple(test_tup,test_tup,test_tup,test_tup,test_tup);\n    std::vector<std::tuple<long,long>> test_vec;\n    for(auto i=0;i<5;i++) {\n        test_vec.push_back(std::make_tuple(std::get<i>(test_tuple),std::get<i+1>(test_tuple)));\n    }\n    for(auto i=0;i<5;i++) {\n        test_map[std::get<0>(test_vec[i])] = std::get<1>(test_vec[i]);\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122659,
      "stdout": "",
      "stderr": "/tmp/tmpb5d9xmkq.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpb5d9xmkq.cpp:9:66: error: no matching function for call to \u2018get<i>(std::tuple<long int, long int, long int, long int, long int>&)\u2019\n    9 |         test_vec.push_back(std::make_tuple(std::get<i>(test_tuple),std::get<i+1>(test_tuple)));\n      |                                                                  ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpb5d9xmkq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/utility:219:5: note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2> constexpr typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type& std::get(std::pair<_Tp1, _Tp2>&)\u2019\n  219 |     get(std::pair<_Tp1, _Tp2>& __in) noexcept\n      |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/utility:219:5: note:   template argument deduction/substitution failed:\n/tmp/tmpb5d9xmkq.cpp:9:66: error: the value of \u2018i\u2019 is not usable in a constant expression\n    9 |         test_vec.push_back(std::make_tuple(std::get<i>(test_tuple),std::get<i+1>(test_tuple)));\n      |                                                                  ^\n/tmp/tmpb5d9xmkq.cpp:8:14: note: \u2018int i\u2019 is not const\n    8 |     for(auto i=0;i<5;i++) {\n      |              ^\n/tmp/tmpb5d9xmkq.cpp:9:66: note: in template argument for type \u2018long unsigned int\u2019\n    9 |         test_vec.push_back(std::make_tuple(std::get<i>(test_tuple),std::get<i+1>(test_tuple)));\n      |                                                                  ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpb5d9xmkq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/i",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    for (int i = 0; i < test_tup.size(); i += 2) {\n        test_dict[test_tup[i]] = test_tup[i + 1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "/tmp/tmp05u_xtd0.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp05u_xtd0.cpp:6:34: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for (int i = 0; i < test_tup.size(); i += 2) {\n      |                                  ^~~~\n/tmp/tmp05u_xtd0.cpp:7:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i + 1];\n      |                             ^\n/tmp/tmp05u_xtd0.cpp:7:48: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i + 1];\n      |                                                ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp05u_xtd0.cpp:2:\n/tmp/tmp05u_xtd0.cpp: In function \u2018int main()\u2019:\n/tmp/tmp05u_xtd0.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp05u_xtd0.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp05u_xtd0.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i = 0;\n    while (test_tup != 0) {\n        test_dict[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122657,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpam3q26ik.cpp:2:\n/tmp/tmpam3q26ik.cpp: In function \u2018int main()\u2019:\n/tmp/tmpam3q26ik.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpam3q26ik.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpam3q26ik.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> dict;\n    for(int i=0;i<test_tup.size();i+=2) {\n        dict[test_tup[i]] = test_tup[i+1];\n    }\n    return dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122659,
      "stdout": "",
      "stderr": "/tmp/tmpmssbs9oc.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpmssbs9oc.cpp:6:28: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(int i=0;i<test_tup.size();i+=2) {\n      |                            ^~~~\n/tmp/tmpmssbs9oc.cpp:7:24: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         dict[test_tup[i]] = test_tup[i+1];\n      |                        ^\n/tmp/tmpmssbs9oc.cpp:7:41: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         dict[test_tup[i]] = test_tup[i+1];\n      |                                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpmssbs9oc.cpp:2:\n/tmp/tmpmssbs9oc.cpp: In function \u2018int main()\u2019:\n/tmp/tmpmssbs9oc.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpmssbs9oc.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpmssbs9oc.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    std::vector<long> test_vec;\n    for (long i = 0; i < test_tup.size(); i++) {\n        test_vec.push_back(test_tup[i]);\n    }\n    for (long i = 0; i < test_vec.size(); i+=2) {\n        test_map[test_vec[i]] = test_vec[i+1];\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122659,
      "stdout": "",
      "stderr": "/tmp/tmp7_hktwia.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp7_hktwia.cpp:7:35: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    7 |     for (long i = 0; i < test_tup.size(); i++) {\n      |                                   ^~~~\n/tmp/tmp7_hktwia.cpp:8:38: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    8 |         test_vec.push_back(test_tup[i]);\n      |                                      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp7_hktwia.cpp:2:\n/tmp/tmp7_hktwia.cpp: In function \u2018int main()\u2019:\n/tmp/tmp7_hktwia.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp7_hktwia.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp7_hktwia.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |           ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    std::vector<long> test_vec;\n    while(test_tup != 0) {\n        test_vec.push_back(test_tup % 10);\n        test_tup /= 10;\n    }\n    for(int i = 0; i < test_vec.size(); i += 2) {\n        test_dict[test_vec[i]] = test_vec[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122661,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpifrjm87k.cpp:2:\n/tmp/tmpifrjm87k.cpp: In function \u2018int main()\u2019:\n/tmp/tmpifrjm87k.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpifrjm87k.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpifrjm87k.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long key = 0;\n    long value = 0;\n    for (auto i = 0; i < test_tup.size(); i++) {\n        if (i % 2 == 0) {\n            key = test_tup[i];\n        }\n        else {\n            value = test_tup[i];\n            test_dict[key] = value;\n        }\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122662,
      "stdout": "",
      "stderr": "/tmp/tmpzrban68w.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpzrban68w.cpp:8:35: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    8 |     for (auto i = 0; i < test_tup.size(); i++) {\n      |                                   ^~~~\n/tmp/tmpzrban68w.cpp:10:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n   10 |             key = test_tup[i];\n      |                             ^\n/tmp/tmpzrban68w.cpp:13:31: error: invalid types \u2018long int[int]\u2019 for array subscript\n   13 |             value = test_tup[i];\n      |                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpzrban68w.cpp:2:\n/tmp/tmpzrban68w.cpp: In function \u2018int main()\u2019:\n/tmp/tmpzrban68w.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpzrban68w.cpp:22:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   22 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpzrban68w.cpp:23:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   23 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    for (long i = 0; i < test_tup.size(); i+=2) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "/tmp/tmp1k2sjhd4.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp1k2sjhd4.cpp:6:35: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for (long i = 0; i < test_tup.size(); i+=2) {\n      |                                   ^~~~\n/tmp/tmp1k2sjhd4.cpp:7:29: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmp1k2sjhd4.cpp:7:46: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp1k2sjhd4.cpp:2:\n/tmp/tmp1k2sjhd4.cpp: In function \u2018int main()\u2019:\n/tmp/tmp1k2sjhd4.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp1k2sjhd4.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp1k2sjhd4.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(7, 8, 9, 10",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    std::tuple<long,long,long> test_tuple = test_tup;\n    test_dict[std::get<0>(test_tuple)] = std::get<1>(test_tuple);\n    test_dict[std::get<1>(test_tuple)] = std::get<2>(test_tuple);\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122662,
      "stdout": "",
      "stderr": "/tmp/tmpj9wnjib7.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpj9wnjib7.cpp:6:45: error: conversion from \u2018long int\u2019 to non-scalar type \u2018std::tuple<long int, long int, long int>\u2019 requested\n    6 |     std::tuple<long,long,long> test_tuple = test_tup;\n      |                                             ^~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpj9wnjib7.cpp:2:\n/tmp/tmpj9wnjib7.cpp: In function \u2018int main()\u2019:\n/tmp/tmpj9wnjib7.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpj9wnjib7.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpj9wnjib7.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long key = 0;\n    long value = 0;\n    while(test_tup > 0) {\n        value = test_tup % 10;\n        test_tup = test_tup / 10;\n        key = test_tup % 10;\n        test_tup = test_tup / 10;\n        test_map[key] = value;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122661,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp8_39jz9b.cpp:2:\n/tmp/tmp8_39jz9b.cpp: In function \u2018int main()\u2019:\n/tmp/tmp8_39jz9b.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp8_39jz9b.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp8_39jz9b.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long key = 0;\n    long value = 0;\n    for (int i = 0; i < test_tup.size(); i++) {\n        if (i % 2 == 0) {\n            key = test_tup[i];\n        }\n        else {\n            value = test_tup[i];\n            test_map[key] = value;\n        }\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509876,
      "stdout": "",
      "stderr": "/tmp/tmpcat8vyh9.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpcat8vyh9.cpp:8:34: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    8 |     for (int i = 0; i < test_tup.size(); i++) {\n      |                                  ^~~~\n/tmp/tmpcat8vyh9.cpp:10:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n   10 |             key = test_tup[i];\n      |                             ^\n/tmp/tmpcat8vyh9.cpp:13:31: error: invalid types \u2018long int[int]\u2019 for array subscript\n   13 |             value = test_tup[i];\n      |                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpcat8vyh9.cpp:2:\n/tmp/tmpcat8vyh9.cpp: In function \u2018int main()\u2019:\n/tmp/tmpcat8vyh9.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpcat8vyh9.cpp:22:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   22 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpcat8vyh9.cpp:23:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   23 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    std::tuple<long,long,long,long,long,long,long,long,long,long> test_tuple(test_tup);\n    for(int i=0;i<9;i++) {\n        test_map[std::get<i>(test_tuple)] = std::get<i+1>(test_tuple);\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122665,
      "stdout": "",
      "stderr": "/tmp/tmpz0ttb_42.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpz0ttb_42.cpp:6:86: error: no matching function for call to \u2018std::tuple<long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>::tuple(long int&)\u2019\n    6 |     std::tuple<long,long,long,long,long,long,long,long,long,long> test_tuple(test_tup);\n      |                                                                                      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/functional:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/pstl/glue_algorithm_defs.h:13,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:71,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpz0ttb_42.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:808:11: note: candidate: \u2018template<class _Alloc, class _Dummy, class ... _UElements, typename std::enable_if<((std::_TC<((10 == sizeof... (_UElements)) && (! std::is_same<std::tuple<long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>, std::tuple<_Tail ...> >::value)), long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>::_MoveConstructibleTuple<_UElements ...>() && (! std::_TC<((10 == sizeof... (_UElements)) && (! std::is_same<std::tuple<long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>, std::tuple<_Tail ...> >::value)), long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>())) && std::_TC<(std::is_same<_Dummy, void>::value && (10 == 1)), long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>::_NonNestedTuple<tuple<_Tail ...>&&>()), bool>::type <anonymous> > std::tu",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    std::tuple<long,long,long,long,long,long,long,long,long,long> test_tuple(test_tup);\n    for (int i = 0; i < std::tuple_size<decltype(test_tuple)>::value; i++) {\n        test_map[std::get<i>(test_tuple)] = std::get<i+1>(test_tuple);\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122665,
      "stdout": "",
      "stderr": "/tmp/tmp7mzweqbo.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp7mzweqbo.cpp:6:86: error: no matching function for call to \u2018std::tuple<long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>::tuple(long int&)\u2019\n    6 |     std::tuple<long,long,long,long,long,long,long,long,long,long> test_tuple(test_tup);\n      |                                                                                      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/functional:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/pstl/glue_algorithm_defs.h:13,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:71,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp7mzweqbo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:808:11: note: candidate: \u2018template<class _Alloc, class _Dummy, class ... _UElements, typename std::enable_if<((std::_TC<((10 == sizeof... (_UElements)) && (! std::is_same<std::tuple<long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>, std::tuple<_Tail ...> >::value)), long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>::_MoveConstructibleTuple<_UElements ...>() && (! std::_TC<((10 == sizeof... (_UElements)) && (! std::is_same<std::tuple<long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>, std::tuple<_Tail ...> >::value)), long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>())) && std::_TC<(std::is_same<_Dummy, void>::value && (10 == 1)), long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>::_NonNestedTuple<tuple<_Tail ...>&&>()), bool>::type <anonymous> > std::tu",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    std::tuple<long,long,long,long,long,long,long,long,long,long> test_tuple = test_tup;\n    std::tuple<long,long,long,long,long,long,long,long,long,long>::iterator it = test_tuple.begin();\n    while(it != test_tuple.end()) {\n        test_map[*it] = *(it+1);\n        it += 2;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122662,
      "stdout": "",
      "stderr": "/tmp/tmpnvwh989c.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpnvwh989c.cpp:6:80: error: conversion from \u2018long int\u2019 to non-scalar type \u2018std::tuple<long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>\u2019 requested\n    6 |     std::tuple<long,long,long,long,long,long,long,long,long,long> test_tuple = test_tup;\n      |                                                                                ^~~~~~~~\n/tmp/tmpnvwh989c.cpp:7:68: error: \u2018iterator\u2019 is not a member of \u2018std::tuple<long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>\u2019\n    7 |     std::tuple<long,long,long,long,long,long,long,long,long,long>::iterator it = test_tuple.begin();\n      |                                                                    ^~~~~~~~\n/tmp/tmpnvwh989c.cpp:8:11: error: \u2018it\u2019 was not declared in this scope; did you mean \u2018int\u2019?\n    8 |     while(it != test_tuple.end()) {\n      |           ^~\n      |           int\n/tmp/tmpnvwh989c.cpp:8:28: error: \u2018class std::tuple<long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>\u2019 has no member named \u2018end\u2019\n    8 |     while(it != test_tuple.end()) {\n      |                            ^~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpnvwh989c.cpp:2:\n/tmp/tmpnvwh989c.cpp: In function \u2018int main()\u2019:\n/tmp/tmpnvwh989c.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tupl",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> dict;\n    std::stringstream ss;\n    ss << test_tup;\n    std::string str = ss.str();\n    for(int i = 0; i < str.size() - 1; i++) {\n        dict[str[i] - '0'] = str[i + 1] - '0';\n    }\n    return dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122662,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpt5fcuigl.cpp:2:\n/tmp/tmpt5fcuigl.cpp: In function \u2018int main()\u2019:\n/tmp/tmpt5fcuigl.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpt5fcuigl.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpt5fcuigl.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long key = test_tup[0];\n    long value = test_tup[1];\n    test_map[key] = value;\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122662,
      "stdout": "",
      "stderr": "/tmp/tmp5wf5guv0.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp5wf5guv0.cpp:6:26: error: invalid types \u2018long int[int]\u2019 for array subscript\n    6 |     long key = test_tup[0];\n      |                          ^\n/tmp/tmp5wf5guv0.cpp:7:28: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |     long value = test_tup[1];\n      |                            ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp5wf5guv0.cpp:2:\n/tmp/tmp5wf5guv0.cpp: In function \u2018int main()\u2019:\n/tmp/tmp5wf5guv0.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp5wf5guv0.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp5wf5guv0.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long key = 0;\n    long value = 0;\n    for (int i = 0; i < test_tup.size(); i++) {\n        if (i % 2 == 0) {\n            key = test_tup[i];\n        } else {\n            value = test_tup[i];\n            test_map[key] = value;\n        }\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122662,
      "stdout": "",
      "stderr": "/tmp/tmpprl6mofl.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpprl6mofl.cpp:8:34: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    8 |     for (int i = 0; i < test_tup.size(); i++) {\n      |                                  ^~~~\n/tmp/tmpprl6mofl.cpp:10:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n   10 |             key = test_tup[i];\n      |                             ^\n/tmp/tmpprl6mofl.cpp:12:31: error: invalid types \u2018long int[int]\u2019 for array subscript\n   12 |             value = test_tup[i];\n      |                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpprl6mofl.cpp:2:\n/tmp/tmpprl6mofl.cpp: In function \u2018int main()\u2019:\n/tmp/tmpprl6mofl.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpprl6mofl.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpprl6mofl.cpp:22:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   22 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    for(int i=0;i<test_tup.size();i+=2) {\n        test_map[test_tup[i]] = test_tup[i+1];\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "/tmp/tmpi6a0ep9q.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpi6a0ep9q.cpp:6:28: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(int i=0;i<test_tup.size();i+=2) {\n      |                            ^~~~\n/tmp/tmpi6a0ep9q.cpp:7:28: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_map[test_tup[i]] = test_tup[i+1];\n      |                            ^\n/tmp/tmpi6a0ep9q.cpp:7:45: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_map[test_tup[i]] = test_tup[i+1];\n      |                                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpi6a0ep9q.cpp:2:\n/tmp/tmpi6a0ep9q.cpp: In function \u2018int main()\u2019:\n/tmp/tmpi6a0ep9q.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpi6a0ep9q.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpi6a0ep9q.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std:",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long i = 0;\n    while(test_tup) {\n        test_map[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509876,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpy619xawe.cpp:2:\n/tmp/tmpy619xawe.cpp: In function \u2018int main()\u2019:\n/tmp/tmpy619xawe.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpy619xawe.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpy619xawe.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    for(long i=0;i<test_tup.size();i+=2) {\n        test_map[test_tup[i]] = test_tup[i+1];\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122662,
      "stdout": "",
      "stderr": "/tmp/tmpzo8bm70a.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpzo8bm70a.cpp:6:29: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(long i=0;i<test_tup.size();i+=2) {\n      |                             ^~~~\n/tmp/tmpzo8bm70a.cpp:7:28: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    7 |         test_map[test_tup[i]] = test_tup[i+1];\n      |                            ^\n/tmp/tmpzo8bm70a.cpp:7:45: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    7 |         test_map[test_tup[i]] = test_tup[i+1];\n      |                                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpzo8bm70a.cpp:2:\n/tmp/tmpzo8bm70a.cpp: In function \u2018int main()\u2019:\n/tmp/tmpzo8bm70a.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpzo8bm70a.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpzo8bm70a.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(ca",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    for(int i=0;i<test_tup.size()-1;i++) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122662,
      "stdout": "",
      "stderr": "/tmp/tmpg3zaw9jo.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpg3zaw9jo.cpp:6:28: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(int i=0;i<test_tup.size()-1;i++) {\n      |                            ^~~~\n/tmp/tmpg3zaw9jo.cpp:7:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmpg3zaw9jo.cpp:7:46: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpg3zaw9jo.cpp:2:\n/tmp/tmpg3zaw9jo.cpp: In function \u2018int main()\u2019:\n/tmp/tmpg3zaw9jo.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpg3zaw9jo.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpg3zaw9jo.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long i = 0;\n    while (test_tup) {\n        test_map[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509876,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp_gn5paar.cpp:2:\n/tmp/tmp_gn5paar.cpp: In function \u2018int main()\u2019:\n/tmp/tmp_gn5paar.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp_gn5paar.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp_gn5paar.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    for (auto i = 0; i < test_tup.size(); i += 2) {\n        test_map[test_tup[i]] = test_tup[i+1];\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122662,
      "stdout": "",
      "stderr": "/tmp/tmpa1n27a56.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpa1n27a56.cpp:6:35: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for (auto i = 0; i < test_tup.size(); i += 2) {\n      |                                   ^~~~\n/tmp/tmpa1n27a56.cpp:7:28: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_map[test_tup[i]] = test_tup[i+1];\n      |                            ^\n/tmp/tmpa1n27a56.cpp:7:45: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_map[test_tup[i]] = test_tup[i+1];\n      |                                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpa1n27a56.cpp:2:\n/tmp/tmpa1n27a56.cpp: In function \u2018int main()\u2019:\n/tmp/tmpa1n27a56.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpa1n27a56.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpa1n27a56.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     asse",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long key = 0;\n    long value = 0;\n    for (auto i = 0; i < test_tup.size(); i++) {\n        if (i % 2 == 0) {\n            key = test_tup[i];\n        } else {\n            value = test_tup[i];\n            test_map[key] = value;\n        }\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122662,
      "stdout": "",
      "stderr": "/tmp/tmpje5d8tb_.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpje5d8tb_.cpp:8:35: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    8 |     for (auto i = 0; i < test_tup.size(); i++) {\n      |                                   ^~~~\n/tmp/tmpje5d8tb_.cpp:10:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n   10 |             key = test_tup[i];\n      |                             ^\n/tmp/tmpje5d8tb_.cpp:12:31: error: invalid types \u2018long int[int]\u2019 for array subscript\n   12 |             value = test_tup[i];\n      |                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpje5d8tb_.cpp:2:\n/tmp/tmpje5d8tb_.cpp: In function \u2018int main()\u2019:\n/tmp/tmpje5d8tb_.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpje5d8tb_.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpje5d8tb_.cpp:22:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   22 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> dict;\n    long key = 0;\n    long value = 0;\n    for (long i = 0; i < test_tup.size(); i++) {\n        if (i % 2 == 0) {\n            key = test_tup[i];\n        } else {\n            value = test_tup[i];\n            dict[key] = value;\n        }\n    }\n    return dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122662,
      "stdout": "",
      "stderr": "/tmp/tmpckjb8bdt.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpckjb8bdt.cpp:8:35: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    8 |     for (long i = 0; i < test_tup.size(); i++) {\n      |                                   ^~~~\n/tmp/tmpckjb8bdt.cpp:10:29: error: invalid types \u2018long int[long int]\u2019 for array subscript\n   10 |             key = test_tup[i];\n      |                             ^\n/tmp/tmpckjb8bdt.cpp:12:31: error: invalid types \u2018long int[long int]\u2019 for array subscript\n   12 |             value = test_tup[i];\n      |                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpckjb8bdt.cpp:2:\n/tmp/tmpckjb8bdt.cpp: In function \u2018int main()\u2019:\n/tmp/tmpckjb8bdt.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpckjb8bdt.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpckjb8bdt.cpp:22:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   22 |     assert(candidate(std::make_tuple(7, 8,",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long test_tup_size = test_tup.size();\n    for(long i=0; i<test_tup_size; i+=2) {\n        test_map[test_tup[i]] = test_tup[i+1];\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122662,
      "stdout": "",
      "stderr": "/tmp/tmpz9r8_0qr.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpz9r8_0qr.cpp:6:35: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     long test_tup_size = test_tup.size();\n      |                                   ^~~~\n/tmp/tmpz9r8_0qr.cpp:8:28: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    8 |         test_map[test_tup[i]] = test_tup[i+1];\n      |                            ^\n/tmp/tmpz9r8_0qr.cpp:8:45: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    8 |         test_map[test_tup[i]] = test_tup[i+1];\n      |                                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpz9r8_0qr.cpp:2:\n/tmp/tmpz9r8_0qr.cpp: In function \u2018int main()\u2019:\n/tmp/tmpz9r8_0qr.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpz9r8_0qr.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpz9r8_0qr.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     asse",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    std::tuple<long,long,long> test_tuple(test_tup,test_tup+1,test_tup+2);\n    std::cout<<\"test_tuple: \"<<test_tuple<<std::endl;\n    test_dict = {test_tuple};\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122665,
      "stdout": "",
      "stderr": "/tmp/tmpwzw_mg8k.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpwzw_mg8k.cpp:7:30: error: no match for \u2018operator<<\u2019 (operand types are \u2018std::basic_ostream<char>\u2019 and \u2018std::tuple<long int, long int, long int>\u2019)\n    7 |     std::cout<<\"test_tuple: \"<<test_tuple<<std::endl;\n      |     ~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~\n      |              |                 |\n      |              |                 std::tuple<long int, long int, long int>\n      |              std::basic_ostream<char>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmpwzw_mg8k.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ostream:108:7: note: candidate: \u2018std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(std::basic_ostream<_CharT, _Traits>::__ostream_type& (*)(std::basic_ostream<_CharT, _Traits>::__ostream_type&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]\u2019\n  108 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))\n      |       ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ostream:108:36: note:   no known conversion for argument 1 from \u2018std::tuple<long int, long int, long int>\u2019 to \u2018std::basic_ostream<char>::__ostream_type& (*)(std::basic_ostream<char>::__ostream_type&)\u2019 {aka \u2018std::basic_ostream<char>& (*)(std::basic_ostream<char>&)\u2019}\n  108 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))\n      |                  ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~\n/shared/centos7",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long i = 0;\n    while(test_tup) {\n        test_map[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509876,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpy619xawe.cpp:2:\n/tmp/tmpy619xawe.cpp: In function \u2018int main()\u2019:\n/tmp/tmpy619xawe.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpy619xawe.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpy619xawe.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long temp = test_tup;\n    while(temp != 0) {\n        test_dict[temp%10] = temp/10;\n        temp /= 100;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122662,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpnj1fqomt.cpp:2:\n/tmp/tmpnj1fqomt.cpp: In function \u2018int main()\u2019:\n/tmp/tmpnj1fqomt.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpnj1fqomt.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpnj1fqomt.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> dict;\n    long key = 0;\n    long value = 0;\n    for (int i = 0; i < test_tup.size(); i++) {\n        if (i % 2 == 0) {\n            key = test_tup[i];\n        } else {\n            value = test_tup[i];\n            dict[key] = value;\n        }\n    }\n    return dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122662,
      "stdout": "",
      "stderr": "/tmp/tmp1u2d7r0t.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp1u2d7r0t.cpp:8:34: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    8 |     for (int i = 0; i < test_tup.size(); i++) {\n      |                                  ^~~~\n/tmp/tmp1u2d7r0t.cpp:10:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n   10 |             key = test_tup[i];\n      |                             ^\n/tmp/tmp1u2d7r0t.cpp:12:31: error: invalid types \u2018long int[int]\u2019 for array subscript\n   12 |             value = test_tup[i];\n      |                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp1u2d7r0t.cpp:2:\n/tmp/tmp1u2d7r0t.cpp: In function \u2018int main()\u2019:\n/tmp/tmp1u2d7r0t.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp1u2d7r0t.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp1u2d7r0t.cpp:22:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   22 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> dict;\n    long key = 0;\n    long value = 0;\n    for (long i = 0; i < test_tup.size(); i++) {\n        if (i % 2 == 0) {\n            key = test_tup[i];\n        }\n        else {\n            value = test_tup[i];\n            dict[key] = value;\n        }\n    }\n    return dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122663,
      "stdout": "",
      "stderr": "/tmp/tmpb6vd4zw3.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpb6vd4zw3.cpp:8:35: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    8 |     for (long i = 0; i < test_tup.size(); i++) {\n      |                                   ^~~~\n/tmp/tmpb6vd4zw3.cpp:10:29: error: invalid types \u2018long int[long int]\u2019 for array subscript\n   10 |             key = test_tup[i];\n      |                             ^\n/tmp/tmpb6vd4zw3.cpp:13:31: error: invalid types \u2018long int[long int]\u2019 for array subscript\n   13 |             value = test_tup[i];\n      |                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpb6vd4zw3.cpp:2:\n/tmp/tmpb6vd4zw3.cpp: In function \u2018int main()\u2019:\n/tmp/tmpb6vd4zw3.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpb6vd4zw3.cpp:22:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   22 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpb6vd4zw3.cpp:23:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   23 |     assert(candidate(std::make_tuple(7, 8,",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> dict;\n    for(int i=0;i<test_tup.size();i+=2) {\n        dict[test_tup[i]] = test_tup[i+1];\n    }\n    return dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122659,
      "stdout": "",
      "stderr": "/tmp/tmpmssbs9oc.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpmssbs9oc.cpp:6:28: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(int i=0;i<test_tup.size();i+=2) {\n      |                            ^~~~\n/tmp/tmpmssbs9oc.cpp:7:24: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         dict[test_tup[i]] = test_tup[i+1];\n      |                        ^\n/tmp/tmpmssbs9oc.cpp:7:41: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         dict[test_tup[i]] = test_tup[i+1];\n      |                                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpmssbs9oc.cpp:2:\n/tmp/tmpmssbs9oc.cpp: In function \u2018int main()\u2019:\n/tmp/tmpmssbs9oc.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpmssbs9oc.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpmssbs9oc.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n  std::map<long,long> dict;\n  for (int i = 0; i < test_tup.size(); i+=2) {\n    dict[test_tup[i]] = test_tup[i+1];\n  }\n  return dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122664,
      "stdout": "",
      "stderr": "/tmp/tmp5b4is9ch.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp5b4is9ch.cpp:6:32: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |   for (int i = 0; i < test_tup.size(); i+=2) {\n      |                                ^~~~\n/tmp/tmp5b4is9ch.cpp:7:20: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |     dict[test_tup[i]] = test_tup[i+1];\n      |                    ^\n/tmp/tmp5b4is9ch.cpp:7:37: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |     dict[test_tup[i]] = test_tup[i+1];\n      |                                     ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp5b4is9ch.cpp:2:\n/tmp/tmp5b4is9ch.cpp: In function \u2018int main()\u2019:\n/tmp/tmp5b4is9ch.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp5b4is9ch.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp5b4is9ch.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(7, 8, 9, 10",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    for(int i=0;i<test_tup.size();i+=2) {\n        test_map[test_tup[i]] = test_tup[i+1];\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "/tmp/tmpi6a0ep9q.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpi6a0ep9q.cpp:6:28: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(int i=0;i<test_tup.size();i+=2) {\n      |                            ^~~~\n/tmp/tmpi6a0ep9q.cpp:7:28: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_map[test_tup[i]] = test_tup[i+1];\n      |                            ^\n/tmp/tmpi6a0ep9q.cpp:7:45: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_map[test_tup[i]] = test_tup[i+1];\n      |                                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpi6a0ep9q.cpp:2:\n/tmp/tmpi6a0ep9q.cpp: In function \u2018int main()\u2019:\n/tmp/tmpi6a0ep9q.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpi6a0ep9q.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpi6a0ep9q.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std:",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i = 0;\n    while (test_tup != 0) {\n        test_dict[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122657,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpam3q26ik.cpp:2:\n/tmp/tmpam3q26ik.cpp: In function \u2018int main()\u2019:\n/tmp/tmpam3q26ik.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpam3q26ik.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpam3q26ik.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    for(int i=0;i<test_tup.size();i+=2) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "/tmp/tmpsjk9_1ie.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpsjk9_1ie.cpp:6:28: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(int i=0;i<test_tup.size();i+=2) {\n      |                            ^~~~\n/tmp/tmpsjk9_1ie.cpp:7:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmpsjk9_1ie.cpp:7:46: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpsjk9_1ie.cpp:2:\n/tmp/tmpsjk9_1ie.cpp: In function \u2018int main()\u2019:\n/tmp/tmpsjk9_1ie.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpsjk9_1ie.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpsjk9_1ie.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    std::tuple<long,long,long> test_tuple(test_tup);\n    std::vector<long> test_vec(test_tuple);\n    for (int i=0; i<test_vec.size(); i++) {\n        test_dict[test_vec[i]] = test_vec[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122664,
      "stdout": "",
      "stderr": "/tmp/tmph4zpryn8.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmph4zpryn8.cpp:6:51: error: no matching function for call to \u2018std::tuple<long int, long int, long int>::tuple(long int&)\u2019\n    6 |     std::tuple<long,long,long> test_tuple(test_tup);\n      |                                                   ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/functional:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/pstl/glue_algorithm_defs.h:13,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:71,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmph4zpryn8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:808:11: note: candidate: \u2018template<class _Alloc, class _Dummy, class ... _UElements, typename std::enable_if<((std::_TC<((3 == sizeof... (_UElements)) && (! std::is_same<std::tuple<long int, long int, long int>, std::tuple<_Tail ...> >::value)), long int, long int, long int>::_MoveConstructibleTuple<_UElements ...>() && (! std::_TC<((3 == sizeof... (_UElements)) && (! std::is_same<std::tuple<long int, long int, long int>, std::tuple<_Tail ...> >::value)), long int, long int, long int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>())) && std::_TC<(std::is_same<_Dummy, void>::value && (3 == 1)), long int, long int, long int>::_NonNestedTuple<tuple<_Tail ...>&&>()), bool>::type <anonymous> > std::tuple<_Elements>::tuple(std::allocator_arg_t, const _Alloc&, std::tuple<_Args2 ...>&&)\u2019\n  808 |  explicit tuple(allocator_arg_t __tag, const _Alloc& __a,\n      |           ^~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:808:11: note:   template argument deduction/substitution failed:\n/tmp/tmph4zpryn8.cpp:6:51: note:   candidate expects 3 arguments, 1 provided\n    6 |     std::tuple<long,long,long> test_tuple(test_tup);\n      |                                               ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    std::vector<long> test_vec;\n    while(test_tup) {\n        test_vec.push_back(test_tup%10);\n        test_tup /= 10;\n    }\n    for(int i=0;i<test_vec.size();i+=2) {\n        test_dict[test_vec[i]] = test_vec[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122664,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpd8p_pslm.cpp:2:\n/tmp/tmpd8p_pslm.cpp: In function \u2018int main()\u2019:\n/tmp/tmpd8p_pslm.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpd8p_pslm.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpd8p_pslm.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    for(int i = 0; i < test_tup.size(); i+=2) {\n        test_map[test_tup[i]] = test_tup[i+1];\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122664,
      "stdout": "",
      "stderr": "/tmp/tmps7w20_ck.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmps7w20_ck.cpp:6:33: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(int i = 0; i < test_tup.size(); i+=2) {\n      |                                 ^~~~\n/tmp/tmps7w20_ck.cpp:7:28: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_map[test_tup[i]] = test_tup[i+1];\n      |                            ^\n/tmp/tmps7w20_ck.cpp:7:45: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_map[test_tup[i]] = test_tup[i+1];\n      |                                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmps7w20_ck.cpp:2:\n/tmp/tmps7w20_ck.cpp: In function \u2018int main()\u2019:\n/tmp/tmps7w20_ck.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmps7w20_ck.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmps7w20_ck.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(can",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    std::tuple<long, long, long, long, long> test_tuple(test_tup, test_tup+1, test_tup+2, test_tup+3, test_tup+4);\n    std::transform(test_tuple.begin(), test_tuple.end(), std::inserter(test_map, test_map.begin()), [](auto& t) {\n        return std::make_pair(t, t+1);\n    });\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122664,
      "stdout": "",
      "stderr": "/tmp/tmpqzinf07h.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpqzinf07h.cpp:7:31: error: \u2018class std::tuple<long int, long int, long int, long int, long int>\u2019 has no member named \u2018begin\u2019\n    7 |     std::transform(test_tuple.begin(), test_tuple.end(), std::inserter(test_map, test_map.begin()), [](auto& t) {\n      |                               ^~~~~\n/tmp/tmpqzinf07h.cpp:7:51: error: \u2018class std::tuple<long int, long int, long int, long int, long int>\u2019 has no member named \u2018end\u2019\n    7 |     std::transform(test_tuple.begin(), test_tuple.end(), std::inserter(test_map, test_map.begin()), [](auto& t) {\n      |                                                   ^~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpqzinf07h.cpp:2:\n/tmp/tmpqzinf07h.cpp: In function \u2018int main()\u2019:\n/tmp/tmpqzinf07h.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpqzinf07h.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpqzinf07h.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    std::vector<long> test_vec;\n    while(test_tup > 0) {\n        test_vec.push_back(test_tup % 10);\n        test_tup /= 10;\n    }\n    for(int i = 0; i < test_vec.size() - 1; i += 2) {\n        test_dict[test_vec[i]] = test_vec[i + 1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122664,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp9ybbdw_7.cpp:2:\n/tmp/tmp9ybbdw_7.cpp: In function \u2018int main()\u2019:\n/tmp/tmp9ybbdw_7.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp9ybbdw_7.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp9ybbdw_7.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    for(int i=0;i<test_tup.size();i+=2) {\n        test_map[test_tup[i]]=test_tup[i+1];\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122664,
      "stdout": "",
      "stderr": "/tmp/tmp1mo9dhgv.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp1mo9dhgv.cpp:6:28: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(int i=0;i<test_tup.size();i+=2) {\n      |                            ^~~~\n/tmp/tmp1mo9dhgv.cpp:7:28: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_map[test_tup[i]]=test_tup[i+1];\n      |                            ^\n/tmp/tmp1mo9dhgv.cpp:7:43: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_map[test_tup[i]]=test_tup[i+1];\n      |                                           ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp1mo9dhgv.cpp:2:\n/tmp/tmp1mo9dhgv.cpp: In function \u2018int main()\u2019:\n/tmp/tmp1mo9dhgv.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp1mo9dhgv.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp1mo9dhgv.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    std::tuple<long,long,long,long,long,long,long,long,long,long> test_tuple(test_tup);\n    std::map<long,long>::iterator it;\n    for (int i = 0; i < 10; i++) {\n        test_map.insert(std::pair<long,long>(std::get<i>(test_tuple),std::get<i+1>(test_tuple)));\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122668,
      "stdout": "",
      "stderr": "/tmp/tmpuv6yusgk.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpuv6yusgk.cpp:6:86: error: no matching function for call to \u2018std::tuple<long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>::tuple(long int&)\u2019\n    6 |     std::tuple<long,long,long,long,long,long,long,long,long,long> test_tuple(test_tup);\n      |                                                                                      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/functional:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/pstl/glue_algorithm_defs.h:13,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:71,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpuv6yusgk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:808:11: note: candidate: \u2018template<class _Alloc, class _Dummy, class ... _UElements, typename std::enable_if<((std::_TC<((10 == sizeof... (_UElements)) && (! std::is_same<std::tuple<long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>, std::tuple<_Tail ...> >::value)), long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>::_MoveConstructibleTuple<_UElements ...>() && (! std::_TC<((10 == sizeof... (_UElements)) && (! std::is_same<std::tuple<long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>, std::tuple<_Tail ...> >::value)), long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>())) && std::_TC<(std::is_same<_Dummy, void>::value && (10 == 1)), long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>::_NonNestedTuple<tuple<_Tail ...>&&>()), bool>::type <anonymous> > std::tu",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    std::tuple<long,long,long,long,long,long,long,long,long,long> test_tuple(test_tup,test_tup,test_tup,test_tup,test_tup,test_tup,test_tup,test_tup,test_tup,test_tup);\n    cppthon::for_each_adjacent_pair(test_tuple, [&](auto x, auto y) {\n        test_dict[x] = y;\n    });\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122664,
      "stdout": "",
      "stderr": "/tmp/tmp_l1wkwir.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp_l1wkwir.cpp:7:5: error: \u2018cppthon\u2019 has not been declared\n    7 |     cppthon::for_each_adjacent_pair(test_tuple, [&](auto x, auto y) {\n      |     ^~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp_l1wkwir.cpp:2:\n/tmp/tmp_l1wkwir.cpp: In function \u2018int main()\u2019:\n/tmp/tmp_l1wkwir.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp_l1wkwir.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp_l1wkwir.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long i = 0;\n    while (test_tup != 0) {\n        test_map[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509876,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmps3b0038s.cpp:2:\n/tmp/tmps3b0038s.cpp: In function \u2018int main()\u2019:\n/tmp/tmps3b0038s.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmps3b0038s.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmps3b0038s.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    for(int i=0;i<test_tup.size();i+=2) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "/tmp/tmpsjk9_1ie.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpsjk9_1ie.cpp:6:28: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(int i=0;i<test_tup.size();i+=2) {\n      |                            ^~~~\n/tmp/tmpsjk9_1ie.cpp:7:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmpsjk9_1ie.cpp:7:46: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpsjk9_1ie.cpp:2:\n/tmp/tmpsjk9_1ie.cpp: In function \u2018int main()\u2019:\n/tmp/tmpsjk9_1ie.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpsjk9_1ie.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpsjk9_1ie.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    std::vector<long> test_vec;\n    for (long i=0; i<test_tup.size(); i++) {\n        test_vec.push_back(test_tup[i]);\n    }\n    for (long i=0; i<test_vec.size(); i+=2) {\n        test_map[test_vec[i]] = test_vec[i+1];\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122664,
      "stdout": "",
      "stderr": "/tmp/tmpi077belr.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpi077belr.cpp:7:31: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    7 |     for (long i=0; i<test_tup.size(); i++) {\n      |                               ^~~~\n/tmp/tmpi077belr.cpp:8:38: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    8 |         test_vec.push_back(test_tup[i]);\n      |                                      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpi077belr.cpp:2:\n/tmp/tmpi077belr.cpp: In function \u2018int main()\u2019:\n/tmp/tmpi077belr.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpi077belr.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpi077belr.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> result;\n    for(int i=0;i<test_tup.size();i+=2) {\n        result[test_tup[i]] = test_tup[i+1];\n    }\n    return result;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122664,
      "stdout": "",
      "stderr": "/tmp/tmpfbwbmwff.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpfbwbmwff.cpp:6:28: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(int i=0;i<test_tup.size();i+=2) {\n      |                            ^~~~\n/tmp/tmpfbwbmwff.cpp:7:26: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         result[test_tup[i]] = test_tup[i+1];\n      |                          ^\n/tmp/tmpfbwbmwff.cpp:7:43: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         result[test_tup[i]] = test_tup[i+1];\n      |                                           ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpfbwbmwff.cpp:2:\n/tmp/tmpfbwbmwff.cpp: In function \u2018int main()\u2019:\n/tmp/tmpfbwbmwff.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpfbwbmwff.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpfbwbmwff.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tu",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    for(int i=0;i<test_tup.size();i+=2) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "/tmp/tmpsjk9_1ie.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpsjk9_1ie.cpp:6:28: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(int i=0;i<test_tup.size();i+=2) {\n      |                            ^~~~\n/tmp/tmpsjk9_1ie.cpp:7:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmpsjk9_1ie.cpp:7:46: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpsjk9_1ie.cpp:2:\n/tmp/tmpsjk9_1ie.cpp: In function \u2018int main()\u2019:\n/tmp/tmpsjk9_1ie.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpsjk9_1ie.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpsjk9_1ie.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i = 0;\n    while (test_tup != 0) {\n        test_dict[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122657,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpam3q26ik.cpp:2:\n/tmp/tmpam3q26ik.cpp: In function \u2018int main()\u2019:\n/tmp/tmpam3q26ik.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpam3q26ik.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpam3q26ik.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    for (int i = 0; i < test_tup.size()-1; i+=2) {\n        test_map[test_tup[i]] = test_tup[i+1];\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122664,
      "stdout": "",
      "stderr": "/tmp/tmp2j3ylunh.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp2j3ylunh.cpp:6:34: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for (int i = 0; i < test_tup.size()-1; i+=2) {\n      |                                  ^~~~\n/tmp/tmp2j3ylunh.cpp:7:28: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_map[test_tup[i]] = test_tup[i+1];\n      |                            ^\n/tmp/tmp2j3ylunh.cpp:7:45: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_map[test_tup[i]] = test_tup[i+1];\n      |                                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp2j3ylunh.cpp:2:\n/tmp/tmp2j3ylunh.cpp: In function \u2018int main()\u2019:\n/tmp/tmp2j3ylunh.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp2j3ylunh.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp2j3ylunh.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    std::tuple<long,long> test_tuple(test_tup);\n    test_dict[std::get<0>(test_tuple)] = std::get<1>(test_tuple);\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122664,
      "stdout": "",
      "stderr": "/tmp/tmp4pnocx5_.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp4pnocx5_.cpp:6:46: error: no matching function for call to \u2018std::tuple<long int, long int>::tuple(long int&)\u2019\n    6 |     std::tuple<long,long> test_tuple(test_tup);\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/functional:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/pstl/glue_algorithm_defs.h:13,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:71,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp4pnocx5_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:1199:18: note: candidate: \u2018template<class _Alloc, class _U1, class _U2, typename std::enable_if<(_MoveConstructibleTuple<_U1, _U2>() && (! _ImplicitlyMoveConvertibleTuple<_U1, _U2>())), bool>::type <anonymous> > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const _Alloc&, std::pair<_U1, _U2>&&)\u2019\n 1199 |         explicit tuple(allocator_arg_t __tag, const _Alloc& __a,\n      |                  ^~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:1199:18: note:   template argument deduction/substitution failed:\n/tmp/tmp4pnocx5_.cpp:6:46: note:   candidate expects 3 arguments, 1 provided\n    6 |     std::tuple<long,long> test_tuple(test_tup);\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/functional:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/pstl/glue_algorithm_defs.h:13,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:71,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp4pnocx5_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:1189",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    for(int i=0; i<test_tup.size(); i+=2) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122664,
      "stdout": "",
      "stderr": "/tmp/tmpdxwvcfj9.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpdxwvcfj9.cpp:6:29: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(int i=0; i<test_tup.size(); i+=2) {\n      |                             ^~~~\n/tmp/tmpdxwvcfj9.cpp:7:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmpdxwvcfj9.cpp:7:46: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpdxwvcfj9.cpp:2:\n/tmp/tmpdxwvcfj9.cpp: In function \u2018int main()\u2019:\n/tmp/tmpdxwvcfj9.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpdxwvcfj9.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpdxwvcfj9.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candida",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long key=0;\n    long value=0;\n    for(long i=0; i<test_tup.size(); i++) {\n        if(i%2==0) {\n            key=test_tup[i];\n        }\n        else {\n            value=test_tup[i];\n            test_map[key]=value;\n        }\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122664,
      "stdout": "",
      "stderr": "/tmp/tmpg42uro3m.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpg42uro3m.cpp:8:30: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    8 |     for(long i=0; i<test_tup.size(); i++) {\n      |                              ^~~~\n/tmp/tmpg42uro3m.cpp:10:27: error: invalid types \u2018long int[long int]\u2019 for array subscript\n   10 |             key=test_tup[i];\n      |                           ^\n/tmp/tmpg42uro3m.cpp:13:29: error: invalid types \u2018long int[long int]\u2019 for array subscript\n   13 |             value=test_tup[i];\n      |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpg42uro3m.cpp:2:\n/tmp/tmpg42uro3m.cpp: In function \u2018int main()\u2019:\n/tmp/tmpg42uro3m.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpg42uro3m.cpp:22:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   22 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpg42uro3m.cpp:23:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   23 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) =",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    for(int i=0;i<test_tup.size();i+=2) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "/tmp/tmpsjk9_1ie.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpsjk9_1ie.cpp:6:28: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(int i=0;i<test_tup.size();i+=2) {\n      |                            ^~~~\n/tmp/tmpsjk9_1ie.cpp:7:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmpsjk9_1ie.cpp:7:46: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpsjk9_1ie.cpp:2:\n/tmp/tmpsjk9_1ie.cpp: In function \u2018int main()\u2019:\n/tmp/tmpsjk9_1ie.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpsjk9_1ie.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpsjk9_1ie.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    std::cout << \"Tuple: \" << test_tup << std::endl;\n    for (int i = 0; i < test_tup.size(); i++) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122665,
      "stdout": "",
      "stderr": "/tmp/tmpa3q9ps2z.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpa3q9ps2z.cpp:7:34: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    7 |     for (int i = 0; i < test_tup.size(); i++) {\n      |                                  ^~~~\n/tmp/tmpa3q9ps2z.cpp:8:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n    8 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmpa3q9ps2z.cpp:8:46: error: invalid types \u2018long int[int]\u2019 for array subscript\n    8 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpa3q9ps2z.cpp:2:\n/tmp/tmpa3q9ps2z.cpp: In function \u2018int main()\u2019:\n/tmp/tmpa3q9ps2z.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpa3q9ps2z.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpa3q9ps2z.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     asser",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    for(int i=0;i<test_tup.size();i+=2) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "/tmp/tmpsjk9_1ie.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpsjk9_1ie.cpp:6:28: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(int i=0;i<test_tup.size();i+=2) {\n      |                            ^~~~\n/tmp/tmpsjk9_1ie.cpp:7:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmpsjk9_1ie.cpp:7:46: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpsjk9_1ie.cpp:2:\n/tmp/tmpsjk9_1ie.cpp: In function \u2018int main()\u2019:\n/tmp/tmpsjk9_1ie.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpsjk9_1ie.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpsjk9_1ie.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long i = 0;\n    long j = 1;\n    while (j < test_tup.size()) {\n        test_map[test_tup[i]] = test_tup[j];\n        i += 2;\n        j += 2;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122665,
      "stdout": "",
      "stderr": "/tmp/tmpcyu5j56w.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpcyu5j56w.cpp:8:25: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    8 |     while (j < test_tup.size()) {\n      |                         ^~~~\n/tmp/tmpcyu5j56w.cpp:9:28: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    9 |         test_map[test_tup[i]] = test_tup[j];\n      |                            ^\n/tmp/tmpcyu5j56w.cpp:9:43: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    9 |         test_map[test_tup[i]] = test_tup[j];\n      |                                           ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpcyu5j56w.cpp:2:\n/tmp/tmpcyu5j56w.cpp: In function \u2018int main()\u2019:\n/tmp/tmpcyu5j56w.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpcyu5j56w.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpcyu5j56w.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_t",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    std::map<long,long>::iterator itr;\n    long i = 0;\n    for (itr = test_dict.begin(); itr != test_dict.end(); itr++) {\n        test_dict[i] = test_tup;\n        i++;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122665,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp9a3dth81.cpp:2:\n/tmp/tmp9a3dth81.cpp: In function \u2018int main()\u2019:\n/tmp/tmp9a3dth81.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp9a3dth81.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp9a3dth81.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    for (int i = 0; i < test_tup.size(); i+=2) {\n        test_map[test_tup[i]] = test_tup[i+1];\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122659,
      "stdout": "",
      "stderr": "/tmp/tmp09hrevom.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp09hrevom.cpp:6:34: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for (int i = 0; i < test_tup.size(); i+=2) {\n      |                                  ^~~~\n/tmp/tmp09hrevom.cpp:7:28: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_map[test_tup[i]] = test_tup[i+1];\n      |                            ^\n/tmp/tmp09hrevom.cpp:7:45: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_map[test_tup[i]] = test_tup[i+1];\n      |                                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp09hrevom.cpp:2:\n/tmp/tmp09hrevom.cpp: In function \u2018int main()\u2019:\n/tmp/tmp09hrevom.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp09hrevom.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp09hrevom.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(c",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i = 0;\n    while(test_tup) {\n        test_dict[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122659,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpdp6lruud.cpp:2:\n/tmp/tmpdp6lruud.cpp: In function \u2018int main()\u2019:\n/tmp/tmpdp6lruud.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpdp6lruud.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpdp6lruud.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i = 0;\n    while (test_tup) {\n        test_dict[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509876,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpl66a7g5o.cpp:2:\n/tmp/tmpl66a7g5o.cpp: In function \u2018int main()\u2019:\n/tmp/tmpl66a7g5o.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpl66a7g5o.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpl66a7g5o.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n  std::map<long,long> test_map;\n  std::tuple<long,long,long,long,long,long,long,long,long,long> test_tuple;\n  test_tuple = std::make_tuple(1,2,3,4,5,6,7,8,9,10);\n  std::tuple<long,long,long,long,long,long,long,long,long,long>::iterator it;\n  it = test_tuple.begin();\n  for(it; it != test_tuple.end(); it++) {\n    test_map[*it] = *(it+1);\n  }\n  return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122665,
      "stdout": "",
      "stderr": "/tmp/tmp0ndyno4c.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp0ndyno4c.cpp:8:66: error: \u2018iterator\u2019 is not a member of \u2018std::tuple<long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>\u2019\n    8 |   std::tuple<long,long,long,long,long,long,long,long,long,long>::iterator it;\n      |                                                                  ^~~~~~~~\n/tmp/tmp0ndyno4c.cpp:9:3: error: \u2018it\u2019 was not declared in this scope; did you mean \u2018int\u2019?\n    9 |   it = test_tuple.begin();\n      |   ^~\n      |   int\n/tmp/tmp0ndyno4c.cpp:9:19: error: \u2018class std::tuple<long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>\u2019 has no member named \u2018begin\u2019\n    9 |   it = test_tuple.begin();\n      |                   ^~~~~\n/tmp/tmp0ndyno4c.cpp:10:28: error: \u2018class std::tuple<long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>\u2019 has no member named \u2018end\u2019\n   10 |   for(it; it != test_tuple.end(); it++) {\n      |                            ^~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp0ndyno4c.cpp:2:\n/tmp/tmp0ndyno4c.cpp: In function \u2018int main()\u2019:\n/tmp/tmp0ndyno4c.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp0ndyno4c.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candid",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long i = 0;\n    while (test_tup) {\n        test_map[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509876,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp_gn5paar.cpp:2:\n/tmp/tmp_gn5paar.cpp: In function \u2018int main()\u2019:\n/tmp/tmp_gn5paar.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp_gn5paar.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp_gn5paar.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i = 0;\n    while(test_tup) {\n        test_dict[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122659,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpdp6lruud.cpp:2:\n/tmp/tmpdp6lruud.cpp: In function \u2018int main()\u2019:\n/tmp/tmpdp6lruud.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpdp6lruud.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpdp6lruud.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i = 0;\n    while (test_tup != 0) {\n        test_dict[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122657,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpam3q26ik.cpp:2:\n/tmp/tmpam3q26ik.cpp: In function \u2018int main()\u2019:\n/tmp/tmpam3q26ik.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpam3q26ik.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpam3q26ik.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long i = 0;\n    while (test_tup) {\n        test_map[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509876,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp_gn5paar.cpp:2:\n/tmp/tmp_gn5paar.cpp: In function \u2018int main()\u2019:\n/tmp/tmp_gn5paar.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp_gn5paar.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp_gn5paar.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    for (auto i = 0; i < test_tup.size(); i+=2) {\n        test_map[test_tup[i]] = test_tup[i+1];\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122666,
      "stdout": "",
      "stderr": "/tmp/tmp_o2jouhf.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp_o2jouhf.cpp:6:35: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for (auto i = 0; i < test_tup.size(); i+=2) {\n      |                                   ^~~~\n/tmp/tmp_o2jouhf.cpp:7:28: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_map[test_tup[i]] = test_tup[i+1];\n      |                            ^\n/tmp/tmp_o2jouhf.cpp:7:45: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_map[test_tup[i]] = test_tup[i+1];\n      |                                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp_o2jouhf.cpp:2:\n/tmp/tmp_o2jouhf.cpp: In function \u2018int main()\u2019:\n/tmp/tmp_o2jouhf.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp_o2jouhf.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp_o2jouhf.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    std::tuple<long,long,long,long,long,long> test_tuple(test_tup);\n    test_map[std::get<0>(test_tuple)] = std::get<1>(test_tuple);\n    test_map[std::get<2>(test_tuple)] = std::get<3>(test_tuple);\n    test_map[std::get<4>(test_tuple)] = std::get<5>(test_tuple);\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122667,
      "stdout": "",
      "stderr": "/tmp/tmpftd9zihc.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpftd9zihc.cpp:6:66: error: no matching function for call to \u2018std::tuple<long int, long int, long int, long int, long int, long int>::tuple(long int&)\u2019\n    6 |     std::tuple<long,long,long,long,long,long> test_tuple(test_tup);\n      |                                                                  ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/functional:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/pstl/glue_algorithm_defs.h:13,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:71,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpftd9zihc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:808:11: note: candidate: \u2018template<class _Alloc, class _Dummy, class ... _UElements, typename std::enable_if<((std::_TC<((6 == sizeof... (_UElements)) && (! std::is_same<std::tuple<long int, long int, long int, long int, long int, long int>, std::tuple<_Tail ...> >::value)), long int, long int, long int, long int, long int, long int>::_MoveConstructibleTuple<_UElements ...>() && (! std::_TC<((6 == sizeof... (_UElements)) && (! std::is_same<std::tuple<long int, long int, long int, long int, long int, long int>, std::tuple<_Tail ...> >::value)), long int, long int, long int, long int, long int, long int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>())) && std::_TC<(std::is_same<_Dummy, void>::value && (6 == 1)), long int, long int, long int, long int, long int, long int>::_NonNestedTuple<tuple<_Tail ...>&&>()), bool>::type <anonymous> > std::tuple<_Elements>::tuple(std::allocator_arg_t, const _Alloc&, std::tuple<_Args2 ...>&&)\u2019\n  808 |  explicit tuple(allocator_arg_t __tag, const _Alloc& __a,\n      |           ^~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:808:11: note:   template argument deduction/sub",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    std::tuple<long,long,long,long,long,long,long,long,long,long> test_tuple(test_tup);\n    std::tuple<long,long,long,long,long,long,long,long,long,long>::iterator it = test_tuple.begin();\n    for(;it != test_tuple.end();it++) {\n        test_dict[*it] = *(it+1);\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122667,
      "stdout": "",
      "stderr": "/tmp/tmpinhyussc.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpinhyussc.cpp:6:86: error: no matching function for call to \u2018std::tuple<long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>::tuple(long int&)\u2019\n    6 |     std::tuple<long,long,long,long,long,long,long,long,long,long> test_tuple(test_tup);\n      |                                                                                      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/functional:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/pstl/glue_algorithm_defs.h:13,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:71,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpinhyussc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:808:11: note: candidate: \u2018template<class _Alloc, class _Dummy, class ... _UElements, typename std::enable_if<((std::_TC<((10 == sizeof... (_UElements)) && (! std::is_same<std::tuple<long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>, std::tuple<_Tail ...> >::value)), long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>::_MoveConstructibleTuple<_UElements ...>() && (! std::_TC<((10 == sizeof... (_UElements)) && (! std::is_same<std::tuple<long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>, std::tuple<_Tail ...> >::value)), long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>())) && std::_TC<(std::is_same<_Dummy, void>::value && (10 == 1)), long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>::_NonNestedTuple<tuple<_Tail ...>&&>()), bool>::type <anonymous> > std::tu",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i = 0;\n    while(test_tup) {\n        test_dict[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122659,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpdp6lruud.cpp:2:\n/tmp/tmpdp6lruud.cpp: In function \u2018int main()\u2019:\n/tmp/tmpdp6lruud.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpdp6lruud.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpdp6lruud.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long key = 0;\n    long value = 0;\n    while (test_tup) {\n        key = test_tup & 0xFFFF;\n        test_tup = test_tup >> 16;\n        value = test_tup & 0xFFFF;\n        test_tup = test_tup >> 16;\n        test_map[key] = value;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122667,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpjar7pxs7.cpp:2:\n/tmp/tmpjar7pxs7.cpp: In function \u2018int main()\u2019:\n/tmp/tmpjar7pxs7.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpjar7pxs7.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpjar7pxs7.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    std::pair<long,long> test_pair;\n    for (int i=0; i<test_tup.size(); i+=2) {\n        test_pair = std::make_pair(test_tup[i], test_tup[i+1]);\n        test_dict.insert(test_pair);\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122667,
      "stdout": "",
      "stderr": "/tmp/tmpt66mauim.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpt66mauim.cpp:7:30: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    7 |     for (int i=0; i<test_tup.size(); i+=2) {\n      |                              ^~~~\n/tmp/tmpt66mauim.cpp:8:46: error: invalid types \u2018long int[int]\u2019 for array subscript\n    8 |         test_pair = std::make_pair(test_tup[i], test_tup[i+1]);\n      |                                              ^\n/tmp/tmpt66mauim.cpp:8:61: error: invalid types \u2018long int[int]\u2019 for array subscript\n    8 |         test_pair = std::make_pair(test_tup[i], test_tup[i+1]);\n      |                                                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpt66mauim.cpp:2:\n/tmp/tmpt66mauim.cpp: In function \u2018int main()\u2019:\n/tmp/tmpt66mauim.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpt66mauim.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpt66mauim.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i = 0;\n    for (auto it = test_tup.begin(); it != test_tup.end(); ++it) {\n        if (i % 2 == 0) {\n            test_dict[*it] = *(it+1);\n        }\n        i++;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122667,
      "stdout": "",
      "stderr": "/tmp/tmpj2jg7nii.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpj2jg7nii.cpp:7:29: error: request for member \u2018begin\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    7 |     for (auto it = test_tup.begin(); it != test_tup.end(); ++it) {\n      |                             ^~~~~\n/tmp/tmpj2jg7nii.cpp:7:53: error: request for member \u2018end\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    7 |     for (auto it = test_tup.begin(); it != test_tup.end(); ++it) {\n      |                                                     ^~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpj2jg7nii.cpp:2:\n/tmp/tmpj2jg7nii.cpp: In function \u2018int main()\u2019:\n/tmp/tmpj2jg7nii.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpj2jg7nii.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpj2jg7nii.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    std::vector<long> test_vec;\n    while (test_tup > 0) {\n        test_vec.push_back(test_tup % 10);\n        test_tup /= 10;\n    }\n    for (int i = 0; i < test_vec.size(); i += 2) {\n        test_map[test_vec[i]] = test_vec[i+1];\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122667,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpetpgii8z.cpp:2:\n/tmp/tmpetpgii8z.cpp: In function \u2018int main()\u2019:\n/tmp/tmpetpgii8z.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpetpgii8z.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpetpgii8z.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long i = 0;\n    while(test_tup) {\n        test_map[i] = test_tup%10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122667,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpb3fwkr06.cpp:2:\n/tmp/tmpb3fwkr06.cpp: In function \u2018int main()\u2019:\n/tmp/tmpb3fwkr06.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpb3fwkr06.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpb3fwkr06.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long temp = test_tup;\n    while(temp) {\n        test_map[temp%10] = temp%100/10;\n        temp /= 100;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122667,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp8elw27op.cpp:2:\n/tmp/tmp8elw27op.cpp: In function \u2018int main()\u2019:\n/tmp/tmp8elw27op.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp8elw27op.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp8elw27op.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    std::tuple<long,long,long,long,long,long,long,long,long,long> test_tuple = test_tup;\n    std::tuple_size<decltype(test_tuple)>::value;\n    for(int i=0;i<std::tuple_size<decltype(test_tuple)>::value;i+=2) {\n        test_map[std::get<i>(test_tuple)] = std::get<i+1>(test_tuple);\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122667,
      "stdout": "",
      "stderr": "/tmp/tmpg3wskzhc.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpg3wskzhc.cpp:6:80: error: conversion from \u2018long int\u2019 to non-scalar type \u2018std::tuple<long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>\u2019 requested\n    6 |     std::tuple<long,long,long,long,long,long,long,long,long,long> test_tuple = test_tup;\n      |                                                                                ^~~~~~~~\n/tmp/tmpg3wskzhc.cpp:9:40: error: no matching function for call to \u2018get<i>(std::tuple<long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>&)\u2019\n    9 |         test_map[std::get<i>(test_tuple)] = std::get<i+1>(test_tuple);\n      |                                        ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpg3wskzhc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/utility:219:5: note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2> constexpr typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type& std::get(std::pair<_Tp1, _Tp2>&)\u2019\n  219 |     get(std::pair<_Tp1, _Tp2>& __in) noexcept\n      |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/utility:219:5: note:   template argument deduction/substitution failed:\n/tmp/tmpg3wskzhc.cpp:9:40: error: the value of \u2018i\u2019 is not usable in a constant expression\n    9 |         test_map[std::get<i>(test_tuple)] = std::get<i+1>(test_tuple);\n      |                                        ^\n/tmp/tmpg3wskzhc.cpp:8:13: note: \u2018int i\u2019 is not const\n    8 |     for(int i=0;i<std::tuple_size<decltype(test_tuple)>::value;i+=2) {\n      |             ^\n/tmp/tmpg3wskzhc.cpp:9:40: note: in template argument for type \u2018long unsigned int\u2019\n    9 |         test_map[std::get<i>(test_tuple)] = std::get<i+1>(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> dict;\n    long key = 0;\n    long value = 0;\n    for(int i = 0; i < test_tup.size(); i++) {\n        if(i % 2 == 0) {\n            key = test_tup[i];\n        }\n        else {\n            value = test_tup[i];\n            dict[key] = value;\n        }\n    }\n    return dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122667,
      "stdout": "",
      "stderr": "/tmp/tmpa2lkgbvb.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpa2lkgbvb.cpp:8:33: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    8 |     for(int i = 0; i < test_tup.size(); i++) {\n      |                                 ^~~~\n/tmp/tmpa2lkgbvb.cpp:10:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n   10 |             key = test_tup[i];\n      |                             ^\n/tmp/tmpa2lkgbvb.cpp:13:31: error: invalid types \u2018long int[int]\u2019 for array subscript\n   13 |             value = test_tup[i];\n      |                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpa2lkgbvb.cpp:2:\n/tmp/tmpa2lkgbvb.cpp: In function \u2018int main()\u2019:\n/tmp/tmpa2lkgbvb.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpa2lkgbvb.cpp:22:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   22 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpa2lkgbvb.cpp:23:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   23 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long i = 0;\n    for (auto it = test_tup.begin(); it != test_tup.end(); ++it) {\n        if (i % 2 == 0) {\n            test_map[*it] = *(it + 1);\n        }\n        i++;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122667,
      "stdout": "",
      "stderr": "/tmp/tmp1vd4au2a.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp1vd4au2a.cpp:7:29: error: request for member \u2018begin\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    7 |     for (auto it = test_tup.begin(); it != test_tup.end(); ++it) {\n      |                             ^~~~~\n/tmp/tmp1vd4au2a.cpp:7:53: error: request for member \u2018end\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    7 |     for (auto it = test_tup.begin(); it != test_tup.end(); ++it) {\n      |                                                     ^~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp1vd4au2a.cpp:2:\n/tmp/tmp1vd4au2a.cpp: In function \u2018int main()\u2019:\n/tmp/tmp1vd4au2a.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp1vd4au2a.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp1vd4au2a.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    for(int i=0;i<test_tup.size();i++) {\n        test_map.insert(std::make_pair(test_tup[i],test_tup[i+1]));\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122667,
      "stdout": "",
      "stderr": "/tmp/tmpm2qxo393.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpm2qxo393.cpp:6:28: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(int i=0;i<test_tup.size();i++) {\n      |                            ^~~~\n/tmp/tmpm2qxo393.cpp:7:50: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_map.insert(std::make_pair(test_tup[i],test_tup[i+1]));\n      |                                                  ^\n/tmp/tmpm2qxo393.cpp:7:64: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_map.insert(std::make_pair(test_tup[i],test_tup[i+1]));\n      |                                                                ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpm2qxo393.cpp:2:\n/tmp/tmpm2qxo393.cpp: In function \u2018int main()\u2019:\n/tmp/tmpm2qxo393.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpm2qxo393.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpm2qxo393.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, in",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long key = 0;\n    long value = 0;\n    long count = 0;\n    while (test_tup) {\n        if (count % 2 == 0) {\n            key = test_tup % 10;\n            test_map[key] = value;\n        }\n        else {\n            value = test_tup % 10;\n            test_map[key] = value;\n        }\n        test_tup /= 10;\n        count++;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122667,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpb_ceu2ut.cpp:2:\n/tmp/tmpb_ceu2ut.cpp: In function \u2018int main()\u2019:\n/tmp/tmpb_ceu2ut.cpp:25:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   25 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpb_ceu2ut.cpp:26:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   26 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpb_ceu2ut.cpp:27:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   27 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    for(int i=0;i<test_tup.size();i+=2) {\n        test_map[test_tup[i]] = test_tup[i+1];\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "/tmp/tmpi6a0ep9q.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpi6a0ep9q.cpp:6:28: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(int i=0;i<test_tup.size();i+=2) {\n      |                            ^~~~\n/tmp/tmpi6a0ep9q.cpp:7:28: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_map[test_tup[i]] = test_tup[i+1];\n      |                            ^\n/tmp/tmpi6a0ep9q.cpp:7:45: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_map[test_tup[i]] = test_tup[i+1];\n      |                                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpi6a0ep9q.cpp:2:\n/tmp/tmpi6a0ep9q.cpp: In function \u2018int main()\u2019:\n/tmp/tmpi6a0ep9q.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpi6a0ep9q.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpi6a0ep9q.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std:",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    std::tuple<long,long,long,long,long,long,long,long> test_tuple(test_tup);\n    std::tuple<long,long,long,long,long,long,long,long>::iterator it = test_tuple.begin();\n    for (; it != test_tuple.end(); ++it) {\n        test_map[*it] = *(++it);\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122667,
      "stdout": "",
      "stderr": "/tmp/tmpz94dox6q.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpz94dox6q.cpp:6:76: error: no matching function for call to \u2018std::tuple<long int, long int, long int, long int, long int, long int, long int, long int>::tuple(long int&)\u2019\n    6 |     std::tuple<long,long,long,long,long,long,long,long> test_tuple(test_tup);\n      |                                                                            ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/functional:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/pstl/glue_algorithm_defs.h:13,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:71,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpz94dox6q.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:808:11: note: candidate: \u2018template<class _Alloc, class _Dummy, class ... _UElements, typename std::enable_if<((std::_TC<((8 == sizeof... (_UElements)) && (! std::is_same<std::tuple<long int, long int, long int, long int, long int, long int, long int, long int>, std::tuple<_Tail ...> >::value)), long int, long int, long int, long int, long int, long int, long int, long int>::_MoveConstructibleTuple<_UElements ...>() && (! std::_TC<((8 == sizeof... (_UElements)) && (! std::is_same<std::tuple<long int, long int, long int, long int, long int, long int, long int, long int>, std::tuple<_Tail ...> >::value)), long int, long int, long int, long int, long int, long int, long int, long int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>())) && std::_TC<(std::is_same<_Dummy, void>::value && (8 == 1)), long int, long int, long int, long int, long int, long int, long int, long int>::_NonNestedTuple<tuple<_Tail ...>&&>()), bool>::type <anonymous> > std::tuple<_Elements>::tuple(std::allocator_arg_t, const _Alloc&, std::tuple<_Args2 ...>&&)\u2019\n  808 |  explicit tuple(allocator_arg_t __tag, const _A",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long key = 0;\n    long value = 0;\n    for (int i = 0; i < test_tup.size(); i++) {\n        if (i % 2 == 0) {\n            key = test_tup[i];\n        }\n        else {\n            value = test_tup[i];\n            test_map[key] = value;\n        }\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509876,
      "stdout": "",
      "stderr": "/tmp/tmpcat8vyh9.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpcat8vyh9.cpp:8:34: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    8 |     for (int i = 0; i < test_tup.size(); i++) {\n      |                                  ^~~~\n/tmp/tmpcat8vyh9.cpp:10:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n   10 |             key = test_tup[i];\n      |                             ^\n/tmp/tmpcat8vyh9.cpp:13:31: error: invalid types \u2018long int[int]\u2019 for array subscript\n   13 |             value = test_tup[i];\n      |                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpcat8vyh9.cpp:2:\n/tmp/tmpcat8vyh9.cpp: In function \u2018int main()\u2019:\n/tmp/tmpcat8vyh9.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpcat8vyh9.cpp:22:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   22 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpcat8vyh9.cpp:23:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   23 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> dict;\n    long key = 0;\n    long value = 0;\n    while(test_tup) {\n        key = test_tup % 10;\n        test_tup /= 10;\n        value = test_tup % 10;\n        test_tup /= 10;\n        dict[key] = value;\n    }\n    return dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122667,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpm0vfyoyv.cpp:2:\n/tmp/tmpm0vfyoyv.cpp: In function \u2018int main()\u2019:\n/tmp/tmpm0vfyoyv.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpm0vfyoyv.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpm0vfyoyv.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long temp = test_tup;\n    while (temp) {\n        test_map[temp%10] = temp%100/10;\n        temp /= 100;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122667,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpiej11hfp.cpp:2:\n/tmp/tmpiej11hfp.cpp: In function \u2018int main()\u2019:\n/tmp/tmpiej11hfp.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpiej11hfp.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpiej11hfp.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    for(int i=0;i<test_tup.size();i+=2) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "/tmp/tmpsjk9_1ie.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpsjk9_1ie.cpp:6:28: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(int i=0;i<test_tup.size();i+=2) {\n      |                            ^~~~\n/tmp/tmpsjk9_1ie.cpp:7:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmpsjk9_1ie.cpp:7:46: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpsjk9_1ie.cpp:2:\n/tmp/tmpsjk9_1ie.cpp: In function \u2018int main()\u2019:\n/tmp/tmpsjk9_1ie.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpsjk9_1ie.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpsjk9_1ie.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long key = 0;\n    long value = 0;\n    for (int i = 0; i < test_tup.size(); i++) {\n        if (i % 2 == 0) {\n            key = test_tup[i];\n        }\n        else {\n            value = test_tup[i];\n            test_dict[key] = value;\n        }\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "/tmp/tmpiczk2wv5.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpiczk2wv5.cpp:8:34: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    8 |     for (int i = 0; i < test_tup.size(); i++) {\n      |                                  ^~~~\n/tmp/tmpiczk2wv5.cpp:10:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n   10 |             key = test_tup[i];\n      |                             ^\n/tmp/tmpiczk2wv5.cpp:13:31: error: invalid types \u2018long int[int]\u2019 for array subscript\n   13 |             value = test_tup[i];\n      |                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpiczk2wv5.cpp:2:\n/tmp/tmpiczk2wv5.cpp: In function \u2018int main()\u2019:\n/tmp/tmpiczk2wv5.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpiczk2wv5.cpp:22:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   22 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpiczk2wv5.cpp:23:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   23 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i = 0;\n    while (test_tup) {\n        test_dict[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509876,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpl66a7g5o.cpp:2:\n/tmp/tmpl66a7g5o.cpp: In function \u2018int main()\u2019:\n/tmp/tmpl66a7g5o.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpl66a7g5o.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpl66a7g5o.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i = 0;\n    while (test_tup != 0) {\n        test_dict[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122657,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpam3q26ik.cpp:2:\n/tmp/tmpam3q26ik.cpp: In function \u2018int main()\u2019:\n/tmp/tmpam3q26ik.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpam3q26ik.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpam3q26ik.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    std::tuple<long,long,long,long,long,long,long,long> test_tuple = std::make_tuple(1,2,3,4,5,6,7,8);\n    std::tuple<long,long,long,long,long,long,long,long>::iterator it = test_tuple.begin();\n    for (it; it != test_tuple.end(); it++) {\n        test_map[*it] = *(it+1);\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122668,
      "stdout": "",
      "stderr": "/tmp/tmpokkmwvwp.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpokkmwvwp.cpp:7:58: error: \u2018iterator\u2019 is not a member of \u2018std::tuple<long int, long int, long int, long int, long int, long int, long int, long int>\u2019\n    7 |     std::tuple<long,long,long,long,long,long,long,long>::iterator it = test_tuple.begin();\n      |                                                          ^~~~~~~~\n/tmp/tmpokkmwvwp.cpp:8:10: error: \u2018it\u2019 was not declared in this scope; did you mean \u2018int\u2019?\n    8 |     for (it; it != test_tuple.end(); it++) {\n      |          ^~\n      |          int\n/tmp/tmpokkmwvwp.cpp:8:31: error: \u2018class std::tuple<long int, long int, long int, long int, long int, long int, long int, long int>\u2019 has no member named \u2018end\u2019\n    8 |     for (it; it != test_tuple.end(); it++) {\n      |                               ^~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpokkmwvwp.cpp:2:\n/tmp/tmpokkmwvwp.cpp: In function \u2018int main()\u2019:\n/tmp/tmpokkmwvwp.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpokkmwvwp.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tup",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    for(int i=0; i<test_tup.size(); i+=2) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122664,
      "stdout": "",
      "stderr": "/tmp/tmpdxwvcfj9.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpdxwvcfj9.cpp:6:29: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(int i=0; i<test_tup.size(); i+=2) {\n      |                             ^~~~\n/tmp/tmpdxwvcfj9.cpp:7:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmpdxwvcfj9.cpp:7:46: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpdxwvcfj9.cpp:2:\n/tmp/tmpdxwvcfj9.cpp: In function \u2018int main()\u2019:\n/tmp/tmpdxwvcfj9.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpdxwvcfj9.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpdxwvcfj9.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candida",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long i = 0;\n    long j = 1;\n    while (j < test_tup.size()) {\n        test_map[test_tup[i]] = test_tup[j];\n        i += 2;\n        j += 2;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122665,
      "stdout": "",
      "stderr": "/tmp/tmpcyu5j56w.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpcyu5j56w.cpp:8:25: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    8 |     while (j < test_tup.size()) {\n      |                         ^~~~\n/tmp/tmpcyu5j56w.cpp:9:28: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    9 |         test_map[test_tup[i]] = test_tup[j];\n      |                            ^\n/tmp/tmpcyu5j56w.cpp:9:43: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    9 |         test_map[test_tup[i]] = test_tup[j];\n      |                                           ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpcyu5j56w.cpp:2:\n/tmp/tmpcyu5j56w.cpp: In function \u2018int main()\u2019:\n/tmp/tmpcyu5j56w.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpcyu5j56w.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpcyu5j56w.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_t",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    for(int i=0;i<test_tup.size();i+=2) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "/tmp/tmpsjk9_1ie.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpsjk9_1ie.cpp:6:28: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(int i=0;i<test_tup.size();i+=2) {\n      |                            ^~~~\n/tmp/tmpsjk9_1ie.cpp:7:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmpsjk9_1ie.cpp:7:46: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpsjk9_1ie.cpp:2:\n/tmp/tmpsjk9_1ie.cpp: In function \u2018int main()\u2019:\n/tmp/tmpsjk9_1ie.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpsjk9_1ie.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpsjk9_1ie.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long i = 0;\n    while(test_tup) {\n        test_map[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509876,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpy619xawe.cpp:2:\n/tmp/tmpy619xawe.cpp: In function \u2018int main()\u2019:\n/tmp/tmpy619xawe.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpy619xawe.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpy619xawe.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> dict;\n    dict[test_tup] = test_tup;\n    return dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122668,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpyqbfn2hn.cpp:2:\n/tmp/tmpyqbfn2hn.cpp: In function \u2018int main()\u2019:\n/tmp/tmpyqbfn2hn.cpp:11:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   11 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpyqbfn2hn.cpp:12:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   12 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpyqbfn2hn.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long i = 0;\n    while(test_tup) {\n        test_dict[i] = test_tup%10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122668,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp3nxqxdi6.cpp:2:\n/tmp/tmp3nxqxdi6.cpp: In function \u2018int main()\u2019:\n/tmp/tmp3nxqxdi6.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp3nxqxdi6.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp3nxqxdi6.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    for (int i = 0; i < test_tup.size(); i+=2) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509876,
      "stdout": "",
      "stderr": "/tmp/tmpxvhwfqle.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpxvhwfqle.cpp:6:34: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for (int i = 0; i < test_tup.size(); i+=2) {\n      |                                  ^~~~\n/tmp/tmpxvhwfqle.cpp:7:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmpxvhwfqle.cpp:7:46: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpxvhwfqle.cpp:2:\n/tmp/tmpxvhwfqle.cpp: In function \u2018int main()\u2019:\n/tmp/tmpxvhwfqle.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpxvhwfqle.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpxvhwfqle.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     asse",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    test_dict[1] = 1;\n    test_dict[2] = 2;\n    test_dict[3] = 3;\n    test_dict[4] = 4;\n    test_dict[5] = 5;\n    test_dict[6] = 6;\n    test_dict[7] = 7;\n    test_dict[8] = 8;\n    test_dict[9] = 9;\n    test_dict[10] = 10;\n    test_dict[11] = 11;\n    test_dict[12] = 12;\n    test_dict[13] = 13;\n    test_dict[14] = 14;\n    test_dict[15] = 15;\n    test_dict[16] = 16;\n    test_dict[17] = 17;\n    test_dict[18] = 18;\n    test_dict[19] = 19;\n    test_dict[20] = 20;\n    test_dict[21] = 21;\n    test_dict[22] = 22;\n    test_dict[23] = 23;\n    test_dict[24] = 24;\n    test_dict[25] = 25;\n    test_dict[26] = 26;\n    test_dict[27] = 27;\n    test_dict[28] = 28;\n    test_dict[29] = 29;\n    test_dict[30] = 30;\n    test_dict[31] = 31;\n    test_dict[32] = 32;\n    test_dict[33] = 33;\n    test_dict[34] = 34;\n    test_dict[35] = 35;\n    test_dict[36] = 36;\n    test_dict[37] = 37;\n    test_dict[38] = 38;\n    test_dict[39] = 39;\n    test_dict[40] = 40;\n    test_dict[41] = 41;\n    test_dict[42] = 42;\n    test_dict[43] = 43;\n    test_dict[44] = 44;\n    test_dict[45] = 45;\n    test\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509876,
      "stdout": "",
      "stderr": "/tmp/tmpma_uh2_8.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpma_uh2_8.cpp:51:5: error: \u2018test\u2019 was not declared in this scope\n   51 |     test\n      |     ^~~~\n/tmp/tmpma_uh2_8.cpp:52:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   52 | }\n      | ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpma_uh2_8.cpp:2:\n/tmp/tmpma_uh2_8.cpp: In function \u2018int main()\u2019:\n/tmp/tmpma_uh2_8.cpp:55:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   55 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpma_uh2_8.cpp:56:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   56 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpma_uh2_8.cpp:57:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   57 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long i = 0;\n    while(test_tup != 0) {\n        test_map[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122668,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpayx1s83y.cpp:2:\n/tmp/tmpayx1s83y.cpp: In function \u2018int main()\u2019:\n/tmp/tmpayx1s83y.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpayx1s83y.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpayx1s83y.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long i = 0;\n    while (test_tup) {\n        test_map[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509876,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp_gn5paar.cpp:2:\n/tmp/tmp_gn5paar.cpp: In function \u2018int main()\u2019:\n/tmp/tmp_gn5paar.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp_gn5paar.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp_gn5paar.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    for (int i = 0; i < test_tup.size(); i += 2) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122669,
      "stdout": "",
      "stderr": "/tmp/tmpmkntufrt.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpmkntufrt.cpp:6:34: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for (int i = 0; i < test_tup.size(); i += 2) {\n      |                                  ^~~~\n/tmp/tmpmkntufrt.cpp:7:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmpmkntufrt.cpp:7:46: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpmkntufrt.cpp:2:\n/tmp/tmpmkntufrt.cpp: In function \u2018int main()\u2019:\n/tmp/tmpmkntufrt.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpmkntufrt.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpmkntufrt.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     as",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long key = 0;\n    long value = 0;\n    long i = 0;\n    while(test_tup) {\n        if(i%2 == 0) {\n            key = test_tup%10;\n            test_tup = test_tup/10;\n        } else {\n            value = test_tup%10;\n            test_tup = test_tup/10;\n            test_dict[key] = value;\n        }\n        i++;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122668,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp4i5lpa20.cpp:2:\n/tmp/tmp4i5lpa20.cpp: In function \u2018int main()\u2019:\n/tmp/tmp4i5lpa20.cpp:24:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   24 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp4i5lpa20.cpp:25:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   25 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp4i5lpa20.cpp:26:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   26 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long i = 0;\n    while (test_tup) {\n        test_map[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509876,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp_gn5paar.cpp:2:\n/tmp/tmp_gn5paar.cpp: In function \u2018int main()\u2019:\n/tmp/tmp_gn5paar.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp_gn5paar.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp_gn5paar.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long test_tup_size = test_tup.size();\n    for(long i = 0; i < test_tup_size; i++) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n        i++;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122669,
      "stdout": "",
      "stderr": "/tmp/tmpzc8m7fyc.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpzc8m7fyc.cpp:6:35: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     long test_tup_size = test_tup.size();\n      |                                   ^~~~\n/tmp/tmpzc8m7fyc.cpp:8:29: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    8 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmpzc8m7fyc.cpp:8:46: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    8 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpzc8m7fyc.cpp:2:\n/tmp/tmpzc8m7fyc.cpp: In function \u2018int main()\u2019:\n/tmp/tmpzc8m7fyc.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpzc8m7fyc.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpzc8m7fyc.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    std::tuple<long,long,long,long,long,long> test_tuple = std::make_tuple(test_tup,test_tup,test_tup,test_tup,test_tup,test_tup);\n    std::cout << \"Tuple: \" << std::get<0>(test_tuple) << \" \" << std::get<1>(test_tuple) << \" \" << std::get<2>(test_tuple) << \" \" << std::get<3>(test_tuple) << \" \" << std::get<4>(test_tuple) << \" \" << std::get<5>(test_tuple) << std::endl;\n    for (int i = 0; i < std::tuple_size<decltype(test_tuple)>::value; i++) {\n        test_map[std::get<i>(test_tuple)] = std::get<i+1>(test_tuple);\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122669,
      "stdout": "",
      "stderr": "/tmp/tmpqq04cdb3.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpqq04cdb3.cpp:9:40: error: no matching function for call to \u2018get<i>(std::tuple<long int, long int, long int, long int, long int, long int>&)\u2019\n    9 |         test_map[std::get<i>(test_tuple)] = std::get<i+1>(test_tuple);\n      |                                        ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpqq04cdb3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/utility:219:5: note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2> constexpr typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type& std::get(std::pair<_Tp1, _Tp2>&)\u2019\n  219 |     get(std::pair<_Tp1, _Tp2>& __in) noexcept\n      |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/utility:219:5: note:   template argument deduction/substitution failed:\n/tmp/tmpqq04cdb3.cpp:9:40: error: the value of \u2018i\u2019 is not usable in a constant expression\n    9 |         test_map[std::get<i>(test_tuple)] = std::get<i+1>(test_tuple);\n      |                                        ^\n/tmp/tmpqq04cdb3.cpp:8:14: note: \u2018int i\u2019 is not const\n    8 |     for (int i = 0; i < std::tuple_size<decltype(test_tuple)>::value; i++) {\n      |              ^\n/tmp/tmpqq04cdb3.cpp:9:40: note: in template argument for type \u2018long unsigned int\u2019\n    9 |         test_map[std::get<i>(test_tuple)] = std::get<i+1>(test_tuple);\n      |                                        ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpqq04cdb3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/utility:224:5: note: candidate: \u2018template<long unsigned int _Int, class _Tp",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long key = 0;\n    long value = 0;\n    for (int i = 0; i < test_tup.size(); i++) {\n        if (i % 2 == 0) {\n            key = test_tup[i];\n        } else {\n            value = test_tup[i];\n            test_dict[key] = value;\n        }\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509876,
      "stdout": "",
      "stderr": "/tmp/tmpu3m0qmzp.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpu3m0qmzp.cpp:8:34: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    8 |     for (int i = 0; i < test_tup.size(); i++) {\n      |                                  ^~~~\n/tmp/tmpu3m0qmzp.cpp:10:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n   10 |             key = test_tup[i];\n      |                             ^\n/tmp/tmpu3m0qmzp.cpp:12:31: error: invalid types \u2018long int[int]\u2019 for array subscript\n   12 |             value = test_tup[i];\n      |                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpu3m0qmzp.cpp:2:\n/tmp/tmpu3m0qmzp.cpp: In function \u2018int main()\u2019:\n/tmp/tmpu3m0qmzp.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpu3m0qmzp.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpu3m0qmzp.cpp:22:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   22 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> my_map;\n    for(int i=0;i<test_tup.size();i+=2) {\n        my_map[test_tup[i]] = test_tup[i+1];\n    }\n    return my_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122669,
      "stdout": "",
      "stderr": "/tmp/tmp8hw803kr.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp8hw803kr.cpp:6:28: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(int i=0;i<test_tup.size();i+=2) {\n      |                            ^~~~\n/tmp/tmp8hw803kr.cpp:7:26: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         my_map[test_tup[i]] = test_tup[i+1];\n      |                          ^\n/tmp/tmp8hw803kr.cpp:7:43: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         my_map[test_tup[i]] = test_tup[i+1];\n      |                                           ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp8hw803kr.cpp:2:\n/tmp/tmp8hw803kr.cpp: In function \u2018int main()\u2019:\n/tmp/tmp8hw803kr.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp8hw803kr.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp8hw803kr.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tu",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    std::tuple<long,long,long,long,long,long,long,long,long,long> tup_test = test_tup;\n    for(int i=0;i<9;i++) {\n        test_dict[std::get<i>(tup_test)] = std::get<i+1>(tup_test);\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122669,
      "stdout": "",
      "stderr": "/tmp/tmp4a5_1eim.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp4a5_1eim.cpp:6:78: error: conversion from \u2018long int\u2019 to non-scalar type \u2018std::tuple<long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>\u2019 requested\n    6 |     std::tuple<long,long,long,long,long,long,long,long,long,long> tup_test = test_tup;\n      |                                                                              ^~~~~~~~\n/tmp/tmp4a5_1eim.cpp:8:39: error: no matching function for call to \u2018get<i>(std::tuple<long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>&)\u2019\n    8 |         test_dict[std::get<i>(tup_test)] = std::get<i+1>(tup_test);\n      |                                       ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp4a5_1eim.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/utility:219:5: note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2> constexpr typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type& std::get(std::pair<_Tp1, _Tp2>&)\u2019\n  219 |     get(std::pair<_Tp1, _Tp2>& __in) noexcept\n      |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/utility:219:5: note:   template argument deduction/substitution failed:\n/tmp/tmp4a5_1eim.cpp:8:39: error: the value of \u2018i\u2019 is not usable in a constant expression\n    8 |         test_dict[std::get<i>(tup_test)] = std::get<i+1>(tup_test);\n      |                                       ^\n/tmp/tmp4a5_1eim.cpp:7:13: note: \u2018int i\u2019 is not const\n    7 |     for(int i=0;i<9;i++) {\n      |             ^\n/tmp/tmp4a5_1eim.cpp:8:39: note: in template argument for type \u2018long unsigned int\u2019\n    8 |         test_dict[std::get<i>(tup_test)] = std::get<i+1>(tup_test);\n      |                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    for(auto i=0;i<test_tup.size();i+=2) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122669,
      "stdout": "",
      "stderr": "/tmp/tmpbwv_yqp4.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpbwv_yqp4.cpp:6:29: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(auto i=0;i<test_tup.size();i+=2) {\n      |                             ^~~~\n/tmp/tmpbwv_yqp4.cpp:7:29: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                             ^\n/tmp/tmpbwv_yqp4.cpp:7:46: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_dict[test_tup[i]] = test_tup[i+1];\n      |                                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpbwv_yqp4.cpp:2:\n/tmp/tmpbwv_yqp4.cpp: In function \u2018int main()\u2019:\n/tmp/tmpbwv_yqp4.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpbwv_yqp4.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpbwv_yqp4.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidat",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> res;\n    long i = 0;\n    long j = 1;\n    while (j < test_tup.size()) {\n        res[test_tup[i]] = test_tup[j];\n        i += 2;\n        j += 2;\n    }\n    return res;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122669,
      "stdout": "",
      "stderr": "/tmp/tmpsobvu4be.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpsobvu4be.cpp:8:25: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    8 |     while (j < test_tup.size()) {\n      |                         ^~~~\n/tmp/tmpsobvu4be.cpp:9:23: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    9 |         res[test_tup[i]] = test_tup[j];\n      |                       ^\n/tmp/tmpsobvu4be.cpp:9:38: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    9 |         res[test_tup[i]] = test_tup[j];\n      |                                      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpsobvu4be.cpp:2:\n/tmp/tmpsobvu4be.cpp: In function \u2018int main()\u2019:\n/tmp/tmpsobvu4be.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpsobvu4be.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpsobvu4be.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    std::vector<long> test_vec;\n    for (long i = 0; i < test_tup.size(); i++) {\n        test_vec.push_back(test_tup[i]);\n    }\n    for (long i = 0; i < test_vec.size(); i++) {\n        test_dict[test_vec[i]] = test_vec[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122670,
      "stdout": "",
      "stderr": "/tmp/tmpeymd_6_c.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpeymd_6_c.cpp:7:35: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    7 |     for (long i = 0; i < test_tup.size(); i++) {\n      |                                   ^~~~\n/tmp/tmpeymd_6_c.cpp:8:38: error: invalid types \u2018long int[long int]\u2019 for array subscript\n    8 |         test_vec.push_back(test_tup[i]);\n      |                                      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpeymd_6_c.cpp:2:\n/tmp/tmpeymd_6_c.cpp: In function \u2018int main()\u2019:\n/tmp/tmpeymd_6_c.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpeymd_6_c.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpeymd_6_c.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |           ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    std::vector<long> test_vec;\n    while (test_tup != 0) {\n        test_vec.push_back(test_tup % 10);\n        test_tup /= 10;\n    }\n    for (int i = 0; i < test_vec.size(); i += 2) {\n        test_dict[test_vec[i]] = test_vec[i+1];\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122659,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmphqenpipq.cpp:2:\n/tmp/tmphqenpipq.cpp: In function \u2018int main()\u2019:\n/tmp/tmphqenpipq.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmphqenpipq.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmphqenpipq.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    for(int i=0;i<test_tup.size();i+=2) {\n        test_map[test_tup[i]] = test_tup[i+1];\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "/tmp/tmpi6a0ep9q.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpi6a0ep9q.cpp:6:28: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(int i=0;i<test_tup.size();i+=2) {\n      |                            ^~~~\n/tmp/tmpi6a0ep9q.cpp:7:28: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_map[test_tup[i]] = test_tup[i+1];\n      |                            ^\n/tmp/tmpi6a0ep9q.cpp:7:45: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_map[test_tup[i]] = test_tup[i+1];\n      |                                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpi6a0ep9q.cpp:2:\n/tmp/tmpi6a0ep9q.cpp: In function \u2018int main()\u2019:\n/tmp/tmpi6a0ep9q.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpi6a0ep9q.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpi6a0ep9q.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std:",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long key = 0;\n    long value = 0;\n    while (test_tup > 0) {\n        key = test_tup % 10;\n        test_tup /= 10;\n        value = test_tup % 10;\n        test_tup /= 10;\n        test_dict[key] = value;\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122669,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp6zz_v2lh.cpp:2:\n/tmp/tmp6zz_v2lh.cpp: In function \u2018int main()\u2019:\n/tmp/tmp6zz_v2lh.cpp:19:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   19 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp6zz_v2lh.cpp:20:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   20 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp6zz_v2lh.cpp:21:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   21 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> dict;\n    long key = test_tup[0];\n    for(int i=1;i<test_tup.size();i++) {\n        dict[key] = test_tup[i];\n        key = test_tup[i];\n    }\n    return dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122670,
      "stdout": "",
      "stderr": "/tmp/tmp0ezbbwk8.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp0ezbbwk8.cpp:6:26: error: invalid types \u2018long int[int]\u2019 for array subscript\n    6 |     long key = test_tup[0];\n      |                          ^\n/tmp/tmp0ezbbwk8.cpp:7:28: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    7 |     for(int i=1;i<test_tup.size();i++) {\n      |                            ^~~~\n/tmp/tmp0ezbbwk8.cpp:8:31: error: invalid types \u2018long int[int]\u2019 for array subscript\n    8 |         dict[key] = test_tup[i];\n      |                               ^\n/tmp/tmp0ezbbwk8.cpp:9:25: error: invalid types \u2018long int[int]\u2019 for array subscript\n    9 |         key = test_tup[i];\n      |                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp0ezbbwk8.cpp:2:\n/tmp/tmp0ezbbwk8.cpp: In function \u2018int main()\u2019:\n/tmp/tmp0ezbbwk8.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp0ezbbwk8.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp0ezbbwk8.cpp:17:37: error: cannot convert \u2018std::tup",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    long i = 0;\n    while (test_tup != 0) {\n        test_map[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1665509876,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmps3b0038s.cpp:2:\n/tmp/tmps3b0038s.cpp: In function \u2018int main()\u2019:\n/tmp/tmps3b0038s.cpp:16:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   16 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmps3b0038s.cpp:17:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   17 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmps3b0038s.cpp:18:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   18 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    for(int i=0;i<test_tup.size();i+=2) {\n        test_map[test_tup[i]] = test_tup[i+1];\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "/tmp/tmpi6a0ep9q.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpi6a0ep9q.cpp:6:28: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for(int i=0;i<test_tup.size();i+=2) {\n      |                            ^~~~\n/tmp/tmpi6a0ep9q.cpp:7:28: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_map[test_tup[i]] = test_tup[i+1];\n      |                            ^\n/tmp/tmpi6a0ep9q.cpp:7:45: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_map[test_tup[i]] = test_tup[i+1];\n      |                                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpi6a0ep9q.cpp:2:\n/tmp/tmpi6a0ep9q.cpp: In function \u2018int main()\u2019:\n/tmp/tmpi6a0ep9q.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpi6a0ep9q.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpi6a0ep9q.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std:",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    std::tuple<long,long,long,long,long,long> test_tuple(test_tup);\n    std::tuple<long,long,long,long,long,long>::iterator it;\n    for(it = test_tuple.begin(); it != test_tuple.end(); it++) {\n        test_dict[*it] = *(it+1);\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122670,
      "stdout": "",
      "stderr": "/tmp/tmp0mk2pfou.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp0mk2pfou.cpp:6:66: error: no matching function for call to \u2018std::tuple<long int, long int, long int, long int, long int, long int>::tuple(long int&)\u2019\n    6 |     std::tuple<long,long,long,long,long,long> test_tuple(test_tup);\n      |                                                                  ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/functional:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/pstl/glue_algorithm_defs.h:13,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:71,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp0mk2pfou.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:808:11: note: candidate: \u2018template<class _Alloc, class _Dummy, class ... _UElements, typename std::enable_if<((std::_TC<((6 == sizeof... (_UElements)) && (! std::is_same<std::tuple<long int, long int, long int, long int, long int, long int>, std::tuple<_Tail ...> >::value)), long int, long int, long int, long int, long int, long int>::_MoveConstructibleTuple<_UElements ...>() && (! std::_TC<((6 == sizeof... (_UElements)) && (! std::is_same<std::tuple<long int, long int, long int, long int, long int, long int>, std::tuple<_Tail ...> >::value)), long int, long int, long int, long int, long int, long int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>())) && std::_TC<(std::is_same<_Dummy, void>::value && (6 == 1)), long int, long int, long int, long int, long int, long int>::_NonNestedTuple<tuple<_Tail ...>&&>()), bool>::type <anonymous> > std::tuple<_Elements>::tuple(std::allocator_arg_t, const _Alloc&, std::tuple<_Args2 ...>&&)\u2019\n  808 |  explicit tuple(allocator_arg_t __tag, const _Alloc& __a,\n      |           ^~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:808:11: note:   template argument deduction/sub",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    std::tuple<long,long,long,long,long,long,long,long,long,long> test_tuple = test_tup;\n    std::transform(test_tuple.begin(), test_tuple.end(), test_tuple.begin()+1, std::inserter(test_map, test_map.begin()), [](auto a, auto b){return std::make_pair(a,b);});\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122669,
      "stdout": "",
      "stderr": "/tmp/tmp1ya24lrh.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp1ya24lrh.cpp:6:80: error: conversion from \u2018long int\u2019 to non-scalar type \u2018std::tuple<long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>\u2019 requested\n    6 |     std::tuple<long,long,long,long,long,long,long,long,long,long> test_tuple = test_tup;\n      |                                                                                ^~~~~~~~\n/tmp/tmp1ya24lrh.cpp:7:31: error: \u2018class std::tuple<long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>\u2019 has no member named \u2018begin\u2019\n    7 |     std::transform(test_tuple.begin(), test_tuple.end(), test_tuple.begin()+1, std::inserter(test_map, test_map.begin()), [](auto a, auto b){return std::make_pair(a,b);});\n      |                               ^~~~~\n/tmp/tmp1ya24lrh.cpp:7:51: error: \u2018class std::tuple<long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>\u2019 has no member named \u2018end\u2019\n    7 |     std::transform(test_tuple.begin(), test_tuple.end(), test_tuple.begin()+1, std::inserter(test_map, test_map.begin()), [](auto a, auto b){return std::make_pair(a,b);});\n      |                                                   ^~~\n/tmp/tmp1ya24lrh.cpp:7:69: error: \u2018class std::tuple<long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>\u2019 has no member named \u2018begin\u2019\n    7 |     std::transform(test_tuple.begin(), test_tuple.end(), test_tuple.begin()+1, std::inserter(test_map, test_map.begin()), [](auto a, auto b){return std::make_pair(a,b);});\n      |                                                                     ^~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp1ya24lrh.cpp:2:\n/tmp/tmp1ya24",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_map;\n    for (int i = 0; i < test_tup.size(); i+=2) {\n        test_map[test_tup[i]] = test_tup[i+1];\n    }\n    return test_map;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122659,
      "stdout": "",
      "stderr": "/tmp/tmp09hrevom.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp09hrevom.cpp:6:34: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for (int i = 0; i < test_tup.size(); i+=2) {\n      |                                  ^~~~\n/tmp/tmp09hrevom.cpp:7:28: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_map[test_tup[i]] = test_tup[i+1];\n      |                            ^\n/tmp/tmp09hrevom.cpp:7:45: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         test_map[test_tup[i]] = test_tup[i+1];\n      |                                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp09hrevom.cpp:2:\n/tmp/tmp09hrevom.cpp: In function \u2018int main()\u2019:\n/tmp/tmp09hrevom.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp09hrevom.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmp09hrevom.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(c",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    long key = test_tup[0];\n    long value = test_tup[1];\n    test_dict[key] = value;\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122669,
      "stdout": "",
      "stderr": "/tmp/tmpkuh660qc.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpkuh660qc.cpp:6:26: error: invalid types \u2018long int[int]\u2019 for array subscript\n    6 |     long key = test_tup[0];\n      |                          ^\n/tmp/tmpkuh660qc.cpp:7:28: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |     long value = test_tup[1];\n      |                            ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpkuh660qc.cpp:2:\n/tmp/tmpkuh660qc.cpp: In function \u2018int main()\u2019:\n/tmp/tmpkuh660qc.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpkuh660qc.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpkuh660qc.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> dict;\n    for (int i=0; i<test_tup.size(); i+=2) {\n        dict[test_tup[i]] = test_tup[i+1];\n    }\n    return dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122670,
      "stdout": "",
      "stderr": "/tmp/tmpph8caaqe.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmpph8caaqe.cpp:6:30: error: request for member \u2018size\u2019 in \u2018test_tup\u2019, which is of non-class type \u2018long int\u2019\n    6 |     for (int i=0; i<test_tup.size(); i+=2) {\n      |                              ^~~~\n/tmp/tmpph8caaqe.cpp:7:24: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         dict[test_tup[i]] = test_tup[i+1];\n      |                        ^\n/tmp/tmpph8caaqe.cpp:7:41: error: invalid types \u2018long int[int]\u2019 for array subscript\n    7 |         dict[test_tup[i]] = test_tup[i+1];\n      |                                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpph8caaqe.cpp:2:\n/tmp/tmpph8caaqe.cpp: In function \u2018int main()\u2019:\n/tmp/tmpph8caaqe.cpp:13:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   13 |     assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpph8caaqe.cpp:14:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   14 |     assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n      |                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                                     |\n      |                                     std::tuple<int, int, int, int, int, int>\n/tmp/tmpph8caaqe.cpp:15:37: error: cannot convert \u2018std::tuple<int, int, int, int, int, int>\u2019 to \u2018long int\u2019 in argument passing\n   15 |     assert(candidate(std::make_tuple",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n    std::map<long,long> test_dict;\n    std::tuple<long,long,long,long,long,long,long,long,long,long> tup = test_tup;\n    for(int i=0;i<9;i++) {\n        test_dict[std::get<i>(tup)] = std::get<i+1>(tup);\n    }\n    return test_dict;\n}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
      "timestamp": 1666122670,
      "stdout": "",
      "stderr": "/tmp/tmp250ut8pk.cpp: In function \u2018std::map<long int, long int> tuple_to_dict(long int)\u2019:\n/tmp/tmp250ut8pk.cpp:6:73: error: conversion from \u2018long int\u2019 to non-scalar type \u2018std::tuple<long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>\u2019 requested\n    6 |     std::tuple<long,long,long,long,long,long,long,long,long,long> tup = test_tup;\n      |                                                                         ^~~~~~~~\n/tmp/tmp250ut8pk.cpp:8:34: error: no matching function for call to \u2018get<i>(std::tuple<long int, long int, long int, long int, long int, long int, long int, long int, long int, long int>&)\u2019\n    8 |         test_dict[std::get<i>(tup)] = std::get<i+1>(tup);\n      |                                  ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp250ut8pk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/utility:219:5: note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2> constexpr typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type& std::get(std::pair<_Tp1, _Tp2>&)\u2019\n  219 |     get(std::pair<_Tp1, _Tp2>& __in) noexcept\n      |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/utility:219:5: note:   template argument deduction/substitution failed:\n/tmp/tmp250ut8pk.cpp:8:34: error: the value of \u2018i\u2019 is not usable in a constant expression\n    8 |         test_dict[std::get<i>(tup)] = std::get<i+1>(tup);\n      |                                  ^\n/tmp/tmp250ut8pk.cpp:7:13: note: \u2018int i\u2019 is not const\n    7 |     for(int i=0;i<9;i++) {\n      |             ^\n/tmp/tmp250ut8pk.cpp:8:34: note: in template argument for type \u2018long unsigned int\u2019\n    8 |         test_dict[std::get<i>(tup)] = std::get<i+1>(tup);\n      |                                  ^\nIn file included from /shared/centos7/gcc/9.2.0-skyla",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}