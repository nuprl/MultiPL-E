{
  "name": "mbpp_222_check_type",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_222_check_type.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::tuple<int, float, double> test_tuple_1 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::tuple<int, float, double> test_tuple_2 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::tuple<int, float, double> test_tuple_3 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    if (typeid(test_tuple_1) == typeid(test_tuple_2) && typeid(test_tuple_2) == typeid(test_tuple_3)) {\n        return true;\n    }\n    return false;",
    "    std::string type_name = test_tuple.type().name();\n    for (auto i : test_tuple) {\n        if (i.type().name() != type_name) {\n            return false;\n        }\n    }\n    return true;",
    "    std::tuple<int, int, int> test_tuple1(1, 2, 3);\n    std::tuple<std::string, std::string, std::string> test_tuple2(\"a\", \"b\", \"c\");\n    std::tuple<std::string, std::string, int> test_tuple3(\"a\", \"b\", 3);\n    std::tuple<int, std::string, int> test_tuple4(1, \"b\", 3);\n    std::tuple<int, int, std::string> test_tuple5(1, 2, \"c\");\n    std::tuple<int, int, int> test_tuple6(1, 2, 3);\n    std::tuple<std::string, std::string, std::string> test_tuple7(\"a\", \"b\", \"c\");\n    std::tuple<std::string, std::string, int> test_tuple8(\"a\", \"b\", 3);\n    std::tuple<int, std::string, int> test_tuple9(1, \"b\", 3);\n    std::tuple<int, int, std::string> test_tuple10(1, 2, \"c\");\n    std::tuple<int, int, int> test_tuple11(1, 2, 3);\n    std::tuple<std::string, std::string, std::string> test_tuple12(\"a\", \"b\", \"c\");\n    std::tuple<std::string, std::string, int> test_tuple13(\"a\", \"b\", 3);\n    std::tuple<int, std::string, int> test_tuple14(1, \"b\", 3);\n    std::tuple<int, int, std::string> test_tuple15(1, 2, \"c\");\n    std::tuple<int, int, int> test_tuple16(1, 2, 3);\n    std::tuple<std::string, std::string, std::string> test_tuple17(\"a\", \"b\", \"c\");\n    std::tuple<std::string, std::string, int> test_tuple18",
    "    std::vector<std::any> test_vector;\n    std::any_cast<std::vector<std::any>>(test_tuple);\n    std::any first_element = test_vector[0];\n    for(int i = 1; i < test_vector.size(); i++) {\n        if(first_element.type() != test_vector[i].type()) {\n            return false;\n        }\n    }\n    return true;",
    "    return std::any_cast<int>(test_tuple) == std::any_cast<int>(test_tuple);",
    "    std::any_cast<int>(test_tuple);\n    return true;",
    "    std::tuple<int, float, double> test_tuple = std::make_tuple(1, 2.0, 3.0);\n    std::any_cast<int>(test_tuple);\n    std::any_cast<float>(test_tuple);\n    std::any_cast<double>(test_tuple);\n    return true;",
    "    std::tuple<int, float, double> t1(10, 15.5, 1e5);\n    std::tuple<char, std::string, std::string> t2('a', \"abc\", \"xyz\");\n    std::tuple<std::string, std::vector<int>, std::list<int>> t3(\"geeks\", {1, 2, 3}, {10, 20, 30});\n    std::tuple<double, char, std::string> t4(10.5, 'a', \"geeks\");\n    std::tuple<int, int, int, int> t5(10, 20, 30, 40);\n    std::tuple<int, int, int, int, int> t6(10, 20, 30, 40, 50);\n    std::tuple<int, int, int, int, int, int> t7(10, 20, 30, 40, 50, 60);\n    std::tuple<int, int, int, int, int, int, int> t8(10, 20, 30, 40, 50, 60, 70);\n    std::tuple<int, int, int, int, int, int, int, int> t9(10, 20, 30, 40, 50, 60, 70, 80);\n    std::tuple<int, int, int, int, int, int, int, int, int> t10(10, 20, 30, 40, 50, 60, 70, 80, 90);\n    std::tuple<int, int, int, int, int, int, int, int, int, int> t11(10, 20, 30, 40, 50, 60, 70, 80, 90, 100);\n    std::tuple<int, int, int, int, int, int, int, int, int, int, int> t12(10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110);\n    std::tuple<int, int, int, int, int, int, int, int, int, int, int, int> t13(10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120);\n    std::tuple<",
    "    std::any_cast<int>(test_tuple);\n    try {\n        std::any_cast<std::string>(test_tuple);\n        return false;\n    }\n    catch(std::bad_any_cast& e) {\n        return true;\n    }",
    "    std::any_cast<int>(test_tuple);\n    return true;",
    "    std::tuple<int, float, double> test_tuple1;\n    std::tuple<int, float, double> test_tuple2;\n    std::tuple<int, float, double> test_tuple3;\n    std::tuple<int, float, double> test_tuple4;\n    std::tuple<int, float, double> test_tuple5;\n    std::tuple<int, float, double> test_tuple6;\n    std::tuple<int, float, double> test_tuple7;\n    std::tuple<int, float, double> test_tuple8;\n    std::tuple<int, float, double> test_tuple9;\n    std::tuple<int, float, double> test_tuple10;\n    std::tuple<int, float, double> test_tuple11;\n    std::tuple<int, float, double> test_tuple12;\n    std::tuple<int, float, double> test_tuple13;\n    std::tuple<int, float, double> test_tuple14;\n    std::tuple<int, float, double> test_tuple15;\n    std::tuple<int, float, double> test_tuple16;\n    std::tuple<int, float, double> test_tuple17;\n    std::tuple<int, float, double> test_tuple18;\n    std::tuple<int, float, double> test_tuple19;\n    std::tuple<int, float, double> test_tuple20;\n    std::tuple<int, float, double> test_tuple21;\n    std::tuple<int, float, double> test_tuple22;\n    std::tuple<int, float, double> test_tuple23;\n    std::tuple<int, float, double> test_tuple24;\n    std::tuple<int, float, double> test_tuple25;\n    std::tuple<int, float, double> test_tuple26;\n    std::tuple<int, float, double> test_tuple27",
    "    std::any_cast<int>(test_tuple);\n    return true;",
    "    std::any_cast<int>(test_tuple);\n    return true;",
    "    std::any_cast<int>(test_tuple);\n    return true;",
    "    std::tuple<int, float, double> test_tuple_1(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_2(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_3(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_4(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_5(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_6(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_7(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_8(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_9(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_10(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_11(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_12(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_13(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_14(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_15(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_16(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_17(1, 2.0, 3.0);\n   ",
    "    std::tuple<int, float, double> t1(10, 15.5, 1e5);\n    std::tuple<char, int, float, double> t2('G', 10, 15.5, 1e5);\n    std::tuple<std::string, std::string, std::string> t3(\"Geeks\", \"for\", \"Geeks\");\n    std::tuple<std::string, std::string, int> t4(\"Geeks\", \"for\", \"Geeks\");\n    std::tuple<std::string, std::string, std::string> t5(\"Geeks\", \"for\", \"Geeks\");\n    std::tuple<std::string, std::string, std::string> t6(\"Geeks\", \"for\", \"Geeks\");\n    std::tuple<std::string, std::string, std::string> t7(\"Geeks\", \"for\", \"Geeks\");\n    std::tuple<std::string, std::string, std::string> t8(\"Geeks\", \"for\", \"Geeks\");\n    std::tuple<std::string, std::string, std::string> t9(\"Geeks\", \"for\", \"Geeks\");\n    std::tuple<std::string, std::string, std::string> t10(\"Geeks\", \"for\", \"Geeks\");\n    std::tuple<std::string, std::string, std::string> t11(\"Geeks\", \"for\", \"Geeks\");\n    std::tuple<std::string, std::string, std::string> t12(\"Geeks\", \"for\", \"Geeks\");\n    std::tuple<std::string, std::string, std::string> t13(\"Geeks\", \"for\", \"Geeks\");\n    std::tuple<std::string, std::string, std::string> t14(\"Geeks\", \"for\", \"Geeks\");\n    std::tuple<std::string, std::string, std::string> t15(\"Geeks\", \"for\", \"Geeks\");\n    std::tuple<std::string, std::string, std::string> t16(\"Geeks\", \"for\", \"Geeks\");\n    std::tuple<std::string",
    "    std::tuple<int, int, int> test_tuple_int = std::any_cast<std::tuple<int, int, int>>(test_tuple);\n    std::tuple<float, float, float> test_tuple_float = std::any_cast<std::tuple<float, float, float>>(test_tuple);\n    std::tuple<double, double, double> test_tuple_double = std::any_cast<std::tuple<double, double, double>>(test_tuple);\n    std::tuple<char, char, char> test_tuple_char = std::any_cast<std::tuple<char, char, char>>(test_tuple);\n    std::tuple<std::string, std::string, std::string> test_tuple_string = std::any_cast<std::tuple<std::string, std::string, std::string>>(test_tuple);\n    if (test_tuple_int.size() == 3) {\n        return true;\n    } else if (test_tuple_float.size() == 3) {\n        return true;\n    } else if (test_tuple_double.size() == 3) {\n        return true;\n    } else if (test_tuple_char.size() == 3) {\n        return true;\n    } else if (test_tuple_string.size() == 3) {\n        return true;\n    } else {\n        return false;\n    }",
    "    std::tuple<int, int, int> test_tuple1(1, 2, 3);\n    std::tuple<std::string, std::string, std::string> test_tuple2(\"a\", \"b\", \"c\");\n    std::tuple<int, std::string, int> test_tuple3(1, \"a\", 3);\n    std::tuple<std::string, int, int> test_tuple4(\"a\", 1, 2);\n    std::tuple<int, int, std::string> test_tuple5(1, 2, \"a\");\n    std::tuple<int, std::string, std::string> test_tuple6(1, \"a\", \"b\");\n    std::tuple<std::string, int, std::string> test_tuple7(\"a\", 1, \"b\");\n    std::tuple<std::string, std::string, int> test_tuple8(\"a\", \"b\", 1);\n    std::tuple<std::string, std::string, std::string> test_tuple9(\"a\", \"b\", \"c\");\n    std::tuple<int, int, int> test_tuple10(1, 2, 3);\n    std::tuple<int, int, int> test_tuple11(1, 2, 3);\n    std::tuple<int, int, int> test_tuple12(1, 2, 3);\n    std::tuple<int, int, int> test_tuple13(1, 2, 3);\n    std::tuple<int, int, int> test_tuple14(1, 2, 3);\n    std::tuple<int, int, int> test_tuple15(1, 2, 3);\n    std::tuple<int, int, int> test_tuple16(1, 2, 3);\n    std::tuple<int, int, int> test_tuple17(1, 2, 3);\n    std::tuple<int, int, int> test_tuple18(1, 2, 3);\n    std::tuple<int, int, int> test_tuple19(1, 2",
    "    std::string type_name = test_tuple.type().name();\n    for (auto &i : test_tuple) {\n        if (i.type().name() != type_name) {\n            return false;\n        }\n    }\n    return true;",
    "    std::any_cast<int>(test_tuple);\n    return true;"
  ]
}