{
  "name": "mbpp_760_unique_Element",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_760_unique_Element.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int count = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        for(int j = 0; j < arr.size(); j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if(count > 1) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpfeq9vvjr: /tmp/tmpfeq9vvjr.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::unordered_map<long, int> mp;\n    for(int i = 0; i < arr.size(); i++) {\n        mp[arr[i]]++;\n    }\n    for(auto i : mp) {\n        if(i.second > 1) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpsfjo523j: /tmp/tmpsfjo523j.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    int n = arr.size();\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (arr[i] == arr[j]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpzes3778r: /tmp/tmpzes3778r.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i=0;i<n;i++)\n    {\n        for(int j=i+1;j<n;j++)\n        {\n            if(arr[i]==arr[j])\n            {\n                count++;\n            }\n        }\n    }\n    if(count==0)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpt4x8vr8j: /tmp/tmpt4x8vr8j.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n=arr.size();\n    sort(arr.begin(),arr.end());\n    for(int i=0;i<n-1;i++){\n        if(arr[i]==arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpp_20pjns: /tmp/tmpp_20pjns.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    // return true if there is only one distinct element in the vector\n    // return false otherwise\n    int n = arr.size();\n    sort(arr.begin(), arr.end());\n    for(int i = 0; i < n-1; i++)\n    {\n        if(arr[i] == arr[i+1])\n        {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmphddhx8wg: /tmp/tmphddhx8wg.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    if(n==1)\n        return true;\n    sort(arr.begin(),arr.end());\n    for(int i=1;i<n;i++)\n    {\n        if(arr[i]==arr[i-1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp_gf0lo0q: /tmp/tmp_gf0lo0q.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i=0;i<n;i++){\n        for(int j=0;j<n;j++){\n            if(arr[i] == arr[j]){\n                count++;\n            }\n        }\n        if(count == 1){\n            return true;\n        }\n        count = 0;\n    }\n    return false;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp2tfv_78l: /tmp/tmp2tfv_78l.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::unordered_set<long> s;\n    for(auto i : arr) {\n        s.insert(i);\n    }\n    return s.size() == 1;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n=arr.size();\n    int count=0;\n    for(int i=0;i<n;i++)\n    {\n        for(int j=i+1;j<n;j++)\n        {\n            if(arr[i]==arr[j])\n            {\n                count++;\n            }\n        }\n    }\n    if(count==0)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmptnpt2tkb: /tmp/tmptnpt2tkb.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    long n = arr.size();\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        for(long j = 0; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if(count == n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpedvpew76: /tmp/tmpedvpew76.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::unordered_map<long, int> umap;\n    for (int i = 0; i < arr.size(); i++) {\n        umap[arr[i]]++;\n    }\n    for (auto x : umap) {\n        if (x.second > 1) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmprrq10y1k: /tmp/tmprrq10y1k.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++){\n        for(int j = i+1; j < n; j++){\n            if(arr[i] == arr[j]){\n                count++;\n                break;\n            }\n        }\n    }\n    if(count == 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpb8a6duou: /tmp/tmpb8a6duou.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::unordered_map<long, int> mp;\n    for(int i=0; i<arr.size(); i++) {\n        mp[arr[i]]++;\n    }\n    for(auto i: mp) {\n        if(i.second > 1) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmppnqvwriu: /tmp/tmppnqvwriu.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    /* Don't write main().\n     * Don't read input, it is passed as function argument.\n     * Return output and don't print it.\n     * Taking input and printing output is handled automatically.\n     */\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = i + 1; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if(count == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpoug7z613: /tmp/tmpoug7z613.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::unordered_map<long, int> m;\n    for(int i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for(auto i : m) {\n        if(i.second > 1) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpn3d1loac: /tmp/tmpn3d1loac.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n=arr.size();\n    int i;\n    for(i=0;i<n;i++)\n    {\n        if(arr[i]!=arr[i+1])\n        {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpu8pxeau0: /tmp/tmpu8pxeau0.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i=0;i<n;i++)\n    {\n        for(int j=i+1;j<n;j++)\n        {\n            if(arr[i] == arr[j])\n            {\n                count++;\n            }\n        }\n    }\n    if(count == 0)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpydtse_js: /tmp/tmpydtse_js.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    sort(arr.begin(), arr.end());\n    for(int i=0; i<n-1; i++) {\n        if(arr[i] == arr[i+1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmppcnmfxs7: /tmp/tmppcnmfxs7.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::unordered_map<long, int> m;\n    for(int i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for(auto i : m) {\n        if(i.second > 1) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpn3d1loac: /tmp/tmpn3d1loac.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++){\n        for(int j = i+1; j < n; j++){\n            if(arr[i] == arr[j]){\n                count++;\n            }\n        }\n    }\n    if(count == 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmp2bgj06pa: /tmp/tmp2bgj06pa.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i=0;i<n;i++){\n        for(int j=0;j<n;j++){\n            if(arr[i]==arr[j]){\n                count++;\n            }\n        }\n        if(count>1){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmplyq6rdbz: /tmp/tmplyq6rdbz.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    if(n==0)\n        return false;\n    if(n==1)\n        return true;\n    sort(arr.begin(),arr.end());\n    for(int i=0;i<n-1;i++)\n    {\n        if(arr[i]==arr[i+1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmp81oltfcc: /tmp/tmp81oltfcc.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    if(arr.size()==0){\n        return false;\n    }\n    else{\n        long x=arr[0];\n        for(int i=1;i<arr.size();i++){\n            if(arr[i]!=x){\n                return false;\n            }\n        }\n        return true;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::unordered_set<long> s;\n    for (auto i : arr) {\n        s.insert(i);\n    }\n    return s.size() == 1;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::unordered_map<long, int> m;\n    for(int i=0; i<arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for(auto x: m) {\n        if(x.second > 1) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpnczxqg2z: /tmp/tmpnczxqg2z.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n=arr.size();\n    int count=0;\n    for(int i=0;i<n;i++){\n        for(int j=i+1;j<n;j++){\n            if(arr[i]==arr[j]){\n                count++;\n            }\n        }\n    }\n    if(count==0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmp1csqtzn8: /tmp/tmp1csqtzn8.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n=arr.size();\n    int count=0;\n    for(int i=0;i<n;i++)\n    {\n        for(int j=i+1;j<n;j++)\n        {\n            if(arr[i]==arr[j])\n            {\n                count++;\n            }\n        }\n    }\n    if(count==0)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmptnpt2tkb: /tmp/tmptnpt2tkb.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    int n = arr.size();\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < n - 1; i++) {\n        if (arr[i] == arr[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpewj5440x: /tmp/tmpewj5440x.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::unordered_set<long> s;\n    for(auto x:arr) {\n        s.insert(x);\n    }\n    if(s.size()==1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    if(n==0)\n        return false;\n    sort(arr.begin(),arr.end());\n    for(int i=0;i<n-1;i++)\n    {\n        if(arr[i]==arr[i+1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpkk8rl2r6: /tmp/tmpkk8rl2r6.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    long n = arr.size();\n    long count = 0;\n    for(long i=0;i<n;i++)\n    {\n        for(long j=i+1;j<n;j++)\n        {\n            if(arr[i]==arr[j])\n            {\n                count++;\n            }\n        }\n    }\n    if(count==0)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpyld74msl: /tmp/tmpyld74msl.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    int count = 0;\n    int n = arr.size();\n    for(int i = 0; i < n; i++) {\n        for(int j = i+1; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if(count == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpj413e0dz: /tmp/tmpj413e0dz.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if(count == n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpwd1t1gdo: /tmp/tmpwd1t1gdo.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size() - 1; i++) {\n        if (arr[i] == arr[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmp1gww1d9l: /tmp/tmp1gww1d9l.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    if(n==0)\n        return false;\n    if(n==1)\n        return true;\n    sort(arr.begin(),arr.end());\n    for(int i=0;i<n-1;i++){\n        if(arr[i]==arr[i+1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpaeeydm75: /tmp/tmpaeeydm75.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    long n = arr.size();\n    if(n == 1) {\n        return true;\n    }\n    std::sort(arr.begin(), arr.end());\n    for(long i = 0; i < n - 1; i++) {\n        if(arr[i] == arr[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpoftp3blp: /tmp/tmpoftp3blp.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if(count == n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmp74p8v3ue: /tmp/tmp74p8v3ue.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    if(n == 0){\n        return false;\n    }\n    if(n == 1){\n        return true;\n    }\n    sort(arr.begin(), arr.end());\n    for(int i = 0; i < n-1; i++){\n        if(arr[i] == arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpc2ub30fw: /tmp/tmpc2ub30fw.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n=arr.size();\n    int i;\n    for(i=0;i<n;i++)\n    {\n        if(arr[i]!=arr[i+1])\n        {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpu8pxeau0: /tmp/tmpu8pxeau0.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i=0;i<n;i++){\n        for(int j=i+1;j<n;j++){\n            if(arr[i] == arr[j]){\n                count++;\n            }\n        }\n    }\n    if(count == 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpsljhhfrq: /tmp/tmpsljhhfrq.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    int n = arr.size();\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if (count == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpnw0vkv_b: /tmp/tmpnw0vkv_b.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int count=0;\n    for(int i=0;i<arr.size();i++)\n    {\n        for(int j=i+1;j<arr.size();j++)\n        {\n            if(arr[i]==arr[j])\n            {\n                count++;\n            }\n        }\n    }\n    if(count==0)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpldosv_iy: /tmp/tmpldosv_iy.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < n; j++){\n            if(arr[i] == arr[j]){\n                count++;\n            }\n        }\n        if(count > 1){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpaij9v3r3: /tmp/tmpaij9v3r3.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    if(arr.size() == 1) {\n        return true;\n    }\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < arr.size() - 1; i++) {\n        if(arr[i] == arr[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpz0y_ec2h: /tmp/tmpz0y_ec2h.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size() - 1; i++) {\n        if (arr[i] == arr[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmp1gww1d9l: /tmp/tmp1gww1d9l.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    int n = arr.size();\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if (count == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpnw0vkv_b: /tmp/tmpnw0vkv_b.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::unordered_map<long, int> mp;\n    for(int i = 0; i < arr.size(); i++) {\n        mp[arr[i]]++;\n    }\n    for(auto x : mp) {\n        if(x.second == 1) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmp417a24ga: /tmp/tmp417a24ga.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::unordered_map<long, int> mp;\n    for(auto i: arr) {\n        mp[i]++;\n    }\n    for(auto i: mp) {\n        if(i.second > 1) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmp74r7xe03: /tmp/tmp74r7xe03.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if(count > 1) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmpl6utrod4: /tmp/tmpl6utrod4.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++){\n        for(int j = i+1; j < n; j++){\n            if(arr[i] == arr[j]){\n                count++;\n            }\n        }\n    }\n    if(count == 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmp2bgj06pa: /tmp/tmp2bgj06pa.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n\t// Write your code here\n\tif (arr.size() == 1) {\n\t\treturn true;\n\t}\n\tstd::sort(arr.begin(), arr.end());\n\tfor (int i = 0; i < arr.size() - 1; i++) {\n\t\tif (arr[i] != arr[i + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::sort(arr.begin(),arr.end());\n    for(int i=0;i<arr.size()-1;i++) {\n        if(arr[i]==arr[i+1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmpy2fnc9te: /tmp/tmpy2fnc9te.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int count = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        for(int j = 0; j < arr.size(); j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if(count > 1) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpfeq9vvjr: /tmp/tmpfeq9vvjr.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n=arr.size();\n    int i=0;\n    while(i<n-1){\n        if(arr[i]!=arr[i+1]){\n            return false;\n        }\n        i++;\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::unordered_set<long> s;\n    for(int i=0;i<arr.size();i++) {\n        s.insert(arr[i]);\n    }\n    if(s.size()==1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < n - 1; i++) {\n        if(arr[i] == arr[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmpr9sud_7d: /tmp/tmpr9sud_7d.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::sort(arr.begin(),arr.end());\n    for(int i=0;i<arr.size()-1;i++) {\n        if(arr[i]==arr[i+1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmpy2fnc9te: /tmp/tmpy2fnc9te.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = i+1; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if(count == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmp350tlt34: /tmp/tmp350tlt34.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < arr.size() - 1; i++) {\n        if(arr[i] == arr[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmp_u4_ete7: /tmp/tmp_u4_ete7.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::unordered_map<long, int> m;\n    for(int i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for(auto i : m) {\n        if(i.second > 1) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpn3d1loac: /tmp/tmpn3d1loac.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = i+1; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if(count == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmp350tlt34: /tmp/tmp350tlt34.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i=0;i<n;i++)\n    {\n        for(int j=0;j<n;j++)\n        {\n            if(arr[i] == arr[j])\n            {\n                count++;\n            }\n        }\n    }\n    if(count == n)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmpmgjknaei: /tmp/tmpmgjknaei.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::unordered_set<long> s;\n    for(auto i : arr) {\n        s.insert(i);\n    }\n    return s.size() == 1;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    sort(arr.begin(), arr.end());\n    for(int i = 0; i < n-1; i++){\n        if(arr[i] == arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmp1qk_hc_k: /tmp/tmp1qk_hc_k.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n=arr.size();\n    int count=0;\n    for(int i=0;i<n;i++)\n    {\n        for(int j=i+1;j<n;j++)\n        {\n            if(arr[i]==arr[j])\n            {\n                count++;\n            }\n        }\n    }\n    if(count==0)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmptnpt2tkb: /tmp/tmptnpt2tkb.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    sort(arr.begin(), arr.end());\n    for(int i = 0; i < n-1; i++){\n        if(arr[i] == arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmp1qk_hc_k: /tmp/tmp1qk_hc_k.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i=0;i<n;i++){\n        for(int j=0;j<n;j++){\n            if(arr[i] == arr[j]){\n                count++;\n            }\n        }\n        if(count == 1){\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmpswa3j73h: /tmp/tmpswa3j73h.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = i+1; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if(count == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmp350tlt34: /tmp/tmp350tlt34.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if(count > 1) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmpl6utrod4: /tmp/tmpl6utrod4.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    int n = arr.size();\n    if (n == 0) {\n        return false;\n    }\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            if (arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if (count > 1) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmpiua75np8: /tmp/tmpiua75np8.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n=arr.size();\n    int count=0;\n    for(int i=0;i<n;i++)\n    {\n        for(int j=i+1;j<n;j++)\n        {\n            if(arr[i]==arr[j])\n            {\n                count++;\n            }\n        }\n    }\n    if(count==0)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmptnpt2tkb: /tmp/tmptnpt2tkb.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    int n = arr.size();\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            if (arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if (count > 1) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmpoiujp26o: /tmp/tmpoiujp26o.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if(count == n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmp74p8v3ue: /tmp/tmp74p8v3ue.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size() - 1; i++) {\n        if (arr[i] == arr[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmp1gww1d9l: /tmp/tmp1gww1d9l.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::unordered_set<long> s;\n    for(auto i : arr) {\n        s.insert(i);\n    }\n    return s.size() == 1;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if(count > 1) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmphtgaa6iu: /tmp/tmphtgaa6iu.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size() - 1; i++) {\n        if (arr[i] == arr[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmp1gww1d9l: /tmp/tmp1gww1d9l.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    if(n==1){\n        return true;\n    }\n    sort(arr.begin(),arr.end());\n    for(int i=0;i<n-1;i++){\n        if(arr[i]==arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmpr2shsk2m: /tmp/tmpr2shsk2m.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::unordered_set<long> s;\n    for(auto i : arr) {\n        s.insert(i);\n    }\n    return s.size() == 1;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    std::unordered_map<long,long> mp;\n    for(int i=0;i<arr.size();i++){\n        mp[arr[i]]++;\n    }\n    for(auto it=mp.begin();it!=mp.end();it++){\n        if(it->second>1){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmppi9wbk7t: /tmp/tmppi9wbk7t.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::unordered_set<long> s;\n    for(auto i : arr) {\n        s.insert(i);\n    }\n    if(s.size() == 1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    int n = arr.size();\n    for(int i = 0; i < n; i++) {\n        for(int j = i+1; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmp9z_jo25p: /tmp/tmp9z_jo25p.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    if(n == 1){\n        return true;\n    }\n    sort(arr.begin(), arr.end());\n    for(int i = 0; i < n-1; i++){\n        if(arr[i] == arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmpchwi18hx: /tmp/tmpchwi18hx.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    long n = arr.size();\n    if(n==1){\n        return true;\n    }\n    sort(arr.begin(),arr.end());\n    for(long i=0;i<n-1;i++){\n        if(arr[i]==arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmp2mebsopb: /tmp/tmp2mebsopb.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if(count == 1) {\n            return true;\n        }\n        count = 0;\n    }\n    return false;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmpboh3yjq2: /tmp/tmpboh3yjq2.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < arr.size()-1; i++) {\n        if(arr[i] == arr[i+1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmpxgch5me9: /tmp/tmpxgch5me9.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    sort(arr.begin(), arr.end());\n    for(int i = 0; i < n-1; i++){\n        if(arr[i] == arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmp1qk_hc_k: /tmp/tmp1qk_hc_k.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    std::unordered_set<long> s;\n    for(auto i:arr){\n        s.insert(i);\n    }\n    if(s.size()==1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    if(n==0)\n        return false;\n    if(n==1)\n        return true;\n    sort(arr.begin(),arr.end());\n    for(int i=0;i<n-1;i++)\n    {\n        if(arr[i]==arr[i+1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmp81oltfcc: /tmp/tmp81oltfcc.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n=arr.size();\n    int count=0;\n    for(int i=0;i<n;i++)\n    {\n        for(int j=0;j<n;j++)\n        {\n            if(arr[i]==arr[j])\n            {\n                count++;\n            }\n        }\n        if(count==1)\n        {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmpaegs61o7: /tmp/tmpaegs61o7.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    int n = arr.size();\n    if (n == 1) {\n        return true;\n    }\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < n - 1; i++) {\n        if (arr[i] == arr[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmpyop8tqvh: /tmp/tmpyop8tqvh.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = i+1; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if(count == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmp350tlt34: /tmp/tmp350tlt34.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < arr.size()-1; i++) {\n        if(arr[i] == arr[i+1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmpxgch5me9: /tmp/tmpxgch5me9.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < arr.size()-1; i++) {\n        if(arr[i] == arr[i+1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmpxgch5me9: /tmp/tmpxgch5me9.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < n; j++){\n            if(arr[i] == arr[j]){\n                count++;\n            }\n        }\n        if(count > 1){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpaij9v3r3: /tmp/tmpaij9v3r3.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if(count > 1) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmpl6utrod4: /tmp/tmpl6utrod4.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if(count == n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmp74p8v3ue: /tmp/tmp74p8v3ue.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    long n = arr.size();\n    long count = 0;\n    for(long i = 0; i < n; i++){\n        for(long j = 0; j < n; j++){\n            if(arr[i] == arr[j]){\n                count++;\n            }\n        }\n    }\n    if(count == n){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmp8oderzx4: /tmp/tmp8oderzx4.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n=arr.size();\n    int count=0;\n    for(int i=0;i<n;i++){\n        for(int j=i+1;j<n;j++){\n            if(arr[i]==arr[j]){\n                count++;\n            }\n        }\n    }\n    if(count==0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmp1csqtzn8: /tmp/tmp1csqtzn8.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::unordered_map<long, int> m;\n    for (int i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (auto i : m) {\n        if (i.second > 1) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmp26axaw_6: /tmp/tmp26axaw_6.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::unordered_map<long, int> m;\n    for(int i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    int count = 0;\n    for(auto i : m) {\n        if(i.second == 1) {\n            count++;\n        }\n    }\n    if(count == 1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmp557izj_q: /tmp/tmp557izj_q.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    long n = arr.size();\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        for(long j = 0; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if(count == 1) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmpcn8lb6wx: /tmp/tmpcn8lb6wx.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n=arr.size();\n    sort(arr.begin(),arr.end());\n    for(int i=0;i<n-1;i++){\n        if(arr[i]==arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpp_20pjns: /tmp/tmpp_20pjns.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int i = 0;\n    int j = n-1;\n    while(i<j){\n        if(arr[i] == arr[j]){\n            i++;\n            j--;\n        }\n        else{\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n  // Write your code here\n  // return true if the vector contains only one distinct element\n  // return false otherwise\n  std::sort(arr.begin(),arr.end());\n  for(int i=0;i<arr.size()-1;i++){\n      if(arr[i]==arr[i+1]){\n          return false;\n      }\n  }\n  return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmpktiufpsa: /tmp/tmpktiufpsa.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if(count == n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmp74p8v3ue: /tmp/tmp74p8v3ue.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::unordered_set<long> s;\n    for(auto x: arr) {\n        s.insert(x);\n    }\n    return s.size() == 1;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    int n = arr.size();\n    for(int i=0;i<n;i++) {\n        for(int j=i+1;j<n;j++) {\n            if(arr[i] == arr[j]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmpykkbaa_i: /tmp/tmpykkbaa_i.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::unordered_set<long> s;\n    for(auto i : arr) {\n        s.insert(i);\n    }\n    return s.size() == 1;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    int count = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        for(int j = i+1; j < arr.size(); j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if(count == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmphmv5n3x6: /tmp/tmphmv5n3x6.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    long n = arr.size();\n    if(n==1)\n        return true;\n    sort(arr.begin(),arr.end());\n    for(int i=0;i<n-1;i++)\n    {\n        if(arr[i]==arr[i+1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmpp3oxj0nq: /tmp/tmpp3oxj0nq.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n=arr.size();\n    for(int i=0;i<n;i++)\n    {\n        for(int j=i+1;j<n;j++)\n        {\n            if(arr[i]==arr[j])\n            {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmpu9zb1g9r: /tmp/tmpu9zb1g9r.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    long n = arr.size();\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        for(long j = 0; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if(count == n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpedvpew76: /tmp/tmpedvpew76.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < arr.size() - 1; i++) {\n        if(arr[i] == arr[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmp_u4_ete7: /tmp/tmp_u4_ete7.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    if(n == 1) {\n        return true;\n    }\n    sort(arr.begin(), arr.end());\n    for(int i = 0; i < n - 1; i++) {\n        if(arr[i] == arr[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmppq467lsy: /tmp/tmppq467lsy.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    if(n==0)\n        return false;\n    int temp = arr[0];\n    for(int i=1;i<n;i++)\n    {\n        if(temp!=arr[i])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    /* Don't write main().\n     * Don't read input, it is passed as function argument.\n     * Return output and don't print it.\n     * Taking input and printing output is handled automatically.\n     */\n    int n = arr.size();\n    if(n == 1){\n        return true;\n    }\n    sort(arr.begin(), arr.end());\n    for(int i = 0; i < n - 1; i++){\n        if(arr[i] == arr[i + 1]){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmp2bg430rx: /tmp/tmp2bg430rx.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::unordered_set<long> s;\n    for(auto i : arr) {\n        s.insert(i);\n    }\n    return s.size() == 1;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = i+1; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if(count == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmp350tlt34: /tmp/tmp350tlt34.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::unordered_set<long> s;\n    for(long i=0;i<arr.size();i++) {\n        s.insert(arr[i]);\n    }\n    if(s.size()==1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n=arr.size();\n    int count=0;\n    for(int i=0;i<n;i++)\n    {\n        for(int j=0;j<n;j++)\n        {\n            if(arr[i]==arr[j])\n            {\n                count++;\n            }\n        }\n    }\n    if(count==n)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmpu251ybon: /tmp/tmpu251ybon.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int count = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        for(int j = i+1; j < arr.size(); j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if(count == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmpx5seqkte: /tmp/tmpx5seqkte.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    if(n==1)\n        return true;\n    sort(arr.begin(),arr.end());\n    for(int i=0;i<n-1;i++){\n        if(arr[i]==arr[i+1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmpfn0mikx4: /tmp/tmpfn0mikx4.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = i + 1; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if(count == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmpsti104lv: /tmp/tmpsti104lv.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    long n = arr.size();\n    for(int i=0;i<n;i++){\n        for(int j=i+1;j<n;j++){\n            if(arr[i]==arr[j]){\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123172,
      "stdout": "",
      "stderr": "tmp8k3ul3yt: /tmp/tmp8k3ul3yt.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    int n = arr.size();\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (arr[i] == arr[j]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpzes3778r: /tmp/tmpzes3778r.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    long n = arr.size();\n    if(n==1){\n        return true;\n    }\n    sort(arr.begin(),arr.end());\n    for(int i=0;i<n-1;i++){\n        if(arr[i]==arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123172,
      "stdout": "",
      "stderr": "tmp1dxhh92n: /tmp/tmp1dxhh92n.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = i+1; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if(count == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123172,
      "stdout": "",
      "stderr": "tmpmqwg4ajj: /tmp/tmpmqwg4ajj.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::unordered_set<long> s;\n    for(auto i:arr) {\n        s.insert(i);\n    }\n    if(s.size() == 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123172,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if(count == n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmp74p8v3ue: /tmp/tmp74p8v3ue.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n=arr.size();\n    int count=0;\n    for(int i=0;i<n;i++)\n    {\n        for(int j=0;j<n;j++)\n        {\n            if(arr[i]==arr[j])\n            {\n                count++;\n            }\n        }\n        if(count==1)\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123172,
      "stdout": "",
      "stderr": "tmp60lxye80: /tmp/tmp60lxye80.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    int n = arr.size();\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (arr[i] == arr[j]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpzes3778r: /tmp/tmpzes3778r.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < arr.size() - 1; i++) {\n        if(arr[i] == arr[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmp_u4_ete7: /tmp/tmp_u4_ete7.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if(count == n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmp74p8v3ue: /tmp/tmp74p8v3ue.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::unordered_set<long> s;\n    for(auto i : arr) {\n        if(s.find(i) != s.end()) {\n            return false;\n        }\n        s.insert(i);\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123172,
      "stdout": "",
      "stderr": "tmpju8nrll1: /tmp/tmpju8nrll1.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::unordered_set<long> s;\n    for(auto i : arr) {\n        s.insert(i);\n    }\n    return s.size() == 1;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::unordered_set<long> s;\n    for(auto i : arr) {\n        s.insert(i);\n    }\n    return s.size() == 1;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::unordered_set<long> s;\n    for(auto i : arr) {\n        s.insert(i);\n    }\n    return s.size() == 1;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    if(n==1)\n        return true;\n    sort(arr.begin(), arr.end());\n    for(int i=0;i<n-1;i++){\n        if(arr[i]==arr[i+1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123172,
      "stdout": "",
      "stderr": "tmpdz_n2tfn: /tmp/tmpdz_n2tfn.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    if(n == 0)\n        return false;\n    int count = 0;\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < n; j++){\n            if(arr[i] == arr[j])\n                count++;\n        }\n        if(count == 1)\n            return true;\n        count = 0;\n    }\n    return false;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123172,
      "stdout": "",
      "stderr": "tmpqbx7gdjy: /tmp/tmpqbx7gdjy.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i=0;i<n;i++){\n        for(int j=0;j<n;j++){\n            if(arr[i] == arr[j]){\n                count++;\n            }\n        }\n    }\n    if(count == n){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123172,
      "stdout": "",
      "stderr": "tmplfslwdyy: /tmp/tmplfslwdyy.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < n; j++){\n            if(arr[i] == arr[j]){\n                count++;\n            }\n        }\n    }\n    if(count == n){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123172,
      "stdout": "",
      "stderr": "tmpc5fshz2u: /tmp/tmpc5fshz2u.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    int n = arr.size();\n    int i = 0;\n    while(i < n) {\n        if(arr[i] == arr[i+1]) {\n            return false;\n        }\n        i++;\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123172,
      "stdout": "",
      "stderr": "tmp6x993f_a: /tmp/tmp6x993f_a.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n=arr.size();\n    int count=0;\n    for(int i=0;i<n-1;i++){\n        if(arr[i]==arr[i+1]){\n            count++;\n        }\n    }\n    if(count==n-1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123172,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n=arr.size();\n    int count=0;\n    for(int i=0;i<n;i++){\n        for(int j=0;j<n;j++){\n            if(arr[i]==arr[j]){\n                count++;\n            }\n        }\n    }\n    if(count==n){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123172,
      "stdout": "",
      "stderr": "tmphcim1s1p: /tmp/tmphcim1s1p.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n=arr.size();\n    int count=0;\n    for(int i=0;i<n;i++){\n        for(int j=i+1;j<n;j++){\n            if(arr[i]==arr[j]){\n                count++;\n            }\n        }\n    }\n    if(count==0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmp1csqtzn8: /tmp/tmp1csqtzn8.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    int n = arr.size();\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < n-1; i++) {\n        if(arr[i] == arr[i+1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123172,
      "stdout": "",
      "stderr": "tmp633ggijd: /tmp/tmp633ggijd.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < arr.size() - 1; i++) {\n        if(arr[i] == arr[i+1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123172,
      "stdout": "",
      "stderr": "tmp_v_39st5: /tmp/tmp_v_39st5.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i=0;i<n;i++)\n    {\n        for(int j=0;j<n;j++)\n        {\n            if(arr[i]==arr[j])\n            {\n                count++;\n            }\n        }\n    }\n    if(count==n)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123172,
      "stdout": "",
      "stderr": "tmp4tipvlov: /tmp/tmp4tipvlov.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < arr.size() - 1; i++) {\n        if(arr[i] == arr[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmp_u4_ete7: /tmp/tmp_u4_ete7.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    long n = arr.size();\n    long count = 0;\n    for(long i=0;i<n;i++){\n        for(long j=0;j<n;j++){\n            if(arr[i] == arr[j]){\n                count++;\n            }\n        }\n    }\n    if(count == n){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123172,
      "stdout": "",
      "stderr": "tmp66nhziel: /tmp/tmp66nhziel.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = i+1; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if(count == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmp350tlt34: /tmp/tmp350tlt34.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    if(n==1)\n        return true;\n    sort(arr.begin(),arr.end());\n    for(int i=0;i<n-1;i++){\n        if(arr[i]==arr[i+1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmpfn0mikx4: /tmp/tmpfn0mikx4.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i=0;i<n;i++){\n        for(int j=i+1;j<n;j++){\n            if(arr[i] == arr[j]){\n                count++;\n            }\n        }\n    }\n    if(count == 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpsljhhfrq: /tmp/tmpsljhhfrq.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    if(n==1)\n        return true;\n    sort(arr.begin(),arr.end());\n    for(int i=0;i<n-1;i++){\n        if(arr[i]==arr[i+1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmpfn0mikx4: /tmp/tmpfn0mikx4.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    int n = arr.size();\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (arr[i] == arr[j]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpzes3778r: /tmp/tmpzes3778r.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = i + 1; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if(count == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmpsti104lv: /tmp/tmpsti104lv.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < arr.size()-1; i++) {\n        if(arr[i] == arr[i+1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmpxgch5me9: /tmp/tmpxgch5me9.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::unordered_set<long> s;\n    for(auto i:arr) {\n        s.insert(i);\n    }\n    if(s.size() == 1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123172,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i=0;i<n;i++){\n        for(int j=i+1;j<n;j++){\n            if(arr[i]==arr[j]){\n                count++;\n            }\n        }\n    }\n    if(count==0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123172,
      "stdout": "",
      "stderr": "tmpdnuc8hju: /tmp/tmpdnuc8hju.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++){\n        for(int j = i+1; j < n; j++){\n            if(arr[i] == arr[j]){\n                count++;\n            }\n        }\n    }\n    if(count == 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmp2bgj06pa: /tmp/tmp2bgj06pa.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    std::unordered_map<long,int> m;\n    for(int i=0;i<arr.size();i++)\n    {\n        m[arr[i]]++;\n    }\n    for(auto x:m)\n    {\n        if(x.second==1)\n        {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123172,
      "stdout": "",
      "stderr": "tmp26od19jv: /tmp/tmp26od19jv.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if(count == 1) {\n            return true;\n        }\n        count = 0;\n    }\n    return false;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmpboh3yjq2: /tmp/tmpboh3yjq2.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::unordered_set<long> s;\n    for(auto i : arr) {\n        s.insert(i);\n    }\n    return s.size() == 1;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i=0;i<n;i++){\n        for(int j=0;j<n;j++){\n            if(arr[i] == arr[j]){\n                count++;\n            }\n        }\n        if(count == 1){\n            return true;\n        }\n        count = 0;\n    }\n    return false;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp2tfv_78l: /tmp/tmp2tfv_78l.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    sort(arr.begin(), arr.end());\n    for(int i = 0; i < n-1; i++) {\n        if(arr[i] == arr[i+1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123172,
      "stdout": "",
      "stderr": "tmp3502n053: /tmp/tmp3502n053.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i=0;i<n;i++)\n    {\n        for(int j=i+1;j<n;j++)\n        {\n            if(arr[i]==arr[j])\n            {\n                count++;\n            }\n        }\n    }\n    if(count==0)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpt4x8vr8j: /tmp/tmpt4x8vr8j.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::unordered_set<long> s;\n    for(auto i:arr) {\n        s.insert(i);\n    }\n    if(s.size()==1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123172,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n\t// Write your code here\n\t// return true if there is only one distinct element in the vector\n\t// else return false\n\tint n = arr.size();\n\tif(n == 1)\n\t\treturn true;\n\tsort(arr.begin(), arr.end());\n\tfor(int i = 0; i < n - 1; i++) {\n\t\tif(arr[i] == arr[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123172,
      "stdout": "",
      "stderr": "tmprtk3mh__: /tmp/tmprtk3mh__.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::unordered_map<long, int> map;\n    for (long i = 0; i < arr.size(); i++) {\n        if (map.find(arr[i]) == map.end()) {\n            map[arr[i]] = 1;\n        } else {\n            map[arr[i]]++;\n        }\n    }\n    for (auto i : map) {\n        if (i.second > 1) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "tmp21kcbjpc: /tmp/tmp21kcbjpc.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    long n = arr.size();\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        for(long j = 0; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if(count == n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpedvpew76: /tmp/tmpedvpew76.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = i + 1; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if(count == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmpsti104lv: /tmp/tmpsti104lv.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    int n = arr.size();\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < n - 1; i++) {\n        if (arr[i] == arr[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpewj5440x: /tmp/tmpewj5440x.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < arr.size() - 1; i++) {\n        if(arr[i] == arr[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmp_u4_ete7: /tmp/tmp_u4_ete7.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    int n = arr.size();\n    if(n == 1) {\n        return true;\n    }\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < n-1; i++) {\n        if(arr[i] == arr[i+1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "tmptzol5_v8: /tmp/tmptzol5_v8.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::unordered_map<long, int> mp;\n    for(int i = 0; i < arr.size(); i++) {\n        mp[arr[i]]++;\n    }\n    for(auto x : mp) {\n        if(x.second > 1) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "tmpywkenoed: /tmp/tmpywkenoed.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = i+1; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if(count == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmp350tlt34: /tmp/tmp350tlt34.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n=arr.size();\n    for(int i=0;i<n;i++)\n    {\n        for(int j=i+1;j<n;j++)\n        {\n            if(arr[i]==arr[j])\n            {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmpu9zb1g9r: /tmp/tmpu9zb1g9r.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n=arr.size();\n    int count=0;\n    for(int i=0;i<n;i++){\n        for(int j=0;j<n;j++){\n            if(arr[i]==arr[j]){\n                count++;\n            }\n        }\n        if(count>1){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "tmpm9rc5g3n: /tmp/tmpm9rc5g3n.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if(count == 1) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "tmpu518r70d: /tmp/tmpu518r70d.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if(count == n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmp74p8v3ue: /tmp/tmp74p8v3ue.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::unordered_set<long> s;\n    for(auto i:arr) {\n        s.insert(i);\n    }\n    if(s.size() == 1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123172,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size() - 1; i++) {\n        if (arr[i] == arr[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmp1gww1d9l: /tmp/tmp1gww1d9l.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i=0;i<n;i++)\n    {\n        for(int j=i+1;j<n;j++)\n        {\n            if(arr[i] == arr[j])\n            {\n                count++;\n            }\n        }\n    }\n    if(count == 0)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpydtse_js: /tmp/tmpydtse_js.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::unordered_set<long> s;\n    for(long i = 0; i < arr.size(); i++) {\n        s.insert(arr[i]);\n    }\n    if(s.size() == 1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    if(arr.size()==0)\n        return false;\n    long x=arr[0];\n    for(int i=1;i<arr.size();i++)\n    {\n        if(arr[i]!=x)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::unordered_map<long, long> m;\n    for(long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for(auto x : m) {\n        if(x.second > 1) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "tmpu04xq6b_: /tmp/tmpu04xq6b_.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    std::sort(arr.begin(),arr.end());\n    for(int i=0;i<arr.size()-1;i++){\n        if(arr[i]==arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "tmpwvz85o1x: /tmp/tmpwvz85o1x.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size() - 1; i++) {\n        if (arr[i] == arr[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmp1gww1d9l: /tmp/tmp1gww1d9l.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size() - 1; i++) {\n        if (arr[i] == arr[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmp1gww1d9l: /tmp/tmp1gww1d9l.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i=0;i<n;i++){\n        for(int j=0;j<n;j++){\n            if(arr[i] == arr[j]){\n                count++;\n            }\n        }\n        if(count == 1){\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "tmplf7xst_q: /tmp/tmplf7xst_q.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size() - 1; i++) {\n        if (arr[i] == arr[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmp1gww1d9l: /tmp/tmp1gww1d9l.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = i+1; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if(count == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmp350tlt34: /tmp/tmp350tlt34.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n=arr.size();\n    int count=0;\n    for(int i=0;i<n;i++)\n    {\n        for(int j=i+1;j<n;j++)\n        {\n            if(arr[i]==arr[j])\n            {\n                count++;\n            }\n        }\n    }\n    if(count==0)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmptnpt2tkb: /tmp/tmptnpt2tkb.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    long n=arr.size();\n    long i;\n    for(i=0;i<n;i++)\n    {\n        if(arr[i]!=arr[0])\n        {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if(count == n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmp74p8v3ue: /tmp/tmp74p8v3ue.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    int n = arr.size();\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (arr[i] == arr[j]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpzes3778r: /tmp/tmpzes3778r.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    long n = arr.size();\n    long count = 0;\n    for(long i=0;i<n;i++){\n        for(long j=0;j<n;j++){\n            if(arr[i]==arr[j]){\n                count++;\n            }\n        }\n        if(count==1){\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "tmp11ck0l1j: /tmp/tmp11ck0l1j.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::unordered_set<long> s;\n    for(auto i:arr)\n        s.insert(i);\n    return s.size()==1;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123174,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}