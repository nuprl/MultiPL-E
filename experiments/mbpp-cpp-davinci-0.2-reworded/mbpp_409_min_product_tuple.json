{
  "name": "mbpp_409_min_product_tuple",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the minimum product from the pairs of tuples within a given vector.\nlong min_product_tuple(std::vector<long> list1) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_409_min_product_tuple.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = min_product_tuple;\n    assert(candidate((std::vector<long>({(std::tuple<long, long>)std::make_tuple(2, 7), (std::tuple<long, long>)std::make_tuple(2, 6), (std::tuple<long, long>)std::make_tuple(1, 8), (std::tuple<long, long>)std::make_tuple(4, 9)}))) == (8));\n    assert(candidate((std::vector<long>({(std::tuple<long, long>)std::make_tuple(10, 20), (std::tuple<long, long>)std::make_tuple(15, 2), (std::tuple<long, long>)std::make_tuple(5, 10)}))) == (30));\n    assert(candidate((std::vector<long>({(std::tuple<long, long>)std::make_tuple(11, 44), (std::tuple<long, long>)std::make_tuple(10, 15), (std::tuple<long, long>)std::make_tuple(20, 5), (std::tuple<long, long>)std::make_tuple(12, 9)}))) == (100));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::sort(list1.begin(), list1.end());\n    long min_product = list1[0] * list1[1];\n    for (int i = 1; i < list1.size() - 1; i++) {\n        long product = list1[i] * list1[i + 1];\n        if (product < min_product) {\n            min_product = product;\n        }\n    }\n    return min_product;",
    "    std::sort(list1.begin(), list1.end());\n    long min_product = list1[0] * list1[1];\n    for (int i = 2; i < list1.size(); i++) {\n        if (list1[i] * list1[i-1] < min_product) {\n            min_product = list1[i] * list1[i-1];\n        }\n    }\n    return min_product;",
    "    long min_product = list1[0] * list1[1];\n    for (int i = 0; i < list1.size(); i++) {\n        for (int j = i + 1; j < list1.size(); j++) {\n            if (list1[i] * list1[j] < min_product) {\n                min_product = list1[i] * list1[j];\n            }\n        }\n    }\n    return min_product;",
    "    long min_product = std::numeric_limits<long>::max();\n    for (int i = 0; i < list1.size(); i++) {\n        for (int j = i + 1; j < list1.size(); j++) {\n            long product = list1[i] * list1[j];\n            if (product < min_product) {\n                min_product = product;\n            }\n        }\n    }\n    return min_product;",
    "    std::sort(list1.begin(), list1.end());\n    long min_product = list1[0] * list1[1];\n    for (int i = 1; i < list1.size() - 1; i++) {\n        long product = list1[i] * list1[i + 1];\n        if (product < min_product) {\n            min_product = product;\n        }\n    }\n    return min_product;",
    "    std::sort(list1.begin(), list1.end());\n    long min_product = list1[0] * list1[1];\n    return min_product;",
    "    long min_product = list1[0] * list1[1];\n    for (int i = 0; i < list1.size(); i++) {\n        for (int j = i + 1; j < list1.size(); j++) {\n            if (list1[i] * list1[j] < min_product) {\n                min_product = list1[i] * list1[j];\n            }\n        }\n    }\n    return min_product;",
    "    std::sort(list1.begin(), list1.end());\n    return list1[0] * list1[1];",
    "    long min_product = INT_MAX;\n    for (int i = 0; i < list1.size(); i++) {\n        for (int j = i + 1; j < list1.size(); j++) {\n            if (list1[i] * list1[j] < min_product) {\n                min_product = list1[i] * list1[j];\n            }\n        }\n    }\n    return min_product;",
    "  long min_product = std::numeric_limits<long>::max();\n  for (int i = 0; i < list1.size(); i++) {\n    for (int j = i + 1; j < list1.size(); j++) {\n      if (list1[i] * list1[j] < min_product) {\n        min_product = list1[i] * list1[j];\n      }\n    }\n  }\n  return min_product;",
    "    long min_product = 0;\n    std::sort(list1.begin(), list1.end());\n    min_product = list1[0] * list1[1];\n    return min_product;",
    "    long min_product = std::numeric_limits<long>::max();\n    for (int i = 0; i < list1.size(); i++) {\n        for (int j = i + 1; j < list1.size(); j++) {\n            long product = list1[i] * list1[j];\n            if (product < min_product) {\n                min_product = product;\n            }\n        }\n    }\n    return min_product;",
    "    long min_product = std::numeric_limits<long>::max();\n    for (int i = 0; i < list1.size(); i++) {\n        for (int j = i + 1; j < list1.size(); j++) {\n            long product = list1[i] * list1[j];\n            if (product < min_product) {\n                min_product = product;\n            }\n        }\n    }\n    return min_product;",
    "    long min_product = std::numeric_limits<long>::max();\n    for (int i = 0; i < list1.size(); i++) {\n        for (int j = i + 1; j < list1.size(); j++) {\n            long product = list1[i] * list1[j];\n            if (product < min_product) {\n                min_product = product;\n            }\n        }\n    }\n    return min_product;",
    "    long min_product = list1[0] * list1[1];\n    for (int i = 0; i < list1.size() - 1; i++) {\n        for (int j = i + 1; j < list1.size(); j++) {\n            if (list1[i] * list1[j] < min_product) {\n                min_product = list1[i] * list1[j];\n            }\n        }\n    }\n    return min_product;",
    "    long min_product = 0;\n    std::sort(list1.begin(), list1.end());\n    min_product = list1[0] * list1[1];\n    return min_product;",
    "    long min_product = std::numeric_limits<long>::max();\n    for (int i = 0; i < list1.size(); i++) {\n        for (int j = i + 1; j < list1.size(); j++) {\n            long product = list1[i] * list1[j];\n            if (product < min_product) {\n                min_product = product;\n            }\n        }\n    }\n    return min_product;",
    "    long min = list1[0] * list1[1];\n    for (int i = 0; i < list1.size() - 1; i++) {\n        for (int j = i + 1; j < list1.size(); j++) {\n            if (list1[i] * list1[j] < min) {\n                min = list1[i] * list1[j];\n            }\n        }\n    }\n    return min;",
    "    long min_prod = INT_MAX;\n    for (int i = 0; i < list1.size(); i++) {\n        for (int j = i+1; j < list1.size(); j++) {\n            min_prod = std::min(min_prod, list1[i]*list1[j]);\n        }\n    }\n    return min_prod;",
    "    std::sort(list1.begin(), list1.end());\n    long min_product = list1[0] * list1[1];\n    return min_product;"
  ]
}