{
  "name": "mbpp_637_noprofit_noloss",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_637_noprofit_noloss.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return actual_cost == sale_amount;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return actual_cost == sale_amount;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n\tif(actual_cost == sale_amount)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return (actual_cost == sale_amount);\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return actual_cost == sale_amount;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n  if (actual_cost == sale_amount) {\n    return true;\n  }\n  return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return (actual_cost == sale_amount);\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n  if (actual_cost == sale_amount)\n    return true;\n  else\n    return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n  return (actual_cost == sale_amount);\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return actual_cost == sale_amount;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return actual_cost == sale_amount;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return actual_cost == sale_amount;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return actual_cost == sale_amount;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return (actual_cost == sale_amount);\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return (actual_cost == sale_amount);\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return actual_cost == sale_amount;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return (actual_cost == sale_amount);\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return actual_cost == sale_amount;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return actual_cost == sale_amount;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return (actual_cost == sale_amount);\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return actual_cost == sale_amount;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return actual_cost == sale_amount;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if (actual_cost == sale_amount) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost==sale_amount)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n  // Write your code here\n  if(actual_cost==sale_amount)\n  return true;\n  else\n  return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return (actual_cost == sale_amount);\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return (actual_cost == sale_amount);\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    // Write your code here\n    if(actual_cost==sale_amount)\n    return true;\n    else\n    return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return actual_cost == sale_amount;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n  // Write your code here\n  if(actual_cost==sale_amount)\n  {\n    return true;\n  }\n  else\n  {\n    return false;\n  }\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    // Write your code here\n    if(actual_cost==sale_amount)\n    return true;\n    else\n    return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return actual_cost == sale_amount;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return (actual_cost == sale_amount);\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n  return (actual_cost == sale_amount);\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return actual_cost == sale_amount;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    // Write your code here\n    if(actual_cost==sale_amount)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return (actual_cost == sale_amount);\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return (actual_cost == sale_amount);\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return actual_cost == sale_amount;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return actual_cost == sale_amount;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return actual_cost == sale_amount;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n  return actual_cost == sale_amount;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return (actual_cost == sale_amount);\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return actual_cost == sale_amount;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return actual_cost == sale_amount;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return (actual_cost == sale_amount);\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return actual_cost == sale_amount;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return actual_cost == sale_amount;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    // Write your code here\n    if(actual_cost==sale_amount)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n  return actual_cost == sale_amount;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n  // Write your code here\n  if(actual_cost==sale_amount)\n  return true;\n  else\n  return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    // Write your code here\n    if(actual_cost==sale_amount)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return actual_cost == sale_amount;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return (actual_cost == sale_amount);\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return (actual_cost == sale_amount);\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return (actual_cost == sale_amount);\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return (actual_cost == sale_amount);\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return actual_cost == sale_amount;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n  // Write your code here\n  if(actual_cost==sale_amount)\n  return true;\n  else\n  return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n  // Write your code here\n  if(actual_cost==sale_amount)\n  return true;\n  else\n  return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return actual_cost == sale_amount;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return (actual_cost == sale_amount);\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if (actual_cost == sale_amount) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return (actual_cost == sale_amount);\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return actual_cost == sale_amount;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n\tif(actual_cost==sale_amount)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n\tif(actual_cost == sale_amount)\n\t\treturn true;\n\treturn false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n  // Write your code here\n  if(actual_cost==sale_amount)\n  {\n    return true;\n  }\n  else\n  {\n    return false;\n  }\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return actual_cost == sale_amount;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return actual_cost == sale_amount;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n  return (actual_cost == sale_amount);\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return actual_cost == sale_amount;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return (actual_cost == sale_amount);\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return (actual_cost == sale_amount);\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n  return actual_cost == sale_amount;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return actual_cost == sale_amount;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n  // Write your code here\n  if(actual_cost==sale_amount)\n  return true;\n  else\n  return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return actual_cost == sale_amount;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n\tif(actual_cost == sale_amount)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n  return actual_cost == sale_amount;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return (actual_cost == sale_amount);\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return actual_cost == sale_amount;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return (actual_cost == sale_amount);\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return actual_cost == sale_amount;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return actual_cost == sale_amount;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return (actual_cost == sale_amount);\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return actual_cost == sale_amount;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n  // Write your code here\n  if(actual_cost==sale_amount)\n  return true;\n  else\n  return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return (actual_cost == sale_amount);\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost==sale_amount)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n  return actual_cost == sale_amount;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return actual_cost == sale_amount;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return (actual_cost == sale_amount);\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return actual_cost == sale_amount;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return (actual_cost == sale_amount);\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return (actual_cost == sale_amount);\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return actual_cost == sale_amount;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return (actual_cost == sale_amount);\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return actual_cost == sale_amount;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return (actual_cost == sale_amount);\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return (actual_cost == sale_amount);\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return (actual_cost == sale_amount);\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return actual_cost == sale_amount;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    // Write your code here\n    return (actual_cost == sale_amount);\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return (actual_cost == sale_amount);\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return (actual_cost == sale_amount);\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    // Write your code here\n    if(actual_cost == sale_amount)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return actual_cost == sale_amount;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return actual_cost == sale_amount;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return actual_cost == sale_amount;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    // Write your code here\n    if(actual_cost==sale_amount)\n    return true;\n    else\n    return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1666123494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    if(actual_cost == sale_amount)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n  return (actual_cost == sale_amount);\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return (actual_cost == sale_amount);\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return actual_cost == sale_amount;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return (actual_cost == sale_amount);\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return (actual_cost == sale_amount);\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n    return actual_cost == sale_amount;\n}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
      "timestamp": 1665510460,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}