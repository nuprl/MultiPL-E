{
  "name": "mbpp_465_drop_empty",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to drop empty items from a given map.\nstd::map<std::string,std::string> drop_empty(std::map<std::string,std::optional<std::string>> dict1) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_465_drop_empty.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = drop_empty;\n    assert(candidate(std::map<std::string,std::string>({{\"c1\", \"Red\"}, {\"c2\", \"Green\"}, {\"c3\", std::nullopt}})) == (std::map<std::string,std::string>({{\"c1\", \"Red\"}, {\"c2\", \"Green\"}})));\n    assert(candidate(std::map<std::string,std::string>({{\"c1\", \"Red\"}, {\"c2\", std::nullopt}, {\"c3\", std::nullopt}})) == (std::map<std::string,std::string>({{\"c1\", \"Red\"}})));\n    assert(candidate(std::map<std::string,std::nullopt>({{\"c1\", std::nullopt}, {\"c2\", \"Green\"}, {\"c3\", std::nullopt}})) == (std::map<std::string,std::string>({{\"c2\", \"Green\"}})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::map<std::string,std::string> dict2;\n    for(auto i:dict1) {\n        if(i.second.has_value()) {\n            dict2[i.first] = i.second.value();\n        }\n    }\n    return dict2;",
    "    std::map<std::string,std::string> dict2;\n    for(auto i:dict1) {\n        if(i.second) {\n            dict2[i.first] = *i.second;\n        }\n    }\n    return dict2;",
    "    std::map<std::string,std::string> dict2;\n    for(auto itr = dict1.begin(); itr != dict1.end(); itr++) {\n        if(itr->second) {\n            dict2[itr->first] = *(itr->second);\n        }\n    }\n    return dict2;",
    "    std::map<std::string,std::string> dict2;\n    for(auto i:dict1) {\n        if(i.second.has_value()) {\n            dict2[i.first] = i.second.value();\n        }\n    }\n    return dict2;",
    "    std::map<std::string,std::string> dict2;\n    for(auto i:dict1) {\n        if(i.second.has_value()) {\n            dict2.insert(std::make_pair(i.first,i.second.value()));\n        }\n    }\n    return dict2;",
    "    std::map<std::string,std::string> dict2;\n    for(auto i:dict1) {\n        if(i.second.has_value()) {\n            dict2[i.first] = i.second.value();\n        }\n    }\n    return dict2;",
    "    std::map<std::string,std::string> dict2;\n    for(auto i:dict1) {\n        if(i.second.has_value()) {\n            dict2[i.first] = i.second.value();\n        }\n    }\n    return dict2;",
    "    std::map<std::string,std::string> dict2;\n    for(auto itr = dict1.begin();itr != dict1.end();itr++) {\n        if(itr->second) {\n            dict2[itr->first] = itr->second.value();\n        }\n    }\n    return dict2;",
    "    std::map<std::string,std::string> dict2;\n    for(auto it = dict1.begin();it!=dict1.end();it++) {\n        if(it->second.has_value()) {\n            dict2.insert(std::make_pair(it->first,it->second.value()));\n        }\n    }\n    return dict2;",
    "    std::map<std::string,std::string> dict2;\n    for(auto i:dict1) {\n        if(i.second) {\n            dict2[i.first] = *i.second;\n        }\n    }\n    return dict2;",
    "    std::map<std::string,std::string> dict2;\n    for(auto i:dict1) {\n        if(i.second) {\n            dict2[i.first] = *i.second;\n        }\n    }\n    return dict2;",
    "    std::map<std::string,std::string> dict2;\n    for(auto itr = dict1.begin(); itr != dict1.end(); itr++) {\n        if(itr->second.has_value()) {\n            dict2.insert(std::make_pair(itr->first,itr->second.value()));\n        }\n    }\n    return dict2;",
    "    std::map<std::string,std::string> dict2;\n    for(auto it=dict1.begin();it!=dict1.end();it++) {\n        if(it->second.has_value()) {\n            dict2[it->first]=it->second.value();\n        }\n    }\n    return dict2;",
    "    std::map<std::string,std::string> dict2;\n    for(auto i:dict1) {\n        if(i.second) {\n            dict2[i.first] = i.second.value();\n        }\n    }\n    return dict2;",
    "    std::map<std::string,std::string> dict2;\n    for(auto i:dict1) {\n        if(i.second.has_value()) {\n            dict2[i.first] = i.second.value();\n        }\n    }\n    return dict2;",
    "    std::map<std::string,std::string> dict2;\n    for(auto it = dict1.begin();it!=dict1.end();it++) {\n        if(it->second.has_value()) {\n            dict2[it->first] = it->second.value();\n        }\n    }\n    return dict2;",
    "    std::map<std::string,std::string> dict2;\n    for(auto i:dict1) {\n        if(i.second.has_value()) {\n            dict2.insert(std::make_pair(i.first,i.second.value()));\n        }\n    }\n    return dict2;",
    "    std::map<std::string,std::string> dict2;\n    for(auto i:dict1) {\n        if(i.second.has_value()) {\n            dict2[i.first] = i.second.value();\n        }\n    }\n    return dict2;",
    "    std::map<std::string,std::string> dict2;\n    for(auto i:dict1) {\n        if(i.second.has_value()) {\n            dict2[i.first] = i.second.value();\n        }\n    }\n    return dict2;",
    "    std::map<std::string,std::string> dict2;\n    for(auto i:dict1) {\n        if(i.second.has_value()) {\n            dict2[i.first] = i.second.value();\n        }\n    }\n    return dict2;"
  ]
}