{
  "name": "mbpp_784_mul_even_odd",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_784_mul_even_odd.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even = 1, odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even *= list1[i];\n        } else {\n            odd *= list1[i];\n        }\n    }\n    return even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "tmpx03covo1: /tmp/tmpx03covo1.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even=1,odd=1;\n    for(int i=0;i<list1.size();i++)\n    {\n        if(list1[i]%2==0)\n        {\n            even=even*list1[i];\n            break;\n        }\n    }\n    for(int i=0;i<list1.size();i++)\n    {\n        if(list1[i]%2!=0)\n        {\n            odd=odd*list1[i];\n            break;\n        }\n    }\n    return even*odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n  long even_num = 1;\n  long odd_num = 1;\n  for (int i = 0; i < list1.size(); i++) {\n    if (list1[i] % 2 == 0) {\n      even_num = list1[i];\n      break;\n    }\n  }\n  for (int i = 0; i < list1.size(); i++) {\n    if (list1[i] % 2 != 0) {\n      odd_num = list1[i];\n      break;\n    }\n  }\n  return even_num * odd_num;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even,odd;\n    for(int i=0;i<list1.size();i++)\n    {\n        if(list1[i]%2==0)\n        {\n            even=list1[i];\n            break;\n        }\n    }\n    for(int i=0;i<list1.size();i++)\n    {\n        if(list1[i]%2!=0)\n        {\n            odd=list1[i];\n            break;\n        }\n    }\n    return even*odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even = 1;\n    long odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd = list1[i];\n            break;\n        }\n    }\n    return even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even = 1;\n    long odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even = even * list1[i];\n        }\n        else {\n            odd = odd * list1[i];\n        }\n    }\n    return even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "tmpfyo51zpr: /tmp/tmpfyo51zpr.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n  long even = 1;\n  long odd = 1;\n  for (int i = 0; i < list1.size(); i++) {\n    if (list1[i] % 2 == 0) {\n      even = list1[i];\n      break;\n    }\n  }\n  for (int i = 0; i < list1.size(); i++) {\n    if (list1[i] % 2 != 0) {\n      odd = list1[i];\n      break;\n    }\n  }\n  return even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n\tlong even = 1;\n\tlong odd = 1;\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tif (i % 2 == 0) {\n\t\t\teven *= list1[i];\n\t\t}\n\t\telse {\n\t\t\todd *= list1[i];\n\t\t}\n\t}\n\treturn even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "tmpz7sb6p8u: /tmp/tmpz7sb6p8u.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_num = 1;\n    long odd_num = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            break;\n        }\n    }\n    return even_num * odd_num;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even = 1;\n    long odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even *= list1[i];\n        } else {\n            odd *= list1[i];\n        }\n    }\n    return even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "tmp31lc0s21: /tmp/tmp31lc0s21.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_product = 1;\n    long odd_product = 1;\n    int i = 0;\n    for (auto it = list1.begin(); it != list1.end(); ++it) {\n        if (i % 2 == 0) {\n            even_product *= *it;\n        } else {\n            odd_product *= *it;\n        }\n        i++;\n    }\n    return even_product * odd_product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "tmpg26p4w6q: /tmp/tmpg26p4w6q.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n\tint i = 0;\n\tlong even = 1;\n\tlong odd = 1;\n\twhile (i < list1.size()) {\n\t\tif (list1[i] % 2 == 0) {\n\t\t\teven = even * list1[i];\n\t\t\ti++;\n\t\t}\n\t\telse {\n\t\t\todd = odd * list1[i];\n\t\t\ti++;\n\t\t}\n\t}\n\treturn even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "tmpky3ndkwc: /tmp/tmpky3ndkwc.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n  long even_product = 1;\n  long odd_product = 1;\n  int even_count = 0;\n  int odd_count = 0;\n  for (int i = 0; i < list1.size(); i++) {\n    if (list1[i] % 2 == 0) {\n      even_count++;\n      if (even_count == 1) {\n        even_product = list1[i];\n      }\n    }\n    else {\n      odd_count++;\n      if (odd_count == 1) {\n        odd_product = list1[i];\n      }\n    }\n  }\n  return even_product * odd_product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long product = 1;\n    int i = 0;\n    while(i < list1.size()) {\n        if(list1[i] % 2 == 0) {\n            product *= list1[i];\n            break;\n        }\n        i++;\n    }\n    i = 0;\n    while(i < list1.size()) {\n        if(list1[i] % 2 != 0) {\n            product *= list1[i];\n            break;\n        }\n        i++;\n    }\n    return product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n  long even = 1;\n  long odd = 1;\n  for (int i = 0; i < list1.size(); i++) {\n    if (i % 2 == 0) {\n      even *= list1[i];\n    } else {\n      odd *= list1[i];\n    }\n  }\n  return even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "tmph9_9ckkb: /tmp/tmph9_9ckkb.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_prod = 1;\n    long odd_prod = 1;\n    for (long i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_prod *= list1[i];\n        } else {\n            odd_prod *= list1[i];\n        }\n    }\n    return even_prod * odd_prod;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "tmp9ymv2kf4: /tmp/tmp9ymv2kf4.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_product = 1;\n    long odd_product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_product = even_product * list1[i];\n        } else {\n            odd_product = odd_product * list1[i];\n        }\n    }\n    return even_product * odd_product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "tmpiiic63r6: /tmp/tmpiiic63r6.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even = 1;\n    long odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even *= list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd *= list1[i];\n            break;\n        }\n    }\n    return even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long product = 1;\n    int even = 0;\n    int odd = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            if (even == 0) {\n                product = product * list1[i];\n                even++;\n            }\n        }\n        else {\n            if (odd == 0) {\n                product = product * list1[i];\n                odd++;\n            }\n        }\n        if (even == 1 && odd == 1) {\n            break;\n        }\n    }\n    return product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even = 1, odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even *= list1[i];\n        }\n        else {\n            odd *= list1[i];\n        }\n    }\n    return even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "tmpeol806pg: /tmp/tmpeol806pg.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_product = 1;\n    long odd_product = 1;\n    int count = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            if (count == 0) {\n                even_product = list1[i];\n                count++;\n            }\n            else {\n                even_product = even_product * list1[i];\n            }\n        }\n        else {\n            if (count == 0) {\n                odd_product = list1[i];\n                count++;\n            }\n            else {\n                odd_product = odd_product * list1[i];\n            }\n        }\n    }\n    return even_product * odd_product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "tmpxonbvc5_: /tmp/tmpxonbvc5_.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    int even = 0;\n    int odd = 0;\n    long product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even++;\n            if (even == 1) {\n                product = product * list1[i];\n            }\n        } else {\n            odd++;\n            if (odd == 1) {\n                product = product * list1[i];\n            }\n        }\n    }\n    return product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even = 1;\n    long odd = 1;\n    for(int i = 0; i < list1.size(); i++) {\n        if(i % 2 == 0) {\n            even *= list1[i];\n        }\n        else {\n            odd *= list1[i];\n        }\n    }\n    return even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "tmpc2t4nudx: /tmp/tmpc2t4nudx.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n\tlong even=1,odd=1;\n\tfor(int i=0;i<list1.size();i++)\n\t{\n\t\tif(i%2==0)\n\t\t\teven*=list1[i];\n\t\telse\n\t\t\todd*=list1[i];\n\t}\n\treturn even*odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "tmpqzg6orx1: /tmp/tmpqzg6orx1.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    int even = 0;\n    int odd = 0;\n    long product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even++;\n            if (even == 1) {\n                product *= list1[i];\n            }\n        } else {\n            odd++;\n            if (odd == 1) {\n                product *= list1[i];\n            }\n        }\n    }\n    return product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even = 1;\n    long odd = 1;\n    for(int i = 0; i < list1.size(); i++) {\n        if(i % 2 == 0) {\n            even *= list1[i];\n        }\n        else {\n            odd *= list1[i];\n        }\n    }\n    return even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "tmpc2t4nudx: /tmp/tmpc2t4nudx.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even = 1;\n    long odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even = even * list1[i];\n        }\n        else {\n            odd = odd * list1[i];\n        }\n    }\n    return even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "tmpkm27ysr0: /tmp/tmpkm27ysr0.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_mul = 1;\n    long odd_mul = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_mul *= list1[i];\n        }\n        else {\n            odd_mul *= list1[i];\n        }\n    }\n    return even_mul * odd_mul;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "tmp_kkk28dx: /tmp/tmp_kkk28dx.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_num = 1;\n    long odd_num = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            break;\n        }\n    }\n    return even_num * odd_num;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_product = 1;\n    long odd_product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_product *= list1[i];\n        } else {\n            odd_product *= list1[i];\n        }\n    }\n    return even_product * odd_product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "tmpbu903lmw: /tmp/tmpbu903lmw.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_mul = 1;\n    long odd_mul = 1;\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_mul *= list1[i];\n            even_count++;\n        }\n        else {\n            odd_mul *= list1[i];\n            odd_count++;\n        }\n        if (even_count == 2 || odd_count == 2) {\n            break;\n        }\n    }\n    return even_mul * odd_mul;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "tmpvisc1tbu: /tmp/tmpvisc1tbu.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_product = 1;\n    long odd_product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_product = even_product * list1[i];\n        }\n        else {\n            odd_product = odd_product * list1[i];\n        }\n    }\n    return even_product * odd_product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "tmpqetapvwa: /tmp/tmpqetapvwa.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_mul = 1;\n    long odd_mul = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_mul *= list1[i];\n        }\n        else {\n            odd_mul *= list1[i];\n        }\n    }\n    return even_mul * odd_mul;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "tmp_4qjy8u0: /tmp/tmp_4qjy8u0.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_num = 1;\n    long odd_num = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            break;\n        }\n    }\n    return even_num * odd_num;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n  long even = 1;\n  long odd = 1;\n  for (int i = 0; i < list1.size(); i++) {\n    if (list1[i] % 2 == 0) {\n      even *= list1[i];\n      break;\n    }\n  }\n  for (int i = 0; i < list1.size(); i++) {\n    if (list1[i] % 2 != 0) {\n      odd *= list1[i];\n      break;\n    }\n  }\n  return even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even = 1;\n    long odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd = list1[i];\n            break;\n        }\n    }\n    return even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even = 1;\n    long odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even *= list1[i];\n        } else {\n            odd *= list1[i];\n        }\n    }\n    return even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "tmp31lc0s21: /tmp/tmp31lc0s21.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even = 1;\n    long odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd = list1[i];\n            break;\n        }\n    }\n    return even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even = 1;\n    long odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd = list1[i];\n            break;\n        }\n    }\n    return even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n  long even = 1;\n  long odd = 1;\n  for (int i = 0; i < list1.size(); i++) {\n    if (list1[i] % 2 == 0) {\n      even *= list1[i];\n      break;\n    }\n  }\n  for (int i = 0; i < list1.size(); i++) {\n    if (list1[i] % 2 != 0) {\n      odd *= list1[i];\n      break;\n    }\n  }\n  return even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_prod = 1;\n    long odd_prod = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_prod *= list1[i];\n        } else {\n            odd_prod *= list1[i];\n        }\n    }\n    return even_prod * odd_prod;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "tmpwx8l2_0h: /tmp/tmpwx8l2_0h.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    int even_index = 0;\n    int odd_index = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_index = i;\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd_index = i;\n            break;\n        }\n    }\n    return list1[even_index] * list1[odd_index];\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    int i;\n    long even = 1;\n    long odd = 1;\n    for(i = 0; i < list1.size(); i++) {\n        if(list1[i] % 2 == 0) {\n            even = list1[i];\n            break;\n        }\n    }\n    for(i = 0; i < list1.size(); i++) {\n        if(list1[i] % 2 != 0) {\n            odd = list1[i];\n            break;\n        }\n    }\n    return even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n\tlong even = 1;\n\tlong odd = 1;\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tif (list1[i] % 2 == 0) {\n\t\t\teven = list1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tif (list1[i] % 2 != 0) {\n\t\t\todd = list1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_product = 1;\n    long odd_product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_product *= list1[i];\n        } else {\n            odd_product *= list1[i];\n        }\n    }\n    return even_product * odd_product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "tmpbu903lmw: /tmp/tmpbu903lmw.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even = 1, odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even *= list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd *= list1[i];\n            break;\n        }\n    }\n    return even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even = 1;\n    long odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even *= list1[i];\n        } else {\n            odd *= list1[i];\n        }\n    }\n    return even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "tmp31lc0s21: /tmp/tmp31lc0s21.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even = 1, odd = 1;\n    for (long i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even = even * list1[i];\n            break;\n        }\n    }\n    for (long i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd = odd * list1[i];\n            break;\n        }\n    }\n    return even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_num = 1;\n    long odd_num = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            break;\n        }\n    }\n    return even_num * odd_num;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n  long even_num = 1;\n  long odd_num = 1;\n  for(int i = 0; i < list1.size(); i++) {\n    if(list1[i] % 2 == 0) {\n      even_num = list1[i];\n      break;\n    }\n  }\n  for(int i = 0; i < list1.size(); i++) {\n    if(list1[i] % 2 != 0) {\n      odd_num = list1[i];\n      break;\n    }\n  }\n  return even_num * odd_num;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_num = 1, odd_num = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_num *= list1[i];\n        }\n        else {\n            odd_num *= list1[i];\n        }\n    }\n    return even_num * odd_num;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "tmpk6qkdiee: /tmp/tmpk6qkdiee.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n\tlong even = 1, odd = 1;\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tif (list1[i] % 2 == 0) {\n\t\t\teven *= list1[i];\n\t\t}\n\t\telse {\n\t\t\todd *= list1[i];\n\t\t}\n\t}\n\treturn even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "tmpt_lwntbp: /tmp/tmpt_lwntbp.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n  long even_product = 1;\n  long odd_product = 1;\n  int even_count = 0;\n  int odd_count = 0;\n  for (int i = 0; i < list1.size(); i++) {\n    if (list1[i] % 2 == 0) {\n      if (even_count == 0) {\n        even_product = list1[i];\n        even_count++;\n      }\n    } else {\n      if (odd_count == 0) {\n        odd_product = list1[i];\n        odd_count++;\n      }\n    }\n  }\n  return even_product * odd_product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even = 1, odd = 1;\n    for (long i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even *= list1[i];\n        } else {\n            odd *= list1[i];\n        }\n    }\n    return even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "tmp250d2jbs: /tmp/tmp250d2jbs.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_product = 1;\n    long odd_product = 1;\n    int even_count = 0;\n    int odd_count = 0;\n    for(int i = 0; i < list1.size(); i++) {\n        if(list1[i] % 2 == 0 && even_count == 0) {\n            even_product *= list1[i];\n            even_count++;\n        }\n        else if(list1[i] % 2 != 0 && odd_count == 0) {\n            odd_product *= list1[i];\n            odd_count++;\n        }\n        else if(even_count == 1 && odd_count == 1) {\n            break;\n        }\n    }\n    return even_product * odd_product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n\tint even = 0;\n\tint odd = 0;\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tif (list1[i] % 2 == 0) {\n\t\t\teven = list1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tif (list1[i] % 2 != 0) {\n\t\t\todd = list1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even = 1, odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even *= list1[i];\n        } else {\n            odd *= list1[i];\n        }\n    }\n    return even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "tmpx03covo1: /tmp/tmpx03covo1.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even = 1;\n    long odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even *= list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd *= list1[i];\n            break;\n        }\n    }\n    return even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    int even = 0, odd = 0;\n    long product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            if (even == 0) {\n                product *= list1[i];\n                even++;\n            }\n        }\n        else {\n            if (odd == 0) {\n                product *= list1[i];\n                odd++;\n            }\n        }\n    }\n    return product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_product = 1;\n    long odd_product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_product *= list1[i];\n        } else {\n            odd_product *= list1[i];\n        }\n    }\n    return even_product * odd_product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "tmpbu903lmw: /tmp/tmpbu903lmw.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n\tlong even_product = 1;\n\tlong odd_product = 1;\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tif (i % 2 == 0) {\n\t\t\teven_product *= list1[i];\n\t\t}\n\t\telse {\n\t\t\todd_product *= list1[i];\n\t\t}\n\t}\n\treturn even_product * odd_product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "tmpidufj0vd: /tmp/tmpidufj0vd.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_prod = 1;\n    long odd_prod = 1;\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            if (even_count == 0) {\n                even_prod *= list1[i];\n                even_count++;\n            }\n        }\n        else {\n            if (odd_count == 0) {\n                odd_prod *= list1[i];\n                odd_count++;\n            }\n        }\n    }\n    return even_prod * odd_prod;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even = 1;\n    long odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd = list1[i];\n            break;\n        }\n    }\n    return even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n  long even_product = 1;\n  long odd_product = 1;\n  for (int i = 0; i < list1.size(); i++) {\n    if (list1[i] % 2 == 0) {\n      even_product *= list1[i];\n    }\n    else {\n      odd_product *= list1[i];\n    }\n  }\n  return even_product * odd_product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "tmp67koa_a9: /tmp/tmp67koa_a9.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_product = 1;\n    long odd_product = 1;\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_product *= list1[i];\n            even_count += 1;\n        }\n        else {\n            odd_product *= list1[i];\n            odd_count += 1;\n        }\n        if (even_count == 2 || odd_count == 2) {\n            break;\n        }\n    }\n    if (even_count == 2 && odd_count == 2) {\n        return even_product * odd_product;\n    }\n    else if (even_count == 2) {\n        return even_product;\n    }\n    else if (odd_count == 2) {\n        return odd_product;\n    }\n    else {\n        return 0;\n    }\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "tmp_flxtsgw: /tmp/tmp_flxtsgw.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even = 1;\n    long odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even = even * list1[i];\n        }\n        else {\n            odd = odd * list1[i];\n        }\n    }\n    return even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "tmpfyo51zpr: /tmp/tmpfyo51zpr.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n\tlong even = 1;\n\tlong odd = 1;\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tif (list1[i] % 2 == 0) {\n\t\t\teven *= list1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tif (list1[i] % 2 != 0) {\n\t\t\todd *= list1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_num = 1;\n    long odd_num = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            break;\n        }\n    }\n    return even_num * odd_num;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_product = 1;\n    long odd_product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_product = even_product * list1[i];\n        }\n        else {\n            odd_product = odd_product * list1[i];\n        }\n    }\n    return even_product * odd_product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "tmpqetapvwa: /tmp/tmpqetapvwa.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even = 1;\n    long odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even *= list1[i];\n        } else {\n            odd *= list1[i];\n        }\n    }\n    return even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "tmp31lc0s21: /tmp/tmp31lc0s21.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long product = 1;\n    int count = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            product *= list1[i];\n            count++;\n        }\n        if (count == 2) {\n            break;\n        }\n    }\n    count = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            product *= list1[i];\n            count++;\n        }\n        if (count == 2) {\n            break;\n        }\n    }\n    return product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "tmpwkbgv0a_: /tmp/tmpwkbgv0a_.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_product = 1;\n    long odd_product = 1;\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_product *= list1[i];\n            even_count++;\n        }\n        else {\n            odd_product *= list1[i];\n            odd_count++;\n        }\n        if (even_count == 2 || odd_count == 2) {\n            break;\n        }\n    }\n    return even_product * odd_product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "tmpcxoehwdf: /tmp/tmpcxoehwdf.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long product = 1;\n    int flag = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            if (flag == 0) {\n                product = list1[i];\n                flag = 1;\n            }\n            else {\n                product *= list1[i];\n            }\n        }\n        else {\n            if (flag == 1) {\n                product *= list1[i];\n                break;\n            }\n        }\n    }\n    return product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "tmpu6k00otb: /tmp/tmpu6k00otb.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n  long even_product = 1;\n  long odd_product = 1;\n  for (int i = 0; i < list1.size(); i++) {\n    if (i % 2 == 0) {\n      even_product *= list1[i];\n    } else {\n      odd_product *= list1[i];\n    }\n  }\n  return even_product * odd_product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "tmpsx7ijcq5: /tmp/tmpsx7ijcq5.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n  long even_product = 1;\n  long odd_product = 1;\n  for (int i = 0; i < list1.size(); i++) {\n    if (list1[i] % 2 == 0) {\n      even_product = even_product * list1[i];\n    }\n    else {\n      odd_product = odd_product * list1[i];\n    }\n  }\n  return even_product * odd_product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "tmpoe0zipt6: /tmp/tmpoe0zipt6.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_num = 1;\n    long odd_num = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            break;\n        }\n    }\n    return even_num * odd_num;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_product = 1;\n    long odd_product = 1;\n    int count_even = 0;\n    int count_odd = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            if (count_even == 0) {\n                even_product = even_product * list1[i];\n                count_even++;\n            }\n        }\n        else {\n            if (count_odd == 0) {\n                odd_product = odd_product * list1[i];\n                count_odd++;\n            }\n        }\n    }\n    return even_product * odd_product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    int even = 0;\n    int odd = 0;\n    long product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even++;\n            if (even == 1) {\n                product *= list1[i];\n            }\n        } else {\n            odd++;\n            if (odd == 1) {\n                product *= list1[i];\n            }\n        }\n    }\n    return product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even=1,odd=1;\n    for(int i=0;i<list1.size();i++)\n    {\n        if(list1[i]%2==0)\n        {\n            even*=list1[i];\n            break;\n        }\n    }\n    for(int i=0;i<list1.size();i++)\n    {\n        if(list1[i]%2!=0)\n        {\n            odd*=list1[i];\n            break;\n        }\n    }\n    return even*odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_mul = 1;\n    long odd_mul = 1;\n    for(int i=0;i<list1.size();i++) {\n        if(i%2 == 0) {\n            even_mul *= list1[i];\n        }\n        else {\n            odd_mul *= list1[i];\n        }\n    }\n    return even_mul * odd_mul;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "tmpg50a4rkv: /tmp/tmpg50a4rkv.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even=1,odd=1;\n    for(int i=0;i<list1.size();i++){\n        if(i%2==0){\n            even=even*list1[i];\n        }\n        else{\n            odd=odd*list1[i];\n        }\n    }\n    return even*odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "tmp7c979osx: /tmp/tmp7c979osx.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n\tlong even = 1;\n\tlong odd = 1;\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tif (list1[i] % 2 == 0) {\n\t\t\teven = even * list1[i];\n\t\t}\n\t\telse {\n\t\t\todd = odd * list1[i];\n\t\t}\n\t}\n\treturn even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "tmpwx9eaxws: /tmp/tmpwx9eaxws.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long product = 1;\n    int even = 0;\n    int odd = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0 && even == 0) {\n            product = product * list1[i];\n            even++;\n        }\n        else if (list1[i] % 2 != 0 && odd == 0) {\n            product = product * list1[i];\n            odd++;\n        }\n        else if (even == 1 && odd == 1) {\n            break;\n        }\n    }\n    return product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_num = 1;\n    long odd_num = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            break;\n        }\n    }\n    return even_num * odd_num;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even = 1;\n    long odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd = list1[i];\n            break;\n        }\n    }\n    return even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n  long even_product = 1;\n  long odd_product = 1;\n  int even_count = 0;\n  int odd_count = 0;\n  for (int i = 0; i < list1.size(); i++) {\n    if (list1[i] % 2 == 0) {\n      if (even_count == 0) {\n        even_product = list1[i];\n        even_count++;\n      }\n    }\n    else {\n      if (odd_count == 0) {\n        odd_product = list1[i];\n        odd_count++;\n      }\n    }\n  }\n  return even_product * odd_product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_product = 1;\n    long odd_product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_product *= list1[i];\n        } else {\n            odd_product *= list1[i];\n        }\n    }\n    return even_product * odd_product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "tmpbu903lmw: /tmp/tmpbu903lmw.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    int even_count = 0;\n    int odd_count = 0;\n    long even_product = 1;\n    long odd_product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_count++;\n            if (even_count == 1) {\n                even_product = list1[i];\n            }\n        }\n        else {\n            odd_count++;\n            if (odd_count == 1) {\n                odd_product = list1[i];\n            }\n        }\n        if (even_count == 1 && odd_count == 1) {\n            break;\n        }\n    }\n    if (even_count == 0 || odd_count == 0) {\n        return 0;\n    }\n    else {\n        return even_product * odd_product;\n    }\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_product = 1;\n    long odd_product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_product *= list1[i];\n        } else {\n            odd_product *= list1[i];\n        }\n    }\n    return even_product * odd_product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "tmpbu903lmw: /tmp/tmpbu903lmw.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even=1,odd=1;\n    for(int i=0;i<list1.size();i++){\n        if(i%2==0){\n            even=even*list1[i];\n        }\n        else{\n            odd=odd*list1[i];\n        }\n    }\n    return even*odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "tmp7c979osx: /tmp/tmp7c979osx.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even = 1;\n    long odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even *= list1[i];\n        } else {\n            odd *= list1[i];\n        }\n    }\n    return even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "tmp31lc0s21: /tmp/tmp31lc0s21.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n\tlong even,odd;\n\tfor(int i=0;i<list1.size();i++)\n\t{\n\t\tif(list1[i]%2==0)\n\t\t{\n\t\t\teven=list1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor(int i=list1.size()-1;i>=0;i--)\n\t{\n\t\tif(list1[i]%2!=0)\n\t\t{\n\t\t\todd=list1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn even*odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "tmpezxdkrwn: /tmp/tmpezxdkrwn.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_num = 1;\n    long odd_num = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            break;\n        }\n    }\n    return even_num * odd_num;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_num = 1;\n    long odd_num = 1;\n    for(int i = 0; i < list1.size(); i++) {\n        if(list1[i] % 2 == 0) {\n            even_num = even_num * list1[i];\n        }\n        else {\n            odd_num = odd_num * list1[i];\n        }\n    }\n    return even_num * odd_num;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "tmpmkaafr4b: /tmp/tmpmkaafr4b.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    int even_count = 0;\n    int odd_count = 0;\n    long even_product = 1;\n    long odd_product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_count++;\n            if (even_count == 1) {\n                even_product = list1[i];\n            }\n        }\n        else {\n            odd_count++;\n            if (odd_count == 1) {\n                odd_product = list1[i];\n            }\n        }\n        if (even_count == 1 && odd_count == 1) {\n            break;\n        }\n    }\n    if (even_count == 0 || odd_count == 0) {\n        return 0;\n    }\n    else {\n        return even_product * odd_product;\n    }\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    std::vector<long>::iterator it;\n    long even_num, odd_num;\n    int i = 0;\n    for (it = list1.begin(); it != list1.end(); it++) {\n        if (*it % 2 == 0) {\n            even_num = *it;\n            i++;\n            break;\n        }\n    }\n    for (it = list1.begin(); it != list1.end(); it++) {\n        if (*it % 2 != 0) {\n            odd_num = *it;\n            i++;\n            break;\n        }\n    }\n    if (i == 2) {\n        return even_num * odd_num;\n    }\n    else {\n        return 0;\n    }\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long product = 1;\n    int i = 0;\n    while(i < list1.size()) {\n        if(list1[i] % 2 == 0) {\n            product *= list1[i];\n            break;\n        }\n        i++;\n    }\n    i = 0;\n    while(i < list1.size()) {\n        if(list1[i] % 2 != 0) {\n            product *= list1[i];\n            break;\n        }\n        i++;\n    }\n    return product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n  long even = 1;\n  long odd = 1;\n  for (int i = 0; i < list1.size(); i++) {\n    if (i % 2 == 0) {\n      even *= list1[i];\n    } else {\n      odd *= list1[i];\n    }\n  }\n  return even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "tmph9_9ckkb: /tmp/tmph9_9ckkb.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even = 1;\n    long odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even *= list1[i];\n        } else {\n            odd *= list1[i];\n        }\n    }\n    return even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "tmp31lc0s21: /tmp/tmp31lc0s21.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even = 1;\n    long odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even *= list1[i];\n        } else {\n            odd *= list1[i];\n        }\n    }\n    return even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp__a4go58: /tmp/tmp__a4go58.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_num = 1;\n    long odd_num = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            break;\n        }\n    }\n    return even_num * odd_num;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    int even_count = 0;\n    int odd_count = 0;\n    long even_num = 0;\n    long odd_num = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            if (even_count == 0) {\n                even_num = list1[i];\n                even_count++;\n            }\n        }\n        else {\n            if (odd_count == 0) {\n                odd_num = list1[i];\n                odd_count++;\n            }\n        }\n    }\n    if (even_count == 0 || odd_count == 0) {\n        return 0;\n    }\n    else {\n        return even_num * odd_num;\n    }\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_product = 1;\n    long odd_product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_product *= list1[i];\n        } else {\n            odd_product *= list1[i];\n        }\n    }\n    return even_product * odd_product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "tmpbu903lmw: /tmp/tmpbu903lmw.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n\tlong even_mul = 1;\n\tlong odd_mul = 1;\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tif (i % 2 == 0) {\n\t\t\teven_mul = even_mul * list1[i];\n\t\t}\n\t\telse {\n\t\t\todd_mul = odd_mul * list1[i];\n\t\t}\n\t}\n\treturn even_mul * odd_mul;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp5gjhamw9: /tmp/tmp5gjhamw9.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_num = 0;\n    long odd_num = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            break;\n        }\n    }\n    return even_num * odd_num;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_product = 1;\n    long odd_product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_product *= list1[i];\n        }\n        else {\n            odd_product *= list1[i];\n        }\n    }\n    return even_product * odd_product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmpjdpmza06: /tmp/tmpjdpmza06.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n  long even_product = 1;\n  long odd_product = 1;\n  for (int i = 0; i < list1.size(); i++) {\n    if (list1[i] % 2 == 0) {\n      even_product *= list1[i];\n    }\n    else {\n      odd_product *= list1[i];\n    }\n  }\n  return even_product * odd_product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "tmp67koa_a9: /tmp/tmp67koa_a9.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_product = 1;\n    long odd_product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_product *= list1[i];\n        }\n        else {\n            odd_product *= list1[i];\n        }\n    }\n    return even_product * odd_product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmpjdpmza06: /tmp/tmpjdpmza06.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_product = 1;\n    long odd_product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_product *= list1[i];\n        } else {\n            odd_product *= list1[i];\n        }\n    }\n    return even_product * odd_product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "tmpbu903lmw: /tmp/tmpbu903lmw.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_num = 1;\n    long odd_num = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            break;\n        }\n    }\n    return even_num * odd_num;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_product = 1;\n    long odd_product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_product *= list1[i];\n        } else {\n            odd_product *= list1[i];\n        }\n    }\n    return even_product * odd_product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "tmpbu903lmw: /tmp/tmpbu903lmw.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n\tlong even = 1;\n\tlong odd = 1;\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tif (list1[i] % 2 == 0) {\n\t\t\teven = even * list1[i];\n\t\t}\n\t\telse {\n\t\t\todd = odd * list1[i];\n\t\t}\n\t}\n\treturn even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "tmpwx9eaxws: /tmp/tmpwx9eaxws.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_num = 1;\n    long odd_num = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            break;\n        }\n    }\n    return even_num * odd_num;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n\tlong even_product = 1;\n\tlong odd_product = 1;\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tif (i % 2 == 0) {\n\t\t\teven_product *= list1[i];\n\t\t}\n\t\telse {\n\t\t\todd_product *= list1[i];\n\t\t}\n\t}\n\treturn even_product * odd_product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "tmpidufj0vd: /tmp/tmpidufj0vd.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_product = 1;\n    long odd_product = 1;\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_product *= list1[i];\n            even_count++;\n            if (even_count == 2) {\n                break;\n            }\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd_product *= list1[i];\n            odd_count++;\n            if (odd_count == 2) {\n                break;\n            }\n        }\n    }\n    return even_product * odd_product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmpdbf13wus: /tmp/tmpdbf13wus.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_product = 1;\n    long odd_product = 1;\n    for (long i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_product *= list1[i];\n        } else {\n            odd_product *= list1[i];\n        }\n    }\n    return even_product * odd_product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmpbrtnkfh4: /tmp/tmpbrtnkfh4.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even = 1;\n    long odd = 1;\n    for (long i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even = list1[i];\n            break;\n        }\n    }\n    for (long i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd = list1[i];\n            break;\n        }\n    }\n    return even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_num = 1;\n    long odd_num = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            break;\n        }\n    }\n    return even_num * odd_num;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_product = 1;\n    long odd_product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_product *= list1[i];\n        } else {\n            odd_product *= list1[i];\n        }\n    }\n    return even_product * odd_product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "tmpbu903lmw: /tmp/tmpbu903lmw.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n\tint even = 0;\n\tint odd = 0;\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tif (list1[i] % 2 == 0) {\n\t\t\teven = list1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tif (list1[i] % 2 != 0) {\n\t\t\todd = list1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n\tlong even_product = 1;\n\tlong odd_product = 1;\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tif (i % 2 == 0) {\n\t\t\teven_product *= list1[i];\n\t\t}\n\t\telse {\n\t\t\todd_product *= list1[i];\n\t\t}\n\t}\n\treturn even_product * odd_product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "tmpidufj0vd: /tmp/tmpidufj0vd.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_product = 1;\n    long odd_product = 1;\n    for(int i = 0; i < list1.size(); i++) {\n        if(list1[i] % 2 == 0) {\n            even_product *= list1[i];\n        }\n        else {\n            odd_product *= list1[i];\n        }\n    }\n    return even_product * odd_product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp7ghhmsci: /tmp/tmp7ghhmsci.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_product = 1;\n    long odd_product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_product = even_product * list1[i];\n        } else {\n            odd_product = odd_product * list1[i];\n        }\n    }\n    return even_product * odd_product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "tmpiiic63r6: /tmp/tmpiiic63r6.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n  long even = 1;\n  long odd = 1;\n  int i = 0;\n  while (i < list1.size()) {\n    if (i % 2 == 0) {\n      even = even * list1[i];\n    } else {\n      odd = odd * list1[i];\n    }\n    i++;\n  }\n  return even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmpymde4m1v: /tmp/tmpymde4m1v.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n\tint even_count = 0;\n\tint odd_count = 0;\n\tlong even_num = 1;\n\tlong odd_num = 1;\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tif (list1[i] % 2 == 0) {\n\t\t\tif (even_count == 0) {\n\t\t\t\teven_num = list1[i];\n\t\t\t\teven_count++;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (odd_count == 0) {\n\t\t\t\todd_num = list1[i];\n\t\t\t\todd_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn even_num * odd_num;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n\tint i=0;\n\tint j=0;\n\tlong product;\n\twhile(i<list1.size() && j<list1.size()) {\n\t\tif(list1[i]%2==0) {\n\t\t\tproduct=list1[i];\n\t\t\ti++;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\twhile(i<list1.size() && j<list1.size()) {\n\t\tif(list1[j]%2!=0) {\n\t\t\tproduct*=list1[j];\n\t\t\tj++;\n\t\t\tbreak;\n\t\t}\n\t\tj++;\n\t}\n\treturn product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even = 1;\n    long odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even *= list1[i];\n        } else {\n            odd *= list1[i];\n        }\n    }\n    return even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "tmp31lc0s21: /tmp/tmp31lc0s21.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_product = 1;\n    long odd_product = 1;\n    int even_count = 0;\n    int odd_count = 0;\n    for(int i = 0; i < list1.size(); i++) {\n        if(list1[i] % 2 == 0) {\n            if(even_count == 0) {\n                even_product = list1[i];\n                even_count++;\n            }\n        }\n        else {\n            if(odd_count == 0) {\n                odd_product = list1[i];\n                odd_count++;\n            }\n        }\n    }\n    return even_product * odd_product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_product = 1;\n    long odd_product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_product *= list1[i];\n        } else {\n            odd_product *= list1[i];\n        }\n    }\n    return even_product * odd_product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "tmpbu903lmw: /tmp/tmpbu903lmw.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    int even = 0;\n    int odd = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd = list1[i];\n            break;\n        }\n    }\n    return even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_product = 1;\n    long odd_product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_product *= list1[i];\n        } else {\n            odd_product *= list1[i];\n        }\n    }\n    return even_product * odd_product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "tmpbu903lmw: /tmp/tmpbu903lmw.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n  int even_count = 0;\n  int odd_count = 0;\n  long even_num = 0;\n  long odd_num = 0;\n  for (int i = 0; i < list1.size(); i++) {\n    if (list1[i] % 2 == 0) {\n      even_count++;\n      if (even_count == 1) {\n        even_num = list1[i];\n      }\n    }\n    else {\n      odd_count++;\n      if (odd_count == 1) {\n        odd_num = list1[i];\n      }\n    }\n    if (even_count == 1 && odd_count == 1) {\n      break;\n    }\n  }\n  return even_num * odd_num;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_num = 1;\n    long odd_num = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            break;\n        }\n    }\n    return even_num * odd_num;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_product = 1;\n    long odd_product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_product *= list1[i];\n        } else {\n            odd_product *= list1[i];\n        }\n    }\n    return even_product * odd_product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "tmpbu903lmw: /tmp/tmpbu903lmw.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n  long even_product = 1;\n  long odd_product = 1;\n  for (int i = 0; i < list1.size(); i++) {\n    if (i % 2 == 0) {\n      even_product *= list1[i];\n    } else {\n      odd_product *= list1[i];\n    }\n  }\n  return even_product * odd_product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "tmpsx7ijcq5: /tmp/tmpsx7ijcq5.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n\tlong even_product = 1;\n\tlong odd_product = 1;\n\tint count = 0;\n\tfor (auto i = list1.begin(); i != list1.end(); i++) {\n\t\tif (count == 0) {\n\t\t\teven_product *= *i;\n\t\t\tcount++;\n\t\t}\n\t\telse if (count == 1) {\n\t\t\todd_product *= *i;\n\t\t\tcount--;\n\t\t}\n\t}\n\treturn even_product * odd_product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp5nwo8ggj: /tmp/tmp5nwo8ggj.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n  long even = 1;\n  long odd = 1;\n  for (int i = 0; i < list1.size(); i++) {\n    if (list1[i] % 2 == 0) {\n      even = list1[i];\n      break;\n    }\n  }\n  for (int i = 0; i < list1.size(); i++) {\n    if (list1[i] % 2 != 0) {\n      odd = list1[i];\n      break;\n    }\n  }\n  return even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_num = 1;\n    long odd_num = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            break;\n        }\n    }\n    return even_num * odd_num;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even = 0, odd = 0;\n    for(int i = 0; i < list1.size(); i++) {\n        if(list1[i] % 2 == 0) {\n            even = list1[i];\n            break;\n        }\n    }\n    for(int i = 0; i < list1.size(); i++) {\n        if(list1[i] % 2 != 0) {\n            odd = list1[i];\n            break;\n        }\n    }\n    return even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n  long even = 1;\n  long odd = 1;\n  for (int i = 0; i < list1.size(); i++) {\n    if (i % 2 == 0) {\n      even = even * list1[i];\n    } else {\n      odd = odd * list1[i];\n    }\n  }\n  return even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp5ck4hzm8: /tmp/tmp5ck4hzm8.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n\tint even = 0, odd = 0;\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tif (list1[i] % 2 == 0) {\n\t\t\teven = list1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tif (list1[i] % 2 != 0) {\n\t\t\todd = list1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n\tlong prod = 1;\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tif (i % 2 == 0) {\n\t\t\tprod = prod * list1[i];\n\t\t}\n\t}\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tif (i % 2 != 0) {\n\t\t\tprod = prod * list1[i];\n\t\t}\n\t}\n\treturn prod;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmpxn6mffkv: /tmp/tmpxn6mffkv.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n  long even = 1;\n  long odd = 1;\n  for (int i = 0; i < list1.size(); i++) {\n    if (i % 2 == 0) {\n      even *= list1[i];\n    } else {\n      odd *= list1[i];\n    }\n  }\n  return even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "tmph9_9ckkb: /tmp/tmph9_9ckkb.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_mul = 1;\n    long odd_mul = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_mul *= list1[i];\n        }\n        else {\n            odd_mul *= list1[i];\n        }\n    }\n    return even_mul * odd_mul;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "tmp_kkk28dx: /tmp/tmp_kkk28dx.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_product = 1;\n    long odd_product = 1;\n    int i = 0;\n    int j = 0;\n    while(i < list1.size() && j < list1.size()) {\n        if(list1[i] % 2 == 0) {\n            even_product *= list1[i];\n            i++;\n        }\n        if(list1[j] % 2 != 0) {\n            odd_product *= list1[j];\n            j++;\n        }\n    }\n    return even_product * odd_product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122853,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_product = 1;\n    long odd_product = 1;\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_count++;\n            if (even_count == 1) {\n                even_product *= list1[i];\n            }\n        }\n        else {\n            odd_count++;\n            if (odd_count == 1) {\n                odd_product *= list1[i];\n            }\n        }\n    }\n    return even_product * odd_product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even = 1, odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even *= list1[i];\n        } else {\n            odd *= list1[i];\n        }\n    }\n    return even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "tmpx03covo1: /tmp/tmpx03covo1.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even = 1;\n    long odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even *= list1[i];\n        } else {\n            odd *= list1[i];\n        }\n    }\n    return even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "tmp31lc0s21: /tmp/tmp31lc0s21.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n\tlong even_num = 1;\n\tlong odd_num = 1;\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tif (list1[i] % 2 == 0) {\n\t\t\teven_num = list1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tif (list1[i] % 2 != 0) {\n\t\t\todd_num = list1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn even_num * odd_num;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n\tlong even_mul = 1;\n\tlong odd_mul = 1;\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tif (i % 2 == 0) {\n\t\t\teven_mul = even_mul * list1[i];\n\t\t}\n\t\telse {\n\t\t\todd_mul = odd_mul * list1[i];\n\t\t}\n\t}\n\treturn even_mul * odd_mul;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp5gjhamw9: /tmp/tmp5gjhamw9.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_mul = 1;\n    long odd_mul = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_mul *= list1[i];\n        }\n        else {\n            odd_mul *= list1[i];\n        }\n    }\n    return even_mul * odd_mul;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "tmp_kkk28dx: /tmp/tmp_kkk28dx.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even = 1;\n    long odd = 1;\n    for(int i = 0; i < list1.size(); i++) {\n        if(i % 2 == 0) {\n            even *= list1[i];\n        } else {\n            odd *= list1[i];\n        }\n    }\n    return even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "tmp_nk7fyrw: /tmp/tmp_nk7fyrw.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even = 1, odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even = even * list1[i];\n        } else {\n            odd = odd * list1[i];\n        }\n    }\n    return even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "tmpx3_5etrn: /tmp/tmpx3_5etrn.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_product = 1;\n    long odd_product = 1;\n    int i = 0;\n    while (i < list1.size()) {\n        if (i % 2 == 0) {\n            even_product *= list1[i];\n        }\n        else {\n            odd_product *= list1[i];\n        }\n        i++;\n    }\n    return even_product * odd_product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "tmp3u_o8lkw: /tmp/tmp3u_o8lkw.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n\tlong even_product = 1;\n\tlong odd_product = 1;\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tif (i % 2 == 0) {\n\t\t\teven_product *= list1[i];\n\t\t}\n\t\telse {\n\t\t\todd_product *= list1[i];\n\t\t}\n\t}\n\treturn even_product * odd_product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "tmpidufj0vd: /tmp/tmpidufj0vd.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_mul = 1;\n    long odd_mul = 1;\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_mul *= list1[i];\n            even_count++;\n            if (even_count == 2) {\n                break;\n            }\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd_mul *= list1[i];\n            odd_count++;\n            if (odd_count == 2) {\n                break;\n            }\n        }\n    }\n    return even_mul * odd_mul;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "tmpkn3l6niw: /tmp/tmpkn3l6niw.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    int even_index = 0;\n    int odd_index = 0;\n    for(int i = 0; i < list1.size(); i++) {\n        if(list1[i] % 2 == 0) {\n            even_index = i;\n            break;\n        }\n    }\n    for(int i = 0; i < list1.size(); i++) {\n        if(list1[i] % 2 != 0) {\n            odd_index = i;\n            break;\n        }\n    }\n    return list1[even_index] * list1[odd_index];\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_num = 1;\n    long odd_num = 1;\n    for(int i = 0; i < list1.size(); i++) {\n        if(list1[i] % 2 == 0) {\n            even_num = list1[i];\n            break;\n        }\n    }\n    for(int i = 0; i < list1.size(); i++) {\n        if(list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            break;\n        }\n    }\n    return even_num * odd_num;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n\tlong even_product = 1;\n\tlong odd_product = 1;\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tif (i % 2 == 0) {\n\t\t\teven_product *= list1[i];\n\t\t}\n\t\telse {\n\t\t\todd_product *= list1[i];\n\t\t}\n\t}\n\treturn even_product * odd_product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "tmpidufj0vd: /tmp/tmpidufj0vd.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n  long even_product = 1;\n  long odd_product = 1;\n  for (int i = 0; i < list1.size(); i++) {\n    if (i % 2 == 0) {\n      even_product *= list1[i];\n    } else {\n      odd_product *= list1[i];\n    }\n  }\n  return even_product * odd_product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "tmpsx7ijcq5: /tmp/tmpsx7ijcq5.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_num = 1;\n    long odd_num = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            break;\n        }\n    }\n    return even_num * odd_num;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even = 1;\n    long odd = 1;\n    for(int i = 0; i < list1.size(); i++) {\n        if(i % 2 == 0) {\n            even *= list1[i];\n        } else {\n            odd *= list1[i];\n        }\n    }\n    return even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "tmp_nk7fyrw: /tmp/tmp_nk7fyrw.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n  int even_count = 0;\n  int odd_count = 0;\n  long even_num = 0;\n  long odd_num = 0;\n  for (int i = 0; i < list1.size(); i++) {\n    if (list1[i] % 2 == 0) {\n      if (even_count == 0) {\n        even_num = list1[i];\n        even_count++;\n      }\n    }\n    else {\n      if (odd_count == 0) {\n        odd_num = list1[i];\n        odd_count++;\n      }\n    }\n  }\n  return even_num * odd_num;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even = 1;\n    long odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even *= list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd *= list1[i];\n            break;\n        }\n    }\n    return even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_product = 1;\n    long odd_product = 1;\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_product *= list1[i];\n            even_count++;\n        }\n        else {\n            odd_product *= list1[i];\n            odd_count++;\n        }\n        if (even_count == 2 || odd_count == 2) {\n            break;\n        }\n    }\n    return even_product * odd_product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "tmpcxoehwdf: /tmp/tmpcxoehwdf.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    int even = 0;\n    int odd = 0;\n    int i = 0;\n    while (even == 0 || odd == 0) {\n        if (list1[i] % 2 == 0) {\n            even = list1[i];\n        }\n        else {\n            odd = list1[i];\n        }\n        i++;\n    }\n    return even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "tmpp_r70zuq: /tmp/tmpp_r70zuq.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_num = 1;\n    long odd_num = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_num *= list1[i];\n        } else {\n            odd_num *= list1[i];\n        }\n    }\n    return even_num * odd_num;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "tmpvfc72tiz: /tmp/tmpvfc72tiz.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even = 1;\n    long odd = 1;\n    for(int i = 0; i < list1.size(); i++) {\n        if(list1[i] % 2 == 0) {\n            even *= list1[i];\n            break;\n        }\n    }\n    for(int i = 0; i < list1.size(); i++) {\n        if(list1[i] % 2 != 0) {\n            odd *= list1[i];\n            break;\n        }\n    }\n    return even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n  int even = 0, odd = 0;\n  for (int i = 0; i < list1.size(); i++) {\n    if (list1[i] % 2 == 0) {\n      even = list1[i];\n      break;\n    }\n  }\n  for (int i = 0; i < list1.size(); i++) {\n    if (list1[i] % 2 != 0) {\n      odd = list1[i];\n      break;\n    }\n  }\n  return even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_product = 1;\n    long odd_product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_product *= list1[i];\n        }\n        else {\n            odd_product *= list1[i];\n        }\n    }\n    return even_product * odd_product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmpjdpmza06: /tmp/tmpjdpmza06.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n\tlong even = 1;\n\tlong odd = 1;\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tif (list1[i] % 2 == 0) {\n\t\t\teven *= list1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tif (list1[i] % 2 != 0) {\n\t\t\todd *= list1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even = 1;\n    long odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even = even * list1[i];\n        } else {\n            odd = odd * list1[i];\n        }\n    }\n    return even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "tmp6tx_ycvq: /tmp/tmp6tx_ycvq.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_num = 1;\n    long odd_num = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            break;\n        }\n    }\n    return even_num * odd_num;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n  long even = 1;\n  long odd = 1;\n  int i = 0;\n  while(i < list1.size()) {\n    if(list1[i] % 2 == 0) {\n      even = even * list1[i];\n      i++;\n    }\n    else {\n      odd = odd * list1[i];\n      i++;\n    }\n  }\n  return even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "tmp4kp2d08w: /tmp/tmp4kp2d08w.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_product = 1;\n    long odd_product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_product *= list1[i];\n        } else {\n            odd_product *= list1[i];\n        }\n    }\n    return even_product * odd_product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "tmpbu903lmw: /tmp/tmpbu903lmw.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n\tlong even = 1;\n\tlong odd = 1;\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tif (list1[i] % 2 == 0) {\n\t\t\teven = even * list1[i];\n\t\t}\n\t\telse {\n\t\t\todd = odd * list1[i];\n\t\t}\n\t}\n\treturn even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "tmpwx9eaxws: /tmp/tmpwx9eaxws.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_product = 1;\n    long odd_product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_product *= list1[i];\n        }\n        else {\n            odd_product *= list1[i];\n        }\n    }\n    return even_product * odd_product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmpjdpmza06: /tmp/tmpjdpmza06.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even = 1;\n    long odd = 1;\n    for(int i = 0; i < list1.size(); i++) {\n        if(i % 2 == 0) {\n            even *= list1[i];\n        }\n        else {\n            odd *= list1[i];\n        }\n    }\n    return even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "tmpc2t4nudx: /tmp/tmpc2t4nudx.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n\tlong even = 1;\n\tlong odd = 1;\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tif (i % 2 == 0) {\n\t\t\teven = even * list1[i];\n\t\t}\n\t\telse {\n\t\t\todd = odd * list1[i];\n\t\t}\n\t}\n\treturn even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "tmp92xwpzkh: /tmp/tmp92xwpzkh.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n\tint even = 0, odd = 0;\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tif (list1[i] % 2 == 0) {\n\t\t\teven = list1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tif (list1[i] % 2 != 0) {\n\t\t\todd = list1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_product = 1;\n    long odd_product = 1;\n    for(int i = 0; i < list1.size(); i++) {\n        if(i % 2 == 0) {\n            even_product *= list1[i];\n        } else {\n            odd_product *= list1[i];\n        }\n    }\n    return even_product * odd_product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "tmpf3uwuhdu: /tmp/tmpf3uwuhdu.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n  long even = 1, odd = 1;\n  for (int i = 0; i < list1.size(); i++) {\n    if (list1[i] % 2 == 0) {\n      even *= list1[i];\n    } else {\n      odd *= list1[i];\n    }\n  }\n  return even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "tmpsnu1ds_k: /tmp/tmpsnu1ds_k.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n  int even = 0;\n  int odd = 0;\n  for(int i = 0; i < list1.size(); i++) {\n    if(list1[i] % 2 == 0) {\n      even = list1[i];\n      break;\n    }\n  }\n  for(int i = 0; i < list1.size(); i++) {\n    if(list1[i] % 2 != 0) {\n      odd = list1[i];\n      break;\n    }\n  }\n  return even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even = 1;\n    long odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd = list1[i];\n            break;\n        }\n    }\n    return even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_product = 1;\n    long odd_product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_product *= list1[i];\n        } else {\n            odd_product *= list1[i];\n        }\n    }\n    return even_product * odd_product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "tmpbu903lmw: /tmp/tmpbu903lmw.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n\tlong even=1,odd=1;\n\tfor(int i=0;i<list1.size();i++)\n\t{\n\t\tif(i%2==0)\n\t\t\teven*=list1[i];\n\t\telse\n\t\t\todd*=list1[i];\n\t}\n\treturn even*odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "tmpqzg6orx1: /tmp/tmpqzg6orx1.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even,odd;\n    for(int i=0;i<list1.size();i++)\n    {\n        if(list1[i]%2==0)\n        {\n            even=list1[i];\n            break;\n        }\n    }\n    for(int i=0;i<list1.size();i++)\n    {\n        if(list1[i]%2!=0)\n        {\n            odd=list1[i];\n            break;\n        }\n    }\n    return even*odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n  long even_product = 1;\n  long odd_product = 1;\n  for (int i = 0; i < list1.size(); i++) {\n    if (i % 2 == 0) {\n      even_product *= list1[i];\n    } else {\n      odd_product *= list1[i];\n    }\n  }\n  return even_product * odd_product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122836,
      "stdout": "",
      "stderr": "tmpsx7ijcq5: /tmp/tmpsx7ijcq5.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n\tint i = 0;\n\tlong even = 1;\n\tlong odd = 1;\n\tfor (i = 0; i < list1.size(); i++) {\n\t\tif (list1[i] % 2 == 0) {\n\t\t\teven = list1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor (i = 0; i < list1.size(); i++) {\n\t\tif (list1[i] % 2 != 0) {\n\t\t\todd = list1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long product = 1;\n    int i = 0;\n    while (i < list1.size()) {\n        if (list1[i] % 2 == 0) {\n            product *= list1[i];\n            break;\n        }\n        i++;\n    }\n    i = 0;\n    while (i < list1.size()) {\n        if (list1[i] % 2 != 0) {\n            product *= list1[i];\n            break;\n        }\n        i++;\n    }\n    return product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n\tint even_count = 0;\n\tint odd_count = 0;\n\tlong even_product = 1;\n\tlong odd_product = 1;\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tif (list1[i] % 2 == 0) {\n\t\t\teven_count++;\n\t\t\tif (even_count == 1) {\n\t\t\t\teven_product = list1[i];\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\todd_count++;\n\t\t\tif (odd_count == 1) {\n\t\t\t\todd_product = list1[i];\n\t\t\t}\n\t\t}\n\t}\n\treturn even_product * odd_product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n\tint i = 0;\n\tlong even = 1;\n\tlong odd = 1;\n\twhile (i < list1.size()) {\n\t\tif (list1[i] % 2 == 0) {\n\t\t\teven = even * list1[i];\n\t\t\ti++;\n\t\t}\n\t\telse {\n\t\t\todd = odd * list1[i];\n\t\t\ti++;\n\t\t}\n\t}\n\treturn even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "tmpky3ndkwc: /tmp/tmpky3ndkwc.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even = 1, odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even = even * list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd = odd * list1[i];\n            break;\n        }\n    }\n    return even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_mul = 1;\n    long odd_mul = 1;\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_mul *= list1[i];\n            even_count++;\n        }\n        else {\n            odd_mul *= list1[i];\n            odd_count++;\n        }\n        if (even_count == 1 && odd_count == 1) {\n            break;\n        }\n    }\n    return even_mul * odd_mul;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "tmpnqm95h9u: /tmp/tmpnqm95h9u.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_num = 1;\n    long odd_num = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            break;\n        }\n    }\n    return even_num * odd_num;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even = 1;\n    long odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even *= list1[i];\n        }\n        else {\n            odd *= list1[i];\n        }\n    }\n    return even * odd;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "tmpd6ar3bkw: /tmp/tmpd6ar3bkw.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_num = 1;\n    long odd_num = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            break;\n        }\n    }\n    return even_num * odd_num;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n  long even_product = 1;\n  long odd_product = 1;\n  int count = 0;\n  for (auto i = list1.begin(); i != list1.end(); i++) {\n    if (count == 0) {\n      even_product = *i;\n      count++;\n    } else if (count == 1) {\n      odd_product = *i;\n      break;\n    }\n  }\n  return even_product * odd_product;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "tmplxhyky77: /tmp/tmplxhyky77.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_mul = 1;\n    long odd_mul = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_mul *= list1[i];\n        }\n        else {\n            odd_mul *= list1[i];\n        }\n    }\n    return even_mul * odd_mul;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122834,
      "stdout": "",
      "stderr": "tmp_kkk28dx: /tmp/tmp_kkk28dx.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given vector.\nlong mul_even_odd(std::vector<long> list1) {\n    long even_num = 1;\n    long odd_num = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_num *= list1[i];\n        } else {\n            odd_num *= list1[i];\n        }\n    }\n    return even_num * odd_num;\n}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "tmpvfc72tiz: /tmp/tmpvfc72tiz.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}