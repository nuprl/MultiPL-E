{
  "name": "mbpp_584_find_adverbs",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the first adverb ending with ly and its positions in a given string.\nstd::string find_adverbs(std::string text) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_584_find_adverbs.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = find_adverbs;\n    assert(candidate((\"Clearly, he has no excuse for such behavior.\")) == (\"0-7: Clearly\"));\n    assert(candidate((\"Please handle the situation carefuly\")) == (\"28-36: carefuly\"));\n    assert(candidate((\"Complete the task quickly\")) == (\"18-25: quickly\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::string result = \"\";\n    int pos = 0;\n    while(text.find(\"ly\", pos) != std::string::npos) {\n        pos = text.find(\"ly\", pos);\n        if(pos > 0 && text[pos - 1] != ' ') {\n            pos++;\n            continue;\n        }\n        result += std::to_string(pos) + \" \";\n        pos++;\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    std::string adverb = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] != ' ') {\n            word += text[i];\n        }\n        else {\n            if (word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n                adverb = word;\n                pos = i - word.length();\n                break;\n            }\n            word = \"\";\n        }\n    }\n    result = adverb + \" \" + std::to_string(pos);\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int i = 0;\n    while (i < text.size()) {\n        if (text[i] == ' ') {\n            if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n                result += word + \" \";\n            }\n            word = \"\";\n        } else {\n            word += text[i];\n        }\n        i++;\n    }\n    if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        result += word;\n    }\n    return result;",
    "  std::string result = \"\";\n  std::string word = \"\";\n  int position = 0;\n  for (int i = 0; i < text.size(); i++) {\n    if (text[i] != ' ') {\n      word += text[i];\n    } else {\n      if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        result += word + \" \";\n        result += std::to_string(position) + \" \";\n      }\n      word = \"\";\n      position = i + 1;\n    }\n  }\n  if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n    result += word + \" \";\n    result += std::to_string(position) + \" \";\n  }\n  return result;",
    "    std::string result = \"\";\n    std::string adverb = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            if (adverb.length() > 2 && adverb.substr(adverb.length() - 2) == \"ly\") {\n                result += adverb + \" \" + std::to_string(pos) + \" \";\n            }\n            adverb = \"\";\n            pos = i + 1;\n        } else {\n            adverb += text[i];\n        }\n    }\n    if (adverb.length() > 2 && adverb.substr(adverb.length() - 2) == \"ly\") {\n        result += adverb + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string adverb;\n    int i = 0;\n    while(i < text.length()) {\n        if(text[i] == ' ') {\n            i++;\n            continue;\n        }\n        if(text[i] == 'l' && text[i+1] == 'y') {\n            int j = i;\n            while(text[j] != ' ') {\n                adverb += text[j];\n                j++;\n            }\n            return adverb;\n        }\n        i++;\n    }\n    return \"\";",
    "    std::string adverb;\n    std::stringstream ss(text);\n    std::string word;\n    int pos = 0;\n    while (ss >> word) {\n        if (word.length() > 2 && word.substr(word.length() - 2) == \"ly\") {\n            adverb = word;\n            break;\n        }\n        pos += word.length() + 1;\n    }\n    return adverb + \" \" + std::to_string(pos);",
    "  std::string result = \"\";\n  std::string word = \"\";\n  std::string adverb = \"\";\n  int pos = 0;\n  for (int i = 0; i < text.length(); i++) {\n    if (text[i] == ' ') {\n      word = text.substr(pos, i - pos);\n      if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n        adverb = word;\n        break;\n      }\n      pos = i + 1;\n    }\n  }\n  if (adverb.length() > 0) {\n    result = adverb + \" \" + std::to_string(pos);\n  }\n  return result;",
    "  std::string result = \"\";\n  std::string adverb = \"\";\n  std::string adverb_pos = \"\";\n  std::string::size_type pos = 0;\n  std::string::size_type pos_adverb = 0;\n  std::string::size_type pos_adverb_pos = 0;\n  std::string::size_type pos_adverb_pos_end = 0;\n  std::string::size_type pos_end = 0;\n  std::string::size_type pos_adverb_end = 0;\n  while (pos != std::string::npos) {\n    pos = text.find(\"ly\", pos);\n    if (pos != std::string::npos) {\n      pos_adverb = text.find_last_of(\" \", pos);\n      pos_adverb_end = text.find_first_of(\" \", pos);\n      adverb = text.substr(pos_adverb + 1, pos_adverb_end - pos_adverb - 1);\n      pos_adverb_pos = text.find_last_of(\" \", pos_adverb);\n      pos_adverb_pos_end = text.find_first_of(\" \", pos_adverb);\n      adverb_pos = text.substr(pos_adverb_pos + 1, pos_adverb_pos_end - pos_adverb_pos - 1);\n      pos_end = text.find_first_of(\" \", pos);\n      result = result + adverb + \" \" + adverb_pos + \" \";\n      pos = pos_end;\n    }\n  }\n  return result;",
    "    std::string adverbs;\n    std::stringstream ss(text);\n    std::string word;\n    int pos = 0;\n    while (ss >> word) {\n        if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n            adverbs += word + \" \";\n            adverbs += std::to_string(pos) + \" \";\n        }\n        pos += word.size() + 1;\n    }\n    return adverbs;",
    "    std::string result;\n    std::string word;\n    int pos = 0;\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n                result += word + \" \" + std::to_string(pos) + \" \";\n            }\n            word = \"\";\n            pos = i + 1;\n        } else {\n            word += text[i];\n        }\n        i++;\n    }\n    if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n        result += word + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string adverb = \"\";\n    int pos = -1;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (adverb.size() > 2 && adverb[adverb.size() - 1] == 'y' && adverb[adverb.size() - 2] == 'l') {\n                return adverb + \" \" + std::to_string(pos);\n            }\n            adverb = \"\";\n            pos = -1;\n        }\n        else {\n            if (pos == -1) {\n                pos = i;\n            }\n            adverb += text[i];\n        }\n    }\n    if (adverb.size() > 2 && adverb[adverb.size() - 1] == 'y' && adverb[adverb.size() - 2] == 'l') {\n        return adverb + \" \" + std::to_string(pos);\n    }\n    return \"\";",
    "    std::regex pattern(\"\\\\w+ly\");\n    std::smatch matches;\n    std::string result;\n    if (std::regex_search(text, matches, pattern)) {\n        result = matches.str();\n    }\n    return result;",
    "    std::string adverb;\n    int pos = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            if (adverb.length() > 2 && adverb[adverb.length() - 1] == 'y' && adverb[adverb.length() - 2] == 'l') {\n                return adverb + \" \" + std::to_string(pos);\n            }\n            adverb = \"\";\n            pos = i + 1;\n        } else {\n            adverb += text[i];\n        }\n    }\n    if (adverb.length() > 2 && adverb[adverb.length() - 1] == 'y' && adverb[adverb.length() - 2] == 'l') {\n        return adverb + \" \" + std::to_string(pos);\n    }\n    return \"\";",
    "    std::string adverb;\n    std::stringstream ss(text);\n    std::string word;\n    std::vector<std::string> words;\n    while(ss >> word) {\n        words.push_back(word);\n    }\n    for(int i = 0; i < words.size(); i++) {\n        if(words[i].length() > 2 && words[i].substr(words[i].length() - 2) == \"ly\") {\n            adverb = words[i];\n            break;\n        }\n    }\n    return adverb;",
    "    std::string adverb = \"\";\n    std::string result = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] != ' ') {\n            adverb += text[i];\n        } else {\n            if (adverb.size() > 2 && adverb[adverb.size() - 1] == 'y' && adverb[adverb.size() - 2] == 'l') {\n                result += adverb + \" \";\n                result += std::to_string(pos) + \" \";\n            }\n            adverb = \"\";\n            pos = i + 1;\n        }\n    }\n    if (adverb.size() > 2 && adverb[adverb.size() - 1] == 'y' && adverb[adverb.size() - 2] == 'l') {\n        result += adverb + \" \";\n        result += std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int i = 0;\n    while (i < text.size()) {\n        if (text[i] == ' ') {\n            if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n                result += word + \" \";\n            }\n            word = \"\";\n        } else {\n            word += text[i];\n        }\n        i++;\n    }\n    if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        result += word;\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while (ss >> word) {\n        if (word.size() >= 2 && word.substr(word.size() - 2) == \"ly\") {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string adverbs;\n    std::stringstream ss(text);\n    std::string word;\n    while (ss >> word) {\n        if (word.size() >= 2 && word[word.size() - 2] == 'l' && word[word.size() - 1] == 'y') {\n            adverbs += word + \" \";\n        }\n    }\n    return adverbs;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] != ' ') {\n            word += text[i];\n        } else {\n            if (word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n                result += word + \" \" + std::to_string(pos) + \" \";\n            }\n            pos = i + 1;\n            word = \"\";\n        }\n    }\n    if (word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        result += word + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;"
  ]
}