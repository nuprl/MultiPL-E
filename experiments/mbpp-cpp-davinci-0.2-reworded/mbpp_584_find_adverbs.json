{
  "name": "mbpp_584_find_adverbs",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the first adverb ending with ly and its positions in a given string.\nstd::string find_adverbs(std::string text) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_584_find_adverbs.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = find_adverbs;\n    assert(candidate((\"Clearly, he has no excuse for such behavior.\")) == (\"0-7: Clearly\"));\n    assert(candidate((\"Please handle the situation carefuly\")) == (\"28-36: carefuly\"));\n    assert(candidate((\"Complete the task quickly\")) == (\"18-25: quickly\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::string result = \"\";\n    int pos = 0;\n    while(text.find(\"ly\", pos) != std::string::npos) {\n        pos = text.find(\"ly\", pos);\n        if(pos > 0 && text[pos - 1] != ' ') {\n            pos++;\n            continue;\n        }\n        result += std::to_string(pos) + \" \";\n        pos++;\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    std::string adverb = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] != ' ') {\n            word += text[i];\n        }\n        else {\n            if (word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n                adverb = word;\n                pos = i - word.length();\n                break;\n            }\n            word = \"\";\n        }\n    }\n    result = adverb + \" \" + std::to_string(pos);\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int i = 0;\n    while (i < text.size()) {\n        if (text[i] == ' ') {\n            if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n                result += word + \" \";\n            }\n            word = \"\";\n        } else {\n            word += text[i];\n        }\n        i++;\n    }\n    if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        result += word;\n    }\n    return result;",
    "  std::string result = \"\";\n  std::string word = \"\";\n  int position = 0;\n  for (int i = 0; i < text.size(); i++) {\n    if (text[i] != ' ') {\n      word += text[i];\n    } else {\n      if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        result += word + \" \";\n        result += std::to_string(position) + \" \";\n      }\n      word = \"\";\n      position = i + 1;\n    }\n  }\n  if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n    result += word + \" \";\n    result += std::to_string(position) + \" \";\n  }\n  return result;",
    "    std::string result = \"\";\n    std::string adverb = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            if (adverb.length() > 2 && adverb.substr(adverb.length() - 2) == \"ly\") {\n                result += adverb + \" \" + std::to_string(pos) + \" \";\n            }\n            adverb = \"\";\n            pos = i + 1;\n        } else {\n            adverb += text[i];\n        }\n    }\n    if (adverb.length() > 2 && adverb.substr(adverb.length() - 2) == \"ly\") {\n        result += adverb + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string adverb;\n    int i = 0;\n    while(i < text.length()) {\n        if(text[i] == ' ') {\n            i++;\n            continue;\n        }\n        if(text[i] == 'l' && text[i+1] == 'y') {\n            int j = i;\n            while(text[j] != ' ') {\n                adverb += text[j];\n                j++;\n            }\n            return adverb;\n        }\n        i++;\n    }\n    return \"\";",
    "    std::string adverb;\n    std::stringstream ss(text);\n    std::string word;\n    int pos = 0;\n    while (ss >> word) {\n        if (word.length() > 2 && word.substr(word.length() - 2) == \"ly\") {\n            adverb = word;\n            break;\n        }\n        pos += word.length() + 1;\n    }\n    return adverb + \" \" + std::to_string(pos);",
    "  std::string result = \"\";\n  std::string word = \"\";\n  std::string adverb = \"\";\n  int pos = 0;\n  for (int i = 0; i < text.length(); i++) {\n    if (text[i] == ' ') {\n      word = text.substr(pos, i - pos);\n      if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n        adverb = word;\n        break;\n      }\n      pos = i + 1;\n    }\n  }\n  if (adverb.length() > 0) {\n    result = adverb + \" \" + std::to_string(pos);\n  }\n  return result;",
    "  std::string result = \"\";\n  std::string adverb = \"\";\n  std::string adverb_pos = \"\";\n  std::string::size_type pos = 0;\n  std::string::size_type pos_adverb = 0;\n  std::string::size_type pos_adverb_pos = 0;\n  std::string::size_type pos_adverb_pos_end = 0;\n  std::string::size_type pos_end = 0;\n  std::string::size_type pos_adverb_end = 0;\n  while (pos != std::string::npos) {\n    pos = text.find(\"ly\", pos);\n    if (pos != std::string::npos) {\n      pos_adverb = text.find_last_of(\" \", pos);\n      pos_adverb_end = text.find_first_of(\" \", pos);\n      adverb = text.substr(pos_adverb + 1, pos_adverb_end - pos_adverb - 1);\n      pos_adverb_pos = text.find_last_of(\" \", pos_adverb);\n      pos_adverb_pos_end = text.find_first_of(\" \", pos_adverb);\n      adverb_pos = text.substr(pos_adverb_pos + 1, pos_adverb_pos_end - pos_adverb_pos - 1);\n      pos_end = text.find_first_of(\" \", pos);\n      result = result + adverb + \" \" + adverb_pos + \" \";\n      pos = pos_end;\n    }\n  }\n  return result;",
    "    std::string adverbs;\n    std::stringstream ss(text);\n    std::string word;\n    int pos = 0;\n    while (ss >> word) {\n        if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n            adverbs += word + \" \";\n            adverbs += std::to_string(pos) + \" \";\n        }\n        pos += word.size() + 1;\n    }\n    return adverbs;",
    "    std::string result;\n    std::string word;\n    int pos = 0;\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n                result += word + \" \" + std::to_string(pos) + \" \";\n            }\n            word = \"\";\n            pos = i + 1;\n        } else {\n            word += text[i];\n        }\n        i++;\n    }\n    if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n        result += word + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string adverb = \"\";\n    int pos = -1;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (adverb.size() > 2 && adverb[adverb.size() - 1] == 'y' && adverb[adverb.size() - 2] == 'l') {\n                return adverb + \" \" + std::to_string(pos);\n            }\n            adverb = \"\";\n            pos = -1;\n        }\n        else {\n            if (pos == -1) {\n                pos = i;\n            }\n            adverb += text[i];\n        }\n    }\n    if (adverb.size() > 2 && adverb[adverb.size() - 1] == 'y' && adverb[adverb.size() - 2] == 'l') {\n        return adverb + \" \" + std::to_string(pos);\n    }\n    return \"\";",
    "    std::regex pattern(\"\\\\w+ly\");\n    std::smatch matches;\n    std::string result;\n    if (std::regex_search(text, matches, pattern)) {\n        result = matches.str();\n    }\n    return result;",
    "    std::string adverb;\n    int pos = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            if (adverb.length() > 2 && adverb[adverb.length() - 1] == 'y' && adverb[adverb.length() - 2] == 'l') {\n                return adverb + \" \" + std::to_string(pos);\n            }\n            adverb = \"\";\n            pos = i + 1;\n        } else {\n            adverb += text[i];\n        }\n    }\n    if (adverb.length() > 2 && adverb[adverb.length() - 1] == 'y' && adverb[adverb.length() - 2] == 'l') {\n        return adverb + \" \" + std::to_string(pos);\n    }\n    return \"\";",
    "    std::string adverb;\n    std::stringstream ss(text);\n    std::string word;\n    std::vector<std::string> words;\n    while(ss >> word) {\n        words.push_back(word);\n    }\n    for(int i = 0; i < words.size(); i++) {\n        if(words[i].length() > 2 && words[i].substr(words[i].length() - 2) == \"ly\") {\n            adverb = words[i];\n            break;\n        }\n    }\n    return adverb;",
    "    std::string adverb = \"\";\n    std::string result = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] != ' ') {\n            adverb += text[i];\n        } else {\n            if (adverb.size() > 2 && adverb[adverb.size() - 1] == 'y' && adverb[adverb.size() - 2] == 'l') {\n                result += adverb + \" \";\n                result += std::to_string(pos) + \" \";\n            }\n            adverb = \"\";\n            pos = i + 1;\n        }\n    }\n    if (adverb.size() > 2 && adverb[adverb.size() - 1] == 'y' && adverb[adverb.size() - 2] == 'l') {\n        result += adverb + \" \";\n        result += std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int i = 0;\n    while (i < text.size()) {\n        if (text[i] == ' ') {\n            if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n                result += word + \" \";\n            }\n            word = \"\";\n        } else {\n            word += text[i];\n        }\n        i++;\n    }\n    if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        result += word;\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while (ss >> word) {\n        if (word.size() >= 2 && word.substr(word.size() - 2) == \"ly\") {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string adverbs;\n    std::stringstream ss(text);\n    std::string word;\n    while (ss >> word) {\n        if (word.size() >= 2 && word[word.size() - 2] == 'l' && word[word.size() - 1] == 'y') {\n            adverbs += word + \" \";\n        }\n    }\n    return adverbs;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] != ' ') {\n            word += text[i];\n        } else {\n            if (word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n                result += word + \" \" + std::to_string(pos) + \" \";\n            }\n            pos = i + 1;\n            word = \"\";\n        }\n    }\n    if (word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        result += word + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string result;\n    int pos = 0;\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            if (text[i - 1] == 'l' && text[i - 2] == 'y') {\n                result = text.substr(pos, i - pos);\n                break;\n            }\n            pos = i + 1;\n        }\n        i++;\n    }\n    return result;",
    "    std::string result = \"\";\n    int pos = 0;\n    while (pos < text.length()) {\n        int pos_start = text.find(\" \", pos);\n        if (pos_start == std::string::npos) {\n            pos_start = text.length();\n        }\n        std::string word = text.substr(pos, pos_start - pos);\n        if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n            result += word + \" \";\n        }\n        pos = pos_start + 1;\n    }\n    return result;",
    "    std::string adverb;\n    std::stringstream ss(text);\n    std::string word;\n    int pos = 0;\n    while(ss >> word) {\n        if(word.size() >= 2 && word[word.size() - 2] == 'l' && word[word.size() - 1] == 'y') {\n            adverb = word;\n            break;\n        }\n        pos += word.size() + 1;\n    }\n    return adverb + \" \" + std::to_string(pos);",
    "    std::regex r(\"\\\\w+ly\");\n    std::smatch m;\n    std::string result;\n    if (std::regex_search(text, m, r)) {\n        result = m.str();\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while(ss >> word) {\n        if(word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    int pos = 0;\n    std::string word = \"\";\n    int word_start = 0;\n    while (pos < text.length()) {\n        if (text[pos] == ' ') {\n            if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n                result += word + \" \" + std::to_string(word_start) + \" \" + std::to_string(pos - 1) + \" \";\n            }\n            word = \"\";\n            word_start = pos + 1;\n        } else {\n            word += text[pos];\n        }\n        pos++;\n    }\n    if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n        result += word + \" \" + std::to_string(word_start) + \" \" + std::to_string(pos - 1) + \" \";\n    }\n    return result;",
    "    std::string result = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            if (text.substr(pos, i - pos).find(\"ly\") == text.substr(pos, i - pos).length() - 2) {\n                result += text.substr(pos, i - pos) + \" \";\n            }\n            pos = i + 1;\n        }\n    }\n    if (text.substr(pos, text.length() - pos).find(\"ly\") == text.substr(pos, text.length() - pos).length() - 2) {\n        result += text.substr(pos, text.length() - pos);\n    }\n    return result;",
    "  std::string result = \"\";\n  std::string word = \"\";\n  std::string adverb = \"\";\n  int pos = 0;\n  for (int i = 0; i < text.size(); i++) {\n    if (text[i] == ' ') {\n      word = text.substr(pos, i - pos);\n      if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        adverb = word;\n        break;\n      }\n      pos = i + 1;\n    }\n  }\n  if (adverb == \"\") {\n    return \"There is no adverb in the text.\";\n  }\n  result += \"The first adverb is: \" + adverb + \"\\n\";\n  result += \"Its positions are: \";\n  pos = 0;\n  for (int i = 0; i < text.size(); i++) {\n    if (text[i] == ' ') {\n      word = text.substr(pos, i - pos);\n      if (word == adverb) {\n        result += std::to_string(pos) + \" \";\n      }\n      pos = i + 1;\n    }\n  }\n  return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while (ss >> word) {\n        if (word.size() >= 2 && word[word.size() - 2] == 'l' && word[word.size() - 1] == 'y') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int count = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n                result += word + \" \" + std::to_string(count) + \" \";\n            }\n            word = \"\";\n            count++;\n        } else {\n            word += text[i];\n        }\n    }\n    if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        result += word + \" \" + std::to_string(count) + \" \";\n    }\n    return result;",
    "    std::string adverb;\n    int pos = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (adverb.size() > 0 && adverb[adverb.size() - 1] == 'y' && adverb[adverb.size() - 2] == 'l') {\n                return adverb + \" \" + std::to_string(pos);\n            }\n            adverb.clear();\n            pos = i + 1;\n        } else {\n            adverb += text[i];\n        }\n    }\n    if (adverb.size() > 0 && adverb[adverb.size() - 1] == 'y' && adverb[adverb.size() - 2] == 'l') {\n        return adverb + \" \" + std::to_string(pos);\n    }\n    return \"\";",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n                result += word + \" \" + std::to_string(pos) + \" \";\n            }\n            word = \"\";\n            pos = i + 1;\n        }\n        else {\n            word += text[i];\n        }\n    }\n    if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n        result += word + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::regex pattern(\"(\\\\w+ly)\");\n    std::smatch matches;\n    std::string result;\n    while (std::regex_search(text, matches, pattern)) {\n        result = matches.str(1);\n        text = matches.suffix().str();\n    }\n    return result;",
    "    std::string result;\n    std::string::size_type pos = 0;\n    while ((pos = text.find(\"ly\", pos)) != std::string::npos) {\n        result += \" \" + std::to_string(pos);\n        ++pos;\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n                result += word + \" \" + std::to_string(pos) + \" \";\n            }\n            word = \"\";\n            pos = i + 1;\n        }\n        else {\n            word += text[i];\n        }\n    }\n    if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        result += word + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string adverb;\n    std::string result;\n    std::string::size_type pos = 0;\n    while ((pos = text.find(\"ly\", pos)) != std::string::npos) {\n        adverb = text.substr(pos - 1, 3);\n        if (adverb[0] != ' ') {\n            pos += 3;\n            continue;\n        }\n        result += adverb + \" \";\n        pos += 3;\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int pos = 0;\n    for(int i = 0; i < text.size(); i++) {\n        if(text[i] == ' ') {\n            if(word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n                result += word + \" \" + std::to_string(pos) + \" \";\n            }\n            word = \"\";\n            pos = i + 1;\n        } else {\n            word += text[i];\n        }\n    }\n    if(word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        result += word + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string result;\n    std::stringstream ss(text);\n    std::string word;\n    int pos = 0;\n    while (ss >> word) {\n        if (word.size() > 2 && word.substr(word.size() - 2) == \"ly\") {\n            result += word + \" \";\n            result += std::to_string(pos) + \" \";\n        }\n        pos += word.size() + 1;\n    }\n    return result;",
    "    std::string adverb;\n    std::string result;\n    std::stringstream ss(text);\n    while(ss >> adverb) {\n        if(adverb.size() >= 2 && adverb.substr(adverb.size() - 2) == \"ly\") {\n            result += adverb + \" \";\n        }\n    }\n    return result;",
    "    std::string adverb;\n    std::string result;\n    std::string::size_type pos = 0;\n    while ((pos = text.find(\"ly\", pos)) != std::string::npos) {\n        adverb = text.substr(pos - 1, 3);\n        if (adverb[0] == ' ') {\n            result += adverb;\n            result += \" \";\n            result += std::to_string(pos - 1);\n            result += \" \";\n        }\n        pos += 2;\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            if (word.length() >= 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n                result += word + \" \" + std::to_string(i - word.length()) + \" \";\n            }\n            word = \"\";\n        }\n        else {\n            word += text[i];\n        }\n    }\n    if (word.length() >= 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n        result += word + \" \" + std::to_string(text.length() - word.length());\n    }\n    return result;",
    "    std::string adverb;\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (text[i] == 'l' && text[i + 1] == 'y') {\n            int j = i;\n            while (text[j] != ' ') {\n                adverb += text[j];\n                j++;\n            }\n            adverb += ' ';\n            i = j;\n        }\n        else {\n            i++;\n        }\n    }\n    return adverb;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] != ' ') {\n            word += text[i];\n        } else {\n            if (word.length() > 2 && word[word.length() - 2] == 'l' && word[word.length() - 1] == 'y') {\n                result += word + \" \";\n                pos = i - word.length();\n                result += std::to_string(pos) + \" \";\n            }\n            word = \"\";\n        }\n    }\n    if (word.length() > 2 && word[word.length() - 2] == 'l' && word[word.length() - 1] == 'y') {\n        result += word + \" \";\n        pos = text.length() - word.length();\n        result += std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n                result += word + \" \";\n            }\n            word = \"\";\n        } else {\n            word += text[i];\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            if (word.length() >= 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n                result += word + \" \" + std::to_string(pos) + \" \";\n            }\n            word = \"\";\n            pos = i + 1;\n        } else {\n            word += text[i];\n        }\n    }\n    if (word.length() >= 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n        result += word + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string adverb;\n    int pos = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            if (adverb.length() > 2 && adverb[adverb.length() - 1] == 'y' && adverb[adverb.length() - 2] == 'l') {\n                return adverb + \" \" + std::to_string(pos);\n            }\n            adverb = \"\";\n            pos = i + 1;\n        } else {\n            adverb += text[i];\n        }\n    }\n    if (adverb.length() > 2 && adverb[adverb.length() - 1] == 'y' && adverb[adverb.length() - 2] == 'l') {\n        return adverb + \" \" + std::to_string(pos);\n    }\n    return \"\";",
    "    std::string result;\n    std::string word;\n    int pos = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n                result += word + \" \" + std::to_string(pos) + \" \";\n            }\n            word = \"\";\n            pos = i + 1;\n        }\n        else {\n            word += text[i];\n        }\n    }\n    if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        result += word + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] != ' ') {\n            word += text[i];\n        } else {\n            if (word.length() >= 3 && word[word.length() - 2] == 'l' && word[word.length() - 1] == 'y') {\n                result += word + \" \";\n            }\n            word = \"\";\n        }\n    }\n    if (word.length() >= 3 && word[word.length() - 2] == 'l' && word[word.length() - 1] == 'y') {\n        result += word + \" \";\n    }\n    return result;",
    "    std::regex adverb(\"\\\\w+ly\");\n    std::smatch matches;\n    std::string result;\n    if (std::regex_search(text, matches, adverb)) {\n        result = matches.str();\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while (ss >> word) {\n        if (word.size() > 2 && word[word.size() - 2] == 'l' && word[word.size() - 1] == 'y') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            if (word.length() > 2 && word.substr(word.length() - 2, 2) == \"ly\") {\n                result += word + \" \";\n            }\n            word = \"\";\n        } else {\n            word += text[i];\n        }\n        i++;\n    }\n    if (word.length() > 2 && word.substr(word.length() - 2, 2) == \"ly\") {\n        result += word;\n    }\n    return result;",
    "  std::string result = \"\";\n  std::string word = \"\";\n  int pos = 0;\n  for(int i = 0; i < text.length(); i++) {\n    if(text[i] != ' ') {\n      word += text[i];\n    } else {\n      if(word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n        result += word + \" \" + std::to_string(pos) + \" \";\n      }\n      word = \"\";\n      pos = i + 1;\n    }\n  }\n  if(word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n    result += word + \" \" + std::to_string(pos) + \" \";\n  }\n  return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while (ss >> word) {\n        if (word.size() > 2 && word.substr(word.size() - 2) == \"ly\") {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    int pos = 0;\n    int len = text.length();\n    while (pos < len) {\n        pos = text.find(\"ly\", pos);\n        if (pos == -1) {\n            break;\n        }\n        if (pos > 0 && text[pos - 1] == ' ') {\n            result += \" \" + std::to_string(pos);\n        }\n        pos++;\n    }\n    return result;",
    "    std::string result = \"\";\n    int pos = 0;\n    int pos_start = 0;\n    int pos_end = 0;\n    while (pos < text.length()) {\n        if (text[pos] == ' ') {\n            pos_start = pos + 1;\n        }\n        if (text[pos] == 'l' && text[pos + 1] == 'y') {\n            pos_end = pos;\n            result = text.substr(pos_start, pos_end - pos_start + 1);\n            break;\n        }\n        pos++;\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] != ' ') {\n            word += text[i];\n        } else {\n            if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n                result += word + \" \" + std::to_string(pos) + \" \";\n            }\n            word = \"\";\n            pos = i + 1;\n        }\n    }\n    if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n        result += word + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string result;\n    std::stringstream ss(text);\n    std::string word;\n    int pos = 0;\n    while (ss >> word) {\n        if (word.size() > 2 && word[word.size() - 2] == 'l' && word[word.size() - 1] == 'y') {\n            result += word + \" \";\n            result += std::to_string(pos) + \" \";\n        }\n        pos += word.size() + 1;\n    }\n    return result;",
    "    std::string adverb;\n    std::string::size_type pos = 0;\n    while((pos = text.find(\"ly\", pos)) != std::string::npos) {\n        adverb = text.substr(pos - 1, 3);\n        if(adverb[0] != ' ' && adverb[0] != ',' && adverb[0] != '.' && adverb[0] != '!' && adverb[0] != '?') {\n            adverb = \"\";\n        }\n        else {\n            break;\n        }\n        pos++;\n    }\n    return adverb;",
    "    std::string adverb;\n    std::string result;\n    std::string::size_type pos = 0;\n    while (pos != std::string::npos) {\n        pos = text.find(\"ly\", pos);\n        if (pos != std::string::npos) {\n            adverb = text.substr(pos - 1, 3);\n            if (adverb[0] != ' ') {\n                pos = text.find(\"ly\", pos + 1);\n                continue;\n            }\n            result = result + adverb + \" \" + std::to_string(pos) + \" \";\n            pos = text.find(\"ly\", pos + 1);\n        }\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while(ss >> word) {\n        if(word.length() > 2 && word.substr(word.length() - 2) == \"ly\") {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "\tstd::string result;\n\tstd::string word;\n\tstd::stringstream ss(text);\n\twhile (ss >> word) {\n\t\tif (word.size() > 2 && word.substr(word.size() - 2) == \"ly\") {\n\t\t\tresult = word;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while (ss >> word) {\n        if (word.size() >= 2 && word.substr(word.size() - 2) == \"ly\") {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::regex pattern(\"\\\\b[a-zA-Z]*ly\\\\b\");\n    std::smatch match;\n    std::string result;\n    while (std::regex_search(text, match, pattern)) {\n        result = match.str();\n        text = match.suffix().str();\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while (ss >> word) {\n        if (word.size() > 2 && word[word.size() - 2] == 'l' && word[word.size() - 1] == 'y') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string adverb = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            if (adverb.length() > 0) {\n                if (adverb[adverb.length() - 1] == 'y' && adverb[adverb.length() - 2] == 'l') {\n                    return adverb + \" \" + std::to_string(pos);\n                }\n                adverb = \"\";\n                pos = 0;\n            }\n        } else {\n            adverb += text[i];\n            pos = i;\n        }\n    }\n    return \"\";",
    "    std::string adverb = \"\";\n    std::string adverbs = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (adverb.size() > 2 && adverb[adverb.size() - 2] == 'l' && adverb[adverb.size() - 1] == 'y') {\n                adverbs += adverb + \" \";\n                adverbs += std::to_string(pos) + \" \";\n            }\n            adverb = \"\";\n            pos = i + 1;\n        } else {\n            adverb += text[i];\n        }\n    }\n    if (adverb.size() > 2 && adverb[adverb.size() - 2] == 'l' && adverb[adverb.size() - 1] == 'y') {\n        adverbs += adverb + \" \";\n        adverbs += std::to_string(pos) + \" \";\n    }\n    return adverbs;",
    "    std::string adverb;\n    std::string result;\n    int pos = 0;\n    while (text.find(\"ly\", pos) != std::string::npos) {\n        pos = text.find(\"ly\", pos);\n        adverb = text.substr(pos - 1, 3);\n        if (adverb[0] != ' ' && adverb[0] != ',' && adverb[0] != '.' && adverb[0] != '!' && adverb[0] != '?') {\n            pos++;\n            continue;\n        }\n        if (adverb[2] != ' ' && adverb[2] != ',' && adverb[2] != '.' && adverb[2] != '!' && adverb[2] != '?') {\n            pos++;\n            continue;\n        }\n        result += adverb + \" \" + std::to_string(pos - 1) + \" \";\n        pos++;\n    }\n    return result;",
    "    std::string adverbs = \"\";\n    std::string word = \"\";\n    int pos = 0;\n    for (auto ch : text) {\n        if (ch != ' ') {\n            word += ch;\n        } else {\n            if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n                adverbs += word + \" \";\n            }\n            word = \"\";\n        }\n    }\n    if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        adverbs += word + \" \";\n    }\n    return adverbs;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int index = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n                result += word + \" \" + std::to_string(index) + \" \";\n            }\n            word = \"\";\n            index = i + 1;\n        } else {\n            word += text[i];\n        }\n    }\n    if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n        result += word + \" \" + std::to_string(index) + \" \";\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    std::vector<std::string> words;\n    while (ss >> word) {\n        words.push_back(word);\n    }\n    for (int i = 0; i < words.size(); i++) {\n        if (words[i].size() > 2 && words[i].substr(words[i].size() - 2, 2) == \"ly\") {\n            result += words[i] + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while(ss >> word) {\n        if(word.size() > 2 && word.substr(word.size() - 2) == \"ly\") {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    std::regex r(\"\\\\w+ly\");\n    std::smatch m;\n    while (std::regex_search(text, m, r)) {\n        result += m[0] + \" \";\n        text = m.suffix().str();\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n                result += word + \" \" + std::to_string(pos) + \" \";\n            }\n            word = \"\";\n            pos = i + 1;\n        } else {\n            word += text[i];\n        }\n    }\n    if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        result += word + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < text.size(); ++i) {\n        if (text[i] == ' ') {\n            if (word.size() > 2 && word[word.size() - 2] == 'l' && word[word.size() - 1] == 'y') {\n                result += word + \" \";\n            }\n            word = \"\";\n        } else {\n            word += text[i];\n        }\n    }\n    if (word.size() > 2 && word[word.size() - 2] == 'l' && word[word.size() - 1] == 'y') {\n        result += word;\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] != ' ') {\n            word += text[i];\n        } else {\n            if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n                result += word + \" \" + std::to_string(pos) + \" \";\n            }\n            word = \"\";\n            pos = i + 1;\n        }\n    }\n    if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n        result += word + \" \" + std::to_string(pos);\n    }\n    return result;",
    "  std::string adverbs;\n  std::stringstream ss(text);\n  std::string word;\n  int i = 0;\n  while (ss >> word) {\n    if (word.length() > 2 && word.substr(word.length() - 2) == \"ly\") {\n      adverbs += word + \" \";\n      i++;\n    }\n  }\n  return adverbs;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n                result += word + \" \" + std::to_string(pos) + \" \";\n            }\n            word = \"\";\n            pos = i + 1;\n        }\n        else {\n            word += text[i];\n        }\n    }\n    if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n        result += word + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "  std::string result = \"\";\n  std::string word = \"\";\n  int pos = 0;\n  for (int i = 0; i < text.size(); i++) {\n    if (text[i] == ' ') {\n      if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        result += word + \" \" + std::to_string(pos) + \" \";\n      }\n      word = \"\";\n      pos = i + 1;\n    } else {\n      word += text[i];\n    }\n  }\n  if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n    result += word + \" \" + std::to_string(pos) + \" \";\n  }\n  return result;",
    "    std::string result = \"\";\n    int pos = 0;\n    while (pos < text.size()) {\n        int pos_start = text.find(\" \", pos);\n        if (pos_start == std::string::npos) {\n            pos_start = text.size();\n        }\n        std::string word = text.substr(pos, pos_start - pos);\n        if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n            result += word + \" \";\n        }\n        pos = pos_start + 1;\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string adverb = \"\";\n    int pos = 0;\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            if (adverb.length() > 2 && adverb[adverb.length() - 1] == 'y' && adverb[adverb.length() - 2] == 'l') {\n                result += adverb + \" \" + std::to_string(pos) + \" \";\n            }\n            adverb = \"\";\n            pos = i + 1;\n        } else {\n            adverb += text[i];\n        }\n        i++;\n    }\n    if (adverb.length() > 2 && adverb[adverb.length() - 1] == 'y' && adverb[adverb.length() - 2] == 'l') {\n        result += adverb + \" \" + std::to_string(pos);\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n                result += word + \" \" + std::to_string(pos) + \" \";\n            }\n            word = \"\";\n            pos = i + 1;\n        } else {\n            word += text[i];\n        }\n    }\n    if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n        result += word + \" \" + std::to_string(pos);\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while (ss >> word) {\n        if (word.size() >= 2 && word.substr(word.size() - 2, 2) == \"ly\") {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            if (word.length() >= 2) {\n                if (word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n                    result += word + \" \" + std::to_string(pos) + \" \";\n                }\n            }\n            word = \"\";\n            pos = i + 1;\n        } else {\n            word += text[i];\n        }\n    }\n    if (word.length() >= 2) {\n        if (word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n            result += word + \" \" + std::to_string(pos) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] != ' ') {\n            word += text[i];\n        } else {\n            if (word.length() > 2 && word[word.length() - 2] == 'l' && word[word.length() - 1] == 'y') {\n                result += word + \" \";\n            }\n            word = \"\";\n        }\n        i++;\n    }\n    if (word.length() > 2 && word[word.length() - 2] == 'l' && word[word.length() - 1] == 'y') {\n        result += word;\n    }\n    return result;",
    "  std::regex r(\"\\\\w+ly\");\n  std::smatch m;\n  std::string result;\n  if (std::regex_search(text, m, r)) {\n    result = m.str();\n  }\n  return result;",
    "  std::string adverb;\n  int pos = 0;\n  std::stringstream ss(text);\n  std::string word;\n  while (ss >> word) {\n    if (word.size() >= 2 && word.substr(word.size() - 2) == \"ly\") {\n      adverb = word;\n      break;\n    }\n    pos++;\n  }\n  return adverb + \" \" + std::to_string(pos);",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int position = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n                result += word + \" \" + std::to_string(position) + \" \";\n            }\n            word = \"\";\n            position = i + 1;\n        } else {\n            word += text[i];\n        }\n    }\n    if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        result += word + \" \" + std::to_string(position) + \" \";\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] != ' ') {\n            word += text[i];\n        } else {\n            if (word.length() >= 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n                result += word + \" \";\n            }\n            word = \"\";\n        }\n    }\n    if (word.length() >= 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n        result += word;\n    }\n    return result;",
    "    std::string adverb = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (adverb[adverb.size() - 1] == 'y' && adverb[adverb.size() - 2] == 'l') {\n                return adverb + \" \" + std::to_string(pos);\n            }\n            adverb = \"\";\n            pos = 0;\n        }\n        else {\n            adverb += text[i];\n            pos++;\n        }\n    }\n    if (adverb[adverb.size() - 1] == 'y' && adverb[adverb.size() - 2] == 'l') {\n        return adverb + \" \" + std::to_string(pos);\n    }\n    return \"\";",
    "    std::string adverbs;\n    std::string word;\n    std::stringstream ss(text);\n    while(ss >> word) {\n        if(word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n            adverbs += word + \" \";\n        }\n    }\n    return adverbs;",
    "    std::string result;\n    std::string word;\n    int position = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n                result += word + \" \" + std::to_string(position) + \" \";\n            }\n            word = \"\";\n            position = i + 1;\n        } else {\n            word += text[i];\n        }\n    }\n    if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        result += word + \" \" + std::to_string(position) + \" \";\n    }\n    return result;",
    "    std::string result = \"\";\n    int pos = 0;\n    while (text.find(\"ly\", pos) != std::string::npos) {\n        pos = text.find(\"ly\", pos);\n        if (pos > 0 && text[pos - 1] != ' ') {\n            pos++;\n            continue;\n        }\n        if (pos + 2 < text.size() && text[pos + 2] != ' ') {\n            pos++;\n            continue;\n        }\n        result += text.substr(pos - 1, 3);\n        result += \" \";\n        pos++;\n    }\n    return result;",
    "    std::string adverb;\n    std::string result;\n    int pos = 0;\n    int i = 0;\n    while (i < text.size()) {\n        if (text[i] == ' ') {\n            if (adverb.size() > 2 && adverb[adverb.size() - 2] == 'l' && adverb[adverb.size() - 1] == 'y') {\n                result += adverb + \" \" + std::to_string(pos) + \" \";\n            }\n            adverb = \"\";\n            pos = i + 1;\n        } else {\n            adverb += text[i];\n        }\n        i++;\n    }\n    if (adverb.size() > 2 && adverb[adverb.size() - 2] == 'l' && adverb[adverb.size() - 1] == 'y') {\n        result += adverb + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string result;\n    int pos = 0;\n    int pos_start = 0;\n    int pos_end = 0;\n    while (pos < text.length()) {\n        if (text[pos] == ' ') {\n            pos_start = pos + 1;\n        }\n        if (text[pos] == 'l' && text[pos + 1] == 'y') {\n            pos_end = pos + 1;\n            result = text.substr(pos_start, pos_end - pos_start + 1);\n            break;\n        }\n        pos++;\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int position = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n                result += word + \" \" + std::to_string(position) + \" \";\n            }\n            word = \"\";\n            position = i + 1;\n        } else {\n            word += text[i];\n        }\n    }\n    if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        result += word + \" \" + std::to_string(position) + \" \";\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while(ss >> word) {\n        if(word.size() > 2 && word.substr(word.size() - 2) == \"ly\") {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string adverb;\n    std::string::size_type pos = 0;\n    while((pos = text.find(\"ly\", pos)) != std::string::npos) {\n        adverb = text.substr(pos-1, 3);\n        if (adverb[0] == ' ') {\n            return adverb;\n        }\n        pos += 1;\n    }\n    return \"\";",
    "    std::string result = \"\";\n    int pos = 0;\n    while (pos < text.length()) {\n        int pos_start = text.find(\" \", pos);\n        if (pos_start == std::string::npos) {\n            pos_start = text.length();\n        }\n        int pos_end = text.find(\" \", pos_start + 1);\n        if (pos_end == std::string::npos) {\n            pos_end = text.length();\n        }\n        std::string word = text.substr(pos_start + 1, pos_end - pos_start - 1);\n        if (word.length() > 2 && word.substr(word.length() - 2, 2) == \"ly\") {\n            result += word + \" \" + std::to_string(pos_start + 1) + \" \" + std::to_string(pos_end) + \" \";\n        }\n        pos = pos_end + 1;\n    }\n    return result;",
    "    std::string adverb;\n    std::string::size_type pos = 0;\n    while((pos = text.find(\"ly\", pos)) != std::string::npos) {\n        adverb = text.substr(pos - 3, 3);\n        if(adverb[0] == ' ') {\n            return adverb;\n        }\n        ++pos;\n    }\n    return \"\";",
    "    std::string result = \"\";\n    std::string adverb = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (adverb.size() >= 2 && adverb[adverb.size() - 1] == 'y' && adverb[adverb.size() - 2] == 'l') {\n                result += adverb + \" \" + std::to_string(pos) + \" \";\n            }\n            adverb = \"\";\n            pos = 0;\n        } else {\n            adverb += text[i];\n            pos++;\n        }\n    }\n    if (adverb.size() >= 2 && adverb[adverb.size() - 1] == 'y' && adverb[adverb.size() - 2] == 'l') {\n        result += adverb + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string temp = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (temp.size() > 2 && temp[temp.size() - 1] == 'y' && temp[temp.size() - 2] == 'l') {\n                result += temp + \" \" + std::to_string(pos) + \" \";\n            }\n            temp = \"\";\n            pos = i + 1;\n        }\n        else {\n            temp += text[i];\n        }\n    }\n    if (temp.size() > 2 && temp[temp.size() - 1] == 'y' && temp[temp.size() - 2] == 'l') {\n        result += temp + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string adverb;\n    std::string::size_type pos = 0;\n    while ((pos = text.find(\"ly\", pos)) != std::string::npos) {\n        adverb = text.substr(pos - 1, 3);\n        if (adverb[0] == ' ') {\n            return adverb;\n        }\n        ++pos;\n    }\n    return \"\";",
    "    std::string adverb;\n    std::stringstream ss(text);\n    std::string word;\n    int pos = 0;\n    while(ss >> word) {\n        if(word.size() > 2 && word.substr(word.size() - 2) == \"ly\") {\n            adverb = word;\n            break;\n        }\n        pos += word.size() + 1;\n    }\n    return adverb + \" \" + std::to_string(pos);",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            if (word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n                result += word + \" \" + std::to_string(pos) + \" \";\n            }\n            word = \"\";\n            pos = i + 1;\n        } else {\n            word += text[i];\n        }\n    }\n    if (word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n        result += word + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while (ss >> word) {\n        if (word.size() > 2 && word[word.size() - 2] == 'l' && word[word.size() - 1] == 'y') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while(ss >> word) {\n        if(word.size() >= 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while(ss >> word) {\n        if(word.size() >= 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n            result = word;\n            break;\n        }\n    }\n    return result;",
    "    std::string adverb;\n    std::stringstream ss(text);\n    std::string word;\n    int pos = 0;\n    while(ss >> word) {\n        if(word.size() >= 2 && word.substr(word.size() - 2) == \"ly\") {\n            adverb = word;\n            break;\n        }\n        pos += word.size() + 1;\n    }\n    return adverb + \" \" + std::to_string(pos);",
    "    std::string result;\n    std::string word;\n    int pos = 0;\n    int pos_start = 0;\n    int pos_end = 0;\n    while (pos < text.size()) {\n        if (text[pos] == ' ') {\n            word = text.substr(pos_start, pos_end - pos_start);\n            if (word.size() > 2 && word[word.size() - 2] == 'l' && word[word.size() - 1] == 'y') {\n                result += word + \" \";\n            }\n            pos_start = pos + 1;\n            pos_end = pos + 1;\n        }\n        else {\n            pos_end++;\n        }\n        pos++;\n    }\n    word = text.substr(pos_start, pos_end - pos_start);\n    if (word.size() > 2 && word[word.size() - 2] == 'l' && word[word.size() - 1] == 'y') {\n        result += word + \" \";\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n                result += word + \" \" + std::to_string(pos) + \" \";\n            }\n            word = \"\";\n            pos = i + 1;\n        }\n        else {\n            word += text[i];\n        }\n    }\n    if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n        result += word + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while (ss >> word) {\n        if (word.size() >= 2 && word[word.size() - 2] == 'l' && word[word.size() - 1] == 'y') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while (ss >> word) {\n        if (word.size() > 2 && word.substr(word.size() - 2) == \"ly\") {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    int pos = 0;\n    while(ss >> word) {\n        if(word.length() > 2 && word.substr(word.length() - 2) == \"ly\") {\n            result += word + \" \";\n            result += std::to_string(pos) + \" \";\n        }\n        pos += word.length() + 1;\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while (ss >> word) {\n        if (word.length() >= 2 && word[word.length() - 2] == 'l' && word[word.length() - 1] == 'y') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n                result += word + \" \" + std::to_string(pos) + \" \";\n            }\n            word = \"\";\n            pos = i + 1;\n        } else {\n            word += text[i];\n        }\n    }\n    if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        result += word + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string adverb = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (adverb.size() > 0) {\n                if (adverb[adverb.size() - 1] == 'y' && adverb[adverb.size() - 2] == 'l') {\n                    return adverb + \" \" + std::to_string(pos);\n                }\n                adverb = \"\";\n                pos = 0;\n            }\n        }\n        else {\n            if (adverb.size() == 0) {\n                pos = i;\n            }\n            adverb += text[i];\n        }\n    }\n    if (adverb.size() > 0) {\n        if (adverb[adverb.size() - 1] == 'y' && adverb[adverb.size() - 2] == 'l') {\n            return adverb + \" \" + std::to_string(pos);\n        }\n    }\n    return \"\";",
    "    std::string adverb = \"\";\n    int i = 0;\n    while(i < text.length()) {\n        if(text[i] == 'a' && text[i+1] == 'd' && text[i+2] == 'v' && text[i+3] == 'e' && text[i+4] == 'r' && text[i+5] == 'b') {\n            i += 6;\n            while(text[i] != ' ') {\n                adverb += text[i];\n                i++;\n            }\n            if(adverb[adverb.length()-1] == 'y' && adverb[adverb.length()-2] == 'l') {\n                return adverb;\n            }\n            adverb = \"\";\n        }\n        i++;\n    }\n    return adverb;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int i = 0;\n    while(i < text.length()) {\n        if(text[i] == ' ') {\n            if(word.length() >= 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n                result += word;\n                result += \" \";\n                result += std::to_string(i - word.length());\n                result += \" \";\n            }\n            word = \"\";\n        }\n        else {\n            word += text[i];\n        }\n        i++;\n    }\n    if(word.length() >= 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n        result += word;\n        result += \" \";\n        result += std::to_string(i - word.length());\n        result += \" \";\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    int pos = 0;\n    std::stringstream ss(text);\n    while (ss >> word) {\n        if (word.size() > 2 && word.substr(word.size() - 2) == \"ly\") {\n            result += word + \" \";\n            result += std::to_string(pos) + \" \";\n        }\n        pos += word.size() + 1;\n    }\n    return result;",
    "    std::string result;\n    int pos = 0;\n    int count = 0;\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == ' ') {\n            if(text[i - 1] == 'y' && text[i - 2] == 'l') {\n                result += text.substr(pos, i - pos);\n                result += \" \";\n                count++;\n            }\n            pos = i + 1;\n        }\n    }\n    if(count == 0) {\n        return \"No adverbs found\";\n    }\n    return result;",
    "    std::string result = \"\";\n    int position = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (text.substr(position, i - position).find(\"ly\") == text.substr(position, i - position).size() - 2) {\n                result += text.substr(position, i - position) + \" \";\n            }\n            position = i + 1;\n        }\n    }\n    if (text.substr(position, text.size() - position).find(\"ly\") == text.substr(position, text.size() - position).size() - 2) {\n        result += text.substr(position, text.size() - position);\n    }\n    return result;",
    "  std::string adverb;\n  std::string result;\n  std::stringstream ss(text);\n  while (ss >> adverb) {\n    if (adverb.size() > 2 && adverb.substr(adverb.size() - 2) == \"ly\") {\n      result += adverb + \" \";\n    }\n  }\n  return result;",
    "\tstd::string adverb = \"\";\n\tint pos = 0;\n\tfor (int i = 0; i < text.length(); i++) {\n\t\tif (text[i] == ' ') {\n\t\t\tif (adverb[adverb.length() - 1] == 'y' && adverb[adverb.length() - 2] == 'l') {\n\t\t\t\treturn adverb + \" \" + std::to_string(pos);\n\t\t\t}\n\t\t\tadverb = \"\";\n\t\t\tpos = i + 1;\n\t\t}\n\t\telse {\n\t\t\tadverb += text[i];\n\t\t}\n\t}\n\tif (adverb[adverb.length() - 1] == 'y' && adverb[adverb.length() - 2] == 'l') {\n\t\treturn adverb + \" \" + std::to_string(pos);\n\t}\n\treturn \"\";",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            if (word.length() > 2 && word[word.length() - 2] == 'l' && word[word.length() - 1] == 'y') {\n                result += word + \" \";\n            }\n            word = \"\";\n        } else {\n            word += text[i];\n        }\n        i++;\n    }\n    if (word.length() > 2 && word[word.length() - 2] == 'l' && word[word.length() - 1] == 'y') {\n        result += word;\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n                result += word + \" \" + std::to_string(pos) + \" \";\n            }\n            word = \"\";\n            pos = i + 1;\n        } else {\n            word += text[i];\n        }\n    }\n    if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        result += word + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string result = \"\";\n    int pos = 0;\n    while (pos < text.length()) {\n        pos = text.find(\"ly\", pos);\n        if (pos == -1) {\n            break;\n        }\n        if (pos == 0) {\n            result += \" \" + std::to_string(pos);\n            pos++;\n            continue;\n        }\n        if (pos > 0 && (text[pos - 1] == ' ' || text[pos - 1] == ',' || text[pos - 1] == '.')) {\n            result += \" \" + std::to_string(pos);\n        }\n        pos++;\n    }\n    return result;",
    "  std::string result = \"\";\n  std::string word = \"\";\n  int pos = 0;\n  for (int i = 0; i < text.length(); i++) {\n    if (text[i] != ' ') {\n      word += text[i];\n    } else {\n      if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n        result += word + \" \" + std::to_string(pos) + \" \";\n      }\n      pos = i + 1;\n      word = \"\";\n    }\n  }\n  if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n    result += word + \" \" + std::to_string(pos);\n  }\n  return result;",
    "\tstd::string result = \"\";\n\tstd::string word = \"\";\n\tint pos = 0;\n\tfor (int i = 0; i < text.size(); i++) {\n\t\tif (text[i] == ' ') {\n\t\t\tif (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n\t\t\t\tresult += word + \" \" + std::to_string(pos) + \" \";\n\t\t\t}\n\t\t\tword = \"\";\n\t\t\tpos = i + 1;\n\t\t}\n\t\telse {\n\t\t\tword += text[i];\n\t\t}\n\t}\n\tif (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n\t\tresult += word + \" \" + std::to_string(pos) + \" \";\n\t}\n\treturn result;",
    "    std::string adverb;\n    int pos = 0;\n    std::stringstream ss(text);\n    while(ss >> adverb) {\n        if(adverb.size() > 2 && adverb.substr(adverb.size() - 2) == \"ly\") {\n            return adverb;\n        }\n    }\n    return \"\";",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n                result += word + \" \" + std::to_string(pos) + \" \";\n            }\n            word = \"\";\n            pos = i + 1;\n        }\n        else {\n            word += text[i];\n        }\n    }\n    if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n        result += word + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string adverb;\n    std::vector<int> positions;\n    std::stringstream ss(text);\n    std::string word;\n    int pos = 0;\n    while (ss >> word) {\n        if (word.size() >= 2 && word.substr(word.size() - 2) == \"ly\") {\n            adverb = word;\n            positions.push_back(pos);\n        }\n        pos += word.size() + 1;\n    }\n    std::stringstream result;\n    result << adverb << \" \" << positions.size();\n    for (auto pos : positions) {\n        result << \" \" << pos;\n    }\n    return result.str();",
    "    std::string result;\n    int pos = 0;\n    int count = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            if (text[i - 1] == 'y' && text[i - 2] == 'l' && text[i - 3] == 'y') {\n                result += text.substr(pos, i - pos - 3);\n                result += \" \";\n                count++;\n            }\n            pos = i + 1;\n        }\n    }\n    if (text[text.length() - 1] == 'y' && text[text.length() - 2] == 'l' && text[text.length() - 3] == 'y') {\n        result += text.substr(pos, text.length() - pos - 3);\n        count++;\n    }\n    if (count == 0) {\n        return \"\";\n    }\n    return result;",
    "\tstd::string result = \"\";\n\tstd::string word = \"\";\n\tint pos = 0;\n\tfor (int i = 0; i < text.length(); i++) {\n\t\tif (text[i] == ' ') {\n\t\t\tif (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n\t\t\t\tresult += word + \" \" + std::to_string(pos) + \" \";\n\t\t\t}\n\t\t\tword = \"\";\n\t\t\tpos = i + 1;\n\t\t}\n\t\telse {\n\t\t\tword += text[i];\n\t\t}\n\t}\n\tif (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n\t\tresult += word + \" \" + std::to_string(pos) + \" \";\n\t}\n\treturn result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n                result += word + \" \" + std::to_string(pos) + \" \";\n            }\n            word = \"\";\n            pos = i + 1;\n        } else {\n            word += text[i];\n        }\n    }\n    if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n        result += word + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "  std::string result = \"\";\n  std::string word = \"\";\n  int pos = 0;\n  for (int i = 0; i < text.size(); i++) {\n    if (text[i] != ' ') {\n      word += text[i];\n    }\n    else {\n      if (word.size() > 2 && word[word.size() - 2] == 'l' && word[word.size() - 1] == 'y') {\n        result += word + \" \" + std::to_string(pos) + \" \";\n      }\n      word = \"\";\n      pos = i + 1;\n    }\n  }\n  if (word.size() > 2 && word[word.size() - 2] == 'l' && word[word.size() - 1] == 'y') {\n    result += word + \" \" + std::to_string(pos) + \" \";\n  }\n  return result;",
    "    std::string adverb = \"\";\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (text[i] == 'l' && text[i + 1] == 'y') {\n            int j = i - 1;\n            while (j >= 0 && text[j] != ' ') {\n                adverb = text[j] + adverb;\n                j--;\n            }\n            adverb += \"ly\";\n            return adverb;\n        }\n        i++;\n    }\n    return adverb;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int pos = 0;\n    for(int i = 0; i < text.size(); i++) {\n        if(text[i] == ' ') {\n            if(word.size() >= 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n                result += word + \" \" + std::to_string(pos) + \" \";\n            }\n            pos = i + 1;\n            word = \"\";\n        } else {\n            word += text[i];\n        }\n    }\n    if(word.size() >= 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        result += word + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while (ss >> word) {\n        if (word.size() > 2 && word[word.size() - 2] == 'l' && word[word.size() - 1] == 'y') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string adverb = \"\";\n    std::string result = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            if (adverb.length() > 2 && adverb[adverb.length() - 2] == 'l' && adverb[adverb.length() - 1] == 'y') {\n                result += adverb + \" \" + std::to_string(pos) + \" \";\n            }\n            adverb = \"\";\n            pos = i + 1;\n        } else {\n            adverb += text[i];\n        }\n    }\n    if (adverb.length() > 2 && adverb[adverb.length() - 2] == 'l' && adverb[adverb.length() - 1] == 'y') {\n        result += adverb + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while(ss >> word) {\n        if(word.size() >= 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (text.substr(pos, i - pos).size() >= 3 && text.substr(pos, i - pos).substr(text.substr(pos, i - pos).size() - 2) == \"ly\") {\n                result += text.substr(pos, i - pos) + \" \";\n            }\n            pos = i + 1;\n        }\n    }\n    if (text.substr(pos, text.size() - pos).size() >= 3 && text.substr(pos, text.size() - pos).substr(text.substr(pos, text.size() - pos).size() - 2) == \"ly\") {\n        result += text.substr(pos, text.size() - pos) + \" \";\n    }\n    return result;",
    "    std::string adverb = \"\";\n    std::string result = \"\";\n    int pos = 0;\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == ' ') {\n            if(adverb.length() > 2 && adverb[adverb.length() - 1] == 'y' && adverb[adverb.length() - 2] == 'l') {\n                result += adverb + \" \" + std::to_string(pos) + \" \";\n            }\n            adverb = \"\";\n            pos = i + 1;\n        } else {\n            adverb += text[i];\n        }\n    }\n    if(adverb.length() > 2 && adverb[adverb.length() - 1] == 'y' && adverb[adverb.length() - 2] == 'l') {\n        result += adverb + \" \" + std::to_string(pos);\n    }\n    return result;",
    "    std::string adverb;\n    std::string::size_type pos = 0;\n    while (pos != std::string::npos) {\n        pos = text.find(\"ly\", pos);\n        if (pos != std::string::npos) {\n            adverb = text.substr(pos - 1, 3);\n            if (adverb[0] != ' ') {\n                pos = text.find(\"ly\", pos + 1);\n            }\n            else {\n                return adverb;\n            }\n        }\n    }\n    return \"\";",
    "    std::string adverb;\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (text[i] == 'l' && text[i + 1] == 'y') {\n            adverb = adverb + text[i - 1] + text[i] + text[i + 1];\n            i = i + 2;\n            while (text[i] != ' ') {\n                adverb = adverb + text[i];\n                i++;\n            }\n            adverb = adverb + \" \";\n        }\n        i++;\n    }\n    return adverb;",
    "    std::regex adverb_regex(\"\\\\b\\\\w+ly\\\\b\");\n    std::smatch adverb_match;\n    std::string adverb_string;\n    while (std::regex_search(text, adverb_match, adverb_regex)) {\n        adverb_string = adverb_match.str();\n        text = adverb_match.suffix().str();\n    }\n    return adverb_string;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n                result += word + \" \" + std::to_string(pos) + \" \";\n            }\n            word = \"\";\n            pos = i + 1;\n        }\n        else {\n            word += text[i];\n        }\n    }\n    if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        result += word + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string result;\n    std::stringstream ss(text);\n    std::string word;\n    std::string last_word;\n    int pos = 0;\n    while (ss >> word) {\n        if (word.length() >= 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n            result = word;\n            break;\n        }\n        last_word = word;\n        pos += word.length() + 1;\n    }\n    if (result.length() == 0) {\n        return \"\";\n    }\n    return result + \" \" + std::to_string(pos) + \" \" + std::to_string(pos + result.length() - 1);",
    "    std::string adverb;\n    std::string::size_type pos = 0;\n    while ((pos = text.find(\"ly\", pos)) != std::string::npos) {\n        adverb = text.substr(pos - 1, 3);\n        if (adverb[0] == ' ') {\n            return adverb;\n        }\n        ++pos;\n    }\n    return \"\";",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int pos = 0;\n    for(int i = 0; i < text.size(); i++) {\n        if(text[i] == ' ') {\n            if(word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n                result += word + \" \" + std::to_string(pos) + \" \";\n            }\n            word = \"\";\n            pos = i + 1;\n        } else {\n            word += text[i];\n        }\n    }\n    if(word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        result += word + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while(ss >> word) {\n        if(word.size() > 2 && word.substr(word.size() - 2) == \"ly\") {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    std::string adverb = \"\";\n    int position = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            word = text.substr(position, i - position);\n            if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n                adverb = word;\n                break;\n            }\n            position = i + 1;\n        }\n    }\n    if (adverb.length() > 0) {\n        result = adverb + \" \" + std::to_string(position);\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            pos++;\n            if (word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n                result += word + \" \" + std::to_string(pos) + \" \";\n            }\n            word = \"\";\n        } else {\n            word += text[i];\n        }\n    }\n    if (word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n        result += word + \" \" + std::to_string(pos + 1) + \" \";\n    }\n    return result;",
    "    std::string adverb;\n    int pos = 0;\n    std::stringstream ss(text);\n    std::string word;\n    while(ss >> word) {\n        if(word.length() > 2 && word.substr(word.length() - 2) == \"ly\") {\n            adverb = word;\n            break;\n        }\n        pos += word.length() + 1;\n    }\n    return adverb + \" \" + std::to_string(pos);",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] != ' ') {\n            word += text[i];\n        } else {\n            if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n                result += word + \" \" + std::to_string(pos) + \" \";\n            }\n            word = \"\";\n            pos = i + 1;\n        }\n    }\n    if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n        result += word + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] != ' ') {\n            word += text[i];\n        } else {\n            if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n                result += word + \" \" + std::to_string(pos) + \" \";\n            }\n            word = \"\";\n            pos = i + 1;\n        }\n    }\n    if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n        result += word + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while (ss >> word) {\n        if (word.size() > 2 && word.substr(word.size() - 2) == \"ly\") {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    std::string adverb;\n    std::string::size_type pos = 0;\n    while ((pos = text.find(\"ly\", pos)) != std::string::npos) {\n        adverb = text.substr(pos - 1, 3);\n        if (adverb[0] != ' ') {\n            adverb = text.substr(pos - 2, 4);\n        }\n        if (adverb[0] == ' ') {\n            result += adverb + \" \";\n        }\n        pos += 2;\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while (ss >> word) {\n        if (word.size() > 2 && word[word.size() - 2] == 'l' && word[word.size() - 1] == 'y') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string adverb;\n    int pos = 0;\n    std::stringstream ss(text);\n    std::string word;\n    while (ss >> word) {\n        if (word.length() > 2 && word.substr(word.length() - 2) == \"ly\") {\n            adverb = word;\n            break;\n        }\n        pos += word.length() + 1;\n    }\n    return adverb + \" \" + std::to_string(pos);",
    "    std::string result = \"\";\n    int pos = 0;\n    std::string word = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            if (word.length() >= 2 && word.substr(word.length() - 2, 2) == \"ly\") {\n                result += word + \" \";\n                pos = i - word.length();\n                break;\n            }\n            word = \"\";\n        }\n        else {\n            word += text[i];\n        }\n    }\n    if (result == \"\") {\n        return \"No adverbs ending with ly found!\";\n    }\n    return result + \" \" + std::to_string(pos);",
    "    std::string result;\n    std::stringstream ss(text);\n    std::string word;\n    int pos = 0;\n    while(ss >> word) {\n        if(word.size() > 2 && word.substr(word.size() - 2) == \"ly\") {\n            result = word;\n            break;\n        }\n        pos += word.size() + 1;\n    }\n    return result + \" \" + std::to_string(pos);",
    "    std::string adverbs;\n    std::string word;\n    std::stringstream ss(text);\n    while (ss >> word) {\n        if (word.size() >= 2 && word[word.size() - 2] == 'l' && word[word.size() - 1] == 'y') {\n            adverbs += word + \" \";\n        }\n    }\n    return adverbs;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while (ss >> word) {\n        if (word.size() > 2 && word[word.size() - 2] == 'l' && word[word.size() - 1] == 'y') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string adverb;\n    std::string result;\n    int pos = 0;\n    std::string::size_type pos_start = 0;\n    std::string::size_type pos_end = 0;\n    while (pos_start != std::string::npos) {\n        pos_start = text.find(\" \", pos_end);\n        if (pos_start != std::string::npos) {\n            pos_end = text.find(\" \", pos_start + 1);\n            if (pos_end != std::string::npos) {\n                adverb = text.substr(pos_start + 1, pos_end - pos_start - 1);\n                if (adverb.length() > 2 && adverb[adverb.length() - 1] == 'y' && adverb[adverb.length() - 2] == 'l') {\n                    result += adverb + \" \" + std::to_string(pos_start) + \" \" + std::to_string(pos_end) + \" \";\n                }\n            }\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string adverb = \"\";\n    std::string::size_type pos = 0;\n    while (pos != std::string::npos) {\n        pos = text.find(\"ly\", pos);\n        if (pos != std::string::npos) {\n            adverb = text.substr(pos - 1, 3);\n            if (adverb[0] != ' ' && adverb[0] != ',' && adverb[0] != '.') {\n                adverb = text.substr(pos - 2, 4);\n                if (adverb[0] != ' ' && adverb[0] != ',' && adverb[0] != '.') {\n                    adverb = text.substr(pos - 3, 5);\n                    if (adverb[0] != ' ' && adverb[0] != ',' && adverb[0] != '.') {\n                        adverb = text.substr(pos - 4, 6);\n                        if (adverb[0] != ' ' && adverb[0] != ',' && adverb[0] != '.') {\n                            adverb = text.substr(pos - 5, 7);\n                            if (adverb[0] != ' ' && adverb[0] != ',' && adverb[0] != '.') {\n                                adverb = text.substr(pos - 6, 8);\n                                if (adverb[0] != ' ' && adverb[0] != ',' && adverb[0] != '.') {\n                                    adverb = text.substr(pos - 7, 9);\n                                    if (adverb[0] != ' ' && adverb[0] != ',' && adverb[0] != '.') {\n                                        adverb = text.substr(pos - 8, 10);\n                                        if (adverb[0] != ' ' && adverb[0] != ',' && adverb[0] != '.') {\n                                            adverb = text.substr(pos - 9, 11);\n                                            if (adverb[0] != ' ' && adverb[0] != ',' && adverb[0] !=",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] != ' ') {\n            word += text[i];\n        } else {\n            if (word.length() >= 2) {\n                if (word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n                    result += word + \" \" + std::to_string(pos) + \" \";\n                }\n            }\n            word = \"\";\n            pos = i + 1;\n        }\n    }\n    if (word.length() >= 2) {\n        if (word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n            result += word + \" \" + std::to_string(pos) + \" \";\n        }\n    }\n    return result;",
    "    std::string adverb = \"\";\n    std::string result = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (adverb.size() > 2 && adverb[adverb.size() - 1] == 'y' && adverb[adverb.size() - 2] == 'l') {\n                result += adverb + \" \" + std::to_string(pos) + \" \";\n            }\n            adverb = \"\";\n            pos = i + 1;\n        } else {\n            adverb += text[i];\n        }\n    }\n    if (adverb.size() > 2 && adverb[adverb.size() - 1] == 'y' && adverb[adverb.size() - 2] == 'l') {\n        result += adverb + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] != ' ') {\n            word += text[i];\n        } else {\n            if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n                result += word + \" \" + std::to_string(pos) + \" \";\n            }\n            pos = i + 1;\n            word = \"\";\n        }\n    }\n    if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        result += word + \" \" + std::to_string(pos);\n    }\n    return result;",
    "    std::string adverb;\n    int pos = 0;\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == ' ') {\n            if(adverb.length() > 2 && adverb[adverb.length() - 1] == 'y' && adverb[adverb.length() - 2] == 'l') {\n                return adverb + \" \" + std::to_string(pos);\n            }\n            adverb = \"\";\n            pos = i + 1;\n        } else {\n            adverb += text[i];\n        }\n    }\n    if(adverb.length() > 2 && adverb[adverb.length() - 1] == 'y' && adverb[adverb.length() - 2] == 'l') {\n        return adverb + \" \" + std::to_string(pos);\n    }\n    return \"\";",
    "  std::string adverb;\n  std::string result;\n  std::string::size_type pos = 0;\n  while(pos != std::string::npos) {\n    pos = text.find(\"ly\", pos);\n    if(pos != std::string::npos) {\n      adverb = text.substr(pos - 1, 3);\n      if(adverb[0] == ' ' || adverb[0] == ',' || adverb[0] == '.') {\n        result = adverb;\n        break;\n      }\n      pos++;\n    }\n  }\n  return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] != ' ') {\n            word += text[i];\n        } else {\n            if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n                result += word + \" \";\n                result += std::to_string(pos) + \" \";\n            }\n            word = \"\";\n            pos = i + 1;\n        }\n    }\n    if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n        result += word + \" \";\n        result += std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            if (word.length() > 2 && word[word.length() - 2] == 'l' && word[word.length() - 1] == 'y') {\n                result += word + \" \" + std::to_string(pos) + \" \";\n            }\n            word = \"\";\n            pos = i + 1;\n        }\n        else {\n            word += text[i];\n        }\n    }\n    if (word.length() > 2 && word[word.length() - 2] == 'l' && word[word.length() - 1] == 'y') {\n        result += word + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string adverb;\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (text[i] == 'l' && text[i + 1] == 'y') {\n            adverb = text.substr(0, i + 2);\n            break;\n        }\n        i++;\n    }\n    return adverb;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] != ' ') {\n            word += text[i];\n        }\n        else {\n            if (word.length() > 2 && word[word.length() - 2] == 'l' && word[word.length() - 1] == 'y') {\n                result += word + \" \" + std::to_string(pos) + \" \";\n            }\n            word = \"\";\n            pos = i + 1;\n        }\n    }\n    if (word.length() > 2 && word[word.length() - 2] == 'l' && word[word.length() - 1] == 'y') {\n        result += word + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string adverb = \"\";\n    std::string adverb_list = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            if (adverb.length() > 2 && adverb[adverb.length() - 1] == 'y' && adverb[adverb.length() - 2] == 'l') {\n                adverb_list += adverb + \" \";\n            }\n            adverb = \"\";\n        } else {\n            adverb += text[i];\n        }\n    }\n    return adverb_list;",
    "    std::string adverb;\n    int pos = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            if (adverb.length() > 2 && adverb[adverb.length() - 1] == 'y' && adverb[adverb.length() - 2] == 'l') {\n                return adverb;\n            }\n            adverb = \"\";\n            pos = i + 1;\n        } else {\n            adverb += text[i];\n        }\n    }\n    return \"\";",
    "    std::string adverb;\n    std::string result;\n    int position = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            if (adverb.length() > 2 && adverb[adverb.length() - 1] == 'y' && adverb[adverb.length() - 2] == 'l') {\n                result += adverb + \" \" + std::to_string(position) + \" \";\n            }\n            adverb = \"\";\n            position = i + 1;\n        } else {\n            adverb += text[i];\n        }\n    }\n    if (adverb.length() > 2 && adverb[adverb.length() - 1] == 'y' && adverb[adverb.length() - 2] == 'l') {\n        result += adverb + \" \" + std::to_string(position) + \" \";\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n                result += word + \" \" + std::to_string(pos) + \" \";\n            }\n            word = \"\";\n            pos = i + 1;\n        } else {\n            word += text[i];\n        }\n    }\n    if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        result += word + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while(ss >> word) {\n        if(word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n            result = word;\n            break;\n        }\n    }\n    return result;",
    "    std::string adverb;\n    std::string result;\n    int pos = 0;\n    std::stringstream ss(text);\n    while (ss >> adverb) {\n        if (adverb.length() > 2 && adverb.substr(adverb.length() - 2) == \"ly\") {\n            result += adverb + \" \";\n            result += std::to_string(pos) + \" \";\n        }\n        pos += adverb.length() + 1;\n    }\n    return result;",
    "    std::string adverb = \"\";\n    int adverb_position = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (adverb.size() > 0) {\n                if (adverb[adverb.size() - 1] == 'y' && adverb[adverb.size() - 2] == 'l') {\n                    return adverb + \" \" + std::to_string(adverb_position);\n                }\n                adverb = \"\";\n            }\n        } else {\n            if (adverb.size() == 0) {\n                adverb_position = i;\n            }\n            adverb += text[i];\n        }\n    }\n    if (adverb.size() > 0) {\n        if (adverb[adverb.size() - 1] == 'y' && adverb[adverb.size() - 2] == 'l') {\n            return adverb + \" \" + std::to_string(adverb_position);\n        }\n    }\n    return \"\";",
    "    std::string result = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (text.substr(pos, i - pos).size() >= 3) {\n                if (text.substr(pos, i - pos).substr(text.substr(pos, i - pos).size() - 2, 2) == \"ly\") {\n                    result += text.substr(pos, i - pos) + \" \";\n                }\n            }\n            pos = i + 1;\n        }\n    }\n    if (text.substr(pos, text.size() - pos).size() >= 3) {\n        if (text.substr(pos, text.size() - pos).substr(text.substr(pos, text.size() - pos).size() - 2, 2) == \"ly\") {\n            result += text.substr(pos, text.size() - pos);\n        }\n    }\n    return result;",
    "  std::string result;\n  std::string word;\n  std::stringstream ss(text);\n  while (ss >> word) {\n    if (word.size() > 2 && word.substr(word.size() - 2) == \"ly\") {\n      result += word + \" \";\n    }\n  }\n  return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] != ' ') {\n            word += text[i];\n        } else {\n            if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n                result += word + \" \" + std::to_string(pos) + \" \";\n            }\n            word = \"\";\n            pos = i + 1;\n        }\n    }\n    if (word.size() > 2 && word[word.size() - 1] == 'y' && word[word.size() - 2] == 'l') {\n        result += word + \" \" + std::to_string(pos) + \" \";\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while (ss >> word) {\n        if (word.size() >= 2 && word[word.size() - 2] == 'l' && word[word.size() - 1] == 'y') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string adverb = \"\";\n    int pos = 0;\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            if (adverb.length() > 2 && adverb[adverb.length() - 2] == 'l' && adverb[adverb.length() - 1] == 'y') {\n                return adverb + \" \" + std::to_string(pos);\n            }\n            adverb = \"\";\n            pos = i + 1;\n        } else {\n            adverb += text[i];\n        }\n        i++;\n    }\n    if (adverb.length() > 2 && adverb[adverb.length() - 2] == 'l' && adverb[adverb.length() - 1] == 'y') {\n        return adverb + \" \" + std::to_string(pos);\n    }\n    return \"\";",
    "    std::string adverb;\n    int pos = 0;\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (text[i] == 'l' && text[i + 1] == 'y') {\n            int j = i;\n            while (text[j] != ' ') {\n                adverb += text[j];\n                j++;\n            }\n            pos = i;\n            break;\n        }\n        i++;\n    }\n    return adverb + \" \" + std::to_string(pos);",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while (ss >> word) {\n        if (word.size() > 2 && word[word.size() - 2] == 'l' && word[word.size() - 1] == 'y') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::regex pattern(\"\\\\w+ly\");\n    std::smatch matches;\n    std::string result;\n    if (std::regex_search(text, matches, pattern)) {\n        result = matches.str();\n    }\n    return result;",
    "    std::string result;\n    std::string adverb;\n    std::string::size_type pos = 0;\n    while(pos != std::string::npos) {\n        pos = text.find(\"ly\", pos);\n        if(pos != std::string::npos) {\n            adverb = text.substr(pos - 1, 3);\n            if(adverb[0] != ' ') {\n                pos = text.find(\"ly\", pos + 1);\n                continue;\n            }\n            result += adverb + \" \";\n            pos += 2;\n        }\n    }\n    return result;",
    "  std::string result;\n  std::string word;\n  std::stringstream ss(text);\n  while (ss >> word) {\n    if (word.size() >= 2 && word.substr(word.size() - 2) == \"ly\") {\n      result = word;\n      break;\n    }\n  }\n  return result;",
    "    std::string result = \"\";\n    int pos = 0;\n    while (text.find(\"ly\", pos) != std::string::npos) {\n        pos = text.find(\"ly\", pos);\n        if (pos > 0 && text[pos - 1] != ' ') {\n            pos++;\n            continue;\n        }\n        if (pos + 2 < text.length() && text[pos + 2] != ' ') {\n            pos++;\n            continue;\n        }\n        result += std::to_string(pos) + \" \";\n        pos++;\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while (ss >> word) {\n        if (word.size() > 2 && word.substr(word.size() - 2) == \"ly\") {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while (ss >> word) {\n        if (word.size() > 2 && word.substr(word.size() - 2) == \"ly\") {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while (ss >> word) {\n        if (word.size() >= 2 && word.substr(word.size() - 2) == \"ly\") {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(text);\n    while (ss >> word) {\n        if (word.size() >= 2 && word[word.size() - 2] == 'l' && word[word.size() - 1] == 'y') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] != ' ') {\n            word += text[i];\n        } else {\n            if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n                result += word + \" \" + std::to_string(i - word.length()) + \" \";\n            }\n            word = \"\";\n        }\n    }\n    if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n        result += word + \" \" + std::to_string(text.length() - word.length());\n    }\n    return result;",
    "    std::string adverb;\n    int pos = 0;\n    std::stringstream ss(text);\n    while(ss >> adverb) {\n        if(adverb.length() > 2 && adverb.substr(adverb.length() - 2) == \"ly\") {\n            return adverb;\n        }\n        pos++;\n    }\n    return \"\";",
    "    std::string result = \"\";\n    int pos = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            if (text.substr(pos, i - pos).length() > 2 && text.substr(pos, i - pos).substr(text.substr(pos, i - pos).length() - 2, 2) == \"ly\") {\n                result += text.substr(pos, i - pos) + \" \";\n            }\n            pos = i + 1;\n        }\n    }\n    if (text.substr(pos, text.length() - pos).length() > 2 && text.substr(pos, text.length() - pos).substr(text.substr(pos, text.length() - pos).length() - 2, 2) == \"ly\") {\n        result += text.substr(pos, text.length() - pos) + \" \";\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    int position = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n                result += word + \" \" + std::to_string(position) + \" \";\n            }\n            word = \"\";\n            position = i + 1;\n        }\n        else {\n            word += text[i];\n        }\n    }\n    if (word.length() > 2 && word[word.length() - 1] == 'y' && word[word.length() - 2] == 'l') {\n        result += word + \" \" + std::to_string(position) + \" \";\n    }\n    return result;"
  ]
}