{
  "name": "mbpp_237_check_occurences",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a vector of tuples and returns a map mapping each unique tuple to the number of times it occurs in the vector.\nstd::map<long,long> check_occurences(std::vector<long> test_list) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_237_check_occurences.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = check_occurences;\n    assert(candidate((std::vector<long>({(std::tuple<long, long>)std::make_tuple(3, 1), (std::tuple<long, long>)std::make_tuple(1, 3), (std::tuple<long, long>)std::make_tuple(2, 5), (std::tuple<long, long>)std::make_tuple(5, 2), (std::tuple<long, long>)std::make_tuple(6, 3)}))) == (std::map<long,long>({{std::make_tuple(1, 3), 2}, {std::make_tuple(2, 5), 2}, {std::make_tuple(3, 6), 1}})));\n    assert(candidate((std::vector<long>({(std::tuple<long, long>)std::make_tuple(4, 2), (std::tuple<long, long>)std::make_tuple(2, 4), (std::tuple<long, long>)std::make_tuple(3, 6), (std::tuple<long, long>)std::make_tuple(6, 3), (std::tuple<long, long>)std::make_tuple(7, 4)}))) == (std::map<long,long>({{std::make_tuple(2, 4), 2}, {std::make_tuple(3, 6), 2}, {std::make_tuple(4, 7), 1}})));\n    assert(candidate((std::vector<long>({(std::tuple<long, long>)std::make_tuple(13, 2), (std::tuple<long, long>)std::make_tuple(11, 23), (std::tuple<long, long>)std::make_tuple(12, 25), (std::tuple<long, long>)std::make_tuple(25, 12), (std::tuple<long, long>)std::make_tuple(16, 23)}))) == (std::map<long,long>({{std::make_tuple(2, 13), 1}, {std::make_tuple(11, 23), 1}, {std::make_tuple(12, 25), 2}, {std::make_tuple(16, 23), 1}})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::map<long,long> occurences;\n    for (auto i: test_list) {\n        occurences[i]++;\n    }\n    return occurences;",
    "    std::map<long,long> occurences;\n    for(auto i=0;i<test_list.size();i++) {\n        occurences[test_list[i]]++;\n    }\n    return occurences;",
    "    std::map<long,long> occurences;\n    for(long i=0;i<test_list.size();i++) {\n        occurences[test_list[i]]++;\n    }\n    return occurences;",
    "    std::map<long,long> test_map;\n    for(auto i : test_list) {\n        if(test_map.find(i) == test_map.end()) {\n            test_map[i] = 1;\n        }\n        else {\n            test_map[i] += 1;\n        }\n    }\n    return test_map;",
    "    std::map<long,long> occurences;\n    for(long i=0;i<test_list.size();i++) {\n        if(occurences.find(test_list[i]) == occurences.end()) {\n            occurences[test_list[i]] = 1;\n        }\n        else {\n            occurences[test_list[i]] += 1;\n        }\n    }\n    return occurences;",
    "    std::map<long,long> occurences;\n    for(int i=0;i<test_list.size();i++) {\n        occurences[test_list[i]]++;\n    }\n    return occurences;",
    "    std::map<long,long> occurences;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (occurences.find(test_list[i]) == occurences.end()) {\n            occurences[test_list[i]] = 1;\n        }\n        else {\n            occurences[test_list[i]] += 1;\n        }\n    }\n    return occurences;",
    "    std::map<long,long> occurences;\n    for(long i=0;i<test_list.size();i++) {\n        occurences[test_list[i]]++;\n    }\n    return occurences;",
    "    std::map<long,long> result;\n    for(auto i:test_list) {\n        result[i]++;\n    }\n    return result;",
    "    std::map<long,long> occurences;\n    for(auto i:test_list) {\n        occurences[i]++;\n    }\n    return occurences;",
    "    std::map<long,long> occurences;\n    for(auto i : test_list) {\n        occurences[i]++;\n    }\n    return occurences;",
    "    std::map<long,long> occurences;\n    for(long i=0;i<test_list.size();i++) {\n        occurences[test_list[i]]++;\n    }\n    return occurences;",
    "    std::map<long,long> occurences;\n    for(long i=0;i<test_list.size();i++) {\n        occurences[test_list[i]]++;\n    }\n    return occurences;",
    "    std::map<long,long> occurences;\n    for(int i=0;i<test_list.size();i++) {\n        occurences[test_list[i]]++;\n    }\n    return occurences;",
    "  std::map<long,long> occurences;\n  for(auto i: test_list) {\n    occurences[i]++;\n  }\n  return occurences;",
    "    std::map<long,long> occurences;\n    for(long i = 0; i < test_list.size(); i++) {\n        if(occurences.find(test_list[i]) == occurences.end()) {\n            occurences[test_list[i]] = 1;\n        } else {\n            occurences[test_list[i]] += 1;\n        }\n    }\n    return occurences;",
    "    std::map<long,long> occurences;\n    for(auto i:test_list) {\n        occurences[i]++;\n    }\n    return occurences;",
    "    std::map<long,long> occurences;\n    for(long i=0;i<test_list.size();i++) {\n        if(occurences.find(test_list[i]) == occurences.end()) {\n            occurences[test_list[i]] = 1;\n        }\n        else {\n            occurences[test_list[i]]++;\n        }\n    }\n    return occurences;",
    "    std::map<long,long> occurences;\n    for(long i = 0; i < test_list.size(); i++) {\n        occurences[test_list[i]]++;\n    }\n    return occurences;",
    "    std::map<long,long> occurences;\n    for(auto i : test_list) {\n        occurences[i]++;\n    }\n    return occurences;"
  ]
}