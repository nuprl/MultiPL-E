{
  "name": "mbpp_430_parabola_directrix",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the directrix of a parabola.\nlong parabola_directrix(long a, long b, long c) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_430_parabola_directrix.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = parabola_directrix;\n    assert(candidate((5), (3), (2)) == (-198));\n    assert(candidate((9), (8), (4)) == (-2336));\n    assert(candidate((2), (4), (6)) == (-130));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    return -(b*b)/(4.0*a) + c;",
    "    return -b/(2*a);",
    "    return -(b*b)/(4*a) + c;",
    "    return -b/(2*a);",
    "    return -(b*b)/(4*a) + c;",
    "    return -(b * b) / (4 * a) + c;",
    "    return -(b*b - 4*a*c)/(4*a);",
    "    return -(4*a*c)/(b*b);",
    "  return -b/(2*a);",
    "    return -b/(2*a);",
    "    return -(b*b)/(4*a) + c;",
    "  return -(b*b)/(4*a) + c;",
    "    return -(b*b)/(4*a) + c;",
    "    return -(b*b)/(4*a) + c;",
    "    // Write your code here\n    // To print results to the standard output you can use printf()\n    // Example: printf(\"%s\", \"Hello world!\");\n    return -b/(2*a);",
    "    return -b/(2*a);",
    "    return -(b*b - 4*a*c)/(4*a);",
    "    return -b / (2 * a);",
    "  return -(b*b)/(4*a) + c;",
    "    return -(b*b - 4*a*c)/(4*a);"
  ]
}