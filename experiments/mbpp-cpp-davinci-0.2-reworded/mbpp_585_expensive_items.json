{
  "name": "mbpp_585_expensive_items",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_float{\n    std::string f0;\n    float f1;    Union_std_string_float(std::string _f0) : f0(_f0) {}\n    Union_std_string_float(float _f1) : f1(_f1) {}\n    ~Union_std_string_float() {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }    bool operator==(float f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the n most expensive items in a given dataset.\nstd::vector<std::map<std::string,Union_std_string_float>> expensive_items(std::vector<std::map<std::string,Union_std_string_float>> items, long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_585_expensive_items.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = expensive_items;\n    assert(candidate((std::vector<std::map<std::string,Union_std_string_float>>({(std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-1\"}, {\"price\", 101.1}}), (std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-2\"}, {\"price\", 555.22}})})), (1)) == (std::vector<std::map<std::string,Union_std_string_float>>({(std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-2\"}, {\"price\", 555.22}})})));\n    assert(candidate((std::vector<std::map<std::string,Union_std_string_float>>({(std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-1\"}, {\"price\", 101.1}}), (std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-2\"}, {\"price\", 555.22}}), (std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-3\"}, {\"price\", 45.09}})})), (2)) == (std::vector<std::map<std::string,Union_std_string_float>>({(std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-2\"}, {\"price\", 555.22}}), (std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-1\"}, {\"price\", 101.1}})})));\n    assert(candidate((std::vector<std::map<std::string,Union_std_string_float>>({(std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-1\"}, {\"price\", 101.1}}), (std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-2\"}, {\"price\", 555.22}}), (std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-3\"}, {\"price\", 45.09}}), (std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-4\"}, {\"price\", 22.75}})})), (1)) == (std::vector<std::map<std::string,Union_std_string_float>>({(std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-2\"}, {\"price\", 555.22}})})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<float> prices;\n    for (auto item : items) {\n        prices.push_back(item[\"price\"]);\n    }\n    std::sort(prices.begin(), prices.end());\n    std::reverse(prices.begin(), prices.end());\n    for (int i = 0; i < n; i++) {\n        for (auto item : items) {\n            if (item[\"price\"] == prices[i]) {\n                result.push_back(item);\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<std::string,float>> item_price;\n    for (auto item : items) {\n        for (auto it : item) {\n            if (it.first == \"price\") {\n                item_price.push_back(std::make_pair(it.first, it.second.f1));\n            }\n        }\n    }\n    std::sort(item_price.begin(), item_price.end(), [](std::pair<std::string,float> a, std::pair<std::string,float> b) {\n        return a.second > b.second;\n    });\n    for (int i = 0; i < n; i++) {\n        for (auto item : items) {\n            for (auto it : item) {\n                if (it.first == \"price\" && it.second.f1 == item_price[i].second) {\n                    result.push_back(item);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator itr;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator itr1;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator itr2;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator itr3;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator itr4;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator itr5;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator itr6;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator itr7;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator itr8;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator itr9;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator itr10;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator itr11;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator itr12;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator itr13;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator itr14;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator itr15;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator itr16;\n    std::vector<std::map<std::string",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it;\n    std::map<std::string,Union_std_string_float>::iterator it2;\n    std::vector<float> price;\n    for(it = items.begin(); it != items.end(); it++) {\n        for(it2 = (*it).begin(); it2 != (*it).end(); it2++) {\n            if((*it2).first == \"price\") {\n                price.push_back((*it2).second.f1);\n            }\n        }\n    }\n    std::sort(price.begin(), price.end());\n    std::vector<float>::iterator it3;\n    it3 = price.end();\n    it3--;\n    for(int i = 0; i < n; i++) {\n        for(it = items.begin(); it != items.end(); it++) {\n            for(it2 = (*it).begin(); it2 != (*it).end(); it2++) {\n                if((*it2).first == \"price\" && (*it2).second.f1 == *it3) {\n                    result.push_back(*it);\n                }\n            }\n        }\n        it3--;\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](const std::map<std::string,Union_std_string_float>& a, const std::map<std::string,Union_std_string_float>& b) {\n        return a.find(\"price\")->second.f1 > b.find(\"price\")->second.f1;\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<std::string,float>> temp;\n    for(auto i:items){\n        for(auto j:i){\n            if(j.first==\"price\"){\n                temp.push_back(std::make_pair(i[\"name\"],j.second.f1));\n            }\n        }\n    }\n    std::sort(temp.begin(),temp.end(),[](std::pair<std::string,float> a,std::pair<std::string,float> b){\n        return a.second>b.second;\n    });\n    for(int i=0;i<n;i++){\n        for(auto j:items){\n            if(j[\"name\"]==temp[i].first){\n                result.push_back(j);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it;\n    std::map<std::string,Union_std_string_float>::iterator it2;\n    std::vector<float> price;\n    for(it = items.begin(); it != items.end(); it++) {\n        for(it2 = it->begin(); it2 != it->end(); it2++) {\n            if(it2->first == \"price\") {\n                price.push_back(it2->second.f1);\n            }\n        }\n    }\n    std::sort(price.begin(), price.end());\n    std::reverse(price.begin(), price.end());\n    for(int i = 0; i < n; i++) {\n        for(it = items.begin(); it != items.end(); it++) {\n            for(it2 = it->begin(); it2 != it->end(); it2++) {\n                if(it2->first == \"price\") {\n                    if(it2->second.f1 == price[i]) {\n                        result.push_back(*it);\n                    }\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(),items.end(),[](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b){\n        return a[\"price\"] > b[\"price\"];\n    });\n    for(int i = 0; i < n; i++){\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<float, std::map<std::string,Union_std_string_float>>> temp;\n    for(auto item : items) {\n        temp.push_back(std::make_pair(item[\"price\"], item));\n    }\n    std::sort(temp.begin(), temp.end());\n    for(int i = 0; i < n; i++) {\n        result.push_back(temp[i].second);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it;\n    std::map<std::string,Union_std_string_float>::iterator it2;\n    std::vector<float> prices;\n    for (it = items.begin(); it != items.end(); ++it) {\n        for (it2 = it->begin(); it2 != it->end(); ++it2) {\n            if (it2->first == \"price\") {\n                prices.push_back(it2->second.f1);\n            }\n        }\n    }\n    std::sort(prices.begin(), prices.end());\n    std::reverse(prices.begin(), prices.end());\n    std::vector<float>::iterator it3;\n    for (it3 = prices.begin(); it3 != prices.end(); ++it3) {\n        for (it = items.begin(); it != items.end(); ++it) {\n            for (it2 = it->begin(); it2 != it->end(); ++it2) {\n                if (it2->first == \"price\") {\n                    if (it2->second.f1 == *it3) {\n                        result.push_back(*it);\n                    }\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it;\n    std::map<std::string,Union_std_string_float>::iterator it2;\n    std::map<std::string,Union_std_string_float> temp;\n    std::vector<float> prices;\n    for(it = items.begin(); it != items.end(); it++) {\n        for(it2 = it->begin(); it2 != it->end(); it2++) {\n            if(it2->first == \"price\") {\n                prices.push_back(it2->second.f1);\n            }\n        }\n    }\n    std::sort(prices.begin(), prices.end());\n    std::reverse(prices.begin(), prices.end());\n    std::vector<float>::iterator it3;\n    for(it3 = prices.begin(); it3 != prices.end(); it3++) {\n        for(it = items.begin(); it != items.end(); it++) {\n            for(it2 = it->begin(); it2 != it->end(); it2++) {\n                if(it2->first == \"price\") {\n                    if(it2->second.f1 == *it3) {\n                        result.push_back(*it);\n                    }\n                }\n            }\n        }\n    }\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it4;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it5;\n    std::map<std::string,Union_std_string_float>::iterator it6;\n    std::map<std::string,Union_std_string_float>::iterator it7;\n    for(it4 = result.begin(); it4 != result.end(); it4++) {\n        for(it5 = it4 + 1; it5 != result.end(); it5++) {\n            if(it4->size() == it5->size()) {\n                bool flag = true;\n",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it;\n    std::map<std::string,Union_std_string_float>::iterator it1;\n    std::vector<float> price;\n    for(it=items.begin();it!=items.end();it++){\n        for(it1=(*it).begin();it1!=(*it).end();it1++){\n            if((*it1).first==\"price\"){\n                price.push_back((*it1).second.f1);\n            }\n        }\n    }\n    std::sort(price.begin(),price.end());\n    std::reverse(price.begin(),price.end());\n    for(int i=0;i<n;i++){\n        for(it=items.begin();it!=items.end();it++){\n            for(it1=(*it).begin();it1!=(*it).end();it1++){\n                if((*it1).first==\"price\" && (*it1).second.f1==price[i]){\n                    result.push_back(*it);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it2;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it3;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it4;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it5;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it6;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it7;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it8;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it9;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it10;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it11;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it12;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it13;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it14;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it15;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it16;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it17;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it18;\n    std",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<float,std::map<std::string,Union_std_string_float>>> temp;\n    for(auto i : items) {\n        temp.push_back(std::make_pair(i[\"price\"],i));\n    }\n    std::sort(temp.begin(),temp.end());\n    for(int i = temp.size() - 1; i >= temp.size() - n; i--) {\n        result.push_back(temp[i].second);\n    }\n    return result;"
  ]
}