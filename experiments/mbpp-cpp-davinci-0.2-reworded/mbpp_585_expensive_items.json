{
  "name": "mbpp_585_expensive_items",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_float{\n    std::string f0;\n    float f1;    Union_std_string_float(std::string _f0) : f0(_f0) {}\n    Union_std_string_float(float _f1) : f1(_f1) {}\n    ~Union_std_string_float() {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }    bool operator==(float f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the n most expensive items in a given dataset.\nstd::vector<std::map<std::string,Union_std_string_float>> expensive_items(std::vector<std::map<std::string,Union_std_string_float>> items, long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_585_expensive_items.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = expensive_items;\n    assert(candidate((std::vector<std::map<std::string,Union_std_string_float>>({(std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-1\"}, {\"price\", 101.1}}), (std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-2\"}, {\"price\", 555.22}})})), (1)) == (std::vector<std::map<std::string,Union_std_string_float>>({(std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-2\"}, {\"price\", 555.22}})})));\n    assert(candidate((std::vector<std::map<std::string,Union_std_string_float>>({(std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-1\"}, {\"price\", 101.1}}), (std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-2\"}, {\"price\", 555.22}}), (std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-3\"}, {\"price\", 45.09}})})), (2)) == (std::vector<std::map<std::string,Union_std_string_float>>({(std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-2\"}, {\"price\", 555.22}}), (std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-1\"}, {\"price\", 101.1}})})));\n    assert(candidate((std::vector<std::map<std::string,Union_std_string_float>>({(std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-1\"}, {\"price\", 101.1}}), (std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-2\"}, {\"price\", 555.22}}), (std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-3\"}, {\"price\", 45.09}}), (std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-4\"}, {\"price\", 22.75}})})), (1)) == (std::vector<std::map<std::string,Union_std_string_float>>({(std::map<std::string,std::string>)std::map<std::string,std::string>({{\"name\", \"Item-2\"}, {\"price\", 555.22}})})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<float> prices;\n    for (auto item : items) {\n        prices.push_back(item[\"price\"]);\n    }\n    std::sort(prices.begin(), prices.end());\n    std::reverse(prices.begin(), prices.end());\n    for (int i = 0; i < n; i++) {\n        for (auto item : items) {\n            if (item[\"price\"] == prices[i]) {\n                result.push_back(item);\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<std::string,float>> item_price;\n    for (auto item : items) {\n        for (auto it : item) {\n            if (it.first == \"price\") {\n                item_price.push_back(std::make_pair(it.first, it.second.f1));\n            }\n        }\n    }\n    std::sort(item_price.begin(), item_price.end(), [](std::pair<std::string,float> a, std::pair<std::string,float> b) {\n        return a.second > b.second;\n    });\n    for (int i = 0; i < n; i++) {\n        for (auto item : items) {\n            for (auto it : item) {\n                if (it.first == \"price\" && it.second.f1 == item_price[i].second) {\n                    result.push_back(item);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator itr;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator itr1;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator itr2;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator itr3;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator itr4;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator itr5;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator itr6;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator itr7;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator itr8;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator itr9;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator itr10;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator itr11;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator itr12;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator itr13;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator itr14;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator itr15;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator itr16;\n    std::vector<std::map<std::string",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it;\n    std::map<std::string,Union_std_string_float>::iterator it2;\n    std::vector<float> price;\n    for(it = items.begin(); it != items.end(); it++) {\n        for(it2 = (*it).begin(); it2 != (*it).end(); it2++) {\n            if((*it2).first == \"price\") {\n                price.push_back((*it2).second.f1);\n            }\n        }\n    }\n    std::sort(price.begin(), price.end());\n    std::vector<float>::iterator it3;\n    it3 = price.end();\n    it3--;\n    for(int i = 0; i < n; i++) {\n        for(it = items.begin(); it != items.end(); it++) {\n            for(it2 = (*it).begin(); it2 != (*it).end(); it2++) {\n                if((*it2).first == \"price\" && (*it2).second.f1 == *it3) {\n                    result.push_back(*it);\n                }\n            }\n        }\n        it3--;\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](const std::map<std::string,Union_std_string_float>& a, const std::map<std::string,Union_std_string_float>& b) {\n        return a.find(\"price\")->second.f1 > b.find(\"price\")->second.f1;\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<std::string,float>> temp;\n    for(auto i:items){\n        for(auto j:i){\n            if(j.first==\"price\"){\n                temp.push_back(std::make_pair(i[\"name\"],j.second.f1));\n            }\n        }\n    }\n    std::sort(temp.begin(),temp.end(),[](std::pair<std::string,float> a,std::pair<std::string,float> b){\n        return a.second>b.second;\n    });\n    for(int i=0;i<n;i++){\n        for(auto j:items){\n            if(j[\"name\"]==temp[i].first){\n                result.push_back(j);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it;\n    std::map<std::string,Union_std_string_float>::iterator it2;\n    std::vector<float> price;\n    for(it = items.begin(); it != items.end(); it++) {\n        for(it2 = it->begin(); it2 != it->end(); it2++) {\n            if(it2->first == \"price\") {\n                price.push_back(it2->second.f1);\n            }\n        }\n    }\n    std::sort(price.begin(), price.end());\n    std::reverse(price.begin(), price.end());\n    for(int i = 0; i < n; i++) {\n        for(it = items.begin(); it != items.end(); it++) {\n            for(it2 = it->begin(); it2 != it->end(); it2++) {\n                if(it2->first == \"price\") {\n                    if(it2->second.f1 == price[i]) {\n                        result.push_back(*it);\n                    }\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(),items.end(),[](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b){\n        return a[\"price\"] > b[\"price\"];\n    });\n    for(int i = 0; i < n; i++){\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<float, std::map<std::string,Union_std_string_float>>> temp;\n    for(auto item : items) {\n        temp.push_back(std::make_pair(item[\"price\"], item));\n    }\n    std::sort(temp.begin(), temp.end());\n    for(int i = 0; i < n; i++) {\n        result.push_back(temp[i].second);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it;\n    std::map<std::string,Union_std_string_float>::iterator it2;\n    std::vector<float> prices;\n    for (it = items.begin(); it != items.end(); ++it) {\n        for (it2 = it->begin(); it2 != it->end(); ++it2) {\n            if (it2->first == \"price\") {\n                prices.push_back(it2->second.f1);\n            }\n        }\n    }\n    std::sort(prices.begin(), prices.end());\n    std::reverse(prices.begin(), prices.end());\n    std::vector<float>::iterator it3;\n    for (it3 = prices.begin(); it3 != prices.end(); ++it3) {\n        for (it = items.begin(); it != items.end(); ++it) {\n            for (it2 = it->begin(); it2 != it->end(); ++it2) {\n                if (it2->first == \"price\") {\n                    if (it2->second.f1 == *it3) {\n                        result.push_back(*it);\n                    }\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it;\n    std::map<std::string,Union_std_string_float>::iterator it2;\n    std::map<std::string,Union_std_string_float> temp;\n    std::vector<float> prices;\n    for(it = items.begin(); it != items.end(); it++) {\n        for(it2 = it->begin(); it2 != it->end(); it2++) {\n            if(it2->first == \"price\") {\n                prices.push_back(it2->second.f1);\n            }\n        }\n    }\n    std::sort(prices.begin(), prices.end());\n    std::reverse(prices.begin(), prices.end());\n    std::vector<float>::iterator it3;\n    for(it3 = prices.begin(); it3 != prices.end(); it3++) {\n        for(it = items.begin(); it != items.end(); it++) {\n            for(it2 = it->begin(); it2 != it->end(); it2++) {\n                if(it2->first == \"price\") {\n                    if(it2->second.f1 == *it3) {\n                        result.push_back(*it);\n                    }\n                }\n            }\n        }\n    }\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it4;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it5;\n    std::map<std::string,Union_std_string_float>::iterator it6;\n    std::map<std::string,Union_std_string_float>::iterator it7;\n    for(it4 = result.begin(); it4 != result.end(); it4++) {\n        for(it5 = it4 + 1; it5 != result.end(); it5++) {\n            if(it4->size() == it5->size()) {\n                bool flag = true;\n",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it;\n    std::map<std::string,Union_std_string_float>::iterator it1;\n    std::vector<float> price;\n    for(it=items.begin();it!=items.end();it++){\n        for(it1=(*it).begin();it1!=(*it).end();it1++){\n            if((*it1).first==\"price\"){\n                price.push_back((*it1).second.f1);\n            }\n        }\n    }\n    std::sort(price.begin(),price.end());\n    std::reverse(price.begin(),price.end());\n    for(int i=0;i<n;i++){\n        for(it=items.begin();it!=items.end();it++){\n            for(it1=(*it).begin();it1!=(*it).end();it1++){\n                if((*it1).first==\"price\" && (*it1).second.f1==price[i]){\n                    result.push_back(*it);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it2;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it3;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it4;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it5;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it6;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it7;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it8;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it9;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it10;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it11;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it12;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it13;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it14;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it15;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it16;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it17;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it18;\n    std",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<float,std::map<std::string,Union_std_string_float>>> temp;\n    for(auto i : items) {\n        temp.push_back(std::make_pair(i[\"price\"],i));\n    }\n    std::sort(temp.begin(),temp.end());\n    for(int i = temp.size() - 1; i >= temp.size() - n; i--) {\n        result.push_back(temp[i].second);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<std::string, float>> temp;\n    for (auto i = items.begin(); i != items.end(); i++) {\n        for (auto j = i->begin(); j != i->end(); j++) {\n            if (j->first == \"price\") {\n                temp.push_back(std::make_pair(i->at(\"name\"), j->second.f1));\n            }\n        }\n    }\n    std::sort(temp.begin(), temp.end(), [](auto &left, auto &right) {\n        return left.second > right.second;\n    });\n    for (auto i = temp.begin(); i != temp.end(); i++) {\n        for (auto j = items.begin(); j != items.end(); j++) {\n            if (j->at(\"name\") == i->first) {\n                result.push_back(*j);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::map<std::string,Union_std_string_float> temp;\n    std::vector<float> prices;\n    for(auto i : items){\n        for(auto j : i){\n            if(j.first == \"price\"){\n                prices.push_back(j.second.f1);\n            }\n        }\n    }\n    std::sort(prices.begin(),prices.end());\n    std::reverse(prices.begin(),prices.end());\n    for(int i = 0; i < n; i++){\n        for(auto j : items){\n            for(auto k : j){\n                if(k.first == \"price\"){\n                    if(k.second.f1 == prices[i]){\n                        temp = j;\n                        result.push_back(temp);\n                    }\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<std::string, float>> temp;\n    for (auto item : items) {\n        for (auto it : item) {\n            if (it.first == \"price\") {\n                temp.push_back(std::make_pair(item[\"name\"], it.second.f1));\n            }\n        }\n    }\n    std::sort(temp.begin(), temp.end(), [](std::pair<std::string, float> a, std::pair<std::string, float> b) {\n        return a.second > b.second;\n    });\n    for (int i = 0; i < n; i++) {\n        for (auto item : items) {\n            if (item[\"name\"] == temp[i].first) {\n                result.push_back(item);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::map<std::string,Union_std_string_float> item;\n    std::vector<float> prices;\n    for (auto i : items) {\n        prices.push_back(i[\"price\"]);\n    }\n    std::sort(prices.begin(), prices.end(), std::greater<float>());\n    for (int i = 0; i < n; i++) {\n        for (auto j : items) {\n            if (j[\"price\"] == prices[i]) {\n                item = j;\n                result.push_back(item);\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (long i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<std::string,float>> v;\n    for(auto i:items){\n        for(auto j:i){\n            if(j.first == \"price\"){\n                v.push_back(std::make_pair(i[\"name\"],j.second.f1));\n            }\n        }\n    }\n    std::sort(v.begin(),v.end(),[](std::pair<std::string,float> a,std::pair<std::string,float> b){\n        return a.second > b.second;\n    });\n    for(int i=0;i<n;i++){\n        std::map<std::string,Union_std_string_float> m;\n        m[\"name\"] = v[i].first;\n        m[\"price\"] = v[i].second;\n        result.push_back(m);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<std::string,Union_std_string_float>> prices;\n    for (auto item : items) {\n        for (auto kv : item) {\n            if (kv.first == \"price\") {\n                prices.push_back(kv);\n            }\n        }\n    }\n    std::sort(prices.begin(), prices.end(), [](std::pair<std::string,Union_std_string_float> a, std::pair<std::string,Union_std_string_float> b) {\n        return a.second.f1 > b.second.f1;\n    });\n    for (int i = 0; i < n; i++) {\n        for (auto item : items) {\n            for (auto kv : item) {\n                if (kv.first == \"price\" && kv.second.f1 == prices[i].second.f1) {\n                    result.push_back(item);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<std::string,float>> temp;\n    for(auto i : items){\n        for(auto j : i){\n            if(j.first == \"price\"){\n                temp.push_back(std::make_pair(i[\"name\"],j.second.f1));\n            }\n        }\n    }\n    std::sort(temp.begin(),temp.end(),[](std::pair<std::string,float> a,std::pair<std::string,float> b){\n        return a.second > b.second;\n    });\n    for(int i = 0;i < n;i++){\n        for(auto j : items){\n            if(j[\"name\"] == temp[i].first){\n                result.push_back(j);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<std::string,float>> temp;\n    for(auto i : items){\n        for(auto j : i){\n            if(j.first == \"price\"){\n                temp.push_back(std::make_pair(i[\"name\"],j.second.f1));\n            }\n        }\n    }\n    std::sort(temp.begin(),temp.end(),[](std::pair<std::string,float> a,std::pair<std::string,float> b){\n        return a.second > b.second;\n    });\n    for(int i = 0; i < n; i++){\n        for(auto j : items){\n            if(j[\"name\"] == temp[i].first){\n                result.push_back(j);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it2;\n    std::map<std::string,Union_std_string_float>::iterator it3;\n    std::map<std::string,Union_std_string_float>::iterator it4;\n    std::map<std::string,Union_std_string_float>::iterator it5;\n    std::map<std::string,Union_std_string_float>::iterator it6;\n    std::map<std::string,Union_std_string_float>::iterator it7;\n    std::map<std::string,Union_std_string_float>::iterator it8;\n    std::map<std::string,Union_std_string_float>::iterator it9;\n    std::map<std::string,Union_std_string_float>::iterator it10;\n    std::map<std::string,Union_std_string_float>::iterator it11;\n    std::map<std::string,Union_std_string_float>::iterator it12;\n    std::map<std::string,Union_std_string_float>::iterator it13;\n    std::map<std::string,Union_std_string_float>::iterator it14;\n    std::map<std::string,Union_std_string_float>::iterator it15;\n    std::map<std::string,Union_std_string_float>::iterator it16;\n    std::map<std::string,Union_std_string_float>::iterator it17;\n    std::map<std::string,Union_std_string_float>::iterator it18;\n    std::map<std::string,Union_std_string_float>::iterator it19;\n    std::map<std::string,Union_std_string_float>::iterator it20;\n    std::map<std::string,Union_std_string_float>::iterator it",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<std::string,float>> price_list;\n    for(auto item : items){\n        price_list.push_back(std::make_pair(item[\"name\"],item[\"price\"]));\n    }\n    std::sort(price_list.begin(),price_list.end(),[](std::pair<std::string,float> a,std::pair<std::string,float> b){\n        return a.second > b.second;\n    });\n    for(int i=0;i<n;i++){\n        for(auto item : items){\n            if(item[\"name\"] == price_list[i].first){\n                result.push_back(item);\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<std::string, float>> temp;\n    for(auto i : items) {\n        for(auto j : i) {\n            temp.push_back(std::make_pair(j.first, j.second.f1));\n        }\n    }\n    std::sort(temp.begin(), temp.end(), [](std::pair<std::string, float> a, std::pair<std::string, float> b) {\n        return a.second > b.second;\n    });\n    for(int i = 0; i < n; i++) {\n        std::map<std::string,Union_std_string_float> temp_map;\n        temp_map[temp[i].first] = temp[i].second;\n        result.push_back(temp_map);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (long i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<float, std::map<std::string,Union_std_string_float>>> v;\n    for (auto item : items) {\n        v.push_back(std::make_pair(item[\"price\"].f1, item));\n    }\n    std::sort(v.begin(), v.end(), [](std::pair<float, std::map<std::string,Union_std_string_float>> a, std::pair<float, std::map<std::string,Union_std_string_float>> b) {\n        return a.first > b.first;\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(v[i].second);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<std::string,float>> temp;\n    for(auto i : items){\n        for(auto j : i){\n            temp.push_back(std::make_pair(j.first,j.second.f1));\n        }\n    }\n    std::sort(temp.begin(),temp.end(),[](std::pair<std::string,float> a,std::pair<std::string,float> b){\n        return a.second > b.second;\n    });\n    for(int i = 0;i < n;i++){\n        std::map<std::string,Union_std_string_float> temp_map;\n        temp_map.insert(std::make_pair(temp[i].first,temp[i].second));\n        result.push_back(temp_map);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<std::string, float>> price_vector;\n    for (auto item : items) {\n        for (auto it : item) {\n            if (it.first == \"price\") {\n                price_vector.push_back(std::make_pair(it.first, it.second.f1));\n            }\n        }\n    }\n    std::sort(price_vector.begin(), price_vector.end(), [](std::pair<std::string, float> a, std::pair<std::string, float> b) {\n        return a.second > b.second;\n    });\n    for (int i = 0; i < n; i++) {\n        for (auto item : items) {\n            for (auto it : item) {\n                if (it.first == \"price\" && it.second.f1 == price_vector[i].second) {\n                    result.push_back(item);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<std::string, float>> items_with_price;\n    for (auto item : items) {\n        items_with_price.push_back(std::make_pair(item[\"name\"].f0, item[\"price\"].f1));\n    }\n    std::sort(items_with_price.begin(), items_with_price.end(), [](auto a, auto b) {\n        return a.second > b.second;\n    });\n    for (int i = 0; i < n; i++) {\n        std::map<std::string,Union_std_string_float> item;\n        item[\"name\"] = items_with_price[i].first;\n        item[\"price\"] = items_with_price[i].second;\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it;\n    std::map<std::string,Union_std_string_float>::iterator it1;\n    std::vector<float> price;\n    for(it=items.begin();it!=items.end();it++)\n    {\n        for(it1=(*it).begin();it1!=(*it).end();it1++)\n        {\n            if((*it1).first==\"price\")\n            {\n                price.push_back((*it1).second.f1);\n            }\n        }\n    }\n    std::sort(price.begin(),price.end());\n    std::vector<float>::iterator it2;\n    for(it2=price.end()-1;it2>=price.end()-n;it2--)\n    {\n        for(it=items.begin();it!=items.end();it++)\n        {\n            for(it1=(*it).begin();it1!=(*it).end();it1++)\n            {\n                if((*it1).first==\"price\" && (*it1).second.f1==*it2)\n                {\n                    result.push_back(*it);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](auto &left, auto &right) {\n        return left[\"price\"] > right[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it2;\n    std::map<std::string,Union_std_string_float>::iterator it3;\n    std::map<std::string,Union_std_string_float>::iterator it4;\n    std::map<std::string,Union_std_string_float> temp;\n    std::vector<float> prices;\n    std::vector<float>::iterator it5;\n    std::vector<float>::iterator it6;\n    std::vector<float>::iterator it7;\n    std::vector<float>::iterator it8;\n    std::vector<float>::iterator it9;\n    std::vector<float>::iterator it10;\n    std::vector<float>::iterator it11;\n    std::vector<float>::iterator it12;\n    std::vector<float>::iterator it13;\n    std::vector<float>::iterator it14;\n    std::vector<float>::iterator it15;\n    std::vector<float>::iterator it16;\n    std::vector<float>::iterator it17;\n    std::vector<float>::iterator it18;\n    std::vector<float>::iterator it19;\n    std::vector<float>::iterator it20;\n    std::vector<float>::iterator it21;\n    std::vector<float>::iterator it22;\n    std::vector<float>::iterator it23;\n    std::vector<float>::iterator it24;\n    std::vector<float>::iterator it25;\n    std::vector<float>::iterator it26;\n    std::vector<float>::iterator it27;\n    std::vector<float>::iterator it28;\n    std::vector<float>::iterator it29;\n    std::vector<float>::iterator it30;\n    std::vector<float>::iterator it31;\n    std::vector<float>",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it;\n    std::map<std::string,Union_std_string_float>::iterator it1;\n    std::vector<float> price;\n    for(it = items.begin(); it != items.end(); it++) {\n        for(it1 = (*it).begin(); it1 != (*it).end(); it1++) {\n            if((*it1).first == \"price\") {\n                price.push_back((*it1).second.f1);\n            }\n        }\n    }\n    std::sort(price.begin(), price.end());\n    std::reverse(price.begin(), price.end());\n    std::vector<float>::iterator it2;\n    for(it2 = price.begin(); it2 != price.end(); it2++) {\n        for(it = items.begin(); it != items.end(); it++) {\n            for(it1 = (*it).begin(); it1 != (*it).end(); it1++) {\n                if((*it1).first == \"price\" && (*it1).second.f1 == (*it2)) {\n                    result.push_back(*it);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](auto &left, auto &right) {\n        return left[\"price\"] > right[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<std::string, float>> temp;\n    for(auto i : items) {\n        for(auto j : i) {\n            if(j.first == \"price\") {\n                temp.push_back(std::make_pair(i[\"name\"], j.second.f1));\n            }\n        }\n    }\n    std::sort(temp.begin(), temp.end(), [](std::pair<std::string, float> a, std::pair<std::string, float> b) {\n        return a.second > b.second;\n    });\n    for(int i = 0; i < n; i++) {\n        for(auto j : items) {\n            if(j[\"name\"] == temp[i].first) {\n                result.push_back(j);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it;\n    std::map<std::string,Union_std_string_float>::iterator it2;\n    std::vector<float> prices;\n    for(it = items.begin(); it != items.end(); it++) {\n        for(it2 = (*it).begin(); it2 != (*it).end(); it2++) {\n            if((*it2).first == \"price\") {\n                prices.push_back((*it2).second.f1);\n            }\n        }\n    }\n    std::sort(prices.begin(), prices.end());\n    std::reverse(prices.begin(), prices.end());\n    for(int i = 0; i < n; i++) {\n        for(it = items.begin(); it != items.end(); it++) {\n            for(it2 = (*it).begin(); it2 != (*it).end(); it2++) {\n                if((*it2).first == \"price\" && (*it2).second.f1 == prices[i]) {\n                    result.push_back(*it);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::map<std::string,Union_std_string_float> item;\n    std::vector<float> prices;\n    for (auto it = items.begin(); it != items.end(); it++) {\n        item = *it;\n        prices.push_back(item[\"price\"]);\n    }\n    std::sort(prices.begin(), prices.end());\n    std::reverse(prices.begin(), prices.end());\n    for (auto it = items.begin(); it != items.end(); it++) {\n        item = *it;\n        if (std::find(prices.begin(), prices.end(), item[\"price\"]) != prices.begin() + n) {\n            result.push_back(item);\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<float,std::map<std::string,Union_std_string_float>>> v;\n    for(auto i : items) {\n        v.push_back(std::make_pair(i[\"price\"],i));\n    }\n    std::sort(v.begin(),v.end());\n    for(int i = v.size()-1; i >= v.size()-n; i--) {\n        result.push_back(v[i].second);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> res;\n    std::vector<float> prices;\n    for (auto item : items) {\n        prices.push_back(item[\"price\"]);\n    }\n    std::sort(prices.begin(), prices.end());\n    std::reverse(prices.begin(), prices.end());\n    for (auto item : items) {\n        if (std::find(prices.begin(), prices.end(), item[\"price\"]) != prices.begin() + n) {\n            res.push_back(item);\n        }\n    }\n    return res;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<std::string, float>> temp;\n    for (auto item : items) {\n        for (auto it : item) {\n            if (it.first == \"price\") {\n                temp.push_back(std::make_pair(item[\"name\"], it.second.f1));\n            }\n        }\n    }\n    std::sort(temp.begin(), temp.end(), [](std::pair<std::string, float> a, std::pair<std::string, float> b) {\n        return a.second > b.second;\n    });\n    for (int i = 0; i < n; i++) {\n        for (auto item : items) {\n            if (item[\"name\"] == temp[i].first) {\n                result.push_back(item);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<float> prices;\n    for(auto item : items) {\n        prices.push_back(item[\"price\"]);\n    }\n    std::sort(prices.begin(), prices.end());\n    std::reverse(prices.begin(), prices.end());\n    for(auto item : items) {\n        if(std::find(prices.begin(), prices.end(), item[\"price\"]) != prices.begin() + n) {\n            result.push_back(item);\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it;\n    std::map<std::string,Union_std_string_float>::iterator it1;\n    std::vector<float> price;\n    for(it = items.begin(); it != items.end(); it++) {\n        for(it1 = it->begin(); it1 != it->end(); it1++) {\n            if(it1->first == \"price\") {\n                price.push_back(it1->second.f1);\n            }\n        }\n    }\n    std::sort(price.begin(), price.end());\n    std::reverse(price.begin(), price.end());\n    std::vector<float>::iterator it2;\n    for(it2 = price.begin(); it2 != price.end(); it2++) {\n        for(it = items.begin(); it != items.end(); it++) {\n            for(it1 = it->begin(); it1 != it->end(); it1++) {\n                if(it1->first == \"price\" && it1->second.f1 == *it2) {\n                    result.push_back(*it);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> res;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        res.push_back(items[i]);\n    }\n    return res;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it2;\n    std::map<std::string,Union_std_string_float>::iterator it3;\n    std::map<std::string,Union_std_string_float>::iterator it4;\n    std::vector<float> prices;\n    std::vector<float>::iterator it5;\n    std::vector<float>::iterator it6;\n    std::vector<float>::iterator it7;\n    std::vector<float>::iterator it8;\n    std::vector<float>::iterator it9;\n    std::vector<float>::iterator it10;\n    std::vector<float>::iterator it11;\n    std::vector<float>::iterator it12;\n    std::vector<float>::iterator it13;\n    std::vector<float>::iterator it14;\n    std::vector<float>::iterator it15;\n    std::vector<float>::iterator it16;\n    std::vector<float>::iterator it17;\n    std::vector<float>::iterator it18;\n    std::vector<float>::iterator it19;\n    std::vector<float>::iterator it20;\n    std::vector<float>::iterator it21;\n    std::vector<float>::iterator it22;\n    std::vector<float>::iterator it23;\n    std::vector<float>::iterator it24;\n    std::vector<float>::iterator it25;\n    std::vector<float>::iterator it26;\n    std::vector<float>::iterator it27;\n    std::vector<float>::iterator it28;\n    std::vector<float>::iterator it29;\n    std::vector<float>::iterator it30;\n    std::vector<float>::iterator it31;\n    std::vector<float>::iterator it32;\n    std::vector<float>::iterator it33;\n   ",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it;\n    std::map<std::string,Union_std_string_float>::iterator it1;\n    std::vector<float> prices;\n    for(it = items.begin(); it != items.end(); it++) {\n        for(it1 = it->begin(); it1 != it->end(); it1++) {\n            if(it1->first == \"price\") {\n                prices.push_back(it1->second.f1);\n            }\n        }\n    }\n    std::sort(prices.begin(), prices.end());\n    std::reverse(prices.begin(), prices.end());\n    std::vector<float>::iterator it2;\n    for(it2 = prices.begin(); it2 != prices.end(); it2++) {\n        for(it = items.begin(); it != items.end(); it++) {\n            for(it1 = it->begin(); it1 != it->end(); it1++) {\n                if(it1->first == \"price\") {\n                    if(it1->second.f1 == *it2) {\n                        result.push_back(*it);\n                    }\n                }\n            }\n        }\n    }\n    if(n > result.size()) {\n        n = result.size();\n    }\n    result.erase(result.begin() + n, result.end());\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it;\n    std::map<std::string,Union_std_string_float>::iterator it1;\n    std::vector<float> prices;\n    for(it = items.begin(); it != items.end(); it++) {\n        for(it1 = it->begin(); it1 != it->end(); it1++) {\n            if(it1->first == \"price\") {\n                prices.push_back(it1->second.f1);\n            }\n        }\n    }\n    std::sort(prices.begin(), prices.end());\n    std::reverse(prices.begin(), prices.end());\n    std::vector<float>::iterator it2;\n    for(it2 = prices.begin(); it2 != prices.end(); it2++) {\n        for(it = items.begin(); it != items.end(); it++) {\n            for(it1 = it->begin(); it1 != it->end(); it1++) {\n                if(it1->first == \"price\" && it1->second.f1 == *it2) {\n                    result.push_back(*it);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it_end;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it_begin;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it_n;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it_n_end;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it_n_begin;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it_n_n;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it_n_n_end;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it_n_n_begin;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it_n_n_n;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it_n_n_n_end;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it_n_n_n_begin;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it_n_n_n_n;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it_n_n_n_n_end;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it_n_n_n_n_begin;\n    std::vector<std::map<std::string,Union_std_",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it;\n    std::map<std::string,Union_std_string_float>::iterator it1;\n    std::map<std::string,Union_std_string_float>::iterator it2;\n    std::map<std::string,Union_std_string_float>::iterator it3;\n    std::map<std::string,Union_std_string_float>::iterator it4;\n    std::map<std::string,Union_std_string_float>::iterator it5;\n    std::map<std::string,Union_std_string_float>::iterator it6;\n    std::map<std::string,Union_std_string_float>::iterator it7;\n    std::map<std::string,Union_std_string_float>::iterator it8;\n    std::map<std::string,Union_std_string_float>::iterator it9;\n    std::map<std::string,Union_std_string_float>::iterator it10;\n    std::map<std::string,Union_std_string_float>::iterator it11;\n    std::map<std::string,Union_std_string_float>::iterator it12;\n    std::map<std::string,Union_std_string_float>::iterator it13;\n    std::map<std::string,Union_std_string_float>::iterator it14;\n    std::map<std::string,Union_std_string_float>::iterator it15;\n    std::map<std::string,Union_std_string_float>::iterator it16;\n    std::map<std::string,Union_std_string_float>::iterator it17;\n    std::map<std::string,Union_std_string_float>::iterator it18;\n    std::map<std::string,Union_std_string_float>::iterator it19;\n    std::map<std::string,Union_std_string_float>::iterator it20;\n   ",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (long i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<std::string, float>> price_list;\n    for (auto i : items) {\n        price_list.push_back(std::make_pair(i[\"name\"], i[\"price\"]));\n    }\n    std::sort(price_list.begin(), price_list.end(), [](std::pair<std::string, float> a, std::pair<std::string, float> b) {\n        return a.second > b.second;\n    });\n    for (int i = 0; i < n; i++) {\n        for (auto j : items) {\n            if (j[\"name\"] == price_list[i].first) {\n                result.push_back(j);\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::map<std::string,Union_std_string_float> item;\n    std::map<std::string,Union_std_string_float> item1;\n    std::map<std::string,Union_std_string_float> item2;\n    item[\"name\"] = \"apple\";\n    item[\"price\"] = 1.0;\n    item1[\"name\"] = \"orange\";\n    item1[\"price\"] = 2.0;\n    item2[\"name\"] = \"banana\";\n    item2[\"price\"] = 3.0;\n    result.push_back(item);\n    result.push_back(item1);\n    result.push_back(item2);\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it;\n    std::map<std::string,Union_std_string_float>::iterator it2;\n    std::vector<float> prices;\n    for (it = items.begin(); it != items.end(); ++it) {\n        for (it2 = it->begin(); it2 != it->end(); ++it2) {\n            if (it2->first == \"price\") {\n                prices.push_back(it2->second.f1);\n            }\n        }\n    }\n    std::sort(prices.begin(), prices.end());\n    std::vector<float>::iterator it3;\n    for (it3 = prices.end() - n; it3 != prices.end(); ++it3) {\n        for (it = items.begin(); it != items.end(); ++it) {\n            for (it2 = it->begin(); it2 != it->end(); ++it2) {\n                if (it2->first == \"price\" && it2->second.f1 == *it3) {\n                    result.push_back(*it);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<std::string,float>> v;\n    for(auto i:items){\n        for(auto j:i){\n            if(j.first==\"price\"){\n                v.push_back(std::make_pair(i[\"name\"],j.second.f1));\n            }\n        }\n    }\n    std::sort(v.begin(),v.end(),[](std::pair<std::string,float> a,std::pair<std::string,float> b){\n        return a.second>b.second;\n    });\n    for(int i=0;i<n;i++){\n        for(auto j:items){\n            if(j[\"name\"]==v[i].first){\n                result.push_back(j);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (long i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](const std::map<std::string,Union_std_string_float>& a, const std::map<std::string,Union_std_string_float>& b) {\n        return a.at(\"price\") > b.at(\"price\");\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<float> prices;\n    for(auto item : items) {\n        prices.push_back(item[\"price\"]);\n    }\n    std::sort(prices.begin(), prices.end());\n    std::reverse(prices.begin(), prices.end());\n    for(auto price : prices) {\n        for(auto item : items) {\n            if(item[\"price\"] == price) {\n                result.push_back(item);\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<float,std::map<std::string,Union_std_string_float>>> price_items;\n    for(auto item : items){\n        float price = item[\"price\"];\n        price_items.push_back(std::make_pair(price,item));\n    }\n    std::sort(price_items.begin(),price_items.end(),[](std::pair<float,std::map<std::string,Union_std_string_float>> a,std::pair<float,std::map<std::string,Union_std_string_float>> b){\n        return a.first > b.first;\n    });\n    for(int i = 0; i < n; i++){\n        result.push_back(price_items[i].second);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (long i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it;\n    std::map<std::string,Union_std_string_float>::iterator it1;\n    std::vector<float> prices;\n    for(it = items.begin(); it != items.end(); it++) {\n        for(it1 = it->begin(); it1 != it->end(); it1++) {\n            if(it1->first == \"price\") {\n                prices.push_back(it1->second.f1);\n            }\n        }\n    }\n    std::sort(prices.begin(), prices.end());\n    std::reverse(prices.begin(), prices.end());\n    for(int i = 0; i < n; i++) {\n        for(it = items.begin(); it != items.end(); it++) {\n            for(it1 = it->begin(); it1 != it->end(); it1++) {\n                if(it1->first == \"price\") {\n                    if(it1->second.f1 == prices[i]) {\n                        result.push_back(*it);\n                    }\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it;\n    std::map<std::string,Union_std_string_float>::iterator it2;\n    std::map<std::string,Union_std_string_float> temp;\n    std::vector<float> prices;\n    std::vector<float>::iterator it3;\n    for(it = items.begin(); it != items.end(); it++) {\n        for(it2 = it->begin(); it2 != it->end(); it2++) {\n            if(it2->first == \"price\") {\n                prices.push_back(it2->second.f1);\n            }\n        }\n    }\n    std::sort(prices.begin(), prices.end());\n    std::reverse(prices.begin(), prices.end());\n    for(it3 = prices.begin(); it3 != prices.end(); it3++) {\n        for(it = items.begin(); it != items.end(); it++) {\n            for(it2 = it->begin(); it2 != it->end(); it2++) {\n                if(it2->first == \"price\") {\n                    if(it2->second.f1 == *it3) {\n                        temp = *it;\n                        result.push_back(temp);\n                    }\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it2;\n    std::map<std::string,Union_std_string_float>::iterator it3;\n    std::map<std::string,Union_std_string_float>::iterator it4;\n    std::map<std::string,Union_std_string_float>::iterator it5;\n    std::map<std::string,Union_std_string_float>::iterator it6;\n    std::map<std::string,Union_std_string_float>::iterator it7;\n    std::map<std::string,Union_std_string_float>::iterator it8;\n    std::map<std::string,Union_std_string_float>::iterator it9;\n    std::map<std::string,Union_std_string_float>::iterator it10;\n    std::map<std::string,Union_std_string_float>::iterator it11;\n    std::map<std::string,Union_std_string_float>::iterator it12;\n    std::map<std::string,Union_std_string_float>::iterator it13;\n    std::map<std::string,Union_std_string_float>::iterator it14;\n    std::map<std::string,Union_std_string_float>::iterator it15;\n    std::map<std::string,Union_std_string_float>::iterator it16;\n    std::map<std::string,Union_std_string_float>::iterator it17;\n    std::map<std::string,Union_std_string_float>::iterator it18;\n    std::map<std::string,Union_std_string_float>::iterator it19;\n    std::map<std::string,Union_std_string_float>::iterator it20;\n    std::map<std::string,Union_std_string_float>::iterator it",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it;\n    std::map<std::string,Union_std_string_float>::iterator it1;\n    std::vector<float> prices;\n    for(it = items.begin(); it != items.end(); it++) {\n        for(it1 = it->begin(); it1 != it->end(); it1++) {\n            if(it1->first == \"price\") {\n                prices.push_back(it1->second.f1);\n            }\n        }\n    }\n    std::sort(prices.begin(), prices.end());\n    std::reverse(prices.begin(), prices.end());\n    std::vector<float>::iterator it2;\n    for(it2 = prices.begin(); it2 != prices.end(); it2++) {\n        for(it = items.begin(); it != items.end(); it++) {\n            for(it1 = it->begin(); it1 != it->end(); it1++) {\n                if(it1->first == \"price\") {\n                    if(it1->second.f1 == *it2) {\n                        result.push_back(*it);\n                    }\n                }\n            }\n        }\n    }\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it3;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it4;\n    for(it3 = result.begin(); it3 != result.end(); it3++) {\n        for(it4 = result.begin(); it4 != result.end(); it4++) {\n            if(it3 != it4) {\n                if(*it3 == *it4) {\n                    result.erase(it4);\n                }\n            }\n        }\n    }\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it5;\n    std::vector<std::map<std::string,Union_std_string",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it2;\n    std::map<std::string,Union_std_string_float>::iterator it3;\n    std::map<std::string,Union_std_string_float>::iterator it4;\n    std::vector<float> prices;\n    for(it = items.begin(); it != items.end(); it++) {\n        for(it3 = (*it).begin(); it3 != (*it).end(); it3++) {\n            if((*it3).first == \"price\") {\n                prices.push_back((*it3).second.f1);\n            }\n        }\n    }\n    std::sort(prices.begin(), prices.end());\n    std::reverse(prices.begin(), prices.end());\n    for(int i = 0; i < n; i++) {\n        for(it = items.begin(); it != items.end(); it++) {\n            for(it3 = (*it).begin(); it3 != (*it).end(); it3++) {\n                if((*it3).first == \"price\") {\n                    if((*it3).second.f1 == prices[i]) {\n                        result.push_back(*it);\n                    }\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<float,std::map<std::string,Union_std_string_float>>> v;\n    for(auto i : items) {\n        float price = i[\"price\"];\n        v.push_back(std::make_pair(price,i));\n    }\n    std::sort(v.begin(),v.end());\n    for(int i = v.size()-1; i >= v.size()-n; i--) {\n        result.push_back(v[i].second);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it2;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it3;\n    std::map<std::string,Union_std_string_float>::iterator it4;\n    std::map<std::string,Union_std_string_float>::iterator it5;\n    std::map<std::string,Union_std_string_float>::iterator it6;\n    std::map<std::string,Union_std_string_float>::iterator it7;\n    std::map<std::string,Union_std_string_float>::iterator it8;\n    std::map<std::string,Union_std_string_float>::iterator it9;\n    std::map<std::string,Union_std_string_float>::iterator it10;\n    std::map<std::string,Union_std_string_float>::iterator it11;\n    std::map<std::string,Union_std_string_float>::iterator it12;\n    std::map<std::string,Union_std_string_float>::iterator it13;\n    std::map<std::string,Union_std_string_float>::iterator it14;\n    std::map<std::string,Union_std_string_float>::iterator it15;\n    std::map<std::string,Union_std_string_float>::iterator it16;\n    std::map<std::string,Union_std_string_float>::iterator it17;\n    std::map<std::string,Union_std_string_float>::iterator it18;\n    std::map<std::string,Union_std_string_float>::iterator it19;\n    std::map<std::string,Union_std_string_float>::iterator it20;\n    std::map<std::string,Union_std_string_float",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<float,std::map<std::string,Union_std_string_float>>> temp;\n    for(auto item : items) {\n        temp.push_back(std::make_pair(item[\"price\"].f1,item));\n    }\n    std::sort(temp.begin(), temp.end());\n    for(int i = 0; i < n; i++) {\n        result.push_back(temp[i].second);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<float> prices;\n    for (auto item : items) {\n        prices.push_back(item[\"price\"]);\n    }\n    std::sort(prices.begin(), prices.end());\n    std::reverse(prices.begin(), prices.end());\n    for (auto price : prices) {\n        for (auto item : items) {\n            if (item[\"price\"] == price) {\n                result.push_back(item);\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (long i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for(int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for(int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](const std::map<std::string,Union_std_string_float>& a, const std::map<std::string,Union_std_string_float>& b) {\n        return a.at(\"price\") > b.at(\"price\");\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<std::string,float>> v;\n    for(auto i : items) {\n        for(auto j : i) {\n            if(j.first == \"price\") {\n                v.push_back(std::make_pair(i[\"name\"],j.second.f1));\n            }\n        }\n    }\n    std::sort(v.begin(),v.end(),[](std::pair<std::string,float> a, std::pair<std::string,float> b) {\n        return a.second > b.second;\n    });\n    for(int i = 0; i < n; i++) {\n        for(auto j : items) {\n            if(j[\"name\"] == v[i].first) {\n                result.push_back(j);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<std::string,float>> prices;\n    for(auto i : items) {\n        for(auto j : i) {\n            if(j.first == \"price\") {\n                prices.push_back(std::make_pair(i[\"name\"],j.second.f1));\n            }\n        }\n    }\n    std::sort(prices.begin(),prices.end(),[](std::pair<std::string,float> a,std::pair<std::string,float> b) {\n        return a.second > b.second;\n    });\n    for(int i = 0; i < n; ++i) {\n        for(auto j : items) {\n            if(j[\"name\"] == prices[i].first) {\n                result.push_back(j);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it1;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it2;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it3;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it4;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it5;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it6;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it7;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it8;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it9;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it10;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it11;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it12;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it13;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it14;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it15;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it16;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it17;\n    std",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<std::string,float>> temp;\n    for(int i=0;i<items.size();i++){\n        for(auto it=items[i].begin();it!=items[i].end();it++){\n            if(it->first==\"price\"){\n                temp.push_back(std::make_pair(it->first,it->second.f1));\n            }\n        }\n    }\n    std::sort(temp.begin(),temp.end(),[](std::pair<std::string,float> a,std::pair<std::string,float> b){\n        return a.second>b.second;\n    });\n    for(int i=0;i<n;i++){\n        for(int j=0;j<items.size();j++){\n            for(auto it=items[j].begin();it!=items[j].end();it++){\n                if(it->first==\"price\" && it->second.f1==temp[i].second){\n                    result.push_back(items[j]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<float> prices;\n    for(auto i : items) {\n        prices.push_back(i[\"price\"]);\n    }\n    std::sort(prices.begin(), prices.end());\n    std::reverse(prices.begin(), prices.end());\n    for(int i = 0; i < n; i++) {\n        for(auto j : items) {\n            if(j[\"price\"] == prices[i]) {\n                result.push_back(j);\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<float,std::map<std::string,Union_std_string_float>>> v;\n    for(auto i:items){\n        v.push_back(std::make_pair(i[\"price\"],i));\n    }\n    std::sort(v.begin(),v.end());\n    for(int i=0;i<n;i++){\n        result.push_back(v[i].second);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it2;\n    std::map<std::string,Union_std_string_float>::iterator it3;\n    std::map<std::string,Union_std_string_float>::iterator it4;\n    std::map<std::string,Union_std_string_float>::iterator it5;\n    std::map<std::string,Union_std_string_float>::iterator it6;\n    std::map<std::string,Union_std_string_float>::iterator it7;\n    std::map<std::string,Union_std_string_float>::iterator it8;\n    std::map<std::string,Union_std_string_float>::iterator it9;\n    std::map<std::string,Union_std_string_float>::iterator it10;\n    std::map<std::string,Union_std_string_float>::iterator it11;\n    std::map<std::string,Union_std_string_float>::iterator it12;\n    std::map<std::string,Union_std_string_float>::iterator it13;\n    std::map<std::string,Union_std_string_float>::iterator it14;\n    std::map<std::string,Union_std_string_float>::iterator it15;\n    std::map<std::string,Union_std_string_float>::iterator it16;\n    std::map<std::string,Union_std_string_float>::iterator it17;\n    std::map<std::string,Union_std_string_float>::iterator it18;\n    std::map<std::string,Union_std_string_float>::iterator it19;\n    std::map<std::string,Union_std_string_float>::iterator it20;\n    std::map<std::string,Union_std_string_float>::iterator it",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it2;\n    std::map<std::string,Union_std_string_float>::iterator it3;\n    std::map<std::string,Union_std_string_float>::iterator it4;\n    std::vector<float> price;\n    std::vector<float>::iterator it5;\n    std::vector<float>::iterator it6;\n    std::vector<float>::iterator it7;\n    std::vector<float>::iterator it8;\n    std::vector<float>::iterator it9;\n    std::vector<float>::iterator it10;\n    std::vector<float>::iterator it11;\n    std::vector<float>::iterator it12;\n    std::vector<float>::iterator it13;\n    std::vector<float>::iterator it14;\n    std::vector<float>::iterator it15;\n    std::vector<float>::iterator it16;\n    std::vector<float>::iterator it17;\n    std::vector<float>::iterator it18;\n    std::vector<float>::iterator it19;\n    std::vector<float>::iterator it20;\n    std::vector<float>::iterator it21;\n    std::vector<float>::iterator it22;\n    std::vector<float>::iterator it23;\n    std::vector<float>::iterator it24;\n    std::vector<float>::iterator it25;\n    std::vector<float>::iterator it26;\n    std::vector<float>::iterator it27;\n    std::vector<float>::iterator it28;\n    std::vector<float>::iterator it29;\n    std::vector<float>::iterator it30;\n    std::vector<float>::iterator it31;\n    std::vector<float>::iterator it32;\n    std::vector<float>::iterator it33;\n   ",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<float> prices;\n    for (auto item : items) {\n        prices.push_back(item[\"price\"]);\n    }\n    std::sort(prices.begin(), prices.end());\n    std::reverse(prices.begin(), prices.end());\n    for (auto item : items) {\n        if (std::find(prices.begin(), prices.end(), item[\"price\"]) != prices.begin() + n) {\n            result.push_back(item);\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<std::string,float>> temp;\n    for(auto i:items){\n        for(auto j:i){\n            if(j.first==\"price\"){\n                temp.push_back(std::make_pair(i[\"name\"],j.second.f1));\n            }\n        }\n    }\n    std::sort(temp.begin(),temp.end(),[](std::pair<std::string,float> a,std::pair<std::string,float> b){\n        return a.second>b.second;\n    });\n    for(int i=0;i<n;i++){\n        for(auto j:items){\n            if(j[\"name\"]==temp[i].first){\n                result.push_back(j);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<float,std::map<std::string,Union_std_string_float>>> items_with_price;\n    for(auto item:items){\n        float price = item[\"price\"];\n        items_with_price.push_back(std::make_pair(price,item));\n    }\n    std::sort(items_with_price.begin(),items_with_price.end());\n    for(int i=0;i<n;i++){\n        result.push_back(items_with_price[i].second);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<float> prices;\n    for (auto item : items) {\n        prices.push_back(item[\"price\"]);\n    }\n    std::sort(prices.begin(), prices.end());\n    std::reverse(prices.begin(), prices.end());\n    for (int i = 0; i < n; i++) {\n        for (auto item : items) {\n            if (item[\"price\"] == prices[i]) {\n                result.push_back(item);\n                break;\n            }\n        }\n    }\n    return result;",
    "    // Write your code here\n    // To print results to the standard output you can use the printf function.\n    // Example: printf(\"%s\", \"Hello world!\");\n    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for(int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<float> prices;\n    for (auto item : items) {\n        prices.push_back(item[\"price\"]);\n    }\n    std::sort(prices.begin(), prices.end());\n    float threshold = prices[prices.size() - n];\n    for (auto item : items) {\n        if (item[\"price\"] >= threshold) {\n            result.push_back(item);\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<std::string, float>> price_list;\n    for (auto item : items) {\n        price_list.push_back(std::make_pair(item[\"name\"].f0, item[\"price\"].f1));\n    }\n    std::sort(price_list.begin(), price_list.end(), [](std::pair<std::string, float> a, std::pair<std::string, float> b) {\n        return a.second > b.second;\n    });\n    for (int i = 0; i < n; i++) {\n        for (auto item : items) {\n            if (item[\"name\"].f0 == price_list[i].first) {\n                result.push_back(item);\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<float, std::map<std::string,Union_std_string_float>>> temp;\n    for(auto &item : items) {\n        temp.push_back(std::make_pair(item[\"price\"], item));\n    }\n    std::sort(temp.begin(), temp.end(), [](std::pair<float, std::map<std::string,Union_std_string_float>> a, std::pair<float, std::map<std::string,Union_std_string_float>> b) {\n        return a.first > b.first;\n    });\n    for(int i = 0; i < n; i++) {\n        result.push_back(temp[i].second);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<float> prices;\n    for (auto &item : items) {\n        prices.push_back(item[\"price\"]);\n    }\n    std::sort(prices.begin(), prices.end());\n    for (auto &item : items) {\n        if (item[\"price\"] >= prices[prices.size() - n]) {\n            result.push_back(item);\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<std::string, float>> item_price;\n    for (auto item : items) {\n        for (auto it : item) {\n            if (it.first == \"price\") {\n                item_price.push_back(std::make_pair(it.first, it.second.f1));\n            }\n        }\n    }\n    std::sort(item_price.begin(), item_price.end(), [](std::pair<std::string, float> a, std::pair<std::string, float> b) {\n        return a.second > b.second;\n    });\n    for (auto it : item_price) {\n        for (auto item : items) {\n            if (item[\"price\"] == it.second) {\n                result.push_back(item);\n            }\n        }\n    }\n    return std::vector<std::map<std::string,Union_std_string_float>>(result.begin(), result.begin() + n);",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it2;\n    std::map<std::string,Union_std_string_float>::iterator it3;\n    std::map<std::string,Union_std_string_float>::iterator it4;\n    std::vector<float> prices;\n    std::vector<float>::iterator it5;\n    std::vector<float>::iterator it6;\n    std::vector<float>::iterator it7;\n    std::vector<float>::iterator it8;\n    std::vector<float>::iterator it9;\n    std::vector<float>::iterator it10;\n    std::vector<float>::iterator it11;\n    std::vector<float>::iterator it12;\n    std::vector<float>::iterator it13;\n    std::vector<float>::iterator it14;\n    std::vector<float>::iterator it15;\n    std::vector<float>::iterator it16;\n    std::vector<float>::iterator it17;\n    std::vector<float>::iterator it18;\n    std::vector<float>::iterator it19;\n    std::vector<float>::iterator it20;\n    std::vector<float>::iterator it21;\n    std::vector<float>::iterator it22;\n    std::vector<float>::iterator it23;\n    std::vector<float>::iterator it24;\n    std::vector<float>::iterator it25;\n    std::vector<float>::iterator it26;\n    std::vector<float>::iterator it27;\n    std::vector<float>::iterator it28;\n    std::vector<float>::iterator it29;\n    std::vector<float>::iterator it30;\n    std::vector<float>::iterator it31;\n    std::vector<float>::iterator it32;\n    std::vector<float>::iterator it33;\n   ",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<std::string,float>> temp;\n    for(auto i : items){\n        temp.push_back(std::make_pair(i[\"name\"].f0,i[\"price\"].f1));\n    }\n    std::sort(temp.begin(),temp.end(),[](std::pair<std::string,float> a,std::pair<std::string,float> b){\n        return a.second > b.second;\n    });\n    for(int i = 0;i < n;i++){\n        std::map<std::string,Union_std_string_float> temp1;\n        temp1[\"name\"] = temp[i].first;\n        temp1[\"price\"] = temp[i].second;\n        result.push_back(temp1);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<float> prices;\n    for (auto item : items) {\n        prices.push_back(item[\"price\"]);\n    }\n    std::sort(prices.begin(), prices.end());\n    for (auto item : items) {\n        if (item[\"price\"] >= prices[prices.size() - n]) {\n            result.push_back(item);\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<float> prices;\n    for (auto item : items) {\n        prices.push_back(item[\"price\"]);\n    }\n    std::sort(prices.begin(), prices.end());\n    for (auto item : items) {\n        if (item[\"price\"] >= prices[prices.size() - n]) {\n            result.push_back(item);\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (long i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it;\n    std::map<std::string,Union_std_string_float>::iterator it2;\n    std::map<std::string,Union_std_string_float> temp;\n    std::vector<float> price;\n    std::vector<float>::iterator it3;\n    for(it = items.begin(); it != items.end(); it++) {\n        for(it2 = it->begin(); it2 != it->end(); it2++) {\n            if(it2->first == \"price\") {\n                price.push_back(it2->second.f1);\n            }\n        }\n    }\n    std::sort(price.begin(), price.end());\n    for(it = items.begin(); it != items.end(); it++) {\n        for(it2 = it->begin(); it2 != it->end(); it2++) {\n            if(it2->first == \"price\") {\n                if(it2->second.f1 == price[price.size()-n]) {\n                    result.push_back(*it);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<float> prices;\n    for (auto item : items) {\n        prices.push_back(item[\"price\"]);\n    }\n    std::sort(prices.begin(), prices.end());\n    std::reverse(prices.begin(), prices.end());\n    for (int i = 0; i < n; i++) {\n        for (auto item : items) {\n            if (item[\"price\"] == prices[i]) {\n                result.push_back(item);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<float> prices;\n    for (auto item : items) {\n        prices.push_back(item[\"price\"]);\n    }\n    std::sort(prices.begin(), prices.end());\n    std::reverse(prices.begin(), prices.end());\n    for (int i = 0; i < n; i++) {\n        for (auto item : items) {\n            if (item[\"price\"] == prices[i]) {\n                result.push_back(item);\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<std::string,float>> temp;\n    for(auto i : items) {\n        for(auto j : i) {\n            if(j.first == \"price\") {\n                temp.push_back(std::make_pair(i[\"name\"],j.second.f1));\n            }\n        }\n    }\n    std::sort(temp.begin(),temp.end(),[](std::pair<std::string,float> a,std::pair<std::string,float> b) {\n        return a.second > b.second;\n    });\n    for(int i = 0; i < n; i++) {\n        for(auto j : items) {\n            if(j[\"name\"] == temp[i].first) {\n                result.push_back(j);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](const std::map<std::string,Union_std_string_float> &a, const std::map<std::string,Union_std_string_float> &b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<std::string,float>> prices;\n    for(auto i : items){\n        for(auto j : i){\n            if(j.first == \"price\"){\n                prices.push_back(std::make_pair(i[\"name\"],j.second.f1));\n            }\n        }\n    }\n    std::sort(prices.begin(),prices.end(),[](std::pair<std::string,float> a,std::pair<std::string,float> b){\n        return a.second > b.second;\n    });\n    for(int i = 0; i < n; i++){\n        for(auto j : items){\n            if(j[\"name\"] == prices[i].first){\n                result.push_back(j);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](auto a, auto b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b){\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<std::string,float>> temp;\n    for(auto i:items){\n        for(auto j:i){\n            if(j.first==\"price\"){\n                temp.push_back(std::make_pair(i[\"name\"],j.second.f1));\n            }\n        }\n    }\n    std::sort(temp.begin(),temp.end(),[](std::pair<std::string,float> a,std::pair<std::string,float> b){return a.second>b.second;});\n    for(int i=0;i<n;i++){\n        for(auto j:items){\n            if(j[\"name\"]==temp[i].first){\n                result.push_back(j);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it2;\n    std::map<std::string,Union_std_string_float>::iterator it3;\n    std::map<std::string,Union_std_string_float>::iterator it4;\n    std::map<std::string,Union_std_string_float>::iterator it5;\n    std::map<std::string,Union_std_string_float>::iterator it6;\n    std::map<std::string,Union_std_string_float>::iterator it7;\n    std::map<std::string,Union_std_string_float>::iterator it8;\n    std::map<std::string,Union_std_string_float>::iterator it9;\n    std::map<std::string,Union_std_string_float>::iterator it10;\n    std::map<std::string,Union_std_string_float>::iterator it11;\n    std::map<std::string,Union_std_string_float>::iterator it12;\n    std::map<std::string,Union_std_string_float>::iterator it13;\n    std::map<std::string,Union_std_string_float>::iterator it14;\n    std::map<std::string,Union_std_string_float>::iterator it15;\n    std::map<std::string,Union_std_string_float>::iterator it16;\n    std::map<std::string,Union_std_string_float>::iterator it17;\n    std::map<std::string,Union_std_string_float>::iterator it18;\n    std::map<std::string,Union_std_string_float>::iterator it19;\n    std::map<std::string,Union_std_string_float>::iterator it20;\n    std::map<std::string,Union_std_string_float>::iterator it",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<float> prices;\n    for(auto item : items) {\n        prices.push_back(item[\"price\"]);\n    }\n    std::sort(prices.begin(), prices.end());\n    std::reverse(prices.begin(), prices.end());\n    for(int i = 0; i < n; i++) {\n        for(auto item : items) {\n            if(item[\"price\"] == prices[i]) {\n                result.push_back(item);\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it;\n    std::map<std::string,Union_std_string_float>::iterator it2;\n    std::vector<float> prices;\n    for(it = items.begin(); it != items.end(); it++) {\n        for(it2 = it->begin(); it2 != it->end(); it2++) {\n            if(it2->first == \"price\") {\n                prices.push_back(it2->second.f1);\n            }\n        }\n    }\n    std::sort(prices.begin(), prices.end());\n    std::reverse(prices.begin(), prices.end());\n    std::vector<float>::iterator it3;\n    for(it3 = prices.begin(); it3 != prices.end(); it3++) {\n        for(it = items.begin(); it != items.end(); it++) {\n            for(it2 = it->begin(); it2 != it->end(); it2++) {\n                if(it2->first == \"price\") {\n                    if(it2->second.f1 == *it3) {\n                        result.push_back(*it);\n                    }\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<float, std::map<std::string,Union_std_string_float>>> prices;\n    for (auto item : items) {\n        float price = item[\"price\"];\n        prices.push_back(std::make_pair(price, item));\n    }\n    std::sort(prices.begin(), prices.end(), [](std::pair<float, std::map<std::string,Union_std_string_float>> a, std::pair<float, std::map<std::string,Union_std_string_float>> b) {\n        return a.first > b.first;\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(prices[i].second);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b){\n        return a[\"price\"] > b[\"price\"];\n    });\n    for(int i = 0; i < n; i++){\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<float> prices;\n    for(auto item : items) {\n        prices.push_back(item[\"price\"]);\n    }\n    std::sort(prices.begin(), prices.end());\n    for(int i = prices.size() - 1; i >= prices.size() - n; i--) {\n        for(auto item : items) {\n            if(item[\"price\"] == prices[i]) {\n                result.push_back(item);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<std::string, float>> temp;\n    for (auto i : items) {\n        for (auto j : i) {\n            if (j.first == \"price\") {\n                temp.push_back(std::make_pair(i[\"name\"], j.second.f1));\n            }\n        }\n    }\n    std::sort(temp.begin(), temp.end(), [](std::pair<std::string, float> a, std::pair<std::string, float> b) {\n        return a.second > b.second;\n    });\n    for (int i = 0; i < n; i++) {\n        for (auto j : items) {\n            if (j[\"name\"] == temp[i].first) {\n                result.push_back(j);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<float> prices;\n    for (auto item : items) {\n        prices.push_back(item[\"price\"]);\n    }\n    std::sort(prices.begin(), prices.end());\n    for (auto price : prices) {\n        for (auto item : items) {\n            if (item[\"price\"] == price) {\n                result.push_back(item);\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it2;\n    std::map<std::string,Union_std_string_float>::iterator it3;\n    std::map<std::string,Union_std_string_float>::iterator it4;\n    std::vector<float> prices;\n    std::vector<float>::iterator it5;\n    std::vector<float>::iterator it6;\n    std::vector<float>::iterator it7;\n    std::vector<float>::iterator it8;\n    std::vector<float>::iterator it9;\n    std::vector<float>::iterator it10;\n    std::vector<float>::iterator it11;\n    std::vector<float>::iterator it12;\n    std::vector<float>::iterator it13;\n    std::vector<float>::iterator it14;\n    std::vector<float>::iterator it15;\n    std::vector<float>::iterator it16;\n    std::vector<float>::iterator it17;\n    std::vector<float>::iterator it18;\n    std::vector<float>::iterator it19;\n    std::vector<float>::iterator it20;\n    std::vector<float>::iterator it21;\n    std::vector<float>::iterator it22;\n    std::vector<float>::iterator it23;\n    std::vector<float>::iterator it24;\n    std::vector<float>::iterator it25;\n    std::vector<float>::iterator it26;\n    std::vector<float>::iterator it27;\n    std::vector<float>::iterator it28;\n    std::vector<float>::iterator it29;\n    std::vector<float>::iterator it30;\n    std::vector<float>::iterator it31;\n    std::vector<float>::iterator it32;\n    std::vector<float>::iterator it33;\n   ",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    if(n == 0) {\n        return result;\n    }\n    std::vector<std::pair<float, std::map<std::string,Union_std_string_float>>> temp;\n    for(auto item : items) {\n        temp.push_back(std::make_pair(item[\"price\"], item));\n    }\n    std::sort(temp.begin(), temp.end(), [](std::pair<float, std::map<std::string,Union_std_string_float>> a, std::pair<float, std::map<std::string,Union_std_string_float>> b) {\n        return a.first > b.first;\n    });\n    for(long i = 0; i < n; i++) {\n        result.push_back(temp[i].second);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<std::string,float>> temp;\n    for(auto i:items){\n        for(auto j:i){\n            if(j.first == \"price\"){\n                temp.push_back(std::make_pair(i[\"name\"],j.second.f1));\n            }\n        }\n    }\n    std::sort(temp.begin(),temp.end(),[](std::pair<std::string,float> a,std::pair<std::string,float> b){\n        return a.second > b.second;\n    });\n    for(int i=0;i<n;i++){\n        for(auto j:items){\n            if(j[\"name\"] == temp[i].first){\n                result.push_back(j);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<float,std::map<std::string,Union_std_string_float>>> temp;\n    for(auto i : items) {\n        temp.push_back(std::make_pair(i[\"price\"].f1,i));\n    }\n    std::sort(temp.begin(),temp.end());\n    for(int i = temp.size()-1; i >= temp.size()-n; i--) {\n        result.push_back(temp[i].second);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<float,std::map<std::string,Union_std_string_float>>> price_item_pairs;\n    for (auto item : items) {\n        float price = item[\"price\"];\n        price_item_pairs.push_back(std::make_pair(price,item));\n    }\n    std::sort(price_item_pairs.begin(),price_item_pairs.end(),[](auto a, auto b) {\n        return a.first > b.first;\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(price_item_pairs[i].second);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for(int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<std::string, float>> temp;\n    for (auto i : items) {\n        for (auto j : i) {\n            if (j.first == \"price\") {\n                temp.push_back(std::make_pair(i[\"name\"], j.second.f1));\n            }\n        }\n    }\n    std::sort(temp.begin(), temp.end(), [](std::pair<std::string, float> a, std::pair<std::string, float> b) {\n        return a.second > b.second;\n    });\n    for (auto i = 0; i < n; i++) {\n        for (auto j : items) {\n            if (j[\"name\"] == temp[i].first) {\n                result.push_back(j);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<float, std::map<std::string,Union_std_string_float>>> v;\n    for (auto item : items) {\n        v.push_back(std::make_pair(item[\"price\"].f1, item));\n    }\n    std::sort(v.begin(), v.end());\n    for (int i = 0; i < n; i++) {\n        result.push_back(v[i].second);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](const std::map<std::string,Union_std_string_float>& a, const std::map<std::string,Union_std_string_float>& b) {\n        return a.at(\"price\") > b.at(\"price\");\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<float> prices;\n    for (auto item : items) {\n        prices.push_back(item[\"price\"]);\n    }\n    std::sort(prices.begin(), prices.end());\n    std::reverse(prices.begin(), prices.end());\n    for (int i = 0; i < n; i++) {\n        for (auto item : items) {\n            if (item[\"price\"] == prices[i]) {\n                result.push_back(item);\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<std::string,float>> price_item;\n    for(auto item : items){\n        for(auto it : item){\n            if(it.first == \"price\"){\n                price_item.push_back(std::make_pair(item[\"name\"],it.second.f1));\n            }\n        }\n    }\n    std::sort(price_item.begin(),price_item.end(),[](const std::pair<std::string,float>& a,const std::pair<std::string,float>& b){\n        return a.second > b.second;\n    });\n    for(int i = 0;i < n;i++){\n        for(auto item : items){\n            if(item[\"name\"] == price_item[i].first){\n                result.push_back(item);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](const std::map<std::string,Union_std_string_float>& a, const std::map<std::string,Union_std_string_float>& b) {\n        return a.at(\"price\") > b.at(\"price\");\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<float, std::map<std::string,Union_std_string_float>>> v;\n    for (auto i : items) {\n        v.push_back(std::make_pair(i[\"price\"], i));\n    }\n    std::sort(v.begin(), v.end());\n    for (int i = 0; i < n; i++) {\n        result.push_back(v[i].second);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it;\n    std::map<std::string,Union_std_string_float>::iterator it2;\n    std::vector<float> prices;\n    for (it = items.begin(); it != items.end(); it++) {\n        for (it2 = it->begin(); it2 != it->end(); it2++) {\n            if (it2->first == \"price\") {\n                prices.push_back(it2->second.f1);\n            }\n        }\n    }\n    std::sort(prices.begin(), prices.end());\n    std::reverse(prices.begin(), prices.end());\n    std::vector<float>::iterator it3;\n    for (it3 = prices.begin(); it3 != prices.end(); it3++) {\n        for (it = items.begin(); it != items.end(); it++) {\n            for (it2 = it->begin(); it2 != it->end(); it2++) {\n                if (it2->first == \"price\") {\n                    if (it2->second.f1 == *it3) {\n                        result.push_back(*it);\n                    }\n                }\n            }\n        }\n    }\n    std::vector<std::map<std::string,Union_std_string_float>>::iterator it4;\n    for (it4 = result.begin(); it4 != result.end(); it4++) {\n        for (it2 = it4->begin(); it2 != it4->end(); it2++) {\n            if (it2->first == \"price\") {\n                it2->second.f1 = it2->second.f1 * 1.1;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::map<std::string,Union_std_string_float> temp;\n    std::map<std::string,Union_std_string_float> temp1;\n    std::vector<float> price;\n    for(int i=0;i<items.size();i++){\n        for(auto it=items[i].begin();it!=items[i].end();it++){\n            if(it->first==\"price\"){\n                price.push_back(it->second.f1);\n            }\n        }\n    }\n    std::sort(price.begin(),price.end());\n    for(int i=0;i<items.size();i++){\n        for(auto it=items[i].begin();it!=items[i].end();it++){\n            if(it->first==\"price\"){\n                if(it->second.f1==price[price.size()-n]){\n                    temp=items[i];\n                    result.push_back(temp);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<std::string, float>> temp;\n    for (auto item : items) {\n        for (auto it : item) {\n            if (it.first == \"price\") {\n                temp.push_back(std::make_pair(item[\"name\"], it.second.f1));\n            }\n        }\n    }\n    std::sort(temp.begin(), temp.end(), [](std::pair<std::string, float> a, std::pair<std::string, float> b) {\n        return a.second > b.second;\n    });\n    for (int i = 0; i < n; i++) {\n        for (auto item : items) {\n            if (item[\"name\"] == temp[i].first) {\n                result.push_back(item);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<float> prices;\n    for (auto item : items) {\n        prices.push_back(item[\"price\"]);\n    }\n    std::sort(prices.begin(), prices.end());\n    std::reverse(prices.begin(), prices.end());\n    for (int i = 0; i < n; i++) {\n        for (auto item : items) {\n            if (item[\"price\"] == prices[i]) {\n                result.push_back(item);\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<float> prices;\n    for(auto item: items){\n        prices.push_back(item[\"price\"]);\n    }\n    std::sort(prices.begin(), prices.end());\n    std::reverse(prices.begin(), prices.end());\n    for(int i=0; i<n; i++){\n        for(auto item: items){\n            if(item[\"price\"] == prices[i]){\n                result.push_back(item);\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<std::string,float>> temp;\n    for(auto i:items){\n        for(auto j:i){\n            if(j.first==\"price\"){\n                temp.push_back(std::make_pair(i[\"name\"],j.second.f1));\n            }\n        }\n    }\n    std::sort(temp.begin(),temp.end(),[](std::pair<std::string,float> a,std::pair<std::string,float> b){\n        return a.second>b.second;\n    });\n    for(int i=0;i<n;i++){\n        for(auto j:items){\n            if(j[\"name\"]==temp[i].first){\n                result.push_back(j);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<float,std::map<std::string,Union_std_string_float>>> temp;\n    for(auto item : items) {\n        temp.push_back(std::make_pair(item[\"price\"].f1,item));\n    }\n    std::sort(temp.begin(),temp.end(),[](std::pair<float,std::map<std::string,Union_std_string_float>> a,std::pair<float,std::map<std::string,Union_std_string_float>> b) {\n        return a.first > b.first;\n    });\n    for(int i = 0; i < n; i++) {\n        result.push_back(temp[i].second);\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::vector<std::pair<std::string, float>> price_list;\n    for (auto item : items) {\n        price_list.push_back(std::make_pair(item[\"name\"], item[\"price\"]));\n    }\n    std::sort(price_list.begin(), price_list.end(), [](std::pair<std::string, float> a, std::pair<std::string, float> b) {\n        return a.second > b.second;\n    });\n    for (int i = 0; i < n; i++) {\n        for (auto item : items) {\n            if (item[\"name\"] == price_list[i].first) {\n                result.push_back(item);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::map<std::string,Union_std_string_float>> result;\n    std::sort(items.begin(), items.end(), [](std::map<std::string,Union_std_string_float> a, std::map<std::string,Union_std_string_float> b) {\n        return a[\"price\"] > b[\"price\"];\n    });\n    for (int i = 0; i < n; i++) {\n        result.push_back(items[i]);\n    }\n    return result;"
  ]
}