{
  "name": "mbpp_441_surfacearea_cube",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the surface area of a cube of a given size.\nlong surfacearea_cube(long l) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_441_surfacearea_cube.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = surfacearea_cube;\n    assert(candidate((5)) == (150));\n    assert(candidate((3)) == (54));\n    assert(candidate((10)) == (600));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6 * l * l;",
    "  return 6 * l * l;",
    "    return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "    return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "    return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "    return 6*l*l;",
    "  return 6*l*l;",
    "    return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6 * l * l;",
    "  return 6*l*l;",
    "  return 6 * l * l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "    return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "    return 6*l*l;",
    "  return 6*l*l;",
    "    return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "    return 6*l*l;",
    "  return 6*l*l;",
    "    return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "    return 6*l*l;",
    "  return 6 * l * l;",
    "  long area = 6 * l * l;\n  return area;",
    "    return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6 * l * l;",
    "  return 6 * l * l;",
    "  return 6 * l * l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "    return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "    return 6*l*l;",
    "  return 6*l*l;",
    "  return 6 * l * l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6 * l * l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6 * l * l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6 * l * l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6*l*l;",
    "  return 6 * l * l;",
    "  return 6*l*l;",
    "  return 6 * l * l;",
    "  return 6 * l * l;",
    "  return 6*l*l;"
  ]
}