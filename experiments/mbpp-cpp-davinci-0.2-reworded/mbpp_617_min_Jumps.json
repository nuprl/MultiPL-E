{
  "name": "mbpp_617_min_Jumps",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\nfloat min_Jumps(long steps, long d) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_617_min_Jumps.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = min_Jumps;\n    assert(candidate(std::make_tuple(3, 4), (11)) == (3.5));\n    assert(candidate(std::make_tuple(3, 4), (0)) == (float(0)));\n    assert(candidate(std::make_tuple(11, 14), (11)) == (float(1)));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    float jumps = 0;\n    if (steps == 0)\n        return 0;\n    if (steps == 1)\n        return 1;\n    if (steps == 2)\n        return 2;\n    if (steps == 3)\n        return 3;\n    if (steps == 4)\n        return 4;\n    if (steps == 5)\n        return 5;\n    if (steps == 6)\n        return 6;\n    if (steps == 7)\n        return 7;\n    if (steps == 8)\n        return 8;\n    if (steps == 9)\n        return 9;\n    if (steps == 10)\n        return 10;\n    if (steps == 11)\n        return 11;\n    if (steps == 12)\n        return 12;\n    if (steps == 13)\n        return 13;\n    if (steps == 14)\n        return 14;\n    if (steps == 15)\n        return 15;\n    if (steps == 16)\n        return 16;\n    if (steps == 17)\n        return 17;\n    if (steps == 18)\n        return 18;\n    if (steps == 19)\n        return 19;\n    if (steps == 20)\n        return 20;\n    if (steps == 21)\n        return 21;\n    if (steps == 22)\n        return 22;\n    if (steps == 23)\n        return 23;\n    if (steps == 24)\n        return 24;\n    if (steps == 25)\n        return 25;\n    if (steps == 26)\n        return 26;\n    if (steps == 27)\n        return 27;\n    if (steps == 28)\n        return 28;\n    if (steps == 29)\n        return 29;\n    if (steps == 30)\n        return 30;\n    if (steps == 31)\n        return 31;\n    if (steps == 32)\n        return 32;\n    if (steps == 33)\n        return 33;\n    if (steps == 34)\n        return 34;\n    if (steps == 35)\n        return 35;\n    if (steps == 36)\n        return 36;\n    if (steps == 37)\n        return 37;\n    if (steps == 38)\n        return",
    "    if(d == 0) {\n        return 0;\n    }\n    if(steps == 0) {\n        return INT_MAX;\n    }\n    if(steps == d) {\n        return 1;\n    }\n    if(steps > d) {\n        return min_Jumps(steps - d, d) + 1;\n    }\n    return min(min_Jumps(steps - 1, d), min_Jumps(steps + 1, d)) + 1;",
    "    if(steps == 0)\n        return 0;\n    if(steps == 1)\n        return 1;\n    if(steps == 2)\n        return 2;\n    if(steps == 3)\n        return 3;\n    if(steps == 4)\n        return 4;\n    if(steps == 5)\n        return 5;\n    if(steps == 6)\n        return 6;\n    if(steps == 7)\n        return 7;\n    if(steps == 8)\n        return 8;\n    if(steps == 9)\n        return 9;\n    if(steps == 10)\n        return 10;\n    if(steps == 11)\n        return 11;\n    if(steps == 12)\n        return 12;\n    if(steps == 13)\n        return 13;\n    if(steps == 14)\n        return 14;\n    if(steps == 15)\n        return 15;\n    if(steps == 16)\n        return 16;\n    if(steps == 17)\n        return 17;\n    if(steps == 18)\n        return 18;\n    if(steps == 19)\n        return 19;\n    if(steps == 20)\n        return 20;\n    if(steps == 21)\n        return 21;\n    if(steps == 22)\n        return 22;\n    if(steps == 23)\n        return 23;\n    if(steps == 24)\n        return 24;\n    if(steps == 25)\n        return 25;\n    if(steps == 26)\n        return 26;\n    if(steps == 27)\n        return 27;\n    if(steps == 28)\n        return 28;\n    if(steps == 29)\n        return 29;\n    if(steps == 30)\n        return 30;\n    if(steps == 31)\n        return 31;\n    if(steps == 32)\n        return 32;\n    if(steps == 33)\n        return 33;\n    if(steps == 34)\n        return 34;\n    if(steps == 35)\n        return 35;\n    if(steps == 36)\n        return 36;\n    if(steps == 37)\n        return 37;\n    if(steps == 38)\n        return 38;\n    if(steps",
    "    float jumps = 0;\n    if (steps == 0) {\n        return 0;\n    }\n    if (steps == 1) {\n        return 1;\n    }\n    if (steps == 2) {\n        return 2;\n    }\n    if (steps == 3) {\n        return 3;\n    }\n    if (steps == 4) {\n        return 4;\n    }\n    if (steps == 5) {\n        return 5;\n    }\n    if (steps == 6) {\n        return 6;\n    }\n    if (steps == 7) {\n        return 7;\n    }\n    if (steps == 8) {\n        return 8;\n    }\n    if (steps == 9) {\n        return 9;\n    }\n    if (steps == 10) {\n        return 10;\n    }\n    if (steps == 11) {\n        return 11;\n    }\n    if (steps == 12) {\n        return 12;\n    }\n    if (steps == 13) {\n        return 13;\n    }\n    if (steps == 14) {\n        return 14;\n    }\n    if (steps == 15) {\n        return 15;\n    }\n    if (steps == 16) {\n        return 16;\n    }\n    if (steps == 17) {\n        return 17;\n    }\n    if (steps == 18) {\n        return 18;\n    }\n    if (steps == 19) {\n        return 19;\n    }\n    if (steps == 20) {\n        return 20;\n    }\n    if (steps == 21) {\n        return 21;\n    }\n    if (steps == 22) {\n        return 22;\n    }\n    if (steps == 23) {\n        return 23;\n    }\n    if (steps == 24) {\n        return 24;\n    }\n    if (steps == 25) {\n        return 25;\n    }\n    if (steps == 26) {\n        return 26;\n    }\n    if (steps == 27) {\n        return 27;\n    }\n    if (steps == 28) {\n        return 28;\n    }\n    if (steps == 29) {\n        return",
    "    float jumps = 0;\n    if(steps < d) {\n        jumps = 1;\n    } else {\n        jumps = (float)steps/(float)d;\n        jumps = ceil(jumps);\n    }\n    return jumps;",
    "    float jumps = 0;\n    if (steps == 0) {\n        return 0;\n    }\n    if (steps == 1) {\n        return 1;\n    }\n    if (steps == 2) {\n        return 2;\n    }\n    if (steps == 3) {\n        return 3;\n    }\n    if (steps == 4) {\n        return 4;\n    }\n    if (steps == 5) {\n        return 5;\n    }\n    if (steps == 6) {\n        return 6;\n    }\n    if (steps == 7) {\n        return 7;\n    }\n    if (steps == 8) {\n        return 8;\n    }\n    if (steps == 9) {\n        return 9;\n    }\n    if (steps == 10) {\n        return 10;\n    }\n    if (steps == 11) {\n        return 11;\n    }\n    if (steps == 12) {\n        return 12;\n    }\n    if (steps == 13) {\n        return 13;\n    }\n    if (steps == 14) {\n        return 14;\n    }\n    if (steps == 15) {\n        return 15;\n    }\n    if (steps == 16) {\n        return 16;\n    }\n    if (steps == 17) {\n        return 17;\n    }\n    if (steps == 18) {\n        return 18;\n    }\n    if (steps == 19) {\n        return 19;\n    }\n    if (steps == 20) {\n        return 20;\n    }\n    if (steps == 21) {\n        return 21;\n    }\n    if (steps == 22) {\n        return 22;\n    }\n    if (steps == 23) {\n        return 23;\n    }\n    if (steps == 24) {\n        return 24;\n    }\n    if (steps == 25) {\n        return 25;\n    }\n    if (steps == 26) {\n        return 26;\n    }\n    if (steps == 27) {\n        return 27;\n    }\n    if (steps == 28) {\n        return 28;\n    }\n    if (steps == 29) {\n        return",
    "    if(d == 0)\n        return 0;\n    if(steps == 0)\n        return INT_MAX;\n    float min_jumps = INT_MAX;\n    for(int i = 1; i <= steps; i++) {\n        float jumps = min_Jumps(steps - i, d - i) + 1;\n        if(jumps < min_jumps)\n            min_jumps = jumps;\n    }\n    return min_jumps;",
    "    if(steps == 0) return 0;\n    if(steps == 1) return 1;\n    if(steps == 2) return 2;\n    if(steps == 3) return 3;\n    if(steps == 4) return 4;\n    if(steps == 5) return 5;\n    if(steps == 6) return 6;\n    if(steps == 7) return 7;\n    if(steps == 8) return 8;\n    if(steps == 9) return 9;\n    if(steps == 10) return 10;\n    if(steps == 11) return 11;\n    if(steps == 12) return 12;\n    if(steps == 13) return 13;\n    if(steps == 14) return 14;\n    if(steps == 15) return 15;\n    if(steps == 16) return 16;\n    if(steps == 17) return 17;\n    if(steps == 18) return 18;\n    if(steps == 19) return 19;\n    if(steps == 20) return 20;\n    if(steps == 21) return 21;\n    if(steps == 22) return 22;\n    if(steps == 23) return 23;\n    if(steps == 24) return 24;\n    if(steps == 25) return 25;\n    if(steps == 26) return 26;\n    if(steps == 27) return 27;\n    if(steps == 28) return 28;\n    if(steps == 29) return 29;\n    if(steps == 30) return 30;\n    if(steps == 31) return 31;\n    if(steps == 32) return 32;\n    if(steps == 33) return 33;\n    if(steps == 34) return 34;\n    if(steps == 35) return 35;\n    if(steps == 36) return 36;\n    if(steps == 37) return 37;\n    if(steps == 38) return 38;\n    if(steps == 39) return 39;\n    if(steps == 40) return 40;\n    if(steps == 41) return 41;\n    if(steps == 42) return 42;\n    if(steps == 43) return 43;\n    if(steps == 44) return 44;\n    if(steps == 45) return 45;\n    if(steps ==",
    "    if(steps == 0) {\n        return 0;\n    }\n    if(steps == 1) {\n        return 1;\n    }\n    if(steps == 2) {\n        return 2;\n    }\n    if(steps == 3) {\n        return 3;\n    }\n    if(steps == 4) {\n        return 4;\n    }\n    if(steps == 5) {\n        return 5;\n    }\n    if(steps == 6) {\n        return 6;\n    }\n    if(steps == 7) {\n        return 7;\n    }\n    if(steps == 8) {\n        return 8;\n    }\n    if(steps == 9) {\n        return 9;\n    }\n    if(steps == 10) {\n        return 10;\n    }\n    if(steps == 11) {\n        return 11;\n    }\n    if(steps == 12) {\n        return 12;\n    }\n    if(steps == 13) {\n        return 13;\n    }\n    if(steps == 14) {\n        return 14;\n    }\n    if(steps == 15) {\n        return 15;\n    }\n    if(steps == 16) {\n        return 16;\n    }\n    if(steps == 17) {\n        return 17;\n    }\n    if(steps == 18) {\n        return 18;\n    }\n    if(steps == 19) {\n        return 19;\n    }\n    if(steps == 20) {\n        return 20;\n    }\n    if(steps == 21) {\n        return 21;\n    }\n    if(steps == 22) {\n        return 22;\n    }\n    if(steps == 23) {\n        return 23;\n    }\n    if(steps == 24) {\n        return 24;\n    }\n    if(steps == 25) {\n        return 25;\n    }\n    if(steps == 26) {\n        return 26;\n    }\n    if(steps == 27) {\n        return 27;\n    }\n    if(steps == 28) {\n        return 28;\n    }\n    if(steps == 29) {\n        return 29;\n    }\n   ",
    "    float jumps = 0;\n    if (steps == 0) {\n        return 0;\n    }\n    if (steps > d) {\n        jumps = steps / d;\n        steps = steps % d;\n    }\n    if (steps == 0) {\n        return jumps;\n    }\n    if (steps == 1) {\n        return jumps + 1;\n    }\n    if (steps == 2) {\n        return jumps + 1;\n    }\n    if (steps == 3) {\n        return jumps + 2;\n    }\n    if (steps == 4) {\n        return jumps + 2;\n    }\n    if (steps == 5) {\n        return jumps + 3;\n    }\n    if (steps == 6) {\n        return jumps + 3;\n    }\n    if (steps == 7) {\n        return jumps + 4;\n    }\n    if (steps == 8) {\n        return jumps + 4;\n    }\n    if (steps == 9) {\n        return jumps + 5;\n    }\n    if (steps == 10) {\n        return jumps + 5;\n    }\n    if (steps == 11) {\n        return jumps + 6;\n    }\n    if (steps == 12) {\n        return jumps + 6;\n    }\n    if (steps == 13) {\n        return jumps + 7;\n    }\n    if (steps == 14) {\n        return jumps + 7;\n    }\n    if (steps == 15) {\n        return jumps + 8;\n    }\n    if (steps == 16) {\n        return jumps + 8;\n    }\n    if (steps == 17) {\n        return jumps + 9;\n    }\n    if (steps == 18) {\n        return jumps + 9;\n    }\n    if (steps == 19) {\n        return jumps + 10;\n    }\n    if (steps == 20) {\n        return jumps + 10;\n    }\n    if (steps == 21) {\n        return jumps + 11;\n    }\n    if (steps == 22) {\n        return jumps + 11;\n    }\n    if (steps == 23) {\n        return jumps + 12;\n    }\n    if (steps ==",
    "    if(d == 0)\n        return 0;\n    if(d == 1)\n        return 1;\n    if(d == 2)\n        return 2;\n    if(d == 3)\n        return 3;\n    if(d == 4)\n        return 4;\n    if(d == 5)\n        return 5;\n    if(d == 6)\n        return 6;\n    if(d == 7)\n        return 7;\n    if(d == 8)\n        return 8;\n    if(d == 9)\n        return 9;\n    if(d == 10)\n        return 10;\n    if(d == 11)\n        return 11;\n    if(d == 12)\n        return 12;\n    if(d == 13)\n        return 13;\n    if(d == 14)\n        return 14;\n    if(d == 15)\n        return 15;\n    if(d == 16)\n        return 16;\n    if(d == 17)\n        return 17;\n    if(d == 18)\n        return 18;\n    if(d == 19)\n        return 19;\n    if(d == 20)\n        return 20;\n    if(d == 21)\n        return 21;\n    if(d == 22)\n        return 22;\n    if(d == 23)\n        return 23;\n    if(d == 24)\n        return 24;\n    if(d == 25)\n        return 25;\n    if(d == 26)\n        return 26;\n    if(d == 27)\n        return 27;\n    if(d == 28)\n        return 28;\n    if(d == 29)\n        return 29;\n    if(d == 30)\n        return 30;\n    if(d == 31)\n        return 31;\n    if(d == 32)\n        return 32;\n    if(d == 33)\n        return 33;\n    if(d == 34)\n        return 34;\n    if(d == 35)\n        return 35;\n    if(d == 36)\n        return 36;\n    if(d == 37)\n        return 37;\n    if(d == 38)\n        return 38;\n    if(d",
    "    if (d == 0) {\n        return 0;\n    }\n    if (steps == 0) {\n        return INT_MAX;\n    }\n    if (steps == d) {\n        return 1;\n    }\n    float min = INT_MAX;\n    for (long i = 1; i <= steps; i++) {\n        float jumps = min_Jumps(steps - i, d - i);\n        if (jumps != INT_MAX && jumps + 1 < min) {\n            min = jumps + 1;\n        }\n    }\n    return min;",
    "    if(steps == 0) return 0;\n    if(steps == 1) return 1;\n    if(steps == 2) return 2;\n    if(steps == 3) return 3;\n    if(steps == 4) return 4;\n    if(steps == 5) return 5;\n    if(steps == 6) return 6;\n    if(steps == 7) return 7;\n    if(steps == 8) return 8;\n    if(steps == 9) return 9;\n    if(steps == 10) return 10;\n    if(steps == 11) return 11;\n    if(steps == 12) return 12;\n    if(steps == 13) return 13;\n    if(steps == 14) return 14;\n    if(steps == 15) return 15;\n    if(steps == 16) return 16;\n    if(steps == 17) return 17;\n    if(steps == 18) return 18;\n    if(steps == 19) return 19;\n    if(steps == 20) return 20;\n    if(steps == 21) return 21;\n    if(steps == 22) return 22;\n    if(steps == 23) return 23;\n    if(steps == 24) return 24;\n    if(steps == 25) return 25;\n    if(steps == 26) return 26;\n    if(steps == 27) return 27;\n    if(steps == 28) return 28;\n    if(steps == 29) return 29;\n    if(steps == 30) return 30;\n    if(steps == 31) return 31;\n    if(steps == 32) return 32;\n    if(steps == 33) return 33;\n    if(steps == 34) return 34;\n    if(steps == 35) return 35;\n    if(steps == 36) return 36;\n    if(steps == 37) return 37;\n    if(steps == 38) return 38;\n    if(steps == 39) return 39;\n    if(steps == 40) return 40;\n    if(steps == 41) return 41;\n    if(steps == 42) return 42;\n    if(steps == 43) return 43;\n    if(steps == 44) return 44;\n    if(steps == 45) return 45;\n    if(steps ==",
    "  if(d == 0)\n    return 0;\n  if(steps == 0)\n    return INT_MAX;\n  if(steps == d)\n    return 1;\n  float min = INT_MAX;\n  for(int i = 1; i <= steps; i++) {\n    float jumps = min_Jumps(steps - i, d - i);\n    if(jumps != INT_MAX && jumps + 1 < min)\n      min = jumps + 1;\n  }\n  return min;",
    "    if(d == 0) {\n        return 0;\n    }\n    if(steps == 0) {\n        return INT_MAX;\n    }\n    if(steps == d) {\n        return 1;\n    }\n    return std::min(min_Jumps(steps-1, d-1), min_Jumps(steps-1, d+1)) + 1;",
    "    if (steps == 0) {\n        return 0;\n    }\n    if (steps == 1) {\n        return d;\n    }\n    if (steps == 2) {\n        return d + 1;\n    }\n    if (steps == 3) {\n        return d + 2;\n    }\n    if (steps == 4) {\n        return d + 3;\n    }\n    if (steps == 5) {\n        return d + 4;\n    }\n    if (steps == 6) {\n        return d + 5;\n    }\n    if (steps == 7) {\n        return d + 6;\n    }\n    if (steps == 8) {\n        return d + 7;\n    }\n    if (steps == 9) {\n        return d + 8;\n    }\n    if (steps == 10) {\n        return d + 9;\n    }\n    if (steps == 11) {\n        return d + 10;\n    }\n    if (steps == 12) {\n        return d + 11;\n    }\n    if (steps == 13) {\n        return d + 12;\n    }\n    if (steps == 14) {\n        return d + 13;\n    }\n    if (steps == 15) {\n        return d + 14;\n    }\n    if (steps == 16) {\n        return d + 15;\n    }\n    if (steps == 17) {\n        return d + 16;\n    }\n    if (steps == 18) {\n        return d + 17;\n    }\n    if (steps == 19) {\n        return d + 18;\n    }\n    if (steps == 20) {\n        return d + 19;\n    }\n    if (steps == 21) {\n        return d + 20;\n    }\n    if (steps == 22) {\n        return d + 21;\n    }\n    if (steps == 23) {\n        return d + 22;\n    }\n    if (steps == 24) {\n        return d + 23;\n    }\n    if (steps == 25) {\n        return d + 24;\n    }\n    if (steps == 26) {\n        return d + 25;\n    }\n    if",
    "    if(steps == 0)\n        return 0;\n    if(steps == 1)\n        return d;\n    if(steps == 2)\n        return d/2.0;\n    if(steps == 3)\n        return d/4.0;\n    if(steps == 4)\n        return d/8.0;\n    if(steps == 5)\n        return d/16.0;\n    if(steps == 6)\n        return d/32.0;\n    if(steps == 7)\n        return d/64.0;\n    if(steps == 8)\n        return d/128.0;\n    if(steps == 9)\n        return d/256.0;\n    if(steps == 10)\n        return d/512.0;\n    if(steps == 11)\n        return d/1024.0;\n    if(steps == 12)\n        return d/2048.0;\n    if(steps == 13)\n        return d/4096.0;\n    if(steps == 14)\n        return d/8192.0;\n    if(steps == 15)\n        return d/16384.0;\n    if(steps == 16)\n        return d/32768.0;\n    if(steps == 17)\n        return d/65536.0;\n    if(steps == 18)\n        return d/131072.0;\n    if(steps == 19)\n        return d/262144.0;\n    if(steps == 20)\n        return d/524288.0;\n    if(steps == 21)\n        return d/1048576.0;\n    if(steps == 22)\n        return d/2097152.0;\n    if(steps == 23)\n        return d/4194304.0;\n    if(steps == 24)\n        return d/8388608.0;\n    if(steps == 25)\n        return d/16777216.0;\n    if(steps == 26)\n        return d/33554432.0;\n    if(steps == 27)\n        return d/67108864.0;\n    if(steps == 28)\n        return d/134217728",
    "    if(steps == 0) {\n        return 0;\n    }\n    if(steps == 1) {\n        return 1;\n    }\n    if(steps == 2) {\n        return 2;\n    }\n    if(steps == 3) {\n        return 3;\n    }\n    if(steps == 4) {\n        return 4;\n    }\n    if(steps == 5) {\n        return 5;\n    }\n    if(steps == 6) {\n        return 6;\n    }\n    if(steps == 7) {\n        return 7;\n    }\n    if(steps == 8) {\n        return 8;\n    }\n    if(steps == 9) {\n        return 9;\n    }\n    if(steps == 10) {\n        return 10;\n    }\n    if(steps == 11) {\n        return 11;\n    }\n    if(steps == 12) {\n        return 12;\n    }\n    if(steps == 13) {\n        return 13;\n    }\n    if(steps == 14) {\n        return 14;\n    }\n    if(steps == 15) {\n        return 15;\n    }\n    if(steps == 16) {\n        return 16;\n    }\n    if(steps == 17) {\n        return 17;\n    }\n    if(steps == 18) {\n        return 18;\n    }\n    if(steps == 19) {\n        return 19;\n    }\n    if(steps == 20) {\n        return 20;\n    }\n    if(steps == 21) {\n        return 21;\n    }\n    if(steps == 22) {\n        return 22;\n    }\n    if(steps == 23) {\n        return 23;\n    }\n    if(steps == 24) {\n        return 24;\n    }\n    if(steps == 25) {\n        return 25;\n    }\n    if(steps == 26) {\n        return 26;\n    }\n    if(steps == 27) {\n        return 27;\n    }\n    if(steps == 28) {\n        return 28;\n    }\n    if(steps == 29) {\n        return 29;\n    }\n   ",
    "    if(d == 0)\n        return 0;\n    if(steps == 0)\n        return -1;\n    float min = INT_MAX;\n    for(int i = 1; i <= steps; i++) {\n        float jumps = min_Jumps(steps - i, d - i);\n        if(jumps != -1 && jumps + 1 < min)\n            min = jumps + 1;\n    }\n    return min;",
    "    if(steps == 0)\n        return 0;\n    if(steps == 1)\n        return 1;\n    if(steps == 2)\n        return 2;\n    if(steps == 3)\n        return 3;\n    if(steps == 4)\n        return 4;\n    if(steps == 5)\n        return 5;\n    if(steps == 6)\n        return 6;\n    if(steps == 7)\n        return 7;\n    if(steps == 8)\n        return 8;\n    if(steps == 9)\n        return 9;\n    if(steps == 10)\n        return 10;\n    if(steps == 11)\n        return 11;\n    if(steps == 12)\n        return 12;\n    if(steps == 13)\n        return 13;\n    if(steps == 14)\n        return 14;\n    if(steps == 15)\n        return 15;\n    if(steps == 16)\n        return 16;\n    if(steps == 17)\n        return 17;\n    if(steps == 18)\n        return 18;\n    if(steps == 19)\n        return 19;\n    if(steps == 20)\n        return 20;\n    if(steps == 21)\n        return 21;\n    if(steps == 22)\n        return 22;\n    if(steps == 23)\n        return 23;\n    if(steps == 24)\n        return 24;\n    if(steps == 25)\n        return 25;\n    if(steps == 26)\n        return 26;\n    if(steps == 27)\n        return 27;\n    if(steps == 28)\n        return 28;\n    if(steps == 29)\n        return 29;\n    if(steps == 30)\n        return 30;\n    if(steps == 31)\n        return 31;\n    if(steps == 32)\n        return 32;\n    if(steps == 33)\n        return 33;\n    if(steps == 34)\n        return 34;\n    if(steps == 35)\n        return 35;\n    if(steps == 36)\n        return 36;\n    if(steps == 37)\n        return 37;\n    if(steps == 38)\n        return 38;\n    if(steps"
  ]
}