{
  "name": "mbpp_445_index_multiplication",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nlong index_multiplication(long test_tup1, long test_tup2) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_445_index_multiplication.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = index_multiplication;\n    assert(candidate(std::make_tuple(std::make_tuple(1, 3), std::make_tuple(4, 5), std::make_tuple(2, 9), std::make_tuple(1, 10)), std::make_tuple(std::make_tuple(6, 7), std::make_tuple(3, 9), std::make_tuple(1, 1), std::make_tuple(7, 3))) == std::make_tuple(std::make_tuple(6, 21), std::make_tuple(12, 45), std::make_tuple(2, 9), std::make_tuple(7, 30)));\n    assert(candidate(std::make_tuple(std::make_tuple(2, 4), std::make_tuple(5, 6), std::make_tuple(3, 10), std::make_tuple(2, 11)), std::make_tuple(std::make_tuple(7, 8), std::make_tuple(4, 10), std::make_tuple(2, 2), std::make_tuple(8, 4))) == std::make_tuple(std::make_tuple(14, 32), std::make_tuple(20, 60), std::make_tuple(6, 20), std::make_tuple(16, 44)));\n    assert(candidate(std::make_tuple(std::make_tuple(3, 5), std::make_tuple(6, 7), std::make_tuple(4, 11), std::make_tuple(3, 12)), std::make_tuple(std::make_tuple(8, 9), std::make_tuple(5, 11), std::make_tuple(3, 3), std::make_tuple(9, 5))) == std::make_tuple(std::make_tuple(24, 45), std::make_tuple(30, 77), std::make_tuple(12, 33), std::make_tuple(27, 60)));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long result = 0;\n    for (int i = 0; i < sizeof(test_tup1); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long test_tup3 = 0;\n    for (int i = 0; i < sizeof(test_tup1); i++) {\n        test_tup3 += (test_tup1[i] * test_tup2[i]);\n    }\n    return test_tup3;",
    "    assert(test_tup1.size() == test_tup2.size());\n    long result_tup;\n    for(int i = 0; i < test_tup1.size(); i++) {\n        result_tup.push_back(test_tup1[i] * test_tup2[i]);\n    }\n    return result_tup;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    // Write your code here\n    // To print results to the standard output you can use print\n    // Example: print \"Hello world!\"\n    long tup1[3], tup2[3];\n    tup1[0] = test_tup1 / 1000000;\n    tup1[1] = (test_tup1 / 1000) % 1000;\n    tup1[2] = test_tup1 % 1000;\n    tup2[0] = test_tup2 / 1000000;\n    tup2[1] = (test_tup2 / 1000) % 1000;\n    tup2[2] = test_tup2 % 1000;\n    long res = 0;\n    for (int i = 0; i < 3; i++) {\n        res += tup1[i] * tup2[i];\n    }\n    return res;",
    "  long test_tup1_size = test_tup1.size();\n  long test_tup2_size = test_tup2.size();\n  long test_tup_size = test_tup1_size;\n  if (test_tup1_size > test_tup2_size) {\n    test_tup_size = test_tup2_size;\n  }\n  long test_tup_new = new tuple(test_tup_size);\n  for (long i = 0; i < test_tup_size; i++) {\n    test_tup_new[i] = test_tup1[i] * test_tup2[i];\n  }\n  return test_tup_new;",
    "    long result = 1;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result *= test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    return test_tup1 * test_tup2;",
    "    long test_tup1_len = test_tup1.length();\n    long test_tup2_len = test_tup2.length();\n    long test_tup3 = (test_tup1_len, test_tup2_len);\n    for (long i = 0; i < test_tup1_len; i++) {\n        test_tup3[i] = test_tup1[i] * test_tup2[i];\n    }\n    return test_tup3;",
    "    return test_tup1 * test_tup2;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long test_tup3 = 0;\n    for (int i = 0; i < sizeof(test_tup1); i++) {\n        test_tup3 += (test_tup1[i] * test_tup2[i]);\n    }\n    return test_tup3;",
    "    long result = 0;\n    for(int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    // Write your code here\n    // To print results to the standard output you can use print function\n    long sum = 0;\n    for(int i = 0; i < test_tup1.size(); i++) {\n        sum += test_tup1[i] * test_tup2[i];\n    }\n    return sum;",
    "    long result = 0;\n    for (int i = 0; i < sizeof(test_tup1); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    return test_tup1 * test_tup2;",
    "    long result = 0;\n    long tup1 = test_tup1;\n    long tup2 = test_tup2;\n    while(tup1 != 0 && tup2 != 0) {\n        long rem1 = tup1 % 10;\n        long rem2 = tup2 % 10;\n        result = result + (rem1 * rem2);\n        tup1 = tup1 / 10;\n        tup2 = tup2 / 10;\n    }\n    return result;",
    "    return test_tup1 * test_tup2;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long test_tup3 = 0;\n    for (int i = 0; i < sizeof(test_tup1); i++) {\n        test_tup3 += test_tup1[i] * test_tup2[i];\n    }\n    return test_tup3;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for(int i = 0; i < sizeof(test_tup1); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long test_tup3 = test_tup1 * test_tup2;\n    return test_tup3;",
    "    long test_tup3 = test_tup1 * test_tup2;\n    return test_tup3;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long test_tup3 = test_tup1 * test_tup2;\n    return test_tup3;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < sizeof(test_tup1); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < sizeof(test_tup1); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long tup1 = test_tup1;\n    long tup2 = test_tup2;\n    long result = 0;\n    long count = 0;\n    while(tup1 != 0) {\n        result += ((tup1 % 10) * (tup2 % 10)) * pow(10, count);\n        tup1 /= 10;\n        tup2 /= 10;\n        count++;\n    }\n    return result;",
    "    long test_tup3;\n    test_tup3 = test_tup1 * test_tup2;\n    return test_tup3;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    return test_tup1 * test_tup2;",
    "    long test_tup1_size = test_tup1.size();\n    long test_tup2_size = test_tup2.size();\n    long test_tup3_size = test_tup1_size + test_tup2_size;\n    long test_tup3[test_tup3_size];\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    while (i < test_tup1_size && j < test_tup2_size) {\n        if (test_tup1[i] < test_tup2[j]) {\n            test_tup3[k] = test_tup1[i];\n            i++;\n        }\n        else {\n            test_tup3[k] = test_tup2[j];\n            j++;\n        }\n        k++;\n    }\n    while (i < test_tup1_size) {\n        test_tup3[k] = test_tup1[i];\n        i++;\n        k++;\n    }\n    while (j < test_tup2_size) {\n        test_tup3[k] = test_tup2[j];\n        j++;\n        k++;\n    }\n    return test_tup3;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < sizeof(test_tup1); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "\tlong result = test_tup1 * test_tup2;\n\treturn result;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < sizeof(test_tup1); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for(int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for(int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    return test_tup1 * test_tup2;",
    "    long result = 0;\n    for (int i = 0; i < sizeof(test_tup1); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 1;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result *= test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "\tlong tup1 = test_tup1;\n\tlong tup2 = test_tup2;\n\tlong result = 1;\n\twhile (tup1 != 0 && tup2 != 0) {\n\t\tlong rem1 = tup1 % 10;\n\t\tlong rem2 = tup2 % 10;\n\t\tresult = result * (rem1 * rem2);\n\t\ttup1 = tup1 / 10;\n\t\ttup2 = tup2 / 10;\n\t}\n\treturn result;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    // Write your code here\n    // To print results to the standard output you can use print\n    // Example: print \"Hello world!\"\n    long res = 0;\n    for(int i=0;i<test_tup1.size();i++){\n        res += test_tup1[i]*test_tup2[i];\n    }\n    return res;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < sizeof(test_tup1); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "\tlong test_tup1_len = test_tup1.length();\n\tlong test_tup2_len = test_tup2.length();\n\tlong test_tup3_len = test_tup1_len + test_tup2_len;\n\tlong test_tup3 = new tuple(test_tup3_len);\n\tfor (long i = 0; i < test_tup1_len; i++) {\n\t\ttest_tup3[i] = test_tup1[i] * test_tup2[i];\n\t}\n\treturn test_tup3;",
    "    long result = 0;\n    for(int i=0; i<test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long tup1 = test_tup1;\n    long tup2 = test_tup2;\n    long mul = 1;\n    while(tup1 != 0 && tup2 != 0) {\n        mul *= (tup1 % 10) * (tup2 % 10);\n        tup1 /= 10;\n        tup2 /= 10;\n    }\n    return mul;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < sizeof(test_tup1); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for(int i = 0; i < sizeof(test_tup1); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < sizeof(test_tup1); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long test_tup3;\n    test_tup3 = test_tup1 * test_tup2;\n    return test_tup3;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < sizeof(test_tup1); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long res = 0;\n    for (int i = 0; i < sizeof(test_tup1); i++) {\n        res += test_tup1[i] * test_tup2[i];\n    }\n    return res;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < sizeof(test_tup1); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    // Write your code here\n    // To print results to the standard output you can use print\n    // Example: print \"Hello world!\"\n    long result = 0;\n    for(int i = 0; i < test_tup1.size(); i++){\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < sizeof(test_tup1); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for(int i = 0; i < sizeof(test_tup1); i++) {\n        result += (test_tup1[i] * test_tup2[i]);\n    }\n    return result;",
    "    assert(test_tup1.size() == test_tup2.size());\n    long test_tup3;\n    for(int i = 0; i < test_tup1.size(); i++) {\n        test_tup3.push_back(test_tup1[i] * test_tup2[i]);\n    }\n    return test_tup3;",
    "    long result = 0;\n    for(int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    // Write your code here\n    // To print results to the standard output you can use print\n    // Example: print \"Hello world!\"\n    long result = 0;\n    for(int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long tup1 = test_tup1;\n    long tup2 = test_tup2;\n    long sum = 0;\n    long i = 0;\n    while(tup1 != 0 && tup2 != 0) {\n        long tup1_last = tup1 % 10;\n        long tup2_last = tup2 % 10;\n        sum += (tup1_last * tup2_last) * pow(10, i);\n        tup1 /= 10;\n        tup2 /= 10;\n        i++;\n    }\n    return sum;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < sizeof(test_tup1); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < sizeof(test_tup1); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < sizeof(test_tup1); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long test_tup3 = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        test_tup3.append(test_tup1[i] * test_tup2[i]);\n    }\n    return test_tup3;",
    "    long test_tup1_len = test_tup1.length();\n    long test_tup2_len = test_tup2.length();\n    long test_tup3_len = test_tup1_len + test_tup2_len;\n    long test_tup3 = new long[test_tup3_len];\n    for(long i = 0; i < test_tup1_len; i++) {\n        test_tup3[i] = test_tup1[i] * test_tup2[i];\n    }\n    return test_tup3;",
    "    long result = 1;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result = result * test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long test_tup3;\n    test_tup3 = test_tup1 * test_tup2;\n    return test_tup3;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < sizeof(test_tup1); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "\tlong result = 0;\n\tfor (int i = 0; i < test_tup1.size(); i++) {\n\t\tresult = result + test_tup1[i] * test_tup2[i];\n\t}\n\treturn result;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    return test_tup1 * test_tup2;",
    "    long test_tup3 = 0;\n    for(int i = 0; i < sizeof(test_tup1); i++) {\n        test_tup3 += test_tup1[i] * test_tup2[i];\n    }\n    return test_tup3;",
    "    long result = 0;\n    for (int i = 0; i < sizeof(test_tup1); i++) {\n        result += (test_tup1[i] * test_tup2[i]);\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long test_tup3 = 0;\n    for (int i = 0; i < sizeof(test_tup1); i++) {\n        test_tup3 += (test_tup1[i] * test_tup2[i]);\n    }\n    return test_tup3;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result;\n    result = test_tup1 * test_tup2;\n    return result;",
    "    int i = 0;\n    long result = 0;\n    while (test_tup1 != 0 && test_tup2 != 0) {\n        int digit1 = test_tup1 % 10;\n        int digit2 = test_tup2 % 10;\n        result += digit1 * digit2 * pow(10, i);\n        test_tup1 /= 10;\n        test_tup2 /= 10;\n        i++;\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long test_tup3 = 0;\n    for (int i = 0; i < 4; i++) {\n        test_tup3 = test_tup3 + (test_tup1 % 10) * (test_tup2 % 10);\n        test_tup1 = test_tup1 / 10;\n        test_tup2 = test_tup2 / 10;\n    }\n    return test_tup3;",
    "    long result = 0;\n    for (int i = 0; i < sizeof(test_tup1); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long test_tup3 = 0;\n    long test_tup4 = 0;\n    long test_tup5 = 0;\n    long test_tup6 = 0;\n    long test_tup7 = 0;\n    long test_tup8 = 0;\n    long test_tup9 = 0;\n    long test_tup10 = 0;\n    long test_tup11 = 0;\n    long test_tup12 = 0;\n    long test_tup13 = 0;\n    long test_tup14 = 0;\n    long test_tup15 = 0;\n    long test_tup16 = 0;\n    long test_tup17 = 0;\n    long test_tup18 = 0;\n    long test_tup19 = 0;\n    long test_tup20 = 0;\n    long test_tup21 = 0;\n    long test_tup22 = 0;\n    long test_tup23 = 0;\n    long test_tup24 = 0;\n    long test_tup25 = 0;\n    long test_tup26 = 0;\n    long test_tup27 = 0;\n    long test_tup28 = 0;\n    long test_tup29 = 0;\n    long test_tup30 = 0;\n    long test_tup31 = 0;\n    long test_tup32 = 0;\n    long test_tup33 = 0;\n    long test_tup34 = 0;\n    long test_tup35 = 0;\n    long test_tup36 = 0;\n    long test_tup37 = 0;\n    long test_tup38 = 0;\n    long test_tup39 = 0;\n    long test_tup40 = 0;\n    long test_tup41 = 0;\n    long test_tup42 = 0;\n    long test_tup43 = 0;\n    long test_tup44 = 0;\n    long test_tup45 = 0;\n    long test_tup46 = 0;\n    long test_tup47 = 0;\n    long test_tup48 = 0;\n    long test_t",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.length(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.length(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "\tlong result = 1;\n\tfor (int i = 0; i < test_tup1.size(); i++) {\n\t\tresult *= test_tup1[i] * test_tup2[i];\n\t}\n\treturn result;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for(int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < sizeof(test_tup1); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long test_tup1_size = test_tup1.size();\n    long test_tup2_size = test_tup2.size();\n    long test_tup3_size = test_tup1_size + test_tup2_size;\n    long test_tup3[test_tup3_size];\n    for (long i = 0; i < test_tup1_size; i++) {\n        test_tup3[i] = test_tup1[i] * test_tup2[i];\n    }\n    return test_tup3;",
    "    return test_tup1 * test_tup2;",
    "    return test_tup1 * test_tup2;",
    "    long test_tup3;\n    test_tup3 = test_tup1 * test_tup2;\n    return test_tup3;",
    "    return test_tup1 * test_tup2;",
    "    long result = 0;\n    int i = 0;\n    while(test_tup1 != 0 && test_tup2 != 0) {\n        result += ((test_tup1 % 10) * (test_tup2 % 10)) * pow(10, i);\n        test_tup1 /= 10;\n        test_tup2 /= 10;\n        i++;\n    }\n    return result;",
    "    long result = 0;\n    for(int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long tup1 = test_tup1;\n    long tup2 = test_tup2;\n    long mul = 1;\n    while(tup1 != 0 && tup2 != 0) {\n        mul = mul * (tup1 % 10) * (tup2 % 10);\n        tup1 = tup1 / 10;\n        tup2 = tup2 / 10;\n    }\n    return mul;",
    "    long test_tup1_size = test_tup1.size();\n    long test_tup2_size = test_tup2.size();\n    long test_tup3_size = test_tup1_size + test_tup2_size;\n    long test_tup3[test_tup3_size];\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    while (i < test_tup1_size && j < test_tup2_size) {\n        test_tup3[k] = test_tup1[i] * test_tup2[j];\n        i++;\n        j++;\n        k++;\n    }\n    while (i < test_tup1_size) {\n        test_tup3[k] = test_tup1[i];\n        i++;\n        k++;\n    }\n    while (j < test_tup2_size) {\n        test_tup3[k] = test_tup2[j];\n        j++;\n        k++;\n    }\n    return test_tup3;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long test_tup1_size = test_tup1.size();\n    long test_tup2_size = test_tup2.size();\n    long result_tup = new tuple();\n    if (test_tup1_size == test_tup2_size) {\n        for (long i = 0; i < test_tup1_size; i++) {\n            result_tup.append(test_tup1[i] * test_tup2[i]);\n        }\n    }\n    return result_tup;",
    "    return test_tup1 * test_tup2;",
    "    long tup1 = test_tup1;\n    long tup2 = test_tup2;\n    long mul = 1;\n    while(tup1 != 0 && tup2 != 0) {\n        mul *= (tup1 % 10) * (tup2 % 10);\n        tup1 /= 10;\n        tup2 /= 10;\n    }\n    return mul;",
    "    // Write your code here\n    // To print results to the standard output you can use the printf function\n    // For example: printf(\"%s\", \"Hello world!\");\n    long result = 0;\n    for(int i = 0; i < sizeof(test_tup1); i++){\n        result = result + (test_tup1[i] * test_tup2[i]);\n    }\n    return result;",
    "    long tuple_product = 1;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        tuple_product *= test_tup1[i] * test_tup2[i];\n    }\n    return tuple_product;",
    "    long tup1 = test_tup1;\n    long tup2 = test_tup2;\n    long tup3 = 0;\n    long i = 0;\n    while (tup1 != 0 && tup2 != 0) {\n        long rem1 = tup1 % 10;\n        long rem2 = tup2 % 10;\n        long rem3 = rem1 * rem2;\n        tup3 = tup3 + rem3 * pow(10, i);\n        tup1 = tup1 / 10;\n        tup2 = tup2 / 10;\n        i++;\n    }\n    return tup3;",
    "    long test_tup3;\n    test_tup3 = test_tup1 * test_tup2;\n    return test_tup3;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long test_tup3;\n    test_tup3 = test_tup1 * test_tup2;\n    return test_tup3;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for(int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long test_tup3;\n    test_tup3 = test_tup1 * test_tup2;\n    return test_tup3;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long test_tup3 = test_tup1 * test_tup2;\n    return test_tup3;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long test_tup3;\n    test_tup3 = test_tup1 * test_tup2;\n    return test_tup3;",
    "\tlong result = 1;\n\tfor (int i = 0; i < test_tup1.size(); i++) {\n\t\tresult *= test_tup1[i] * test_tup2[i];\n\t}\n\treturn result;",
    "    long tup1[3], tup2[3];\n    tup1[0] = test_tup1 / 100;\n    tup1[1] = test_tup1 / 10 % 10;\n    tup1[2] = test_tup1 % 10;\n    tup2[0] = test_tup2 / 100;\n    tup2[1] = test_tup2 / 10 % 10;\n    tup2[2] = test_tup2 % 10;\n    long result = tup1[0] * tup2[0] + tup1[1] * tup2[1] + tup1[2] * tup2[2];\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < sizeof(test_tup1); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for(int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    // Write your code here\n    // To print results to the standard output you can use print function\n    long result = 0;\n    int i = 0;\n    while(test_tup1 > 0 && test_tup2 > 0) {\n        int a = test_tup1 % 10;\n        int b = test_tup2 % 10;\n        result += (a * b) * pow(10, i);\n        test_tup1 /= 10;\n        test_tup2 /= 10;\n        i++;\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    // Write your code here\n    // To print results to the standard output you can use print\n    // Example: print \"Hello world!\"\n    long result = 0;\n    for(int i=0;i<test_tup1.size();i++){\n        result += test_tup1[i]*test_tup2[i];\n    }\n    return result;",
    "    long tup1 = test_tup1;\n    long tup2 = test_tup2;\n    long tup1_size = 0;\n    long tup2_size = 0;\n    long tup1_element = 0;\n    long tup2_element = 0;\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n    long j = 0;\n    while (tup1 != 0) {\n        tup1_element = tup1 % 10;\n        tup1_size++;\n        tup1 = tup1 / 10;\n    }\n    while (tup2 != 0) {\n        tup2_element = tup2 % 10;\n        tup2_size++;\n        tup2 = tup2 / 10;\n    }\n    if (tup1_size != tup2_size) {\n        return -1;\n    }\n    while (test_tup1 != 0) {\n        tup1_element = test_tup1 % 10;\n        tup2_element = test_tup2 % 10;\n        temp = tup1_element * tup2_element;\n        for (i = 0; i < j; i++) {\n            temp = temp * 10;\n        }\n        result = result + temp;\n        test_tup1 = test_tup1 / 10;\n        test_tup2 = test_tup2 / 10;\n        j++;\n    }\n    return result;",
    "    long tup1 = test_tup1;\n    long tup2 = test_tup2;\n    long tup1_size = 0;\n    long tup2_size = 0;\n    long tup1_element = 0;\n    long tup2_element = 0;\n    long index_multiplication_result = 0;\n    while (tup1 != 0) {\n        tup1_size++;\n        tup1 = tup1 / 10;\n    }\n    while (tup2 != 0) {\n        tup2_size++;\n        tup2 = tup2 / 10;\n    }\n    if (tup1_size == tup2_size) {\n        for (long i = 0; i < tup1_size; i++) {\n            tup1_element = test_tup1 % 10;\n            tup2_element = test_tup2 % 10;\n            index_multiplication_result = index_multiplication_result + (tup1_element * tup2_element);\n            test_tup1 = test_tup1 / 10;\n            test_tup2 = test_tup2 / 10;\n        }\n        return index_multiplication_result;\n    }\n    else {\n        return -1;\n    }",
    "    int i = 0;\n    long result = 0;\n    while (test_tup1 != 0 && test_tup2 != 0) {\n        int a = test_tup1 % 10;\n        int b = test_tup2 % 10;\n        result += a * b * pow(10, i);\n        test_tup1 /= 10;\n        test_tup2 /= 10;\n        i++;\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < sizeof(test_tup1); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long tup1 = test_tup1;\n    long tup2 = test_tup2;\n    long result = 0;\n    long temp = 0;\n    long count = 0;\n    while (tup1 != 0) {\n        temp = (tup1 % 10) * (tup2 % 10);\n        result += temp * pow(10, count);\n        count += 1;\n        tup1 /= 10;\n        tup2 /= 10;\n    }\n    return result;",
    "    return test_tup1 * test_tup2;",
    "    return test_tup1 * test_tup2;",
    "    long result = 0;\n    for (int i = 0; i < sizeof(test_tup1); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long res = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        res += test_tup1[i] * test_tup2[i];\n    }\n    return res;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for(int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    return test_tup1*test_tup2;",
    "    long result = 0;\n    for(int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < sizeof(test_tup1); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < sizeof(test_tup1); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long tup1 = test_tup1;\n    long tup2 = test_tup2;\n    long result = 0;\n    while(tup1 != 0 && tup2 != 0) {\n        long tup1_last_digit = tup1 % 10;\n        long tup2_last_digit = tup2 % 10;\n        result = result + (tup1_last_digit * tup2_last_digit);\n        tup1 = tup1 / 10;\n        tup2 = tup2 / 10;\n    }\n    return result;",
    "    long res = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        res += test_tup1[i] * test_tup2[i];\n    }\n    return res;",
    "    long result = 0;\n    for (int i = 0; i < sizeof(test_tup1); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    return test_tup1 * test_tup2;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    return test_tup1*test_tup2;",
    "    return test_tup1 * test_tup2;",
    "    long result = 0;\n    for(int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "\tlong result = 1;\n\tfor (int i = 0; i < sizeof(test_tup1); i++) {\n\t\tresult *= test_tup1[i] * test_tup2[i];\n\t}\n\treturn result;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "\tlong result = 0;\n\tfor (int i = 0; i < sizeof(test_tup1) / sizeof(test_tup1[0]); i++) {\n\t\tresult += test_tup1[i] * test_tup2[i];\n\t}\n\treturn result;",
    "    long res = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        res += test_tup1[i] * test_tup2[i];\n    }\n    return res;",
    "    long result = 0;\n    for (int i = 0; i < sizeof(test_tup1); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    // Write your code here\n    // To print results to the standard output you can use print function\n    // Example: print a, b\n    long a = std::get<0>(test_tup1);\n    long b = std::get<1>(test_tup1);\n    long c = std::get<2>(test_tup1);\n    long d = std::get<0>(test_tup2);\n    long e = std::get<1>(test_tup2);\n    long f = std::get<2>(test_tup2);\n    long g = a*d;\n    long h = b*e;\n    long i = c*f;\n    std::tuple<long, long, long> result = std::make_tuple(g, h, i);\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for(int i = 0; i < sizeof(test_tup1); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    long test_tup3 = test_tup1 * test_tup2;\n    return test_tup3;",
    "    long result = 0;\n    for (int i = 0; i < sizeof(test_tup1); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "\tlong result = 1;\n\tfor (int i = 0; i < test_tup1.size(); i++) {\n\t\tresult = result * test_tup1[i] * test_tup2[i];\n\t}\n\treturn result;",
    "    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;",
    "    // Write your code here\n    // To print values separated by spaces use 'cout<<i<<\" \";' (without the quotes)\n    long result = 0;\n    for (int i = 0; i < test_tup1.size(); i++) {\n        result += test_tup1[i] * test_tup2[i];\n    }\n    return result;"
  ]
}