{
  "name": "mbpp_405_check_tuplex",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long() {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// Write a function to check whether an element exists within a tuple.\nbool check_tuplex(Union_std_string_long tuplex, std::any tuple1) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_405_check_tuplex.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = check_tuplex;\n    assert(candidate(std::make_tuple(\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), (std::any(\"r\"))) == (true));\n    assert(candidate(std::make_tuple(\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), (std::any(\"5\"))) == (false));\n    assert(candidate(std::make_tuple(\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), (std::any(3))) == (true));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    if (tuple1.type() == typeid(std::tuple<std::string,long>)) {\n        if (tuplex.f0 == std::any_cast<std::tuple<std::string,long>>(tuple1).get<0>()) {\n            return true;\n        }\n        if (tuplex.f1 == std::any_cast<std::tuple<std::string,long>>(tuple1).get<1>()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        auto tuple = std::any_cast<std::tuple<std::string, long>>(tuple1);\n        if (tuplex == std::get<0>(tuple)) {\n            return true;\n        }\n        if (tuplex == std::get<1>(tuple)) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        if (tuplex == std::any_cast<std::tuple<std::string, long>>(tuple1)) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string,long>)) {\n        return tuplex == std::any_cast<std::tuple<std::string,long>>(tuple1);\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        if (std::any_cast<std::tuple<std::string, long>>(tuple1) == std::make_tuple(tuplex.f0, tuplex.f1)) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string,long>)) {\n        return tuplex == std::any_cast<std::tuple<std::string,long>>(tuple1);\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string,long>)) {\n        if (tuplex == std::any_cast<std::tuple<std::string,long>>(tuple1)) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string,long>)) {\n        return std::get<0>(std::any_cast<std::tuple<std::string,long>>(tuple1)) == tuplex.f0 || std::get<1>(std::any_cast<std::tuple<std::string,long>>(tuple1)) == tuplex.f1;\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::string)) {\n        return tuplex.f0 == std::any_cast<std::string>(tuple1);\n    } else if (tuple1.type() == typeid(long)) {\n        return tuplex.f1 == std::any_cast<long>(tuple1);\n    } else {\n        return false;\n    }",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        return tuplex == std::any_cast<std::tuple<std::string, long>>(tuple1);\n    }\n    return false;",
    "    if(tuple1.type() == typeid(std::tuple<std::string>)) {\n        return tuplex == std::any_cast<std::tuple<std::string>>(tuple1);\n    }\n    if(tuple1.type() == typeid(std::tuple<long>)) {\n        return tuplex == std::any_cast<std::tuple<long>>(tuple1);\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        std::tuple<std::string, long> tuple = std::any_cast<std::tuple<std::string, long>>(tuple1);\n        if (tuplex.f0 == std::get<0>(tuple)) {\n            return true;\n        }\n        if (tuplex.f1 == std::get<1>(tuple)) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::string)) {\n        return tuplex.f0 == std::any_cast<std::string>(tuple1);\n    } else if (tuple1.type() == typeid(long)) {\n        return tuplex.f1 == std::any_cast<long>(tuple1);\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string,long>)) {\n        return tuplex == std::any_cast<std::tuple<std::string,long>>(tuple1);\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string,long>)) {\n        return tuplex == std::any_cast<std::tuple<std::string,long>>(tuple1);\n    }\n    else if (tuple1.type() == typeid(std::tuple<long,std::string>)) {\n        return tuplex == std::any_cast<std::tuple<long,std::string>>(tuple1);\n    }\n    else if (tuple1.type() == typeid(std::tuple<long,long>)) {\n        return tuplex == std::any_cast<std::tuple<long,long>>(tuple1);\n    }\n    else if (tuple1.type() == typeid(std::tuple<std::string,std::string>)) {\n        return tuplex == std::any_cast<std::tuple<std::string,std::string>>(tuple1);\n    }\n    else {\n        return false;\n    }",
    "    if (tuple1.type() == typeid(std::tuple<std::string>)) {\n        return tuplex.f0 == std::any_cast<std::tuple<std::string>>(tuple1);\n    }\n    if (tuple1.type() == typeid(std::tuple<long>)) {\n        return tuplex.f1 == std::any_cast<std::tuple<long>>(tuple1);\n    }\n    return false;",
    "    if(tuple1.type() == typeid(std::tuple<std::string,long>)) {\n        auto tuple = std::any_cast<std::tuple<std::string,long>>(tuple1);\n        if(tuplex.f0 == std::get<0>(tuple)) {\n            return true;\n        }\n        if(tuplex.f1 == std::get<1>(tuple)) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        std::tuple<std::string, long> tuple = std::any_cast<std::tuple<std::string, long>>(tuple1);\n        if (tuplex == std::get<0>(tuple)) {\n            return true;\n        }\n        if (tuplex == std::get<1>(tuple)) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string,long>)) {\n        std::tuple<std::string,long> tuple = std::any_cast<std::tuple<std::string,long>>(tuple1);\n        if (tuplex.f0 == std::get<0>(tuple)) {\n            return true;\n        }\n        if (tuplex.f1 == std::get<1>(tuple)) {\n            return true;\n        }\n    }\n    return false;",
    "    if(tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        if(std::any_cast<std::tuple<std::string, long>>(tuple1) == tuplex) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string,long>)) {\n        std::tuple<std::string,long> tuple = std::any_cast<std::tuple<std::string,long>>(tuple1);\n        if (tuplex == std::get<0>(tuple)) {\n            return true;\n        }\n        if (tuplex == std::get<1>(tuple)) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        if (tuplex == std::any_cast<std::tuple<std::string, long>>(tuple1)) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        if (std::any_cast<std::tuple<std::string, long>>(tuple1) == tuplex) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        if (tuplex == std::any_cast<std::tuple<std::string, long>>(tuple1)) {\n            return true;\n        }\n    }\n    return false;",
    "    return tuple1 == tuplex;",
    "    if (tuple1.type() == typeid(std::tuple<std::string>)) {\n        if (std::get<0>(std::any_cast<std::tuple<std::string>>(tuple1)) == tuplex.f0) {\n            return true;\n        }\n    }\n    if (tuple1.type() == typeid(std::tuple<long>)) {\n        if (std::get<0>(std::any_cast<std::tuple<long>>(tuple1)) == tuplex.f1) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuplex.f0 == std::any_cast<std::string>(tuple1)) {\n        return true;\n    } else if (tuplex.f1 == std::any_cast<long>(tuple1)) {\n        return true;\n    } else {\n        return false;\n    }",
    "    return std::any_cast<Union_std_string_long>(tuple1) == tuplex;",
    "    if (tuple1.type() == typeid(std::tuple<std::string>)) {\n        return tuplex == std::any_cast<std::tuple<std::string>>(tuple1);\n    }\n    if (tuple1.type() == typeid(std::tuple<long>)) {\n        return tuplex == std::any_cast<std::tuple<long>>(tuple1);\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        std::tuple<std::string, long> tuple = std::any_cast<std::tuple<std::string, long>>(tuple1);\n        if (tuplex == std::get<0>(tuple)) {\n            return true;\n        }\n        if (tuplex == std::get<1>(tuple)) {\n            return true;\n        }\n    }\n    return false;",
    "    return std::any_cast<Union_std_string_long>(tuple1) == tuplex;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        return std::get<0>(std::any_cast<std::tuple<std::string, long>>(tuple1)) == tuplex.f0 || std::get<1>(std::any_cast<std::tuple<std::string, long>>(tuple1)) == tuplex.f1;\n    } else if (tuple1.type() == typeid(std::tuple<long, std::string>)) {\n        return std::get<0>(std::any_cast<std::tuple<long, std::string>>(tuple1)) == tuplex.f1 || std::get<1>(std::any_cast<std::tuple<long, std::string>>(tuple1)) == tuplex.f0;\n    } else if (tuple1.type() == typeid(std::tuple<std::string, std::string>)) {\n        return std::get<0>(std::any_cast<std::tuple<std::string, std::string>>(tuple1)) == tuplex.f0 || std::get<1>(std::any_cast<std::tuple<std::string, std::string>>(tuple1)) == tuplex.f0;\n    } else if (tuple1.type() == typeid(std::tuple<long, long>)) {\n        return std::get<0>(std::any_cast<std::tuple<long, long>>(tuple1)) == tuplex.f1 || std::get<1>(std::any_cast<std::tuple<long, long>>(tuple1)) == tuplex.f1;\n    } else if (tuple1.type() == typeid(std::tuple<std::string, long, long>)) {\n        return std::get<0>(std::any_cast<std::tuple<std::string, long, long>>(tuple1)) == tuplex.f0 || std::get<1>(std::any_cast<std::tuple<std::string, long, long>>(",
    "    if (tuple1.type() == typeid(std::tuple<std::string,long>)) {\n        auto tuple = std::any_cast<std::tuple<std::string,long>>(tuple1);\n        if (tuplex == std::get<0>(tuple)) {\n            return true;\n        }\n        if (tuplex == std::get<1>(tuple)) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::string)) {\n        return tuplex == std::any_cast<std::string>(tuple1);\n    } else if (tuple1.type() == typeid(long)) {\n        return tuplex == std::any_cast<long>(tuple1);\n    } else {\n        return false;\n    }",
    "    if (tuple1.type() == typeid(std::tuple<std::string,long,std::string>)) {\n        if (std::get<0>(std::any_cast<std::tuple<std::string,long,std::string>>(tuple1)) == tuplex.f0) {\n            return true;\n        }\n        if (std::get<1>(std::any_cast<std::tuple<std::string,long,std::string>>(tuple1)) == tuplex.f1) {\n            return true;\n        }\n        if (std::get<2>(std::any_cast<std::tuple<std::string,long,std::string>>(tuple1)) == tuplex.f0) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string,long>)) {\n        if (tuplex == std::any_cast<std::tuple<std::string,long>>(tuple1)) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        auto tuple = std::any_cast<std::tuple<std::string, long>>(tuple1);\n        if (tuplex.f0 == std::get<0>(tuple)) {\n            return true;\n        }\n        if (tuplex.f1 == std::get<1>(tuple)) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::string)) {\n        return tuplex == std::any_cast<std::string>(tuple1);\n    } else if (tuple1.type() == typeid(long)) {\n        return tuplex == std::any_cast<long>(tuple1);\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        std::tuple<std::string, long> tuple = std::any_cast<std::tuple<std::string, long>>(tuple1);\n        if (tuplex == std::get<0>(tuple)) {\n            return true;\n        }\n        if (tuplex == std::get<1>(tuple)) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        std::tuple<std::string, long> tuple = std::any_cast<std::tuple<std::string, long>>(tuple1);\n        if (tuplex == std::get<0>(tuple) || tuplex == std::get<1>(tuple)) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        if (std::any_cast<std::tuple<std::string, long>>(tuple1) == tuplex) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string,long>)) {\n        if (std::any_cast<std::tuple<std::string,long>>(tuple1) == tuplex) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        if (std::get<0>(std::any_cast<std::tuple<std::string, long>>(tuple1)) == tuplex.f0) {\n            return true;\n        }\n        if (std::get<1>(std::any_cast<std::tuple<std::string, long>>(tuple1)) == tuplex.f1) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        return tuplex == std::any_cast<std::tuple<std::string, long>>(tuple1);\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        return std::get<0>(std::any_cast<std::tuple<std::string, long>>(tuple1)) == tuplex.f0 || std::get<1>(std::any_cast<std::tuple<std::string, long>>(tuple1)) == tuplex.f1;\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        return tuplex == std::any_cast<std::tuple<std::string, long>>(tuple1);\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        return tuplex == std::any_cast<std::tuple<std::string, long>>(tuple1);\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        return tuplex == std::any_cast<std::tuple<std::string, long>>(tuple1);\n    }\n    else if (tuple1.type() == typeid(std::tuple<long, std::string>)) {\n        return tuplex == std::any_cast<std::tuple<long, std::string>>(tuple1);\n    }\n    else {\n        return false;\n    }",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        if (tuplex == std::any_cast<std::tuple<std::string, long>>(tuple1)) {\n            return true;\n        }\n    }\n    return false;",
    "    return tuple1 == tuplex;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        std::tuple<std::string, long> tuple = std::any_cast<std::tuple<std::string, long>>(tuple1);\n        return tuplex == std::get<0>(tuple) || tuplex == std::get<1>(tuple);\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string,long>)) {\n        return tuplex == std::any_cast<std::tuple<std::string,long>>(tuple1);\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string,long>)) {\n        return tuplex == std::any_cast<std::tuple<std::string,long>>(tuple1);\n    }\n    return false;",
    "    return tuple1 == tuplex;",
    "    if (tuplex.f0 == std::any_cast<std::string>(tuple1)) {\n        return true;\n    } else if (tuplex.f1 == std::any_cast<long>(tuple1)) {\n        return true;\n    } else {\n        return false;\n    }",
    "    if (tuple1.type() == typeid(std::tuple<std::string,long>)) {\n        return std::any_cast<std::tuple<std::string,long>>(tuple1) == std::make_tuple(tuplex.f0, tuplex.f1);\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string,long>)) {\n        std::tuple<std::string,long> tuple = std::any_cast<std::tuple<std::string,long>>(tuple1);\n        if (tuplex == std::get<0>(tuple)) {\n            return true;\n        }\n        if (tuplex == std::get<1>(tuple)) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        auto tuple = std::any_cast<std::tuple<std::string, long>>(tuple1);\n        if (tuplex == std::get<0>(tuple)) {\n            return true;\n        }\n        if (tuplex == std::get<1>(tuple)) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string,long>)) {\n        return (std::any_cast<std::tuple<std::string,long>>(tuple1) == tuplex);\n    }\n    else if (tuple1.type() == typeid(std::tuple<std::string,long,std::string>)) {\n        return (std::any_cast<std::tuple<std::string,long,std::string>>(tuple1) == tuplex);\n    }\n    else if (tuple1.type() == typeid(std::tuple<std::string,long,std::string,long>)) {\n        return (std::any_cast<std::tuple<std::string,long,std::string,long>>(tuple1) == tuplex);\n    }\n    else if (tuple1.type() == typeid(std::tuple<std::string,long,std::string,long,std::string>)) {\n        return (std::any_cast<std::tuple<std::string,long,std::string,long,std::string>>(tuple1) == tuplex);\n    }\n    else if (tuple1.type() == typeid(std::tuple<std::string,long,std::string,long,std::string,long>)) {\n        return (std::any_cast<std::tuple<std::string,long,std::string,long,std::string,long>>(tuple1) == tuplex);\n    }\n    else if (tuple1.type() == typeid(std::tuple<std::string,long,std::string,long,std::string,long,std::string>)) {\n        return (std::any_cast<std::tuple<std::string,long,std::string,long,std::string,long,std::string>>(tuple1) == tuplex);\n    }\n    else if (tuple1.type() == typeid(std::tuple<std::string,long,std::string,long,std::string,long,std::string,long>))",
    "    if (tuple1.type() == typeid(std::tuple<std::string,long>)) {\n        return tuplex == std::any_cast<std::tuple<std::string,long>>(tuple1);\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        if (tuplex == std::any_cast<std::tuple<std::string, long>>(tuple1)) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        return tuplex == std::any_cast<std::tuple<std::string, long>>(tuple1);\n    } else if (tuple1.type() == typeid(std::tuple<long, std::string>)) {\n        return tuplex == std::any_cast<std::tuple<long, std::string>>(tuple1);\n    } else {\n        return false;\n    }",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        return tuplex == std::any_cast<std::tuple<std::string, long>>(tuple1);\n    }\n    else if (tuple1.type() == typeid(std::tuple<long, std::string>)) {\n        return tuplex == std::any_cast<std::tuple<long, std::string>>(tuple1);\n    }\n    else {\n        return false;\n    }",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        std::tuple<std::string, long> tuple = std::any_cast<std::tuple<std::string, long>>(tuple1);\n        return (tuplex == std::get<0>(tuple) || tuplex == std::get<1>(tuple));\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        return tuplex == std::any_cast<std::tuple<std::string, long>>(tuple1);\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string,long>)) {\n        return (std::get<0>(std::any_cast<std::tuple<std::string,long>>(tuple1)) == tuplex.f0) || (std::get<1>(std::any_cast<std::tuple<std::string,long>>(tuple1)) == tuplex.f1);\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        std::tuple<std::string, long> tuple = std::any_cast<std::tuple<std::string, long>>(tuple1);\n        return tuplex == std::get<0>(tuple) || tuplex == std::get<1>(tuple);\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::string)) {\n        return tuplex == std::any_cast<std::string>(tuple1);\n    } else if (tuple1.type() == typeid(long)) {\n        return tuplex == std::any_cast<long>(tuple1);\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        if (tuplex == std::any_cast<std::tuple<std::string, long>>(tuple1)) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        std::tuple<std::string, long> tuple = std::any_cast<std::tuple<std::string, long>>(tuple1);\n        if (tuplex == std::get<0>(tuple)) {\n            return true;\n        }\n        if (tuplex == std::get<1>(tuple)) {\n            return true;\n        }\n    }\n    return false;",
    "    if (std::holds_alternative<std::tuple<std::string, long>>(tuple1)) {\n        std::tuple<std::string, long> tuple = std::get<std::tuple<std::string, long>>(tuple1);\n        if (tuplex == std::get<0>(tuple)) {\n            return true;\n        }\n        if (tuplex == std::get<1>(tuple)) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string>)) {\n        return std::any_cast<std::tuple<std::string>>(tuple1) == tuplex.f0;\n    } else if (tuple1.type() == typeid(std::tuple<long>)) {\n        return std::any_cast<std::tuple<long>>(tuple1) == tuplex.f1;\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string,long>)) {\n        return (std::get<0>(std::any_cast<std::tuple<std::string,long>>(tuple1)) == tuplex.f0) || (std::get<1>(std::any_cast<std::tuple<std::string,long>>(tuple1)) == tuplex.f1);\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        std::tuple<std::string, long> tuple = std::any_cast<std::tuple<std::string, long>>(tuple1);\n        if (tuplex.f0 == std::get<0>(tuple) || tuplex.f1 == std::get<1>(tuple)) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string,long>)) {\n        std::tuple<std::string,long> tuple = std::any_cast<std::tuple<std::string,long>>(tuple1);\n        if (tuplex == std::get<0>(tuple)) {\n            return true;\n        }\n        if (tuplex == std::get<1>(tuple)) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string,long>)) {\n        if (std::get<0>(std::any_cast<std::tuple<std::string,long>>(tuple1)) == tuplex.f0) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        return (std::any_cast<std::tuple<std::string, long>>(tuple1) == tuplex);\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        auto tuple = std::any_cast<std::tuple<std::string, long>>(tuple1);\n        if (tuplex == std::get<0>(tuple)) {\n            return true;\n        }\n        if (tuplex == std::get<1>(tuple)) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        return tuplex == std::any_cast<std::tuple<std::string, long>>(tuple1);\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        return (std::get<0>(std::any_cast<std::tuple<std::string, long>>(tuple1)) == tuplex.f0) || (std::get<1>(std::any_cast<std::tuple<std::string, long>>(tuple1)) == tuplex.f1);\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string,long>)) {\n        return tuplex == std::any_cast<std::tuple<std::string,long>>(tuple1);\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string,long>)) {\n        if (tuplex == std::any_cast<std::tuple<std::string,long>>(tuple1)) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string,long>)) {\n        if (tuplex.f0 == std::any_cast<std::tuple<std::string,long>>(tuple1).get<0>()) {\n            return true;\n        }\n        if (tuplex.f1 == std::any_cast<std::tuple<std::string,long>>(tuple1).get<1>()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string>)) {\n        return tuplex.f0 == std::any_cast<std::tuple<std::string>>(tuple1);\n    }\n    if (tuple1.type() == typeid(std::tuple<long>)) {\n        return tuplex.f1 == std::any_cast<std::tuple<long>>(tuple1);\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string,long>)) {\n        return tuplex == std::any_cast<std::tuple<std::string,long>>(tuple1);\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string,long>)) {\n        if (std::get<0>(std::any_cast<std::tuple<std::string,long>>(tuple1)) == tuplex.f0) {\n            return true;\n        }\n        if (std::get<1>(std::any_cast<std::tuple<std::string,long>>(tuple1)) == tuplex.f1) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1 == tuplex.f0) {\n        return true;\n    }\n    if (tuple1 == tuplex.f1) {\n        return true;\n    }\n    return false;",
    "    if(tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        if(std::get<0>(std::any_cast<std::tuple<std::string, long>>(tuple1)) == tuplex.f0) {\n            return true;\n        }\n        if(std::get<1>(std::any_cast<std::tuple<std::string, long>>(tuple1)) == tuplex.f1) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        if (tuplex == std::any_cast<std::tuple<std::string, long>>(tuple1)) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string,long>)) {\n        if (std::get<0>(std::any_cast<std::tuple<std::string,long>>(tuple1)) == tuplex.f0) {\n            return true;\n        }\n        if (std::get<1>(std::any_cast<std::tuple<std::string,long>>(tuple1)) == tuplex.f1) {\n            return true;\n        }\n    }\n    return false;",
    "    return tuplex == tuple1;",
    "    if (tuple1.type() == typeid(std::string)) {\n        return tuplex == std::any_cast<std::string>(tuple1);\n    } else if (tuple1.type() == typeid(long)) {\n        return tuplex == std::any_cast<long>(tuple1);\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string>)) {\n        return tuplex == std::any_cast<std::tuple<std::string>>(tuple1);\n    } else if (tuple1.type() == typeid(std::tuple<long>)) {\n        return tuplex == std::any_cast<std::tuple<long>>(tuple1);\n    } else {\n        return false;\n    }",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        auto tuple = std::any_cast<std::tuple<std::string, long>>(tuple1);\n        if (tuplex == std::get<0>(tuple)) {\n            return true;\n        }\n        if (tuplex == std::get<1>(tuple)) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        std::tuple<std::string, long> tuple = std::any_cast<std::tuple<std::string, long>>(tuple1);\n        if (tuplex == std::get<0>(tuple)) {\n            return true;\n        }\n        if (tuplex == std::get<1>(tuple)) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string,long>)) {\n        return tuplex == std::any_cast<std::tuple<std::string,long>>(tuple1);\n    } else if (tuple1.type() == typeid(std::tuple<long,std::string>)) {\n        return tuplex == std::any_cast<std::tuple<long,std::string>>(tuple1);\n    } else if (tuple1.type() == typeid(std::tuple<std::string,std::string>)) {\n        return tuplex == std::any_cast<std::tuple<std::string,std::string>>(tuple1);\n    } else if (tuple1.type() == typeid(std::tuple<long,long>)) {\n        return tuplex == std::any_cast<std::tuple<long,long>>(tuple1);\n    } else {\n        return false;\n    }",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        std::tuple<std::string, long> tuple = std::any_cast<std::tuple<std::string, long>>(tuple1);\n        return tuplex == std::get<0>(tuple) || tuplex == std::get<1>(tuple);\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string>)) {\n        return std::get<0>(std::any_cast<std::tuple<std::string>>(tuple1)) == tuplex.f0;\n    } else if (tuple1.type() == typeid(std::tuple<long>)) {\n        return std::get<0>(std::any_cast<std::tuple<long>>(tuple1)) == tuplex.f1;\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        std::tuple<std::string, long> tuple = std::any_cast<std::tuple<std::string, long>>(tuple1);\n        if (tuplex == std::get<0>(tuple)) {\n            return true;\n        }\n        if (tuplex == std::get<1>(tuple)) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string>)) {\n        return tuplex == std::any_cast<std::tuple<std::string>>(tuple1);\n    } else if (tuple1.type() == typeid(std::tuple<long>)) {\n        return tuplex == std::any_cast<std::tuple<long>>(tuple1);\n    } else {\n        return false;\n    }",
    "    if (tuple1.type() == typeid(std::tuple<std::string,long>)) {\n        return (std::get<0>(std::any_cast<std::tuple<std::string,long>>(tuple1)) == tuplex.f0) || (std::get<1>(std::any_cast<std::tuple<std::string,long>>(tuple1)) == tuplex.f1);\n    }\n    return false;",
    "    if(tuple1.type() == typeid(std::tuple<std::string, long>)){\n        std::tuple<std::string, long> tuple = std::any_cast<std::tuple<std::string, long>>(tuple1);\n        if(tuplex == std::get<0>(tuple)){\n            return true;\n        }\n        if(tuplex == std::get<1>(tuple)){\n            return true;\n        }\n    }\n    return false;",
    "    return tuple1 == tuplex;",
    "    if (tuple1.type() == typeid(std::string)) {\n        return tuplex == std::any_cast<std::string>(tuple1);\n    } else if (tuple1.type() == typeid(long)) {\n        return tuplex == std::any_cast<long>(tuple1);\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string>)) {\n        return tuplex == std::any_cast<std::tuple<std::string>>(tuple1);\n    } else if (tuple1.type() == typeid(std::tuple<long>)) {\n        return tuplex == std::any_cast<std::tuple<long>>(tuple1);\n    } else {\n        return false;\n    }",
    "    if (tuple1.type() == typeid(std::string)) {\n        return tuplex.f0 == std::any_cast<std::string>(tuple1);\n    } else if (tuple1.type() == typeid(long)) {\n        return tuplex.f1 == std::any_cast<long>(tuple1);\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::string)) {\n        return tuplex == std::any_cast<std::string>(tuple1);\n    } else if (tuple1.type() == typeid(long)) {\n        return tuplex == std::any_cast<long>(tuple1);\n    } else {\n        return false;\n    }",
    "    if(tuple1.type() == typeid(std::tuple<std::string,long>)) {\n        std::tuple<std::string,long> tuple = std::any_cast<std::tuple<std::string,long>>(tuple1);\n        return tuplex == std::get<0>(tuple) || tuplex == std::get<1>(tuple);\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string,long>)) {\n        std::tuple<std::string,long> t = std::any_cast<std::tuple<std::string,long>>(tuple1);\n        if (tuplex == std::get<0>(t)) {\n            return true;\n        }\n        if (tuplex == std::get<1>(t)) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string,long>)) {\n        return (std::any_cast<std::tuple<std::string,long>>(tuple1) == std::make_tuple(tuplex.f0,tuplex.f1));\n    }\n    return false;",
    "    if (tuplex.f0 == std::any_cast<std::string>(tuple1)) {\n        return true;\n    } else if (tuplex.f1 == std::any_cast<long>(tuple1)) {\n        return true;\n    } else {\n        return false;\n    }",
    "    if (tuple1.type() == typeid(std::tuple<std::string,long>)) {\n        return tuplex == std::any_cast<std::tuple<std::string,long>>(tuple1);\n    }\n    else if (tuple1.type() == typeid(std::tuple<std::string,long,std::string>)) {\n        return tuplex == std::any_cast<std::tuple<std::string,long,std::string>>(tuple1);\n    }\n    else if (tuple1.type() == typeid(std::tuple<std::string,long,std::string,long>)) {\n        return tuplex == std::any_cast<std::tuple<std::string,long,std::string,long>>(tuple1);\n    }\n    else if (tuple1.type() == typeid(std::tuple<std::string,long,std::string,long,std::string>)) {\n        return tuplex == std::any_cast<std::tuple<std::string,long,std::string,long,std::string>>(tuple1);\n    }\n    else if (tuple1.type() == typeid(std::tuple<std::string,long,std::string,long,std::string,long>)) {\n        return tuplex == std::any_cast<std::tuple<std::string,long,std::string,long,std::string,long>>(tuple1);\n    }\n    else if (tuple1.type() == typeid(std::tuple<std::string,long,std::string,long,std::string,long,std::string>)) {\n        return tuplex == std::any_cast<std::tuple<std::string,long,std::string,long,std::string,long,std::string>>(tuple1);\n    }\n    else if (tuple1.type() == typeid(std::tuple<std::string,long,std::string,long,std::string,long,std::string,long>)) {\n        return tuplex == std::any_",
    "    if (tuple1.type() == typeid(std::tuple<std::string,long>)) {\n        return tuplex == std::any_cast<std::tuple<std::string,long>>(tuple1);\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        return tuplex == std::any_cast<std::tuple<std::string, long>>(tuple1);\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        return tuplex == std::any_cast<std::tuple<std::string, long>>(tuple1);\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string,long>)) {\n        return tuplex == std::any_cast<std::tuple<std::string,long>>(tuple1);\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        return (std::get<0>(std::any_cast<std::tuple<std::string, long>>(tuple1)) == tuplex.f0) || (std::get<1>(std::any_cast<std::tuple<std::string, long>>(tuple1)) == tuplex.f1);\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        return tuplex == std::any_cast<std::tuple<std::string, long>>(tuple1);\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::string)) {\n        return tuplex.f0 == std::any_cast<std::string>(tuple1);\n    } else if (tuple1.type() == typeid(long)) {\n        return tuplex.f1 == std::any_cast<long>(tuple1);\n    }\n    return false;",
    "    if(tuple1.type() == typeid(std::tuple<std::string,long>)) {\n        return tuplex == std::any_cast<std::tuple<std::string,long>>(tuple1);\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        return tuplex == std::any_cast<std::tuple<std::string, long>>(tuple1);\n    } else if (tuple1.type() == typeid(std::tuple<long, std::string>)) {\n        return tuplex == std::any_cast<std::tuple<long, std::string>>(tuple1);\n    } else {\n        return false;\n    }",
    "    if (tuple1.type() == typeid(std::string)) {\n        return tuplex == std::any_cast<std::string>(tuple1);\n    } else if (tuple1.type() == typeid(long)) {\n        return tuplex == std::any_cast<long>(tuple1);\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        std::tuple<std::string, long> tuple = std::any_cast<std::tuple<std::string, long>>(tuple1);\n        if (tuplex == std::get<0>(tuple)) {\n            return true;\n        }\n        if (tuplex == std::get<1>(tuple)) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string,long>)) {\n        return tuplex == std::any_cast<std::tuple<std::string,long>>(tuple1);\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        return tuplex == std::any_cast<std::tuple<std::string, long>>(tuple1);\n    }\n    return false;",
    "    if (tuple1 == tuplex.f0)\n        return true;\n    else if (tuple1 == tuplex.f1)\n        return true;\n    else\n        return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        if (tuplex == std::any_cast<std::tuple<std::string, long>>(tuple1)) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        return tuplex == std::any_cast<std::tuple<std::string, long>>(tuple1);\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::string)) {\n        return tuplex == std::any_cast<std::string>(tuple1);\n    } else if (tuple1.type() == typeid(long)) {\n        return tuplex == std::any_cast<long>(tuple1);\n    } else {\n        return false;\n    }",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        std::tuple<std::string, long> tuple = std::any_cast<std::tuple<std::string, long>>(tuple1);\n        if (tuplex == std::get<0>(tuple)) {\n            return true;\n        }\n        if (tuplex == std::get<1>(tuple)) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        return tuplex == std::any_cast<std::tuple<std::string, long>>(tuple1);\n    }\n    else if (tuple1.type() == typeid(std::tuple<long, std::string>)) {\n        return tuplex == std::any_cast<std::tuple<long, std::string>>(tuple1);\n    }\n    else {\n        return false;\n    }",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        return tuplex == std::any_cast<std::tuple<std::string, long>>(tuple1);\n    }\n    return false;",
    "    if (tuplex.f0 == std::any_cast<std::string>(tuple1)) {\n        return true;\n    } else if (tuplex.f1 == std::any_cast<long>(tuple1)) {\n        return true;\n    } else {\n        return false;\n    }",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        auto tuple = std::any_cast<std::tuple<std::string, long>>(tuple1);\n        if (tuplex == std::get<0>(tuple)) {\n            return true;\n        }\n        if (tuplex == std::get<1>(tuple)) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuplex.f0 == std::any_cast<std::string>(tuple1)) {\n        return true;\n    } else if (tuplex.f1 == std::any_cast<long>(tuple1)) {\n        return true;\n    } else {\n        return false;\n    }",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        std::tuple<std::string, long> tuple = std::any_cast<std::tuple<std::string, long>>(tuple1);\n        if (tuplex == std::get<0>(tuple)) {\n            return true;\n        }\n        if (tuplex == std::get<1>(tuple)) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        return tuplex == std::any_cast<std::tuple<std::string, long>>(tuple1);\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        auto tuple = std::any_cast<std::tuple<std::string, long>>(tuple1);\n        if (tuplex == std::get<0>(tuple)) {\n            return true;\n        }\n        if (tuplex == std::get<1>(tuple)) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::string)) {\n        return tuplex == std::any_cast<std::string>(tuple1);\n    } else if (tuple1.type() == typeid(long)) {\n        return tuplex == std::any_cast<long>(tuple1);\n    }\n    return false;",
    "    return (tuplex == std::any_cast<Union_std_string_long>(tuple1));",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        auto tuple = std::any_cast<std::tuple<std::string, long>>(tuple1);\n        if (tuplex.f0 == std::get<0>(tuple) || tuplex.f1 == std::get<1>(tuple)) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string,long>)) {\n        auto tuple = std::any_cast<std::tuple<std::string,long>>(tuple1);\n        if (tuplex == std::get<0>(tuple)) {\n            return true;\n        }\n        if (tuplex == std::get<1>(tuple)) {\n            return true;\n        }\n        return false;\n    }\n    if (tuple1.type() == typeid(std::tuple<long,std::string>)) {\n        auto tuple = std::any_cast<std::tuple<long,std::string>>(tuple1);\n        if (tuplex == std::get<0>(tuple)) {\n            return true;\n        }\n        if (tuplex == std::get<1>(tuple)) {\n            return true;\n        }\n        return false;\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        return tuplex == std::any_cast<std::tuple<std::string, long>>(tuple1);\n    } else if (tuple1.type() == typeid(std::tuple<long, std::string>)) {\n        return tuplex == std::any_cast<std::tuple<long, std::string>>(tuple1);\n    } else {\n        assert(false);\n    }",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        if (std::any_cast<std::tuple<std::string, long>>(tuple1) == tuplex) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        return tuplex == std::any_cast<std::tuple<std::string, long>>(tuple1);\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string,long>)) {\n        return tuplex == std::any_cast<std::tuple<std::string,long>>(tuple1);\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        std::tuple<std::string, long> tuple = std::any_cast<std::tuple<std::string, long>>(tuple1);\n        if (tuplex == std::get<0>(tuple)) {\n            return true;\n        } else if (tuplex == std::get<1>(tuple)) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string>)) {\n        return tuplex.f0 == std::any_cast<std::tuple<std::string>>(tuple1);\n    } else if (tuple1.type() == typeid(std::tuple<long>)) {\n        return tuplex.f1 == std::any_cast<std::tuple<long>>(tuple1);\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::string)) {\n        return tuplex == std::any_cast<std::string>(tuple1);\n    } else if (tuple1.type() == typeid(long)) {\n        return tuplex == std::any_cast<long>(tuple1);\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string,long>)) {\n        return tuplex == std::any_cast<std::tuple<std::string,long>>(tuple1);\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::string)) {\n        return tuplex.f0 == std::any_cast<std::string>(tuple1);\n    } else if (tuple1.type() == typeid(long)) {\n        return tuplex.f1 == std::any_cast<long>(tuple1);\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        auto tuple = std::any_cast<std::tuple<std::string, long>>(tuple1);\n        if (tuplex == std::get<0>(tuple)) {\n            return true;\n        }\n        if (tuplex == std::get<1>(tuple)) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        auto tuple = std::any_cast<std::tuple<std::string, long>>(tuple1);\n        return tuplex == std::get<0>(tuple) || tuplex == std::get<1>(tuple);\n    }\n    if (tuple1.type() == typeid(std::tuple<long, std::string>)) {\n        auto tuple = std::any_cast<std::tuple<long, std::string>>(tuple1);\n        return tuplex == std::get<0>(tuple) || tuplex == std::get<1>(tuple);\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        std::tuple<std::string, long> tuple = std::any_cast<std::tuple<std::string, long>>(tuple1);\n        if (tuplex == std::get<0>(tuple)) {\n            return true;\n        }\n        if (tuplex == std::get<1>(tuple)) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        if (std::get<0>(std::any_cast<std::tuple<std::string, long>>(tuple1)) == tuplex.f0) {\n            return true;\n        }\n        if (std::get<1>(std::any_cast<std::tuple<std::string, long>>(tuple1)) == tuplex.f1) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        if (tuplex == std::any_cast<std::tuple<std::string, long>>(tuple1)) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        return tuplex == std::any_cast<std::tuple<std::string, long>>(tuple1);\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        std::tuple<std::string, long> tuple = std::any_cast<std::tuple<std::string, long>>(tuple1);\n        if (tuplex == std::get<0>(tuple)) {\n            return true;\n        }\n        if (tuplex == std::get<1>(tuple)) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        return tuplex == std::any_cast<std::tuple<std::string, long>>(tuple1);\n    }\n    if (tuple1.type() == typeid(std::tuple<long, std::string>)) {\n        return tuplex == std::any_cast<std::tuple<long, std::string>>(tuple1);\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string,long>)) {\n        if (std::any_cast<std::tuple<std::string,long>>(tuple1) == tuplex) {\n            return true;\n        }\n    }\n    return false;",
    "    if(tuple1.type() == typeid(std::tuple<std::string,long>)){\n        std::tuple<std::string,long> tuple = std::any_cast<std::tuple<std::string,long>>(tuple1);\n        if(tuplex == std::get<0>(tuple)){\n            return true;\n        }\n        if(tuplex == std::get<1>(tuple)){\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        return tuplex == std::any_cast<std::tuple<std::string, long>>(tuple1);\n    }\n    if (tuple1.type() == typeid(std::tuple<long, std::string>)) {\n        return tuplex == std::any_cast<std::tuple<long, std::string>>(tuple1);\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string,long>)) {\n        return tuplex == std::any_cast<std::tuple<std::string,long>>(tuple1);\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string,long>)) {\n        if (std::get<0>(std::any_cast<std::tuple<std::string,long>>(tuple1)) == tuplex.f0) {\n            return true;\n        }\n        if (std::get<1>(std::any_cast<std::tuple<std::string,long>>(tuple1)) == tuplex.f1) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string,long>)) {\n        auto tuple = std::any_cast<std::tuple<std::string,long>>(tuple1);\n        if (tuplex == std::get<0>(tuple)) {\n            return true;\n        }\n        if (tuplex == std::get<1>(tuple)) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string>)) {\n        if (tuplex.f0 == std::any_cast<std::tuple<std::string>>(tuple1)) {\n            return true;\n        }\n    }\n    if (tuple1.type() == typeid(std::tuple<long>)) {\n        if (tuplex.f1 == std::any_cast<std::tuple<long>>(tuple1)) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        if (std::get<0>(std::any_cast<std::tuple<std::string, long>>(tuple1)) == tuplex.f0) {\n            return true;\n        }\n        if (std::get<1>(std::any_cast<std::tuple<std::string, long>>(tuple1)) == tuplex.f1) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        std::tuple<std::string, long> tuple = std::any_cast<std::tuple<std::string, long>>(tuple1);\n        if (tuplex == std::get<0>(tuple)) {\n            return true;\n        } else if (tuplex == std::get<1>(tuple)) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string,long>)) {\n        return tuplex == std::any_cast<std::tuple<std::string,long>>(tuple1);\n    }\n    else if (tuple1.type() == typeid(std::tuple<long,std::string>)) {\n        return tuplex == std::any_cast<std::tuple<long,std::string>>(tuple1);\n    }\n    else {\n        return false;\n    }",
    "    return tuple1 == tuplex;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        return tuplex == std::any_cast<std::tuple<std::string, long>>(tuple1);\n    }\n    else if (tuple1.type() == typeid(std::tuple<long, std::string>)) {\n        return tuplex == std::any_cast<std::tuple<long, std::string>>(tuple1);\n    }\n    else {\n        return false;\n    }",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        return tuplex == std::any_cast<std::tuple<std::string, long>>(tuple1);\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string,long>)) {\n        return tuplex == std::any_cast<std::tuple<std::string,long>>(tuple1);\n    }\n    return false;",
    "    if(tuple1.type() == typeid(std::tuple<std::string>)) {\n        std::tuple<std::string> tuple = std::any_cast<std::tuple<std::string>>(tuple1);\n        if(tuplex == std::get<0>(tuple)) {\n            return true;\n        }\n    }\n    if(tuple1.type() == typeid(std::tuple<long>)) {\n        std::tuple<long> tuple = std::any_cast<std::tuple<long>>(tuple1);\n        if(tuplex == std::get<0>(tuple)) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        return tuplex == std::any_cast<std::tuple<std::string, long>>(tuple1);\n    }\n    if (tuple1.type() == typeid(std::tuple<long, std::string>)) {\n        return tuplex == std::any_cast<std::tuple<long, std::string>>(tuple1);\n    }\n    return false;",
    "    return tuple1 == tuplex;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        if (std::any_cast<std::tuple<std::string, long>>(tuple1) == tuplex) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string,long>)) {\n        std::tuple<std::string,long> tuple = std::any_cast<std::tuple<std::string,long>>(tuple1);\n        if (tuplex == std::get<0>(tuple)) {\n            return true;\n        }\n        if (tuplex == std::get<1>(tuple)) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        std::tuple<std::string, long> tuple = std::any_cast<std::tuple<std::string, long>>(tuple1);\n        if (tuplex == std::get<0>(tuple)) {\n            return true;\n        }\n        if (tuplex == std::get<1>(tuple)) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        std::tuple<std::string, long> tuple = std::any_cast<std::tuple<std::string, long>>(tuple1);\n        if (tuplex == std::get<0>(tuple)) {\n            return true;\n        }\n        if (tuplex == std::get<1>(tuple)) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        auto tuple = std::any_cast<std::tuple<std::string, long>>(tuple1);\n        if (tuplex == std::get<0>(tuple)) {\n            return true;\n        }\n        if (tuplex == std::get<1>(tuple)) {\n            return true;\n        }\n    }\n    return false;",
    "    return tuplex == tuple1;",
    "    return tuple1 == tuplex;",
    "    if (tuple1.type() == typeid(std::tuple<std::string>)) {\n        return tuplex == std::any_cast<std::tuple<std::string>>(tuple1);\n    }\n    if (tuple1.type() == typeid(std::tuple<long>)) {\n        return tuplex == std::any_cast<std::tuple<long>>(tuple1);\n    }\n    return false;",
    "    return tuple1 == tuplex;",
    "    if (tuplex.f0 == std::any_cast<std::string>(tuple1)) {\n        return true;\n    } else if (tuplex.f1 == std::any_cast<long>(tuple1)) {\n        return true;\n    } else {\n        return false;\n    }",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        if (tuplex == std::any_cast<std::tuple<std::string, long>>(tuple1)) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string,long>)) {\n        return tuplex == std::any_cast<std::tuple<std::string,long>>(tuple1);\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        if (tuplex == std::any_cast<std::tuple<std::string, long>>(tuple1)) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::string)) {\n        return tuplex.f0 == std::any_cast<std::string>(tuple1);\n    } else if (tuple1.type() == typeid(long)) {\n        return tuplex.f1 == std::any_cast<long>(tuple1);\n    } else {\n        assert(false);\n    }",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        if (tuplex == std::any_cast<std::tuple<std::string, long>>(tuple1)) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        return tuplex == std::any_cast<std::tuple<std::string, long>>(tuple1);\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        if (std::get<0>(std::any_cast<std::tuple<std::string, long>>(tuple1)) == tuplex.f0) {\n            return true;\n        }\n        if (std::get<1>(std::any_cast<std::tuple<std::string, long>>(tuple1)) == tuplex.f1) {\n            return true;\n        }\n    }\n    return false;",
    "    if (tuple1.type() == typeid(std::tuple<std::string,long>)) {\n        return tuplex == std::any_cast<std::tuple<std::string,long>>(tuple1);\n    }\n    return false;",
    "    return tuple1 == tuplex.f0 || tuple1 == tuplex.f1;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        return tuplex == std::any_cast<std::tuple<std::string, long>>(tuple1);\n    }\n    return false;",
    "    if(tuple1.type() == typeid(std::tuple<std::string,long>)) {\n        return tuplex == std::any_cast<std::tuple<std::string,long>>(tuple1);\n    }\n    else if(tuple1.type() == typeid(std::tuple<long,std::string>)) {\n        return tuplex == std::any_cast<std::tuple<long,std::string>>(tuple1);\n    }\n    else {\n        return false;\n    }",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        std::tuple<std::string, long> tuple = std::any_cast<std::tuple<std::string, long>>(tuple1);\n        if (tuplex == std::get<0>(tuple)) {\n            return true;\n        }\n        if (tuplex == std::get<1>(tuple)) {\n            return true;\n        }\n    }\n    return false;",
    "    return tuplex == tuple1;",
    "    if (tuple1.type() == typeid(std::tuple<std::string, long>)) {\n        auto tuple = std::any_cast<std::tuple<std::string, long>>(tuple1);\n        if (tuplex == std::get<0>(tuple)) {\n            return true;\n        }\n        if (tuplex == std::get<1>(tuple)) {\n            return true;\n        }\n    }\n    return false;"
  ]
}