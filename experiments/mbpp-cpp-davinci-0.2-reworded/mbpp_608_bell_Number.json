{
  "name": "mbpp_608_bell_Number",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find nth bell number.\nlong bell_Number(long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_608_bell_Number.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = bell_Number;\n    assert(candidate((2)) == (2));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (15));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "\tlong bell[n+1][n+1];\n\tbell[0][0] = 1;\n\tfor(int i = 1; i <= n; i++) {\n\t\tbell[i][0] = bell[i-1][i-1];\n\t\tfor(int j = 1; j <= i; j++) {\n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n\t\t}\n\t}\n\treturn bell[n][0];",
    "    long bell[n+1][n+1];\n    bell[0][0] = 1;\n    for (long i=1; i<=n; i++) {\n        // Explicitly fill for j = 0\n        bell[i][0] = bell[i-1][i-1];\n        // Fill for remaining values of j\n        for (long j=1; j<=i; j++)\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n    }\n    return bell[n][0];",
    "    long bell[n+1][n+1];\n    bell[0][0] = 1;\n    for (int i=1; i<=n; i++) {\n        // Explicitly fill for j = 0\n        bell[i][0] = bell[i-1][i-1];\n \n        // Fill for remaining values of j\n        for (int j=1; j<=i; j++)\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n    }\n    return bell[n][0];",
    "    long bell[n+1][n+1];\n    bell[0][0] = 1;\n    for (int i=1; i<=n; i++) {\n        // Explicitly fill for j = 0\n        bell[i][0] = bell[i-1][i-1];\n        // Fill for remaining values of j\n        for (int j=1; j<=i; j++)\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n    }\n    return bell[n][0];",
    "    long bell[n+1][n+1];\n    bell[0][0] = 1;\n    for (int i=1; i<=n; i++) {\n        // Explicitly fill for j = 0\n        bell[i][0] = bell[i-1][i-1];\n        // Fill for remaining values of j\n        for (int j=1; j<=i; j++)\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n    }\n    return bell[n][0];",
    "\tlong bell[n+1][n+1];\n\tbell[0][0] = 1;\n\tfor(int i=1;i<=n;i++) {\n\t\tbell[i][0] = bell[i-1][i-1];\n\t\tfor(int j=1;j<=i;j++) {\n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n\t\t}\n\t}\n\treturn bell[n][0];",
    "\tlong bell[n+1][n+1];\n\tbell[0][0] = 1;\n\tfor(long i = 1; i <= n; i++) {\n\t\tbell[i][0] = bell[i-1][i-1];\n\t\tfor(long j = 1; j <= i; j++) {\n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n\t\t}\n\t}\n\treturn bell[n][0];",
    "    long bell[n+1][n+1];\n    bell[0][0] = 1;\n    for (long i=1; i<=n; i++) {\n        // Explicitly fill for j = 0\n        bell[i][0] = bell[i-1][i-1];\n        // Fill for remaining values of j\n        for (long j=1; j<=i; j++)\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n    }\n    return bell[n][0];",
    "    long bell[n+1][n+1];\n    bell[0][0] = 1;\n    for (long i=1; i<=n; i++) {\n        // Explicitly fill for j = 0\n        bell[i][0] = bell[i-1][i-1];\n \n        // Fill for remaining values of j\n        for (long j=1; j<=i; j++)\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n    }\n    return bell[n][0];",
    "    long bell[n+1][n+1];\n    bell[0][0] = 1;\n    for (long i=1; i<=n; i++) {\n        // Explicitly fill for j = 0\n        bell[i][0] = bell[i-1][i-1];\n        // Fill for remaining values of j\n        for (long j=1; j<=i; j++)\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n    }\n    return bell[n][0];",
    "    long bell[n+1][n+1];\n    bell[0][0] = 1;\n    for(long i=1; i<=n; i++) {\n        bell[i][0] = bell[i-1][i-1];\n        for(long j=1; j<=i; j++) {\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n    }\n    return bell[n][0];",
    "    long bell[n+1][n+1];\n    bell[0][0] = 1;\n    for (long i=1; i<=n; i++) {\n        // Explicitly fill for j = 0\n        bell[i][0] = bell[i-1][i-1];\n \n        // Fill for remaining values of j\n        for (long j=1; j<=i; j++)\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n    }\n    return bell[n][0];",
    "  long bell[n+1][n+1];\n  bell[0][0] = 1;\n  for (long i=1; i<=n; i++) {\n    // Explicitly fill for j = 0\n    bell[i][0] = bell[i-1][i-1];\n    // Fill for remaining values of j\n    for (long j=1; j<=i; j++)\n      bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n  }\n  return bell[n][0];",
    "    long bell[n+1][n+1];\n    bell[0][0] = 1;\n    for (long i=1; i<=n; i++) {\n        // Explicitly fill for j = 0\n        bell[i][0] = bell[i-1][i-1];\n        // Fill for remaining values of j\n        for (long j=1; j<=i; j++)\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n    }\n    return bell[n][0];",
    "    long bell[n+1][n+1];\n    bell[0][0] = 1;\n    for (int i=1; i<=n; i++) {\n        // Explicitly fill for j = 0\n        bell[i][0] = bell[i-1][i-1];\n \n        // Fill for remaining values of j\n        for (int j=1; j<=i; j++)\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n    }\n    return bell[n][0];",
    "    long bell[n+1][n+1];\n    bell[0][0] = 1;\n    for (int i=1; i<=n; i++) {\n        // Explicitly fill for j = 0\n        bell[i][0] = bell[i-1][i-1];\n        // Fill for remaining values of j\n        for (int j=1; j<=i; j++)\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n    }\n    return bell[n][0];",
    "    long bell[n+1][n+1];\n    bell[0][0] = 1;\n    for (int i=1; i<=n; i++) {\n        // Explicitly fill for j = 0\n        bell[i][0] = bell[i-1][i-1];\n \n        // Fill for remaining values of j\n        for (int j=1; j<=i; j++)\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n    }\n    return bell[n][0];",
    "    long bell[n+1][n+1];\n    bell[0][0] = 1;\n    for (long i=1; i<=n; i++) {\n        // Explicitly fill for j = 0\n        bell[i][0] = bell[i-1][i-1];\n        // Fill for remaining values of j\n        for (long j=1; j<=i; j++)\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n    }\n    return bell[n][0];",
    "    long bell[n+1][n+1];\n    bell[0][0] = 1;\n    for (long i=1; i<=n; i++) {\n        // Explicitly fill for j = 0\n        bell[i][0] = bell[i-1][i-1];\n        // Fill for remaining values of j\n        for (long j=1; j<=i; j++)\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n    }\n    return bell[n][0];",
    "    long bell[n+1][n+1];\n    bell[0][0] = 1;\n    for (long i=1; i<=n; i++) {\n        // Explicitly fill for j = 0\n        bell[i][0] = bell[i-1][i-1];\n        // Fill for remaining values of j\n        for (long j=1; j<=i; j++)\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n    }\n    return bell[n][0];"
  ]
}