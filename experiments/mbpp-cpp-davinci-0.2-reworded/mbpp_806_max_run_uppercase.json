{
  "name": "mbpp_806_max_run_uppercase",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_806_max_run_uppercase.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long max_run = 0;\n    long current_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if (current_run > max_run) {\n        max_run = current_run;\n    }\n    return max_run;",
    "    long max_run = 0;\n    long current_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if (current_run > max_run) {\n        max_run = current_run;\n    }\n    return max_run;",
    "    long max_run = 0;\n    long curr_run = 0;\n    for(int i = 0; i < test_str.size(); i++) {\n        if(isupper(test_str[i])) {\n            curr_run++;\n        }\n        else {\n            curr_run = 0;\n        }\n        if(curr_run > max_run) {\n            max_run = curr_run;\n        }\n    }\n    return max_run;",
    "    long max_run = 0;\n    long current_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if (current_run > max_run) {\n        max_run = current_run;\n    }\n    return max_run;",
    "  long max_run = 0;\n  long current_run = 0;\n  for (int i = 0; i < test_str.size(); i++) {\n    if (isupper(test_str[i])) {\n      current_run++;\n    } else {\n      max_run = std::max(max_run, current_run);\n      current_run = 0;\n    }\n  }\n  max_run = std::max(max_run, current_run);\n  return max_run;",
    "    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.size(); ++i) {\n        if (isupper(test_str[i])) {\n            run++;\n        } else {\n            max_run = std::max(max_run, run);\n            run = 0;\n        }\n    }\n    max_run = std::max(max_run, run);\n    return max_run;",
    "    long max_run = 0;\n    long curr_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            curr_run++;\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n        } else {\n            curr_run = 0;\n        }\n    }\n    return max_run;",
    "    long max_count = 0;\n    long count = 0;\n    for (int i = 0; i < test_str.size(); i++) {\n        if (isupper(test_str[i])) {\n            count++;\n        }\n        else {\n            if (count > max_count) {\n                max_count = count;\n            }\n            count = 0;\n        }\n    }\n    if (count > max_count) {\n        max_count = count;\n    }\n    return max_count;",
    "    long max_count = 0;\n    long count = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            count++;\n        } else {\n            max_count = std::max(max_count, count);\n            count = 0;\n        }\n    }\n    max_count = std::max(max_count, count);\n    return max_count;",
    "    long max_run = 0;\n    long current_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if (current_run > max_run) {\n        max_run = current_run;\n    }\n    return max_run;",
    "    long max_run = 0;\n    long curr_run = 0;\n    for (char c : test_str) {\n        if (isupper(c)) {\n            curr_run++;\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n        } else {\n            curr_run = 0;\n        }\n    }\n    return max_run;",
    "    long max_run = 0;\n    long curr_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            curr_run++;\n        } else {\n            max_run = std::max(max_run, curr_run);\n            curr_run = 0;\n        }\n    }\n    max_run = std::max(max_run, curr_run);\n    return max_run;",
    "    long max_run = 0;\n    long curr_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            curr_run++;\n        } else {\n            max_run = std::max(max_run, curr_run);\n            curr_run = 0;\n        }\n    }\n    max_run = std::max(max_run, curr_run);\n    return max_run;",
    "  long max_run = 0;\n  long run = 0;\n  for (auto c : test_str) {\n    if (isupper(c)) {\n      run++;\n    } else {\n      max_run = std::max(max_run, run);\n      run = 0;\n    }\n  }\n  return std::max(max_run, run);",
    "    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.size(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if (run > max_run) {\n        max_run = run;\n    }\n    return max_run;",
    "    long max_run = 0;\n    long cur_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            cur_run++;\n            max_run = std::max(max_run, cur_run);\n        } else {\n            cur_run = 0;\n        }\n    }\n    return max_run;",
    "    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n        } else {\n            max_run = std::max(max_run, run);\n            run = 0;\n        }\n    }\n    max_run = std::max(max_run, run);\n    return max_run;",
    "    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.size(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;",
    "  long max_run = 0;\n  long current_run = 0;\n  for (int i = 0; i < test_str.size(); i++) {\n    if (isupper(test_str[i])) {\n      current_run++;\n    } else {\n      if (current_run > max_run) {\n        max_run = current_run;\n      }\n      current_run = 0;\n    }\n  }\n  if (current_run > max_run) {\n    max_run = current_run;\n  }\n  return max_run;",
    "    long max_run = 0;\n    long current_run = 0;\n    for (char c : test_str) {\n        if (isupper(c)) {\n            current_run++;\n        } else {\n            max_run = std::max(max_run, current_run);\n            current_run = 0;\n        }\n    }\n    max_run = std::max(max_run, current_run);\n    return max_run;"
  ]
}