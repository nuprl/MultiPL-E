{
  "name": "mbpp_806_max_run_uppercase",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find maximum run of uppercase characters in the given string.\nlong max_run_uppercase(std::string test_str) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_806_max_run_uppercase.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = max_run_uppercase;\n    assert(candidate((\"GeMKSForGERksISBESt\")) == (5));\n    assert(candidate((\"PrECIOusMOVemENTSYT\")) == (6));\n    assert(candidate((\"GooGLEFluTTER\")) == (4));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long max_run = 0;\n    long current_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if (current_run > max_run) {\n        max_run = current_run;\n    }\n    return max_run;",
    "    long max_run = 0;\n    long current_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if (current_run > max_run) {\n        max_run = current_run;\n    }\n    return max_run;",
    "    long max_run = 0;\n    long curr_run = 0;\n    for(int i = 0; i < test_str.size(); i++) {\n        if(isupper(test_str[i])) {\n            curr_run++;\n        }\n        else {\n            curr_run = 0;\n        }\n        if(curr_run > max_run) {\n            max_run = curr_run;\n        }\n    }\n    return max_run;",
    "    long max_run = 0;\n    long current_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if (current_run > max_run) {\n        max_run = current_run;\n    }\n    return max_run;",
    "  long max_run = 0;\n  long current_run = 0;\n  for (int i = 0; i < test_str.size(); i++) {\n    if (isupper(test_str[i])) {\n      current_run++;\n    } else {\n      max_run = std::max(max_run, current_run);\n      current_run = 0;\n    }\n  }\n  max_run = std::max(max_run, current_run);\n  return max_run;",
    "    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.size(); ++i) {\n        if (isupper(test_str[i])) {\n            run++;\n        } else {\n            max_run = std::max(max_run, run);\n            run = 0;\n        }\n    }\n    max_run = std::max(max_run, run);\n    return max_run;",
    "    long max_run = 0;\n    long curr_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            curr_run++;\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n        } else {\n            curr_run = 0;\n        }\n    }\n    return max_run;",
    "    long max_count = 0;\n    long count = 0;\n    for (int i = 0; i < test_str.size(); i++) {\n        if (isupper(test_str[i])) {\n            count++;\n        }\n        else {\n            if (count > max_count) {\n                max_count = count;\n            }\n            count = 0;\n        }\n    }\n    if (count > max_count) {\n        max_count = count;\n    }\n    return max_count;",
    "    long max_count = 0;\n    long count = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            count++;\n        } else {\n            max_count = std::max(max_count, count);\n            count = 0;\n        }\n    }\n    max_count = std::max(max_count, count);\n    return max_count;",
    "    long max_run = 0;\n    long current_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if (current_run > max_run) {\n        max_run = current_run;\n    }\n    return max_run;",
    "    long max_run = 0;\n    long curr_run = 0;\n    for (char c : test_str) {\n        if (isupper(c)) {\n            curr_run++;\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n        } else {\n            curr_run = 0;\n        }\n    }\n    return max_run;",
    "    long max_run = 0;\n    long curr_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            curr_run++;\n        } else {\n            max_run = std::max(max_run, curr_run);\n            curr_run = 0;\n        }\n    }\n    max_run = std::max(max_run, curr_run);\n    return max_run;",
    "    long max_run = 0;\n    long curr_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            curr_run++;\n        } else {\n            max_run = std::max(max_run, curr_run);\n            curr_run = 0;\n        }\n    }\n    max_run = std::max(max_run, curr_run);\n    return max_run;",
    "  long max_run = 0;\n  long run = 0;\n  for (auto c : test_str) {\n    if (isupper(c)) {\n      run++;\n    } else {\n      max_run = std::max(max_run, run);\n      run = 0;\n    }\n  }\n  return std::max(max_run, run);",
    "    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.size(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if (run > max_run) {\n        max_run = run;\n    }\n    return max_run;",
    "    long max_run = 0;\n    long cur_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            cur_run++;\n            max_run = std::max(max_run, cur_run);\n        } else {\n            cur_run = 0;\n        }\n    }\n    return max_run;",
    "    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n        } else {\n            max_run = std::max(max_run, run);\n            run = 0;\n        }\n    }\n    max_run = std::max(max_run, run);\n    return max_run;",
    "    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.size(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;",
    "  long max_run = 0;\n  long current_run = 0;\n  for (int i = 0; i < test_str.size(); i++) {\n    if (isupper(test_str[i])) {\n      current_run++;\n    } else {\n      if (current_run > max_run) {\n        max_run = current_run;\n      }\n      current_run = 0;\n    }\n  }\n  if (current_run > max_run) {\n    max_run = current_run;\n  }\n  return max_run;",
    "    long max_run = 0;\n    long current_run = 0;\n    for (char c : test_str) {\n        if (isupper(c)) {\n            current_run++;\n        } else {\n            max_run = std::max(max_run, current_run);\n            current_run = 0;\n        }\n    }\n    max_run = std::max(max_run, current_run);\n    return max_run;",
    "    long max_run = 0;\n    long current_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;",
    "    long max_run = 0;\n    long curr_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if (curr_run > max_run) {\n        max_run = curr_run;\n    }\n    return max_run;",
    "    long max_run = 0;\n    long current_run = 0;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(isupper(test_str[i])) {\n            current_run++;\n        } else {\n            if(current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if(current_run > max_run) {\n        max_run = current_run;\n    }\n    return max_run;",
    "    long max_run = 0;\n    long curr_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if (curr_run > max_run) {\n        max_run = curr_run;\n    }\n    return max_run;",
    "    long max_run = 0;\n    long current_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if (current_run > max_run) {\n        max_run = current_run;\n    }\n    return max_run;",
    "    long max_run = 0;\n    long current_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            current_run++;\n            max_run = std::max(max_run, current_run);\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;",
    "    long max_run = 0;\n    long cur_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            cur_run++;\n        } else {\n            if (cur_run > max_run) {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if (cur_run > max_run) {\n        max_run = cur_run;\n    }\n    return max_run;",
    "    long max_run = 0;\n    long current_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            current_run++;\n        } else {\n            max_run = std::max(max_run, current_run);\n            current_run = 0;\n        }\n    }\n    max_run = std::max(max_run, current_run);\n    return max_run;",
    "    long max_run = 0;\n    long current_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            current_run++;\n        } else {\n            max_run = std::max(max_run, current_run);\n            current_run = 0;\n        }\n    }\n    max_run = std::max(max_run, current_run);\n    return max_run;",
    "    long max_run = 0;\n    long current_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;",
    "    long max_count = 0;\n    long count = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            count++;\n        } else {\n            if (count > max_count) {\n                max_count = count;\n            }\n            count = 0;\n        }\n    }\n    if (count > max_count) {\n        max_count = count;\n    }\n    return max_count;",
    "  long max_run = 0;\n  long current_run = 0;\n  for (int i = 0; i < test_str.size(); i++) {\n    if (isupper(test_str[i])) {\n      current_run++;\n    } else {\n      if (current_run > max_run) {\n        max_run = current_run;\n      }\n      current_run = 0;\n    }\n  }\n  if (current_run > max_run) {\n    max_run = current_run;\n  }\n  return max_run;",
    "    long max_run = 0;\n    long curr_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            curr_run++;\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n        } else {\n            curr_run = 0;\n        }\n    }\n    return max_run;",
    "    long max_run = 0;\n    long current_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if (current_run > max_run) {\n        max_run = current_run;\n    }\n    return max_run;",
    "    int max_run = 0;\n    int count = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            count++;\n        } else {\n            count = 0;\n        }\n        if (count > max_run) {\n            max_run = count;\n        }\n    }\n    return max_run;",
    "    long max_count = 0;\n    long count = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            count++;\n            if (count > max_count) {\n                max_count = count;\n            }\n        } else {\n            count = 0;\n        }\n    }\n    return max_count;",
    "    long max_run = 0;\n    long curr_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            curr_run++;\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n        } else {\n            curr_run = 0;\n        }\n    }\n    return max_run;",
    "  long max_run = 0;\n  long current_run = 0;\n  for (int i = 0; i < test_str.length(); i++) {\n    if (isupper(test_str[i])) {\n      current_run++;\n      if (current_run > max_run) {\n        max_run = current_run;\n      }\n    } else {\n      current_run = 0;\n    }\n  }\n  return max_run;",
    "  int count = 0;\n  int max = 0;\n  for(int i = 0; i < test_str.length(); i++) {\n    if(isupper(test_str[i])) {\n      count++;\n    } else {\n      if(count > max) {\n        max = count;\n      }\n      count = 0;\n    }\n  }\n  if(count > max) {\n    max = count;\n  }\n  return max;",
    "    long max_run = 0;\n    long run = 0;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(isupper(test_str[i])) {\n            run++;\n        } else {\n            if(run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;",
    "    long max_run = 0;\n    long curr_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            curr_run++;\n        } else {\n            max_run = std::max(max_run, curr_run);\n            curr_run = 0;\n        }\n    }\n    max_run = std::max(max_run, curr_run);\n    return max_run;",
    "    long max_run = 0;\n    long current_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;",
    "    long max_run = 0;\n    long curr_run = 0;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(isupper(test_str[i])) {\n            curr_run++;\n        } else {\n            max_run = std::max(max_run, curr_run);\n            curr_run = 0;\n        }\n    }\n    max_run = std::max(max_run, curr_run);\n    return max_run;",
    "    long max_run = 0;\n    long current_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            current_run++;\n        } else {\n            max_run = std::max(max_run, current_run);\n            current_run = 0;\n        }\n    }\n    return std::max(max_run, current_run);",
    "  long max_run = 0;\n  long current_run = 0;\n  for (auto c : test_str) {\n    if (isupper(c)) {\n      current_run++;\n    } else {\n      max_run = std::max(max_run, current_run);\n      current_run = 0;\n    }\n  }\n  max_run = std::max(max_run, current_run);\n  return max_run;",
    "    int count = 0;\n    int max = 0;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(isupper(test_str[i])) {\n            count++;\n            if(count > max) {\n                max = count;\n            }\n        }\n        else {\n            count = 0;\n        }\n    }\n    return max;",
    "    long max_run = 0;\n    long curr_run = 0;\n    for (char c : test_str) {\n        if (isupper(c)) {\n            curr_run++;\n        } else {\n            max_run = std::max(max_run, curr_run);\n            curr_run = 0;\n        }\n    }\n    max_run = std::max(max_run, curr_run);\n    return max_run;",
    "    long max_run = 0;\n    long cur_run = 0;\n    for (auto c : test_str) {\n        if (std::isupper(c)) {\n            cur_run++;\n        } else {\n            if (cur_run > max_run) {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if (cur_run > max_run) {\n        max_run = cur_run;\n    }\n    return max_run;",
    "    long max_run = 0;\n    long curr_run = 0;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(isupper(test_str[i])) {\n            curr_run++;\n        } else {\n            if(curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if(curr_run > max_run) {\n        max_run = curr_run;\n    }\n    return max_run;",
    "  long max_run = 0;\n  long curr_run = 0;\n  for (int i = 0; i < test_str.size(); i++) {\n    if (isupper(test_str[i])) {\n      curr_run++;\n    } else {\n      if (curr_run > max_run) {\n        max_run = curr_run;\n      }\n      curr_run = 0;\n    }\n  }\n  if (curr_run > max_run) {\n    max_run = curr_run;\n  }\n  return max_run;",
    "    long max_run = 0;\n    long current_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            current_run += 1;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;",
    "    long max_run = 0;\n    long current_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if (current_run > max_run) {\n        max_run = current_run;\n    }\n    return max_run;",
    "    long max_run = 0;\n    long curr_run = 0;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(isupper(test_str[i])) {\n            curr_run++;\n        } else {\n            if(curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if(curr_run > max_run) {\n        max_run = curr_run;\n    }\n    return max_run;",
    "    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if (run > max_run) {\n        max_run = run;\n    }\n    return max_run;",
    "    int max_run = 0;\n    int run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if (run > max_run) {\n        max_run = run;\n    }\n    return max_run;",
    "    long max_run = 0;\n    long curr_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            curr_run++;\n        } else {\n            curr_run = 0;\n        }\n        if (curr_run > max_run) {\n            max_run = curr_run;\n        }\n    }\n    return max_run;",
    "    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n        } else {\n            max_run = std::max(max_run, run);\n            run = 0;\n        }\n    }\n    max_run = std::max(max_run, run);\n    return max_run;",
    "    long max_run = 0;\n    long curr_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if (curr_run > max_run) {\n        max_run = curr_run;\n    }\n    return max_run;",
    "    long max_run = 0;\n    long current_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;",
    "    long max_run = 0;\n    long run = 0;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(isupper(test_str[i])) {\n            run++;\n        } else {\n            max_run = std::max(max_run, run);\n            run = 0;\n        }\n    }\n    max_run = std::max(max_run, run);\n    return max_run;",
    "    long max_run = 0;\n    long current_run = 0;\n    for (auto c : test_str) {\n        if (std::isupper(c)) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if (current_run > max_run) {\n        max_run = current_run;\n    }\n    return max_run;",
    "    long max_run = 0;\n    long run = 0;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(isupper(test_str[i])) {\n            run++;\n        } else {\n            max_run = std::max(max_run, run);\n            run = 0;\n        }\n    }\n    max_run = std::max(max_run, run);\n    return max_run;",
    "    long max_run = 0;\n    long curr_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if (curr_run > max_run) {\n        max_run = curr_run;\n    }\n    return max_run;",
    "  long max_run = 0;\n  long run = 0;\n  for (auto c : test_str) {\n    if (isupper(c)) {\n      run++;\n    } else {\n      max_run = std::max(max_run, run);\n      run = 0;\n    }\n  }\n  max_run = std::max(max_run, run);\n  return max_run;",
    "\tlong max_run = 0;\n\tlong run = 0;\n\tfor(int i = 0; i < test_str.length(); i++) {\n\t\tif(isupper(test_str[i])) {\n\t\t\trun++;\n\t\t\tif(run > max_run) {\n\t\t\t\tmax_run = run;\n\t\t\t}\n\t\t} else {\n\t\t\trun = 0;\n\t\t}\n\t}\n\treturn max_run;",
    "    long max_run = 0;\n    long curr_run = 0;\n    for (int i = 0; i < test_str.size(); i++) {\n        if (isupper(test_str[i])) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if (curr_run > max_run) {\n        max_run = curr_run;\n    }\n    return max_run;",
    "    long max_run = 0;\n    long current_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;",
    "    long max_run = 0;\n    long current_run = 0;\n    for(auto ch : test_str) {\n        if(isupper(ch)) {\n            current_run++;\n        } else {\n            if(current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if(current_run > max_run) {\n        max_run = current_run;\n    }\n    return max_run;",
    "    long max_run = 0;\n    long current_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;",
    "    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n            if (run > max_run) {\n                max_run = run;\n            }\n        } else {\n            run = 0;\n        }\n    }\n    return max_run;",
    "    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if (run > max_run) {\n        max_run = run;\n    }\n    return max_run;",
    "    long max_run = 0;\n    long current_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            current_run++;\n        } else {\n            max_run = std::max(max_run, current_run);\n            current_run = 0;\n        }\n    }\n    max_run = std::max(max_run, current_run);\n    return max_run;",
    "    long max_run = 0;\n    long curr_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if (curr_run > max_run) {\n        max_run = curr_run;\n    }\n    return max_run;",
    "    long max_run = 0;\n    long run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            run++;\n        } else {\n            max_run = std::max(max_run, run);\n            run = 0;\n        }\n    }\n    max_run = std::max(max_run, run);\n    return max_run;",
    "    long max_run = 0;\n    long cur_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            cur_run++;\n            if (cur_run > max_run) {\n                max_run = cur_run;\n            }\n        } else {\n            cur_run = 0;\n        }\n    }\n    return max_run;",
    "    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.size(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n        } else {\n            run = 0;\n        }\n        if (run > max_run) {\n            max_run = run;\n        }\n    }\n    return max_run;",
    "    long count = 0;\n    long max = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            count++;\n            if (count > max) {\n                max = count;\n            }\n        } else {\n            count = 0;\n        }\n    }\n    return max;",
    "  long max_run = 0;\n  long run = 0;\n  for (auto c : test_str) {\n    if (isupper(c)) {\n      run++;\n    } else {\n      max_run = std::max(max_run, run);\n      run = 0;\n    }\n  }\n  max_run = std::max(max_run, run);\n  return max_run;",
    "    long max_run = 0;\n    long curr_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if (curr_run > max_run) {\n        max_run = curr_run;\n    }\n    return max_run;",
    "    long max_run = 0;\n    long run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            run++;\n            max_run = std::max(max_run, run);\n        } else {\n            run = 0;\n        }\n    }\n    return max_run;",
    "  long max_run = 0;\n  long current_run = 0;\n  for (int i = 0; i < test_str.length(); i++) {\n    if (isupper(test_str[i])) {\n      current_run++;\n      if (current_run > max_run) {\n        max_run = current_run;\n      }\n    } else {\n      current_run = 0;\n    }\n  }\n  return max_run;",
    "    long max_run = 0;\n    long curr_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            curr_run++;\n        } else {\n            max_run = std::max(max_run, curr_run);\n            curr_run = 0;\n        }\n    }\n    max_run = std::max(max_run, curr_run);\n    return max_run;",
    "    long max_run = 0;\n    long cur_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            cur_run++;\n        } else {\n            if (cur_run > max_run) {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if (cur_run > max_run) {\n        max_run = cur_run;\n    }\n    return max_run;",
    "\tlong max_run = 0;\n\tlong curr_run = 0;\n\tfor (int i = 0; i < test_str.length(); i++) {\n\t\tif (isupper(test_str[i])) {\n\t\t\tcurr_run++;\n\t\t} else {\n\t\t\tif (curr_run > max_run) {\n\t\t\t\tmax_run = curr_run;\n\t\t\t}\n\t\t\tcurr_run = 0;\n\t\t}\n\t}\n\tif (curr_run > max_run) {\n\t\tmax_run = curr_run;\n\t}\n\treturn max_run;",
    "    long max_run = 0;\n    long curr_run = 0;\n    for (int i = 0; i < test_str.size(); i++) {\n        if (isupper(test_str[i])) {\n            curr_run++;\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n        } else {\n            curr_run = 0;\n        }\n    }\n    return max_run;",
    "    long max_run = 0;\n    long run = 0;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(isupper(test_str[i])) {\n            run++;\n        } else {\n            max_run = std::max(max_run, run);\n            run = 0;\n        }\n    }\n    max_run = std::max(max_run, run);\n    return max_run;",
    "    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n        } else {\n            run = 0;\n        }\n        if (run > max_run) {\n            max_run = run;\n        }\n    }\n    return max_run;",
    "    long max_run = 0;\n    long current_run = 0;\n    for (char c : test_str) {\n        if (isupper(c)) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if (current_run > max_run) {\n        max_run = current_run;\n    }\n    return max_run;",
    "    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if (run > max_run) {\n        max_run = run;\n    }\n    return max_run;",
    "    long max_run = 0;\n    long current_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;",
    "    long max_run = 0;\n    long current_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            current_run++;\n        } else {\n            max_run = std::max(max_run, current_run);\n            current_run = 0;\n        }\n    }\n    return std::max(max_run, current_run);",
    "    long max_run = 0;\n    long curr_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if (curr_run > max_run) {\n        max_run = curr_run;\n    }\n    return max_run;",
    "    long max_run = 0;\n    long current_run = 0;\n    for (auto i : test_str) {\n        if (isupper(i)) {\n            current_run++;\n        } else {\n            max_run = std::max(max_run, current_run);\n            current_run = 0;\n        }\n    }\n    return std::max(max_run, current_run);",
    "  long max_run = 0;\n  long curr_run = 0;\n  for (int i = 0; i < test_str.length(); i++) {\n    if (isupper(test_str[i])) {\n      curr_run++;\n      if (curr_run > max_run) {\n        max_run = curr_run;\n      }\n    } else {\n      curr_run = 0;\n    }\n  }\n  return max_run;",
    "  long max_run = 0;\n  long current_run = 0;\n  for (auto c : test_str) {\n    if (isupper(c)) {\n      current_run++;\n    } else {\n      max_run = std::max(max_run, current_run);\n      current_run = 0;\n    }\n  }\n  return std::max(max_run, current_run);",
    "    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if (run > max_run) {\n        max_run = run;\n    }\n    return max_run;",
    "    long max_run = 0;\n    long current_run = 0;\n    for (char c : test_str) {\n        if (isupper(c)) {\n            current_run++;\n        } else {\n            max_run = std::max(max_run, current_run);\n            current_run = 0;\n        }\n    }\n    max_run = std::max(max_run, current_run);\n    return max_run;",
    "    long max_run = 0;\n    long current_run = 0;\n    for (char c : test_str) {\n        if (isupper(c)) {\n            current_run++;\n        } else {\n            max_run = std::max(max_run, current_run);\n            current_run = 0;\n        }\n    }\n    return std::max(max_run, current_run);",
    "    long count = 0, max_count = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            count++;\n            if (count > max_count) {\n                max_count = count;\n            }\n        } else {\n            count = 0;\n        }\n    }\n    return max_count;",
    "  long max_run = 0;\n  long current_run = 0;\n  for (int i = 0; i < test_str.length(); i++) {\n    if (isupper(test_str[i])) {\n      current_run++;\n    } else {\n      if (current_run > max_run) {\n        max_run = current_run;\n      }\n      current_run = 0;\n    }\n  }\n  return max_run;",
    "    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if (run > max_run) {\n        max_run = run;\n    }\n    return max_run;",
    "    long max_count = 0;\n    long count = 0;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(isupper(test_str[i])) {\n            count++;\n            if(count > max_count) {\n                max_count = count;\n            }\n        } else {\n            count = 0;\n        }\n    }\n    return max_count;",
    "    long max_run = 0;\n    long current_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            current_run++;\n        } else {\n            max_run = std::max(max_run, current_run);\n            current_run = 0;\n        }\n    }\n    max_run = std::max(max_run, current_run);\n    return max_run;",
    "    long max_run = 0;\n    long current_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            current_run++;\n            max_run = std::max(current_run, max_run);\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;",
    "    long max_run = 0;\n    long cur_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            cur_run++;\n            if (cur_run > max_run) {\n                max_run = cur_run;\n            }\n        } else {\n            cur_run = 0;\n        }\n    }\n    return max_run;",
    "    long max_run = 0;\n    long current_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            current_run++;\n        } else {\n            max_run = std::max(max_run, current_run);\n            current_run = 0;\n        }\n    }\n    max_run = std::max(max_run, current_run);\n    return max_run;",
    "  long max_run = 0;\n  long cur_run = 0;\n  for (int i = 0; i < test_str.length(); i++) {\n    if (isupper(test_str[i])) {\n      cur_run++;\n    } else {\n      if (cur_run > max_run) {\n        max_run = cur_run;\n      }\n      cur_run = 0;\n    }\n  }\n  if (cur_run > max_run) {\n    max_run = cur_run;\n  }\n  return max_run;",
    "    long max_run = 0;\n    long current_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;",
    "  long max_run = 0;\n  long curr_run = 0;\n  for (int i = 0; i < test_str.length(); i++) {\n    if (isupper(test_str[i])) {\n      curr_run++;\n      if (curr_run > max_run) {\n        max_run = curr_run;\n      }\n    } else {\n      curr_run = 0;\n    }\n  }\n  return max_run;",
    "    long max_run = 0;\n    long curr_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            curr_run++;\n        } else {\n            max_run = std::max(max_run, curr_run);\n            curr_run = 0;\n        }\n    }\n    max_run = std::max(max_run, curr_run);\n    return max_run;",
    "    long max_count = 0;\n    long count = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            count++;\n        } else {\n            if (count > max_count) {\n                max_count = count;\n            }\n            count = 0;\n        }\n    }\n    if (count > max_count) {\n        max_count = count;\n    }\n    return max_count;",
    "    long max_run = 0;\n    long current_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            current_run++;\n        } else {\n            max_run = std::max(max_run, current_run);\n            current_run = 0;\n        }\n    }\n    max_run = std::max(max_run, current_run);\n    return max_run;",
    "    long max_run = 0;\n    long run = 0;\n    for (char c : test_str) {\n        if (isupper(c)) {\n            run++;\n        } else {\n            max_run = std::max(max_run, run);\n            run = 0;\n        }\n    }\n    max_run = std::max(max_run, run);\n    return max_run;",
    "  // Write your code here\n  long count=0,max=0;\n  for(int i=0;i<test_str.length();i++)\n  {\n    if(isupper(test_str[i]))\n    {\n      count++;\n      if(count>max)\n      {\n        max=count;\n      }\n    }\n    else\n    {\n      count=0;\n    }\n  }\n  return max;",
    "    long max_run = 0;\n    long current_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            current_run++;\n        } else {\n            max_run = std::max(max_run, current_run);\n            current_run = 0;\n        }\n    }\n    max_run = std::max(max_run, current_run);\n    return max_run;",
    "    long max_run = 0;\n    long cur_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            cur_run++;\n        } else {\n            max_run = std::max(max_run, cur_run);\n            cur_run = 0;\n        }\n    }\n    max_run = std::max(max_run, cur_run);\n    return max_run;",
    "    long max_run = 0;\n    long curr_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            curr_run++;\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n        } else {\n            curr_run = 0;\n        }\n    }\n    return max_run;",
    "    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n            if (run > max_run) {\n                max_run = run;\n            }\n        } else {\n            run = 0;\n        }\n    }\n    return max_run;",
    "  long max_run = 0;\n  long cur_run = 0;\n  for (auto c : test_str) {\n    if (isupper(c)) {\n      cur_run++;\n    } else {\n      max_run = std::max(max_run, cur_run);\n      cur_run = 0;\n    }\n  }\n  max_run = std::max(max_run, cur_run);\n  return max_run;",
    "    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n        } else {\n            run = 0;\n        }\n        if (run > max_run) {\n            max_run = run;\n        }\n    }\n    return max_run;",
    "    long max_run = 0;\n    long current_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            current_run++;\n        } else {\n            max_run = std::max(max_run, current_run);\n            current_run = 0;\n        }\n    }\n    max_run = std::max(max_run, current_run);\n    return max_run;",
    "\tlong max_run = 0;\n\tlong current_run = 0;\n\tfor (int i = 0; i < test_str.length(); i++) {\n\t\tif (isupper(test_str[i])) {\n\t\t\tcurrent_run++;\n\t\t} else {\n\t\t\tmax_run = std::max(max_run, current_run);\n\t\t\tcurrent_run = 0;\n\t\t}\n\t}\n\tmax_run = std::max(max_run, current_run);\n\treturn max_run;",
    "    long max_run = 0;\n    long curr_run = 0;\n    for(int i=0; i<test_str.length(); i++) {\n        if(isupper(test_str[i])) {\n            curr_run++;\n        } else {\n            if(curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if(curr_run > max_run) {\n        max_run = curr_run;\n    }\n    return max_run;",
    "    long max_run = 0;\n    long curr_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            curr_run++;\n        } else {\n            max_run = std::max(max_run, curr_run);\n            curr_run = 0;\n        }\n    }\n    max_run = std::max(max_run, curr_run);\n    return max_run;",
    "  long max_run = 0;\n  long curr_run = 0;\n  for (auto c : test_str) {\n    if (isupper(c)) {\n      curr_run++;\n    } else {\n      max_run = std::max(max_run, curr_run);\n      curr_run = 0;\n    }\n  }\n  max_run = std::max(max_run, curr_run);\n  return max_run;",
    "\tlong max_run = 0;\n\tlong current_run = 0;\n\tfor (int i = 0; i < test_str.length(); i++) {\n\t\tif (isupper(test_str[i])) {\n\t\t\tcurrent_run++;\n\t\t} else {\n\t\t\tif (current_run > max_run) {\n\t\t\t\tmax_run = current_run;\n\t\t\t}\n\t\t\tcurrent_run = 0;\n\t\t}\n\t}\n\tif (current_run > max_run) {\n\t\tmax_run = current_run;\n\t}\n\treturn max_run;",
    "    long max_run = 0;\n    long current_run = 0;\n    for (char c : test_str) {\n        if (isupper(c)) {\n            current_run++;\n            max_run = std::max(max_run, current_run);\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;",
    "    long max_run = 0;\n    long run = 0;\n    for (char c : test_str) {\n        if (isupper(c)) {\n            run++;\n        }\n        else {\n            max_run = std::max(max_run, run);\n            run = 0;\n        }\n    }\n    return std::max(max_run, run);",
    "    long max_run = 0;\n    long current_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            current_run++;\n        } else {\n            max_run = std::max(max_run, current_run);\n            current_run = 0;\n        }\n    }\n    max_run = std::max(max_run, current_run);\n    return max_run;",
    "    long max_run = 0;\n    long curr_run = 0;\n    for (auto c : test_str) {\n        if (std::isupper(c)) {\n            curr_run++;\n        } else {\n            max_run = std::max(max_run, curr_run);\n            curr_run = 0;\n        }\n    }\n    max_run = std::max(max_run, curr_run);\n    return max_run;",
    "    int count = 0;\n    int max = 0;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] >= 'A' && test_str[i] <= 'Z') {\n            count++;\n            if(count > max) {\n                max = count;\n            }\n        } else {\n            count = 0;\n        }\n    }\n    return max;",
    "    long max_run = 0;\n    long current_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if (current_run > max_run) {\n        max_run = current_run;\n    }\n    return max_run;",
    "    long max_run = 0;\n    long current_run = 0;\n    for (char c : test_str) {\n        if (isupper(c)) {\n            current_run++;\n        } else {\n            max_run = std::max(max_run, current_run);\n            current_run = 0;\n        }\n    }\n    return std::max(max_run, current_run);",
    "  long max_run = 0;\n  long run = 0;\n  for (int i = 0; i < test_str.length(); i++) {\n    if (isupper(test_str[i])) {\n      run++;\n    } else {\n      if (run > max_run) {\n        max_run = run;\n      }\n      run = 0;\n    }\n  }\n  if (run > max_run) {\n    max_run = run;\n  }\n  return max_run;",
    "    long max_run = 0;\n    long cur_run = 0;\n    for (char c : test_str) {\n        if (isupper(c)) {\n            cur_run++;\n            max_run = std::max(cur_run, max_run);\n        } else {\n            cur_run = 0;\n        }\n    }\n    return max_run;",
    "    long max_run = 0;\n    long current_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            current_run++;\n        } else {\n            max_run = std::max(max_run, current_run);\n            current_run = 0;\n        }\n    }\n    return std::max(max_run, current_run);",
    "    long max_run = 0;\n    long curr_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            curr_run++;\n            max_run = std::max(max_run, curr_run);\n        } else {\n            curr_run = 0;\n        }\n    }\n    return max_run;",
    "    long count = 0, max = 0;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(isupper(test_str[i])) {\n            count++;\n            if(count > max) {\n                max = count;\n            }\n        } else {\n            count = 0;\n        }\n    }\n    return max;",
    "    long max_run = 0;\n    long current_run = 0;\n    for (int i = 0; i < test_str.size(); i++) {\n        if (isupper(test_str[i])) {\n            current_run++;\n        } else {\n            max_run = std::max(max_run, current_run);\n            current_run = 0;\n        }\n    }\n    max_run = std::max(max_run, current_run);\n    return max_run;",
    "    long max_count = 0;\n    long count = 0;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(isupper(test_str[i])) {\n            count++;\n        } else {\n            if(count > max_count) {\n                max_count = count;\n            }\n            count = 0;\n        }\n    }\n    return max_count;",
    "    long max_run = 0;\n    long curr_run = 0;\n    for (int i = 0; i < test_str.size(); i++) {\n        if (isupper(test_str[i])) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if (curr_run > max_run) {\n        max_run = curr_run;\n    }\n    return max_run;",
    "    long max_run = 0;\n    long curr_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            curr_run++;\n        } else {\n            max_run = std::max(max_run, curr_run);\n            curr_run = 0;\n        }\n    }\n    max_run = std::max(max_run, curr_run);\n    return max_run;",
    "    long max_run = 0;\n    long current_run = 0;\n    for (int i = 0; i < test_str.size(); i++) {\n        if (isupper(test_str[i])) {\n            current_run++;\n        } else {\n            max_run = std::max(max_run, current_run);\n            current_run = 0;\n        }\n    }\n    max_run = std::max(max_run, current_run);\n    return max_run;",
    "    long max_run = 0;\n    long curr_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            curr_run++;\n            max_run = std::max(max_run, curr_run);\n        } else {\n            curr_run = 0;\n        }\n    }\n    return max_run;",
    "    long max_run = 0;\n    long current_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;",
    "    long max_run = 0;\n    long curr_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            curr_run++;\n        } else {\n            max_run = std::max(max_run, curr_run);\n            curr_run = 0;\n        }\n    }\n    max_run = std::max(max_run, curr_run);\n    return max_run;",
    "    int max_count = 0;\n    int count = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            count++;\n        } else {\n            count = 0;\n        }\n        if (count > max_count) {\n            max_count = count;\n        }\n    }\n    return max_count;",
    "  long max_run = 0;\n  long cur_run = 0;\n  for (int i = 0; i < test_str.length(); i++) {\n    if (isupper(test_str[i])) {\n      cur_run++;\n    } else {\n      if (cur_run > max_run) {\n        max_run = cur_run;\n      }\n      cur_run = 0;\n    }\n  }\n  if (cur_run > max_run) {\n    max_run = cur_run;\n  }\n  return max_run;",
    "    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.size(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n            if (run > max_run) {\n                max_run = run;\n            }\n        } else {\n            run = 0;\n        }\n    }\n    return max_run;",
    "    long max_run = 0;\n    long current_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            current_run++;\n        } else {\n            max_run = std::max(max_run, current_run);\n            current_run = 0;\n        }\n    }\n    return std::max(max_run, current_run);",
    "    long max_run = 0;\n    long current_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if (current_run > max_run) {\n        max_run = current_run;\n    }\n    return max_run;",
    "    int count = 0;\n    int max_count = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            count++;\n        }\n        else {\n            if (count > max_count) {\n                max_count = count;\n            }\n            count = 0;\n        }\n    }\n    if (count > max_count) {\n        max_count = count;\n    }\n    return max_count;",
    "    long max_run = 0;\n    long curr_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if (curr_run > max_run) {\n        max_run = curr_run;\n    }\n    return max_run;",
    "    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n            if (run > max_run) {\n                max_run = run;\n            }\n        } else {\n            run = 0;\n        }\n    }\n    return max_run;",
    "    long max_run = 0;\n    long current_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;",
    "    long max_run = 0;\n    long cur_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            cur_run++;\n        } else {\n            if (cur_run > max_run) {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if (cur_run > max_run) {\n        max_run = cur_run;\n    }\n    return max_run;",
    "    long max_run = 0;\n    long current_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            current_run++;\n        } else {\n            max_run = std::max(max_run, current_run);\n            current_run = 0;\n        }\n    }\n    max_run = std::max(max_run, current_run);\n    return max_run;",
    "    long max_run = 0;\n    long curr_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            curr_run++;\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n        } else {\n            curr_run = 0;\n        }\n    }\n    return max_run;",
    "    long max_run = 0;\n    long run = 0;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(isupper(test_str[i])) {\n            run++;\n        } else {\n            if(run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if(run > max_run) {\n        max_run = run;\n    }\n    return max_run;",
    "    long max_run = 0;\n    long run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            run++;\n        } else {\n            max_run = std::max(max_run, run);\n            run = 0;\n        }\n    }\n    return std::max(max_run, run);",
    "  // Write your code here\n  int max_run = 0;\n  int run = 0;\n  for(int i = 0; i < test_str.length(); i++) {\n    if(isupper(test_str[i])) {\n      run++;\n    } else {\n      if(run > max_run) {\n        max_run = run;\n      }\n      run = 0;\n    }\n  }\n  if(run > max_run) {\n    max_run = run;\n  }\n  return max_run;",
    "    long max_run = 0;\n    long current_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            current_run++;\n        } else {\n            max_run = std::max(max_run, current_run);\n            current_run = 0;\n        }\n    }\n    max_run = std::max(max_run, current_run);\n    return max_run;",
    "    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n            if (run > max_run) {\n                max_run = run;\n            }\n        } else {\n            run = 0;\n        }\n    }\n    return max_run;",
    "  long max_run = 0;\n  long run = 0;\n  for (int i = 0; i < test_str.length(); i++) {\n    if (isupper(test_str[i])) {\n      run++;\n    } else {\n      if (run > max_run) {\n        max_run = run;\n      }\n      run = 0;\n    }\n  }\n  if (run > max_run) {\n    max_run = run;\n  }\n  return max_run;",
    "    long max_run = 0;\n    long current_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if (current_run > max_run) {\n        max_run = current_run;\n    }\n    return max_run;",
    "    long max_run = 0;\n    long run = 0;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(isupper(test_str[i])) {\n            run++;\n            if(run > max_run) {\n                max_run = run;\n            }\n        } else {\n            run = 0;\n        }\n    }\n    return max_run;",
    "    long max_run = 0;\n    long run = 0;\n    for (char c : test_str) {\n        if (isupper(c)) {\n            run++;\n        } else {\n            max_run = std::max(max_run, run);\n            run = 0;\n        }\n    }\n    max_run = std::max(max_run, run);\n    return max_run;",
    "    long max_run = 0;\n    long curr_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            curr_run++;\n        } else {\n            max_run = std::max(max_run, curr_run);\n            curr_run = 0;\n        }\n    }\n    return std::max(max_run, curr_run);",
    "    long max_run = 0;\n    long current_run = 0;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(isupper(test_str[i])) {\n            current_run++;\n        } else {\n            if(current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if(current_run > max_run) {\n        max_run = current_run;\n    }\n    return max_run;",
    "\tlong max_run = 0;\n\tlong curr_run = 0;\n\tfor(int i = 0; i < test_str.length(); i++) {\n\t\tif(isupper(test_str[i])) {\n\t\t\tcurr_run++;\n\t\t} else {\n\t\t\tif(curr_run > max_run) {\n\t\t\t\tmax_run = curr_run;\n\t\t\t}\n\t\t\tcurr_run = 0;\n\t\t}\n\t}\n\tif(curr_run > max_run) {\n\t\tmax_run = curr_run;\n\t}\n\treturn max_run;",
    "    long max_run = 0;\n    long current_run = 0;\n    for(int i = 0; i < test_str.size(); i++) {\n        if(isupper(test_str[i])) {\n            current_run++;\n            if(current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;",
    "    long max_run = 0;\n    long current_run = 0;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(isupper(test_str[i])) {\n            current_run++;\n        } else {\n            if(current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if(current_run > max_run) {\n        max_run = current_run;\n    }\n    return max_run;",
    "    long max_run = 0;\n    long curr_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            curr_run++;\n        } else {\n            curr_run = 0;\n        }\n        max_run = std::max(max_run, curr_run);\n    }\n    return max_run;",
    "  long max_run = 0;\n  long curr_run = 0;\n  for (int i = 0; i < test_str.length(); i++) {\n    if (isupper(test_str[i])) {\n      curr_run++;\n    } else {\n      max_run = std::max(max_run, curr_run);\n      curr_run = 0;\n    }\n  }\n  return std::max(max_run, curr_run);",
    "  long max_run = 0;\n  long curr_run = 0;\n  for (int i = 0; i < test_str.length(); i++) {\n    if (isupper(test_str[i])) {\n      curr_run++;\n    } else {\n      if (curr_run > max_run) {\n        max_run = curr_run;\n      }\n      curr_run = 0;\n    }\n  }\n  if (curr_run > max_run) {\n    max_run = curr_run;\n  }\n  return max_run;",
    "    long max_run = 0;\n    long current_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if (current_run > max_run) {\n        max_run = current_run;\n    }\n    return max_run;",
    "    int count = 0;\n    int max = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            count++;\n            if (count > max) {\n                max = count;\n            }\n        } else {\n            count = 0;\n        }\n    }\n    return max;",
    "    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if (run > max_run) {\n        max_run = run;\n    }\n    return max_run;",
    "    long max_run = 0;\n    long curr_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if (curr_run > max_run) {\n        max_run = curr_run;\n    }\n    return max_run;",
    "    long max_run = 0;\n    long current_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if (current_run > max_run) {\n        max_run = current_run;\n    }\n    return max_run;",
    "    long max_run = 0;\n    long current_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;",
    "    long count = 0;\n    long max = 0;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(isupper(test_str[i])) {\n            count++;\n        } else {\n            if(count > max) {\n                max = count;\n            }\n            count = 0;\n        }\n    }\n    return max;",
    "    long max_run = 0;\n    long current_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if (current_run > max_run) {\n        max_run = current_run;\n    }\n    return max_run;",
    "    long max_run = 0;\n    long run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            run++;\n        } else {\n            max_run = std::max(max_run, run);\n            run = 0;\n        }\n    }\n    max_run = std::max(max_run, run);\n    return max_run;",
    "    long max_run = 0;\n    long current_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if (current_run > max_run) {\n        max_run = current_run;\n    }\n    return max_run;",
    "    long max_run = 0;\n    long curr_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if (curr_run > max_run) {\n        max_run = curr_run;\n    }\n    return max_run;",
    "    long max_run = 0;\n    long curr_run = 0;\n    for (char c : test_str) {\n        if (isupper(c)) {\n            curr_run++;\n        } else {\n            max_run = std::max(max_run, curr_run);\n            curr_run = 0;\n        }\n    }\n    max_run = std::max(max_run, curr_run);\n    return max_run;",
    "    long max_count = 0;\n    long count = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            count++;\n        } else {\n            if (count > max_count) {\n                max_count = count;\n            }\n            count = 0;\n        }\n    }\n    if (count > max_count) {\n        max_count = count;\n    }\n    return max_count;",
    "    long max_run = 0;\n    long current_run = 0;\n    for (auto c : test_str) {\n        if (isupper(c)) {\n            current_run++;\n        } else {\n            max_run = std::max(max_run, current_run);\n            current_run = 0;\n        }\n    }\n    max_run = std::max(max_run, current_run);\n    return max_run;",
    "    long max_run = 0, curr_run = 0;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(isupper(test_str[i])) {\n            curr_run++;\n        } else {\n            if(curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if(curr_run > max_run) {\n        max_run = curr_run;\n    }\n    return max_run;",
    "    int max_count = 0;\n    int count = 0;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(isupper(test_str[i])) {\n            count++;\n        } else {\n            if(count > max_count) {\n                max_count = count;\n            }\n            count = 0;\n        }\n    }\n    if(count > max_count) {\n        max_count = count;\n    }\n    return max_count;",
    "    long max_run = 0;\n    long curr_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            curr_run++;\n        } else {\n            curr_run = 0;\n        }\n        if (curr_run > max_run) {\n            max_run = curr_run;\n        }\n    }\n    return max_run;",
    "  // Write your code here\n  long count=0,max=0;\n  for(int i=0;i<test_str.length();i++)\n  {\n      if(isupper(test_str[i]))\n      {\n          count++;\n          if(count>max)\n          {\n              max=count;\n          }\n      }\n      else\n      {\n          count=0;\n      }\n  }\n  return max;",
    "    long max_run = 0;\n    long run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if (run > max_run) {\n        max_run = run;\n    }\n    return max_run;",
    "    long max_run = 0;\n    long current_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;",
    "  long max_run = 0;\n  long current_run = 0;\n  for (int i = 0; i < test_str.length(); i++) {\n    if (isupper(test_str[i])) {\n      current_run++;\n    } else {\n      if (current_run > max_run) {\n        max_run = current_run;\n      }\n      current_run = 0;\n    }\n  }\n  return max_run;",
    "    long max_run = 0;\n    long current_run = 0;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(isupper(test_str[i])) {\n            current_run++;\n        } else {\n            if(current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if(current_run > max_run) {\n        max_run = current_run;\n    }\n    return max_run;",
    "    long max_run = 0;\n    long run = 0;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(isupper(test_str[i])) {\n            run++;\n        } else {\n            if(run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;",
    "    // Write your code here\n    long count = 0;\n    long max = 0;\n    for(int i = 0; i < test_str.length(); i++){\n        if(isupper(test_str[i])){\n            count++;\n            if(count > max){\n                max = count;\n            }\n        }\n        else{\n            count = 0;\n        }\n    }\n    return max;",
    "    long max_run = 0;\n    long current_run = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isupper(test_str[i])) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if (current_run > max_run) {\n        max_run = current_run;\n    }\n    return max_run;"
  ]
}