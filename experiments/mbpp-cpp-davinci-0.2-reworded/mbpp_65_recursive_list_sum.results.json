{
  "name": "mbpp_65_recursive_list_sum",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_65_recursive_list_sum.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto it = data_list.begin(); it != data_list.end(); ++it) {\n        if (it->f0 == it->f0) {\n            sum += it->f0;\n        } else {\n            sum += recursive_list_sum(it->f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmp94hajios.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp94hajios.cpp:21:43: error: could not convert \u2018it.__gnu_cxx::__normal_iterator<Union_long_std_vector_long_*, std::vector<Union_long_std_vector_long_> >::operator->()->Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(it->f1);\n      |                                       ~~~~^~\n      |                                           |\n      |                                           vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp94hajios.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _TrivialValueTypes = false]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:134:15:   required from \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:289:37:   required from ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for(int i = 0; i < data_list.size(); i++) {\n        if(data_list[i].f0 == data_list[i].f1) {\n            result += recursive_list_sum(data_list[i].f1);\n        } else {\n            result += data_list[i].f0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510499,
      "stdout": "",
      "stderr": "/tmp/tmpwnm47o08.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpwnm47o08.cpp:18:28: error: no match for \u2018operator==\u2019 (operand types are \u2018long int\u2019 and \u2018std::vector<long int>\u2019)\n   18 |         if(data_list[i].f0 == data_list[i].f1) {\n      |                            ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n                 from /tmp/tmpwnm47o08.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5: note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>& __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5: note:   template argument deduction/substitution failed:\n/tmp/tmpwnm47o08.cpp:18:44: note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019 and \u2018long int\u2019\n   18 |         if(data_list[i].f0 == data_list[i].f1) {\n      |                                            ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n                 from /tmp/tmpwnm47o08.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1099:5: note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc> bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1099:5: note:   template argument deduction/substituti",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmpvdmrvjvl.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpvdmrvjvl.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpvdmrvjvl.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvdmrvjvl.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpvdmrvjvl.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvdmrvjvl.cpp:62:39: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (data == std::vector\n      |                   ~                   ^\n      |                                       )\n   63 | }\n      | ~                                      \n/tmp/tmpvdmrvjvl.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvdmrvjvl.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmpvdmrvjvl.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpvdmrvjvl.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmpvdmrvjvl.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (int i = 0; i < data_list.size(); i++) {\n        if (data_list[i] == data_list[i].f0) {\n            result += data_list[i].f0;\n        } else if (data_list[i] == data_list[i].f1) {\n            result += recursive_list_sum(data_list[i].f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmp_6f3otbu.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp_6f3otbu.cpp:21:55: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp_6f3otbu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto i : data_list) {\n        if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == long()) {\n            result += i;\n        } else {\n            result += recursive_list_sum(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmp933j9e2w.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp933j9e2w.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto i : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmp933j9e2w.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp933j9e2w.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp933j9e2w.cpp:21:20: error: no match for \u2018operator+=\u2019 (operand types are \u2018long int\u2019 and \u2018Union_long_std_vector_long_\u2019)\n   21 |             result += i;\n      |             ~~~~~~~^~~~\n/tmp/tmp933j9e2w.cpp:23:42: error: could not convert \u2018i\u2019 from \u2018Union_long_std_vector_long_\u2019 to \u2018std::vector<Union_long_std_vector_long_>\u2019\n   23 |             result += recursive_list_sum(i);\n      |                                          ^\n      |                                          |\n      |                                          Union_long_std_vector_long_\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp933j9e2w.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instant",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            sum += data.f0;\n        } else {\n            sum += recursive_list_sum(data.f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmpaschg4y4.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpaschg4y4.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpaschg4y4.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpaschg4y4.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpaschg4y4.cpp:21:44: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(data.f1);\n      |                                       ~~~~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpaschg4y4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (int i = 0; i < data_list.size(); i++) {\n        if (data_list[i].f0 == 0) {\n            result += recursive_list_sum(data_list[i].f1);\n        } else {\n            result += data_list[i].f0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmpnz6rd_ec.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpnz6rd_ec.cpp:19:55: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             result += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpnz6rd_ec.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (int i = 0; i < data_list.size(); i++) {\n        if (data_list[i] == data_list[i].f0) {\n            result += data_list[i].f0;\n        } else {\n            result += recursive_list_sum(data_list[i].f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmpjf4hd8kw.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpjf4hd8kw.cpp:21:55: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpjf4hd8kw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            result += data.f0;\n        } else {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmp_mzt7khn.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp_mzt7khn.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmp_mzt7khn.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_mzt7khn.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp_mzt7khn.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp_mzt7khn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto i : data_list) {\n        if (i == std::vector<long>()) {\n            result += recursive_list_sum(i.f1);\n        } else {\n            result += i.f0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmplsnrx8pp.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmplsnrx8pp.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto i : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmplsnrx8pp.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplsnrx8pp.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmplsnrx8pp.cpp:19:44: error: could not convert \u2018i.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             result += recursive_list_sum(i.f1);\n      |                                          ~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmplsnrx8pp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/in",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for(auto data : data_list) {\n        if(data == data.f0) {\n            sum += data.f0;\n        } else if(data == data.f1) {\n            sum += recursive_list_sum(data.f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmp9tb7thjq.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp9tb7thjq.cpp:17:21: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for(auto data : data_list) {\n      |                     ^~~~~~~~~\n/tmp/tmp9tb7thjq.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9tb7thjq.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp9tb7thjq.cpp:21:44: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(data.f1);\n      |                                       ~~~~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp9tb7thjq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-sky",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long _out_sum = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            _out_sum += data.f0;\n        } else if (data == data.f1) {\n            _out_sum += recursive_list_sum(data.f1);\n        }\n    }\n    return _out_sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmpa6f0n2sb.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpa6f0n2sb.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpa6f0n2sb.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpa6f0n2sb.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpa6f0n2sb.cpp:21:49: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             _out_sum += recursive_list_sum(data.f1);\n      |                                            ~~~~~^~\n      |                                                 |\n      |                                                 vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpa6f0n2sb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto i : data_list) {\n        if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == long()) {\n            result += i;\n        } else {\n            result += recursive_list_sum(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmp933j9e2w.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp933j9e2w.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto i : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmp933j9e2w.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp933j9e2w.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp933j9e2w.cpp:21:20: error: no match for \u2018operator+=\u2019 (operand types are \u2018long int\u2019 and \u2018Union_long_std_vector_long_\u2019)\n   21 |             result += i;\n      |             ~~~~~~~^~~~\n/tmp/tmp933j9e2w.cpp:23:42: error: could not convert \u2018i\u2019 from \u2018Union_long_std_vector_long_\u2019 to \u2018std::vector<Union_long_std_vector_long_>\u2019\n   23 |             result += recursive_list_sum(i);\n      |                                          ^\n      |                                          |\n      |                                          Union_long_std_vector_long_\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp933j9e2w.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instant",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (int i = 0; i < data_list.size(); i++) {\n        if (data_list[i].f0 == data_list[i].f0) {\n            result += data_list[i].f0;\n        } else {\n            result += recursive_list_sum(data_list[i].f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmp59xspwgk.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp59xspwgk.cpp:21:55: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp59xspwgk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (int i = 0; i < data_list.size(); i++) {\n        if (data_list[i] == data_list[i].f0) {\n            result += data_list[i].f0;\n        } else {\n            result += recursive_list_sum(data_list[i].f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmpjf4hd8kw.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpjf4hd8kw.cpp:21:55: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpjf4hd8kw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmpvdmrvjvl.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpvdmrvjvl.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpvdmrvjvl.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvdmrvjvl.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpvdmrvjvl.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvdmrvjvl.cpp:62:39: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (data == std::vector\n      |                   ~                   ^\n      |                                       )\n   63 | }\n      | ~                                      \n/tmp/tmpvdmrvjvl.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvdmrvjvl.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmpvdmrvjvl.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpvdmrvjvl.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmpvdmrvjvl.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto &data : data_list) {\n        if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmpcl_7y4bj.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpcl_7y4bj.cpp:63:1: error: expected unqualified-id before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpcl_7y4bj.cpp:62:31: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (data == std::\n      |                   ~           ^\n      |                               )\n   63 | }\n      | ~                              \n/tmp/tmpcl_7y4bj.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpcl_7y4bj.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmpcl_7y4bj.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpcl_7y4bj.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmpcl_7y4bj.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long x = 0;\n    for (auto i : data_list) {\n        if (i == x) {\n            x += i.f0;\n        } else {\n            x += recursive_list_sum(i.f1);\n        }\n    }\n    return x;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmp_degig4l.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp_degig4l.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto i : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmp_degig4l.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_degig4l.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp_degig4l.cpp:21:39: error: could not convert \u2018i.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             x += recursive_list_sum(i.f1);\n      |                                     ~~^~\n      |                                       |\n      |                                       vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp_degig4l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            sum += data.f0;\n        } else if (data == data.f1) {\n            sum += recursive_list_sum(data.f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmp9v8h0v8i.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp9v8h0v8i.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmp9v8h0v8i.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9v8h0v8i.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp9v8h0v8i.cpp:21:44: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(data.f1);\n      |                                       ~~~~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp9v8h0v8i.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto&& data : data_list) {\n        if (data == data.f0) {\n            result += data.f0;\n        } else if (data == data.f1) {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmpvpixexfb.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpvpixexfb.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpvpixexfb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            result += data.f0;\n        } else if (data == data.f1) {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123360,
      "stdout": "",
      "stderr": "/tmp/tmpmrgnoxaz.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpmrgnoxaz.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpmrgnoxaz.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmrgnoxaz.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpmrgnoxaz.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpmrgnoxaz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (int i = 0; i < data_list.size(); i++) {\n        if (data_list[i] == data_list[i].f0) {\n            result += data_list[i].f0;\n        } else if (data_list[i] == data_list[i].f1) {\n            result += recursive_list_sum(data_list[i].f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmp_6f3otbu.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp_6f3otbu.cpp:21:55: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp_6f3otbu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (int i = 0; i < data_list.size(); i++) {\n        if (data_list[i].f0 == 0) {\n            result += recursive_list_sum(data_list[i].f1);\n        } else {\n            result += data_list[i].f0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmpnz6rd_ec.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpnz6rd_ec.cpp:19:55: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             result += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpnz6rd_ec.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            result += data.f0;\n        } else if (data == data.f1) {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123360,
      "stdout": "",
      "stderr": "/tmp/tmpmrgnoxaz.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpmrgnoxaz.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpmrgnoxaz.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmrgnoxaz.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpmrgnoxaz.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpmrgnoxaz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            sum += data.f0;\n        } else {\n            sum += recursive_list_sum(data.f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmpaschg4y4.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpaschg4y4.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpaschg4y4.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpaschg4y4.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpaschg4y4.cpp:21:44: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(data.f1);\n      |                                       ~~~~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpaschg4y4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long ret = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            ret += data.f0;\n        } else {\n            ret += recursive_list_sum(data.f1);\n        }\n    }\n    return ret;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123360,
      "stdout": "",
      "stderr": "/tmp/tmp8neutdpn.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp8neutdpn.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmp8neutdpn.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8neutdpn.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp8neutdpn.cpp:21:44: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             ret += recursive_list_sum(data.f1);\n      |                                       ~~~~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp8neutdpn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmpvdmrvjvl.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpvdmrvjvl.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpvdmrvjvl.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvdmrvjvl.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpvdmrvjvl.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvdmrvjvl.cpp:62:39: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (data == std::vector\n      |                   ~                   ^\n      |                                       )\n   63 | }\n      | ~                                      \n/tmp/tmpvdmrvjvl.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvdmrvjvl.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmpvdmrvjvl.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpvdmrvjvl.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmpvdmrvjvl.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto i : data_list) {\n        if (i == std::vector<long>()) {\n            result += recursive_list_sum(i.f1);\n        } else {\n            result += i.f0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmplsnrx8pp.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmplsnrx8pp.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto i : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmplsnrx8pp.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplsnrx8pp.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmplsnrx8pp.cpp:19:44: error: could not convert \u2018i.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             result += recursive_list_sum(i.f1);\n      |                                          ~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmplsnrx8pp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/in",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (int i = 0; i < data_list.size(); i++) {\n        if (data_list[i].f0 == data_list[i].f1) {\n            sum += recursive_list_sum(data_list[i].f1);\n        } else {\n            sum += data_list[i].f0;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123363,
      "stdout": "",
      "stderr": "/tmp/tmpjf1f4psm.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpjf1f4psm.cpp:18:29: error: no match for \u2018operator==\u2019 (operand types are \u2018long int\u2019 and \u2018std::vector<long int>\u2019)\n   18 |         if (data_list[i].f0 == data_list[i].f1) {\n      |                             ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n                 from /tmp/tmpjf1f4psm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5: note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>& __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5: note:   template argument deduction/substitution failed:\n/tmp/tmpjf1f4psm.cpp:18:45: note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019 and \u2018long int\u2019\n   18 |         if (data_list[i].f0 == data_list[i].f1) {\n      |                                             ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n                 from /tmp/tmpjf1f4psm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1099:5: note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc> bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1099:5: note:   template argument deduction/substi",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto &i : data_list) {\n        if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == long()) {\n            result += i.f0;\n        } else {\n            result += recursive_list_sum(i.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123360,
      "stdout": "",
      "stderr": "/tmp/tmpllki5ux0.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpllki5ux0.cpp:23:44: error: could not convert \u2018i.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   23 |             result += recursive_list_sum(i.f1);\n      |                                          ~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpllki5ux0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _TrivialValueTypes = false]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:134:15:   required from \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:289:37:   required from \u2018_ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator, std::allocator<_Tp",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            result += data.f0;\n        } else if (data == data.f1) {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123360,
      "stdout": "",
      "stderr": "/tmp/tmpmrgnoxaz.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpmrgnoxaz.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpmrgnoxaz.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmrgnoxaz.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpmrgnoxaz.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpmrgnoxaz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            sum += data.f0;\n        } else {\n            sum += recursive_list_sum(data.f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmpaschg4y4.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpaschg4y4.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpaschg4y4.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpaschg4y4.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpaschg4y4.cpp:21:44: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(data.f1);\n      |                                       ~~~~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpaschg4y4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for(auto i : data_list) {\n        if(i == std::vector<long>()) {\n            sum += 0;\n        } else if(i == long()) {\n            sum += i.f0;\n        } else {\n            sum += recursive_list_sum(i.f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123359,
      "stdout": "",
      "stderr": "/tmp/tmp73fk607c.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp73fk607c.cpp:17:18: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for(auto i : data_list) {\n      |                  ^~~~~~~~~\n/tmp/tmp73fk607c.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp73fk607c.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp73fk607c.cpp:23:41: error: could not convert \u2018i.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   23 |             sum += recursive_list_sum(i.f1);\n      |                                       ~~^~\n      |                                         |\n      |                                         vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp73fk607c.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    if (data_list.size() == 0) {\n        return 0;\n    }\n    Union_long_std_vector_long_ first_element = data_list[0];\n    if (first_element == std::vector<long>()) {\n        return recursive_list_sum(first_element.f1) + recursive_list_sum(std::vector<Union_long_std_vector_long_>(data_list.begin() + 1, data_list.end()));\n    } else {\n        return first_element.f0 + recursive_list_sum(std::vector<Union_long_std_vector_long_>(data_list.begin() + 1, data_list.end()));\n    }\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123360,
      "stdout": "",
      "stderr": "/tmp/tmp9bmoho17.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp9bmoho17.cpp:19:60: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   19 |     Union_long_std_vector_long_ first_element = data_list[0];\n      |                                                            ^\n/tmp/tmp9bmoho17.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9bmoho17.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp9bmoho17.cpp:21:49: error: could not convert \u2018first_element.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |         return recursive_list_sum(first_element.f1) + recursive_list_sum(std::vector<Union_long_std_vector_long_>(data_list.begin() + 1, data_list.end()));\n      |                                   ~~~~~~~~~~~~~~^~\n      |                                                 |\n      |                                                 vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp9bmoho17.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto &data : data_list) {\n        if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123360,
      "stdout": "",
      "stderr": "/tmp/tmp22dgiura.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp22dgiura.cpp:63:1: error: expected unqualified-id before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmp22dgiura.cpp:62:31: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (data == std::\n      |                   ~           ^\n      |                               )\n   63 | }\n      | ~                              \n/tmp/tmp22dgiura.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmp22dgiura.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmp22dgiura.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmp22dgiura.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmp22dgiura.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for(int i = 0; i < data_list.size(); i++){\n        if(data_list[i].f0 == data_list[i].f1){\n            result += data_list[i].f0;\n        }\n        else{\n            result += recursive_list_sum(data_list[i].f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123363,
      "stdout": "",
      "stderr": "/tmp/tmpvdgy2xd1.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpvdgy2xd1.cpp:18:28: error: no match for \u2018operator==\u2019 (operand types are \u2018long int\u2019 and \u2018std::vector<long int>\u2019)\n   18 |         if(data_list[i].f0 == data_list[i].f1){\n      |                            ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n                 from /tmp/tmpvdgy2xd1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5: note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>& __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5: note:   template argument deduction/substitution failed:\n/tmp/tmpvdgy2xd1.cpp:18:44: note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019 and \u2018long int\u2019\n   18 |         if(data_list[i].f0 == data_list[i].f1){\n      |                                            ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n                 from /tmp/tmpvdgy2xd1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1099:5: note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc> bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1099:5: note:   template argument deduction/substitution",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto &elem : data_list) {\n        if (elem == std::vector<long>()) {\n            result += recursive_list_sum(elem.f1);\n        } else {\n            result += elem.f0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123360,
      "stdout": "",
      "stderr": "/tmp/tmpsi07cau9.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpsi07cau9.cpp:19:47: error: could not convert \u2018elem.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             result += recursive_list_sum(elem.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpsi07cau9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _TrivialValueTypes = false]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:134:15:   required from \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:289:37:   required from \u2018_ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator, std",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto &data : data_list) {\n        if (data == data.f0) {\n            sum += data.f0;\n        } else if (data == data.f1) {\n            sum += recursive_list_sum(data.f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123360,
      "stdout": "",
      "stderr": "/tmp/tmpbiw_0y9c.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpbiw_0y9c.cpp:21:44: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(data.f1);\n      |                                       ~~~~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpbiw_0y9c.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _TrivialValueTypes = false]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:134:15:   required from \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:289:37:   required from \u2018_ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator, std::allocator<",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            result += data.f0;\n        } else {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmp_mzt7khn.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp_mzt7khn.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmp_mzt7khn.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_mzt7khn.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp_mzt7khn.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp_mzt7khn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result;\n    if (data_list.size() == 0) {\n        result = 0;\n    } else {\n        Union_long_std_vector_long_ data = data_list[0];\n        std::vector<Union_long_std_vector_long_> data_list_tail = std::vector<Union_long_std_vector_long_>(data_list.begin() + 1, data_list.end());\n        if (data == data.f0) {\n            result = data.f0 + recursive_list_sum(data_list_tail);\n        } else {\n            result = recursive_list_sum(data.f1) + recursive_list_sum(data_list_tail);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123360,
      "stdout": "",
      "stderr": "/tmp/tmp_wp3ph9h.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp_wp3ph9h.cpp:20:55: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   20 |         Union_long_std_vector_long_ data = data_list[0];\n      |                                                       ^\n/tmp/tmp_wp3ph9h.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_wp3ph9h.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp_wp3ph9h.cpp:25:46: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   25 |             result = recursive_list_sum(data.f1) + recursive_list_sum(data_list_tail);\n      |                                         ~~~~~^~\n      |                                              |\n      |                                              vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp_wp3ph9h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto i : data_list) {\n        if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == long()) {\n            result += i.f0;\n        } else {\n            result += recursive_list_sum(i.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123360,
      "stdout": "",
      "stderr": "/tmp/tmpol2q5601.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpol2q5601.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto i : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmpol2q5601.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpol2q5601.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpol2q5601.cpp:23:44: error: could not convert \u2018i.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   23 |             result += recursive_list_sum(i.f1);\n      |                                          ~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpol2q5601.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/in",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto i : data_list) {\n        if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == long()) {\n            result += i;\n        } else {\n            result += recursive_list_sum(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmp933j9e2w.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp933j9e2w.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto i : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmp933j9e2w.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp933j9e2w.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp933j9e2w.cpp:21:20: error: no match for \u2018operator+=\u2019 (operand types are \u2018long int\u2019 and \u2018Union_long_std_vector_long_\u2019)\n   21 |             result += i;\n      |             ~~~~~~~^~~~\n/tmp/tmp933j9e2w.cpp:23:42: error: could not convert \u2018i\u2019 from \u2018Union_long_std_vector_long_\u2019 to \u2018std::vector<Union_long_std_vector_long_>\u2019\n   23 |             result += recursive_list_sum(i);\n      |                                          ^\n      |                                          |\n      |                                          Union_long_std_vector_long_\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp933j9e2w.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instant",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for(int i = 0; i < data_list.size(); i++){\n        if(data_list[i] == data_list[i].f0){\n            result += data_list[i].f0;\n        }\n        else{\n            result += recursive_list_sum(data_list[i].f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123360,
      "stdout": "",
      "stderr": "/tmp/tmpmka7m7cq.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpmka7m7cq.cpp:22:55: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   22 |             result += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpmka7m7cq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _TrivialValueTypes = false]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:134:15:   required from \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:289:37:   required from \u2018_ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator, std::allocator<_Tp>&) [with _InputIterator = const Union_long_s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for(int i = 0; i < data_list.size(); i++) {\n        if(data_list[i] == data_list[i].f0) {\n            result += data_list[i].f0;\n        } else if(data_list[i] == data_list[i].f1) {\n            result += recursive_list_sum(data_list[i].f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123360,
      "stdout": "",
      "stderr": "/tmp/tmpmzwhyqyt.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpmzwhyqyt.cpp:21:55: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpmzwhyqyt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto &data : data_list) {\n        if (data == data.f0) {\n            result += data.f0;\n        } else {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123360,
      "stdout": "",
      "stderr": "/tmp/tmpf2d6kep2.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpf2d6kep2.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpf2d6kep2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _TrivialValueTypes = false]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:134:15:   required from \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:289:37:   required from \u2018_ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator, std",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for(int i = 0; i < data_list.size(); i++){\n        if(data_list[i].f0 == data_list[i].f1){\n            sum += data_list[i].f0;\n        }\n        else{\n            sum += recursive_list_sum(data_list[i].f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123363,
      "stdout": "",
      "stderr": "/tmp/tmp8vh3010h.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp8vh3010h.cpp:18:28: error: no match for \u2018operator==\u2019 (operand types are \u2018long int\u2019 and \u2018std::vector<long int>\u2019)\n   18 |         if(data_list[i].f0 == data_list[i].f1){\n      |                            ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n                 from /tmp/tmp8vh3010h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5: note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>& __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5: note:   template argument deduction/substitution failed:\n/tmp/tmp8vh3010h.cpp:18:44: note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019 and \u2018long int\u2019\n   18 |         if(data_list[i].f0 == data_list[i].f1){\n      |                                            ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n                 from /tmp/tmp8vh3010h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1099:5: note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc> bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1099:5: note:   template argument deduction/substitution",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto it = data_list.begin(); it != data_list.end(); ++it) {\n        if (it->f0 == 0) {\n            result += recursive_list_sum(it->f1);\n        } else {\n            result += it->f0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123360,
      "stdout": "",
      "stderr": "/tmp/tmp1kx9rr40.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp1kx9rr40.cpp:19:46: error: could not convert \u2018it.__gnu_cxx::__normal_iterator<Union_long_std_vector_long_*, std::vector<Union_long_std_vector_long_> >::operator->()->Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             result += recursive_list_sum(it->f1);\n      |                                          ~~~~^~\n      |                                              |\n      |                                              vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp1kx9rr40.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _TrivialValueTypes = false]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:134:15:   required from \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:289:37:   re",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            result += data.f0;\n        } else if (data == data.f1) {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123360,
      "stdout": "",
      "stderr": "/tmp/tmpmrgnoxaz.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpmrgnoxaz.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpmrgnoxaz.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmrgnoxaz.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpmrgnoxaz.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpmrgnoxaz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto i : data_list) {\n        if (i == std::vector<long>()) {\n            result += recursive_list_sum(i.f1);\n        } else {\n            result += i.f0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmplsnrx8pp.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmplsnrx8pp.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto i : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmplsnrx8pp.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplsnrx8pp.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmplsnrx8pp.cpp:19:44: error: could not convert \u2018i.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             result += recursive_list_sum(i.f1);\n      |                                          ~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmplsnrx8pp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/in",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto i : data_list) {\n        if (i == std::vector<long>()) {\n            result += recursive_list_sum(i.f1);\n        } else {\n            result += i.f0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmplsnrx8pp.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmplsnrx8pp.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto i : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmplsnrx8pp.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplsnrx8pp.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmplsnrx8pp.cpp:19:44: error: could not convert \u2018i.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             result += recursive_list_sum(i.f1);\n      |                                          ~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmplsnrx8pp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/in",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto x : data_list) {\n        if (x == std::vector<long>()) {\n            result += recursive_list_sum(x.f1);\n        } else {\n            result += x.f0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123360,
      "stdout": "",
      "stderr": "/tmp/tmpcc9n1l5z.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpcc9n1l5z.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto x : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmpcc9n1l5z.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpcc9n1l5z.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpcc9n1l5z.cpp:19:44: error: could not convert \u2018x.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             result += recursive_list_sum(x.f1);\n      |                                          ~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpcc9n1l5z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/in",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            sum += data.f0;\n        } else if (data == data.f1) {\n            sum += recursive_list_sum(data.f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmp9v8h0v8i.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp9v8h0v8i.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmp9v8h0v8i.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9v8h0v8i.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp9v8h0v8i.cpp:21:44: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(data.f1);\n      |                                       ~~~~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp9v8h0v8i.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (int i = 0; i < data_list.size(); i++) {\n        if (data_list[i] == std::vector<long>()) {\n            result += recursive_list_sum(data_list[i].f1);\n        } else {\n            result += data_list[i].f0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123360,
      "stdout": "",
      "stderr": "/tmp/tmpr607_unt.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpr607_unt.cpp:19:55: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             result += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpr607_unt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _TrivialValueTypes = false]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:134:15:   required from \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:289:37:   required from \u2018_ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator, std::allocator<_Tp>&) [with _InputIterator = const Union_long_s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result;\n    if (data_list.size() == 0) {\n        result = 0;\n    } else {\n        Union_long_std_vector_long_ data = data_list[0];\n        if (data == data.f0) {\n            result = data.f0;\n        } else {\n            result = recursive_list_sum(data.f1);\n        }\n    }\n    if (data_list.size() > 1) {\n        std::vector<Union_long_std_vector_long_> data_list_tail;\n        for (int i = 1; i < data_list.size(); i++) {\n            data_list_tail.push_back(data_list[i]);\n        }\n        result = result + recursive_list_sum(data_list_tail);\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123359,
      "stdout": "",
      "stderr": "/tmp/tmpk063b02c.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpk063b02c.cpp:20:55: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   20 |         Union_long_std_vector_long_ data = data_list[0];\n      |                                                       ^\n/tmp/tmpk063b02c.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpk063b02c.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpk063b02c.cpp:24:46: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   24 |             result = recursive_list_sum(data.f1);\n      |                                         ~~~~~^~\n      |                                              |\n      |                                              vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/c++allocator.h:33,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/allocator.h:46,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:41,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n                 from /sha",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto it = data_list.begin(); it != data_list.end(); ++it) {\n        if (it->f1 == it->f1) {\n            sum += recursive_list_sum(it->f1);\n        } else {\n            sum += it->f0;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123360,
      "stdout": "",
      "stderr": "/tmp/tmpyravcrb8.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpyravcrb8.cpp:19:43: error: could not convert \u2018it.__gnu_cxx::__normal_iterator<Union_long_std_vector_long_*, std::vector<Union_long_std_vector_long_> >::operator->()->Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             sum += recursive_list_sum(it->f1);\n      |                                       ~~~~^~\n      |                                           |\n      |                                           vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpyravcrb8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (int i = 0; i < data_list.size(); i++) {\n        if (data_list[i].f0 == data_list[i].f0) {\n            sum += data_list[i].f0;\n        } else {\n            sum += recursive_list_sum(data_list[i].f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123360,
      "stdout": "",
      "stderr": "/tmp/tmpwh5llnvw.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpwh5llnvw.cpp:21:52: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpwh5llnvw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _TrivialValueTypes = false]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:134:15:   required from \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:289:37:   required from \u2018_ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator, std::allocator<_Tp>&) [with _InputIterator = const Union_long_std_",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for(auto data : data_list) {\n        if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123360,
      "stdout": "",
      "stderr": "/tmp/tmpa5vz38rn.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpa5vz38rn.cpp:17:21: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for(auto data : data_list) {\n      |                     ^~~~~~~~~\n/tmp/tmpa5vz38rn.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpa5vz38rn.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpa5vz38rn.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpa5vz38rn.cpp:62:38: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if(data == std::vector\n      |                  ~                   ^\n      |                                      )\n   63 | }\n      | ~                                     \n/tmp/tmpa5vz38rn.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpa5vz38rn.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmpa5vz38rn.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpa5vz38rn.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmpa5vz38rn.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123362,
      "stdout": "",
      "stderr": "/tmp/tmp1fkmowiu.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp1fkmowiu.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmp1fkmowiu.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1fkmowiu.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp1fkmowiu.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmp1fkmowiu.cpp:62:39: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (data == std::vector\n      |                   ~                   ^\n      |                                       )\n   63 | }\n      | ~                                      \n/tmp/tmp1fkmowiu.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmp1fkmowiu.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmp1fkmowiu.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmp1fkmowiu.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmp1fkmowiu.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            result += data.f0;\n        } else if (data == data.f1) {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123360,
      "stdout": "",
      "stderr": "/tmp/tmpmrgnoxaz.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpmrgnoxaz.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpmrgnoxaz.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmrgnoxaz.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpmrgnoxaz.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpmrgnoxaz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (int i = 0; i < data_list.size(); i++) {\n        if (data_list[i] == 0) {\n            result += data_list[i].f0;\n        } else {\n            result += recursive_list_sum(data_list[i].f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123362,
      "stdout": "",
      "stderr": "/tmp/tmpi5hza1az.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpi5hza1az.cpp:21:55: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpi5hza1az.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _TrivialValueTypes = false]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:134:15:   required from \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:289:37:   required from \u2018_ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator, std::allocator<_Tp>&) [with _InputIterator = const Union_long_s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto &data : data_list) {\n        if (data == data.f0) {\n            result += data.f0;\n        } else {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123360,
      "stdout": "",
      "stderr": "/tmp/tmpf2d6kep2.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpf2d6kep2.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpf2d6kep2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _TrivialValueTypes = false]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:134:15:   required from \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:289:37:   required from \u2018_ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator, std",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto i : data_list) {\n        if (i == std::vector<long>()) {\n            continue;\n        } else if (i == long()) {\n            sum += i;\n        } else {\n            sum += recursive_list_sum(i);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123362,
      "stdout": "",
      "stderr": "/tmp/tmp4gf9gcr0.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp4gf9gcr0.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto i : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmp4gf9gcr0.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4gf9gcr0.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp4gf9gcr0.cpp:21:17: error: no match for \u2018operator+=\u2019 (operand types are \u2018long int\u2019 and \u2018Union_long_std_vector_long_\u2019)\n   21 |             sum += i;\n      |             ~~~~^~~~\n/tmp/tmp4gf9gcr0.cpp:23:39: error: could not convert \u2018i\u2019 from \u2018Union_long_std_vector_long_\u2019 to \u2018std::vector<Union_long_std_vector_long_>\u2019\n   23 |             sum += recursive_list_sum(i);\n      |                                       ^\n      |                                       |\n      |                                       Union_long_std_vector_long_\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp4gf9gcr0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void st",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for(int i = 0; i < data_list.size(); i++) {\n        if(data_list[i] == data_list[i].f0) {\n            result += data_list[i].f0;\n        } else {\n            result += recursive_list_sum(data_list[i].f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123362,
      "stdout": "",
      "stderr": "/tmp/tmpqjps03me.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpqjps03me.cpp:21:55: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpqjps03me.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _TrivialValueTypes = false]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:134:15:   required from \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:289:37:   required from \u2018_ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator, std::allocator<_Tp>&) [with _InputIterator = const Union_long_s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            sum += data.f0;\n        } else {\n            sum += recursive_list_sum(data.f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmpaschg4y4.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpaschg4y4.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpaschg4y4.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpaschg4y4.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpaschg4y4.cpp:21:44: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(data.f1);\n      |                                       ~~~~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpaschg4y4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (int i = 0; i < data_list.size(); i++) {\n        if (data_list[i] == data_list[i].f0) {\n            result += data_list[i].f0;\n        } else if (data_list[i] == data_list[i].f1) {\n            result += recursive_list_sum(data_list[i].f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmp_6f3otbu.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp_6f3otbu.cpp:21:55: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp_6f3otbu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmpvdmrvjvl.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpvdmrvjvl.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpvdmrvjvl.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvdmrvjvl.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpvdmrvjvl.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvdmrvjvl.cpp:62:39: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (data == std::vector\n      |                   ~                   ^\n      |                                       )\n   63 | }\n      | ~                                      \n/tmp/tmpvdmrvjvl.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvdmrvjvl.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmpvdmrvjvl.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpvdmrvjvl.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmpvdmrvjvl.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            result += data.f0;\n        } else {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmp_mzt7khn.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp_mzt7khn.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmp_mzt7khn.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_mzt7khn.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp_mzt7khn.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp_mzt7khn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto &data : data_list) {\n        if (data == data.f0) {\n            result += data.f0;\n        } else {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123360,
      "stdout": "",
      "stderr": "/tmp/tmpf2d6kep2.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpf2d6kep2.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpf2d6kep2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _TrivialValueTypes = false]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:134:15:   required from \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:289:37:   required from \u2018_ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator, std",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto &data : data_list) {\n        if (data == data.f0) {\n            sum += data.f0;\n        } else if (data == data.f1) {\n            sum += recursive_list_sum(data.f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123360,
      "stdout": "",
      "stderr": "/tmp/tmpbiw_0y9c.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpbiw_0y9c.cpp:21:44: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(data.f1);\n      |                                       ~~~~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpbiw_0y9c.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _TrivialValueTypes = false]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:134:15:   required from \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:289:37:   required from \u2018_ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator, std::allocator<",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            sum += data.f0;\n        } else {\n            sum += recursive_list_sum(data.f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmpaschg4y4.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpaschg4y4.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpaschg4y4.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpaschg4y4.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpaschg4y4.cpp:21:44: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(data.f1);\n      |                                       ~~~~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpaschg4y4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            result += data.f0;\n        } else {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmp_mzt7khn.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp_mzt7khn.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmp_mzt7khn.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_mzt7khn.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp_mzt7khn.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp_mzt7khn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto &elem : data_list) {\n        if (elem == std::vector<long>()) {\n            continue;\n        }\n        if (elem == long()) {\n            sum += elem;\n        } else {\n            sum += recursive_list_sum(elem);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123362,
      "stdout": "",
      "stderr": "/tmp/tmpejxrigfb.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpejxrigfb.cpp:22:17: error: no match for \u2018operator+=\u2019 (operand types are \u2018long int\u2019 and \u2018Union_long_std_vector_long_\u2019)\n   22 |             sum += elem;\n      |             ~~~~^~~~~~~\n/tmp/tmpejxrigfb.cpp:24:39: error: could not convert \u2018elem\u2019 from \u2018Union_long_std_vector_long_\u2019 to \u2018std::vector<Union_long_std_vector_long_>\u2019\n   24 |             sum += recursive_list_sum(elem);\n      |                                       ^~~~\n      |                                       |\n      |                                       Union_long_std_vector_long_\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpejxrigfb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for(int i = 0; i < data_list.size(); i++) {\n        if(data_list[i].f1.size() == 0) {\n            result += data_list[i].f0;\n        } else {\n            result += recursive_list_sum(data_list[i].f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123362,
      "stdout": "",
      "stderr": "/tmp/tmpj6yiohon.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpj6yiohon.cpp:21:55: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpj6yiohon.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _TrivialValueTypes = false]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:134:15:   required from \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:289:37:   required from \u2018_ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator, std::allocator<_Tp>&) [with _InputIterator = const Union_long_s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto i : data_list) {\n        if (i == std::vector<long>()) {\n            sum += 0;\n        } else if (i == long()) {\n            sum += i.f0;\n        } else {\n            sum += recursive_list_sum(i.f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123362,
      "stdout": "",
      "stderr": "/tmp/tmp9qmi8nkm.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp9qmi8nkm.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto i : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmp9qmi8nkm.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9qmi8nkm.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp9qmi8nkm.cpp:23:41: error: could not convert \u2018i.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   23 |             sum += recursive_list_sum(i.f1);\n      |                                       ~~^~\n      |                                         |\n      |                                         vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp9qmi8nkm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123362,
      "stdout": "",
      "stderr": "/tmp/tmp1fkmowiu.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp1fkmowiu.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmp1fkmowiu.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1fkmowiu.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp1fkmowiu.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmp1fkmowiu.cpp:62:39: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (data == std::vector\n      |                   ~                   ^\n      |                                       )\n   63 | }\n      | ~                                      \n/tmp/tmp1fkmowiu.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmp1fkmowiu.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmp1fkmowiu.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmp1fkmowiu.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmp1fkmowiu.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            sum += data.f0;\n        } else {\n            sum += recursive_list_sum(data.f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmpaschg4y4.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpaschg4y4.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpaschg4y4.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpaschg4y4.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpaschg4y4.cpp:21:44: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(data.f1);\n      |                                       ~~~~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpaschg4y4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto i : data_list) {\n        if (i == std::vector<long>()) {\n            result += recursive_list_sum(i.f1);\n        } else {\n            result += i.f0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmplsnrx8pp.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmplsnrx8pp.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto i : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmplsnrx8pp.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplsnrx8pp.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmplsnrx8pp.cpp:19:44: error: could not convert \u2018i.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             result += recursive_list_sum(i.f1);\n      |                                          ~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmplsnrx8pp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/in",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto i : data_list) {\n        if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == long()) {\n            result += i.f0;\n        } else {\n            result += recursive_list_sum(i.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123360,
      "stdout": "",
      "stderr": "/tmp/tmpol2q5601.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpol2q5601.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto i : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmpol2q5601.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpol2q5601.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpol2q5601.cpp:23:44: error: could not convert \u2018i.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   23 |             result += recursive_list_sum(i.f1);\n      |                                          ~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpol2q5601.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/in",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto i : data_list) {\n        if (i == std::vector<long>()) {\n            result += recursive_list_sum(i.f1);\n        } else {\n            result += i.f0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmplsnrx8pp.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmplsnrx8pp.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto i : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmplsnrx8pp.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplsnrx8pp.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmplsnrx8pp.cpp:19:44: error: could not convert \u2018i.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             result += recursive_list_sum(i.f1);\n      |                                          ~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmplsnrx8pp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/in",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto i : data_list) {\n        if (i == std::vector<long>()) {\n            sum += recursive_list_sum(i.f1);\n        } else {\n            sum += i.f0;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123362,
      "stdout": "",
      "stderr": "/tmp/tmp3xz7tlbu.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp3xz7tlbu.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto i : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmp3xz7tlbu.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp3xz7tlbu.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp3xz7tlbu.cpp:19:41: error: could not convert \u2018i.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             sum += recursive_list_sum(i.f1);\n      |                                       ~~^~\n      |                                         |\n      |                                         vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp3xz7tlbu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            result += data.f0;\n        } else {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmp_mzt7khn.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp_mzt7khn.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmp_mzt7khn.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_mzt7khn.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp_mzt7khn.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp_mzt7khn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result;\n    if (data_list.size() == 0) {\n        result = 0;\n    } else {\n        std::vector<Union_long_std_vector_long_> data_list_tail = std::vector<Union_long_std_vector_long_>(data_list.begin() + 1, data_list.end());\n        if (data_list[0] == 0) {\n            result = recursive_list_sum(data_list_tail);\n        } else {\n            if (data_list[0] == 1) {\n                result = recursive_list_sum(data_list_tail);\n            } else {\n                if (data_list[0] == 2) {\n                    result = recursive_list_sum(data_list_tail);\n                } else {\n                    if (data_list[0] == 3) {\n                        result = recursive_list_sum(data_list_tail);\n                    } else {\n                        if (data_list[0] == 4) {\n                            result = recursive_list_sum(data_list_tail);\n                        } else {\n                            if (data_list[0] == 5) {\n                                result = recursive_list_sum(data_list_tail);\n                            } else {\n                                if (data_list[0] == 6) {\n                                    result = recursive_list_sum(data_list_tail);\n                                } else {\n                                    if (data_list[0] == 7) {\n                                        result = recursive_list_sum(data_list_tail);\n                                    } else {\n                                        if (data_list[0] == 8) {\n                                            result = recursive_list_sum(data_list_tail);\n                                        } else {\n                                            if (data_list[0] == 9) {\n                                                result = recursive_list_sum(data_list_tail);\n                                            } else {\n                                                if (data_list[0] == 10) {\n                                                    result = recursive_list_sum(data_list_tail);\n                                                } else {\n                                                    if (data_list[0] == 11) {\n                                \n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123362,
      "stdout": "",
      "stderr": "/tmp/tmpmf307r2n.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpmf307r2n.cpp:57:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmpmf307r2n.cpp:62:1: error: expected \u2018}\u2019 at end of input\n   62 | }\n      | ^\n/tmp/tmpmf307r2n.cpp:53:56: note: to match this \u2018{\u2019\n   53 |                                                 } else {\n      |                                                        ^\n/tmp/tmpmf307r2n.cpp:62:1: error: expected \u2018}\u2019 at end of input\n   62 | }\n      | ^\n/tmp/tmpmf307r2n.cpp:50:52: note: to match this \u2018{\u2019\n   50 |                                             } else {\n      |                                                    ^\n/tmp/tmpmf307r2n.cpp:62:1: error: expected \u2018}\u2019 at end of input\n   62 | }\n      | ^\n/tmp/tmpmf307r2n.cpp:47:48: note: to match this \u2018{\u2019\n   47 |                                         } else {\n      |                                                ^\n/tmp/tmpmf307r2n.cpp:62:1: error: expected \u2018}\u2019 at end of input\n   62 | }\n      | ^\n/tmp/tmpmf307r2n.cpp:44:44: note: to match this \u2018{\u2019\n   44 |                                     } else {\n      |                                            ^\n/tmp/tmpmf307r2n.cpp:62:1: error: expected \u2018}\u2019 at end of input\n   62 | }\n      | ^\n/tmp/tmpmf307r2n.cpp:41:40: note: to match this \u2018{\u2019\n   41 |                                 } else {\n      |                                        ^\n/tmp/tmpmf307r2n.cpp:62:1: error: expected \u2018}\u2019 at end of input\n   62 | }\n      | ^\n/tmp/tmpmf307r2n.cpp:38:36: note: to match this \u2018{\u2019\n   38 |                             } else {\n      |                                    ^\n/tmp/tmpmf307r2n.cpp:62:1: error: expected \u2018}\u2019 at end of input\n   62 | }\n      | ^\n/tmp/tmpmf307r2n.cpp:35:32: note: to match this \u2018{\u2019\n   35 |                         } else {\n      |                                ^\n/tmp/tmpmf307r2n.cpp:62:1: error: expected \u2018}\u2019 at ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto &data : data_list) {\n        if (data == data.f0) {\n            result += data.f0;\n        } else if (data == data.f1) {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123362,
      "stdout": "",
      "stderr": "/tmp/tmp947a03pm.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp947a03pm.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp947a03pm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _TrivialValueTypes = false]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:134:15:   required from \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:289:37:   required from \u2018_ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator, std",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto i : data_list) {\n        if (i == std::vector<long>()) {\n            result += recursive_list_sum(i.f1);\n        } else {\n            result += i.f0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmplsnrx8pp.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmplsnrx8pp.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto i : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmplsnrx8pp.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplsnrx8pp.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmplsnrx8pp.cpp:19:44: error: could not convert \u2018i.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             result += recursive_list_sum(i.f1);\n      |                                          ~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmplsnrx8pp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/in",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            sum += data.f0;\n        } else {\n            sum += recursive_list_sum(data.f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmpaschg4y4.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpaschg4y4.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpaschg4y4.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpaschg4y4.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpaschg4y4.cpp:21:44: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(data.f1);\n      |                                       ~~~~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpaschg4y4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for(int i = 0; i < data_list.size(); i++) {\n        if(data_list[i] == std::vector<long>()) {\n            result += recursive_list_sum(data_list[i].f1);\n        } else {\n            result += data_list[i].f0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123362,
      "stdout": "",
      "stderr": "/tmp/tmpq1a2rri_.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpq1a2rri_.cpp:19:55: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             result += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpq1a2rri_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _TrivialValueTypes = false]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:134:15:   required from \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:289:37:   required from \u2018_ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator, std::allocator<_Tp>&) [with _InputIterator = const Union_long_s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (int i = 0; i < data_list.size(); i++) {\n        if (data_list[i].f0 == 0) {\n            result += recursive_list_sum(data_list[i].f1);\n        } else {\n            result += data_list[i].f0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmpnz6rd_ec.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpnz6rd_ec.cpp:19:55: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             result += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpnz6rd_ec.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long x = 0;\n    for (auto i : data_list) {\n        if (i == x) {\n            x += i.f0;\n        } else {\n            x += recursive_list_sum(i.f1);\n        }\n    }\n    return x;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmp_degig4l.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp_degig4l.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto i : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmp_degig4l.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_degig4l.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp_degig4l.cpp:21:39: error: could not convert \u2018i.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             x += recursive_list_sum(i.f1);\n      |                                     ~~^~\n      |                                       |\n      |                                       vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp_degig4l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (int i = 0; i < data_list.size(); i++) {\n        if (data_list[i].f0 == 0) {\n            result += recursive_list_sum(data_list[i].f1);\n        } else {\n            result += data_list[i].f0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmpnz6rd_ec.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpnz6rd_ec.cpp:19:55: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             result += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpnz6rd_ec.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmpvdmrvjvl.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpvdmrvjvl.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpvdmrvjvl.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvdmrvjvl.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpvdmrvjvl.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvdmrvjvl.cpp:62:39: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (data == std::vector\n      |                   ~                   ^\n      |                                       )\n   63 | }\n      | ~                                      \n/tmp/tmpvdmrvjvl.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvdmrvjvl.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmpvdmrvjvl.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpvdmrvjvl.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmpvdmrvjvl.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (int i = 0; i < data_list.size(); i++) {\n        if (data_list[i] == data_list[i].f0) {\n            result += data_list[i].f0;\n        } else {\n            result += recursive_list_sum(data_list[i].f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmpjf4hd8kw.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpjf4hd8kw.cpp:21:55: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpjf4hd8kw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            result += data.f0;\n        } else if (data == data.f1) {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123360,
      "stdout": "",
      "stderr": "/tmp/tmpmrgnoxaz.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpmrgnoxaz.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpmrgnoxaz.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmrgnoxaz.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpmrgnoxaz.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpmrgnoxaz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for(int i = 0; i < data_list.size(); i++) {\n        if(data_list[i] == data_list[i].f0) {\n            sum += data_list[i].f0;\n        } else {\n            sum += recursive_list_sum(data_list[i].f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123362,
      "stdout": "",
      "stderr": "/tmp/tmpqlbcg9xy.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpqlbcg9xy.cpp:21:52: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpqlbcg9xy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _TrivialValueTypes = false]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:134:15:   required from \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:289:37:   required from \u2018_ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator, std::allocator<_Tp>&) [with _InputIterator = const Union_long_std_",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto &x : data_list) {\n        if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == std::\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123362,
      "stdout": "",
      "stderr": "/tmp/tmp642qqpf6.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp642qqpf6.cpp:63:1: error: expected unqualified-id before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmp642qqpf6.cpp:62:28: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (x == std::\n      |                   ~        ^\n      |                            )\n   63 | }\n      | ~                           \n/tmp/tmp642qqpf6.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmp642qqpf6.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmp642qqpf6.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmp642qqpf6.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmp642qqpf6.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto &data : data_list) {\n        if (data == data.f0) {\n            sum += data.f0;\n        } else if (data == data.f1) {\n            sum += recursive_list_sum(data.f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123360,
      "stdout": "",
      "stderr": "/tmp/tmpbiw_0y9c.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpbiw_0y9c.cpp:21:44: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(data.f1);\n      |                                       ~~~~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpbiw_0y9c.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _TrivialValueTypes = false]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:134:15:   required from \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:289:37:   required from \u2018_ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator, std::allocator<",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for(int i = 0; i < data_list.size(); i++) {\n        if(data_list[i] == std::vector<long>()) {\n            result += recursive_list_sum(data_list[i].f1);\n        } else {\n            result += data_list[i].f0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123362,
      "stdout": "",
      "stderr": "/tmp/tmpq1a2rri_.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpq1a2rri_.cpp:19:55: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             result += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpq1a2rri_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _TrivialValueTypes = false]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:134:15:   required from \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:289:37:   required from \u2018_ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator, std::allocator<_Tp>&) [with _InputIterator = const Union_long_s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            result += data.f0;\n        } else if (data == data.f1) {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123360,
      "stdout": "",
      "stderr": "/tmp/tmpmrgnoxaz.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpmrgnoxaz.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpmrgnoxaz.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmrgnoxaz.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpmrgnoxaz.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpmrgnoxaz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for(auto data : data_list) {\n        if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector<long>()) {\n            result += 0;\n        } else if(data == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123360,
      "stdout": "",
      "stderr": "/tmp/tmpa5vz38rn.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpa5vz38rn.cpp:17:21: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for(auto data : data_list) {\n      |                     ^~~~~~~~~\n/tmp/tmpa5vz38rn.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpa5vz38rn.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpa5vz38rn.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpa5vz38rn.cpp:62:38: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if(data == std::vector\n      |                  ~                   ^\n      |                                      )\n   63 | }\n      | ~                                     \n/tmp/tmpa5vz38rn.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpa5vz38rn.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmpa5vz38rn.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpa5vz38rn.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmpa5vz38rn.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            result += data.f0;\n        } else {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmp_mzt7khn.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp_mzt7khn.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmp_mzt7khn.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_mzt7khn.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp_mzt7khn.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp_mzt7khn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto data : data_list) {\n        if (data == data.f1) {\n            sum += recursive_list_sum(data.f1);\n        } else {\n            sum += data.f0;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123362,
      "stdout": "",
      "stderr": "/tmp/tmpuoakwjg2.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpuoakwjg2.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpuoakwjg2.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpuoakwjg2.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpuoakwjg2.cpp:19:44: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             sum += recursive_list_sum(data.f1);\n      |                                       ~~~~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpuoakwjg2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto &data : data_list) {\n        if (data == data.f0) {\n            result += data.f0;\n        } else if (data == data.f1) {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123362,
      "stdout": "",
      "stderr": "/tmp/tmp947a03pm.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp947a03pm.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp947a03pm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _TrivialValueTypes = false]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:134:15:   required from \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:289:37:   required from \u2018_ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator, std",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for(auto data : data_list) {\n        if(data == std::vector<long>()) {\n            sum += 0;\n        } else if(data == long()) {\n            sum += data;\n        } else {\n            sum += recursive_list_sum(data);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123362,
      "stdout": "",
      "stderr": "/tmp/tmp8y_kq8xa.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp8y_kq8xa.cpp:17:21: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for(auto data : data_list) {\n      |                     ^~~~~~~~~\n/tmp/tmp8y_kq8xa.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8y_kq8xa.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp8y_kq8xa.cpp:21:17: error: no match for \u2018operator+=\u2019 (operand types are \u2018long int\u2019 and \u2018Union_long_std_vector_long_\u2019)\n   21 |             sum += data;\n      |             ~~~~^~~~~~~\n/tmp/tmp8y_kq8xa.cpp:23:39: error: could not convert \u2018data\u2019 from \u2018Union_long_std_vector_long_\u2019 to \u2018std::vector<Union_long_std_vector_long_>\u2019\n   23 |             sum += recursive_list_sum(data);\n      |                                       ^~~~\n      |                                       |\n      |                                       Union_long_std_vector_long_\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp8y_kq8xa.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instan",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            result += data.f0;\n        } else {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmp_mzt7khn.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp_mzt7khn.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmp_mzt7khn.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_mzt7khn.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp_mzt7khn.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp_mzt7khn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == data.f1) {\n            result += recursive_list_sum(data.f1);\n        } else {\n            result += data.f0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123362,
      "stdout": "",
      "stderr": "/tmp/tmp6aj_l5g_.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp6aj_l5g_.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmp6aj_l5g_.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6aj_l5g_.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp6aj_l5g_.cpp:19:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp6aj_l5g_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for(auto i : data_list) {\n        if(i == std::vector<long>()) {\n            result += recursive_list_sum(i.f1);\n        } else {\n            result += i.f0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123362,
      "stdout": "",
      "stderr": "/tmp/tmpt1_opn5y.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpt1_opn5y.cpp:17:18: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for(auto i : data_list) {\n      |                  ^~~~~~~~~\n/tmp/tmpt1_opn5y.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpt1_opn5y.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpt1_opn5y.cpp:19:44: error: could not convert \u2018i.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             result += recursive_list_sum(i.f1);\n      |                                          ~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpt1_opn5y.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/incl",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for(int i = 0; i < data_list.size(); i++) {\n        if(data_list[i].f0 == data_list[i].f1) {\n            result += data_list[i].f0;\n        } else {\n            result += recursive_list_sum(data_list[i].f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123366,
      "stdout": "",
      "stderr": "/tmp/tmplyal_2zv.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmplyal_2zv.cpp:18:28: error: no match for \u2018operator==\u2019 (operand types are \u2018long int\u2019 and \u2018std::vector<long int>\u2019)\n   18 |         if(data_list[i].f0 == data_list[i].f1) {\n      |                            ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n                 from /tmp/tmplyal_2zv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5: note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>& __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5: note:   template argument deduction/substitution failed:\n/tmp/tmplyal_2zv.cpp:18:44: note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019 and \u2018long int\u2019\n   18 |         if(data_list[i].f0 == data_list[i].f1) {\n      |                                            ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n                 from /tmp/tmplyal_2zv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1099:5: note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc> bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1099:5: note:   template argument deduction/substituti",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long x = 0;\n    for(int i = 0; i < data_list.size(); i++){\n        if(data_list[i] == x){\n            return x;\n        }\n        else{\n            return recursive_list_sum(data_list[i].f1);\n        }\n    }\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123362,
      "stdout": "",
      "stderr": "/tmp/tmp_m45v2b1.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp_m45v2b1.cpp:22:52: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   22 |             return recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp_m45v2b1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for(auto x : data_list) {\n        if(x == std::vector<long>()) {\n            sum += recursive_list_sum(x.f1);\n        } else {\n            sum += x.f0;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123362,
      "stdout": "",
      "stderr": "/tmp/tmpd6xnhidd.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpd6xnhidd.cpp:17:18: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for(auto x : data_list) {\n      |                  ^~~~~~~~~\n/tmp/tmpd6xnhidd.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpd6xnhidd.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpd6xnhidd.cpp:19:41: error: could not convert \u2018x.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             sum += recursive_list_sum(x.f1);\n      |                                       ~~^~\n      |                                         |\n      |                                         vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpd6xnhidd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            sum += data.f0;\n        } else {\n            sum += recursive_list_sum(data.f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmpaschg4y4.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpaschg4y4.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpaschg4y4.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpaschg4y4.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpaschg4y4.cpp:21:44: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(data.f1);\n      |                                       ~~~~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpaschg4y4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto i : data_list) {\n        if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == long()) {\n            result += i;\n        } else {\n            result += recursive_list_sum(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmp933j9e2w.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp933j9e2w.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto i : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmp933j9e2w.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp933j9e2w.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp933j9e2w.cpp:21:20: error: no match for \u2018operator+=\u2019 (operand types are \u2018long int\u2019 and \u2018Union_long_std_vector_long_\u2019)\n   21 |             result += i;\n      |             ~~~~~~~^~~~\n/tmp/tmp933j9e2w.cpp:23:42: error: could not convert \u2018i\u2019 from \u2018Union_long_std_vector_long_\u2019 to \u2018std::vector<Union_long_std_vector_long_>\u2019\n   23 |             result += recursive_list_sum(i);\n      |                                          ^\n      |                                          |\n      |                                          Union_long_std_vector_long_\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp933j9e2w.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instant",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            result += data.f0;\n        } else if (data == data.f1) {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123360,
      "stdout": "",
      "stderr": "/tmp/tmpmrgnoxaz.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpmrgnoxaz.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpmrgnoxaz.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmrgnoxaz.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpmrgnoxaz.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpmrgnoxaz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto i : data_list) {\n        if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == long()) {\n            result += i;\n        } else {\n            result += recursive_list_sum(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmp933j9e2w.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp933j9e2w.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto i : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmp933j9e2w.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp933j9e2w.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp933j9e2w.cpp:21:20: error: no match for \u2018operator+=\u2019 (operand types are \u2018long int\u2019 and \u2018Union_long_std_vector_long_\u2019)\n   21 |             result += i;\n      |             ~~~~~~~^~~~\n/tmp/tmp933j9e2w.cpp:23:42: error: could not convert \u2018i\u2019 from \u2018Union_long_std_vector_long_\u2019 to \u2018std::vector<Union_long_std_vector_long_>\u2019\n   23 |             result += recursive_list_sum(i);\n      |                                          ^\n      |                                          |\n      |                                          Union_long_std_vector_long_\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp933j9e2w.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instant",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for(auto data : data_list) {\n        if(data == std::vector<long>()) {\n            continue;\n        }\n        if(data == long()) {\n            sum += data;\n        }\n        if(data != std::vector<long>() && data != long()) {\n            sum += recursive_list_sum(data);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmpm68ilt40.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpm68ilt40.cpp:17:21: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for(auto data : data_list) {\n      |                     ^~~~~~~~~\n/tmp/tmpm68ilt40.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpm68ilt40.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpm68ilt40.cpp:22:17: error: no match for \u2018operator+=\u2019 (operand types are \u2018long int\u2019 and \u2018Union_long_std_vector_long_\u2019)\n   22 |             sum += data;\n      |             ~~~~^~~~~~~\n/tmp/tmpm68ilt40.cpp:24:17: error: no match for \u2018operator!=\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::vector<long int>\u2019)\n   24 |         if(data != std::vector<long>() && data != long()) {\n      |            ~~~~ ^~      ~~~~~~~~~~~~~~\n      |            |            |\n      |            |            std::vector<long int>\n      |            Union_long_std_vector_long_\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n                 from /tmp/tmpm68ilt40.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1037:5: note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator!=(const std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (int i = 0; i < data_list.size(); i++) {\n        if (data_list[i] == data_list[i].f0) {\n            result += data_list[i].f0;\n        } else {\n            result += recursive_list_sum(data_list[i].f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmpjf4hd8kw.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpjf4hd8kw.cpp:21:55: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpjf4hd8kw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            sum += data.f0;\n        } else {\n            sum += recursive_list_sum(data.f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmpaschg4y4.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpaschg4y4.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpaschg4y4.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpaschg4y4.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpaschg4y4.cpp:21:44: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(data.f1);\n      |                                       ~~~~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpaschg4y4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto i : data_list) {\n        if (i == std::vector<long>()) {\n            continue;\n        }\n        if (i == long()) {\n            result += i;\n        } else {\n            result += recursive_list_sum(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123364,
      "stdout": "",
      "stderr": "/tmp/tmpdq0rbl8u.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpdq0rbl8u.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto i : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmpdq0rbl8u.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdq0rbl8u.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpdq0rbl8u.cpp:22:20: error: no match for \u2018operator+=\u2019 (operand types are \u2018long int\u2019 and \u2018Union_long_std_vector_long_\u2019)\n   22 |             result += i;\n      |             ~~~~~~~^~~~\n/tmp/tmpdq0rbl8u.cpp:24:42: error: could not convert \u2018i\u2019 from \u2018Union_long_std_vector_long_\u2019 to \u2018std::vector<Union_long_std_vector_long_>\u2019\n   24 |             result += recursive_list_sum(i);\n      |                                          ^\n      |                                          |\n      |                                          Union_long_std_vector_long_\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpdq0rbl8u.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instant",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto i : data_list) {\n        if (i == std::vector<long>()) {\n            sum += 0;\n        } else if (i == long()) {\n            sum += i.f0;\n        } else {\n            sum += recursive_list_sum(i.f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123362,
      "stdout": "",
      "stderr": "/tmp/tmp9qmi8nkm.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp9qmi8nkm.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto i : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmp9qmi8nkm.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9qmi8nkm.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp9qmi8nkm.cpp:23:41: error: could not convert \u2018i.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   23 |             sum += recursive_list_sum(i.f1);\n      |                                       ~~^~\n      |                                         |\n      |                                         vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp9qmi8nkm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>{}) {\n            continue;\n        } else if (data == std::vector<long>{1, 2, 3}) {\n            sum += 6;\n        } else if (data == std::vector<long>{4, 5, 6}) {\n            sum += 15;\n        } else if (data == std::vector<long>{7, 8, 9}) {\n            sum += 24;\n        } else if (data == std::vector<long>{10, 11, 12}) {\n            sum += 33;\n        } else if (data == std::vector<long>{13, 14, 15}) {\n            sum += 42;\n        } else if (data == std::vector<long>{16, 17, 18}) {\n            sum += 51;\n        } else if (data == std::vector<long>{19, 20, 21}) {\n            sum += 60;\n        } else if (data == std::vector<long>{22, 23, 24}) {\n            sum += 69;\n        } else if (data == std::vector<long>{25, 26, 27}) {\n            sum += 78;\n        } else if (data == std::vector<long>{28, 29, 30}) {\n            sum += 87;\n        } else if (data == std::vector<long>{31, 32, 33}) {\n            sum += 96;\n        } else if (data == std::vector<long>{34, 35, 36}) {\n            sum += 105;\n        } else if (data == std::vector<long>{37, 38, 39}) {\n            sum += 114;\n        } else if (data == std::vector<long>{40, 41, 42}) {\n            sum += 123;\n        } else if (data == std::vector<long>{43, 44, 45}) {\n            sum += 132;\n        } else if (data == std::vector<long>{46, 47, 48}) {\n            sum += 141;\n        } else if (data == std::vector<long>{49, 50, 51}) {\n            sum +=\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123365,
      "stdout": "",
      "stderr": "/tmp/tmpd067f055.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpd067f055.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpd067f055.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpd067f055.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpd067f055.cpp:54:1: error: expected primary-expression before \u2018}\u2019 token\n   54 | }\n      | ^\n/tmp/tmpd067f055.cpp:55:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   55 | int main() {\n      |            ^\n/tmp/tmpd067f055.cpp:60:1: error: expected \u2018}\u2019 at end of input\n   60 | }\n      | ^\n/tmp/tmpd067f055.cpp:17:33: note: to match this \u2018{\u2019\n   17 |     for (auto data : data_list) {\n      |                                 ^\n/tmp/tmpd067f055.cpp:60:1: error: expected \u2018}\u2019 at end of input\n   60 | }\n      | ^\n/tmp/tmpd067f055.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmpd067f055.cpp:60:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   60 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto i : data_list) {\n        if (i == std::vector<long>()) {\n            sum += 0;\n        } else if (i == long()) {\n            sum += i.f0;\n        } else {\n            sum += recursive_list_sum(i.f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123362,
      "stdout": "",
      "stderr": "/tmp/tmp9qmi8nkm.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp9qmi8nkm.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto i : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmp9qmi8nkm.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9qmi8nkm.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp9qmi8nkm.cpp:23:41: error: could not convert \u2018i.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   23 |             sum += recursive_list_sum(i.f1);\n      |                                       ~~^~\n      |                                         |\n      |                                         vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp9qmi8nkm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for(auto data : data_list) {\n        if(data == (std::vector<long>) {}) {\n            result = result + 0;\n        } else if(data == (std::vector<long>) {1, 2, 3}) {\n            result = result + 6;\n        } else if(data == (std::vector<long>) {4, 5, 6}) {\n            result = result + 15;\n        } else if(data == (std::vector<long>) {7, 8, 9}) {\n            result = result + 24;\n        } else if(data == (std::vector<long>) {10, 11, 12}) {\n            result = result + 33;\n        } else if(data == (std::vector<long>) {13, 14, 15}) {\n            result = result + 42;\n        } else if(data == (std::vector<long>) {16, 17, 18}) {\n            result = result + 51;\n        } else if(data == (std::vector<long>) {19, 20, 21}) {\n            result = result + 60;\n        } else if(data == (std::vector<long>) {22, 23, 24}) {\n            result = result + 69;\n        } else if(data == (std::vector<long>) {25, 26, 27}) {\n            result = result + 78;\n        } else if(data == (std::vector<long>) {28, 29, 30}) {\n            result = result + 87;\n        } else if(data == (std::vector<long>) {31, 32, 33}) {\n            result = result + 96;\n        } else if(data == (std::vector<long>) {34, 35, 36}) {\n            result = result + 105;\n        } else if(data == (std::vector<long>) {37, 38, 39}) {\n            result = result + 114;\n        } else if(data == (std::vector<long>) {40, 41, 42}) {\n            result = result + 123;\n        } else if(data == (std::vector<long>) {43, 44, 45}) {\n            result = result + 132;\n        } else\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123364,
      "stdout": "",
      "stderr": "/tmp/tmp6kee3w9m.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp6kee3w9m.cpp:17:21: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for(auto data : data_list) {\n      |                     ^~~~~~~~~\n/tmp/tmp6kee3w9m.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6kee3w9m.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp6kee3w9m.cpp:51:1: error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n      | ^\n/tmp/tmp6kee3w9m.cpp:52:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   52 | int main() {\n      |            ^\n/tmp/tmp6kee3w9m.cpp:57:1: error: expected \u2018}\u2019 at end of input\n   57 | }\n      | ^\n/tmp/tmp6kee3w9m.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmp6kee3w9m.cpp:57:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   57 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for(auto &data : data_list) {\n        if(data == data.f0) {\n            result += data.f0;\n        } else if(data == data.f1) {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123365,
      "stdout": "",
      "stderr": "/tmp/tmpn02_5zoo.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpn02_5zoo.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpn02_5zoo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmpvdmrvjvl.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpvdmrvjvl.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpvdmrvjvl.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvdmrvjvl.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpvdmrvjvl.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvdmrvjvl.cpp:62:39: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (data == std::vector\n      |                   ~                   ^\n      |                                       )\n   63 | }\n      | ~                                      \n/tmp/tmpvdmrvjvl.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvdmrvjvl.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmpvdmrvjvl.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpvdmrvjvl.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmpvdmrvjvl.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for(auto data : data_list) {\n        if(data == data.f0) {\n            result += data.f0;\n        } else if(data == data.f1) {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123365,
      "stdout": "",
      "stderr": "/tmp/tmpeid1qus3.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpeid1qus3.cpp:17:21: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for(auto data : data_list) {\n      |                     ^~~~~~~~~\n/tmp/tmpeid1qus3.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpeid1qus3.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpeid1qus3.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpeid1qus3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/g",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto x : data_list) {\n        if (x == std::vector<long>()) {\n            sum += recursive_list_sum(x.f1);\n        } else {\n            sum += x.f0;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123365,
      "stdout": "",
      "stderr": "/tmp/tmpc78t7ory.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpc78t7ory.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto x : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmpc78t7ory.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpc78t7ory.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpc78t7ory.cpp:19:41: error: could not convert \u2018x.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             sum += recursive_list_sum(x.f1);\n      |                                       ~~^~\n      |                                         |\n      |                                         vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpc78t7ory.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto i : data_list) {\n        if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == long()) {\n            result += i.f0;\n        } else {\n            result += recursive_list_sum(i.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123360,
      "stdout": "",
      "stderr": "/tmp/tmpol2q5601.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpol2q5601.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto i : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmpol2q5601.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpol2q5601.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpol2q5601.cpp:23:44: error: could not convert \u2018i.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   23 |             result += recursive_list_sum(i.f1);\n      |                                          ~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpol2q5601.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/in",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long ret = 0;\n    for (auto i : data_list) {\n        if (i == ret) {\n            ret += i.f0;\n        } else {\n            ret += recursive_list_sum(i.f1);\n        }\n    }\n    return ret;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123365,
      "stdout": "",
      "stderr": "/tmp/tmpg7_ocryx.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpg7_ocryx.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto i : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmpg7_ocryx.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpg7_ocryx.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpg7_ocryx.cpp:21:41: error: could not convert \u2018i.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             ret += recursive_list_sum(i.f1);\n      |                                       ~~^~\n      |                                         |\n      |                                         vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpg7_ocryx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto i : data_list) {\n        if (i == std::vector<long>()) {\n            result += recursive_list_sum(i.f1);\n        } else {\n            result += i.f0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmplsnrx8pp.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmplsnrx8pp.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto i : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmplsnrx8pp.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplsnrx8pp.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmplsnrx8pp.cpp:19:44: error: could not convert \u2018i.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             result += recursive_list_sum(i.f1);\n      |                                          ~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmplsnrx8pp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/in",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto i : data_list) {\n        if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == long()) {\n            result += i;\n        } else {\n            result += recursive_list_sum(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmp933j9e2w.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp933j9e2w.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto i : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmp933j9e2w.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp933j9e2w.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp933j9e2w.cpp:21:20: error: no match for \u2018operator+=\u2019 (operand types are \u2018long int\u2019 and \u2018Union_long_std_vector_long_\u2019)\n   21 |             result += i;\n      |             ~~~~~~~^~~~\n/tmp/tmp933j9e2w.cpp:23:42: error: could not convert \u2018i\u2019 from \u2018Union_long_std_vector_long_\u2019 to \u2018std::vector<Union_long_std_vector_long_>\u2019\n   23 |             result += recursive_list_sum(i);\n      |                                          ^\n      |                                          |\n      |                                          Union_long_std_vector_long_\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp933j9e2w.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instant",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto &elem : data_list) {\n        if (elem == std::vector<long>()) {\n            sum += recursive_list_sum(elem.f1);\n        } else {\n            sum += elem.f0;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123365,
      "stdout": "",
      "stderr": "/tmp/tmp9vuba3gc.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp9vuba3gc.cpp:19:44: error: could not convert \u2018elem.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             sum += recursive_list_sum(elem.f1);\n      |                                       ~~~~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp9vuba3gc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto data : data_list) {\n        if (data.f0 == 0) {\n            sum += recursive_list_sum(data.f1);\n        } else {\n            sum += data.f0;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123365,
      "stdout": "",
      "stderr": "/tmp/tmp39y3httt.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp39y3httt.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmp39y3httt.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp39y3httt.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp39y3httt.cpp:19:44: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             sum += recursive_list_sum(data.f1);\n      |                                       ~~~~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp39y3httt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            result += data.f0;\n        } else {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmp_mzt7khn.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp_mzt7khn.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmp_mzt7khn.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_mzt7khn.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp_mzt7khn.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp_mzt7khn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto i : data_list) {\n        if (i == std::vector<long>()) {\n            result += recursive_list_sum(i.f1);\n        } else {\n            result += i.f0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmplsnrx8pp.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmplsnrx8pp.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto i : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmplsnrx8pp.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplsnrx8pp.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmplsnrx8pp.cpp:19:44: error: could not convert \u2018i.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             result += recursive_list_sum(i.f1);\n      |                                          ~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmplsnrx8pp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/in",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123362,
      "stdout": "",
      "stderr": "/tmp/tmp1fkmowiu.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp1fkmowiu.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmp1fkmowiu.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1fkmowiu.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp1fkmowiu.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmp1fkmowiu.cpp:62:39: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (data == std::vector\n      |                   ~                   ^\n      |                                       )\n   63 | }\n      | ~                                      \n/tmp/tmp1fkmowiu.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmp1fkmowiu.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmp1fkmowiu.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmp1fkmowiu.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmp1fkmowiu.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto &data : data_list) {\n        if (data == data.f0) {\n            sum += data.f0;\n        } else {\n            sum += recursive_list_sum(data.f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123365,
      "stdout": "",
      "stderr": "/tmp/tmpie_5ywk9.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpie_5ywk9.cpp:21:44: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(data.f1);\n      |                                       ~~~~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpie_5ywk9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _TrivialValueTypes = false]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:134:15:   required from \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:289:37:   required from \u2018_ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator, std::allocator<",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for(auto data : data_list) {\n        if(data == data.f0) {\n            result += data.f0;\n        } else if(data == data.f1) {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123365,
      "stdout": "",
      "stderr": "/tmp/tmpeid1qus3.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpeid1qus3.cpp:17:21: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for(auto data : data_list) {\n      |                     ^~~~~~~~~\n/tmp/tmpeid1qus3.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpeid1qus3.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpeid1qus3.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpeid1qus3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/g",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            continue;\n        }\n        if (data == long()) {\n            result += data;\n        }\n        if (data == std::vector<long>()) {\n            result += recursive_list_sum(data);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123365,
      "stdout": "",
      "stderr": "/tmp/tmpghshim4k.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpghshim4k.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpghshim4k.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpghshim4k.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpghshim4k.cpp:22:20: error: no match for \u2018operator+=\u2019 (operand types are \u2018long int\u2019 and \u2018Union_long_std_vector_long_\u2019)\n   22 |             result += data;\n      |             ~~~~~~~^~~~~~~\n/tmp/tmpghshim4k.cpp:25:42: error: could not convert \u2018data\u2019 from \u2018Union_long_std_vector_long_\u2019 to \u2018std::vector<Union_long_std_vector_long_>\u2019\n   25 |             result += recursive_list_sum(data);\n      |                                          ^~~~\n      |                                          |\n      |                                          Union_long_std_vector_long_\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpghshim4k.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_co",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for(auto data : data_list) {\n        if(data == data.f0) {\n            sum += data.f0;\n        } else if(data == data.f1) {\n            sum += recursive_list_sum(data.f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmp9tb7thjq.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp9tb7thjq.cpp:17:21: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for(auto data : data_list) {\n      |                     ^~~~~~~~~\n/tmp/tmp9tb7thjq.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9tb7thjq.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp9tb7thjq.cpp:21:44: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(data.f1);\n      |                                       ~~~~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp9tb7thjq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-sky",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for(auto i : data_list) {\n        if(i == std::vector<long>()) {\n            continue;\n        } else if(i == long()) {\n            sum += i.f0;\n        } else {\n            sum += recursive_list_sum(i.f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123365,
      "stdout": "",
      "stderr": "/tmp/tmpal8hls2s.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpal8hls2s.cpp:17:18: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for(auto i : data_list) {\n      |                  ^~~~~~~~~\n/tmp/tmpal8hls2s.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpal8hls2s.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpal8hls2s.cpp:23:41: error: could not convert \u2018i.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   23 |             sum += recursive_list_sum(i.f1);\n      |                                       ~~^~\n      |                                         |\n      |                                         vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpal8hls2s.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (int i = 0; i < data_list.size(); i++) {\n        if (data_list[i] == data_list[i].f0) {\n            sum += data_list[i].f0;\n        } else {\n            sum += recursive_list_sum(data_list[i].f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123365,
      "stdout": "",
      "stderr": "/tmp/tmp5gnqgzd4.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp5gnqgzd4.cpp:21:52: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp5gnqgzd4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            continue;\n        }\n        if (data == long()) {\n            result += data;\n        }\n        if (data == std::vector<long>()) {\n            result += recursive_list_sum(data);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123365,
      "stdout": "",
      "stderr": "/tmp/tmpghshim4k.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpghshim4k.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpghshim4k.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpghshim4k.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpghshim4k.cpp:22:20: error: no match for \u2018operator+=\u2019 (operand types are \u2018long int\u2019 and \u2018Union_long_std_vector_long_\u2019)\n   22 |             result += data;\n      |             ~~~~~~~^~~~~~~\n/tmp/tmpghshim4k.cpp:25:42: error: could not convert \u2018data\u2019 from \u2018Union_long_std_vector_long_\u2019 to \u2018std::vector<Union_long_std_vector_long_>\u2019\n   25 |             result += recursive_list_sum(data);\n      |                                          ^~~~\n      |                                          |\n      |                                          Union_long_std_vector_long_\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpghshim4k.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_co",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            sum += data.f0;\n        } else {\n            sum += recursive_list_sum(data.f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmpaschg4y4.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpaschg4y4.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpaschg4y4.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpaschg4y4.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpaschg4y4.cpp:21:44: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(data.f1);\n      |                                       ~~~~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpaschg4y4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto i : data_list) {\n        if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == long()) {\n            result += i.f0;\n        } else {\n            result += recursive_list_sum(i.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123360,
      "stdout": "",
      "stderr": "/tmp/tmpol2q5601.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpol2q5601.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto i : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmpol2q5601.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpol2q5601.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpol2q5601.cpp:23:44: error: could not convert \u2018i.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   23 |             result += recursive_list_sum(i.f1);\n      |                                          ~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpol2q5601.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/in",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (int i = 0; i < data_list.size(); i++) {\n        if (data_list[i] == data_list[i].f0) {\n            sum += data_list[i].f0;\n        } else {\n            sum += recursive_list_sum(data_list[i].f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123365,
      "stdout": "",
      "stderr": "/tmp/tmp5gnqgzd4.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp5gnqgzd4.cpp:21:52: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp5gnqgzd4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            sum += data.f0;\n        } else if (data == data.f1) {\n            sum += recursive_list_sum(data.f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmp9v8h0v8i.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp9v8h0v8i.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmp9v8h0v8i.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9v8h0v8i.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp9v8h0v8i.cpp:21:44: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(data.f1);\n      |                                       ~~~~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp9v8h0v8i.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto i : data_list) {\n        if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == long()) {\n            result += i.f0;\n        } else {\n            result += recursive_list_sum(i.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123360,
      "stdout": "",
      "stderr": "/tmp/tmpol2q5601.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpol2q5601.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto i : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmpol2q5601.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpol2q5601.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpol2q5601.cpp:23:44: error: could not convert \u2018i.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   23 |             result += recursive_list_sum(i.f1);\n      |                                          ~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpol2q5601.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/in",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123362,
      "stdout": "",
      "stderr": "/tmp/tmp1fkmowiu.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp1fkmowiu.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmp1fkmowiu.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1fkmowiu.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp1fkmowiu.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmp1fkmowiu.cpp:62:39: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (data == std::vector\n      |                   ~                   ^\n      |                                       )\n   63 | }\n      | ~                                      \n/tmp/tmp1fkmowiu.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmp1fkmowiu.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmp1fkmowiu.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmp1fkmowiu.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmp1fkmowiu.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto item : data_list) {\n        if (item == std::vector<long>()) {\n            result += 0;\n        } else if (item == std::vector<long>()) {\n            result += 0;\n        } else if (item == std::vector<long>()) {\n            result += 0;\n        } else if (item == std::vector<long>()) {\n            result += 0;\n        } else if (item == std::vector<long>()) {\n            result += 0;\n        } else if (item == std::vector<long>()) {\n            result += 0;\n        } else if (item == std::vector<long>()) {\n            result += 0;\n        } else if (item == std::vector<long>()) {\n            result += 0;\n        } else if (item == std::vector<long>()) {\n            result += 0;\n        } else if (item == std::vector<long>()) {\n            result += 0;\n        } else if (item == std::vector<long>()) {\n            result += 0;\n        } else if (item == std::vector<long>()) {\n            result += 0;\n        } else if (item == std::vector<long>()) {\n            result += 0;\n        } else if (item == std::vector<long>()) {\n            result += 0;\n        } else if (item == std::vector<long>()) {\n            result += 0;\n        } else if (item == std::vector<long>()) {\n            result += 0;\n        } else if (item == std::vector<long>()) {\n            result += 0;\n        } else if (item == std::vector<long>()) {\n            result += 0;\n        } else if (item == std::vector<long>()) {\n            result += 0;\n        } else if (item == std::vector<long>()) {\n            result += 0;\n        } else if (item == std::vector<long>()) {\n            result += 0;\n        } else if (item == std::vector<long>()) {\n            result += 0;\n        } else if (item == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123365,
      "stdout": "",
      "stderr": "/tmp/tmp_njz8dl6.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp_njz8dl6.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto item : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmp_njz8dl6.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_njz8dl6.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp_njz8dl6.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmp_njz8dl6.cpp:62:39: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (item == std::vector\n      |                   ~                   ^\n      |                                       )\n   63 | }\n      | ~                                      \n/tmp/tmp_njz8dl6.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmp_njz8dl6.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmp_njz8dl6.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmp_njz8dl6.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmp_njz8dl6.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto i : data_list) {\n        if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == long()) {\n            result += i.f0;\n        } else {\n            result += recursive_list_sum(i.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123360,
      "stdout": "",
      "stderr": "/tmp/tmpol2q5601.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpol2q5601.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto i : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmpol2q5601.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpol2q5601.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpol2q5601.cpp:23:44: error: could not convert \u2018i.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   23 |             result += recursive_list_sum(i.f1);\n      |                                          ~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpol2q5601.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/in",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for(auto data : data_list) {\n        if(data == std::vector<long>()) {\n            continue;\n        } else if(data == long()) {\n            sum += data.f0;\n        } else {\n            sum += recursive_list_sum(data.f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123365,
      "stdout": "",
      "stderr": "/tmp/tmp0zyjaxg8.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp0zyjaxg8.cpp:17:21: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for(auto data : data_list) {\n      |                     ^~~~~~~~~\n/tmp/tmp0zyjaxg8.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp0zyjaxg8.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp0zyjaxg8.cpp:23:44: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   23 |             sum += recursive_list_sum(data.f1);\n      |                                       ~~~~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp0zyjaxg8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-sky",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            result += data.f0;\n        } else {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmp_mzt7khn.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp_mzt7khn.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmp_mzt7khn.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_mzt7khn.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp_mzt7khn.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp_mzt7khn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for(auto i : data_list) {\n        if(i.f0 == i.f0) {\n            result += i.f0;\n        } else if(i.f1 == i.f1) {\n            result += recursive_list_sum(i.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123365,
      "stdout": "",
      "stderr": "/tmp/tmpg73wzxwa.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpg73wzxwa.cpp:17:18: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for(auto i : data_list) {\n      |                  ^~~~~~~~~\n/tmp/tmpg73wzxwa.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpg73wzxwa.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpg73wzxwa.cpp:21:44: error: could not convert \u2018i.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(i.f1);\n      |                                          ~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpg73wzxwa.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/incl",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            sum += data.f0;\n        } else if (data == data.f1) {\n            sum += recursive_list_sum(data.f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmp9v8h0v8i.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp9v8h0v8i.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmp9v8h0v8i.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9v8h0v8i.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp9v8h0v8i.cpp:21:44: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(data.f1);\n      |                                       ~~~~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp9v8h0v8i.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == long()) {\n            result += data;\n        } else {\n            result += recursive_list_sum(data);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123365,
      "stdout": "",
      "stderr": "/tmp/tmppud60v4f.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmppud60v4f.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmppud60v4f.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmppud60v4f.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmppud60v4f.cpp:21:20: error: no match for \u2018operator+=\u2019 (operand types are \u2018long int\u2019 and \u2018Union_long_std_vector_long_\u2019)\n   21 |             result += data;\n      |             ~~~~~~~^~~~~~~\n/tmp/tmppud60v4f.cpp:23:42: error: could not convert \u2018data\u2019 from \u2018Union_long_std_vector_long_\u2019 to \u2018std::vector<Union_long_std_vector_long_>\u2019\n   23 |             result += recursive_list_sum(data);\n      |                                          ^~~~\n      |                                          |\n      |                                          Union_long_std_vector_long_\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmppud60v4f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_co",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto x : data_list) {\n        if (x == std::vector<long>()) {\n            result += 0;\n        } else if (x == long()) {\n            result += x;\n        } else {\n            result += recursive_list_sum(x);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123365,
      "stdout": "",
      "stderr": "/tmp/tmp2nuq4yt6.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp2nuq4yt6.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto x : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmp2nuq4yt6.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2nuq4yt6.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp2nuq4yt6.cpp:21:20: error: no match for \u2018operator+=\u2019 (operand types are \u2018long int\u2019 and \u2018Union_long_std_vector_long_\u2019)\n   21 |             result += x;\n      |             ~~~~~~~^~~~\n/tmp/tmp2nuq4yt6.cpp:23:42: error: could not convert \u2018x\u2019 from \u2018Union_long_std_vector_long_\u2019 to \u2018std::vector<Union_long_std_vector_long_>\u2019\n   23 |             result += recursive_list_sum(x);\n      |                                          ^\n      |                                          |\n      |                                          Union_long_std_vector_long_\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp2nuq4yt6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instant",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for(auto data : data_list) {\n        if(data == data.f0) {\n            sum += data.f0;\n        } else if(data == data.f1) {\n            sum += recursive_list_sum(data.f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmp9tb7thjq.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp9tb7thjq.cpp:17:21: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for(auto data : data_list) {\n      |                     ^~~~~~~~~\n/tmp/tmp9tb7thjq.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9tb7thjq.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp9tb7thjq.cpp:21:44: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(data.f1);\n      |                                       ~~~~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp9tb7thjq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-sky",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            sum += data.f0;\n        } else if (data == data.f1) {\n            sum += recursive_list_sum(data.f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmp9v8h0v8i.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp9v8h0v8i.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmp9v8h0v8i.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9v8h0v8i.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp9v8h0v8i.cpp:21:44: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(data.f1);\n      |                                       ~~~~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp9v8h0v8i.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            result += data.f0;\n        } else if (data == data.f1) {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123360,
      "stdout": "",
      "stderr": "/tmp/tmpmrgnoxaz.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpmrgnoxaz.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpmrgnoxaz.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmrgnoxaz.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpmrgnoxaz.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpmrgnoxaz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for(auto data : data_list) {\n        if(data.f1 == data.f1) {\n            result += recursive_list_sum(data.f1);\n        } else {\n            result += data.f0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123365,
      "stdout": "",
      "stderr": "/tmp/tmpd9dw4bfe.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpd9dw4bfe.cpp:17:21: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for(auto data : data_list) {\n      |                     ^~~~~~~~~\n/tmp/tmpd9dw4bfe.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpd9dw4bfe.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpd9dw4bfe.cpp:19:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpd9dw4bfe.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/g",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            result += data.f0;\n        } else if (data == data.f1) {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123360,
      "stdout": "",
      "stderr": "/tmp/tmpmrgnoxaz.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpmrgnoxaz.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpmrgnoxaz.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmrgnoxaz.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpmrgnoxaz.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpmrgnoxaz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (int i = 0; i < data_list.size(); i++) {\n        if (data_list[i] == data_list[i].f0) {\n            result += data_list[i].f0;\n        } else {\n            result += recursive_list_sum(data_list[i].f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmpjf4hd8kw.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpjf4hd8kw.cpp:21:55: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpjf4hd8kw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmpvdmrvjvl.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpvdmrvjvl.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpvdmrvjvl.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvdmrvjvl.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpvdmrvjvl.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvdmrvjvl.cpp:62:39: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (data == std::vector\n      |                   ~                   ^\n      |                                       )\n   63 | }\n      | ~                                      \n/tmp/tmpvdmrvjvl.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvdmrvjvl.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmpvdmrvjvl.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpvdmrvjvl.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmpvdmrvjvl.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (int i = 0; i < data_list.size(); i++) {\n        if (data_list[i] == data_list[i].f0) {\n            sum += data_list[i].f0;\n        } else {\n            sum += recursive_list_sum(data_list[i].f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123365,
      "stdout": "",
      "stderr": "/tmp/tmp5gnqgzd4.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp5gnqgzd4.cpp:21:52: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp5gnqgzd4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            sum += data.f0;\n        } else if (data == data.f1) {\n            sum += recursive_list_sum(data.f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmp9v8h0v8i.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp9v8h0v8i.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmp9v8h0v8i.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9v8h0v8i.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp9v8h0v8i.cpp:21:44: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(data.f1);\n      |                                       ~~~~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp9v8h0v8i.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for(int i = 0; i < data_list.size(); i++) {\n        if(data_list[i] == std::vector<long>()) {\n            result += recursive_list_sum(data_list[i].f1);\n        } else {\n            result += data_list[i].f0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123362,
      "stdout": "",
      "stderr": "/tmp/tmpq1a2rri_.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpq1a2rri_.cpp:19:55: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             result += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpq1a2rri_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _TrivialValueTypes = false]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:134:15:   required from \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:289:37:   required from \u2018_ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator, std::allocator<_Tp>&) [with _InputIterator = const Union_long_s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long ret = 0;\n    for (auto &data : data_list) {\n        if (data == data.f0) {\n            ret += data.f0;\n        } else if (data == data.f1) {\n            ret += recursive_list_sum(data.f1);\n        }\n    }\n    return ret;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123365,
      "stdout": "",
      "stderr": "/tmp/tmprapnffk5.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmprapnffk5.cpp:21:44: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             ret += recursive_list_sum(data.f1);\n      |                                       ~~~~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmprapnffk5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _TrivialValueTypes = false]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:134:15:   required from \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:289:37:   required from \u2018_ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator, std::allocator<",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            result += data.f0;\n        } else {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmp_mzt7khn.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp_mzt7khn.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmp_mzt7khn.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_mzt7khn.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp_mzt7khn.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp_mzt7khn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for(int i = 0; i < data_list.size(); i++) {\n        if(data_list[i].f0 == data_list[i].f1) {\n            result += data_list[i].f0;\n        } else {\n            result += recursive_list_sum(data_list[i].f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123366,
      "stdout": "",
      "stderr": "/tmp/tmplyal_2zv.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmplyal_2zv.cpp:18:28: error: no match for \u2018operator==\u2019 (operand types are \u2018long int\u2019 and \u2018std::vector<long int>\u2019)\n   18 |         if(data_list[i].f0 == data_list[i].f1) {\n      |                            ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n                 from /tmp/tmplyal_2zv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5: note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>& __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5: note:   template argument deduction/substitution failed:\n/tmp/tmplyal_2zv.cpp:18:44: note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019 and \u2018long int\u2019\n   18 |         if(data_list[i].f0 == data_list[i].f1) {\n      |                                            ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n                 from /tmp/tmplyal_2zv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1099:5: note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc> bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1099:5: note:   template argument deduction/substituti",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            sum += data.f0;\n        } else if (data == data.f1) {\n            sum += recursive_list_sum(data.f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmp9v8h0v8i.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp9v8h0v8i.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmp9v8h0v8i.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9v8h0v8i.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp9v8h0v8i.cpp:21:44: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(data.f1);\n      |                                       ~~~~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp9v8h0v8i.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for(auto i : data_list) {\n        if(i == std::vector<long>()) {\n            sum += 0;\n        } else if(i == long()) {\n            sum += i.f0;\n        } else {\n            sum += recursive_list_sum(i.f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123359,
      "stdout": "",
      "stderr": "/tmp/tmp73fk607c.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp73fk607c.cpp:17:18: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for(auto i : data_list) {\n      |                  ^~~~~~~~~\n/tmp/tmp73fk607c.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp73fk607c.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp73fk607c.cpp:23:41: error: could not convert \u2018i.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   23 |             sum += recursive_list_sum(i.f1);\n      |                                       ~~^~\n      |                                         |\n      |                                         vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp73fk607c.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            result += data.f0;\n        } else {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmp_mzt7khn.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp_mzt7khn.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmp_mzt7khn.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_mzt7khn.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp_mzt7khn.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp_mzt7khn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == long()) {\n            result += data;\n        } else {\n            result += recursive_list_sum(data);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123365,
      "stdout": "",
      "stderr": "/tmp/tmppud60v4f.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmppud60v4f.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmppud60v4f.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmppud60v4f.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmppud60v4f.cpp:21:20: error: no match for \u2018operator+=\u2019 (operand types are \u2018long int\u2019 and \u2018Union_long_std_vector_long_\u2019)\n   21 |             result += data;\n      |             ~~~~~~~^~~~~~~\n/tmp/tmppud60v4f.cpp:23:42: error: could not convert \u2018data\u2019 from \u2018Union_long_std_vector_long_\u2019 to \u2018std::vector<Union_long_std_vector_long_>\u2019\n   23 |             result += recursive_list_sum(data);\n      |                                          ^~~~\n      |                                          |\n      |                                          Union_long_std_vector_long_\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmppud60v4f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_co",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            result += data.f0;\n        } else {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmp_mzt7khn.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp_mzt7khn.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmp_mzt7khn.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_mzt7khn.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp_mzt7khn.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp_mzt7khn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector<long>()) {\n            sum += 0;\n        } else if (data == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123362,
      "stdout": "",
      "stderr": "/tmp/tmp1fkmowiu.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp1fkmowiu.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmp1fkmowiu.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1fkmowiu.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp1fkmowiu.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmp1fkmowiu.cpp:62:39: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (data == std::vector\n      |                   ~                   ^\n      |                                       )\n   63 | }\n      | ~                                      \n/tmp/tmp1fkmowiu.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmp1fkmowiu.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmp1fkmowiu.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmp1fkmowiu.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmp1fkmowiu.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for(auto &data : data_list) {\n        if(data == data.f0) {\n            sum += data.f0;\n        } else {\n            sum += recursive_list_sum(data.f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123365,
      "stdout": "",
      "stderr": "/tmp/tmpwvuom63b.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpwvuom63b.cpp:21:44: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(data.f1);\n      |                                       ~~~~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpwvuom63b.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _TrivialValueTypes = false]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:134:15:   required from \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:289:37:   required from \u2018_ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator, std::allocator<",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto i : data_list) {\n        if (i == std::vector<long>()) {\n            continue;\n        }\n        if (i == long()) {\n            result += i;\n        }\n        else {\n            result += recursive_list_sum(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123366,
      "stdout": "",
      "stderr": "/tmp/tmp7o_xvghg.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp7o_xvghg.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto i : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmp7o_xvghg.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7o_xvghg.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp7o_xvghg.cpp:22:20: error: no match for \u2018operator+=\u2019 (operand types are \u2018long int\u2019 and \u2018Union_long_std_vector_long_\u2019)\n   22 |             result += i;\n      |             ~~~~~~~^~~~\n/tmp/tmp7o_xvghg.cpp:25:42: error: could not convert \u2018i\u2019 from \u2018Union_long_std_vector_long_\u2019 to \u2018std::vector<Union_long_std_vector_long_>\u2019\n   25 |             result += recursive_list_sum(i);\n      |                                          ^\n      |                                          |\n      |                                          Union_long_std_vector_long_\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp7o_xvghg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/includ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmpvdmrvjvl.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpvdmrvjvl.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpvdmrvjvl.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvdmrvjvl.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpvdmrvjvl.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvdmrvjvl.cpp:62:39: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (data == std::vector\n      |                   ~                   ^\n      |                                       )\n   63 | }\n      | ~                                      \n/tmp/tmpvdmrvjvl.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvdmrvjvl.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmpvdmrvjvl.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpvdmrvjvl.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmpvdmrvjvl.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            result += data.f0;\n        } else {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmp_mzt7khn.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp_mzt7khn.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmp_mzt7khn.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_mzt7khn.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp_mzt7khn.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp_mzt7khn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmpvdmrvjvl.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpvdmrvjvl.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpvdmrvjvl.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvdmrvjvl.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpvdmrvjvl.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvdmrvjvl.cpp:62:39: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (data == std::vector\n      |                   ~                   ^\n      |                                       )\n   63 | }\n      | ~                                      \n/tmp/tmpvdmrvjvl.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvdmrvjvl.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmpvdmrvjvl.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpvdmrvjvl.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmpvdmrvjvl.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (int i = 0; i < data_list.size(); i++) {\n        if (data_list[i] == data_list[i].f0) {\n            result += data_list[i].f0;\n        } else {\n            result += recursive_list_sum(data_list[i].f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmpjf4hd8kw.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpjf4hd8kw.cpp:21:55: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpjf4hd8kw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (int i = 0; i < data_list.size(); i++) {\n        if (data_list[i] == data_list[i].f0) {\n            sum += data_list[i].f0;\n        } else {\n            sum += recursive_list_sum(data_list[i].f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123365,
      "stdout": "",
      "stderr": "/tmp/tmp5gnqgzd4.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp5gnqgzd4.cpp:21:52: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp5gnqgzd4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            sum += data.f0;\n        } else {\n            sum += recursive_list_sum(data.f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmpaschg4y4.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpaschg4y4.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpaschg4y4.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpaschg4y4.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpaschg4y4.cpp:21:44: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(data.f1);\n      |                                       ~~~~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpaschg4y4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto &data : data_list) {\n        if (data.f0 == data.f0) {\n            result += data.f0;\n        } else if (data.f1 == data.f1) {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123366,
      "stdout": "",
      "stderr": "/tmp/tmphvtuw_e8.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmphvtuw_e8.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmphvtuw_e8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto it = data_list.begin(); it != data_list.end(); it++) {\n        if (it->f1 == std::vector<long>()) {\n            result += it->f0;\n        } else {\n            result += recursive_list_sum(it->f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123366,
      "stdout": "",
      "stderr": "/tmp/tmpeqq22jat.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpeqq22jat.cpp:21:46: error: could not convert \u2018it.__gnu_cxx::__normal_iterator<Union_long_std_vector_long_*, std::vector<Union_long_std_vector_long_> >::operator->()->Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(it->f1);\n      |                                          ~~~~^~\n      |                                              |\n      |                                              vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpeqq22jat.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _TrivialValueTypes = false]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:134:15:   required from \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:289:37:   re",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto &data : data_list) {\n        if (data == data.f0) {\n            sum += data.f0;\n        } else if (data == data.f1) {\n            sum += recursive_list_sum(data.f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123360,
      "stdout": "",
      "stderr": "/tmp/tmpbiw_0y9c.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpbiw_0y9c.cpp:21:44: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(data.f1);\n      |                                       ~~~~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpbiw_0y9c.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _TrivialValueTypes = false]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:134:15:   required from \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:289:37:   required from \u2018_ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator, std::allocator<",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for(int i = 0; i < data_list.size(); i++) {\n        if(data_list[i] == std::vector<long>()) {\n            result += recursive_list_sum(data_list[i].f1);\n        } else {\n            result += data_list[i].f0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123362,
      "stdout": "",
      "stderr": "/tmp/tmpq1a2rri_.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpq1a2rri_.cpp:19:55: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             result += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpq1a2rri_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _TrivialValueTypes = false]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:134:15:   required from \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:289:37:   required from \u2018_ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator, std::allocator<_Tp>&) [with _InputIterator = const Union_long_s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto i : data_list) {\n        if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == long()) {\n            result += i.f0;\n        } else {\n            result += recursive_list_sum(i.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123360,
      "stdout": "",
      "stderr": "/tmp/tmpol2q5601.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpol2q5601.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto i : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmpol2q5601.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpol2q5601.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpol2q5601.cpp:23:44: error: could not convert \u2018i.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   23 |             result += recursive_list_sum(i.f1);\n      |                                          ~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpol2q5601.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/in",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            result += data.f0;\n        } else if (data == data.f1) {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123360,
      "stdout": "",
      "stderr": "/tmp/tmpmrgnoxaz.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpmrgnoxaz.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpmrgnoxaz.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmrgnoxaz.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpmrgnoxaz.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpmrgnoxaz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            result += data.f0;\n        } else if (data == data.f1) {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123360,
      "stdout": "",
      "stderr": "/tmp/tmpmrgnoxaz.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpmrgnoxaz.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpmrgnoxaz.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmrgnoxaz.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpmrgnoxaz.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpmrgnoxaz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long ret = 0;\n    for(auto i : data_list) {\n        if(i == std::vector<long>()) {\n            ret += 0;\n        } else if(i == long()) {\n            ret += i.f0;\n        } else {\n            ret += recursive_list_sum(i.f1);\n        }\n    }\n    return ret;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123366,
      "stdout": "",
      "stderr": "/tmp/tmpo89r53jd.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpo89r53jd.cpp:17:18: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for(auto i : data_list) {\n      |                  ^~~~~~~~~\n/tmp/tmpo89r53jd.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpo89r53jd.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpo89r53jd.cpp:23:41: error: could not convert \u2018i.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   23 |             ret += recursive_list_sum(i.f1);\n      |                                       ~~^~\n      |                                         |\n      |                                         vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpo89r53jd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (int i = 0; i < data_list.size(); i++) {\n        if (data_list[i].f1.size() == 0) {\n            result += data_list[i].f0;\n        } else {\n            result += recursive_list_sum(data_list[i].f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "/tmp/tmp9melf3gi.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp9melf3gi.cpp:21:55: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp9melf3gi.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _TrivialValueTypes = false]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:134:15:   required from \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:289:37:   required from \u2018_ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator, std::allocator<_Tp>&) [with _InputIterator = const Union_long_s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            continue;\n        }\n        if (data == long()) {\n            result += data;\n        }\n        if (data == std::vector<long>()) {\n            result += recursive_list_sum(data);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123365,
      "stdout": "",
      "stderr": "/tmp/tmpghshim4k.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpghshim4k.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpghshim4k.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpghshim4k.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpghshim4k.cpp:22:20: error: no match for \u2018operator+=\u2019 (operand types are \u2018long int\u2019 and \u2018Union_long_std_vector_long_\u2019)\n   22 |             result += data;\n      |             ~~~~~~~^~~~~~~\n/tmp/tmpghshim4k.cpp:25:42: error: could not convert \u2018data\u2019 from \u2018Union_long_std_vector_long_\u2019 to \u2018std::vector<Union_long_std_vector_long_>\u2019\n   25 |             result += recursive_list_sum(data);\n      |                                          ^~~~\n      |                                          |\n      |                                          Union_long_std_vector_long_\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpghshim4k.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_co",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == data.f0) {\n            result += data.f0;\n        } else {\n            result += recursive_list_sum(data.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmp_mzt7khn.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp_mzt7khn.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmp_mzt7khn.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_mzt7khn.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp_mzt7khn.cpp:21:47: error: could not convert \u2018data.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             result += recursive_list_sum(data.f1);\n      |                                          ~~~~~^~\n      |                                               |\n      |                                               vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp_mzt7khn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (auto i : data_list) {\n        if (i == std::vector<long>()) {\n            sum += recursive_list_sum(i.f1);\n        } else {\n            sum += i.f0;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123362,
      "stdout": "",
      "stderr": "/tmp/tmp3xz7tlbu.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp3xz7tlbu.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto i : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmp3xz7tlbu.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp3xz7tlbu.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp3xz7tlbu.cpp:19:41: error: could not convert \u2018i.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             sum += recursive_list_sum(i.f1);\n      |                                       ~~^~\n      |                                         |\n      |                                         vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp3xz7tlbu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for(int i = 0; i < data_list.size(); i++) {\n        if(data_list[i].f0 == 0) {\n            result += recursive_list_sum(data_list[i].f1);\n        } else {\n            result += data_list[i].f0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "/tmp/tmpt94vb3o1.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpt94vb3o1.cpp:19:55: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             result += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpt94vb3o1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (int i = 0; i < data_list.size(); i++) {\n        if (data_list[i].f0 == data_list[i].f1) {\n            result += data_list[i].f0;\n        } else {\n            result += recursive_list_sum(data_list[i].f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "/tmp/tmpubp7o_pb.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpubp7o_pb.cpp:18:29: error: no match for \u2018operator==\u2019 (operand types are \u2018long int\u2019 and \u2018std::vector<long int>\u2019)\n   18 |         if (data_list[i].f0 == data_list[i].f1) {\n      |                             ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n                 from /tmp/tmpubp7o_pb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5: note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>& __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5: note:   template argument deduction/substitution failed:\n/tmp/tmpubp7o_pb.cpp:18:45: note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019 and \u2018long int\u2019\n   18 |         if (data_list[i].f0 == data_list[i].f1) {\n      |                                             ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n                 from /tmp/tmpubp7o_pb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1099:5: note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc> bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1099:5: note:   template argument deduction/substi",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto i : data_list) {\n        if (i == std::vector<long>()) {\n            result += 0;\n        } else if (i == long()) {\n            result += i.f0;\n        } else {\n            result += recursive_list_sum(i.f1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123360,
      "stdout": "",
      "stderr": "/tmp/tmpol2q5601.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpol2q5601.cpp:17:19: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto i : data_list) {\n      |                   ^~~~~~~~~\n/tmp/tmpol2q5601.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpol2q5601.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpol2q5601.cpp:23:44: error: could not convert \u2018i.Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   23 |             result += recursive_list_sum(i.f1);\n      |                                          ~~^~\n      |                                            |\n      |                                            vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpol2q5601.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/in",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for(int i = 0; i < data_list.size(); i++) {\n        if(data_list[i] == std::vector<long>()) {\n            result += recursive_list_sum(data_list[i].f1);\n        } else {\n            result += data_list[i].f0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123362,
      "stdout": "",
      "stderr": "/tmp/tmpq1a2rri_.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpq1a2rri_.cpp:19:55: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   19 |             result += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpq1a2rri_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _TrivialValueTypes = false]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:134:15:   required from \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:289:37:   required from \u2018_ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator, std::allocator<_Tp>&) [with _InputIterator = const Union_long_s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for(auto data : data_list) {\n        if(data == (std::vector<long>){}) {\n            result += 0;\n        } else if(data == (std::vector<long>){1, 2, 3}) {\n            result += 6;\n        } else if(data == (std::vector<long>){1, 2, 3, 4, 5}) {\n            result += 15;\n        } else if(data == (std::vector<long>){1, 2, 3, 4, 5, 6}) {\n            result += 21;\n        } else if(data == (std::vector<long>){1, 2, 3, 4, 5, 6, 7}) {\n            result += 28;\n        } else if(data == (std::vector<long>){1, 2, 3, 4, 5, 6, 7, 8}) {\n            result += 36;\n        } else if(data == (std::vector<long>){1, 2, 3, 4, 5, 6, 7, 8, 9}) {\n            result += 45;\n        } else if(data == (std::vector<long>){1, 2, 3, 4, 5, 6, 7, 8, 9, 10}) {\n            result += 55;\n        } else if(data == (std::vector<long>){1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}) {\n            result += 66;\n        } else if(data == (std::vector<long>){1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}) {\n            result += 78;\n        } else if(data == (std::vector<long>){1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}) {\n            result += 91;\n        } else if(data == (std::vector<long>){1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}) {\n            result += 105;\n        } else if(data == (std::vector<long>){1, 2, 3,\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "/tmp/tmpb9ajk2j2.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpb9ajk2j2.cpp:17:21: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for(auto data : data_list) {\n      |                     ^~~~~~~~~\n/tmp/tmpb9ajk2j2.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpb9ajk2j2.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpb9ajk2j2.cpp:43:2: error: expected \u2018)\u2019 before \u2018int\u2019\n   43 | }\n      |  ^\n      |  )\n   44 | int main() {\n      | ~~~\n/tmp/tmpb9ajk2j2.cpp:42:18: note: to match this \u2018(\u2019\n   42 |         } else if(data == (std::vector<long>){1, 2, 3,\n      |                  ^\n/tmp/tmpb9ajk2j2.cpp:49:1: error: expected statement at end of input\n   49 | }\n      | ^\n/tmp/tmpb9ajk2j2.cpp:49:1: error: expected \u2018}\u2019 at end of input\n/tmp/tmpb9ajk2j2.cpp:17:32: note: to match this \u2018{\u2019\n   17 |     for(auto data : data_list) {\n      |                                ^\n/tmp/tmpb9ajk2j2.cpp:49:1: error: expected \u2018}\u2019 at end of input\n   49 | }\n      | ^\n/tmp/tmpb9ajk2j2.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmpb9ajk2j2.cpp:49:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   49 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long sum = 0;\n    for (int i = 0; i < data_list.size(); i++) {\n        if (data_list[i] == data_list[i].f0) {\n            sum += data_list[i].f0;\n        } else {\n            sum += recursive_list_sum(data_list[i].f1);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1666123365,
      "stdout": "",
      "stderr": "/tmp/tmp5gnqgzd4.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmp5gnqgzd4.cpp:21:52: error: could not convert \u2018data_list.std::vector<Union_long_std_vector_long_>::operator[](((std::vector<Union_long_std_vector_long_>::size_type)i)).Union_long_std_vector_long_::f1\u2019 from \u2018vector<long int>\u2019 to \u2018vector<Union_long_std_vector_long_>\u2019\n   21 |             sum += recursive_list_sum(data_list[i].f1);\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp5gnqgzd4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h: In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1 = Union_long_std_vector_long_; _Args = {const Union_long_std_vector_long_&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Union_long_std_vector_long_*; _ForwardIterator = Union_long_std_vector_long_*; bool _Trivial",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to flatten a vector and sum all of its elements.\nlong recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n    long result = 0;\n    for (auto data : data_list) {\n        if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector<long>()) {\n            result += 0;\n        } else if (data == std::vector\n}\nint main() {\n    auto candidate = recursive_list_sum;\n    assert(candidate((std::vector<Union_long_std_vector_long_>({1, 2, std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6})}))) == (21));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({7, 10, std::vector<long>({(long)15, (long)14}), std::vector<long>({(long)19, (long)41})}))) == (106));\n    assert(candidate((std::vector<Union_long_std_vector_long_>({10, 20, std::vector<long>({(long)30, (long)40}), std::vector<long>({(long)50, (long)60})}))) == (210));\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "/tmp/tmpvdmrvjvl.cpp: In function \u2018long int recursive_list_sum(std::vector<Union_long_std_vector_long_>)\u2019:\n/tmp/tmpvdmrvjvl.cpp:17:22: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   17 |     for (auto data : data_list) {\n      |                      ^~~~~~~~~\n/tmp/tmpvdmrvjvl.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvdmrvjvl.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpvdmrvjvl.cpp:63:1: error: missing template arguments before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvdmrvjvl.cpp:62:39: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |         } else if (data == std::vector\n      |                   ~                   ^\n      |                                       )\n   63 | }\n      | ~                                      \n/tmp/tmpvdmrvjvl.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpvdmrvjvl.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmpvdmrvjvl.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpvdmrvjvl.cpp:15:77: note: to match this \u2018{\u2019\n   15 | long recursive_list_sum(std::vector<Union_long_std_vector_long_> data_list) {\n      |                                                                             ^\n/tmp/tmpvdmrvjvl.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}