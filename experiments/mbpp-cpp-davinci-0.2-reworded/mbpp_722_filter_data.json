{
  "name": "mbpp_722_filter_data",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_float{\n    long f0;\n    float f1;    Union_long_float(long _f0) : f0(_f0) {}\n    Union_long_float(float _f1) : f1(_f1) {}\n    ~Union_long_float() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(float f) {\n        return f1 == f ;\n    }\n};\n// The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nstd::map<std::string,Union_long_float> filter_data(std::map<std::string,Union_long_float> students, float h, long w) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_722_filter_data.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = filter_data;\n    assert(candidate((std::map<std::string,Union_long_float>({{\"Cierra Vega\", std::make_tuple(6.2, 70)}, {\"Alden Cantrell\", std::make_tuple(5.9, 65)}, {\"Kierra Gentry\", std::make_tuple(6.0, 68)}, {\"Pierre Cox\", std::make_tuple(5.8, 66)}})), (6.0), (70)) == (std::map<std::string,Union_long_float>({{\"Cierra Vega\", std::make_tuple(6.2, 70)}})));\n    assert(candidate((std::map<std::string,Union_long_float>({{\"Cierra Vega\", std::make_tuple(6.2, 70)}, {\"Alden Cantrell\", std::make_tuple(5.9, 65)}, {\"Kierra Gentry\", std::make_tuple(6.0, 68)}, {\"Pierre Cox\", std::make_tuple(5.8, 66)}})), (5.9), (67)) == (std::map<std::string,Union_long_float>({{\"Cierra Vega\", std::make_tuple(6.2, 70)}, {\"Kierra Gentry\", std::make_tuple(6.0, 68)}})));\n    assert(candidate((std::map<std::string,Union_long_float>({{\"Cierra Vega\", std::make_tuple(6.2, 70)}, {\"Alden Cantrell\", std::make_tuple(5.9, 65)}, {\"Kierra Gentry\", std::make_tuple(6.0, 68)}, {\"Pierre Cox\", std::make_tuple(5.8, 66)}})), (5.7), (64)) == (std::map<std::string,Union_long_float>({{\"Cierra Vega\", std::make_tuple(6.2, 70)}, {\"Alden Cantrell\", std::make_tuple(5.9, 65)}, {\"Kierra Gentry\", std::make_tuple(6.0, 68)}, {\"Pierre Cox\", std::make_tuple(5.8, 66)}})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result.insert(std::pair<std::string,Union_long_float>(it->first, it->second));\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second.f1 >= h && it->second.f0 >= w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto& [key, value] : students) {\n        if (value.f1 > h && value.f0 > w) {\n            result[key] = value;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for(auto it = students.begin(); it != students.end(); it++) {\n        if(it->second.f1 > h && it->second.f0 > w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result.insert(student);\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto &student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result.insert(student);\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); it++) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result.insert(std::pair<std::string,Union_long_float>(it->first, it->second));\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto &student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result[student.first] = student.second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for(auto it = students.begin(); it != students.end(); it++) {\n        if(it->second.f0 >= h && it->second.f1 >= w) {\n            result.insert(std::pair<std::string,Union_long_float>(it->first, it->second));\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto& student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result[student.first] = student.second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto &student : students) {\n        if (student.second.f0 > h && student.second.f1 > w) {\n            result.insert(student);\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto& [key, value] : students) {\n        if (value.f1 > h && value.f0 > w) {\n            result[key] = value;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result.insert(student);\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result.insert(student);\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second == h && it->second == w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto &student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result.insert(student);\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for(auto& student : students) {\n        if(student.second.f1 > h && student.second.f0 > w) {\n            result.insert(student);\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); it++) {\n        if (it->second.f1 >= h && it->second.f0 >= w) {\n            result.insert(std::pair<std::string,Union_long_float>(it->first, it->second));\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto& student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result.insert(student);\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> res;\n    for (auto& student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            res[student.first] = student.second;\n        }\n    }\n    return res;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); it++) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result[student.first] = student.second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto& student : students) {\n        if (student.second.f1 >= h && student.second.f0 >= w) {\n            result.insert(student);\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> res;\n    for (auto it = students.begin(); it != students.end(); it++) {\n        if (it->second.f1 >= h && it->second.f0 >= w) {\n            res[it->first] = it->second;\n        }\n    }\n    return res;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); it++) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result.insert(std::pair<std::string,Union_long_float>(it->first, it->second));\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); it++) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result.insert(std::pair<std::string,Union_long_float>(it->first, it->second));\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); it++) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); it++) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result.insert(std::pair<std::string,Union_long_float>(it->first, it->second));\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto& student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result.insert(student);\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result[student.first] = student.second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result.insert(std::make_pair(it->first, it->second));\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result[student.first] = student.second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result.insert(student);\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result[student.first] = student.second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto& it : students) {\n        if (it.second.f1 > h && it.second.f0 > w) {\n            result[it.first] = it.second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto& student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result[student.first] = student.second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto& student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result[student.first] = student.second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for(auto it = students.begin(); it != students.end(); it++) {\n        if(it->second.f1 > h && it->second.f0 > w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result.insert(student);\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for(auto it = students.begin(); it != students.end(); ++it) {\n        if(it->second.f1 > h && it->second.f0 > w) {\n            result.insert(std::make_pair(it->first,it->second));\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); it++) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result.insert(std::pair<std::string,Union_long_float>(it->first, it->second));\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result.insert(student);\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto& student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result.insert(student);\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result.insert(student);\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second.f0 > h && it->second.f1 > w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto &student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result.insert(student);\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto& student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result.insert(student);\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result[student.first] = student.second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> res;\n    for(auto it = students.begin(); it != students.end(); it++) {\n        if(it->second.f1 >= h && it->second.f0 >= w) {\n            res.insert(std::pair<std::string,Union_long_float>(it->first, it->second));\n        }\n    }\n    return res;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result.insert(student);\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto& student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result.insert(student);\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result.insert(std::pair<std::string,Union_long_float>(it->first, it->second));\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result.insert(student);\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto &student : students) {\n        if (student.second.f0 > h && student.second.f1 > w) {\n            result.insert(student);\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); it++) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto &student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result.insert(student);\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto& student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result.insert(student);\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto& student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result.insert(student);\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); it++) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result.insert(std::pair<std::string,Union_long_float>(it->first, it->second));\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto& student : students) {\n        if (student.second == h && student.second == w) {\n            result.insert(student);\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto& student : students) {\n        if (student.second.f1 >= h && student.second.f0 >= w) {\n            result[student.first] = student.second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto &[name, data] : students) {\n        if (data.f1 > h && data.f0 > w) {\n            result.insert({name, data});\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result[student.first] = student.second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); it++) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto& student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result.insert(student);\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto &student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result.insert(student);\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> filtered_students;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            filtered_students[it->first] = it->second;\n        }\n    }\n    return filtered_students;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result.insert(std::pair<std::string,Union_long_float>(it->first, it->second));\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result.insert(std::pair<std::string,Union_long_float>(it->first, it->second));\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second == h && it->second == w) {\n            result.insert(std::pair<std::string,Union_long_float>(it->first, it->second));\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for(auto &student : students) {\n        if(student.second.f1 > h && student.second.f0 > w) {\n            result.insert(student);\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result[student.first] = student.second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); it++) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result.insert(std::make_pair(it->first, it->second));\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> res;\n    for (auto s : students) {\n        if (s.second.f1 > h && s.second.f0 > w) {\n            res.insert(s);\n        }\n    }\n    return res;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); it++) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); it++) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result.insert(std::pair<std::string,Union_long_float>(it->first, it->second));\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); it++) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result.insert(std::pair<std::string,Union_long_float>(it->first, it->second));\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result.insert(std::pair<std::string,Union_long_float>(it->first, it->second));\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result.insert(std::make_pair(it->first, it->second));\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto &student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result[student.first] = student.second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto &student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result.insert(student);\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); it++) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result.insert(student);\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto& student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result.insert(student);\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); it++) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result.insert(std::pair<std::string,Union_long_float>(it->first, it->second));\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> filtered_students;\n    for (auto student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            filtered_students.insert(student);\n        }\n    }\n    return filtered_students;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result.insert(student);\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); it++) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result.insert(std::pair<std::string,Union_long_float>(it->first, it->second));\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> res;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            res.insert(std::pair<std::string,Union_long_float>(it->first,it->second));\n        }\n    }\n    return res;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second.f1 >= h && it->second.f0 >= w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); it++) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result.insert(std::pair<std::string,Union_long_float>(it->first,it->second));\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> res;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            res[it->first] = it->second;\n        }\n    }\n    return res;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto& [key, value] : students) {\n        if (value.f1 > h && value.f0 > w) {\n            result[key] = value;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result.insert(std::pair<std::string,Union_long_float>(it->first, it->second));\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); it++) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result.insert(std::pair<std::string,Union_long_float>(it->first, it->second));\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for(auto it = students.begin(); it != students.end(); ++it) {\n        if(it->second.f1 > h && it->second.f0 > w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto& student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result[student.first] = student.second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result.insert(student);\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto& student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result.insert(student);\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto &student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result[student.first] = student.second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); it++) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); it++) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto& student : students) {\n        if (student.second.f1 >= h && student.second.f0 >= w) {\n            result[student.first] = student.second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto &student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result[student.first] = student.second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result.insert(student);\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); it++) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result.insert(std::make_pair(it->first, it->second));\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result.insert(student);\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); it++) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second.f1 >= h && it->second.f0 >= w) {\n            result.insert(std::pair<std::string,Union_long_float>(it->first, it->second));\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto& student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result.insert(student);\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> res;\n    for(auto it = students.begin(); it != students.end(); it++) {\n        if(it->second.f1 > h && it->second.f0 > w) {\n            res[it->first] = it->second;\n        }\n    }\n    return res;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second.f1 >= h && it->second.f0 >= w) {\n            result.insert(std::make_pair(it->first, it->second));\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); it++) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto &student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result.insert(student);\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto &student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result.insert(student);\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for(auto& student : students) {\n        if(student.second.f1 > h && student.second.f0 > w) {\n            result.insert(student);\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for(auto it = students.begin(); it != students.end(); it++) {\n        if(it->second.f1 > h && it->second.f0 > w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for(auto it = students.begin(); it != students.end(); it++) {\n        if(it->second.f1 > h && it->second.f0 > w) {\n            result.insert(std::pair<std::string,Union_long_float>(it->first, it->second));\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto &student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result[student.first] = student.second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); it++) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); it++) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result.insert(std::make_pair(it->first, it->second));\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> res;\n    for (auto it = students.begin(); it != students.end(); it++) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            res[it->first] = it->second;\n        }\n    }\n    return res;",
    "    std::map<std::string,Union_long_float> res;\n    for (auto &it : students) {\n        if (it.second.f1 > h && it.second.f0 > w) {\n            res[it.first] = it.second;\n        }\n    }\n    return res;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto &student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result[student.first] = student.second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto& student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result.insert(student);\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result.insert(student);\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto &student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result.insert(student);\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); it++) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto &student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result[student.first] = student.second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto &student : students) {\n        if (student.second == h && student.second == w) {\n            result.insert(student);\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> res;\n    for (auto it = students.begin(); it != students.end(); it++) {\n        if (it->second.f0 > h && it->second.f1 > w) {\n            res[it->first] = it->second;\n        }\n    }\n    return res;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); it++) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result[student.first] = student.second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto& student: students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result.insert(student);\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result.insert(student);\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> res;\n    for (auto it = students.begin(); it != students.end(); it++) {\n        if (it->second.f0 > h && it->second.f1 > w) {\n            res[it->first] = it->second;\n        }\n    }\n    return res;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result.insert(student);\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto& student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result[student.first] = student.second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); it++) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto& student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result.insert(student);\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result[student.first] = student.second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto &student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result.insert(student);\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> res;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            res[it->first] = it->second;\n        }\n    }\n    return res;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result[student.first] = student.second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto& student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result.insert(student);\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result.insert(student);\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto& student : students) {\n        if (student.second.f1 >= h && student.second.f0 >= w) {\n            result[student.first] = student.second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto& student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result.insert(student);\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto i : students) {\n        if (i.second.f1 > h && i.second.f0 > w) {\n            result.insert(i);\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result.insert(std::pair<std::string,Union_long_float>(it->first, it->second));\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result.insert(std::pair<std::string,Union_long_float>(it->first, it->second));\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for(auto& student : students) {\n        if(student.second.f0 > h && student.second.f1 > w) {\n            result.insert(student);\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto& [key, value] : students) {\n        if (value.f1 >= h && value.f0 >= w) {\n            result[key] = value;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto const& [key, value] : students) {\n        if (value.f1 > h && value.f0 > w) {\n            result[key] = value;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto& student : students) {\n        if (student.second.f1 >= h && student.second.f0 >= w) {\n            result.insert(student);\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result[student.first] = student.second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); ++it) {\n        if (it->second.f1 >= h && it->second.f0 >= w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto& student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result[student.first] = student.second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto& student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result[student.first] = student.second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto &student : students) {\n        if (student.second.f1 > h && student.second.f0 > w) {\n            result[student.first] = student.second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto it = students.begin(); it != students.end(); it++) {\n        if (it->second.f1 > h && it->second.f0 > w) {\n            result[it->first] = it->second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for (auto i : students) {\n        if (i.second.f0 >= h && i.second.f1 >= w) {\n            result[i.first] = i.second;\n        }\n    }\n    return result;",
    "    std::map<std::string,Union_long_float> result;\n    for(auto it = students.begin(); it != students.end(); ++it) {\n        if(it->second.f1 > h && it->second.f0 > w) {\n            result.insert(std::pair<std::string,Union_long_float>(it->first, it->second));\n        }\n    }\n    return result;"
  ]
}