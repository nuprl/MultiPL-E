{
  "name": "mbpp_641_is_nonagonal",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the nth nonagonal number.\nlong is_nonagonal(long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_641_is_nonagonal.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = is_nonagonal;\n    assert(candidate((10)) == (325));\n    assert(candidate((15)) == (750));\n    assert(candidate((18)) == (1089));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    return n*(3*n-2);",
    "    long i = 1;\n    while (n > 0) {\n        n -= i;\n        i++;\n    }\n    return n == 0;",
    "    long x = (sqrt(1 + 8*n) - 1) / 2;\n    return x;",
    "    long i = 1;\n    while(n > 0) {\n        n -= i;\n        i++;\n    }\n    return n == 0;",
    "    long i = 1;\n    while(n > 0) {\n        n -= i;\n        i++;\n    }\n    return n;",
    "    long x = (sqrt(1 + 8 * n) - 1) / 2;\n    return x;",
    "    return n*(3*n-2);",
    "    long x = (sqrt(1 + 8*n) - 1)/2;\n    if (x*(x+1)/2 == n) {\n        return 1;\n    }\n    return 0;",
    "    return (n*(3*n-2));",
    "    long i = 1;\n    while (n > 0) {\n        n -= i;\n        i++;\n    }\n    return n == 0;",
    "    return (n*(n+1))/2;",
    "    long x = (sqrt(1 + 8*n) - 1)/2;\n    if(x*(x+1)/2 == n)\n        return 1;\n    return 0;",
    "    long x = (sqrt(1 + 8*n) - 1)/2;\n    if(x*(x+1)/2 == n)\n        return 1;\n    return 0;",
    "    return (n*(n-1))/2;",
    "    long i = 1;\n    while(n > 0) {\n        n -= i;\n        i++;\n    }\n    return n;",
    "    return (n*(n+1))/2;",
    "    return (n*(n+1))/2;",
    "    long x = (sqrt(1 + 8 * n) - 1) / 2;\n    return x;",
    "    return (n*(3*n-2))/2;",
    "    long i = 1;\n    while(n > 0) {\n        n -= i;\n        i++;\n    }\n    return n == 0;"
  ]
}