{
  "name": "mbpp_723_count_same_pair",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// The input is defined as two vectors of the same length. Write a function to count indices where the vectors have the same values.\nlong count_same_pair(std::vector<long> nums1, std::vector<long> nums2) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_723_count_same_pair.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = count_same_pair;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8})), (std::vector<long>({(long)2, (long)2, (long)3, (long)1, (long)2, (long)6, (long)7, (long)9}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)-1, (long)-5, (long)6, (long)0, (long)-3, (long)-2, (long)3, (long)4, (long)6, (long)8})), (std::vector<long>({(long)2, (long)1, (long)2, (long)-1, (long)-5, (long)6, (long)4, (long)-3, (long)-2, (long)3, (long)4, (long)6, (long)8}))) == (11));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)-6, (long)-9, (long)11, (long)-12, (long)14, (long)-5, (long)17})), (std::vector<long>({(long)2, (long)1, (long)2, (long)-1, (long)-5, (long)6, (long)4, (long)-3, (long)-2, (long)3, (long)4, (long)6, (long)8}))) == (1));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)1, (long)2})), (std::vector<long>({(long)0, (long)1, (long)2, (long)2}))) == (3));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long count = 0;\n    for (int i = 0; i < nums1.size(); i++) {\n        if (nums1[i] == nums2[i]) {\n            count++;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < nums1.size(); i++) {\n        if (nums1[i] == nums2[i]) {\n            count++;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < nums1.size(); i++) {\n        if (nums1[i] == nums2[i]) {\n            count++;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (long i = 0; i < nums1.size(); i++) {\n        if (nums1[i] == nums2[i]) {\n            count++;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < nums1.size(); i++) {\n        if(nums1[i] == nums2[i]) {\n            count++;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(long i = 0; i < nums1.size(); i++) {\n        if(nums1[i] == nums2[i]) {\n            count++;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (long i = 0; i < nums1.size(); i++) {\n        if (nums1[i] == nums2[i]) {\n            count++;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < nums1.size(); i++) {\n        if (nums1[i] == nums2[i]) {\n            count++;\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for(int i = 0; i < nums1.size(); i++) {\n        if(nums1[i] == nums2[i]) {\n            count++;\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for(int i = 0; i < nums1.size(); i++)\n    {\n        if(nums1[i] == nums2[i])\n        {\n            count++;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(long i = 0; i < nums1.size(); i++) {\n        if(nums1[i] == nums2[i]) {\n            count++;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < nums1.size(); i++) {\n        if (nums1[i] == nums2[i]) {\n            count++;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < nums1.size(); i++) {\n        if (nums1[i] == nums2[i]) {\n            count++;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < nums1.size(); i++) {\n        if(nums1[i] == nums2[i]) {\n            count++;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < nums1.size(); i++) {\n        if (nums1[i] == nums2[i]) {\n            count++;\n        }\n    }\n    return count;",
    "    assert(nums1.size() == nums2.size());\n    long count = 0;\n    for (long i = 0; i < nums1.size(); i++) {\n        if (nums1[i] == nums2[i]) {\n            count++;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < nums1.size(); i++) {\n        if (nums1[i] == nums2[i]) {\n            count++;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i=0; i<nums1.size(); i++){\n        if(nums1[i] == nums2[i]){\n            count++;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < nums1.size(); i++) {\n        if(nums1[i] == nums2[i]) {\n            count++;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < nums1.size(); i++) {\n        if(nums1[i] == nums2[i]) {\n            count++;\n        }\n    }\n    return count;"
  ]
}