{
  "name": "mbpp_639_sample_nam",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given vector of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_639_sample_nam.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "  long sum = 0;\n  for (int i = 0; i < sample_names.size(); i++) {\n    if (isupper(sample_names[i][0])) {\n      sum += sample_names[i].length();\n    }\n  }\n  return sum;",
    "    long sum = 0;\n    for (auto i = sample_names.begin(); i != sample_names.end(); i++) {\n        if (!islower((*i)[0])) {\n            sum += (*i).length();\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].size();\n        }\n    }\n    return sum;",
    "  long sum = 0;\n  for (int i = 0; i < sample_names.size(); i++) {\n    if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n      sum += sample_names[i].size();\n    }\n  }\n  return sum;",
    "  long sum = 0;\n  for(int i = 0; i < sample_names.size(); i++) {\n    if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n      sum += sample_names[i].length();\n    }\n  }\n  return sum;",
    "    long sum = 0;\n    for (auto i = sample_names.begin(); i != sample_names.end(); i++) {\n        if (islower(i->at(0))) {\n            sample_names.erase(i);\n            i--;\n        }\n        else {\n            sum += i->length();\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for (int i = 0; i < sample_names.size(); i++) {\n        if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;",
    "  long sum = 0;\n  for (int i = 0; i < sample_names.size(); i++) {\n    if (islower(sample_names[i][0])) {\n      continue;\n    }\n    sum += sample_names[i].size();\n  }\n  return sum;",
    "    long sum = 0;\n    for (int i = 0; i < sample_names.size(); i++) {\n        if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].size();\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for (int i = 0; i < sample_names.size(); i++) {\n        if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].size();\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for (int i = 0; i < sample_names.size(); i++) {\n        if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(isupper(sample_names[i][0])) {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for (int i = 0; i < sample_names.size(); i++) {\n        if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for (int i = 0; i < sample_names.size(); i++) {\n        if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].size();\n        }\n    }\n    return sum;",
    "\tlong sum = 0;\n\tfor (int i = 0; i < sample_names.size(); i++) {\n\t\tif (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n\t\t\tsum += sample_names[i].length();\n\t\t}\n\t}\n\treturn sum;",
    "    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;"
  ]
}