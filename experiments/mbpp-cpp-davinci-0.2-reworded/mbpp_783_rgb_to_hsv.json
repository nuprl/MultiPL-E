{
  "name": "mbpp_783_rgb_to_hsv",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nstd::any rgb_to_hsv(long r, long g, long b) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_783_rgb_to_hsv.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = rgb_to_hsv;\n    assert(candidate((255), (255), (255)) == std::make_tuple(0, 0.0, 100.0));\n    assert(candidate((0), (215), (0)) == std::make_tuple(120.0, 100.0, 84.31372549019608));\n    assert(candidate((10), (215), (110)) == std::make_tuple(149.26829268292684, 95.34883720930233, 84.31372549019608));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0;\n    long s = 0;\n    long v = max;\n    long diff = max - min;\n    if (max != 0) {\n        s = 255 * diff / max;\n    }\n    if (s != 0) {\n        if (r == max) {\n            h = (g - b) * 60 / diff;\n        } else if (g == max) {\n            h = 120 + (b - r) * 60 / diff;\n        } else {\n            h = 240 + (r - g) * 60 / diff;\n        }\n        if (h < 0) {\n            h += 360;\n        }\n    }\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0;\n    long s = 0;\n    long v = max;\n    long d = max - min;\n    if (max != 0) {\n        s = d * 100 / max;\n    }\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = (g - b) * 60 / d;\n    } else if (max == g) {\n        h = (b - r) * 60 / d + 120;\n    } else if (max == b) {\n        h = (r - g) * 60 / d + 240;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    return std::make_tuple(h, s, v);",
    "    // TODO\n    return std::any();",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    double h, s, v;\n    v = max;\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 1.0 - min / max;\n    }\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = 60 * (g - b) / (max - min);\n    } else if (max == g) {\n        h = 60 * (b - r) / (max - min) + 120;\n    } else {\n        h = 60 * (r - g) / (max - min) + 240;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    float h, s, v;\n    float r_f = r / 255.0;\n    float g_f = g / 255.0;\n    float b_f = b / 255.0;\n    float max = std::max(r_f, std::max(g_f, b_f));\n    float min = std::min(r_f, std::min(g_f, b_f));\n    float diff = max - min;\n    if (max == min) {\n        h = 0;\n    } else if (max == r_f) {\n        h = 60 * (g_f - b_f) / diff;\n    } else if (max == g_f) {\n        h = 60 * (b_f - r_f) / diff + 120;\n    } else {\n        h = 60 * (r_f - g_f) / diff + 240;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = diff / max;\n    }\n    v = max;\n    return std::make_tuple(h, s, v);",
    "    float r_f = r / 255.0;\n    float g_f = g / 255.0;\n    float b_f = b / 255.0;\n    float cmax = std::max(r_f, std::max(g_f, b_f));\n    float cmin = std::min(r_f, std::min(g_f, b_f));\n    float delta = cmax - cmin;\n    float h = 0.0;\n    float s = 0.0;\n    float v = cmax;\n    if (delta == 0.0) {\n        h = 0.0;\n    } else if (cmax == r_f) {\n        h = 60.0 * (fmod(((g_f - b_f) / delta), 6.0));\n    } else if (cmax == g_f) {\n        h = 60.0 * (((b_f - r_f) / delta) + 2.0);\n    } else if (cmax == b_f) {\n        h = 60.0 * (((r_f - g_f) / delta) + 4.0);\n    }\n    if (cmax == 0.0) {\n        s = 0.0;\n    } else {\n        s = delta / cmax;\n    }\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n\n    long h = 0;\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = 60 * (g - b) / (max - min);\n    } else if (max == g) {\n        h = 60 * (b - r) / (max - min) + 120;\n    } else if (max == b) {\n        h = 60 * (r - g) / (max - min) + 240;\n    }\n\n    long s = 0;\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 1 - (min / max);\n    }\n\n    long v = max;\n\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0;\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = 60 * (g - b) / (max - min);\n    } else if (max == g) {\n        h = 60 * (b - r) / (max - min) + 120;\n    } else if (max == b) {\n        h = 60 * (r - g) / (max - min) + 240;\n    }\n    long s = 0;\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 1 - min / max;\n    }\n    long v = max;\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0;\n    long s = 0;\n    long v = max;\n    if (max != 0) {\n        s = 255 * (max - min) / max;\n    }\n    if (s != 0) {\n        if (r == max) {\n            h = 0 + 43 * (g - b) / (max - min);\n        } else if (g == max) {\n            h = 85 + 43 * (b - r) / (max - min);\n        } else {\n            h = 171 + 43 * (r - g) / (max - min);\n        }\n    }\n    return std::make_tuple(h, s, v);",
    "    // TODO",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0;\n    long s = 0;\n    long v = max;\n    long diff = max - min;\n    if (max != 0) {\n        s = diff * 100 / max;\n    }\n    if (s != 0) {\n        if (r == max) {\n            h = (g - b) * 60 / diff;\n        } else if (g == max) {\n            h = 120 + (b - r) * 60 / diff;\n        } else {\n            h = 240 + (r - g) * 60 / diff;\n        }\n        if (h < 0) {\n            h += 360;\n        }\n    }\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0;\n    long s = 0;\n    long v = max;\n    long d = max - min;\n    if (max != 0) {\n        s = d * 100 / max;\n        if (max == r) {\n            h = (g - b) * 60 / d;\n        } else if (max == g) {\n            h = (b - r) * 60 / d + 120;\n        } else if (max == b) {\n            h = (r - g) * 60 / d + 240;\n        }\n        if (h < 0) {\n            h += 360;\n        }\n    }\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h, s, v;\n    v = max;\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 255 * long(max - min) / max;\n    }\n    if (max == min) {\n        h = 0;\n    } else {\n        if (max == r) {\n            h = 0 + 43 * (g - b) / (max - min);\n        } else if (max == g) {\n            h = 85 + 43 * (b - r) / (max - min);\n        } else {\n            h = 171 + 43 * (r - g) / (max - min);\n        }\n    }\n    return std::make_tuple(h, s, v);",
    "    float r_f = r/255.0;\n    float g_f = g/255.0;\n    float b_f = b/255.0;\n    float Cmax = std::max(r_f, std::max(g_f, b_f));\n    float Cmin = std::min(r_f, std::min(g_f, b_f));\n    float delta = Cmax - Cmin;\n    float h = 0;\n    if(delta == 0) {\n        h = 0;\n    } else if(Cmax == r_f) {\n        h = 60 * (((g_f - b_f)/delta) % 6);\n    } else if(Cmax == g_f) {\n        h = 60 * (((b_f - r_f)/delta) + 2);\n    } else if(Cmax == b_f) {\n        h = 60 * (((r_f - g_f)/delta) + 4);\n    }\n    float s = 0;\n    if(Cmax == 0) {\n        s = 0;\n    } else {\n        s = delta/Cmax;\n    }\n    float v = Cmax;\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0, s = 0, v = 0;\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = 60 * (g - b) / (max - min);\n    } else if (max == g) {\n        h = 60 * (b - r) / (max - min) + 120;\n    } else if (max == b) {\n        h = 60 * (r - g) / (max - min) + 240;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = (max - min) * 100 / max;\n    }\n    v = max * 100 / 255;\n    return std::make_tuple(h, s, v);",
    "  long max = std::max(r, std::max(g, b));\n  long min = std::min(r, std::min(g, b));\n  long h = 0;\n  if (max == min) {\n    h = 0;\n  } else if (max == r) {\n    h = 60 * (g - b) / (max - min);\n  } else if (max == g) {\n    h = 120 + 60 * (b - r) / (max - min);\n  } else if (max == b) {\n    h = 240 + 60 * (r - g) / (max - min);\n  }\n  if (h < 0) {\n    h += 360;\n  }\n  long s = 0;\n  if (max != 0) {\n    s = (max - min) * 100 / max;\n  }\n  long v = max * 100 / 255;\n  return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0;\n    long s = 0;\n    long v = max;\n    long d = max - min;\n    if (max != 0) {\n        s = d * 100 / max;\n    }\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = (g - b) * 60 / d;\n    } else if (max == g) {\n        h = (b - r) * 60 / d + 120;\n    } else if (max == b) {\n        h = (r - g) * 60 / d + 240;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0;\n    long s = 0;\n    long v = max;\n    long d = max - min;\n    if (max != 0) {\n        s = d * 100 / max;\n    }\n    if (d != 0) {\n        if (r == max) {\n            h = (g - b) * 60 / d;\n        } else if (g == max) {\n            h = (b - r) * 60 / d + 120;\n        } else if (b == max) {\n            h = (r - g) * 60 / d + 240;\n        }\n    }\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long cmax = std::max(r, std::max(g, b));\n    long cmin = std::min(r, std::min(g, b));\n    long delta = cmax - cmin;\n    long h = 0;\n    if (delta == 0) {\n        h = 0;\n    } else if (cmax == r) {\n        h = 60 * ((g - b) / delta % 6);\n    } else if (cmax == g) {\n        h = 60 * ((b - r) / delta + 2);\n    } else if (cmax == b) {\n        h = 60 * ((r - g) / delta + 4);\n    }\n    long s = 0;\n    if (cmax == 0) {\n        s = 0;\n    } else {\n        s = delta / cmax;\n    }\n    long v = cmax;\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0;\n    long s = 0;\n    long v = 0;\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = 60 * (g - b) / (max - min);\n    } else if (max == g) {\n        h = 60 * (b - r) / (max - min) + 120;\n    } else if (max == b) {\n        h = 60 * (r - g) / (max - min) + 240;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 1 - min / max;\n    }\n    v = max / 255.0;\n    return std::make_tuple(h, s, v);"
  ]
}