{
  "name": "mbpp_222_check_type",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_222_check_type.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple_1 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::tuple<int, float, double> test_tuple_2 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::tuple<int, float, double> test_tuple_3 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    if (typeid(test_tuple_1) == typeid(test_tuple_2) && typeid(test_tuple_2) == typeid(test_tuple_3)) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::string type_name = test_tuple.type().name();\n    for (auto i : test_tuple) {\n        if (i.type().name() != type_name) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "/tmp/tmpko0ys1up.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpko0ys1up.cpp:6:19: error: no matching function for call to \u2018begin(std::any&)\u2019\n    6 |     for (auto i : test_tuple) {\n      |                   ^~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/range_access.h:36,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmpko0ys1up.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note: candidate: \u2018template<class _Tp> constexpr const _Tp* std::begin(std::initializer_list<_Tp>)\u2019\n   89 |     begin(initializer_list<_Tp> __ils) noexcept\n      |     ^~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note:   template argument deduction/substitution failed:\n/tmp/tmpko0ys1up.cpp:6:19: note:   \u2018std::any\u2019 is not derived from \u2018std::initializer_list<_Tp>\u2019\n    6 |     for (auto i : test_tuple) {\n      |                   ^~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, int, int> test_tuple1(1, 2, 3);\n    std::tuple<std::string, std::string, std::string> test_tuple2(\"a\", \"b\", \"c\");\n    std::tuple<std::string, std::string, int> test_tuple3(\"a\", \"b\", 3);\n    std::tuple<int, std::string, int> test_tuple4(1, \"b\", 3);\n    std::tuple<int, int, std::string> test_tuple5(1, 2, \"c\");\n    std::tuple<int, int, int> test_tuple6(1, 2, 3);\n    std::tuple<std::string, std::string, std::string> test_tuple7(\"a\", \"b\", \"c\");\n    std::tuple<std::string, std::string, int> test_tuple8(\"a\", \"b\", 3);\n    std::tuple<int, std::string, int> test_tuple9(1, \"b\", 3);\n    std::tuple<int, int, std::string> test_tuple10(1, 2, \"c\");\n    std::tuple<int, int, int> test_tuple11(1, 2, 3);\n    std::tuple<std::string, std::string, std::string> test_tuple12(\"a\", \"b\", \"c\");\n    std::tuple<std::string, std::string, int> test_tuple13(\"a\", \"b\", 3);\n    std::tuple<int, std::string, int> test_tuple14(1, \"b\", 3);\n    std::tuple<int, int, std::string> test_tuple15(1, 2, \"c\");\n    std::tuple<int, int, int> test_tuple16(1, 2, 3);\n    std::tuple<std::string, std::string, std::string> test_tuple17(\"a\", \"b\", \"c\");\n    std::tuple<std::string, std::string, int> test_tuple18\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "/tmp/tmpdkpqskd1.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpdkpqskd1.cpp:23:1: error: expected initializer before \u2018}\u2019 token\n   23 | }\n      | ^\n/tmp/tmpdkpqskd1.cpp:23:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::vector<std::any> test_vector;\n    std::any_cast<std::vector<std::any>>(test_tuple);\n    std::any first_element = test_vector[0];\n    for(int i = 1; i < test_vector.size(); i++) {\n        if(first_element.type() != test_vector[i].type()) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    return std::any_cast<int>(test_tuple) == std::any_cast<int>(test_tuple);\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple = std::make_tuple(1, 2.0, 3.0);\n    std::any_cast<int>(test_tuple);\n    std::any_cast<float>(test_tuple);\n    std::any_cast<double>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "/tmp/tmpyx3vcwj4.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpyx3vcwj4.cpp:5:36: error: declaration of \u2018std::tuple<int, float, double> test_tuple\u2019 shadows a parameter\n    5 |     std::tuple<int, float, double> test_tuple = std::make_tuple(1, 2.0, 3.0);\n      |                                    ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> t1(10, 15.5, 1e5);\n    std::tuple<char, std::string, std::string> t2('a', \"abc\", \"xyz\");\n    std::tuple<std::string, std::vector<int>, std::list<int>> t3(\"geeks\", {1, 2, 3}, {10, 20, 30});\n    std::tuple<double, char, std::string> t4(10.5, 'a', \"geeks\");\n    std::tuple<int, int, int, int> t5(10, 20, 30, 40);\n    std::tuple<int, int, int, int, int> t6(10, 20, 30, 40, 50);\n    std::tuple<int, int, int, int, int, int> t7(10, 20, 30, 40, 50, 60);\n    std::tuple<int, int, int, int, int, int, int> t8(10, 20, 30, 40, 50, 60, 70);\n    std::tuple<int, int, int, int, int, int, int, int> t9(10, 20, 30, 40, 50, 60, 70, 80);\n    std::tuple<int, int, int, int, int, int, int, int, int> t10(10, 20, 30, 40, 50, 60, 70, 80, 90);\n    std::tuple<int, int, int, int, int, int, int, int, int, int> t11(10, 20, 30, 40, 50, 60, 70, 80, 90, 100);\n    std::tuple<int, int, int, int, int, int, int, int, int, int, int> t12(10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110);\n    std::tuple<int, int, int, int, int, int, int, int, int, int, int, int> t13(10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120);\n    std::tuple<\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "/tmp/tmp23dfscdo.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmp23dfscdo.cpp:18:15: error: template argument 1 is invalid\n   18 |     std::tuple<\n      |               ^\n/tmp/tmp23dfscdo.cpp:19:1: error: expected unqualified-id before \u2018}\u2019 token\n   19 | }\n      | ^\n/tmp/tmp23dfscdo.cpp:19:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    try {\n        std::any_cast<std::string>(test_tuple);\n        return false;\n    }\n    catch(std::bad_any_cast& e) {\n        return true;\n    }\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple1;\n    std::tuple<int, float, double> test_tuple2;\n    std::tuple<int, float, double> test_tuple3;\n    std::tuple<int, float, double> test_tuple4;\n    std::tuple<int, float, double> test_tuple5;\n    std::tuple<int, float, double> test_tuple6;\n    std::tuple<int, float, double> test_tuple7;\n    std::tuple<int, float, double> test_tuple8;\n    std::tuple<int, float, double> test_tuple9;\n    std::tuple<int, float, double> test_tuple10;\n    std::tuple<int, float, double> test_tuple11;\n    std::tuple<int, float, double> test_tuple12;\n    std::tuple<int, float, double> test_tuple13;\n    std::tuple<int, float, double> test_tuple14;\n    std::tuple<int, float, double> test_tuple15;\n    std::tuple<int, float, double> test_tuple16;\n    std::tuple<int, float, double> test_tuple17;\n    std::tuple<int, float, double> test_tuple18;\n    std::tuple<int, float, double> test_tuple19;\n    std::tuple<int, float, double> test_tuple20;\n    std::tuple<int, float, double> test_tuple21;\n    std::tuple<int, float, double> test_tuple22;\n    std::tuple<int, float, double> test_tuple23;\n    std::tuple<int, float, double> test_tuple24;\n    std::tuple<int, float, double> test_tuple25;\n    std::tuple<int, float, double> test_tuple26;\n    std::tuple<int, float, double> test_tuple27\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "/tmp/tmpmfnoyic8.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpmfnoyic8.cpp:32:1: error: expected initializer before \u2018}\u2019 token\n   32 | }\n      | ^\n/tmp/tmpmfnoyic8.cpp:32:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple_1(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_2(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_3(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_4(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_5(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_6(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_7(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_8(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_9(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_10(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_11(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_12(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_13(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_14(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_15(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_16(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_17(1, 2.0, 3.0);\n   \n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "tmp09ixxfxe: /tmp/tmp09ixxfxe.cpp:26: int main(): Assertion `candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> t1(10, 15.5, 1e5);\n    std::tuple<char, int, float, double> t2('G', 10, 15.5, 1e5);\n    std::tuple<std::string, std::string, std::string> t3(\"Geeks\", \"for\", \"Geeks\");\n    std::tuple<std::string, std::string, int> t4(\"Geeks\", \"for\", \"Geeks\");\n    std::tuple<std::string, std::string, std::string> t5(\"Geeks\", \"for\", \"Geeks\");\n    std::tuple<std::string, std::string, std::string> t6(\"Geeks\", \"for\", \"Geeks\");\n    std::tuple<std::string, std::string, std::string> t7(\"Geeks\", \"for\", \"Geeks\");\n    std::tuple<std::string, std::string, std::string> t8(\"Geeks\", \"for\", \"Geeks\");\n    std::tuple<std::string, std::string, std::string> t9(\"Geeks\", \"for\", \"Geeks\");\n    std::tuple<std::string, std::string, std::string> t10(\"Geeks\", \"for\", \"Geeks\");\n    std::tuple<std::string, std::string, std::string> t11(\"Geeks\", \"for\", \"Geeks\");\n    std::tuple<std::string, std::string, std::string> t12(\"Geeks\", \"for\", \"Geeks\");\n    std::tuple<std::string, std::string, std::string> t13(\"Geeks\", \"for\", \"Geeks\");\n    std::tuple<std::string, std::string, std::string> t14(\"Geeks\", \"for\", \"Geeks\");\n    std::tuple<std::string, std::string, std::string> t15(\"Geeks\", \"for\", \"Geeks\");\n    std::tuple<std::string, std::string, std::string> t16(\"Geeks\", \"for\", \"Geeks\");\n    std::tuple<std::string\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "/tmp/tmpmemlj9fw.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpmemlj9fw.cpp:8:73: error: no matching function for call to \u2018std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>::tuple(const char [6], const char [4], const char [6])\u2019\n    8 |     std::tuple<std::string, std::string, int> t4(\"Geeks\", \"for\", \"Geeks\");\n      |                                                                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/functional:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/pstl/glue_algorithm_defs.h:13,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:71,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpmemlj9fw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:808:11: note: candidate: \u2018template<class _Alloc, class _Dummy, class ... _UElements, typename std::enable_if<((std::_TC<((3 == sizeof... (_UElements)) && (! std::is_same<std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::tuple<_Tail ...> >::value)), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>::_MoveConstructibleTuple<_UElements ...>() && (! std::_TC<((3 == sizeof... (_UElements)) && (! std::is_same<std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::tuple<_Tail ...> >::value)), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, int, int> test_tuple_int = std::any_cast<std::tuple<int, int, int>>(test_tuple);\n    std::tuple<float, float, float> test_tuple_float = std::any_cast<std::tuple<float, float, float>>(test_tuple);\n    std::tuple<double, double, double> test_tuple_double = std::any_cast<std::tuple<double, double, double>>(test_tuple);\n    std::tuple<char, char, char> test_tuple_char = std::any_cast<std::tuple<char, char, char>>(test_tuple);\n    std::tuple<std::string, std::string, std::string> test_tuple_string = std::any_cast<std::tuple<std::string, std::string, std::string>>(test_tuple);\n    if (test_tuple_int.size() == 3) {\n        return true;\n    } else if (test_tuple_float.size() == 3) {\n        return true;\n    } else if (test_tuple_double.size() == 3) {\n        return true;\n    } else if (test_tuple_char.size() == 3) {\n        return true;\n    } else if (test_tuple_string.size() == 3) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "/tmp/tmp5mcknfyb.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmp5mcknfyb.cpp:10:24: error: \u2018class std::tuple<int, int, int>\u2019 has no member named \u2018size\u2019\n   10 |     if (test_tuple_int.size() == 3) {\n      |                        ^~~~\n/tmp/tmp5mcknfyb.cpp:12:33: error: \u2018class std::tuple<float, float, float>\u2019 has no member named \u2018size\u2019\n   12 |     } else if (test_tuple_float.size() == 3) {\n      |                                 ^~~~\n/tmp/tmp5mcknfyb.cpp:14:34: error: \u2018class std::tuple<double, double, double>\u2019 has no member named \u2018size\u2019\n   14 |     } else if (test_tuple_double.size() == 3) {\n      |                                  ^~~~\n/tmp/tmp5mcknfyb.cpp:16:32: error: \u2018class std::tuple<char, char, char>\u2019 has no member named \u2018size\u2019\n   16 |     } else if (test_tuple_char.size() == 3) {\n      |                                ^~~~\n/tmp/tmp5mcknfyb.cpp:18:34: error: \u2018class std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >\u2019 has no member named \u2018size\u2019\n   18 |     } else if (test_tuple_string.size() == 3) {\n      |                                  ^~~~\n/tmp/tmp5mcknfyb.cpp:23:1: warning: control reaches end of non-void function [-Wreturn-type]\n   23 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, int, int> test_tuple1(1, 2, 3);\n    std::tuple<std::string, std::string, std::string> test_tuple2(\"a\", \"b\", \"c\");\n    std::tuple<int, std::string, int> test_tuple3(1, \"a\", 3);\n    std::tuple<std::string, int, int> test_tuple4(\"a\", 1, 2);\n    std::tuple<int, int, std::string> test_tuple5(1, 2, \"a\");\n    std::tuple<int, std::string, std::string> test_tuple6(1, \"a\", \"b\");\n    std::tuple<std::string, int, std::string> test_tuple7(\"a\", 1, \"b\");\n    std::tuple<std::string, std::string, int> test_tuple8(\"a\", \"b\", 1);\n    std::tuple<std::string, std::string, std::string> test_tuple9(\"a\", \"b\", \"c\");\n    std::tuple<int, int, int> test_tuple10(1, 2, 3);\n    std::tuple<int, int, int> test_tuple11(1, 2, 3);\n    std::tuple<int, int, int> test_tuple12(1, 2, 3);\n    std::tuple<int, int, int> test_tuple13(1, 2, 3);\n    std::tuple<int, int, int> test_tuple14(1, 2, 3);\n    std::tuple<int, int, int> test_tuple15(1, 2, 3);\n    std::tuple<int, int, int> test_tuple16(1, 2, 3);\n    std::tuple<int, int, int> test_tuple17(1, 2, 3);\n    std::tuple<int, int, int> test_tuple18(1, 2, 3);\n    std::tuple<int, int, int> test_tuple19(1, 2\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "/tmp/tmptjqsomem.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmptjqsomem.cpp:23:48: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   23 |     std::tuple<int, int, int> test_tuple19(1, 2\n      |                                           ~    ^\n      |                                                )\n   24 | }\n      | ~                                               \n/tmp/tmptjqsomem.cpp:24:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n   24 | }\n      | ^\n/tmp/tmptjqsomem.cpp:24:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::string type_name = test_tuple.type().name();\n    for (auto &i : test_tuple) {\n        if (i.type().name() != type_name) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "/tmp/tmpzuafra_f.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpzuafra_f.cpp:6:20: error: no matching function for call to \u2018begin(std::any&)\u2019\n    6 |     for (auto &i : test_tuple) {\n      |                    ^~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/range_access.h:36,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmpzuafra_f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note: candidate: \u2018template<class _Tp> constexpr const _Tp* std::begin(std::initializer_list<_Tp>)\u2019\n   89 |     begin(initializer_list<_Tp> __ils) noexcept\n      |     ^~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note:   template argument deduction/substitution failed:\n/tmp/tmpzuafra_f.cpp:6:20: note:   \u2018std::any\u2019 is not derived from \u2018std::initializer_list<_Tp>\u2019\n    6 |     for (auto &i : test_tuple) {\n      |                    ^~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double, char> test_tuple_1(1, 2.3, 4.5, 'a');\n    std::tuple<int, float, double, char> test_tuple_2(1, 2.3, 4.5, 'a');\n    std::tuple<int, float, double, char> test_tuple_3(1, 2.3, 4.5, 'a');\n    std::tuple<int, float, double, char> test_tuple_4(1, 2.3, 4.5, 'a');\n    std::tuple<int, float, double, char> test_tuple_5(1, 2.3, 4.5, 'a');\n    std::tuple<int, float, double, char> test_tuple_6(1, 2.3, 4.5, 'a');\n    std::tuple<int, float, double, char> test_tuple_7(1, 2.3, 4.5, 'a');\n    std::tuple<int, float, double, char> test_tuple_8(1, 2.3, 4.5, 'a');\n    std::tuple<int, float, double, char> test_tuple_9(1, 2.3, 4.5, 'a');\n    std::tuple<int, float, double, char> test_tuple_10(1, 2.3, 4.5, 'a');\n    std::tuple<int, float, double, char> test_tuple_11(1, 2.3, 4.5, 'a');\n    std::tuple<int, float, double, char> test_tuple_12(1, 2.3, 4.5, 'a');\n    std::tuple<int, float, double, char> test_tuple_13(1, 2.3, 4.5, 'a');\n    std::tuple<int, float, double, char> test_tuple_14(1, 2.3, 4.5, 'a');\n    std::tuple<int, float, double, char> test_tuple_15(\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "/tmp/tmpnpvis4o0.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpnpvis4o0.cpp:20:1: error: expected primary-expression before \u2018}\u2019 token\n   20 | }\n      | ^\n/tmp/tmpnpvis4o0.cpp:20:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmpnpvis4o0.cpp:20:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::vector<std::any> test_vector;\n    std::any_cast<std::vector<std::any>>(test_tuple);\n    std::any type = test_vector[0];\n    for(int i=1;i<test_vector.size();i++) {\n        if(type != test_vector[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "/tmp/tmpk_umpxwo.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpk_umpxwo.cpp:9:17: error: no match for \u2018operator!=\u2019 (operand types are \u2018std::any\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<std::any>, std::any>::value_type\u2019 {aka \u2018std::any\u2019})\n    9 |         if(type != test_vector[i]) {\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n                 from /tmp/tmpk_umpxwo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1037:5: note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator!=(const std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1037 |     operator!=(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>& __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1037:5: note:   template argument deduction/substitution failed:\n/tmp/tmpk_umpxwo.cpp:9:33: note:   \u2018std::any\u2019 is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n    9 |         if(type != test_vector[i]) {\n      |                                 ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n                 from /tmp/tmpk_umpxwo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1112:5: note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc> bool std::__cxx11::operator!=(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1112 |     operator!=(const __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1112:5: note:   template argument deduction/substitution failed:\n/tmp/tmpk_umpxwo.cpp:9:33: note:   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple_1 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::tuple<int, float, double> test_tuple_2 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::tuple<int, float, double> test_tuple_3 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    if (typeid(std::get<0>(test_tuple_1)) == typeid(std::get<1>(test_tuple_2)) && typeid(std::get<1>(test_tuple_2)) == typeid(std::get<2>(test_tuple_3))) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, std::string> test_tuple1;\n    std::tuple<int, float, std::string> test_tuple2;\n    std::tuple<int, float, std::string> test_tuple3;\n    std::tuple<int, float, std::string> test_tuple4;\n    std::tuple<int, float, std::string> test_tuple5;\n    std::tuple<int, float, std::string> test_tuple6;\n    std::tuple<int, float, std::string> test_tuple7;\n    std::tuple<int, float, std::string> test_tuple8;\n    std::tuple<int, float, std::string> test_tuple9;\n    std::tuple<int, float, std::string> test_tuple10;\n    std::tuple<int, float, std::string> test_tuple11;\n    std::tuple<int, float, std::string> test_tuple12;\n    std::tuple<int, float, std::string> test_tuple13;\n    std::tuple<int, float, std::string> test_tuple14;\n    std::tuple<int, float, std::string> test_tuple15;\n    std::tuple<int, float, std::string> test_tuple16;\n    std::tuple<int, float, std::string> test_tuple17;\n    std::tuple<int, float, std::string> test_tuple18;\n    std::tuple<int, float, std::string> test_tuple19;\n    std::tuple<int, float, std::string> test_tuple20;\n    std::tuple<int, float, std::string> test_tuple21;\n    std::tuple<int, float, std::string> test_tuple22;\n    std::tuple<int, float, std::string> test_tuple23;\n    std::tuple<int, float, std::string> test_tuple24;\n    std::tuple<int\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "/tmp/tmperyzepas.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmperyzepas.cpp:29:16: error: template argument 1 is invalid\n   29 |     std::tuple<int\n      |                ^~~\n/tmp/tmperyzepas.cpp:30:1: error: expected unqualified-id before \u2018}\u2019 token\n   30 | }\n      | ^\n/tmp/tmperyzepas.cpp:30:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double, char> test_tuple_1(1, 2.0, 3.0, 'a');\n    std::tuple<int, float, double, char> test_tuple_2(1, 2.0, 3.0, 'a');\n    std::tuple<int, float, double, char> test_tuple_3(1, 2.0, 3.0, 'a');\n    std::tuple<int, float, double, char> test_tuple_4(1, 2.0, 3.0, 'a');\n    std::tuple<int, float, double, char> test_tuple_5(1, 2.0, 3.0, 'a');\n    std::tuple<int, float, double, char> test_tuple_6(1, 2.0, 3.0, 'a');\n    std::tuple<int, float, double, char> test_tuple_7(1, 2.0, 3.0, 'a');\n    std::tuple<int, float, double, char> test_tuple_8(1, 2.0, 3.0, 'a');\n    std::tuple<int, float, double, char> test_tuple_9(1, 2.0, 3.0, 'a');\n    std::tuple<int, float, double, char> test_tuple_10(1, 2.0, 3.0, 'a');\n    std::tuple<int, float, double, char> test_tuple_11(1, 2.0, 3.0, 'a');\n    std::tuple<int, float, double, char> test_tuple_12(1, 2.0, 3.0, 'a');\n    std::tuple<int, float, double, char> test_tuple_13(1, 2.0, 3.0, 'a');\n    std::tuple<int, float, double, char> test_tuple_14(1, 2.0, 3.0, 'a');\n    std::tuple<int, float, double, char> test_tuple_15(\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "/tmp/tmpevd1j6ri.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpevd1j6ri.cpp:20:1: error: expected primary-expression before \u2018}\u2019 token\n   20 | }\n      | ^\n/tmp/tmpevd1j6ri.cpp:20:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmpevd1j6ri.cpp:20:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple1 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::tuple<int, float, double> test_tuple2 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::tuple<int, float, double> test_tuple3 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    return (typeid(test_tuple1) == typeid(test_tuple2) && typeid(test_tuple2) == typeid(test_tuple3));\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    // std::any_cast<std::string>(test_tuple);\n    std::any_cast<int>(test_tuple);\n    std::any_cast<float>(test_tuple);\n    std::any_cast<double>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple_1(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_2(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_3(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_4(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_5(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_6(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_7(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_8(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_9(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_10(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_11(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_12(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_13(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_14(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_15(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_16(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_17(1, 2.0, 3.0);\n   \n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "tmp09ixxfxe: /tmp/tmp09ixxfxe.cpp:26: int main(): Assertion `candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    try {\n        std::any_cast<float>(test_tuple);\n    }\n    catch (const std::bad_any_cast& e) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple_1;\n    std::tuple<int, float, double> test_tuple_2;\n    std::tuple<int, float, double> test_tuple_3;\n    std::tuple<int, float, double> test_tuple_4;\n    std::tuple<int, float, double> test_tuple_5;\n    std::tuple<int, float, double> test_tuple_6;\n    std::tuple<int, float, double> test_tuple_7;\n    std::tuple<int, float, double> test_tuple_8;\n    std::tuple<int, float, double> test_tuple_9;\n    std::tuple<int, float, double> test_tuple_10;\n    std::tuple<int, float, double> test_tuple_11;\n    std::tuple<int, float, double> test_tuple_12;\n    std::tuple<int, float, double> test_tuple_13;\n    std::tuple<int, float, double> test_tuple_14;\n    std::tuple<int, float, double> test_tuple_15;\n    std::tuple<int, float, double> test_tuple_16;\n    std::tuple<int, float, double> test_tuple_17;\n    std::tuple<int, float, double> test_tuple_18;\n    std::tuple<int, float, double> test_tuple_19;\n    std::tuple<int, float, double> test_tuple_20;\n    std::tuple<int, float, double> test_tuple_21;\n    std::tuple<int, float, double> test_tuple_22;\n    std::tuple<int, float, double> test_tuple_23;\n    std::tuple<int, float, double> test_tuple_24;\n    std::tuple<int, float, double> test_tuple_25;\n    std::tuple<int, float, double\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "/tmp/tmpo_1p3c_v.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpo_1p3c_v.cpp:30:28: error: template argument 3 is invalid\n   30 |     std::tuple<int, float, double\n      |                            ^~~~~~\n/tmp/tmpo_1p3c_v.cpp:31:1: error: expected unqualified-id before \u2018}\u2019 token\n   31 | }\n      | ^\n/tmp/tmpo_1p3c_v.cpp:31:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> tuple_1 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::tuple<int, float, double> tuple_2 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::tuple<int, float, double> tuple_3 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    if (typeid(std::get<0>(tuple_1)) == typeid(std::get<1>(tuple_2)) && typeid(std::get<1>(tuple_2)) == typeid(std::get<2>(tuple_3))) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, int, int> test_tuple1 = std::any_cast<std::tuple<int, int, int>>(test_tuple);\n    int a = std::get<0>(test_tuple1);\n    int b = std::get<1>(test_tuple1);\n    int c = std::get<2>(test_tuple1);\n    if (typeid(a).name() == typeid(b).name() && typeid(b).name() == typeid(c).name()) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple1;\n    std::tuple<int, float, double> test_tuple2;\n    std::tuple<int, float, double> test_tuple3;\n    std::tuple<int, float, double> test_tuple4;\n    std::tuple<int, float, double> test_tuple5;\n    std::tuple<int, float, double> test_tuple6;\n    std::tuple<int, float, double> test_tuple7;\n    std::tuple<int, float, double> test_tuple8;\n    std::tuple<int, float, double> test_tuple9;\n    std::tuple<int, float, double> test_tuple10;\n    std::tuple<int, float, double> test_tuple11;\n    std::tuple<int, float, double> test_tuple12;\n    std::tuple<int, float, double> test_tuple13;\n    std::tuple<int, float, double> test_tuple14;\n    std::tuple<int, float, double> test_tuple15;\n    std::tuple<int, float, double> test_tuple16;\n    std::tuple<int, float, double> test_tuple17;\n    std::tuple<int, float, double> test_tuple18;\n    std::tuple<int, float, double> test_tuple19;\n    std::tuple<int, float, double> test_tuple20;\n    std::tuple<int, float, double> test_tuple21;\n    std::tuple<int, float, double> test_tuple22;\n    std::tuple<int, float, double> test_tuple23;\n    std::tuple<int, float, double> test_tuple24;\n    std::tuple<int, float, double> test_tuple25;\n    std::tuple<int, float, double> test_tuple26;\n    std::tuple<int, float, double> test_tuple27\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "/tmp/tmpmfnoyic8.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpmfnoyic8.cpp:32:1: error: expected initializer before \u2018}\u2019 token\n   32 | }\n      | ^\n/tmp/tmpmfnoyic8.cpp:32:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<std::tuple<int, int, int>>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple_1(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_2(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_3(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_4(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_5(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_6(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_7(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_8(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_9(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_10(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_11(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_12(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_13(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_14(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_15(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_16(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_17(1, 2.0, 3.0);\n   \n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "tmp09ixxfxe: /tmp/tmp09ixxfxe.cpp:26: int main(): Assertion `candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::vector<std::any> test_vector;\n    test_vector.push_back(test_tuple);\n    std::string type_name = std::any_cast<std::string>(test_vector[0]);\n    for(int i=1; i<test_vector.size(); i++) {\n        if(type_name != std::any_cast<std::string>(test_vector[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::string test_type = test_tuple.type().name();\n    for (int i = 0; i < std::tuple_size<decltype(test_tuple)>::value; i++) {\n        if (test_tuple.type().name() != test_type) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "/tmp/tmpyfc8v2vm.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpyfc8v2vm.cpp:6:64: error: incomplete type \u2018std::tuple_size<std::any>\u2019 used in nested name specifier\n    6 |     for (int i = 0; i < std::tuple_size<decltype(test_tuple)>::value; i++) {\n      |                                                                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, char, float> test_tuple_1 = std::any_cast<std::tuple<int, char, float>>(test_tuple);\n    std::tuple<int, int, int> test_tuple_2 = std::any_cast<std::tuple<int, int, int>>(test_tuple);\n    std::tuple<char, char, char> test_tuple_3 = std::any_cast<std::tuple<char, char, char>>(test_tuple);\n    std::tuple<float, float, float> test_tuple_4 = std::any_cast<std::tuple<float, float, float>>(test_tuple);\n    if(std::is_same<decltype(test_tuple_1), decltype(test_tuple)>::value) {\n        return true;\n    }\n    else if(std::is_same<decltype(test_tuple_2), decltype(test_tuple)>::value) {\n        return true;\n    }\n    else if(std::is_same<decltype(test_tuple_3), decltype(test_tuple)>::value) {\n        return true;\n    }\n    else if(std::is_same<decltype(test_tuple_4), decltype(test_tuple)>::value) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, int, int> t1(10, 20, 30);\n    std::tuple<std::string, std::string, std::string> t2(\"abc\", \"def\", \"ghi\");\n    std::tuple<double, double, double> t3(2.5, 4.5, 6.5);\n    std::tuple<int, std::string, double> t4(10, \"abc\", 2.5);\n    std::tuple<int, int, int> t5(10, 20, 30);\n    std::tuple<int, int, int> t6(10, 20, 30);\n    std::tuple<int, int, int> t7(10, 20, 30);\n    std::tuple<int, int, int> t8(10, 20, 30);\n    std::tuple<int, int, int> t9(10, 20, 30);\n    std::tuple<int, int, int> t10(10, 20, 30);\n    std::tuple<int, int, int> t11(10, 20, 30);\n    std::tuple<int, int, int> t12(10, 20, 30);\n    std::tuple<int, int, int> t13(10, 20, 30);\n    std::tuple<int, int, int> t14(10, 20, 30);\n    std::tuple<int, int, int> t15(10, 20, 30);\n    std::tuple<int, int, int> t16(10, 20, 30);\n    std::tuple<int, int, int> t17(10, 20, 30);\n    std::tuple<int, int, int> t18(10, 20, 30);\n    std::tuple<int, int, int> t19(10, 20, 30);\n    std::tuple<int, int, int> t20(10, 20, 30);\n    std::tuple<int, int, int> t21(10, 20, 30);\n    std::tuple<int, int, int> t22(10, 20, 30);\n    std::tuple<int\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "/tmp/tmpwzx3q2y4.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpwzx3q2y4.cpp:27:16: error: template argument 1 is invalid\n   27 |     std::tuple<int\n      |                ^~~\n/tmp/tmpwzx3q2y4.cpp:28:1: error: expected unqualified-id before \u2018}\u2019 token\n   28 | }\n      | ^\n/tmp/tmpwzx3q2y4.cpp:28:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::string data_type = std::any_cast<std::string>(test_tuple);\n    std::string data_type_1 = std::any_cast<std::string>(test_tuple);\n    return data_type == data_type_1;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n\tbool flag = true;\n\tstd::any_cast<int>(test_tuple);\n\ttry {\n\t\tstd::any_cast<float>(test_tuple);\n\t}\n\tcatch (const std::bad_any_cast& e) {\n\t\tflag = false;\n\t}\n\treturn flag;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    try {\n        std::any_cast<float>(test_tuple);\n    }\n    catch (const std::bad_any_cast& e) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, std::string> test_tuple;\n    std::any_cast<int>(test_tuple);\n    std::any_cast<float>(test_tuple);\n    std::any_cast<std::string>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "/tmp/tmpz54zs30q.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpz54zs30q.cpp:5:41: error: declaration of \u2018std::tuple<int, float, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > test_tuple\u2019 shadows a parameter\n    5 |     std::tuple<int, float, std::string> test_tuple;\n      |                                         ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    return (typeid(test_tuple) == typeid(std::tuple<int, int, int>));\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "tmpfxwjc3ew: /tmp/tmpfxwjc3ew.cpp:9: int main(): Assertion `candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple_1;\n    std::tuple<int, int, int> test_tuple_2;\n    std::tuple<float, float, float> test_tuple_3;\n    std::tuple<double, double, double> test_tuple_4;\n    std::tuple<char, char, char> test_tuple_5;\n    std::tuple<std::string, std::string, std::string> test_tuple_6;\n    std::tuple<int, float, double> test_tuple_7;\n    std::tuple<int, int, int> test_tuple_8;\n    std::tuple<float, float, float> test_tuple_9;\n    std::tuple<double, double, double> test_tuple_10;\n    std::tuple<char, char, char> test_tuple_11;\n    std::tuple<std::string, std::string, std::string> test_tuple_12;\n    if (test_tuple == test_tuple_1 || test_tuple == test_tuple_2 || test_tuple == test_tuple_3 || test_tuple == test_tuple_4 || test_tuple == test_tuple_5 || test_tuple == test_tuple_6 || test_tuple == test_tuple_7 || test_tuple == test_tuple_8 || test_tuple == test_tuple_9 || test_tuple == test_tuple_10 || test_tuple == test_tuple_11 || test_tuple == test_tuple_12) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "/tmp/tmp3ko1347v.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmp3ko1347v.cpp:17:20: error: no match for \u2018operator==\u2019 (operand types are \u2018std::any\u2019 and \u2018std::tuple<int, float, double>\u2019)\n   17 |     if (test_tuple == test_tuple_1 || test_tuple == test_tuple_2 || test_tuple == test_tuple_3 || test_tuple == test_tuple_4 || test_tuple == test_tuple_5 || test_tuple == test_tuple_6 || test_tuple == test_tuple_7 || test_tuple == test_tuple_8 || test_tuple == test_tuple_9 || test_tuple == test_tuple_10 || test_tuple == test_tuple_11 || test_tuple == test_tuple_12) {\n      |         ~~~~~~~~~~ ^~ ~~~~~~~~~~~~\n      |         |             |\n      |         std::any      std::tuple<int, float, double>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n                 from /tmp/tmp3ko1347v.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5: note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>& __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5: note:   template argument deduction/substitution failed:\n/tmp/tmp3ko1347v.cpp:17:23: note:   \u2018std::any\u2019 is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   17 |     if (test_tuple == test_tuple_1 || test_tuple == test_tuple_2 || test_tuple == test_tuple_3 || test_tuple == test_tuple_4 || test_tuple == test_tuple_5 || test_tuple == test_tuple_6 || test_tuple == test_tuple_7 || test_tuple == test_tuple_8 || test_tuple == test_tuple_9 || test_tuple == test_tuple_10 || test_tuple == test_tuple_11 || test_tuple == test_tuple_12) {\n      |                       ^~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, int, int> t1(10, 20, 30);\n    std::tuple<std::string, std::string, std::string> t2(\"abc\", \"def\", \"ghi\");\n    std::tuple<int, std::string, int> t3(10, \"abc\", 30);\n    std::tuple<int, int, int> t4(10, 20, 30);\n    std::tuple<std::string, std::string, std::string> t5(\"abc\", \"def\", \"ghi\");\n    std::tuple<int, std::string, int> t6(10, \"abc\", 30);\n    std::tuple<int, int, int> t7(10, 20, 30);\n    std::tuple<std::string, std::string, std::string> t8(\"abc\", \"def\", \"ghi\");\n    std::tuple<int, std::string, int> t9(10, \"abc\", 30);\n    std::tuple<int, int, int> t10(10, 20, 30);\n    std::tuple<std::string, std::string, std::string> t11(\"abc\", \"def\", \"ghi\");\n    std::tuple<int, std::string, int> t12(10, \"abc\", 30);\n    std::tuple<int, int, int> t13(10, 20, 30);\n    std::tuple<std::string, std::string, std::string> t14(\"abc\", \"def\", \"ghi\");\n    std::tuple<int, std::string, int> t15(10, \"abc\", 30);\n    std::tuple<int, int, int> t16(10, 20, 30);\n    std::tuple<std::string, std::string, std::string> t17(\"abc\", \"def\", \"ghi\");\n    std::tuple<int, std::string, int> t18(10, \"abc\", 30);\n    std::tuple<int, int, int> t19(10, 20, 30);\n    std::tuple<std::string, std::string, std::string> t20(\"\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "/tmp/tmprqw2zm3a.cpp:24:59: warning: missing terminating \" character\n   24 |     std::tuple<std::string, std::string, std::string> t20(\"\n      |                                                           ^\n/tmp/tmprqw2zm3a.cpp:24:59: error: missing terminating \" character\n/tmp/tmprqw2zm3a.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmprqw2zm3a.cpp:25:1: error: expected primary-expression before \u2018}\u2019 token\n   25 | }\n      | ^\n/tmp/tmprqw2zm3a.cpp:25:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmprqw2zm3a.cpp:25:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple_1;\n    std::tuple<int, float, double> test_tuple_2;\n    std::tuple<int, float, double> test_tuple_3;\n    std::tuple<int, float, double> test_tuple_4;\n    std::tuple<int, float, double> test_tuple_5;\n    std::tuple<int, float, double> test_tuple_6;\n    std::tuple<int, float, double> test_tuple_7;\n    std::tuple<int, float, double> test_tuple_8;\n    std::tuple<int, float, double> test_tuple_9;\n    std::tuple<int, float, double> test_tuple_10;\n    std::tuple<int, float, double> test_tuple_11;\n    std::tuple<int, float, double> test_tuple_12;\n    std::tuple<int, float, double> test_tuple_13;\n    std::tuple<int, float, double> test_tuple_14;\n    std::tuple<int, float, double> test_tuple_15;\n    std::tuple<int, float, double> test_tuple_16;\n    std::tuple<int, float, double> test_tuple_17;\n    std::tuple<int, float, double> test_tuple_18;\n    std::tuple<int, float, double> test_tuple_19;\n    std::tuple<int, float, double> test_tuple_20;\n    std::tuple<int, float, double> test_tuple_21;\n    std::tuple<int, float, double> test_tuple_22;\n    std::tuple<int, float, double> test_tuple_23;\n    std::tuple<int, float, double> test_tuple_24;\n    std::tuple<int, float, double> test_tuple_25;\n    std::tuple<int, float, double\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "/tmp/tmpo_1p3c_v.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpo_1p3c_v.cpp:30:28: error: template argument 3 is invalid\n   30 |     std::tuple<int, float, double\n      |                            ^~~~~~\n/tmp/tmpo_1p3c_v.cpp:31:1: error: expected unqualified-id before \u2018}\u2019 token\n   31 | }\n      | ^\n/tmp/tmpo_1p3c_v.cpp:31:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double, char> t1 = std::any_cast<std::tuple<int, float, double, char>>(test_tuple);\n    int a = std::any_cast<int>(t1);\n    float b = std::any_cast<float>(t1);\n    double c = std::any_cast<double>(t1);\n    char d = std::any_cast<char>(t1);\n    if(typeid(a) == typeid(b) && typeid(a) == typeid(c) && typeid(a) == typeid(d))\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple_1(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_2(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_3(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_4(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_5(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_6(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_7(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_8(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_9(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_10(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_11(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_12(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_13(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_14(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_15(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_16(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_17(1, 2.0, 3.0);\n   \n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "tmp09ixxfxe: /tmp/tmp09ixxfxe.cpp:26: int main(): Assertion `candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, int, int> test_tuple1;\n    std::tuple<float, float, float> test_tuple2;\n    std::tuple<std::string, std::string, std::string> test_tuple3;\n    std::tuple<char, char, char> test_tuple4;\n    std::tuple<double, double, double> test_tuple5;\n    std::tuple<bool, bool, bool> test_tuple6;\n    std::tuple<std::vector<int>, std::vector<int>, std::vector<int>> test_tuple7;\n    std::tuple<std::list<int>, std::list<int>, std::list<int>> test_tuple8;\n    std::tuple<std::set<int>, std::set<int>, std::set<int>> test_tuple9;\n    std::tuple<std::map<int, int>, std::map<int, int>, std::map<int, int>> test_tuple10;\n    std::tuple<std::unordered_map<int, int>, std::unordered_map<int, int>, std::unordered_map<int, int>> test_tuple11;\n    std::tuple<std::unordered_set<int>, std::unordered_set<int>, std::unordered_set<int>> test_tuple12;\n    std::tuple<std::deque<int>, std::deque<int>, std::deque<int>> test_tuple13;\n    std::tuple<std::stack<int>, std::stack<int>, std::stack<int>> test_tuple14;\n    std::tuple<std::queue<int>, std::queue<int>, std::queue<int>> test_tuple15;\n    std::tuple<std::priority_queue<int>, std::priority_queue<int>, std::priority_queue<int>> test_tuple16;\n    std::tuple<std::forward_list<int>, std::forward_list<int>, std::forward_list<int>> test_tuple17;\n    std::tuple\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmpc3t0v2k_.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpc3t0v2k_.cpp:23:1: error: expected unqualified-id before \u2018}\u2019 token\n   23 | }\n      | ^\n/tmp/tmpc3t0v2k_.cpp:23:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<std::tuple<int,int,int>>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple1(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple2(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple3(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple4(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple5(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple6(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple7(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple8(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple9(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple10(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple11(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple12(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple13(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple14(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple15(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple16(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple17(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple18(\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmpumk3pfbe.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpumk3pfbe.cpp:23:1: error: expected primary-expression before \u2018}\u2019 token\n   23 | }\n      | ^\n/tmp/tmpumk3pfbe.cpp:23:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmpumk3pfbe.cpp:23:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple_1(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_2(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_3(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_4(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_5(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_6(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_7(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_8(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_9(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_10(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_11(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_12(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_13(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_14(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_15(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_16(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_17(1, 2.0, 3.0);\n   \n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "tmp09ixxfxe: /tmp/tmp09ixxfxe.cpp:26: int main(): Assertion `candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    int count = 0;\n    std::string type = typeid(test_tuple).name();\n    for (auto i : test_tuple) {\n        if (typeid(i).name() != type) {\n            count++;\n        }\n    }\n    if (count == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmp7sof5r5t.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmp7sof5r5t.cpp:7:19: error: no matching function for call to \u2018begin(std::any&)\u2019\n    7 |     for (auto i : test_tuple) {\n      |                   ^~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/range_access.h:36,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmp7sof5r5t.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note: candidate: \u2018template<class _Tp> constexpr const _Tp* std::begin(std::initializer_list<_Tp>)\u2019\n   89 |     begin(initializer_list<_Tp> __ils) noexcept\n      |     ^~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note:   template argument deduction/substitution failed:\n/tmp/tmp7sof5r5t.cpp:7:19: note:   \u2018std::any\u2019 is not derived from \u2018std::initializer_list<_Tp>\u2019\n    7 |     for (auto i : test_tuple) {\n      |                   ^~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::string type_name = test_tuple.type().name();\n    for (auto i : test_tuple) {\n        if (i.type().name() != type_name) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "/tmp/tmpko0ys1up.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpko0ys1up.cpp:6:19: error: no matching function for call to \u2018begin(std::any&)\u2019\n    6 |     for (auto i : test_tuple) {\n      |                   ^~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/range_access.h:36,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmpko0ys1up.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note: candidate: \u2018template<class _Tp> constexpr const _Tp* std::begin(std::initializer_list<_Tp>)\u2019\n   89 |     begin(initializer_list<_Tp> __ils) noexcept\n      |     ^~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note:   template argument deduction/substitution failed:\n/tmp/tmpko0ys1up.cpp:6:19: note:   \u2018std::any\u2019 is not derived from \u2018std::initializer_list<_Tp>\u2019\n    6 |     for (auto i : test_tuple) {\n      |                   ^~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::string type_name = test_tuple.type().name();\n    std::string type_name_1 = test_tuple.type().name();\n    if(type_name == type_name_1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "tmpv5nw0gug: /tmp/tmpv5nw0gug.cpp:15: int main(): Assertion `candidate(std::make_tuple(1, 2, \"4\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, int, int> test_tuple_1 = std::any_cast<std::tuple<int, int, int>>(test_tuple);\n    std::tuple<int, float, int> test_tuple_2 = std::any_cast<std::tuple<int, float, int>>(test_tuple);\n    std::tuple<int, int, float> test_tuple_3 = std::any_cast<std::tuple<int, int, float>>(test_tuple);\n    std::tuple<int, float, float> test_tuple_4 = std::any_cast<std::tuple<int, float, float>>(test_tuple);\n    std::tuple<float, int, int> test_tuple_5 = std::any_cast<std::tuple<float, int, int>>(test_tuple);\n    std::tuple<float, float, int> test_tuple_6 = std::any_cast<std::tuple<float, float, int>>(test_tuple);\n    std::tuple<float, int, float> test_tuple_7 = std::any_cast<std::tuple<float, int, float>>(test_tuple);\n    std::tuple<float, float, float> test_tuple_8 = std::any_cast<std::tuple<float, float, float>>(test_tuple);\n    if (test_tuple_1 || test_tuple_2 || test_tuple_3 || test_tuple_4 || test_tuple_5 || test_tuple_6 || test_tuple_7 || test_tuple_8) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmp_swcepue.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmp_swcepue.cpp:13:22: error: no match for \u2018operator||\u2019 (operand types are \u2018std::tuple<int, int, int>\u2019 and \u2018std::tuple<int, float, int>\u2019)\n   13 |     if (test_tuple_1 || test_tuple_2 || test_tuple_3 || test_tuple_4 || test_tuple_5 || test_tuple_6 || test_tuple_7 || test_tuple_8) {\n      |         ~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~\n      |         |               |\n      |         |               tuple<int, float, int>\n      |         tuple<int, int, int>\n/tmp/tmp_swcepue.cpp:13:22: note: candidate: \u2018operator||(bool, bool)\u2019 <built-in>\n   13 |     if (test_tuple_1 || test_tuple_2 || test_tuple_3 || test_tuple_4 || test_tuple_5 || test_tuple_6 || test_tuple_7 || test_tuple_8) {\n      |         ~~~~~~~~~~~~~^~~~~~~~~~~~~~~\n/tmp/tmp_swcepue.cpp:13:22: note:   no known conversion for argument 2 from \u2018std::tuple<int, float, int>\u2019 to \u2018bool\u2019\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/valarray:603,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:95,\n                 from /tmp/tmp_swcepue.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/valarray_after.h:416:5: note: candidate: \u2018template<class _Dom1, class _Dom2> std::_Expr<std::__detail::_BinClos<std::__logical_or, std::_Expr, std::_Expr, _Dom1, _Dom2>, typename std::__fun<std::__logical_or, typename _Dom1::value_type>::result_type> std::operator||(const std::_Expr<_Dom1, typename _Dom1::value_type>&, const std::_Expr<_Dom2, typename _Dom2::value_type>&)\u2019\n  416 |     _DEFINE_EXPR_BINARY_OPERATOR(||, __logical_or)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/valarray_after.h:416:5: note:   template argument deduction/substitution failed:\n/tmp/tmp_swcepue.cpp:13:25: note:   \u2018std::tuple<int, int, int>\u2019 is not derived from \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\n   13 |     if (test_tuple_1 || test_tuple_2 |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::string type = test_tuple.type().name();\n    std::cout << type << std::endl;\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123421,
      "stdout": "St5tupleIJiiiiiiEE\nSt5tupleIJiiPKcEE\n",
      "stderr": "tmp1ld6yk48: /tmp/tmp1ld6yk48.cpp:12: int main(): Assertion `candidate(std::make_tuple(1, 2, \"4\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, int, int> t1(1, 2, 3);\n    std::tuple<int, int, int> t2(1, 2, 3);\n    std::tuple<int, int, int> t3(1, 2, 3);\n    std::tuple<int, int, int> t4(1, 2, 3);\n    std::tuple<int, int, int> t5(1, 2, 3);\n    std::tuple<int, int, int> t6(1, 2, 3);\n    std::tuple<int, int, int> t7(1, 2, 3);\n    std::tuple<int, int, int> t8(1, 2, 3);\n    std::tuple<int, int, int> t9(1, 2, 3);\n    std::tuple<int, int, int> t10(1, 2, 3);\n    std::tuple<int, int, int> t11(1, 2, 3);\n    std::tuple<int, int, int> t12(1, 2, 3);\n    std::tuple<int, int, int> t13(1, 2, 3);\n    std::tuple<int, int, int> t14(1, 2, 3);\n    std::tuple<int, int, int> t15(1, 2, 3);\n    std::tuple<int, int, int> t16(1, 2, 3);\n    std::tuple<int, int, int> t17(1, 2, 3);\n    std::tuple<int, int, int> t18(1, 2, 3);\n    std::tuple<int, int, int> t19(1, 2, 3);\n    std::tuple<int, int, int> t20(1, 2, 3);\n    std::tuple<int, int, int> t21(1, 2, 3);\n    std::tuple<int, int, int> t22(1, 2, 3);\n    std::tuple<int, int, int> t23(1, 2, 3);\n    std::tuple\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmpyrpmzt58.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpyrpmzt58.cpp:29:1: error: expected unqualified-id before \u2018}\u2019 token\n   29 | }\n      | ^\n/tmp/tmpyrpmzt58.cpp:29:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::string type_name = test_tuple.type().name();\n    std::string type_name_1;\n    for (auto i : test_tuple) {\n        type_name_1 = i.type().name();\n        if (type_name != type_name_1) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmpqu49stwz.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpqu49stwz.cpp:7:19: error: no matching function for call to \u2018begin(std::any&)\u2019\n    7 |     for (auto i : test_tuple) {\n      |                   ^~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/range_access.h:36,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmpqu49stwz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note: candidate: \u2018template<class _Tp> constexpr const _Tp* std::begin(std::initializer_list<_Tp>)\u2019\n   89 |     begin(initializer_list<_Tp> __ils) noexcept\n      |     ^~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note:   template argument deduction/substitution failed:\n/tmp/tmpqu49stwz.cpp:7:19: note:   \u2018std::any\u2019 is not derived from \u2018std::initializer_list<_Tp>\u2019\n    7 |     for (auto i : test_tuple) {\n      |                   ^~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple_1 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::tuple<int, float, double> test_tuple_2 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::tuple<int, float, double> test_tuple_3 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    if (typeid(std::get<0>(test_tuple_1)) == typeid(std::get<1>(test_tuple_2)) && typeid(std::get<1>(test_tuple_2)) == typeid(std::get<2>(test_tuple_3))) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    return std::any_cast<int>(test_tuple) == std::any_cast<int>(test_tuple);\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double, char> test_tuple(1, 2.3, 4.5, 'a');\n    std::any_cast<int>(test_tuple);\n    std::any_cast<float>(test_tuple);\n    std::any_cast<double>(test_tuple);\n    std::any_cast<char>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmpdx2g2nir.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpdx2g2nir.cpp:5:52: error: declaration of \u2018std::tuple<int, float, double, char> test_tuple\u2019 shadows a parameter\n    5 |     std::tuple<int, float, double, char> test_tuple(1, 2.3, 4.5, 'a');\n      |                                                    ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, int, int> test_tuple_1 = std::any_cast<std::tuple<int, int, int>>(test_tuple);\n    std::tuple<float, float, float> test_tuple_2 = std::any_cast<std::tuple<float, float, float>>(test_tuple);\n    std::tuple<std::string, std::string, std::string> test_tuple_3 = std::any_cast<std::tuple<std::string, std::string, std::string>>(test_tuple);\n    if (std::get<0>(test_tuple_1) == std::get<1>(test_tuple_1) && std::get<0>(test_tuple_1) == std::get<2>(test_tuple_1)) {\n        return true;\n    }\n    else if (std::get<0>(test_tuple_2) == std::get<1>(test_tuple_2) && std::get<0>(test_tuple_2) == std::get<2>(test_tuple_2)) {\n        return true;\n    }\n    else if (std::get<0>(test_tuple_3) == std::get<1>(test_tuple_3) && std::get<0>(test_tuple_3) == std::get<2>(test_tuple_3)) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple_1(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_2(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_3(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_4(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_5(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_6(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_7(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_8(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_9(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_10(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_11(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_12(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_13(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_14(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_15(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_16(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_17(1, 2.0, 3.0);\n   \n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "tmp09ixxfxe: /tmp/tmp09ixxfxe.cpp:26: int main(): Assertion `candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::vector<std::type_index> types;\n    std::tuple_size<decltype(test_tuple)>::value;\n    for (int i = 0; i < std::tuple_size<decltype(test_tuple)>::value; i++) {\n        types.push_back(std::any_cast<decltype(test_tuple)>(test_tuple).type());\n    }\n    return (std::adjacent_find(types.begin(), types.end(), std::not_equal_to<>()) == types.end());\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmpbq5wa7qq.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpbq5wa7qq.cpp:6:44: error: incomplete type \u2018std::tuple_size<std::any>\u2019 used in nested name specifier\n    6 |     std::tuple_size<decltype(test_tuple)>::value;\n      |                                            ^~~~~\n/tmp/tmpbq5wa7qq.cpp:7:64: error: incomplete type \u2018std::tuple_size<std::any>\u2019 used in nested name specifier\n    7 |     for (int i = 0; i < std::tuple_size<decltype(test_tuple)>::value; i++) {\n      |                                                                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple_1 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::tuple<int, float, double> test_tuple_2 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::tuple<int, float, double> test_tuple_3 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    if (typeid(std::get<0>(test_tuple_1)) == typeid(std::get<1>(test_tuple_2)) && typeid(std::get<1>(test_tuple_2)) == typeid(std::get<2>(test_tuple_3))) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple1 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::tuple<int, float, double> test_tuple2 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::tuple<int, float, double> test_tuple3 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    if(typeid(std::get<0>(test_tuple1)) == typeid(std::get<1>(test_tuple2)) && typeid(std::get<1>(test_tuple2)) == typeid(std::get<2>(test_tuple3))) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::vector<std::type_index> type_list;\n    for (auto &i : test_tuple) {\n        type_list.push_back(i.type());\n    }\n    for (auto &i : type_list) {\n        if (i != type_list[0]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmp0q46gg37.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmp0q46gg37.cpp:6:20: error: no matching function for call to \u2018begin(std::any&)\u2019\n    6 |     for (auto &i : test_tuple) {\n      |                    ^~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/range_access.h:36,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmp0q46gg37.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note: candidate: \u2018template<class _Tp> constexpr const _Tp* std::begin(std::initializer_list<_Tp>)\u2019\n   89 |     begin(initializer_list<_Tp> __ils) noexcept\n      |     ^~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note:   template argument deduction/substitution failed:\n/tmp/tmp0q46gg37.cpp:6:20: note:   \u2018std::any\u2019 is not derived from \u2018std::initializer_list<_Tp>\u2019\n    6 |     for (auto &i : test_tuple) {\n      |                    ^~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple_1(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_2(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_3(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_4(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_5(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_6(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_7(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_8(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_9(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_10(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_11(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_12(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_13(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_14(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_15(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_16(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_17(1, 2.0, 3.0);\n   \n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "tmp09ixxfxe: /tmp/tmp09ixxfxe.cpp:26: int main(): Assertion `candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple1(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple2(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple3(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple4(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple5(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple6(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple7(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple8(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple9(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple10(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple11(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple12(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple13(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple14(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple15(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple16(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple17(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple18(\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmpumk3pfbe.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpumk3pfbe.cpp:23:1: error: expected primary-expression before \u2018}\u2019 token\n   23 | }\n      | ^\n/tmp/tmpumk3pfbe.cpp:23:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmpumk3pfbe.cpp:23:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    try {\n        std::any_cast<float>(test_tuple);\n    }\n    catch (const std::bad_any_cast& e) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::string type_name = test_tuple.type().name();\n    for(auto i : test_tuple) {\n        if(i.type().name() != type_name) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmp9p9ah909.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmp9p9ah909.cpp:6:18: error: no matching function for call to \u2018begin(std::any&)\u2019\n    6 |     for(auto i : test_tuple) {\n      |                  ^~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/range_access.h:36,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmp9p9ah909.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note: candidate: \u2018template<class _Tp> constexpr const _Tp* std::begin(std::initializer_list<_Tp>)\u2019\n   89 |     begin(initializer_list<_Tp> __ils) noexcept\n      |     ^~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note:   template argument deduction/substitution failed:\n/tmp/tmp9p9ah909.cpp:6:18: note:   \u2018std::any\u2019 is not derived from \u2018std::initializer_list<_Tp>\u2019\n    6 |     for(auto i : test_tuple) {\n      |                  ^~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n             ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, int, int> test_tuple_1(1, 2, 3);\n    std::tuple<float, float, float> test_tuple_2(1.0, 2.0, 3.0);\n    std::tuple<std::string, std::string, std::string> test_tuple_3(\"1\", \"2\", \"3\");\n    std::tuple<int, float, std::string> test_tuple_4(1, 2.0, \"3\");\n    std::tuple<int, float, std::string> test_tuple_5(1, 2.0, \"3\");\n    std::tuple<int, float, std::string> test_tuple_6(1, 2.0, \"3\");\n    std::tuple<int, float, std::string> test_tuple_7(1, 2.0, \"3\");\n    std::tuple<int, float, std::string> test_tuple_8(1, 2.0, \"3\");\n    std::tuple<int, float, std::string> test_tuple_9(1, 2.0, \"3\");\n    std::tuple<int, float, std::string> test_tuple_10(1, 2.0, \"3\");\n    std::tuple<int, float, std::string> test_tuple_11(1, 2.0, \"3\");\n    std::tuple<int, float, std::string> test_tuple_12(1, 2.0, \"3\");\n    std::tuple<int, float, std::string> test_tuple_13(1, 2.0, \"3\");\n    std::tuple<int, float, std::string> test_tuple_14(1, 2.0, \"3\");\n    std::tuple<int, float, std::string> test_tuple_15(1, 2.0, \"3\");\n    std::tuple<int, float, std::string> test_tuple_16(1, 2.0, \"3\");\n    std::tuple<int, float, std::string> test_\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmp8z_6x45y.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmp8z_6x45y.cpp:22:1: error: expected initializer before \u2018}\u2019 token\n   22 | }\n      | ^\n/tmp/tmp8z_6x45y.cpp:22:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::vector<std::any> test_vector;\n    std::any_cast<std::vector<std::any>>(test_tuple);\n    std::any first_element = test_vector[0];\n    for(int i = 1; i < test_vector.size(); i++) {\n        if(first_element.type() != test_vector[i].type()) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple_1 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::tuple<int, float, double> test_tuple_2 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::tuple<int, float, double> test_tuple_3 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    return (typeid(test_tuple_1) == typeid(test_tuple_2) && typeid(test_tuple_2) == typeid(test_tuple_3));\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    try {\n        std::any_cast<float>(test_tuple);\n        return false;\n    } catch(const std::bad_any_cast& e) {\n        return true;\n    }\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> t1(10, 15.5, 1e5);\n    std::tuple<char, int, float, double> t2('G', 10, 1.5, 1e5);\n    std::tuple<std::string, std::string, std::string> t3(\"Geeks\", \"for\", \"Geeks\");\n    std::tuple<std::string, std::string, int> t4(\"Geeks\", \"for\", \"Geeks\");\n    std::tuple<int, int, int, int, int, int, int> t5(1, 2, 3, 4, 5, 6, 7);\n    std::tuple<int, int, int, int, int, int, int, int> t6(1, 2, 3, 4, 5, 6, 7, 8);\n    std::tuple<int, int, int, int, int, int, int, int, int> t7(1, 2, 3, 4, 5, 6, 7, 8, 9);\n    std::tuple<int, int, int, int, int, int, int, int, int, int> t8(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n    std::tuple<int, int, int, int, int, int, int, int, int, int, int> t9(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11);\n    std::tuple<int, int, int, int, int, int, int, int, int, int, int, int> t10(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);\n    std::tuple<int, int, int, int, int, int, int, int, int, int, int, int, int> t11(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13);\n    std::tuple<int, int, int, int, int, int, int, int, int, int, int, int, int, int> t12(1, 2, 3,\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmpnqitwvba.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpnqitwvba.cpp:8:73: error: no matching function for call to \u2018std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>::tuple(const char [6], const char [4], const char [6])\u2019\n    8 |     std::tuple<std::string, std::string, int> t4(\"Geeks\", \"for\", \"Geeks\");\n      |                                                                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/functional:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/pstl/glue_algorithm_defs.h:13,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:71,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpnqitwvba.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:808:11: note: candidate: \u2018template<class _Alloc, class _Dummy, class ... _UElements, typename std::enable_if<((std::_TC<((3 == sizeof... (_UElements)) && (! std::is_same<std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::tuple<_Tail ...> >::value)), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>::_MoveConstructibleTuple<_UElements ...>() && (! std::_TC<((3 == sizeof... (_UElements)) && (! std::is_same<std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::tuple<_Tail ...> >::value)), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double, char> t1 = std::any_cast<std::tuple<int, float, double, char>>(test_tuple);\n    std::tuple<int, float, double, char> t2 = std::any_cast<std::tuple<int, float, double, char>>(test_tuple);\n    std::tuple<int, float, double, char> t3 = std::any_cast<std::tuple<int, float, double, char>>(test_tuple);\n    std::tuple<int, float, double, char> t4 = std::any_cast<std::tuple<int, float, double, char>>(test_tuple);\n    if(typeid(std::get<0>(t1)) == typeid(std::get<1>(t2)) && typeid(std::get<1>(t2)) == typeid(std::get<2>(t3)) && typeid(std::get<2>(t3)) == typeid(std::get<3>(t4))) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple_1 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::tuple<int, float, double> test_tuple_2 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::tuple<int, float, double> test_tuple_3 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    return (typeid(test_tuple_1) == typeid(test_tuple_2) && typeid(test_tuple_2) == typeid(test_tuple_3));\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple_1;\n    std::tuple<int, float, double> test_tuple_2;\n    std::tuple<int, float, double> test_tuple_3;\n    std::tuple<int, float, double> test_tuple_4;\n    std::tuple<int, float, double> test_tuple_5;\n    std::tuple<int, float, double> test_tuple_6;\n    std::tuple<int, float, double> test_tuple_7;\n    std::tuple<int, float, double> test_tuple_8;\n    std::tuple<int, float, double> test_tuple_9;\n    std::tuple<int, float, double> test_tuple_10;\n    std::tuple<int, float, double> test_tuple_11;\n    std::tuple<int, float, double> test_tuple_12;\n    std::tuple<int, float, double> test_tuple_13;\n    std::tuple<int, float, double> test_tuple_14;\n    std::tuple<int, float, double> test_tuple_15;\n    std::tuple<int, float, double> test_tuple_16;\n    std::tuple<int, float, double> test_tuple_17;\n    std::tuple<int, float, double> test_tuple_18;\n    std::tuple<int, float, double> test_tuple_19;\n    std::tuple<int, float, double> test_tuple_20;\n    std::tuple<int, float, double> test_tuple_21;\n    std::tuple<int, float, double> test_tuple_22;\n    std::tuple<int, float, double> test_tuple_23;\n    std::tuple<int, float, double> test_tuple_24;\n    std::tuple<int, float, double> test_tuple_25;\n    std::tuple<int, float, double\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "/tmp/tmpo_1p3c_v.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpo_1p3c_v.cpp:30:28: error: template argument 3 is invalid\n   30 |     std::tuple<int, float, double\n      |                            ^~~~~~\n/tmp/tmpo_1p3c_v.cpp:31:1: error: expected unqualified-id before \u2018}\u2019 token\n   31 | }\n      | ^\n/tmp/tmpo_1p3c_v.cpp:31:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple_1(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_2(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_3(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_4(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_5(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_6(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_7(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_8(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_9(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_10(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_11(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_12(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_13(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_14(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_15(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_16(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_17(1, 2.0, 3.0);\n   \n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "tmp09ixxfxe: /tmp/tmp09ixxfxe.cpp:26: int main(): Assertion `candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int,int,int> t1(1,2,3);\n    std::tuple<int,int,int> t2(1,2,3.0);\n    std::tuple<int,int,int> t3(1,2,3.0);\n    std::tuple<int,int,int> t4(1,2,3.0);\n    std::tuple<int,int,int> t5(1,2,3.0);\n    std::tuple<int,int,int> t6(1,2,3.0);\n    std::tuple<int,int,int> t7(1,2,3.0);\n    std::tuple<int,int,int> t8(1,2,3.0);\n    std::tuple<int,int,int> t9(1,2,3.0);\n    std::tuple<int,int,int> t10(1,2,3.0);\n    std::tuple<int,int,int> t11(1,2,3.0);\n    std::tuple<int,int,int> t12(1,2,3.0);\n    std::tuple<int,int,int> t13(1,2,3.0);\n    std::tuple<int,int,int> t14(1,2,3.0);\n    std::tuple<int,int,int> t15(1,2,3.0);\n    std::tuple<int,int,int> t16(1,2,3.0);\n    std::tuple<int,int,int> t17(1,2,3.0);\n    std::tuple<int,int,int> t18(1,2,3.0);\n    std::tuple<int,int,int> t19(1,2,3.0);\n    std::tuple<int,int,int> t20(1,2,3.0);\n    std::tuple<int,int,int> t21(1,2,3.0);\n    std::tuple<int,int\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "/tmp/tmpncx2r0g9.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpncx2r0g9.cpp:26:20: error: template argument 2 is invalid\n   26 |     std::tuple<int,int\n      |                    ^~~\n/tmp/tmpncx2r0g9.cpp:27:1: error: expected unqualified-id before \u2018}\u2019 token\n   27 | }\n      | ^\n/tmp/tmpncx2r0g9.cpp:27:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, int, int> test_tuple_1;\n    std::tuple<std::string, std::string, std::string> test_tuple_2;\n    std::tuple<float, float, float> test_tuple_3;\n    std::tuple<double, double, double> test_tuple_4;\n    std::tuple<char, char, char> test_tuple_5;\n    std::tuple<bool, bool, bool> test_tuple_6;\n    std::tuple<std::string, int, float> test_tuple_7;\n    std::tuple<std::string, int, float, double, char, bool> test_tuple_8;\n    std::tuple<std::string, int, float, double, char, bool, int> test_tuple_9;\n    std::tuple<std::string, int, float, double, char, bool, int, std::string> test_tuple_10;\n    std::tuple<std::string, int, float, double, char, bool, int, std::string, double> test_tuple_11;\n    std::tuple<std::string, int, float, double, char, bool, int, std::string, double, int> test_tuple_12;\n    std::tuple<std::string, int, float, double, char, bool, int, std::string, double, int, float> test_tuple_13;\n    std::tuple<std::string, int, float, double, char, bool, int, std::string, double, int, float, double> test_tuple_14;\n    std::tuple<std::string, int, float, double, char, bool, int, std::string, double, int, float, double, char> test_tuple_15;\n    std::tuple<std::string, int, float, double, char, bool, int, std::string, double, int, float, double, char, bool> test_tuple_16;\n    std::tuple<std::string, int, float, double, char, bool, int, std::string\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "/tmp/tmpgo54s2k8.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpgo54s2k8.cpp:21:71: error: template argument 8 is invalid\n   21 |     std::tuple<std::string, int, float, double, char, bool, int, std::string\n      |                                                                       ^~~~~~\n/tmp/tmpgo54s2k8.cpp:22:1: error: expected unqualified-id before \u2018}\u2019 token\n   22 | }\n      | ^\n/tmp/tmpgo54s2k8.cpp:22:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple_1;\n    std::tuple<int, float, double> test_tuple_2;\n    std::tuple<int, float, double> test_tuple_3;\n    std::tuple<int, float, double> test_tuple_4;\n    std::tuple<int, float, double> test_tuple_5;\n    std::tuple<int, float, double> test_tuple_6;\n    std::tuple<int, float, double> test_tuple_7;\n    std::tuple<int, float, double> test_tuple_8;\n    std::tuple<int, float, double> test_tuple_9;\n    std::tuple<int, float, double> test_tuple_10;\n    std::tuple<int, float, double> test_tuple_11;\n    std::tuple<int, float, double> test_tuple_12;\n    std::tuple<int, float, double> test_tuple_13;\n    std::tuple<int, float, double> test_tuple_14;\n    std::tuple<int, float, double> test_tuple_15;\n    std::tuple<int, float, double> test_tuple_16;\n    std::tuple<int, float, double> test_tuple_17;\n    std::tuple<int, float, double> test_tuple_18;\n    std::tuple<int, float, double> test_tuple_19;\n    std::tuple<int, float, double> test_tuple_20;\n    std::tuple<int, float, double> test_tuple_21;\n    std::tuple<int, float, double> test_tuple_22;\n    std::tuple<int, float, double> test_tuple_23;\n    std::tuple<int, float, double> test_tuple_24;\n    std::tuple<int, float, double> test_tuple_25;\n    std::tuple<int, float, double\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "/tmp/tmpo_1p3c_v.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpo_1p3c_v.cpp:30:28: error: template argument 3 is invalid\n   30 |     std::tuple<int, float, double\n      |                            ^~~~~~\n/tmp/tmpo_1p3c_v.cpp:31:1: error: expected unqualified-id before \u2018}\u2019 token\n   31 | }\n      | ^\n/tmp/tmpo_1p3c_v.cpp:31:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::string type_name = test_tuple.type().name();\n    std::string type_name_1;\n    std::tuple<int, int, int> test_tuple_1;\n    std::tuple<int, int, int> test_tuple_2;\n    std::tuple<int, int, int> test_tuple_3;\n    std::tuple<int, int, int> test_tuple_4;\n    std::tuple<int, int, int> test_tuple_5;\n    std::tuple<int, int, int> test_tuple_6;\n    std::tuple<int, int, int> test_tuple_7;\n    std::tuple<int, int, int> test_tuple_8;\n    std::tuple<int, int, int> test_tuple_9;\n    std::tuple<int, int, int> test_tuple_10;\n    std::tuple<int, int, int> test_tuple_11;\n    std::tuple<int, int, int> test_tuple_12;\n    std::tuple<int, int, int> test_tuple_13;\n    std::tuple<int, int, int> test_tuple_14;\n    std::tuple<int, int, int> test_tuple_15;\n    std::tuple<int, int, int> test_tuple_16;\n    std::tuple<int, int, int> test_tuple_17;\n    std::tuple<int, int, int> test_tuple_18;\n    std::tuple<int, int, int> test_tuple_19;\n    std::tuple<int, int, int> test_tuple_20;\n    std::tuple<int, int, int> test_tuple_21;\n    std::tuple<int, int, int> test_tuple_22;\n    std::tuple<int, int, int> test_tuple_23;\n    std::tuple<int, int, int> test_tuple_24;\n    std\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "/tmp/tmpgixvnsmr.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpgixvnsmr.cpp:32:1: error: expected primary-expression before \u2018}\u2019 token\n   32 | }\n      | ^\n/tmp/tmpgixvnsmr.cpp:32:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    return std::any_cast<int>(test_tuple) == std::any_cast<int>(test_tuple);\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple1 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::tuple<int, float, double> test_tuple2 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::tuple<int, float, double> test_tuple3 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    if(typeid(test_tuple1) == typeid(test_tuple2) && typeid(test_tuple2) == typeid(test_tuple3)) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::vector<std::type_index> type_list;\n    std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    for(auto &i : test_tuple) {\n        type_list.push_back(i.type());\n    }\n    for(auto &i : type_list) {\n        if(i != type_list[0]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "/tmp/tmp9ppr_fr7.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmp9ppr_fr7.cpp:7:19: error: no matching function for call to \u2018begin(std::any&)\u2019\n    7 |     for(auto &i : test_tuple) {\n      |                   ^~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/range_access.h:36,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmp9ppr_fr7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note: candidate: \u2018template<class _Tp> constexpr const _Tp* std::begin(std::initializer_list<_Tp>)\u2019\n   89 |     begin(initializer_list<_Tp> __ils) noexcept\n      |     ^~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note:   template argument deduction/substitution failed:\n/tmp/tmp9ppr_fr7.cpp:7:19: note:   \u2018std::any\u2019 is not derived from \u2018std::initializer_list<_Tp>\u2019\n    7 |     for(auto &i : test_tuple) {\n      |                   ^~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::string type = test_tuple.type().name();\n    std::string type_name = type.substr(6, type.length() - 1);\n    for (int i = 0; i < test_tuple.size(); i++) {\n        if (test_tuple[i].type().name() != type_name) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "/tmp/tmpf7kix4cu.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpf7kix4cu.cpp:7:36: error: \u2018class std::any\u2019 has no member named \u2018size\u2019\n    7 |     for (int i = 0; i < test_tuple.size(); i++) {\n      |                                    ^~~~\n/tmp/tmpf7kix4cu.cpp:8:23: error: no match for \u2018operator[]\u2019 (operand types are \u2018std::any\u2019 and \u2018int\u2019)\n    8 |         if (test_tuple[i].type().name() != type_name) {\n      |                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple_1 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::tuple<int, float, double> test_tuple_2 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::tuple<int, float, double> test_tuple_3 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    if(typeid(std::get<0>(test_tuple_1)) == typeid(std::get<1>(test_tuple_2)) && typeid(std::get<1>(test_tuple_2)) == typeid(std::get<2>(test_tuple_3))) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, std::string> test_tuple;\n    std::any_cast<int>(test_tuple);\n    std::any_cast<float>(test_tuple);\n    std::any_cast<std::string>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "/tmp/tmpz54zs30q.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpz54zs30q.cpp:5:41: error: declaration of \u2018std::tuple<int, float, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > test_tuple\u2019 shadows a parameter\n    5 |     std::tuple<int, float, std::string> test_tuple;\n      |                                         ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, int, int> test_tuple_1 = std::any_cast<std::tuple<int, int, int>>(test_tuple);\n    std::tuple<std::string, std::string, std::string> test_tuple_2 = std::any_cast<std::tuple<std::string, std::string, std::string>>(test_tuple);\n    std::tuple<double, double, double> test_tuple_3 = std::any_cast<std::tuple<double, double, double>>(test_tuple);\n    std::tuple<float, float, float> test_tuple_4 = std::any_cast<std::tuple<float, float, float>>(test_tuple);\n    std::tuple<char, char, char> test_tuple_5 = std::any_cast<std::tuple<char, char, char>>(test_tuple);\n    std::tuple<bool, bool, bool> test_tuple_6 = std::any_cast<std::tuple<bool, bool, bool>>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, int, int> t1(10, 20, 30);\n    std::tuple<std::string, std::string, std::string> t2(\"abc\", \"def\", \"ghi\");\n    std::tuple<std::string, std::string, int> t3(\"abc\", \"def\", 30);\n    std::tuple<std::string, std::string, std::string> t4(\"abc\", \"def\", \"ghi\");\n    std::tuple<std::string, std::string, int> t5(\"abc\", \"def\", 30);\n    std::tuple<std::string, std::string, int> t6(\"abc\", \"def\", 30);\n    std::tuple<std::string, std::string, int> t7(\"abc\", \"def\", 30);\n    std::tuple<std::string, std::string, int> t8(\"abc\", \"def\", 30);\n    std::tuple<std::string, std::string, int> t9(\"abc\", \"def\", 30);\n    std::tuple<std::string, std::string, int> t10(\"abc\", \"def\", 30);\n    std::tuple<std::string, std::string, int> t11(\"abc\", \"def\", 30);\n    std::tuple<std::string, std::string, int> t12(\"abc\", \"def\", 30);\n    std::tuple<std::string, std::string, int> t13(\"abc\", \"def\", 30);\n    std::tuple<std::string, std::string, int> t14(\"abc\", \"def\", 30);\n    std::tuple<std::string, std::string, int> t15(\"abc\", \"def\", 30);\n    std::tuple<std::string, std::string, int> t16(\"abc\", \"def\", 30);\n    std::tuple<std::string, std::string, int> t17(\"abc\", \"def\", 30);\n    std::tuple<std::string, std::string, int> t18(\"abc\", \"def\", 30);\n    std::tuple<std::string, std::string, int> t19(\"abc\", \"\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "/tmp/tmpiqqlcvlu.cpp:23:58: warning: missing terminating \" character\n   23 |     std::tuple<std::string, std::string, int> t19(\"abc\", \"\n      |                                                          ^\n/tmp/tmpiqqlcvlu.cpp:23:58: error: missing terminating \" character\n/tmp/tmpiqqlcvlu.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpiqqlcvlu.cpp:24:1: error: expected primary-expression before \u2018}\u2019 token\n   24 | }\n      | ^\n/tmp/tmpiqqlcvlu.cpp:24:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmpiqqlcvlu.cpp:24:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, int, int> test_tuple1 = std::any_cast<std::tuple<int, int, int>>(test_tuple);\n    std::tuple<float, float, float> test_tuple2 = std::any_cast<std::tuple<float, float, float>>(test_tuple);\n    std::tuple<double, double, double> test_tuple3 = std::any_cast<std::tuple<double, double, double>>(test_tuple);\n    std::tuple<char, char, char> test_tuple4 = std::any_cast<std::tuple<char, char, char>>(test_tuple);\n    std::tuple<std::string, std::string, std::string> test_tuple5 = std::any_cast<std::tuple<std::string, std::string, std::string>>(test_tuple);\n    if (test_tuple1.size() == 3) {\n        return true;\n    }\n    else if (test_tuple2.size() == 3) {\n        return true;\n    }\n    else if (test_tuple3.size() == 3) {\n        return true;\n    }\n    else if (test_tuple4.size() == 3) {\n        return true;\n    }\n    else if (test_tuple5.size() == 3) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "/tmp/tmpdlfq3ps5.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpdlfq3ps5.cpp:10:21: error: \u2018class std::tuple<int, int, int>\u2019 has no member named \u2018size\u2019\n   10 |     if (test_tuple1.size() == 3) {\n      |                     ^~~~\n/tmp/tmpdlfq3ps5.cpp:13:26: error: \u2018class std::tuple<float, float, float>\u2019 has no member named \u2018size\u2019\n   13 |     else if (test_tuple2.size() == 3) {\n      |                          ^~~~\n/tmp/tmpdlfq3ps5.cpp:16:26: error: \u2018class std::tuple<double, double, double>\u2019 has no member named \u2018size\u2019\n   16 |     else if (test_tuple3.size() == 3) {\n      |                          ^~~~\n/tmp/tmpdlfq3ps5.cpp:19:26: error: \u2018class std::tuple<char, char, char>\u2019 has no member named \u2018size\u2019\n   19 |     else if (test_tuple4.size() == 3) {\n      |                          ^~~~\n/tmp/tmpdlfq3ps5.cpp:22:26: error: \u2018class std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >\u2019 has no member named \u2018size\u2019\n   22 |     else if (test_tuple5.size() == 3) {\n      |                          ^~~~\n/tmp/tmpdlfq3ps5.cpp:28:1: warning: control reaches end of non-void function [-Wreturn-type]\n   28 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> t1(10, 15.5, 20.5);\n    std::tuple<char, int, float, double> t2('a', 10, 15.5, 20.5);\n    std::tuple<std::string, std::string, std::string> t3(\"Geeks\", \"for\", \"Geeks\");\n    std::tuple<std::string, std::string, int> t4(\"Geeks\", \"for\", 10);\n    std::tuple<std::string, std::string, int> t5(\"Geeks\", \"for\", 10);\n    std::tuple<int, int, int> t6(10, 20, 30);\n    std::tuple<int, int, int> t7(10, 20, 30);\n    std::tuple<int, int, int> t8(10, 20, 30);\n    std::tuple<int, int, int> t9(10, 20, 30);\n    std::tuple<int, int, int> t10(10, 20, 30);\n    std::tuple<int, int, int> t11(10, 20, 30);\n    std::tuple<int, int, int> t12(10, 20, 30);\n    std::tuple<int, int, int> t13(10, 20, 30);\n    std::tuple<int, int, int> t14(10, 20, 30);\n    std::tuple<int, int, int> t15(10, 20, 30);\n    std::tuple<int, int, int> t16(10, 20, 30);\n    std::tuple<int, int, int> t17(10, 20, 30);\n    std::tuple<int, int, int> t18(10, 20, 30);\n    std::tuple<int, int, int> t19(10, 20, 30);\n    std::tuple<int, int, int> t20(10, 20, 30);\n    std::tuple<int, int, int> t21(10, 20, 30);\n    std::tuple<int, int, int> t22(\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "/tmp/tmp25qmj1mv.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmp25qmj1mv.cpp:27:1: error: expected primary-expression before \u2018}\u2019 token\n   27 | }\n      | ^\n/tmp/tmp25qmj1mv.cpp:27:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmp25qmj1mv.cpp:27:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, int, int> test_tuple_1 = std::any_cast<std::tuple<int, int, int>>(test_tuple);\n    std::tuple<int, int, int> test_tuple_2 = std::any_cast<std::tuple<int, int, int>>(test_tuple);\n    std::tuple<int, int, int> test_tuple_3 = std::any_cast<std::tuple<int, int, int>>(test_tuple);\n    if(typeid(test_tuple_1) == typeid(test_tuple_2) && typeid(test_tuple_2) == typeid(test_tuple_3)) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, std::string> t1(10, 15.5, \"GeeksforGeeks\");\n    std::tuple<int, float, std::string> t2(10, 15.5, \"GeeksforGeeks\");\n    std::tuple<int, float, std::string> t3(10, 15.5, \"GeeksforGeeks\");\n    std::tuple<int, float, std::string> t4(10, 15.5, \"GeeksforGeeks\");\n    std::tuple<int, float, std::string> t5(10, 15.5, \"GeeksforGeeks\");\n    std::tuple<int, float, std::string> t6(10, 15.5, \"GeeksforGeeks\");\n    std::tuple<int, float, std::string> t7(10, 15.5, \"GeeksforGeeks\");\n    std::tuple<int, float, std::string> t8(10, 15.5, \"GeeksforGeeks\");\n    std::tuple<int, float, std::string> t9(10, 15.5, \"GeeksforGeeks\");\n    std::tuple<int, float, std::string> t10(10, 15.5, \"GeeksforGeeks\");\n    std::tuple<int, float, std::string> t11(10, 15.5, \"GeeksforGeeks\");\n    std::tuple<int, float, std::string> t12(10, 15.5, \"GeeksforGeeks\");\n    std::tuple<int, float, std::string> t13(10, 15.5, \"GeeksforGeeks\");\n    std::tuple<int, float, std::string> t14(10, 15.5, \"GeeksforGeeks\");\n    std::tuple<int, float, std::string> t15(10, 15.5, \"GeeksforGeeks\");\n    std::tuple<int, float, std::string> t16(10, 15.5, \"GeeksforGeeks\");\n    std::tuple<int, float, std::string> t\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "/tmp/tmp60bco6ln.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmp60bco6ln.cpp:22:1: error: expected initializer before \u2018}\u2019 token\n   22 | }\n      | ^\n/tmp/tmp60bco6ln.cpp:22:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple_1;\n    std::tuple<int, float, double> test_tuple_2;\n    std::tuple<int, float, double> test_tuple_3;\n    std::tuple<int, float, double> test_tuple_4;\n    std::tuple<int, float, double> test_tuple_5;\n    std::tuple<int, float, double> test_tuple_6;\n    std::tuple<int, float, double> test_tuple_7;\n    std::tuple<int, float, double> test_tuple_8;\n    std::tuple<int, float, double> test_tuple_9;\n    std::tuple<int, float, double> test_tuple_10;\n    std::tuple<int, float, double> test_tuple_11;\n    std::tuple<int, float, double> test_tuple_12;\n    std::tuple<int, float, double> test_tuple_13;\n    std::tuple<int, float, double> test_tuple_14;\n    std::tuple<int, float, double> test_tuple_15;\n    std::tuple<int, float, double> test_tuple_16;\n    std::tuple<int, float, double> test_tuple_17;\n    std::tuple<int, float, double> test_tuple_18;\n    std::tuple<int, float, double> test_tuple_19;\n    std::tuple<int, float, double> test_tuple_20;\n    std::tuple<int, float, double> test_tuple_21;\n    std::tuple<int, float, double> test_tuple_22;\n    std::tuple<int, float, double> test_tuple_23;\n    std::tuple<int, float, double> test_tuple_24;\n    std::tuple<int, float, double> test_tuple_25;\n    std::tuple<int, float, double\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "/tmp/tmpo_1p3c_v.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpo_1p3c_v.cpp:30:28: error: template argument 3 is invalid\n   30 |     std::tuple<int, float, double\n      |                            ^~~~~~\n/tmp/tmpo_1p3c_v.cpp:31:1: error: expected unqualified-id before \u2018}\u2019 token\n   31 | }\n      | ^\n/tmp/tmpo_1p3c_v.cpp:31:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::string type_name = test_tuple.type().name();\n    for (int i = 0; i < std::tuple_size<decltype(test_tuple)>::value; i++) {\n        if (type_name != std::any_cast<std::tuple_element<i, decltype(test_tuple)>::type>(test_tuple).type().name()) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "/tmp/tmpsle4j31u.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpsle4j31u.cpp:6:64: error: incomplete type \u2018std::tuple_size<std::any>\u2019 used in nested name specifier\n    6 |     for (int i = 0; i < std::tuple_size<decltype(test_tuple)>::value; i++) {\n      |                                                                ^~~~~\n/tmp/tmpsle4j31u.cpp:7:82: error: the value of \u2018i\u2019 is not usable in a constant expression\n    7 |         if (type_name != std::any_cast<std::tuple_element<i, decltype(test_tuple)>::type>(test_tuple).type().name()) {\n      |                                                                                  ^\n/tmp/tmpsle4j31u.cpp:6:14: note: \u2018int i\u2019 is not const\n    6 |     for (int i = 0; i < std::tuple_size<decltype(test_tuple)>::value; i++) {\n      |              ^\n/tmp/tmpsle4j31u.cpp:7:82: note: in template argument for type \u2018long unsigned int\u2019\n    7 |         if (type_name != std::any_cast<std::tuple_element<i, decltype(test_tuple)>::type>(test_tuple).type().name()) {\n      |                                                                                  ^\n/tmp/tmpsle4j31u.cpp:7:101: error: no matching function for call to \u2018any_cast<<expression error> >(std::any&)\u2019\n    7 |         if (type_name != std::any_cast<std::tuple_element<i, decltype(test_tuple)>::type>(test_tuple).type().name()) {\n      |                                                                                                     ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:126,\n                 from /tmp/tmpsle4j31u.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/any:452:23: note: candidate: \u2018template<class _ValueType> _ValueType std::any_cast(const std::any&)\u2019\n  452 |     inline _ValueType any_cast(const any& __any)\n      |                       ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/any:452:23: note:   template argument deduction/substitution failed:\n/tmp/tmpsle4j31u.cpp:7:101: error: templ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple_1 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::tuple<int, float, double> test_tuple_2 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::tuple<int, float, double> test_tuple_3 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    return (typeid(std::get<0>(test_tuple_1)) == typeid(std::get<1>(test_tuple_2)) && typeid(std::get<1>(test_tuple_2)) == typeid(std::get<2>(test_tuple_3)));\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple_1(10, 15.5, 20.5);\n    std::tuple<char, float, double> test_tuple_2('a', 15.5, 20.5);\n    std::tuple<int, int, int> test_tuple_3(10, 15, 20);\n    std::tuple<char, char, char> test_tuple_4('a', 'b', 'c');\n    std::tuple<std::string, std::string, std::string> test_tuple_5(\"abc\", \"def\", \"ghi\");\n    std::tuple<int, float, double> test_tuple_6(10, 15.5, 20.5);\n    std::tuple<int, float, double> test_tuple_7(10, 15.5, 20.5);\n    std::tuple<int, float, double> test_tuple_8(10, 15.5, 20.5);\n    std::tuple<int, float, double> test_tuple_9(10, 15.5, 20.5);\n    std::tuple<int, float, double> test_tuple_10(10, 15.5, 20.5);\n    std::tuple<int, float, double> test_tuple_11(10, 15.5, 20.5);\n    std::tuple<int, float, double> test_tuple_12(10, 15.5, 20.5);\n    std::tuple<int, float, double> test_tuple_13(10, 15.5, 20.5);\n    std::tuple<int, float, double> test_tuple_14(10, 15.5, 20.5);\n    std::tuple<int, float, double> test_tuple_15(10, 15.5, 20.5);\n    std::tuple<int, float, double> test_tuple_16(10, 15.5, 20.5);\n    std::tuple<int, float, double> test_tuple_17(10, 15.5, 20.5);\n    std\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "/tmp/tmpur4b2ijz.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpur4b2ijz.cpp:23:1: error: expected primary-expression before \u2018}\u2019 token\n   23 | }\n      | ^\n/tmp/tmpur4b2ijz.cpp:23:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple_1 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::tuple<int, float, double> test_tuple_2 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::tuple<int, float, double> test_tuple_3 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::tuple<int, float, double> test_tuple_4 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::tuple<int, float, double> test_tuple_5 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::tuple<int, float, double> test_tuple_6 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::tuple<int, float, double> test_tuple_7 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::tuple<int, float, double> test_tuple_8 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::tuple<int, float, double> test_tuple_9 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::tuple<int, float, double> test_tuple_10 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::tuple<int, float, double> test_tuple_11 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::tuple<int, float, double> test_tuple_12 = std::any_cast<std::tuple<int, float, double>>(test\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "/tmp/tmpvfr9f7lh.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpvfr9f7lh.cpp:16:98: error: \u2018test\u2019 was not declared in this scope\n   16 |     std::tuple<int, float, double> test_tuple_12 = std::any_cast<std::tuple<int, float, double>>(test\n      |                                                                                                  ^~~~\n/tmp/tmpvfr9f7lh.cpp:17:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n   17 | }\n      | ^\n/tmp/tmpvfr9f7lh.cpp:17:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, std::string> t1(10, 15.5, \"GfG\");\n    std::tuple<int, float, std::string> t2(10, 15.5, \"GfG\");\n    std::tuple<int, float, std::string> t3(10, 15.5, \"GfG\");\n    std::tuple<int, float, std::string> t4(10, 15.5, \"GfG\");\n    std::tuple<int, float, std::string> t5(10, 15.5, \"GfG\");\n    std::tuple<int, float, std::string> t6(10, 15.5, \"GfG\");\n    std::tuple<int, float, std::string> t7(10, 15.5, \"GfG\");\n    std::tuple<int, float, std::string> t8(10, 15.5, \"GfG\");\n    std::tuple<int, float, std::string> t9(10, 15.5, \"GfG\");\n    std::tuple<int, float, std::string> t10(10, 15.5, \"GfG\");\n    std::tuple<int, float, std::string> t11(10, 15.5, \"GfG\");\n    std::tuple<int, float, std::string> t12(10, 15.5, \"GfG\");\n    std::tuple<int, float, std::string> t13(10, 15.5, \"GfG\");\n    std::tuple<int, float, std::string> t14(10, 15.5, \"GfG\");\n    std::tuple<int, float, std::string> t15(10, 15.5, \"GfG\");\n    std::tuple<int, float, std::string> t16(10, 15.5, \"GfG\");\n    std::tuple<int, float, std::string> t17(10, 15.5, \"GfG\");\n    std::tuple<int, float, std::string> t18(10\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "/tmp/tmps_me_o95.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmps_me_o95.cpp:22:47: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   22 |     std::tuple<int, float, std::string> t18(10\n      |                                            ~  ^\n      |                                               )\n   23 | }\n      | ~                                              \n/tmp/tmps_me_o95.cpp:23:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n   23 | }\n      | ^\n/tmp/tmps_me_o95.cpp:23:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> t1(10, 15.5, 1e5);\n    std::tuple<char, char, char> t2('a', 'b', 'c');\n    std::tuple<std::string, std::string, std::string> t3(\"abc\", \"def\", \"ghi\");\n    std::tuple<int, float, std::string> t4(10, 15.5, \"abc\");\n    std::tuple<int, float, double> t5(10, 15.5, 1e5);\n    std::tuple<char, char, char> t6('a', 'b', 'c');\n    std::tuple<std::string, std::string, std::string> t7(\"abc\", \"def\", \"ghi\");\n    std::tuple<int, float, std::string> t8(10, 15.5, \"abc\");\n    std::tuple<int, float, double> t9(10, 15.5, 1e5);\n    std::tuple<char, char, char> t10('a', 'b', 'c');\n    std::tuple<std::string, std::string, std::string> t11(\"abc\", \"def\", \"ghi\");\n    std::tuple<int, float, std::string> t12(10, 15.5, \"abc\");\n    std::tuple<int, float, double> t13(10, 15.5, 1e5);\n    std::tuple<char, char, char> t14('a', 'b', 'c');\n    std::tuple<std::string, std::string, std::string> t15(\"abc\", \"def\", \"ghi\");\n    std::tuple<int, float, std::string> t16(10, 15.5, \"abc\");\n    std::tuple<int, float, double> t17(10, 15.5, 1e5);\n    std::tuple<char, char, char> t18('a', 'b', 'c');\n    std::tuple<std::string, std::string, std::string> t19(\"abc\", \"def\", \"ghi\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "/tmp/tmpzx_ik2p8.cpp:23:73: warning: missing terminating \" character\n   23 |     std::tuple<std::string, std::string, std::string> t19(\"abc\", \"def\", \"ghi\n      |                                                                         ^\n/tmp/tmpzx_ik2p8.cpp:23:73: error: missing terminating \" character\n   23 |     std::tuple<std::string, std::string, std::string> t19(\"abc\", \"def\", \"ghi\n      |                                                                         ^~~~\n/tmp/tmpzx_ik2p8.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpzx_ik2p8.cpp:24:1: error: expected primary-expression before \u2018}\u2019 token\n   24 | }\n      | ^\n/tmp/tmpzx_ik2p8.cpp:24:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmpzx_ik2p8.cpp:24:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, int, int> test_tuple_1 = std::any_cast<std::tuple<int, int, int>>(test_tuple);\n    std::tuple<float, float, float> test_tuple_2 = std::any_cast<std::tuple<float, float, float>>(test_tuple);\n    std::tuple<char, char, char> test_tuple_3 = std::any_cast<std::tuple<char, char, char>>(test_tuple);\n    std::tuple<std::string, std::string, std::string> test_tuple_4 = std::any_cast<std::tuple<std::string, std::string, std::string>>(test_tuple);\n    if(std::get<0>(test_tuple_1) == std::get<1>(test_tuple_1) && std::get<1>(test_tuple_1) == std::get<2>(test_tuple_1)) {\n        return true;\n    }\n    else if(std::get<0>(test_tuple_2) == std::get<1>(test_tuple_2) && std::get<1>(test_tuple_2) == std::get<2>(test_tuple_2)) {\n        return true;\n    }\n    else if(std::get<0>(test_tuple_3) == std::get<1>(test_tuple_3) && std::get<1>(test_tuple_3) == std::get<2>(test_tuple_3)) {\n        return true;\n    }\n    else if(std::get<0>(test_tuple_4) == std::get<1>(test_tuple_4) && std::get<1>(test_tuple_4) == std::get<2>(test_tuple_4)) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::string type_name = test_tuple.type().name();\n    for (auto i : test_tuple) {\n        if (i.type().name() != type_name) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "/tmp/tmpko0ys1up.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpko0ys1up.cpp:6:19: error: no matching function for call to \u2018begin(std::any&)\u2019\n    6 |     for (auto i : test_tuple) {\n      |                   ^~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/range_access.h:36,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmpko0ys1up.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note: candidate: \u2018template<class _Tp> constexpr const _Tp* std::begin(std::initializer_list<_Tp>)\u2019\n   89 |     begin(initializer_list<_Tp> __ils) noexcept\n      |     ^~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note:   template argument deduction/substitution failed:\n/tmp/tmpko0ys1up.cpp:6:19: note:   \u2018std::any\u2019 is not derived from \u2018std::initializer_list<_Tp>\u2019\n    6 |     for (auto i : test_tuple) {\n      |                   ^~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, std::string> test_tuple_1(1, 2.0, \"Hello\");\n    std::tuple<int, float, std::string> test_tuple_2(1, 2.0, \"Hello\");\n    std::tuple<int, float, std::string> test_tuple_3(1, 2.0, \"Hello\");\n    std::tuple<int, float, std::string> test_tuple_4(1, 2.0, \"Hello\");\n    std::tuple<int, float, std::string> test_tuple_5(1, 2.0, \"Hello\");\n    std::tuple<int, float, std::string> test_tuple_6(1, 2.0, \"Hello\");\n    std::tuple<int, float, std::string> test_tuple_7(1, 2.0, \"Hello\");\n    std::tuple<int, float, std::string> test_tuple_8(1, 2.0, \"Hello\");\n    std::tuple<int, float, std::string> test_tuple_9(1, 2.0, \"Hello\");\n    std::tuple<int, float, std::string> test_tuple_10(1, 2.0, \"Hello\");\n    std::tuple<int, float, std::string> test_tuple_11(1, 2.0, \"Hello\");\n    std::tuple<int, float, std::string> test_tuple_12(1, 2.0, \"Hello\");\n    std::tuple<int, float, std::string> test_tuple_13(1, 2.0, \"Hello\");\n    std::tuple<int, float, std::string> test_tuple_14(1, 2.0, \"Hello\");\n    std::tuple<int, float, std::string> test_tuple_15(1, 2.0, \"Hello\");\n    std::tuple<int, float, std::string> test_tuple_16(1, 2.0, \"Hello\");\n    std::tuple<int, float, std::string> test\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "/tmp/tmpn94ri_fq.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpn94ri_fq.cpp:22:1: error: expected initializer before \u2018}\u2019 token\n   22 | }\n      | ^\n/tmp/tmpn94ri_fq.cpp:22:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple_1 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::tuple<int, float, double> test_tuple_2 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::tuple<int, float, double> test_tuple_3 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::tuple<int, float, double> test_tuple_4 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::tuple<int, float, double> test_tuple_5 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::tuple<int, float, double> test_tuple_6 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::tuple<int, float, double> test_tuple_7 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::tuple<int, float, double> test_tuple_8 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::tuple<int, float, double> test_tuple_9 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::tuple<int, float, double> test_tuple_10 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::tuple<int, float, double> test_tuple_11 = std::any_cast<std::tuple<int, float, double>>(test_tuple);\n    std::tuple<int, float, double> test_tuple_12 = std::any_cast<std::tuple<int, float, double>>(test\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "/tmp/tmpvfr9f7lh.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpvfr9f7lh.cpp:16:98: error: \u2018test\u2019 was not declared in this scope\n   16 |     std::tuple<int, float, double> test_tuple_12 = std::any_cast<std::tuple<int, float, double>>(test\n      |                                                                                                  ^~~~\n/tmp/tmpvfr9f7lh.cpp:17:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n   17 | }\n      | ^\n/tmp/tmpvfr9f7lh.cpp:17:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<std::any, std::any, std::any> test_tuple1;\n    std::tuple<std::any, std::any, std::any> test_tuple2;\n    std::tuple<std::any, std::any, std::any> test_tuple3;\n    std::tuple<std::any, std::any, std::any> test_tuple4;\n    std::tuple<std::any, std::any, std::any> test_tuple5;\n    std::tuple<std::any, std::any, std::any> test_tuple6;\n    std::tuple<std::any, std::any, std::any> test_tuple7;\n    std::tuple<std::any, std::any, std::any> test_tuple8;\n    std::tuple<std::any, std::any, std::any> test_tuple9;\n    std::tuple<std::any, std::any, std::any> test_tuple10;\n    std::tuple<std::any, std::any, std::any> test_tuple11;\n    std::tuple<std::any, std::any, std::any> test_tuple12;\n    std::tuple<std::any, std::any, std::any> test_tuple13;\n    std::tuple<std::any, std::any, std::any> test_tuple14;\n    std::tuple<std::any, std::any, std::any> test_tuple15;\n    std::tuple<std::any, std::any, std::any> test_tuple16;\n    std::tuple<std::any, std::any, std::any> test_tuple17;\n    std::tuple<std::any, std::any, std::any> test_tuple18;\n    std::tuple<std::any, std::any, std::any> test_tuple19;\n    std::tuple<std::any, std::any, std::any> test_tuple20;\n    std::tuple<std::any, std\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "/tmp/tmpreo1hq7e.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpreo1hq7e.cpp:25:26: error: template argument 2 is invalid\n   25 |     std::tuple<std::any, std\n      |                          ^~~\n/tmp/tmpreo1hq7e.cpp:26:1: error: expected unqualified-id before \u2018}\u2019 token\n   26 | }\n      | ^\n/tmp/tmpreo1hq7e.cpp:26:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, int, int> test_tuple_1(1, 2, 3);\n    std::tuple<int, int, int> test_tuple_2(1, 2, 3);\n    std::tuple<int, int, int> test_tuple_3(1, 2, 3);\n    std::tuple<int, int, int> test_tuple_4(1, 2, 3);\n    std::tuple<int, int, int> test_tuple_5(1, 2, 3);\n    std::tuple<int, int, int> test_tuple_6(1, 2, 3);\n    std::tuple<int, int, int> test_tuple_7(1, 2, 3);\n    std::tuple<int, int, int> test_tuple_8(1, 2, 3);\n    std::tuple<int, int, int> test_tuple_9(1, 2, 3);\n    std::tuple<int, int, int> test_tuple_10(1, 2, 3);\n    std::tuple<int, int, int> test_tuple_11(1, 2, 3);\n    std::tuple<int, int, int> test_tuple_12(1, 2, 3);\n    std::tuple<int, int, int> test_tuple_13(1, 2, 3);\n    std::tuple<int, int, int> test_tuple_14(1, 2, 3);\n    std::tuple<int, int, int> test_tuple_15(1, 2, 3);\n    std::tuple<int, int, int> test_tuple_16(1, 2, 3);\n    std::tuple<int, int, int> test_tuple_17(1, 2, 3);\n    std::tuple<int, int, int> test_tuple_18(1, 2, 3);\n    std::tuple<int, int, int> test_tuple_19(1, 2, 3);\n    std::tuple<int, int, int> test_tuple_\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "/tmp/tmpv87vbd_k.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpv87vbd_k.cpp:25:1: error: expected initializer before \u2018}\u2019 token\n   25 | }\n      | ^\n/tmp/tmpv87vbd_k.cpp:25:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<std::any, std::any, std::any> test_tuple_2 = std::any_cast<std::tuple<std::any, std::any, std::any>>(test_tuple);\n    std::string type_1 = std::any_cast<std::string>(std::get<0>(test_tuple_2));\n    std::string type_2 = std::any_cast<std::string>(std::get<1>(test_tuple_2));\n    std::string type_3 = std::any_cast<std::string>(std::get<2>(test_tuple_2));\n    if (type_1 == type_2 && type_2 == type_3) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::string type_name = test_tuple.type().name();\n    std::cout << type_name << std::endl;\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123425,
      "stdout": "St5tupleIJiiiiiiEE\nSt5tupleIJiiPKcEE\n",
      "stderr": "tmp9p8qp3ig: /tmp/tmp9p8qp3ig.cpp:12: int main(): Assertion `candidate(std::make_tuple(1, 2, \"4\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, int, int> test_tuple1 = std::any_cast<std::tuple<int, int, int>>(test_tuple);\n    int first_type = std::any_cast<int>(test_tuple1.get<0>());\n    int second_type = std::any_cast<int>(test_tuple1.get<1>());\n    int third_type = std::any_cast<int>(test_tuple1.get<2>());\n    if(typeid(first_type) == typeid(second_type) && typeid(second_type) == typeid(third_type)) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "/tmp/tmp5ut_7kcg.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmp5ut_7kcg.cpp:6:53: error: \u2018class std::tuple<int, int, int>\u2019 has no member named \u2018get\u2019\n    6 |     int first_type = std::any_cast<int>(test_tuple1.get<0>());\n      |                                                     ^~~\n/tmp/tmp5ut_7kcg.cpp:6:60: error: expected primary-expression before \u2018)\u2019 token\n    6 |     int first_type = std::any_cast<int>(test_tuple1.get<0>());\n      |                                                            ^\n/tmp/tmp5ut_7kcg.cpp:7:54: error: \u2018class std::tuple<int, int, int>\u2019 has no member named \u2018get\u2019\n    7 |     int second_type = std::any_cast<int>(test_tuple1.get<1>());\n      |                                                      ^~~\n/tmp/tmp5ut_7kcg.cpp:7:61: error: expected primary-expression before \u2018)\u2019 token\n    7 |     int second_type = std::any_cast<int>(test_tuple1.get<1>());\n      |                                                             ^\n/tmp/tmp5ut_7kcg.cpp:8:53: error: \u2018class std::tuple<int, int, int>\u2019 has no member named \u2018get\u2019\n    8 |     int third_type = std::any_cast<int>(test_tuple1.get<2>());\n      |                                                     ^~~\n/tmp/tmp5ut_7kcg.cpp:8:60: error: expected primary-expression before \u2018)\u2019 token\n    8 |     int third_type = std::any_cast<int>(test_tuple1.get<2>());\n      |                                                            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple_1;\n    std::tuple<int, float, double> test_tuple_2;\n    std::tuple<int, float, double> test_tuple_3;\n    std::tuple<int, float, double> test_tuple_4;\n    std::tuple<int, float, double> test_tuple_5;\n    std::tuple<int, float, double> test_tuple_6;\n    std::tuple<int, float, double> test_tuple_7;\n    std::tuple<int, float, double> test_tuple_8;\n    std::tuple<int, float, double> test_tuple_9;\n    std::tuple<int, float, double> test_tuple_10;\n    std::tuple<int, float, double> test_tuple_11;\n    std::tuple<int, float, double> test_tuple_12;\n    std::tuple<int, float, double> test_tuple_13;\n    std::tuple<int, float, double> test_tuple_14;\n    std::tuple<int, float, double> test_tuple_15;\n    std::tuple<int, float, double> test_tuple_16;\n    std::tuple<int, float, double> test_tuple_17;\n    std::tuple<int, float, double> test_tuple_18;\n    std::tuple<int, float, double> test_tuple_19;\n    std::tuple<int, float, double> test_tuple_20;\n    std::tuple<int, float, double> test_tuple_21;\n    std::tuple<int, float, double> test_tuple_22;\n    std::tuple<int, float, double> test_tuple_23;\n    std::tuple<int, float, double> test_tuple_24;\n    std::tuple<int, float, double> test_tuple_25;\n    std::tuple<int, float, double\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "/tmp/tmpo_1p3c_v.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpo_1p3c_v.cpp:30:28: error: template argument 3 is invalid\n   30 |     std::tuple<int, float, double\n      |                            ^~~~~~\n/tmp/tmpo_1p3c_v.cpp:31:1: error: expected unqualified-id before \u2018}\u2019 token\n   31 | }\n      | ^\n/tmp/tmpo_1p3c_v.cpp:31:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    return std::any_cast<int>(test_tuple) == std::any_cast<int>(test_tuple);\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple = std::make_tuple(1, 2.0, 3.0);\n    std::any_cast<int>(test_tuple[0]);\n    std::any_cast<float>(test_tuple[1]);\n    std::any_cast<double>(test_tuple[2]);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "/tmp/tmpfm1_rvxe.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpfm1_rvxe.cpp:5:36: error: declaration of \u2018std::tuple<int, float, double> test_tuple\u2019 shadows a parameter\n    5 |     std::tuple<int, float, double> test_tuple = std::make_tuple(1, 2.0, 3.0);\n      |                                    ^~~~~~~~~~\n/tmp/tmpfm1_rvxe.cpp:6:34: error: no match for \u2018operator[]\u2019 (operand types are \u2018std::tuple<int, float, double>\u2019 and \u2018int\u2019)\n    6 |     std::any_cast<int>(test_tuple[0]);\n      |                                  ^\n/tmp/tmpfm1_rvxe.cpp:7:36: error: no match for \u2018operator[]\u2019 (operand types are \u2018std::tuple<int, float, double>\u2019 and \u2018int\u2019)\n    7 |     std::any_cast<float>(test_tuple[1]);\n      |                                    ^\n/tmp/tmpfm1_rvxe.cpp:8:37: error: no match for \u2018operator[]\u2019 (operand types are \u2018std::tuple<int, float, double>\u2019 and \u2018int\u2019)\n    8 |     std::any_cast<double>(test_tuple[2]);\n      |                                     ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    return std::any_cast<int>(test_tuple) == std::any_cast<int>(test_tuple);\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double, char, std::string> test_tuple_1;\n    std::tuple<int, float, double, char, std::string> test_tuple_2;\n    std::tuple<int, float, double, char, std::string> test_tuple_3;\n    std::tuple<int, float, double, char, std::string> test_tuple_4;\n    std::tuple<int, float, double, char, std::string> test_tuple_5;\n    std::tuple<int, float, double, char, std::string> test_tuple_6;\n    std::tuple<int, float, double, char, std::string> test_tuple_7;\n    std::tuple<int, float, double, char, std::string> test_tuple_8;\n    std::tuple<int, float, double, char, std::string> test_tuple_9;\n    std::tuple<int, float, double, char, std::string> test_tuple_10;\n    std::tuple<int, float, double, char, std::string> test_tuple_11;\n    std::tuple<int, float, double, char, std::string> test_tuple_12;\n    std::tuple<int, float, double, char, std::string> test_tuple_13;\n    std::tuple<int, float, double, char, std::string> test_tuple_14;\n    std::tuple<int, float, double, char, std::string> test_tuple_15;\n    std::tuple<int, float, double, char, std::string> test_tuple_16;\n    std::tuple<int, float, double, char, std::string> test_tuple_17;\n    std::tuple<int, float, double, char, std::string> test_tuple_18;\n    std::tuple<int, float, double, char, std::string> test_tuple_19;\n    std::tuple<int, float, double, char, std::string\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "/tmp/tmpj6d49gdm.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpj6d49gdm.cpp:24:47: error: template argument 5 is invalid\n   24 |     std::tuple<int, float, double, char, std::string\n      |                                               ^~~~~~\n/tmp/tmpj6d49gdm.cpp:25:1: error: expected unqualified-id before \u2018}\u2019 token\n   25 | }\n      | ^\n/tmp/tmpj6d49gdm.cpp:25:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple_1;\n    std::tuple<int, float, char> test_tuple_2;\n    std::tuple<int, float, std::string> test_tuple_3;\n    std::tuple<int, float, int> test_tuple_4;\n    std::tuple<int, float, float> test_tuple_5;\n    std::tuple<int, float, double> test_tuple_6;\n    std::tuple<int, float, char> test_tuple_7;\n    std::tuple<int, float, std::string> test_tuple_8;\n    std::tuple<int, float, int> test_tuple_9;\n    std::tuple<int, float, float> test_tuple_10;\n    std::tuple<int, float, double> test_tuple_11;\n    std::tuple<int, float, char> test_tuple_12;\n    std::tuple<int, float, std::string> test_tuple_13;\n    std::tuple<int, float, int> test_tuple_14;\n    std::tuple<int, float, float> test_tuple_15;\n    std::tuple<int, float, double> test_tuple_16;\n    std::tuple<int, float, char> test_tuple_17;\n    std::tuple<int, float, std::string> test_tuple_18;\n    std::tuple<int, float, int> test_tuple_19;\n    std::tuple<int, float, float> test_tuple_20;\n    std::tuple<int, float, double> test_tuple_21;\n    std::tuple<int, float, char> test_tuple_22;\n    std::tuple<int, float, std::string> test_tuple_23;\n    std::tuple<int, float, int> test_tuple_24;\n    std::tuple<int, float, float> test_tuple_25;\n   \n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "tmp_7pshs39: /tmp/tmp_7pshs39.cpp:34: int main(): Assertion `candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    return std::any_cast<int>(test_tuple).type() == typeid(int);\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "/tmp/tmpvovz4s1e.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpvovz4s1e.cpp:5:43: error: request for member \u2018type\u2019 in \u2018std::any_cast<int>(test_tuple)\u2019, which is of non-class type \u2018int\u2019\n    5 |     return std::any_cast<int>(test_tuple).type() == typeid(int);\n      |                                           ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, int, int> test_tuple_1;\n    std::tuple<char, char, char> test_tuple_2;\n    std::tuple<float, float, float> test_tuple_3;\n    std::tuple<double, double, double> test_tuple_4;\n    std::tuple<std::string, std::string, std::string> test_tuple_5;\n    std::tuple<std::vector<int>, std::vector<int>, std::vector<int>> test_tuple_6;\n    std::tuple<std::list<int>, std::list<int>, std::list<int>> test_tuple_7;\n    std::tuple<std::map<int, int>, std::map<int, int>, std::map<int, int>> test_tuple_8;\n    std::tuple<std::set<int>, std::set<int>, std::set<int>> test_tuple_9;\n    std::tuple<std::stack<int>, std::stack<int>, std::stack<int>> test_tuple_10;\n    std::tuple<std::queue<int>, std::queue<int>, std::queue<int>> test_tuple_11;\n    std::tuple<std::priority_queue<int>, std::priority_queue<int>, std::priority_queue<int>> test_tuple_12;\n    std::tuple<std::deque<int>, std::deque<int>, std::deque<int>> test_tuple_13;\n    std::tuple<std::forward_list<int>, std::forward_list<int>, std::forward_list<int>> test_tuple_14;\n    std::tuple<std::unordered_set<int>, std::unordered_set<int>, std::unordered_set<int>> test_tuple_15;\n    std::tuple<std::unordered_map<int, int>, std::unordered_map<int, int>, std::unordered_map<int, int>> test_tuple_16;\n    std::tuple<std::\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "/tmp/tmpgtalcsu1.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpgtalcsu1.cpp:21:16: error: template argument 1 is invalid\n   21 |     std::tuple<std::\n      |                ^~~\n/tmp/tmpgtalcsu1.cpp:22:1: error: expected unqualified-id before \u2018}\u2019 token\n   22 | }\n      | ^\n/tmp/tmpgtalcsu1.cpp:22:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple_1(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_2(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_3(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_4(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_5(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_6(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_7(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_8(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_9(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_10(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_11(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_12(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_13(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_14(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_15(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_16(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_17(1, 2.0, 3.0);\n   \n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "tmp09ixxfxe: /tmp/tmp09ixxfxe.cpp:26: int main(): Assertion `candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple_1(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_2(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_3(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_4(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_5(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_6(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_7(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_8(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_9(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_10(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_11(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_12(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_13(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_14(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_15(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_16(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_17(1, 2.0, 3.0);\n   \n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "tmp09ixxfxe: /tmp/tmp09ixxfxe.cpp:26: int main(): Assertion `candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, int, int> test_tuple_1 = std::any_cast<std::tuple<int, int, int>>(test_tuple);\n    std::tuple<float, float, float> test_tuple_2 = std::any_cast<std::tuple<float, float, float>>(test_tuple);\n    std::tuple<double, double, double> test_tuple_3 = std::any_cast<std::tuple<double, double, double>>(test_tuple);\n    std::tuple<char, char, char> test_tuple_4 = std::any_cast<std::tuple<char, char, char>>(test_tuple);\n    std::tuple<std::string, std::string, std::string> test_tuple_5 = std::any_cast<std::tuple<std::string, std::string, std::string>>(test_tuple);\n    if(test_tuple_1.size() == 3) {\n        return true;\n    }\n    else if(test_tuple_2.size() == 3) {\n        return true;\n    }\n    else if(test_tuple_3.size() == 3) {\n        return true;\n    }\n    else if(test_tuple_4.size() == 3) {\n        return true;\n    }\n    else if(test_tuple_5.size() == 3) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "/tmp/tmpqdyy9522.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpqdyy9522.cpp:10:21: error: \u2018class std::tuple<int, int, int>\u2019 has no member named \u2018size\u2019\n   10 |     if(test_tuple_1.size() == 3) {\n      |                     ^~~~\n/tmp/tmpqdyy9522.cpp:13:26: error: \u2018class std::tuple<float, float, float>\u2019 has no member named \u2018size\u2019\n   13 |     else if(test_tuple_2.size() == 3) {\n      |                          ^~~~\n/tmp/tmpqdyy9522.cpp:16:26: error: \u2018class std::tuple<double, double, double>\u2019 has no member named \u2018size\u2019\n   16 |     else if(test_tuple_3.size() == 3) {\n      |                          ^~~~\n/tmp/tmpqdyy9522.cpp:19:26: error: \u2018class std::tuple<char, char, char>\u2019 has no member named \u2018size\u2019\n   19 |     else if(test_tuple_4.size() == 3) {\n      |                          ^~~~\n/tmp/tmpqdyy9522.cpp:22:26: error: \u2018class std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >\u2019 has no member named \u2018size\u2019\n   22 |     else if(test_tuple_5.size() == 3) {\n      |                          ^~~~\n/tmp/tmpqdyy9522.cpp:28:1: warning: control reaches end of non-void function [-Wreturn-type]\n   28 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::string type = test_tuple.type().name();\n    std::cout << type << std::endl;\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123421,
      "stdout": "St5tupleIJiiiiiiEE\nSt5tupleIJiiPKcEE\n",
      "stderr": "tmp1ld6yk48: /tmp/tmp1ld6yk48.cpp:12: int main(): Assertion `candidate(std::make_tuple(1, 2, \"4\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::tuple<int, float, double> test_tuple1(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple2(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple3(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple4(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple5(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple6(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple7(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple8(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple9(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple10(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple11(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple12(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple13(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple14(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple15(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple16(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple17(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple18(\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmpumk3pfbe.cpp: In function \u2018bool check_type(std::any)\u2019:\n/tmp/tmpumk3pfbe.cpp:23:1: error: expected primary-expression before \u2018}\u2019 token\n   23 | }\n      | ^\n/tmp/tmpumk3pfbe.cpp:23:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmpumk3pfbe.cpp:23:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n    std::any_cast<int>(test_tuple);\n    return true;\n}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
      "timestamp": 1665510558,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::bad_any_cast'\n  what():  bad any_cast\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}