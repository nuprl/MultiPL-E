{
  "name": "mbpp_119_search",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_119_search.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    long mid;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if ((mid - 1) % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        } else {\n            if ((mid - 1) % 2 == 0) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1665510192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high - low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            } else {\n                low = mid+1;\n            }\n        } else {\n            if(mid%2 == 0) {\n                low = mid+2;\n            } else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1665510192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                high = mid - 2;\n            } else {\n                low = mid + 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1665510192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long n = arr.size();\n    long low = 0;\n    long high = n-1;\n    while(low < high) {\n        long mid = low + (high - low)/2;\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            } else {\n                low = mid+1;\n            }\n        } else if(arr[mid] == arr[mid+1]) {\n            if(mid%2 == 0) {\n                low = mid+2;\n            } else {\n                high = mid-1;\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    return arr[low];\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1665510192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low <= high) {\n        mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        else if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else if(arr[mid] == arr[mid+1]) {\n            if(mid%2 == 0) {\n                high = mid-1;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1665510192,
      "stdout": "",
      "stderr": "tmpjqcxl9dq: /tmp/tmpjqcxl9dq.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size()-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else {\n            if(mid%2 == 0) {\n                high = mid-1;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1665510192,
      "stdout": "",
      "stderr": "tmp8xtqumjy: /tmp/tmp8xtqumjy.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid = 0;\n    while(low <= high) {\n        mid = low + (high - low)/2;\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        else if(arr[mid] == arr[mid-1]) {\n            if(mid % 2 == 0) {\n                high = mid - 2;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        else if(arr[mid] == arr[mid+1]) {\n            if(mid % 2 == 0) {\n                low = mid + 2;\n            }\n            else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1665510192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0, high = n - 1;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (mid == 0 || mid == n - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                high = mid - 2;\n            } else {\n                low = mid + 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1665510192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size()-1;\n    while(low<=high){\n        long mid = low + (high-low)/2;\n        if(mid==0 || mid==arr.size()-1){\n            return arr[mid];\n        }\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid]==arr[mid-1]){\n            if(mid%2==0){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else{\n            if(mid%2==0){\n                high = mid-1;\n            }\n            else{\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1665510192,
      "stdout": "",
      "stderr": "tmpqjqurjnm: /tmp/tmpqjqurjnm.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid - 1]) {\n            if(mid % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        } else {\n            if(mid % 2 == 0) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1665510192,
      "stdout": "",
      "stderr": "tmpza0zcejh: /tmp/tmpza0zcejh.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0, high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n        if(arr[mid] == arr[mid+1]) {\n            if(mid%2 == 0) {\n                low = mid+2;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1665510192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size()-1;\n    long mid;\n    while(low<=high){\n        mid = (low+high)/2;\n        if(arr[mid]==arr[mid-1]){\n            if(mid%2==0){\n                high = mid-2;\n            }\n            else{\n                low = mid+1;\n            }\n        }\n        else if(arr[mid]==arr[mid+1]){\n            if(mid%2==0){\n                low = mid+2;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else{\n            return arr[mid];\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1665510192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low<=high) {\n        int mid = (low+high)/2;\n        if(mid==0 || mid==n-1) {\n            return arr[mid];\n        }\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]) {\n            return arr[mid];\n        }\n        else if(arr[mid]==arr[mid-1]) {\n            if((mid-1)%2==0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-2;\n            }\n        }\n        else {\n            if(mid%2==0) {\n                low = mid+2;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1665510192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size()-1;\n    while(low<=high) {\n        long mid = low + (high-low)/2;\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(mid%2 == 0) {\n            if(arr[mid] == arr[mid+1]) {\n                low = mid+2;\n            }\n            else {\n                high = mid-2;\n            }\n        }\n        else {\n            if(arr[mid] == arr[mid-1]) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1665510192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n - 1;\n    while(low <= high) {\n        int mid = (low + high) / 2;\n        if(mid == 0 || mid == n - 1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid - 1]) {\n            if(mid % 2 == 0) {\n                high = mid - 2;\n            } else {\n                low = mid + 1;\n            }\n        } else {\n            if(mid % 2 == 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1665510192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n - 1;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (mid == 0 || mid == n - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if ((mid - 1) % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 2;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1665510192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid+1;\n            } else {\n                high = mid-1;\n            }\n        } else {\n            if(mid%2 == 0) {\n                high = mid-1;\n            } else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1665510192,
      "stdout": "",
      "stderr": "tmpi7bfwr6s: /tmp/tmpi7bfwr6s.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size()-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(mid == 0 || mid == arr.size()-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else {\n            if(mid%2 == 0) {\n                high = mid-1;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1665510192,
      "stdout": "",
      "stderr": "tmput18u8dr: /tmp/tmput18u8dr.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n - 1;\n    while(low <= high) {\n        int mid = low + (high - low) / 2;\n        if(mid == 0 || mid == n - 1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid - 1]) {\n            if(mid % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        if(arr[mid] == arr[mid + 1]) {\n            if(mid % 2 == 0) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1665510192,
      "stdout": "",
      "stderr": "tmpmlhhcrc1: /tmp/tmpmlhhcrc1.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size()-1;\n    while(low<=high){\n        long mid = low + (high-low)/2;\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        if(mid%2==0){\n            if(arr[mid]==arr[mid+1]){\n                low = mid+2;\n            }\n            else{\n                high = mid-2;\n            }\n        }\n        else{\n            if(arr[mid]==arr[mid-1]){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1665510192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    long mid;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                high = mid - 2;\n            } else {\n                low = mid + 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123293,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    long mid;\n    while(low <= high) {\n        mid = low + (high - low) / 2;\n        if(mid == 0) {\n            if(arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        else if(mid == arr.size() - 1) {\n            if(arr[mid] != arr[mid - 1]) {\n                return arr[mid];\n            }\n            else {\n                high = mid - 1;\n            }\n        }\n        else if(arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        else if(arr[mid] == arr[mid - 1]) {\n            if(mid % 2 == 0) {\n                high = mid - 2;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        else if(arr[mid] == arr[mid + 1]) {\n            if(mid % 2 == 0) {\n                low = mid + 2;\n            }\n            else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123293,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if ((mid - 1) % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        } else {\n            if ((mid - 1) % 2 == 0) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123293,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long n = arr.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            } else {\n                low = mid+1;\n            }\n        } else {\n            if(mid%2 == 0) {\n                low = mid+2;\n            } else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123293,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            } else {\n                low = mid+1;\n            }\n        } else {\n            if(mid%2 == 0) {\n                low = mid+2;\n            } else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123293,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    while(low <= high) {\n        long mid = low + (high - low) / 2;\n        if(mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid - 1]) {\n            if(mid % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        } else {\n            if(mid % 2 == 0) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123293,
      "stdout": "",
      "stderr": "tmpmz7y2h7l: /tmp/tmpmz7y2h7l.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123293,
      "stdout": "",
      "stderr": "tmpybcoq133: /tmp/tmpybcoq133.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int low = 0;\n    int high = arr.size()-1;\n    int mid = 0;\n    while(low <= high) {\n        mid = low + (high-low)/2;\n        if(mid == 0 || mid == arr.size()-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid+1;\n            } else {\n                high = mid-1;\n            }\n        } else {\n            if(mid%2 == 0) {\n                high = mid-1;\n            } else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123293,
      "stdout": "",
      "stderr": "tmpqdsdk5_u: /tmp/tmpqdsdk5_u.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123293,
      "stdout": "",
      "stderr": "tmp3fp92pxh: /tmp/tmp3fp92pxh.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high - low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n        else {\n            if(mid%2 == 0) {\n                low = mid+2;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123293,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low <= high) {\n        mid = (low+high)/2;\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            } else {\n                low = mid+1;\n            }\n        } else if(arr[mid] == arr[mid+1]) {\n            if(mid%2 == 0) {\n                low = mid+2;\n            } else {\n                high = mid-1;\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123293,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = (low + high)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid+1;\n            } else {\n                high = mid-1;\n            }\n        }\n        if(arr[mid] == arr[mid+1]) {\n            if(mid%2 == 0) {\n                high = mid-1;\n            } else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123293,
      "stdout": "",
      "stderr": "tmpkcr_a554: /tmp/tmpkcr_a554.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n - 1;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (mid == 0 || mid == n - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                high = mid - 2;\n            } else {\n                low = mid + 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123293,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high - low) / 2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if((mid-1) % 2 == 0) {\n                low = mid + 1;\n            }\n            else {\n                high = mid - 1;\n            }\n        }\n        else {\n            if(mid % 2 == 0) {\n                low = mid + 1;\n            }\n            else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123293,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid+1;\n            } else {\n                high = mid-1;\n            }\n        } else {\n            if(mid%2 == 0) {\n                high = mid-1;\n            } else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1665510192,
      "stdout": "",
      "stderr": "tmpi7bfwr6s: /tmp/tmpi7bfwr6s.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123293,
      "stdout": "",
      "stderr": "tmpybcoq133: /tmp/tmpybcoq133.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123293,
      "stdout": "",
      "stderr": "tmp3fp92pxh: /tmp/tmp3fp92pxh.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high - low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(mid%2 == 0) {\n            if(arr[mid] == arr[mid+1]) {\n                low = mid+2;\n            } else {\n                high = mid-2;\n            }\n        } else {\n            if(arr[mid] == arr[mid-1]) {\n                low = mid+1;\n            } else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123293,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size()-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(mid == 0 || mid == arr.size()-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            } else {\n                low = mid+1;\n            }\n        } else {\n            if(mid%2 == 0) {\n                low = mid+2;\n            } else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123293,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    while(low < high) {\n        long mid = (low + high) / 2;\n        if(mid % 2 == 0) {\n            if(arr[mid] == arr[mid + 1]) {\n                low = mid + 2;\n            }\n            else {\n                high = mid;\n            }\n        }\n        else {\n            if(arr[mid] == arr[mid - 1]) {\n                low = mid + 1;\n            }\n            else {\n                high = mid - 1;\n            }\n        }\n    }\n    return arr[low];\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123293,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int low = 0;\n    int high = arr.size() - 1;\n    while (low <= high) {\n        int mid = (low + high) / 2;\n        if (mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123293,
      "stdout": "",
      "stderr": "tmpecf7l2xv: /tmp/tmpecf7l2xv.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    while (low <= high) {\n        long mid = (low + high) / 2;\n        if (mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if ((mid - 1) % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 2;\n            }\n        } else {\n            if ((mid - 1) % 2 == 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123293,
      "stdout": "",
      "stderr": "tmp26groj0n: /tmp/tmp26groj0n.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid = (low+high)/2;\n    while(low<high) {\n        if(arr[mid]==arr[mid-1]) {\n            if(mid%2==0) {\n                high = mid-2;\n            } else {\n                low = mid+1;\n            }\n        } else if(arr[mid]==arr[mid+1]) {\n            if(mid%2==0) {\n                low = mid+2;\n            } else {\n                high = mid-1;\n            }\n        } else {\n            return arr[mid];\n        }\n        mid = (low+high)/2;\n    }\n    return arr[mid];\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123293,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if ((mid - 1) % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        if (arr[mid] == arr[mid + 1]) {\n            if ((mid + 1) % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123293,
      "stdout": "",
      "stderr": "tmpxj8rnipj: /tmp/tmpxj8rnipj.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    while(low <= high) {\n        long mid = low + (high - low) / 2;\n        if(mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid - 1]) {\n            if(mid % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        } else {\n            if(mid % 2 == 0) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123293,
      "stdout": "",
      "stderr": "tmpmz7y2h7l: /tmp/tmpmz7y2h7l.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int low = 0;\n    int high = arr.size() - 1;\n    while (low <= high) {\n        int mid = (low + high) / 2;\n        if (arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if (mid % 2 == 0) {\n            if (arr[mid] == arr[mid+1]) {\n                low = mid + 2;\n            } else {\n                high = mid - 2;\n            }\n        } else {\n            if (arr[mid] == arr[mid-1]) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123293,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            } else {\n                low = mid+1;\n            }\n        } else {\n            if(mid%2 == 0) {\n                low = mid+2;\n            } else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123293,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high - low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            } else {\n                low = mid+1;\n            }\n        } else {\n            if(mid%2 == 0) {\n                low = mid+2;\n            } else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1665510192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high - low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        else if(arr[mid] == arr[mid-1]) {\n            if((mid-1)%2 == 0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else if(arr[mid] == arr[mid+1]) {\n            if((mid+1)%2 == 0) {\n                low = mid+2;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123293,
      "stdout": "",
      "stderr": "tmpp9yuy2tw: /tmp/tmpp9yuy2tw.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while (low <= high) {\n        int mid = low + (high-low)/2;\n        if (mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid-1]) {\n            if (mid%2 == 0) {\n                high = mid-2;\n            } else {\n                low = mid+1;\n            }\n        } else if (arr[mid] == arr[mid+1]) {\n            if (mid%2 == 0) {\n                low = mid+2;\n            } else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n - 1;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (mid == 0 || mid == n - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if ((mid - 1) % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        } else {\n            if ((mid - 1) % 2 == 0) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                high = mid - 2;\n            } else {\n                low = mid + 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1665510192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0, high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if((mid-1)%2 == 0) {\n                low = mid+1;\n            } else {\n                high = mid-1;\n            }\n        } else {\n            if((mid-1)%2 == 0) {\n                high = mid-1;\n            } else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            } else {\n                low = mid+1;\n            }\n        } else {\n            if(mid%2 == 0) {\n                low = mid+2;\n            } else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123293,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int low = 0;\n    int high = arr.size() - 1;\n    int mid;\n    while(low <= high) {\n        mid = low + (high - low)/2;\n        if(mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid - 1]) {\n            if(mid % 2 == 0) {\n                low = mid + 1;\n            }\n            else {\n                high = mid - 1;\n            }\n        }\n        else {\n            if(mid % 2 == 0) {\n                high = mid - 1;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "tmpw4mxqcsx: /tmp/tmpw4mxqcsx.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size()-1;\n    while(low<=high){\n        long mid = low + (high-low)/2;\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]){\n            if(mid%2 == 0){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else if(arr[mid] == arr[mid+1]){\n            if(mid%2 == 0){\n                high = mid-1;\n            }\n            else{\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "tmpy6loeauz: /tmp/tmpy6loeauz.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    while(low <= high) {\n        long mid = low + (high - low) / 2;\n        if(arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        else if(arr[mid] == arr[mid - 1]) {\n            if(mid % 2 == 0) {\n                high = mid - 2;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        else if(arr[mid] == arr[mid + 1]) {\n            if(mid % 2 == 0) {\n                low = mid + 2;\n            }\n            else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high - low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid % 2 == 0) {\n                high = mid-2;\n            } else {\n                low = mid+1;\n            }\n        } else {\n            if(mid % 2 == 0) {\n                low = mid+2;\n            } else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if((mid-1)%2 == 0) {\n                low = mid+1;\n            } else {\n                high = mid-1;\n            }\n        } else {\n            if((mid)%2 == 0) {\n                low = mid+1;\n            } else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (mid % 2 == 0) {\n            if (arr[mid] == arr[mid + 1]) {\n                low = mid + 2;\n            } else {\n                high = mid;\n            }\n        } else {\n            if (arr[mid] == arr[mid - 1]) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return arr[low];\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123310,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if((mid-1)%2 == 0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else {\n            if((mid-1)%2 == 0) {\n                high = mid-1;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low<=high) {\n        int mid = low + (high-low)/2;\n        if(mid==0 || mid==n-1) {\n            return arr[mid];\n        }\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid]==arr[mid-1]) {\n            if(mid%2==0) {\n                high = mid-2;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n        else {\n            if(mid%2==0) {\n                low = mid+2;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = (low+high)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else {\n            if(mid%2 == 0) {\n                high = mid-1;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "tmpuulxat_4: /tmp/tmpuulxat_4.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    long mid;\n    while(low <= high) {\n        mid = (low + high) / 2;\n        if(mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid - 1]) {\n            if(mid % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        } else {\n            if(mid % 2 == 0) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "tmpssrr9ar9: /tmp/tmpssrr9ar9.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            } else {\n                low = mid+1;\n            }\n        } else {\n            if(mid%2 == 0) {\n                low = mid+2;\n            } else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123293,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size()-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(mid == 0 || mid == arr.size()-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid+1;\n            } else {\n                high = mid-1;\n            }\n        } else {\n            if(mid%2 == 0) {\n                high = mid-1;\n            } else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "tmpkikhk9ol: /tmp/tmpkikhk9ol.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high - low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            } else {\n                low = mid+1;\n            }\n        } else {\n            if(mid%2 == 0) {\n                low = mid+2;\n            } else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1665510192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1] && mid%2 == 0) {\n            low = mid+1;\n        }\n        else if(arr[mid] == arr[mid-1] && mid%2 == 1) {\n            high = mid-1;\n        }\n        else if(arr[mid] == arr[mid+1] && mid%2 == 0) {\n            high = mid-1;\n        }\n        else if(arr[mid] == arr[mid+1] && mid%2 == 1) {\n            low = mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "tmptbx7tgwb: /tmp/tmptbx7tgwb.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int low = 0;\n    int high = arr.size()-1;\n    int mid;\n    while(low <= high) {\n        mid = low + (high-low)/2;\n        if(mid == 0 || mid == arr.size()-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else {\n            if(mid%2 == 0) {\n                high = mid-1;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "tmpjl5rzous: /tmp/tmpjl5rzous.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    long mid = 0;\n    while(low <= high) {\n        mid = low + (high - low) / 2;\n        if(mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid - 1]) {\n            if(mid % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        } else {\n            if(mid % 2 == 0) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "tmpcdn4pddt: /tmp/tmpcdn4pddt.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int low = 0;\n    int high = arr.size() - 1;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "tmp3hygd49a: /tmp/tmp3hygd49a.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        else if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n        else if(arr[mid] == arr[mid+1]) {\n            if(mid%2 == 0) {\n                low = mid+2;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        else if(arr[mid] == arr[mid-1]) {\n            if((mid-1)%2 == 0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else if(arr[mid] == arr[mid+1]) {\n            if((mid+1)%2 == 0) {\n                low = mid+2;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "tmprd4ic_e4: /tmp/tmprd4ic_e4.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if ((mid - 1) % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 2;\n            }\n        } else {\n            if ((mid - 1) % 2 == 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "tmp1dlfkg3g: /tmp/tmp1dlfkg3g.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high - low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if((mid-1)%2 == 0) {\n                low = mid+1;\n            } else {\n                high = mid-1;\n            }\n        } else {\n            if((mid)%2 == 0) {\n                low = mid+1;\n            } else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size()-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        else if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n        else if(arr[mid] == arr[mid+1]) {\n            if(mid%2 == 0) {\n                low = mid+2;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid+1;\n            } else {\n                high = mid-1;\n            }\n        } else {\n            if(mid%2 == 0) {\n                high = mid-1;\n            } else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1665510192,
      "stdout": "",
      "stderr": "tmpi7bfwr6s: /tmp/tmpi7bfwr6s.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low <= high) {\n        mid = (low+high)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            } else {\n                low = mid+1;\n            }\n        } else {\n            if(mid%2 == 0) {\n                low = mid+2;\n            } else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid = (low+high)/2;\n    while(low<high){\n        if(mid%2==0){\n            if(arr[mid]==arr[mid+1]){\n                low = mid+2;\n            }\n            else{\n                high = mid;\n            }\n        }\n        else{\n            if(arr[mid]==arr[mid-1]){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        mid = (low+high)/2;\n    }\n    return arr[mid];\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size()-1;\n    long mid = 0;\n    while(low <= high) {\n        mid = (low + high)/2;\n        if(mid == 0) {\n            if(arr[mid] != arr[mid+1]) {\n                return arr[mid];\n            }\n            else {\n                low = mid+1;\n            }\n        }\n        else if(mid == arr.size()-1) {\n            if(arr[mid] != arr[mid-1]) {\n                return arr[mid];\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else {\n            if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n                return arr[mid];\n            }\n            else if(arr[mid] == arr[mid-1]) {\n                if((mid-1)%2 == 0) {\n                    low = mid+1;\n                }\n                else {\n                    high = mid-1;\n                }\n            }\n            else {\n                if((mid-1)%2 == 0) {\n                    high = mid-1;\n                }\n                else {\n                    low = mid+1;\n                }\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size()-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(mid == 0 || mid == arr.size()-1)\n            return arr[mid];\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1])\n            return arr[mid];\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0)\n                high = mid-2;\n            else\n                low = mid+1;\n        }\n        else {\n            if(mid%2 == 0)\n                low = mid+2;\n            else\n                high = mid-1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low<=high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1] && mid%2 == 0) {\n            low = mid+1;\n        }\n        else if(arr[mid] == arr[mid+1] && mid%2 == 1) {\n            low = mid+1;\n        }\n        else {\n            high = mid-1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "tmpfku64ef1: /tmp/tmpfku64ef1.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid+1;\n            } else {\n                high = mid-1;\n            }\n        } else {\n            if(mid%2 == 0) {\n                high = mid-1;\n            } else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1665510192,
      "stdout": "",
      "stderr": "tmpi7bfwr6s: /tmp/tmpi7bfwr6s.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int l = 0;\n    int r = n-1;\n    while(l<=r){\n        int mid = (l+r)/2;\n        if(mid == 0 || mid == n-1){\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]){\n            if(mid%2 == 0){\n                l = mid+1;\n            }\n            else{\n                r = mid-1;\n            }\n        }\n        if(arr[mid] == arr[mid+1]){\n            if(mid%2 == 0){\n                r = mid-1;\n            }\n            else{\n                l = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "tmpqlabpu3x: /tmp/tmpqlabpu3x.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high){\n        mid = low + (high-low)/2;\n        if(mid==0 || mid==n-1){\n            return arr[mid];\n        }\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid]==arr[mid-1]){\n            if(mid%2==0){\n                high = mid-2;\n            }\n            else{\n                low = mid+1;\n            }\n        }\n        else{\n            if(mid%2==0){\n                low = mid+2;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    long mid;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "tmpj8s7xar_: /tmp/tmpj8s7xar_.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size()-1;\n    while(low<=high){\n        long mid = (low+high)/2;\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid]==arr[mid-1]){\n            if(mid%2==0){\n                high = mid-2;\n            }else{\n                low = mid+1;\n            }\n        }else{\n            if(mid%2==0){\n                low = mid+2;\n            }else{\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low <= high) {\n        mid = (low + high)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid+1;\n            } else {\n                high = mid-1;\n            }\n        } else {\n            if(mid%2 == 0) {\n                high = mid-1;\n            } else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "tmpmoy1d8ax: /tmp/tmpmoy1d8ax.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid % 2 == 0) {\n                high = mid - 2;\n            } else {\n                low = mid + 1;\n            }\n        } else {\n            if(mid % 2 == 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    while(low <= high) {\n        long mid = low + (high - low) / 2;\n        if(mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid - 1]) {\n            if(mid % 2 == 0) {\n                high = mid - 2;\n            } else {\n                low = mid + 1;\n            }\n        } else {\n            if(mid % 2 == 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid - 1]) {\n            if(mid % 2 == 0) {\n                high = mid - 2;\n            } else {\n                low = mid + 1;\n            }\n        } else {\n            if(mid % 2 == 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long n = arr.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1])\n            return arr[mid];\n        else if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0)\n                high = mid-2;\n            else\n                low = mid+1;\n        }\n        else if(arr[mid] == arr[mid+1]) {\n            if(mid%2 == 0)\n                low = mid+2;\n            else\n                high = mid-1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n - 1;\n    while(low <= high) {\n        int mid = low + (high - low) / 2;\n        if(mid == 0 || mid == n - 1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid - 1]) {\n            if(mid % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        } else {\n            if(mid % 2 == 0) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "tmpex1oeyxh: /tmp/tmpex1oeyxh.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low < high) {\n        mid = low + (high - low)/2;\n        if(mid % 2 == 0) {\n            if(arr[mid] == arr[mid+1]) {\n                low = mid+2;\n            }\n            else {\n                high = mid;\n            }\n        }\n        else {\n            if(arr[mid] == arr[mid-1]) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n    }\n    return arr[low];\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int start = 0;\n    int end = arr.size()-1;\n    int mid = 0;\n    while(start <= end) {\n        mid = (start + end)/2;\n        if(mid == 0 || mid == arr.size()-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid % 2 == 0) {\n                end = mid-2;\n            } else {\n                start = mid+1;\n            }\n        } else {\n            if(mid % 2 == 0) {\n                start = mid+2;\n            } else {\n                end = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size()-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(mid == 0 || mid == arr.size()-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid+1;\n            } else {\n                high = mid-1;\n            }\n        } else {\n            if(mid%2 == 0) {\n                high = mid-1;\n            } else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "tmpkikhk9ol: /tmp/tmpkikhk9ol.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0, high = n-1;\n    while(low <= high) {\n        int mid = low + (high - low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid % 2 == 0) {\n                high = mid - 2;\n            } else {\n                low = mid + 1;\n            }\n        } else {\n            if(mid % 2 == 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size()-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(mid%2 == 0) {\n            if(arr[mid] == arr[mid+1]) {\n                low = mid+2;\n            }\n            else {\n                high = mid-2;\n            }\n        }\n        else {\n            if(arr[mid] == arr[mid-1]) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size()-1;\n    long mid;\n    while(low <= high) {\n        mid = low + (high-low)/2;\n        if(mid == 0) {\n            if(arr[mid] != arr[mid+1]) {\n                return arr[mid];\n            }\n            else {\n                low = mid+1;\n            }\n        }\n        else if(mid == arr.size()-1) {\n            if(arr[mid] != arr[mid-1]) {\n                return arr[mid];\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else {\n            if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n                return arr[mid];\n            }\n            else if(arr[mid] == arr[mid-1]) {\n                if((mid-1)%2 == 0) {\n                    low = mid+1;\n                }\n                else {\n                    high = mid-1;\n                }\n            }\n            else {\n                if((mid-1)%2 == 0) {\n                    high = mid-1;\n                }\n                else {\n                    low = mid+1;\n                }\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int low = 0;\n    int high = arr.size() - 1;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if ((mid - 1) % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        } else if (arr[mid] == arr[mid + 1]) {\n            if ((mid + 1) % 2 == 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "tmp7c7if7ch: /tmp/tmp7c7if7ch.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    while(low <= high) {\n        long mid = low + (high - low) / 2;\n        if(mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid - 1]) {\n            if((mid - 1) % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 2;\n            }\n        } else {\n            if((mid - 1) % 2 == 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "tmpb5p3oiyd: /tmp/tmpb5p3oiyd.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid = 0;\n    while(low<=high) {\n        mid = (low+high)/2;\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]) {\n            return arr[mid];\n        }\n        if(mid%2==0) {\n            if(arr[mid]==arr[mid+1]) {\n                low = mid+2;\n            }\n            else {\n                high = mid-2;\n            }\n        }\n        else {\n            if(arr[mid]==arr[mid-1]) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123298,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                high = mid - 2;\n            } else {\n                low = mid + 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1665510192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = (low+high)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if((mid-1)%2 == 0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else if(arr[mid] == arr[mid+1]) {\n            if((mid+1)%2 == 0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123299,
      "stdout": "",
      "stderr": "tmpx9jczdof: /tmp/tmpx9jczdof.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    while (low <= high) {\n        long mid = (low + high) / 2;\n        if (mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid-1]) {\n            if (mid % 2 == 0) {\n                high = mid - 2;\n            } else {\n                low = mid + 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123298,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0, high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if((mid-1)%2 == 0) {\n                low = mid+1;\n            } else {\n                high = mid-1;\n            }\n        } else {\n            if((mid-1)%2 == 0) {\n                high = mid-1;\n            } else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                high = mid - 2;\n            } else {\n                low = mid + 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1665510192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        } else if (arr[mid] == arr[mid - 1]) {\n            if ((mid - 1) % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123298,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    // Write your code here\n    int n=arr.size();\n    int low=0;\n    int high=n-1;\n    int mid;\n    while(low<=high){\n        mid=low+(high-low)/2;\n        if(mid==0 || mid==n-1){\n            return arr[mid];\n        }\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid]==arr[mid-1]){\n            if(mid%2==0){\n                low=mid+1;\n            }\n            else{\n                high=mid-1;\n            }\n        }\n        else if(arr[mid]==arr[mid+1]){\n            if(mid%2==0){\n                high=mid-1;\n            }\n            else{\n                low=mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123298,
      "stdout": "",
      "stderr": "tmp6pox6gle: /tmp/tmp6pox6gle.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size()-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(mid == 0 || mid == arr.size()-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid+1;\n            } else {\n                high = mid-1;\n            }\n        } else {\n            if(mid%2 == 0) {\n                high = mid-1;\n            } else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "tmpkikhk9ol: /tmp/tmpkikhk9ol.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if((mid-1)%2 == 0) {\n                low = mid+1;\n            } else {\n                high = mid-2;\n            }\n        } else {\n            if((mid)%2 == 0) {\n                low = mid+2;\n            } else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123299,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n        else {\n            if(mid%2 == 0) {\n                low = mid+2;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123299,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0, high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if((mid-1)%2 == 0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else {\n            if(mid%2 == 0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123298,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int low = 0;\n    int high = arr.size()-1;\n    int mid;\n    while(low <= high) {\n        mid = low + (high-low)/2;\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        else if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n        else if(arr[mid] == arr[mid+1]) {\n            if(mid%2 == 0) {\n                low = mid+2;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123298,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int l = 0;\n    int r = n - 1;\n    while (l <= r) {\n        int mid = l + (r - l) / 2;\n        if (mid == 0 || mid == n - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                l = mid + 1;\n            } else {\n                r = mid - 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                r = mid - 1;\n            } else {\n                l = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123299,
      "stdout": "",
      "stderr": "tmpq7i8yisq: /tmp/tmpq7i8yisq.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int low = 0;\n    int high = arr.size()-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == arr.size()-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if((mid-1)%2 == 0) {\n                low = mid+1;\n            } else {\n                high = mid-1;\n            }\n        } else {\n            if((mid-1)%2 == 0) {\n                high = mid-1;\n            } else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123299,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                high = mid - 2;\n            } else {\n                low = mid + 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1665510192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    while (low <= high) {\n        long mid = (low + high) / 2;\n        if (mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123299,
      "stdout": "",
      "stderr": "tmplpv686da: /tmp/tmplpv686da.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = (low + high)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if((mid-1)%2 == 0) {\n                low = mid+1;\n            } else {\n                high = mid-1;\n            }\n        } else {\n            if((mid-1)%2 == 0) {\n                high = mid-1;\n            } else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123299,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                high = mid - 2;\n            } else {\n                low = mid + 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1665510192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n - 1;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (mid == 0 || mid == n - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                high = mid - 2;\n            } else {\n                low = mid + 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123293,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long n = arr.size();\n    long low = 0;\n    long high = n-1;\n    while(low<=high){\n        long mid = low + (high-low)/2;\n        if(mid%2==0){\n            if(arr[mid]==arr[mid+1]){\n                low = mid+2;\n            }else{\n                high = mid;\n            }\n        }else{\n            if(arr[mid]==arr[mid-1]){\n                low = mid+1;\n            }else{\n                high = mid-1;\n            }\n        }\n    }\n    return arr[low];\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = (low + high)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        } else {\n            if(mid % 2 == 0) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123299,
      "stdout": "",
      "stderr": "tmple3hdy2c: /tmp/tmple3hdy2c.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high - low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            } else {\n                low = mid+1;\n            }\n        } else {\n            if(mid%2 == 0) {\n                low = mid+2;\n            } else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1665510192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int low = 0;\n    int high = arr.size() - 1;\n    while(low <= high) {\n        int mid = low + (high - low)/2;\n        if(mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid - 1]) {\n            if(mid % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        } else {\n            if(mid % 2 == 0) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123299,
      "stdout": "",
      "stderr": "tmp685lwep0: /tmp/tmp685lwep0.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    while(low <= high) {\n        long mid = low + (high - low) / 2;\n        if(arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid - 1]) {\n            if(mid % 2 == 0) {\n                high = mid - 2;\n            } else {\n                low = mid + 1;\n            }\n        } else {\n            if(mid % 2 == 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123299,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    while (low <= high) {\n        long mid = (low + high) / 2;\n        if (mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                high = mid - 2;\n            } else {\n                low = mid + 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123299,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    while(low <= high) {\n        long mid = low + (high - low) / 2;\n        if(mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid - 1]) {\n            if(mid % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        if(arr[mid] == arr[mid + 1]) {\n            if(mid % 2 == 0) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123299,
      "stdout": "",
      "stderr": "tmp6ie5kqqs: /tmp/tmp6ie5kqqs.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int start = 0;\n    int end = arr.size()-1;\n    while(start <= end) {\n        int mid = start + (end - start)/2;\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(mid%2 == 0) {\n            if(arr[mid] == arr[mid+1]) {\n                start = mid+1;\n            } else {\n                end = mid-1;\n            }\n        } else {\n            if(arr[mid] == arr[mid-1]) {\n                start = mid+1;\n            } else {\n                end = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123299,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    // Write your code here\n    int n=arr.size();\n    int low=0;\n    int high=n-1;\n    int mid;\n    while(low<=high){\n        mid=low+(high-low)/2;\n        if(mid==0){\n            if(arr[mid]!=arr[mid+1]){\n                return arr[mid];\n            }\n            else{\n                low=mid+1;\n            }\n        }\n        else if(mid==n-1){\n            if(arr[mid]!=arr[mid-1]){\n                return arr[mid];\n            }\n            else{\n                high=mid-1;\n            }\n        }\n        else if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        else if(arr[mid]==arr[mid-1]){\n            if(mid%2==0){\n                low=mid+1;\n            }\n            else{\n                high=mid-1;\n            }\n        }\n        else if(arr[mid]==arr[mid+1]){\n            if(mid%2==0){\n                high=mid-1;\n            }\n            else{\n                low=mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123299,
      "stdout": "",
      "stderr": "tmppuddbo4s: /tmp/tmppuddbo4s.cpp:52: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0, high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            } else {\n                low = mid+1;\n            }\n        } else {\n            if(mid%2 == 0) {\n                low = mid+2;\n            } else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123299,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                high = mid - 2;\n            } else {\n                low = mid + 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1665510192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else {\n            if(mid%2 == 0) {\n                high = mid-1;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "tmpwwl93emn: /tmp/tmpwwl93emn.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123293,
      "stdout": "",
      "stderr": "tmpybcoq133: /tmp/tmpybcoq133.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int low = 0;\n    int high = arr.size()-1;\n    while(low<high) {\n        int mid = low + (high-low)/2;\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            } else {\n                low = mid+1;\n            }\n        } else if(arr[mid] == arr[mid+1]) {\n            if(mid%2 == 0) {\n                low = mid+2;\n            } else {\n                high = mid-1;\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    return arr[low];\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size()-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(mid == 0 || mid == arr.size()-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else {\n            if(mid%2 == 0) {\n                high = mid-1;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1665510192,
      "stdout": "",
      "stderr": "tmput18u8dr: /tmp/tmput18u8dr.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int low = 0;\n    int high = arr.size()-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        else if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n        else if(arr[mid] == arr[mid+1]) {\n            if(mid%2 == 0) {\n                low = mid+2;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int low = 0;\n    int high = arr.size() - 1;\n    int mid;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                high = mid - 2;\n            } else {\n                low = mid + 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123293,
      "stdout": "",
      "stderr": "tmpybcoq133: /tmp/tmpybcoq133.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while (low <= high) {\n        int mid = low + (high - low)/2;\n        if (mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid-1]) {\n            if (mid%2 == 0) {\n                high = mid-2;\n            } else {\n                low = mid+1;\n            }\n        } else {\n            if (mid%2 == 0) {\n                low = mid+2;\n            } else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            } else {\n                low = mid+1;\n            }\n        } else {\n            if(mid%2 == 0) {\n                low = mid+2;\n            } else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123293,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    // Write your code here\n    long n=arr.size();\n    long i=0;\n    while(i<n){\n        if(arr[i]==arr[i+1]){\n            i+=2;\n        }\n        else{\n            return arr[i];\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if((mid-1)%2 == 0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else {\n            if(mid%2 == 0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size()-1;\n    while(low <= high) {\n        long mid = (low+high)/2;\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else {\n            if(mid%2 == 0) {\n                high = mid-1;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "tmpm3y7fngf: /tmp/tmpm3y7fngf.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low<=high){\n        int mid = low + (high-low)/2;\n        if(mid==0 || mid==n-1){\n            return arr[mid];\n        }\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid]==arr[mid-1]){\n            if(mid%2==0){\n                high = mid-2;\n            }\n            else{\n                low = mid+1;\n            }\n        }\n        else{\n            if(mid%2==0){\n                low = mid+2;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123301,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            } else {\n                low = mid+1;\n            }\n        } else {\n            if(mid%2 == 0) {\n                low = mid+2;\n            } else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123293,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    long mid;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        } else if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "tmp4qh3tknp: /tmp/tmp4qh3tknp.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123293,
      "stdout": "",
      "stderr": "tmpybcoq133: /tmp/tmpybcoq133.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid = 0;\n    while(low <= high) {\n        mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n        else {\n            if(mid%2 == 0) {\n                low = mid+2;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while (low <= high) {\n        int mid = low + (high - low)/2;\n        if (mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid-1]) {\n            if (mid%2 == 0) {\n                low = mid+1;\n            } else {\n                high = mid-1;\n            }\n        } else {\n            if (mid%2 == 0) {\n                high = mid-1;\n            } else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "tmpt4hemvs3: /tmp/tmpt4hemvs3.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n - 1;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (mid == 0 || mid == n - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if ((mid - 1) % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        } else {\n            if ((mid - 1) % 2 == 0) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid % 2 == 0) {\n                high = mid-2;\n            } else {\n                low = mid+1;\n            }\n        } else {\n            if(mid % 2 == 0) {\n                low = mid+2;\n            } else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size()-1;\n    while(low <= high) {\n        long mid = (low+high)/2;\n        if(mid == 0 || mid == arr.size()-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid+1;\n            } else {\n                high = mid-1;\n            }\n        } else {\n            if(mid%2 == 0) {\n                high = mid-1;\n            } else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "tmpsxg30o5f: /tmp/tmpsxg30o5f.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    long mid;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        } else if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                high = mid - 2;\n            } else {\n                low = mid + 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid - 1]) {\n            if(mid % 2 == 0) {\n                low = mid + 1;\n            }\n            else {\n                high = mid - 1;\n            }\n        }\n        else {\n            if(mid % 2 == 0) {\n                high = mid - 1;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "tmp0puquufs: /tmp/tmp0puquufs.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0, high = n-1;\n    while(low <= high) {\n        int mid = (low + high) / 2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid % 2 == 0) {\n                high = mid - 2;\n            } else {\n                low = mid + 1;\n            }\n        } else {\n            if(mid % 2 == 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123301,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123293,
      "stdout": "",
      "stderr": "tmpybcoq133: /tmp/tmpybcoq133.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high - low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid+1;\n            } else {\n                high = mid-1;\n            }\n        } else {\n            if(mid%2 == 0) {\n                high = mid-1;\n            } else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123301,
      "stdout": "",
      "stderr": "tmp4yh8guf3: /tmp/tmp4yh8guf3.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high - low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if((mid-1)%2 == 0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else if(arr[mid] == arr[mid+1]) {\n            if((mid+1)%2 == 0) {\n                low = mid+2;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "tmphkl1qh6h: /tmp/tmphkl1qh6h.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                high = mid - 2;\n            } else {\n                low = mid + 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1665510192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long n = arr.size();\n    if(n == 1) {\n        return arr[0];\n    }\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(mid == 0) {\n            if(arr[mid] != arr[mid+1]) {\n                return arr[mid];\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        else if(mid == n-1) {\n            if(arr[mid] != arr[mid-1]) {\n                return arr[mid];\n            }\n            else {\n                high = mid - 1;\n            }\n        }\n        else if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        else if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid + 1;\n            }\n            else {\n                high = mid - 1;\n            }\n        }\n        else if(arr[mid] == arr[mid+1]) {\n            if(mid%2 == 0) {\n                high = mid - 1;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123301,
      "stdout": "",
      "stderr": "tmpwqhjzr1c: /tmp/tmpwqhjzr1c.cpp:53: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123293,
      "stdout": "",
      "stderr": "tmpybcoq133: /tmp/tmpybcoq133.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else {\n            if(mid%2 == 0) {\n                high = mid-1;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "tmpwwl93emn: /tmp/tmpwwl93emn.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size()-1;\n    long mid;\n    while(low<=high) {\n        mid = low + (high-low)/2;\n        if(low==high) {\n            return arr[low];\n        }\n        if(mid%2==0) {\n            if(arr[mid]==arr[mid+1]) {\n                low = mid+2;\n            }\n            else {\n                high = mid;\n            }\n        }\n        else {\n            if(arr[mid]==arr[mid-1]) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123301,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    while(low <= high) {\n        long mid = low + (high - low) / 2;\n        if(mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid - 1]) {\n            if(mid % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        } else {\n            if(mid % 2 == 0) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123293,
      "stdout": "",
      "stderr": "tmpmz7y2h7l: /tmp/tmpmz7y2h7l.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low <= high) {\n        mid = low + (high-low)/2;\n        if(mid == 0) {\n            if(arr[mid] != arr[mid+1]) {\n                return arr[mid];\n            }\n            else {\n                low = mid+1;\n            }\n        }\n        else if(mid == n-1) {\n            if(arr[mid] != arr[mid-1]) {\n                return arr[mid];\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else {\n            if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n                return arr[mid];\n            }\n            else if(arr[mid] == arr[mid-1]) {\n                if((mid-1)%2 == 0) {\n                    low = mid+1;\n                }\n                else {\n                    high = mid-1;\n                }\n            }\n            else if(arr[mid] == arr[mid+1]) {\n                if((mid+1)%2 == 0) {\n                    low = mid+1;\n                }\n                else {\n                    high = mid-1;\n                }\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "tmptrfbuz4e: /tmp/tmptrfbuz4e.cpp:53: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size()-1;\n    while(low<=high) {\n        long mid = low + (high-low)/2;\n        if(mid==0 || mid==arr.size()-1) {\n            return arr[mid];\n        }\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid]==arr[mid-1]) {\n            if(mid%2==0) {\n                low = mid+1;\n            } else {\n                high = mid-1;\n            }\n        }\n        if(arr[mid]==arr[mid+1]) {\n            if(mid%2==0) {\n                high = mid-1;\n            } else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "tmp31p78qcy: /tmp/tmp31p78qcy.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long n = arr.size();\n    long low = 0, high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1] && mid % 2 == 0) {\n            low = mid + 1;\n        }\n        else if(arr[mid] == arr[mid+1] && mid % 2 == 1) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "tmp_jox5rvj: /tmp/tmp_jox5rvj.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size()-1;\n    while(low<=high) {\n        long mid = (low+high)/2;\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid]==arr[mid-1]) {\n            if(mid%2==0) {\n                high = mid-2;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n        else {\n            if(mid%2==0) {\n                low = mid+2;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0, high = n-1;\n    while (low <= high) {\n        if (low == high)\n            return arr[low];\n        int mid = (low + high) / 2;\n        if (mid % 2 == 0) {\n            if (arr[mid] == arr[mid+1])\n                low = mid+2;\n            else\n                high = mid;\n        } else {\n            if (arr[mid] == arr[mid-1])\n                low = mid+1;\n            else\n                high = mid-1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    while(low <= high) {\n        long mid = low + (high - low) / 2;\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid % 2 == 0) {\n                high = mid - 2;\n            } else {\n                low = mid + 1;\n            }\n        } else {\n            if(mid % 2 == 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    while(low <= high) {\n        long mid = low + (high - low) / 2;\n        if(mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid - 1]) {\n            if(mid % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        } else {\n            if(mid % 2 == 0) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123293,
      "stdout": "",
      "stderr": "tmpmz7y2h7l: /tmp/tmpmz7y2h7l.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low <= high) {\n        mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid+1;\n            } else {\n                high = mid-1;\n            }\n        } else {\n            if(mid%2 == 0) {\n                high = mid-1;\n            } else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "tmprekpul7q: /tmp/tmprekpul7q.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long n = arr.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(mid%2 == 0) {\n            if(arr[mid] == arr[mid+1]) {\n                low = mid+2;\n            } else {\n                high = mid-2;\n            }\n        } else {\n            if(arr[mid] == arr[mid-1]) {\n                low = mid+1;\n            } else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size()-1;\n    while (low <= high) {\n        long mid = low + (high - low)/2;\n        if (mid == 0 || mid == arr.size()-1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid-1]) {\n            if ((mid-1)%2 == 0) {\n                low = mid+1;\n            } else {\n                high = mid-2;\n            }\n        } else {\n            if ((mid)%2 == 0) {\n                low = mid+2;\n            } else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size()-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(mid == 0 || mid == arr.size()-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            } else {\n                low = mid+1;\n            }\n        } else {\n            if(mid%2 == 0) {\n                low = mid+2;\n            } else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123293,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    long mid = 0;\n    while(low <= high) {\n        mid = low + (high - low)/2;\n        if(mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid - 1]) {\n            if((mid - 1) % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        } else {\n            if(mid % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int l = 0;\n    int r = n-1;\n    while(l<=r) {\n        int mid = l + (r-l)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if((mid-1)%2 == 0) {\n                r = mid-2;\n            } else {\n                l = mid+1;\n            }\n        } else {\n            if((mid)%2 == 0) {\n                r = mid-1;\n            } else {\n                l = mid+2;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "tmpodvd1z27: /tmp/tmpodvd1z27.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    while(low <= high) {\n        long mid = low + (high - low) / 2;\n        if(arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid - 1]) {\n            if((mid - 1) % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 2;\n            }\n        } else {\n            if((mid - 1) % 2 == 0) {\n                high = mid - 1;\n            } else {\n                low = mid + 2;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid+1;\n            } else {\n                high = mid-1;\n            }\n        } else {\n            if(mid%2 == 0) {\n                high = mid-1;\n            } else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1665510192,
      "stdout": "",
      "stderr": "tmpi7bfwr6s: /tmp/tmpi7bfwr6s.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int start = 0;\n    int end = arr.size()-1;\n    while(start<=end) {\n        int mid = start + (end-start)/2;\n        if(mid==0 && arr[mid]!=arr[mid+1]) {\n            return arr[mid];\n        }\n        if(mid==arr.size()-1 && arr[mid]!=arr[mid-1]) {\n            return arr[mid];\n        }\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid]==arr[mid-1]) {\n            if(mid%2==0) {\n                start = mid+1;\n            }\n            else {\n                end = mid-1;\n            }\n        }\n        else {\n            if(mid%2==0) {\n                end = mid-1;\n            }\n            else {\n                start = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "tmp9pqq47xi: /tmp/tmp9pqq47xi.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size()-1;\n    while(low<=high) {\n        long mid = (low+high)/2;\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            } else {\n                low = mid+1;\n            }\n        } else {\n            if(mid%2 == 0) {\n                low = mid+2;\n            } else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123293,
      "stdout": "",
      "stderr": "tmpybcoq133: /tmp/tmpybcoq133.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    while (low < high) {\n        long mid = (low + high) / 2;\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                high = mid - 2;\n            } else {\n                low = mid + 1;\n            }\n        } else if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    return arr[low];\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size()-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(mid == 0 || mid == arr.size()-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid+1;\n            } else {\n                high = mid-1;\n            }\n        } else {\n            if(mid%2 == 0) {\n                high = mid-1;\n            } else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "tmpkikhk9ol: /tmp/tmpkikhk9ol.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int l = 0;\n    int r = arr.size() - 1;\n    while (l <= r) {\n        int mid = (l + r) / 2;\n        if (mid == 0) {\n            if (arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            }\n            else {\n                l = mid + 1;\n            }\n        }\n        else if (mid == arr.size() - 1) {\n            if (arr[mid] != arr[mid - 1]) {\n                return arr[mid];\n            }\n            else {\n                r = mid - 1;\n            }\n        }\n        else {\n            if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            }\n            else if (arr[mid] == arr[mid - 1]) {\n                if ((mid - 1) % 2 == 0) {\n                    l = mid + 1;\n                }\n                else {\n                    r = mid - 1;\n                }\n            }\n            else {\n                if ((mid - 1) % 2 == 0) {\n                    r = mid - 1;\n                }\n                else {\n                    l = mid + 1;\n                }\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid - 1]) {\n            if(mid % 2 == 0) {\n                high = mid - 2;\n            } else {\n                low = mid + 1;\n            }\n        } else {\n            if(mid % 2 == 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int low = 0;\n    int high = arr.size() - 1;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if ((mid - 1) % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        } else {\n            if ((mid - 1) % 2 == 0) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int low = 0;\n    int high = arr.size() - 1;\n    int mid = 0;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (mid % 2 == 0) {\n            if (arr[mid] == arr[mid + 1]) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        } else {\n            if (arr[mid] == arr[mid - 1]) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return arr[mid];\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0, high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if((mid-1)%2 == 0) {\n                low = mid+1;\n            } else {\n                high = mid-1;\n            }\n        } else {\n            if((mid-1)%2 == 0) {\n                high = mid-1;\n            } else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size()-1;\n    while(low<=high){\n        long mid = low + (high-low)/2;\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        else if(arr[mid]==arr[mid-1]){\n            if(mid%2==0){\n                high = mid-2;\n            }\n            else{\n                low = mid+1;\n            }\n        }\n        else if(arr[mid]==arr[mid+1]){\n            if(mid%2==0){\n                low = mid+2;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123293,
      "stdout": "",
      "stderr": "tmpybcoq133: /tmp/tmpybcoq133.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high - low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid+1;\n            } else {\n                high = mid-1;\n            }\n        } else {\n            if(mid%2 == 0) {\n                high = mid-1;\n            } else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123301,
      "stdout": "",
      "stderr": "tmp4yh8guf3: /tmp/tmp4yh8guf3.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if ((mid - 1) % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 2;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    long mid;\n    while(low < high) {\n        mid = low + (high - low) / 2;\n        if(mid % 2 == 0) {\n            if(arr[mid] == arr[mid + 1]) {\n                low = mid + 2;\n            }\n            else {\n                high = mid;\n            }\n        }\n        else {\n            if(arr[mid] == arr[mid - 1]) {\n                low = mid + 1;\n            }\n            else {\n                high = mid - 1;\n            }\n        }\n    }\n    return arr[low];\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0, high = n-1;\n    while(low <= high) {\n        int mid = low + (high - low)/2;\n        if(mid == 0 || mid == n-1)\n            return arr[mid];\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1])\n            return arr[mid];\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0)\n                high = mid-2;\n            else\n                low = mid+1;\n        }\n        else {\n            if(mid%2 == 0)\n                low = mid+2;\n            else\n                high = mid-1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123304,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size() - 1;\n    while (low < high) {\n        long mid = low + (high - low) / 2;\n        if (mid % 2 == 0) {\n            if (arr[mid] == arr[mid + 1]) {\n                low = mid + 2;\n            } else {\n                high = mid;\n            }\n        } else {\n            if (arr[mid] == arr[mid - 1]) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return arr[low];\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123304,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low <= high) {\n        mid = (low+high)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else {\n            if(mid%2 == 0) {\n                high = mid-1;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123304,
      "stdout": "",
      "stderr": "tmp5w4rdz3j: /tmp/tmp5w4rdz3j.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    int start = 0;\n    int end = arr.size() - 1;\n    while (start <= end) {\n        int mid = (start + end) / 2;\n        if (mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                end = mid - 2;\n            } else {\n                start = mid + 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                start = mid + 2;\n            } else {\n                end = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123304,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n    long low = 0;\n    long high = arr.size()-1;\n    long mid;\n    while(low<=high) {\n        mid = (low+high)/2;\n        if(mid == 0 || mid == arr.size()-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else {\n            if(mid%2 == 0) {\n                high = mid-1;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
      "timestamp": 1666123304,
      "stdout": "",
      "stderr": "tmpj610u53p: /tmp/tmpj610u53p.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}