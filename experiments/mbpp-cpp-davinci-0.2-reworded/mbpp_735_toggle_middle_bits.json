{
  "name": "mbpp_735_toggle_middle_bits",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_735_toggle_middle_bits.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(n) * 8 - 1));\n    long mask = (1 << (sizeof(n) * 8 - 2)) - 1;\n    return (n ^ mask) | (first_bit << (sizeof(n) * 8 - 2)) | (last_bit >> (sizeof(n) * 8 - 2));",
    "    long mask = 0x7fffffffffffffff;\n    long mask2 = 0x8000000000000000;\n    long mask3 = 0x0000000000000001;\n    long mask4 = 0xfffffffffffffffe;\n    long mask5 = 0x7ffffffffffffffe;\n    long mask6 = 0x0000000000000002;\n    long mask7 = 0xfffffffffffffffd;\n    long mask8 = 0x7ffffffffffffffd;\n    long mask9 = 0x0000000000000004;\n    long mask10 = 0xfffffffffffffffb;\n    long mask11 = 0x7ffffffffffffffb;\n    long mask12 = 0x0000000000000008;\n    long mask13 = 0xfffffffffffffff7;\n    long mask14 = 0x7ffffffffffffff7;\n    long mask15 = 0x0000000000000010;\n    long mask16 = 0xffffffffffffffef;\n    long mask17 = 0x7fffffffffffffef;\n    long mask18 = 0x0000000000000020;\n    long mask19 = 0xffffffffffffffdf;\n    long mask20 = 0x7fffffffffffffdf;\n    long mask21 = 0x0000000000000040;\n    long mask22 = 0xffffffffffffffbf;\n    long mask23 = 0x7fffffffffffffbf;\n    long mask24 = 0x0000000000000080;\n    long mask25 = 0xffffffffffffff7f;\n    long mask26 = 0x7fffffffffffff7f;\n    long mask27 = 0x0000000000000100;\n    long mask28 = 0xfffffffffffffeff;\n    long mask29 = 0x7ffffffffffffeff;\n    long mask30 = 0x0000000000000200;\n    long mask31 = 0xfffffffffffffdff;\n    long mask32 = 0x7ffffffffffffdff;\n    long mask33 = 0x0000000000000400;\n    long mask34 = 0xfffffffffffffbff;\n    long mask35 = 0x7ffffffffffffbff;\n    long mask36 = 0x0000000000000800;\n    long mask37 = 0xfffffffffffff7ff;\n    long mask38 = 0x7",
    "    long mask = 0x7;\n    long result = n;\n    for (int i = 0; i < sizeof(long) * 8 - 2; i++) {\n        if ((n & mask) == mask) {\n            result &= ~mask;\n        } else {\n            result |= mask;\n        }\n        mask <<= 1;\n    }\n    return result;",
    "    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);",
    "    long mask = 0xFFFFFFFF;\n    long first_bit = n & 0x80000000;\n    long last_bit = n & 0x00000001;\n    mask = mask >> 2;\n    mask = mask << 2;\n    mask = mask | 0x00000003;\n    n = n ^ mask;\n    n = n | first_bit;\n    n = n | last_bit;\n    return n;",
    "    long mask = 0x7FFFFFFFFFFFFFFF;\n    return (n ^ mask);",
    "    long mask = 0x7FFFFFFFFFFFFFFF;\n    return (n ^ mask);",
    "    long first_bit = n & 1;\n    long last_bit = (n >> 1) & 1;\n    long middle_bits = n >> 2;\n    middle_bits = middle_bits ^ ((1 << (sizeof(long) * 8 - 3)) - 1);\n    return (first_bit << (sizeof(long) * 8 - 1)) | (middle_bits << 1) | last_bit;",
    "    long mask = 0x7;\n    long result = n;\n    for (int i = 0; i < sizeof(long) * 8 - 2; i++) {\n        long bit = (n & mask) >> i;\n        if (bit == 0) {\n            result |= (1 << i);\n        } else {\n            result &= ~(1 << i);\n        }\n        mask = mask << 1;\n    }\n    return result;",
    "    long mask = 0x7FFFFFFFFFFFFFFF;\n    long mask2 = 0x8000000000000000;\n    long mask3 = 0x0000000000000001;\n    long res = n & mask;\n    res = res & mask2;\n    res = res & mask3;\n    return res;",
    "    long a = n & 1;\n    long b = n & (1 << (sizeof(n) * 8 - 1));\n    long c = n & ~(1 | (1 << (sizeof(n) * 8 - 1)));\n    return a | (c ^ (c >> 1)) | b;",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = (1 << (sizeof(long) * 8 - 1)) - 1;\n    mask = mask ^ (1 << 0);\n    long middle_bits = n & mask;\n    middle_bits = middle_bits ^ mask;\n    return first_bit | middle_bits | last_bit;",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(n) * 8 - 1));\n    long mask = ~((1 << (sizeof(n) * 8 - 2)) - 1);\n    long result = n ^ mask;\n    result = result | (first_bit << (sizeof(n) * 8 - 1));\n    result = result | (last_bit >> (sizeof(n) * 8 - 1));\n    return result;",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(n) * 8 - 1));\n    long mask = (1 << (sizeof(n) * 8 - 1)) - 1;\n    mask = mask ^ (1 << 0);\n    return (n ^ mask) | (first_bit << 0) | (last_bit >> (sizeof(n) * 8 - 1));",
    "    long mask = 0x7;\n    long result = n ^ mask;\n    return result;",
    "    long mask = 0x7;\n    long x = n & mask;\n    long y = n & ~mask;\n    return x | y;",
    "    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);",
    "    long mask = 0x7fffffffffffffff;\n    return n ^ mask;",
    "    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);",
    "    long mask = 0x7ffffffffffffffe;\n    return n ^ mask;",
    "    long mask = 0x7FFFFFFF;\n    long mask2 = 0x80000000;\n    long mask3 = 0x00000001;\n    long res = n & mask;\n    res = res & mask2;\n    res = res | mask3;\n    return res;",
    "    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);",
    "    long mask = (1 << (sizeof(long) * 8 - 2)) - 1;\n    return n ^ mask;",
    "    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);",
    "    long mask = 0x7;\n    long result = n ^ mask;\n    return result;",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = (1 << (sizeof(long) * 8 - 2)) - 1;\n    return first_bit | (mask ^ n) | last_bit;",
    "    long mask = 0x7FFFFFFF;\n    return (n ^ mask);",
    "    long mask = 0x7FFFFFFFFFFFFFFF;\n    return (n ^ mask);",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = (1 << (sizeof(long) * 8 - 2)) - 1;\n    return (n ^ mask) | (first_bit << (sizeof(long) * 8 - 2)) | (last_bit >> (sizeof(long) * 8 - 2));",
    "    long mask = 0x7ffffffffffffffe;\n    return n ^ mask;",
    "    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);",
    "    assert(n>=0);\n    long first_bit = n & 1;\n    long last_bit = n & (1<<(sizeof(n)*8-1));\n    long mask = (1<<(sizeof(n)*8-1)) - 1;\n    long middle_bits = n & mask;\n    middle_bits = middle_bits ^ mask;\n    return first_bit | middle_bits | last_bit;",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(n) * 8 - 1));\n    long mask = 0;\n    for (int i = 1; i < sizeof(n) * 8 - 1; i++) {\n        mask |= (1 << i);\n    }\n    return (n ^ mask) | (first_bit << 1) | last_bit;",
    "    long mask = 0x7FFFFFFFFFFFFFFF;\n    return n ^ mask;",
    "    long mask = 0b11;\n    long result = 0;\n    while (n) {\n        result = (result << 1) | (n & mask);\n        n = n >> 1;\n    }\n    return result;",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = (1 << (sizeof(long) * 8 - 2)) - 1;\n    return first_bit | (mask ^ n) | last_bit;",
    "    long mask = 0xffffffffffffffff;\n    long first_bit = (n & (1 << 63)) >> 63;\n    long last_bit = n & 1;\n    long middle_bits = n & mask;\n    middle_bits = middle_bits >> 1;\n    middle_bits = middle_bits << 1;\n    middle_bits = middle_bits ^ mask;\n    middle_bits = middle_bits >> 1;\n    middle_bits = middle_bits << 1;\n    middle_bits = middle_bits | first_bit;\n    middle_bits = middle_bits | last_bit;\n    return middle_bits;",
    "    long mask = 0x7;\n    long result = n ^ mask;\n    return result;",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(n) * 8 - 1));\n    long mask = (1 << (sizeof(n) * 8 - 2)) - 1;\n    long middle_bits = n & mask;\n    middle_bits = ~middle_bits;\n    return (first_bit | middle_bits | last_bit);",
    "    long mask = 0x7fffffffffffffff;\n    long result = n ^ mask;\n    return result;",
    "    long mask = (1 << (sizeof(long) * 8 - 2)) - 1;\n    return n ^ mask;",
    "    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);",
    "    long mask = 0x7fffffffffffffff;\n    long result = n ^ mask;\n    return result;",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = 0;\n    for(int i = 1; i < sizeof(long) * 8 - 1; i++) {\n        mask |= (1 << i);\n    }\n    long middle_bits = n & mask;\n    middle_bits = ~middle_bits;\n    return (first_bit | middle_bits | last_bit);",
    "    long m = 1;\n    long k = n;\n    while (k > 0) {\n        m = m << 1;\n        k = k >> 1;\n    }\n    m = m - 1;\n    return n ^ m;",
    "    long mask = 0x7;\n    long result = n;\n    for (int i = 1; i < sizeof(long) * 8 - 1; i++) {\n        if ((n & (mask << i)) != 0) {\n            result &= ~(mask << i);\n        } else {\n            result |= (mask << i);\n        }\n    }\n    return result;",
    "    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);",
    "    long mask = 0x7;\n    return (n ^ mask);",
    "    long first_bit = (n >> 1) & 1;\n    long last_bit = n & 1;\n    long mask = (1 << (sizeof(n) * 8 - 2)) - 1;\n    long middle_bits = n & mask;\n    middle_bits = ~middle_bits;\n    middle_bits = (middle_bits >> 1) << 1;\n    return (first_bit << 1) | middle_bits | last_bit;",
    "    long mask = (1 << (sizeof(long) * 8 - 2)) - 1;\n    return n ^ mask;",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = (1 << (sizeof(long) * 8 - 1)) - 1;\n    mask = mask ^ (1 << (sizeof(long) * 8 - 2));\n    mask = mask ^ 1;\n    return (n ^ mask) | (first_bit << (sizeof(long) * 8 - 1)) | last_bit;",
    "    long mask = 0x7ffffffffffffffe;\n    return n ^ mask;",
    "    long mask = 0x7FFFFFFF;\n    return (n ^ mask);",
    "    long a = n & 1;\n    long b = n & (1 << (sizeof(n) * 8 - 1));\n    long c = n & (~(1 << (sizeof(n) * 8 - 1)));\n    long d = c & (~1);\n    long e = d ^ (~(d >> 1) << 1);\n    return a | (e << 1) | b;",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = 0;\n    for (int i = 1; i < sizeof(long) * 8 - 1; i++) {\n        mask |= (1 << i);\n    }\n    long result = n ^ mask;\n    result |= first_bit;\n    result |= last_bit;\n    return result;",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = (1 << (sizeof(long) * 8 - 2)) - 1;\n    long middle_bits = n & mask;\n    return first_bit | (middle_bits ^ mask) | last_bit;",
    "    long mask = 0x7FFFFFFFFFFFFFFF;\n    return n ^ mask;",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(n) * 8 - 1));\n    long mask = (1 << (sizeof(n) * 8 - 1)) - 1;\n    long middle_bits = n & mask;\n    middle_bits = middle_bits ^ mask;\n    return first_bit | middle_bits | last_bit;",
    "    long mask = 0x7fffffffffffffff;\n    return n ^ mask;",
    "    long mask = 0;\n    long x = 1;\n    for (int i = 1; i < sizeof(long)*8-1; i++) {\n        mask |= x;\n        x <<= 1;\n    }\n    return (n ^ mask);",
    "    long mask = 0x7;\n    long result = n ^ (mask << 1);\n    return result;",
    "    long mask = 0x7fffffffffffffff;\n    long mask1 = 0x8000000000000000;\n    long mask2 = 0x0000000000000001;\n    long mask3 = 0x7ffffffffffffffe;\n    long mask4 = 0x0000000000000002;\n    long mask5 = 0x7ffffffffffffffd;\n    long mask6 = 0x0000000000000004;\n    long mask7 = 0x7ffffffffffffffb;\n    long mask8 = 0x0000000000000008;\n    long mask9 = 0x7ffffffffffffff7;\n    long mask10 = 0x0000000000000010;\n    long mask11 = 0x7fffffffffffffef;\n    long mask12 = 0x0000000000000020;\n    long mask13 = 0x7fffffffffffffdf;\n    long mask14 = 0x0000000000000040;\n    long mask15 = 0x7fffffffffffffbf;\n    long mask16 = 0x0000000000000080;\n    long mask17 = 0x7fffffffffffff7f;\n    long mask18 = 0x0000000000000100;\n    long mask19 = 0x7ffffffffffffeff;\n    long mask20 = 0x0000000000000200;\n    long mask21 = 0x7ffffffffffffdff;\n    long mask22 = 0x0000000000000400;\n    long mask23 = 0x7ffffffffffffbff;\n    long mask24 = 0x0000000000000800;\n    long mask25 = 0x7ffffffffffff7ff;\n    long mask26 = 0x0000000000001000;\n    long mask27 = 0x7fffffffffffefff;\n    long mask28 = 0x0000000000002000;\n    long mask29 = 0x7fffffffffffdfff;\n    long mask30 = 0x0000000000004000;\n    long mask31 = 0x7fffffffffffbfff;\n    long mask32 = 0x0000000000008000;\n    long mask33 = 0x7fffffffffff7fff;\n    long mask34 = 0x0000000000010000;\n    long mask35 = 0x7ffffffffffeffff;\n    long mask36 = 0x0000000000020000;\n    long mask37 = 0x7ffffffffffdffff;\n   ",
    "    long mask = 0x7;\n    long result = n ^ mask;\n    return result;",
    "    long mask = 0x7fffffffffffffff;\n    long first_bit = n & 0x8000000000000000;\n    long last_bit = n & 0x0000000000000001;\n    return (n ^ mask) | (first_bit | last_bit);",
    "    // Write your code here\n    long first_bit = n & 1;\n    long last_bit = n & (1 << 31);\n    long mask = 0;\n    for (int i = 1; i < 31; i++) {\n        mask = mask | (1 << i);\n    }\n    long middle_bits = n & mask;\n    middle_bits = ~middle_bits;\n    long ans = (first_bit | middle_bits | last_bit);\n    return ans;",
    "    long mask = 0x7FFFFFFFFFFFFFFF;\n    return (n ^ mask);",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = (1 << (sizeof(long) * 8 - 2)) - 1;\n    return (n ^ mask) | (first_bit << (sizeof(long) * 8 - 2)) | (last_bit >> (sizeof(long) * 8 - 2));",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long)*8 - 1));\n    long mask = (1 << (sizeof(long)*8 - 2)) - 1;\n    return (n ^ mask) | (first_bit << (sizeof(long)*8 - 1)) | (last_bit >> (sizeof(long)*8 - 1));",
    "    // assert(n>=0);\n    long mask = 0xFFFFFFFFFFFFFFFF;\n    mask = mask ^ (1<<0);\n    mask = mask ^ (1<<63);\n    return n ^ mask;",
    "    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);",
    "    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);",
    "    // assert(n >= 0);\n    long mask = 0;\n    for (int i = 1; i < sizeof(n) * 8 - 1; i++) {\n        mask |= (1 << i);\n    }\n    return n ^ mask;",
    "    long mask = 0x7FFFFFFFFFFFFFFF;\n    return (n ^ mask);",
    "    long mask = 0x7fffffff;\n    return (n ^ mask);",
    "    long mask = 0x7;\n    return (n ^ mask);",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = (1 << (sizeof(long) * 8 - 2)) - 1;\n    return (n ^ mask) | (first_bit << (sizeof(long) * 8 - 2)) | (last_bit >> (sizeof(long) * 8 - 2));",
    "    long mask = 0xFFFFFFFFFFFFFFFF;\n    mask = mask >> 1;\n    mask = mask << 1;\n    mask = ~mask;\n    return n ^ mask;",
    "    assert(n>=0);\n    long mask = 0x7;\n    long result = n;\n    for(int i=1; i<=sizeof(long)*8-2; i++) {\n        if(n&mask) {\n            result = result & ~mask;\n        } else {\n            result = result | mask;\n        }\n        mask = mask << 1;\n    }\n    return result;",
    "    long mask = 0x7fffffff;\n    return (n ^ mask);",
    "    long mask = 0x7ffffffffffffffe;\n    return n ^ mask;",
    "    long mask = 0x7FFFFFFFFFFFFFFF;\n    return (n ^ mask);",
    "    long mask = 0;\n    long mask_left = 0;\n    long mask_right = 0;\n    long mask_middle = 0;\n    long mask_middle_left = 0;\n    long mask_middle_right = 0;\n    long mask_middle_left_right = 0;\n    long mask_middle_left_right_middle = 0;\n    long mask_middle_left_right_middle_left = 0;\n    long mask_middle_left_right_middle_left_right = 0;\n    long mask_middle_left_right_middle_left_right_middle = 0;\n    long mask_middle_left_right_middle_left_right_middle_left = 0;\n    long mask_middle_left_right_middle_left_right_middle_left_right = 0;\n    long mask_middle_left_right_middle_left_right_middle_left_right_middle = 0;\n    long mask_middle_left_right_middle_left_right_middle_left_right_middle_left = 0;\n    long mask_middle_left_right_middle_left_right_middle_left_right_middle_left_right = 0;\n    long mask_middle_left_right_middle_left_right_middle_left_right_middle_left_right_middle = 0;\n    long mask_middle_left_right_middle_left_right_middle_left_right_middle_left_right_middle_left = 0;\n    long mask_middle_left_right_middle_left_right_middle_left_right_middle_left_right_middle_left_right = 0;\n    long mask_middle_left_right_middle_left_right_middle_left_right_middle_left_right_middle_left_right_middle = 0;\n    long mask_middle_left_right_middle_left_right_middle_left_right_middle_left_right_middle_left_right_middle_left = 0;\n    long mask_middle_left_right_middle_left_right_middle_left_right_middle_left_right_middle_left_right_middle_left_right = 0;\n    long mask_middle_left",
    "    // assert(n>=0);\n    long mask = 0xffffffffffffffff;\n    mask = mask ^ (1<<0);\n    mask = mask ^ (1<<63);\n    return n^mask;",
    "    long mask = 0x7ffffffffffffffe;\n    return n ^ mask;",
    "    int i = 1;\n    int j = sizeof(long)*8 - 2;\n    while(i < j) {\n        if((n & (1 << i)) != (n & (1 << j))) {\n            n = n ^ (1 << i);\n            n = n ^ (1 << j);\n        }\n        i++;\n        j--;\n    }\n    return n;",
    "    long mask = 0x7;\n    long res = n;\n    for (int i = 1; i < sizeof(long) * 8 - 1; i++) {\n        if (n & (1 << i)) {\n            res = res & ~(1 << i);\n        } else {\n            res = res | (1 << i);\n        }\n    }\n    return res;",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(n) * 8 - 1));\n    long mask = 0;\n    for (int i = 1; i < sizeof(n) * 8 - 1; i++) {\n        mask |= (1 << i);\n    }\n    return (n ^ mask) | (first_bit << (sizeof(n) * 8 - 1)) | last_bit;",
    "    long mask = 0x7FFFFFFFFFFFFFFF;\n    return (n ^ mask);",
    "    long mask = 0x7FFFFFFFFFFFFFFF;\n    return n ^ mask;",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = (1 << (sizeof(long) * 8 - 2)) - 1;\n    long middle_bits = n & mask;\n    middle_bits = ~middle_bits;\n    return first_bit | middle_bits | last_bit;",
    "    long mask = (1 << (sizeof(long) * 8 - 2)) - 1;\n    return (n ^ mask);",
    "    long mask = 0;\n    for (int i = 1; i < sizeof(long) * 8 - 1; i++) {\n        mask |= (1 << i);\n    }\n    return n ^ mask;",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = 0;\n    for (int i = 1; i < sizeof(long) * 8 - 1; i++) {\n        mask |= (1 << i);\n    }\n    long middle_bits = n & mask;\n    middle_bits = ~middle_bits;\n    return first_bit | middle_bits | last_bit;",
    "    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);",
    "    long mask = 0;\n    long count = 0;\n    while (n) {\n        if (count == 0 || count == 1) {\n            mask = mask | (n & 1);\n            mask = mask << 1;\n            n = n >> 1;\n            count++;\n        } else {\n            mask = mask | (n & 1);\n            mask = mask << 1;\n            n = n >> 1;\n            count++;\n        }\n    }\n    mask = mask >> 1;\n    return mask;",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(n) * 8 - 1));\n    long mask = (1 << (sizeof(n) * 8 - 2)) - 1;\n    return (n ^ mask) | (first_bit << (sizeof(n) * 8 - 2)) | (last_bit >> (sizeof(n) * 8 - 2));",
    "    long mask = 0x7FFFFFFF;\n    return (n ^ mask);",
    "\tlong mask = 0x7FFFFFFF;\n\treturn n ^ mask;",
    "    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);",
    "    long mask = 0x7;\n    long res = n;\n    for (int i = 1; i < sizeof(long)*8-1; i++) {\n        if ((n & mask) == 0) {\n            res |= mask;\n        } else {\n            res &= ~mask;\n        }\n        mask <<= 1;\n    }\n    return res;",
    "    long mask = (1 << (sizeof(n) * 8 - 2)) - 1;\n    return n ^ mask;",
    "    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);",
    "    long mask = 0x7;\n    long left_mask = 0x8;\n    long right_mask = 0x1;\n    long left_bit = (n & left_mask) >> 3;\n    long right_bit = n & right_mask;\n    long middle_bits = n & mask;\n    middle_bits = ~middle_bits;\n    middle_bits = middle_bits & mask;\n    return (left_bit << 3) | (middle_bits) | (right_bit);",
    "    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(n) * 8 - 1));\n    long mask = ~((1 << (sizeof(n) * 8 - 1)) | 1);\n    return (n ^ mask) | (first_bit << (sizeof(n) * 8 - 1)) | (last_bit >> (sizeof(n) * 8 - 1));",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(n) * 8 - 1));\n    long mask = (1 << (sizeof(n) * 8 - 1)) - 1;\n    long middle_bits = n & mask;\n    middle_bits = ~middle_bits;\n    middle_bits = middle_bits & mask;\n    return first_bit | middle_bits | last_bit;",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = 0;\n    for (int i = 1; i < sizeof(long) * 8 - 1; i++) {\n        mask |= (1 << i);\n    }\n    long middle_bits = n & mask;\n    middle_bits = ~middle_bits;\n    return first_bit | middle_bits | last_bit;",
    "    long mask = 0x7;\n    long res = n ^ mask;\n    return res;",
    "    long mask = 0x7;\n    long x = n & mask;\n    n = n >> 3;\n    n = n << 3;\n    n = n | x;\n    return n;",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = ~((1 << (sizeof(long) * 8 - 1)) | 1);\n    return (n & mask) ^ (first_bit << (sizeof(long) * 8 - 1)) ^ (last_bit >> (sizeof(long) * 8 - 1));",
    "    long mask = 0x7FFFFFFFFFFFFFFF;\n    return (n ^ mask);",
    "    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);",
    "    long mask = 0x7FFFFFFFFFFFFFFF;\n    return (n ^ mask);",
    "    long mask = 0x7fffffffffffffff;\n    long res = n ^ mask;\n    return res;",
    "    long first_bit = n & 1;\n    long last_bit = (n >> 1) & 1;\n    long mask = (1 << (sizeof(long) * 8 - 2)) - 1;\n    return (n ^ mask) | (first_bit << 1) | last_bit;",
    "    long mask = 0;\n    for (int i = 1; i < sizeof(n) * 8 - 1; i++) {\n        mask |= (1 << i);\n    }\n    return n ^ mask;",
    "    long mask = 0x7ffffffffffffffe;\n    return n ^ mask;",
    "    long first_bit = n & (1 << 0);\n    long last_bit = n & (1 << 31);\n    long mask = 0xFFFFFFFF;\n    mask = mask & ~(1 << 0);\n    mask = mask & ~(1 << 31);\n    n = n ^ mask;\n    n = n | first_bit;\n    n = n | last_bit;\n    return n;",
    "    long mask = 0x7;\n    long result = n ^ mask;\n    return result;",
    "    assert(n > 0);\n    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = (1 << (sizeof(long) * 8 - 2)) - 1;\n    long middle_bits = n & mask;\n    middle_bits = ~middle_bits;\n    return (first_bit | middle_bits | last_bit);",
    "    long mask = 0;\n    int i = 1;\n    while(i < sizeof(long) * 8 - 1) {\n        mask |= (1 << i);\n        i++;\n    }\n    return n ^ mask;",
    "    long mask = 0x7FFFFFFFFFFFFFFF;\n    return ((n & mask) | (~n & ~mask));",
    "    long mask = 0x7FFFFFFFFFFFFFFF;\n    return (n ^ mask);",
    "    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);",
    "    long mask = 0x7;\n    long left = n >> 2;\n    long right = n & mask;\n    long middle = ~(n >> 2) & ~mask;\n    return (left << 2) | middle | right;",
    "    long mask = 0xFFFFFFFFFFFFFFFF;\n    long first_bit = n & 0x8000000000000000;\n    long last_bit = n & 0x0000000000000001;\n    mask = mask ^ 0x8000000000000000;\n    mask = mask ^ 0x0000000000000001;\n    n = n ^ mask;\n    n = n | first_bit;\n    n = n | last_bit;\n    return n;",
    "    long mask = 0;\n    for(int i = 1; i < sizeof(long)*8-1; i++) {\n        mask = mask | (1 << i);\n    }\n    return n ^ mask;",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(n) * 8 - 1));\n    long mask = (1 << (sizeof(n) * 8 - 1)) - 1;\n    return (n ^ mask) | (first_bit << (sizeof(n) * 8 - 1)) | last_bit;",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(n) * 8 - 1));\n    long mask = (1 << (sizeof(n) * 8 - 1)) - 1;\n    long middle_bits = n & mask;\n    middle_bits = ~middle_bits;\n    middle_bits = middle_bits & mask;\n    return first_bit | middle_bits | last_bit;",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = (1 << (sizeof(long) * 8 - 2)) - 1;\n    return first_bit | (mask ^ n) | last_bit;",
    "    long m = 1;\n    long i = 0;\n    while (m <= n) {\n        if (i == 0 || i == 63) {\n            m = m << 1;\n            i++;\n            continue;\n        }\n        n = n ^ m;\n        m = m << 1;\n        i++;\n    }\n    return n;",
    "    // assert(n > 0);\n    long mask = 0xffffffffffffffff;\n    long first_bit = n & (1 << 63);\n    long last_bit = n & 1;\n    long middle_bits = n & (mask >> 1);\n    middle_bits = middle_bits ^ (mask >> 1);\n    return first_bit | middle_bits | last_bit;",
    "    long mask = 0xffffffffffffffff;\n    long first_bit = n & 1;\n    long last_bit = n & (1 << 63);\n    mask = mask ^ 1;\n    mask = mask ^ (1 << 63);\n    long result = n ^ mask;\n    result = result | first_bit;\n    result = result | last_bit;\n    return result;",
    "    long mask = 0;\n    for(int i = 1; i < sizeof(long)*8-1; i++) {\n        mask |= (1 << i);\n    }\n    return n ^ mask;",
    "    // Write your code here\n    long ans = 0;\n    long mask = 1;\n    long i = 0;\n    while(n != 0) {\n        if(i == 0 || i == 31) {\n            ans = ans | (n & mask);\n        }\n        else {\n            ans = ans | ((n & mask) ^ mask);\n        }\n        n = n >> 1;\n        i++;\n    }\n    return ans;",
    "    long mask = 0x7;\n    long result = n ^ mask;\n    return result;",
    "    long first_bit = n & 1;\n    long last_bit = (n >> 1) & 1;\n    long mask = (1 << (sizeof(long) * 8 - 2)) - 1;\n    return (n ^ mask) | (first_bit << 1) | last_bit;",
    "    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);",
    "    long first_bit = n & 1;\n    long last_bit = (n >> 1) & 1;\n    long mask = (1 << (sizeof(n) * 8 - 2)) - 1;\n    long middle_bits = n & mask;\n    middle_bits = ~middle_bits;\n    return (first_bit | (middle_bits << 1) | last_bit);",
    "    long mask = 0x7;\n    long result = n ^ mask;\n    return result;",
    "    long mask = 0xffffffffffffffff;\n    mask = mask >> 1;\n    mask = mask << 1;\n    mask = ~mask;\n    return n ^ mask;",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(n) * 8 - 1));\n    long mask = 0;\n    for (int i = 1; i < sizeof(n) * 8 - 1; i++) {\n        mask |= 1 << i;\n    }\n    long middle_bits = n & mask;\n    middle_bits = ~middle_bits;\n    return first_bit | middle_bits | last_bit;",
    "    long mask = 0x7;\n    long result = n ^ mask;\n    return result;",
    "    long mask = 0xffffffffffffffff;\n    long mask1 = 0x8000000000000000;\n    long mask2 = 0x0000000000000001;\n    long mask3 = 0x7ffffffffffffffe;\n    long mask4 = 0xfffffffffffffffe;\n    long mask5 = 0x7fffffffffffffff;\n    long mask6 = 0xfffffffffffffffc;\n    long mask7 = 0x7ffffffffffffffd;\n    long mask8 = 0xfffffffffffffffb;\n    long mask9 = 0x7ffffffffffffffb;\n    long mask10 = 0xfffffffffffffff7;\n    long mask11 = 0x7ffffffffffffff7;\n    long mask12 = 0xffffffffffffffef;\n    long mask13 = 0x7fffffffffffffef;\n    long mask14 = 0xffffffffffffffdf;\n    long mask15 = 0x7fffffffffffffdf;\n    long mask16 = 0xffffffffffffffbf;\n    long mask17 = 0x7fffffffffffffbf;\n    long mask18 = 0xffffffffffffff7f;\n    long mask19 = 0x7fffffffffffff7f;\n    long mask20 = 0xfffffffffffffeff;\n    long mask21 = 0x7ffffffffffffeff;\n    long mask22 = 0xfffffffffffffdff;\n    long mask23 = 0x7ffffffffffffdff;\n    long mask24 = 0xfffffffffffffbff;\n    long mask25 = 0x7ffffffffffffbff;\n    long mask26 = 0xfffffffffffff7ff;\n    long mask27 = 0x7ffffffffffff7ff;\n    long mask28 = 0xffffffffffffefff;\n    long mask29 = 0x7fffffffffffefff;\n    long mask30 = 0xffffffffffffdfff;\n    long mask31 = 0x7fffffffffffdfff;\n    long mask32 = 0xffffffffffffbfff;\n    long mask33 = 0x7fffffffffffbfff;\n    long mask34 = 0xffffffffffff7fff;\n    long mask35 = 0x7fffffffffff",
    "    long mask = 0x7;\n    return (n ^ mask);",
    "    long mask = 0x7;\n    return (n ^ mask);",
    "    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);",
    "    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);",
    "    long mask = 0;\n    long i = 0;\n    while(i < sizeof(n)*8) {\n        if(i == 0 || i == sizeof(n)*8 - 1) {\n            mask |= (1 << i);\n        }\n        i++;\n    }\n    return n ^ mask;",
    "    assert(n>=0);\n    long mask = 0x7;\n    long result = 0;\n    while(n) {\n        long temp = n & mask;\n        result |= temp;\n        n = n >> 3;\n    }\n    return result;",
    "    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = (1 << (sizeof(long) * 8 - 1)) - 1;\n    mask = mask ^ (1 << (sizeof(long) * 8 - 2));\n    mask = mask ^ 1;\n    return (n ^ mask) | (first_bit << (sizeof(long) * 8 - 1)) | last_bit;",
    "    long mask = 0x7fffffffffffffff;\n    long mask1 = 0x0000000000000003;\n    long mask2 = 0x8000000000000000;\n    long mask3 = 0x0000000000000004;\n    long mask4 = 0x7ffffffffffffffc;\n    long mask5 = 0x7ffffffffffffff8;\n    long mask6 = 0x7ffffffffffffff0;\n    long mask7 = 0x7fffffffffffffe0;\n    long mask8 = 0x7fffffffffffffc0;\n    long mask9 = 0x7fffffffffffff80;\n    long mask10 = 0x7fffffffffffff00;\n    long mask11 = 0x7ffffffffffffe00;\n    long mask12 = 0x7ffffffffffffc00;\n    long mask13 = 0x7ffffffffffff800;\n    long mask14 = 0x7ffffffffffff000;\n    long mask15 = 0x7fffffffffffe000;\n    long mask16 = 0x7fffffffffffc000;\n    long mask17 = 0x7fffffffffff8000;\n    long mask18 = 0x7fffffffffff0000;\n    long mask19 = 0x7ffffffffffe0000;\n    long mask20 = 0x7ffffffffffc0000;\n    long mask21 = 0x7ffffffffff80000;\n    long mask22 = 0x7ffffffffff00000;\n    long mask23 = 0x7fffffffffe00000;\n    long mask24 = 0x7fffffffffc00000;\n    long mask25 = 0x7fffffffff800000;\n    long mask26 = 0x7fffffffff000000;\n    long mask27 = 0x7ffffffffe000000;\n    long mask28 = 0x7ffffffffc000000;\n    long mask29 = 0x7ffffffff8000000;\n    long mask30 = 0x7ffffffff0000000;\n    long mask31 = 0x7fffffffe0000000;\n    long mask32 = 0x7fffffffc0000000;\n    long mask33 = 0x7fffffff80000000;\n    long mask34 = 0x7fffffff00000000;\n    long mask35 = 0x7ffffffe00000000;\n    long mask",
    "    long mask = 0x7FFFFFFF;\n    return (n ^ mask);",
    "    long mask = 0x7;\n    long x = n;\n    while(x>0) {\n        long last_3_bits = x & mask;\n        x = x >> 3;\n        long toggle_bits = last_3_bits ^ mask;\n        n = n ^ (toggle_bits << 3*(log2(x)+1));\n    }\n    return n;",
    "    assert(n>=0);\n    long mask = 0x7;\n    long first_bit = n & mask;\n    long last_bit = n & (mask << (sizeof(long)*8-3));\n    long middle_bits = n & ~(mask | (mask << (sizeof(long)*8-3)));\n    middle_bits = ~middle_bits;\n    return first_bit | middle_bits | last_bit;",
    "    long x = n;\n    long first_bit = x & 1;\n    long last_bit = x & (1 << 31);\n    x = x >> 1;\n    x = x << 1;\n    x = x ^ (~0);\n    x = x >> 1;\n    x = x << 1;\n    x = x | first_bit;\n    x = x | last_bit;\n    return x;",
    "    long mask = 0x7;\n    long left_mask = 0xFFFFFFFFFFFFFFFE;\n    long right_mask = 0xFFFFFFFFFFFFFFFD;\n    long left_bits = n & left_mask;\n    long right_bits = n & right_mask;\n    long middle_bits = n & mask;\n    middle_bits = middle_bits ^ mask;\n    return left_bits | middle_bits | right_bits;",
    "    long mask = 0xFFFFFFFFFFFFFFFF;\n    long first_bit = (n & (1 << 63)) >> 63;\n    long last_bit = n & 1;\n    mask = mask ^ (1 << 63);\n    mask = mask ^ 1;\n    return (n ^ mask) | (first_bit << 63) | last_bit;",
    "    long mask = 0x7;\n    long result = n ^ mask;\n    return result;",
    "    long mask = 0x7fffffff;\n    return (n ^ mask);",
    "    long mask = 0;\n    for (int i = 1; i < (sizeof(long) * 8) - 1; i++) {\n        mask |= (1 << i);\n    }\n    return n ^ mask;",
    "    long mask = 0x7;\n    long result = n ^ mask;\n    return result;",
    "    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);",
    "    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = 0xffffffffffffffff;\n    mask = mask ^ (1 << (sizeof(long) * 8 - 1));\n    mask = mask ^ 1;\n    return (n ^ mask) | (first_bit << (sizeof(long) * 8 - 1)) | (last_bit >> (sizeof(long) * 8 - 1));",
    "    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);",
    "    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);",
    "    long mask = 0x7ffffffffffffffe;\n    return (n ^ mask);",
    "    long mask = 0x7ffffffffffffffe;\n    return n ^ mask;",
    "    long mask = 0xffffffffffffffff;\n    long first_bit = n & 1;\n    long last_bit = n & (1 << 63);\n    mask = mask ^ (1 << 63);\n    mask = mask ^ 1;\n    long result = n ^ mask;\n    result = result | first_bit;\n    result = result | last_bit;\n    return result;",
    "    long mask = (1 << (sizeof(long) * 8 - 2)) - 1;\n    return (n ^ mask);",
    "    long mask = 0;\n    long temp = n;\n    int count = 0;\n    while(temp) {\n        temp = temp >> 1;\n        count++;\n    }\n    for(int i = 2; i < count - 1; i++) {\n        mask = mask | (1 << i);\n    }\n    return n ^ mask;",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = 0;\n    for (int i = 1; i < sizeof(long) * 8 - 1; i++) {\n        mask |= 1 << i;\n    }\n    long middle_bits = n & mask;\n    middle_bits = ~middle_bits;\n    return first_bit | middle_bits | last_bit;",
    "    long mask = 0x7fffffffffffffff;\n    long first_bit = (n & 0x8000000000000000) >> 63;\n    long last_bit = (n & 0x0000000000000001);\n    long middle_bits = (n & mask) >> 1;\n    return (first_bit << 63) | (middle_bits << 1) | last_bit;",
    "    long mask = 0x7FFFFFFFFFFFFFFF;\n    return (n ^ mask);",
    "    long mask = (1 << (sizeof(long) * 8 - 2)) - 1;\n    return n ^ mask;",
    "    long first_bit = n & 1;\n    long last_bit = (n >> 1) & 1;\n    long mask = (1 << (sizeof(long) * 8 - 2)) - 1;\n    return (n ^ mask) | (first_bit << (sizeof(long) * 8 - 2)) | (last_bit << 1);",
    "    long first_bit = n & 1;\n    long last_bit = (n >> 1) & 1;\n    long mask = (1 << (sizeof(long) * 8 - 2)) - 1;\n    long middle_bits = n & mask;\n    return (first_bit << (sizeof(long) * 8 - 2)) | middle_bits | last_bit;",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = (1 << (sizeof(long) * 8 - 1)) - 1;\n    mask = mask ^ (1 << 0);\n    long middle_bits = n & mask;\n    middle_bits = middle_bits ^ mask;\n    return first_bit | middle_bits | last_bit;",
    "    long m = 1;\n    long i = 0;\n    while(i < sizeof(long)*8) {\n        if(i != 0 && i != sizeof(long)*8-1) {\n            n = n ^ m;\n        }\n        m = m << 1;\n        i++;\n    }\n    return n;",
    "    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);",
    "    long mask = 0x7FFFFFFFFFFFFFFF;\n    long first_bit = n & 0x8000000000000000;\n    long last_bit = n & 0x0000000000000001;\n    return (n ^ mask) | first_bit | last_bit;",
    "    long mask = 0b11;\n    long result = 0;\n    for (int i = 0; i < sizeof(n) * 8; i++) {\n        if (i == 0 || i == sizeof(n) * 8 - 1) {\n            result |= (n & mask) << i;\n        } else {\n            result |= (~n & mask) << i;\n        }\n        mask <<= 1;\n    }\n    return result;",
    "    long mask = 0x7FFFFFFF;\n    return n ^ mask;",
    "    long mask = 0x7FFFFFFFFFFFFFFF;\n    return (n ^ mask);",
    "    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);",
    "    long mask = 0x7FFFFFFF;\n    return (n ^ mask);",
    "    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = (1 << (sizeof(long) * 8 - 2)) - 1;\n    long middle_bits = n & mask;\n    middle_bits = ~middle_bits;\n    return first_bit | middle_bits | last_bit;",
    "    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);",
    "    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (8 * sizeof(long) - 1));\n    long mask = (1 << (8 * sizeof(long) - 2)) - 1;\n    return first_bit | (n ^ mask) | last_bit;",
    "    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = (1 << (sizeof(long) * 8 - 2)) - 1;\n    return (n ^ mask) | (first_bit << (sizeof(long) * 8 - 2)) | (last_bit >> (sizeof(long) * 8 - 2));",
    "    long mask = 0x7;\n    long result = n ^ mask;\n    return result;",
    "    long mask = 0x7;\n    long result = n ^ mask;\n    return result;",
    "    long mask = 0x7FFFFFFFFFFFFFFF;\n    return (n ^ mask);",
    "    long mask = 0x7FFFFFFFFFFFFFFF;\n    return (n ^ mask);",
    "    long mask = 0xffffffffffffffff;\n    mask = mask >> 2;\n    mask = mask << 2;\n    return n ^ mask;",
    "    long mask = 0x7;\n    long result = n;\n    for(int i = 1; i < sizeof(n) * 8 - 2; i++) {\n        if((n & (mask << i)) == 0) {\n            result |= (mask << i);\n        } else {\n            result &= ~(mask << i);\n        }\n    }\n    return result;"
  ]
}