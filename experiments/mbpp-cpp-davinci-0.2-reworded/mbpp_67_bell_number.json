{
  "name": "mbpp_67_bell_number",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the number of ways to partition a set of Bell numbers.\nlong bell_number(long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_67_bell_number.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = bell_number;\n    assert(candidate((2)) == (2));\n    assert(candidate((10)) == (115975));\n    assert(candidate((56)) == (6775685320645824322581483068371419745979053216268760300));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long bell[n+1][n+1];\n    bell[0][0] = 1;\n    for (long i=1; i<=n; i++) {\n        // Explicitly fill for j = 0\n        bell[i][0] = bell[i-1][i-1];\n \n        // Fill for remaining values of j\n        for (long j=1; j<=i; j++)\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n    }\n    return bell[n][0];",
    "    long bell[n+1][n+1];\n    bell[0][0] = 1;\n    for (long i=1; i<=n; i++) {\n        // Explicitly fill for j = 0\n        bell[i][0] = bell[i-1][i-1];\n \n        // Fill for remaining values of j\n        for (long j=1; j<=i; j++)\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n    }\n    return bell[n][0];",
    "    long bell[n+1][n+1];\n    bell[0][0] = 1;\n    for (long i=1; i<=n; i++) {\n        // Explicitly fill for j = 0\n        bell[i][0] = bell[i-1][i-1];\n \n        // Fill for remaining values of j\n        for (long j=1; j<=i; j++)\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n    }\n    return bell[n][0];",
    "    long bell[n+1][n+1];\n    bell[0][0] = 1;\n    for (long i=1; i<=n; i++) {\n        // Explicitly fill for j = 0\n        bell[i][0] = bell[i-1][i-1];\n        // Fill for remaining values of j\n        for (long j=1; j<=i; j++)\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n    }\n    return bell[n][0];",
    "    long bell[n+1][n+1];\n    bell[0][0] = 1;\n    for (long i=1; i<=n; i++) {\n        // Explicitly fill for j = 0\n        bell[i][0] = bell[i-1][i-1];\n \n        // Fill for remaining values of j\n        for (long j=1; j<=i; j++)\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n    }\n    return bell[n][0];",
    "    if (n == 0)\n        return 1;\n    long bell[n + 1][n + 1];\n    bell[0][0] = 1;\n    for (long i = 1; i <= n; i++) {\n        bell[i][0] = bell[i - 1][i - 1];\n        for (long j = 1; j <= i; j++)\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n    }\n    return bell[n][0];",
    "    long bell[n+1][n+1];\n    bell[0][0] = 1;\n    for (long i=1; i<=n; i++) {\n        // Explicitly fill for j = 0\n        bell[i][0] = bell[i-1][i-1];\n \n        // Fill for remaining values of j\n        for (long j=1; j<=i; j++)\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n    }\n    return bell[n][0];",
    "    long bell[n+1][n+1];\n    bell[0][0] = 1;\n    for (long i=1; i<=n; i++) {\n        // Explicitly fill for j = 0\n        bell[i][0] = bell[i-1][i-1];\n \n        // Fill for remaining values of j\n        for (long j=1; j<=i; j++)\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n    }\n    return bell[n][0];",
    "    long bell[n+1][n+1];\n    bell[0][0] = 1;\n    for (int i=1; i<=n; i++) {\n        // Explicitly fill for j = 0\n        bell[i][0] = bell[i-1][i-1];\n \n        // Fill for remaining values of j\n        for (int j=1; j<=i; j++)\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n    }\n    return bell[n][0];",
    "    long bell[n+1][n+1];\n    bell[0][0] = 1;\n    for (long i=1; i<=n; i++) {\n        // Explicitly fill for j = 0\n        bell[i][0] = bell[i-1][i-1];\n \n        // Fill for remaining values of j\n        for (long j=1; j<=i; j++)\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n    }\n    return bell[n][0];",
    "    long bell[n+1][n+1];\n    bell[0][0] = 1;\n    for (long i=1; i<=n; i++) {\n        // Explicitly fill for j = 0\n        bell[i][0] = bell[i-1][i-1];\n\n        // Fill for remaining values of j\n        for (long j=1; j<=i; j++)\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n    }\n    return bell[n][0];",
    "    if (n == 0) {\n        return 1;\n    }\n    long bell[n+1][n+1];\n    bell[0][0] = 1;\n    for (long i = 1; i <= n; i++) {\n        bell[i][0] = bell[i-1][i-1];\n        for (long j = 1; j <= i; j++) {\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n    }\n    return bell[n][0];",
    "    long bell[n+1][n+1];\n    bell[0][0] = 1;\n    for (long i=1; i<=n; i++) {\n        // Explicitly fill for j = 0\n        bell[i][0] = bell[i-1][i-1];\n \n        // Fill for remaining values of j\n        for (long j=1; j<=i; j++)\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n    }\n    return bell[n][0];",
    "    long bell[n+1][n+1];\n    bell[0][0] = 1;\n    for (int i=1; i<=n; i++) {\n        // Explicitly fill for j = 0\n        bell[i][0] = bell[i-1][i-1];\n \n        // Fill for remaining values of j\n        for (int j=1; j<=i; j++)\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n    }\n    return bell[n][0];",
    "    long bell[n+1][n+1];\n    bell[0][0] = 1;\n    for (long i=1; i<=n; i++) {\n        // Explicitly fill for j = 0\n        bell[i][0] = bell[i-1][i-1];\n \n        // Fill for remaining values of j\n        for (long j=1; j<=i; j++)\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n    }\n    return bell[n][0];",
    "    long bell[n+1][n+1];\n    bell[0][0] = 1;\n    for (long i=1; i<=n; i++) {\n        // Explicitly fill for j = 0\n        bell[i][0] = bell[i-1][i-1];\n \n        // Fill for remaining values of j\n        for (long j=1; j<=i; j++)\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n    }\n    return bell[n][0];",
    "    long bell[n+1][n+1];\n    bell[0][0] = 1;\n    for (long i=1; i<=n; i++) {\n        // Explicitly fill for j = 0\n        bell[i][0] = bell[i-1][i-1];\n \n        // Fill for remaining values of j\n        for (long j=1; j<=i; j++)\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n    }\n    return bell[n][0];",
    "    long bell[n+1][n+1];\n    bell[0][0] = 1;\n    for (long i=1; i<=n; i++) {\n        // Explicitly fill for j = 0\n        bell[i][0] = bell[i-1][i-1];\n \n        // Fill for remaining values of j\n        for (long j=1; j<=i; j++)\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n    }\n    return bell[n][0];",
    "    long bell[n+1][n+1];\n    bell[0][0] = 1;\n    for (int i=1; i<=n; i++) {\n        // Explicitly fill for j = 0\n        bell[i][0] = bell[i-1][i-1];\n \n        // Fill for remaining values of j\n        for (int j=1; j<=i; j++)\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n    }\n    return bell[n][0];",
    "    long bell[n+1][n+1];\n    bell[0][0] = 1;\n    for (long i=1; i<=n; i++) {\n        // Explicitly fill for j = 0\n        bell[i][0] = bell[i-1][i-1];\n \n        // Fill for remaining values of j\n        for (long j=1; j<=i; j++)\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n    }\n    return bell[n][0];"
  ]
}