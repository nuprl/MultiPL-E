{
  "name": "mbpp_753_min_k",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long() {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find minimum k records from tuple vector. https://www.geeksforgeeks.org/cppthon-find-minimum-k-records-from-tuple-vector/ - in this case a verbatim cocpp of test cases\nstd::vector<Union_std_string_long> min_k(std::vector<Union_std_string_long> test_list, long K) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_753_min_k.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = min_k;\n    assert(candidate((std::vector<Union_std_string_long>({(std::tuple<std::string, long>)std::make_tuple(\"Manjeet\", 10), (std::tuple<std::string, long>)std::make_tuple(\"Akshat\", 4), (std::tuple<std::string, long>)std::make_tuple(\"Akash\", 2), (std::tuple<std::string, long>)std::make_tuple(\"Nikhil\", 8)})), (2)) == (std::vector<Union_std_string_long>({(std::tuple<std::string, long>)std::make_tuple(\"Akash\", 2), (std::tuple<std::string, long>)std::make_tuple(\"Akshat\", 4)})));\n    assert(candidate((std::vector<Union_std_string_long>({(std::tuple<std::string, long>)std::make_tuple(\"Sanjeev\", 11), (std::tuple<std::string, long>)std::make_tuple(\"Angat\", 5), (std::tuple<std::string, long>)std::make_tuple(\"Akash\", 3), (std::tuple<std::string, long>)std::make_tuple(\"Nepin\", 9)})), (3)) == (std::vector<Union_std_string_long>({(std::tuple<std::string, long>)std::make_tuple(\"Akash\", 3), (std::tuple<std::string, long>)std::make_tuple(\"Angat\", 5), (std::tuple<std::string, long>)std::make_tuple(\"Nepin\", 9)})));\n    assert(candidate((std::vector<Union_std_string_long>({(std::tuple<std::string, long>)std::make_tuple(\"tanmay\", 14), (std::tuple<std::string, long>)std::make_tuple(\"Amer\", 11), (std::tuple<std::string, long>)std::make_tuple(\"Ayesha\", 9), (std::tuple<std::string, long>)std::make_tuple(\"SKD\", 16)})), (1)) == (std::vector<Union_std_string_long>({(std::tuple<std::string, long>)std::make_tuple(\"Ayesha\", 9)})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](const Union_std_string_long& a, const Union_std_string_long& b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](const Union_std_string_long& a, const Union_std_string_long& b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    std::vector<Union_std_string_long>::iterator it_end;\n    std::vector<Union_std_string_long>::iterator it_begin;\n    it_begin = test_list.begin();\n    it_end = test_list.end();\n    for (it = it_begin; it != it_end; ++it) {\n        if (result.size() < K) {\n            result.push_back(*it);\n        } else {\n            std::vector<Union_std_string_long>::iterator it_result;\n            std::vector<Union_std_string_long>::iterator it_result_end;\n            it_result_end = result.end();\n            for (it_result = result.begin(); it_result != it_result_end; ++it_result) {\n                if (*it < *it_result) {\n                    *it_result = *it;\n                    break;\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::priority_queue<Union_std_string_long, std::vector<Union_std_string_long>, std::greater<Union_std_string_long>> pq;\n    for (auto it = test_list.begin(); it != test_list.end(); it++) {\n        pq.push(*it);\n        if (pq.size() > K) {\n            pq.pop();\n        }\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::vector<Union_std_string_long>::iterator it;\n    std::vector<Union_std_string_long>::iterator it_min;\n    for (long i = 0; i < K; i++) {\n        it_min = test_list.begin();\n        for (it = test_list.begin(); it != test_list.end(); it++) {\n            if (*it < *it_min) {\n                it_min = it;\n            }\n        }\n        min_k_list.push_back(*it_min);\n        test_list.erase(it_min);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> res;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        res.push_back(test_list[i]);\n    }\n    return res;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::vector<Union_std_string_long>::iterator it;\n    std::vector<Union_std_string_long>::iterator it_min;\n    for (long i = 0; i < K; i++) {\n        it_min = test_list.begin();\n        for (it = test_list.begin(); it != test_list.end(); it++) {\n            if (*it < *it_min) {\n                it_min = it;\n            }\n        }\n        min_k_list.push_back(*it_min);\n        test_list.erase(it_min);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    for (it = test_list.begin(); it != test_list.end(); it++) {\n        if (it->f1 < K) {\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](const Union_std_string_long& a, const Union_std_string_long& b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](const Union_std_string_long& a, const Union_std_string_long& b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_list.push_back(test_list[i]);\n    }\n    return min_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    std::vector<Union_std_string_long>::iterator it1;\n    std::vector<Union_std_string_long>::iterator it2;\n    std::vector<Union_std_string_long>::iterator it3;\n    std::vector<Union_std_string_long>::iterator it4;\n    std::vector<Union_std_string_long>::iterator it5;\n    std::vector<Union_std_string_long>::iterator it6;\n    std::vector<Union_std_string_long>::iterator it7;\n    std::vector<Union_std_string_long>::iterator it8;\n    std::vector<Union_std_string_long>::iterator it9;\n    std::vector<Union_std_string_long>::iterator it10;\n    std::vector<Union_std_string_long>::iterator it11;\n    std::vector<Union_std_string_long>::iterator it12;\n    std::vector<Union_std_string_long>::iterator it13;\n    std::vector<Union_std_string_long>::iterator it14;\n    std::vector<Union_std_string_long>::iterator it15;\n    std::vector<Union_std_string_long>::iterator it16;\n    std::vector<Union_std_string_long>::iterator it17;\n    std::vector<Union_std_string_long>::iterator it18;\n    std::vector<Union_std_string_long>::iterator it19;\n    std::vector<Union_std_string_long>::iterator it20;\n    std::vector<Union_std_string_long>::iterator it21;\n    std::vector<Union_std_string_long>::iterator it22;\n    std::vector<Union_std_string_long>::iterator it23;\n    std::vector<Union_std_string_long>::iterator it24;\n    std::vector<Union_std_string_long>::iterator it25;\n    std",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end());\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](const Union_std_string_long& a, const Union_std_string_long& b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (it = test_list.begin(); it != test_list.begin() + K; it++) {\n        result.push_back(*it);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](auto &a, auto &b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_list;\n    std::vector<Union_std_string_long>::iterator it;\n    for (it = test_list.begin(); it != test_list.end(); it++) {\n        if (min_list.size() < K) {\n            min_list.push_back(*it);\n        } else {\n            std::sort(min_list.begin(), min_list.end());\n            if (min_list[0] < *it) {\n                min_list[0] = *it;\n            }\n        }\n    }\n    return min_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> min_list;\n    std::vector<Union_std_string_long>::iterator it;\n    for (it = test_list.begin(); it != test_list.end(); it++) {\n        if (min_list.size() < K) {\n            min_list.push_back(*it);\n        } else {\n            std::sort(min_list.begin(), min_list.end());\n            if (min_list[0] < *it) {\n                min_list[0] = *it;\n            }\n        }\n    }\n    return min_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end());\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> res;\n    std::sort(test_list.begin(), test_list.end(), [](const Union_std_string_long& a, const Union_std_string_long& b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        res.push_back(test_list[i]);\n    }\n    return res;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        if (a.f1 < b.f1)\n            return true;\n        else\n            return false;\n    });\n    for (auto i = 0; i < K; i++)\n        min_k_list.push_back(test_list[i]);\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_list;\n    std::vector<Union_std_string_long>::iterator it;\n    for (it = test_list.begin(); it != test_list.end(); it++) {\n        if (min_list.size() < K) {\n            min_list.push_back(*it);\n        } else {\n            std::vector<Union_std_string_long>::iterator it1;\n            for (it1 = min_list.begin(); it1 != min_list.end(); it1++) {\n                if (*it < *it1) {\n                    *it1 = *it;\n                    break;\n                }\n            }\n        }\n    }\n    return min_list;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](const Union_std_string_long& a, const Union_std_string_long& b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    std::sort(test_list.begin(), test_list.end(), [](const Union_std_string_long& a, const Union_std_string_long& b) {\n        return a.f1 < b.f1;\n    });\n    for (it = test_list.begin(); it != test_list.end(); it++) {\n        if (K == 0)\n            break;\n        result.push_back(*it);\n        K--;\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> result;\n    std::priority_queue<Union_std_string_long, std::vector<Union_std_string_long>, std::greater<Union_std_string_long>> min_heap;\n    for (auto it = test_list.begin(); it != test_list.end(); it++) {\n        if (min_heap.size() < K) {\n            min_heap.push(*it);\n        } else {\n            if (min_heap.top() < *it) {\n                min_heap.pop();\n                min_heap.push(*it);\n            }\n        }\n    }\n    while (!min_heap.empty()) {\n        result.push_back(min_heap.top());\n        min_heap.pop();\n    }\n    return result;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](auto &a, auto &b) { return a.f1 < b.f1; });\n    for (int i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_list;\n    for (auto i = 0; i < K; i++) {\n        min_list.push_back(test_list[i]);\n    }\n    for (auto i = K; i < test_list.size(); i++) {\n        std::sort(min_list.begin(), min_list.end());\n        if (test_list[i] < min_list[0]) {\n            min_list[0] = test_list[i];\n        }\n    }\n    return min_list;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (long i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](const Union_std_string_long& a, const Union_std_string_long& b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::vector<Union_std_string_long>::iterator it;\n    std::vector<Union_std_string_long>::iterator it_min;\n    for (long i = 0; i < K; i++) {\n        it_min = test_list.begin();\n        for (it = test_list.begin(); it != test_list.end(); it++) {\n            if (*it < *it_min) {\n                it_min = it;\n            }\n        }\n        min_k_list.push_back(*it_min);\n        test_list.erase(it_min);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::vector<Union_std_string_long>::iterator itr;\n    std::vector<Union_std_string_long>::iterator itr_min;\n    std::vector<Union_std_string_long>::iterator itr_max;\n    std::vector<Union_std_string_long>::iterator itr_k;\n    std::vector<Union_std_string_long>::iterator itr_k_min;\n    std::vector<Union_std_string_long>::iterator itr_k_max;\n    std::vector<Union_std_string_long>::iterator itr_k_max_min;\n    std::vector<Union_std_string_long>::iterator itr_k_max_max;\n    std::vector<Union_std_string_long>::iterator itr_k_max_max_min;\n    std::vector<Union_std_string_long>::iterator itr_k_max_max_max;\n    std::vector<Union_std_string_long>::iterator itr_k_max_max_max_min;\n    std::vector<Union_std_string_long>::iterator itr_k_max_max_max_max;\n    std::vector<Union_std_string_long>::iterator itr_k_max_max_max_max_min;\n    std::vector<Union_std_string_long>::iterator itr_k_max_max_max_max_max;\n    std::vector<Union_std_string_long>::iterator itr_k_max_max_max_max_max_min;\n    std::vector<Union_std_string_long>::iterator itr_k_max_max_max_max_max_max;\n    std::vector<Union_std_string_long>::iterator itr_k_max_max_max_max_max_max_min;\n    std::vector<Union_std_string_long>::iterator itr_k_max_max_max_max_max_max_max;\n    std::",
    "    std::vector<Union_std_string_long> result;\n    std::priority_queue<Union_std_string_long, std::vector<Union_std_string_long>, std::greater<Union_std_string_long>> min_heap;\n    for (auto& i : test_list) {\n        min_heap.push(i);\n        if (min_heap.size() > K) {\n            min_heap.pop();\n        }\n    }\n    while (!min_heap.empty()) {\n        result.push_back(min_heap.top());\n        min_heap.pop();\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](const Union_std_string_long& a, const Union_std_string_long& b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end());\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](const Union_std_string_long& a, const Union_std_string_long& b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_list;\n    std::vector<Union_std_string_long>::iterator it;\n    for (it = test_list.begin(); it != test_list.end(); it++) {\n        if (min_list.size() < K) {\n            min_list.push_back(*it);\n        } else {\n            std::sort(min_list.begin(), min_list.end());\n            if (min_list[0] < *it) {\n                min_list[0] = *it;\n            }\n        }\n    }\n    return min_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](auto& a, auto& b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_list;\n    std::vector<Union_std_string_long>::iterator it;\n    for (it = test_list.begin(); it != test_list.end(); it++) {\n        if (min_list.size() < K) {\n            min_list.push_back(*it);\n        } else {\n            std::vector<Union_std_string_long>::iterator it1;\n            for (it1 = min_list.begin(); it1 != min_list.end(); it1++) {\n                if (*it < *it1) {\n                    *it1 = *it;\n                    break;\n                }\n            }\n        }\n    }\n    return min_list;",
    "    std::vector<Union_std_string_long> result;\n    std::priority_queue<Union_std_string_long, std::vector<Union_std_string_long>, std::greater<Union_std_string_long>> min_heap;\n    for (auto& i : test_list) {\n        min_heap.push(i);\n        if (min_heap.size() > K) {\n            min_heap.pop();\n        }\n    }\n    while (!min_heap.empty()) {\n        result.push_back(min_heap.top());\n        min_heap.pop();\n    }\n    return result;",
    "    std::vector<Union_std_string_long> min_list;\n    std::sort(test_list.begin(), test_list.end());\n    for (long i = 0; i < K; i++) {\n        min_list.push_back(test_list[i]);\n    }\n    return min_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::vector<Union_std_string_long>::iterator itr;\n    for (itr = test_list.begin(); itr != test_list.end(); itr++) {\n        if (min_k_list.size() < K) {\n            min_k_list.push_back(*itr);\n        } else {\n            std::vector<Union_std_string_long>::iterator itr1;\n            for (itr1 = min_k_list.begin(); itr1 != min_k_list.end(); itr1++) {\n                if (*itr < *itr1) {\n                    *itr1 = *itr;\n                    break;\n                }\n            }\n        }\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> res;\n    std::sort(test_list.begin(), test_list.end(), [](auto a, auto b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        res.push_back(test_list[i]);\n    }\n    return res;",
    "    std::vector<Union_std_string_long> result;\n    std::priority_queue<Union_std_string_long, std::vector<Union_std_string_long>, std::greater<Union_std_string_long>> min_heap;\n    for (auto it = test_list.begin(); it != test_list.end(); it++) {\n        min_heap.push(*it);\n        if (min_heap.size() > K) {\n            min_heap.pop();\n        }\n    }\n    while (!min_heap.empty()) {\n        result.push_back(min_heap.top());\n        min_heap.pop();\n    }\n    return result;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](const Union_std_string_long& a, const Union_std_string_long& b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::vector<Union_std_string_long>::iterator it = test_list.begin();\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(*it);\n        it++;\n    }\n    std::sort(min_k_list.begin(), min_k_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (; it != test_list.end(); it++) {\n        if (it->f1 < min_k_list.back().f1) {\n            min_k_list.pop_back();\n            min_k_list.push_back(*it);\n            std::sort(min_k_list.begin(), min_k_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n                return a.f1 < b.f1;\n            });\n        }\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_list;\n    std::sort(test_list.begin(), test_list.end());\n    for (long i = 0; i < K; i++) {\n        min_list.push_back(test_list[i]);\n    }\n    return min_list;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](const Union_std_string_long& a, const Union_std_string_long& b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](auto a, auto b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    for (auto i = test_list.begin(); i != test_list.end(); i++) {\n        if (min_k_list.size() < K) {\n            min_k_list.push_back(*i);\n        } else {\n            std::sort(min_k_list.begin(), min_k_list.end());\n            if (min_k_list[0] < *i) {\n                min_k_list[0] = *i;\n            }\n        }\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](const Union_std_string_long& a, const Union_std_string_long& b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](const Union_std_string_long& a, const Union_std_string_long& b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](const Union_std_string_long &a, const Union_std_string_long &b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::vector<Union_std_string_long>::iterator it;\n    for (it = test_list.begin(); it != test_list.end(); it++) {\n        if (min_k_list.size() < K) {\n            min_k_list.push_back(*it);\n        } else {\n            std::sort(min_k_list.begin(), min_k_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n                return a.f1 < b.f1;\n            });\n            if (min_k_list[K - 1].f1 > it->f1) {\n                min_k_list[K - 1] = *it;\n            }\n        }\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> res;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        res.push_back(test_list[i]);\n    }\n    return res;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](auto a, auto b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end());\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator itr;\n    std::vector<Union_std_string_long>::iterator itr_end;\n    std::vector<Union_std_string_long>::iterator itr_begin;\n    std::vector<Union_std_string_long>::iterator itr_k;\n    std::vector<Union_std_string_long>::iterator itr_k_end;\n    std::vector<Union_std_string_long>::iterator itr_k_begin;\n    std::vector<Union_std_string_long>::iterator itr_k_next;\n    std::vector<Union_std_string_long>::iterator itr_k_next_end;\n    std::vector<Union_std_string_long>::iterator itr_k_next_begin;\n    std::vector<Union_std_string_long>::iterator itr_k_next_next;\n    std::vector<Union_std_string_long>::iterator itr_k_next_next_end;\n    std::vector<Union_std_string_long>::iterator itr_k_next_next_begin;\n    std::vector<Union_std_string_long>::iterator itr_k_next_next_next;\n    std::vector<Union_std_string_long>::iterator itr_k_next_next_next_end;\n    std::vector<Union_std_string_long>::iterator itr_k_next_next_next_begin;\n    std::vector<Union_std_string_long>::iterator itr_k_next_next_next_next;\n    std::vector<Union_std_string_long>::iterator itr_k_next_next_next_next_end;\n    std::vector<Union_std_string_long>::iterator itr_k_next_next_next_next_begin;\n    std::vector<Union_std_string_long>::iterator itr_k_next_next_next_next_next;\n    std::vector<Union_std",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](const Union_std_string_long &a, const Union_std_string_long &b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::priority_queue<Union_std_string_long, std::vector<Union_std_string_long>, std::greater<Union_std_string_long>> min_heap;\n    for (auto it = test_list.begin(); it != test_list.end(); it++) {\n        if (min_heap.size() < K) {\n            min_heap.push(*it);\n        } else {\n            if (*it > min_heap.top()) {\n                min_heap.pop();\n                min_heap.push(*it);\n            }\n        }\n    }\n    while (!min_heap.empty()) {\n        result.push_back(min_heap.top());\n        min_heap.pop();\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    for (it = test_list.begin(); it != test_list.end(); ++it) {\n        if (result.size() < K) {\n            result.push_back(*it);\n        } else {\n            std::vector<Union_std_string_long>::iterator it1;\n            for (it1 = result.begin(); it1 != result.end(); ++it1) {\n                if (*it < *it1) {\n                    *it1 = *it;\n                    break;\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::vector<Union_std_string_long>::iterator it;\n    for (it = test_list.begin(); it != test_list.end(); it++) {\n        if (min_k_list.size() < K) {\n            min_k_list.push_back(*it);\n        } else {\n            std::sort(min_k_list.begin(), min_k_list.end());\n            if (*it < min_k_list[K - 1]) {\n                min_k_list[K - 1] = *it;\n            }\n        }\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](const Union_std_string_long& a, const Union_std_string_long& b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> min_k_records;\n    std::sort(test_list.begin(), test_list.end(), [](const Union_std_string_long& lhs, const Union_std_string_long& rhs) {\n        return lhs.f1 < rhs.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        min_k_records.push_back(test_list[i]);\n    }\n    return min_k_records;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](const Union_std_string_long &a, const Union_std_string_long &b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> res;\n    std::vector<Union_std_string_long>::iterator it;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (it = test_list.begin(); it != test_list.begin() + K; it++) {\n        res.push_back(*it);\n    }\n    return res;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    std::vector<Union_std_string_long>::iterator it_end;\n    std::vector<Union_std_string_long>::iterator it_begin;\n    it_begin = test_list.begin();\n    it_end = test_list.end();\n    std::sort(it_begin, it_end);\n    for (it = it_begin; it != it_end; ++it) {\n        if (K == 0) {\n            break;\n        }\n        result.push_back(*it);\n        K--;\n    }\n    return result;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](const Union_std_string_long& a, const Union_std_string_long& b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](const Union_std_string_long& a, const Union_std_string_long& b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> res;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        res.push_back(test_list[i]);\n    }\n    return res;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](const Union_std_string_long &a, const Union_std_string_long &b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    std::sort(test_list.begin(), test_list.end());\n    for (it = test_list.begin(); it != test_list.end(); it++) {\n        if (K == 0)\n            break;\n        result.push_back(*it);\n        K--;\n    }\n    return result;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](const Union_std_string_long& a, const Union_std_string_long& b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (long i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](const Union_std_string_long& a, const Union_std_string_long& b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](const Union_std_string_long& a, const Union_std_string_long& b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](const Union_std_string_long& a, const Union_std_string_long& b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](const Union_std_string_long& a, const Union_std_string_long& b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    for (it = test_list.begin(); it != test_list.end(); it++) {\n        if (result.size() < K) {\n            result.push_back(*it);\n        } else {\n            std::vector<Union_std_string_long>::iterator it2;\n            for (it2 = result.begin(); it2 != result.end(); it2++) {\n                if (*it < *it2) {\n                    *it2 = *it;\n                    break;\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::priority_queue<Union_std_string_long, std::vector<Union_std_string_long>, std::greater<Union_std_string_long>> pq;\n    for (auto it = test_list.begin(); it != test_list.end(); it++) {\n        pq.push(*it);\n        if (pq.size() > K) {\n            pq.pop();\n        }\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator itr;\n    for (itr = test_list.begin(); itr != test_list.end(); itr++) {\n        if (result.size() < K) {\n            result.push_back(*itr);\n        } else {\n            std::vector<Union_std_string_long>::iterator itr1;\n            itr1 = std::max_element(result.begin(), result.end());\n            if (*itr1 > *itr) {\n                *itr1 = *itr;\n            }\n        }\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    std::vector<Union_std_string_long>::iterator it_end;\n    std::vector<Union_std_string_long>::iterator it_begin;\n    it_begin = test_list.begin();\n    it_end = test_list.end();\n    std::sort(it_begin, it_end);\n    for (it = it_begin; it != it_end; it++) {\n        if (K > 0) {\n            result.push_back(*it);\n            K--;\n        }\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it = test_list.begin();\n    std::vector<Union_std_string_long>::iterator it_end = test_list.end();\n    while (it != it_end) {\n        if (K == 0) {\n            break;\n        }\n        result.push_back(*it);\n        it++;\n        K--;\n    }\n    return result;",
    "    std::vector<Union_std_string_long> min_k_list;\n    for (auto i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    std::sort(min_k_list.begin(), min_k_list.end());\n    for (auto i = K; i < test_list.size(); i++) {\n        if (test_list[i] < min_k_list[K - 1]) {\n            min_k_list[K - 1] = test_list[i];\n            std::sort(min_k_list.begin(), min_k_list.end());\n        }\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](const Union_std_string_long& a, const Union_std_string_long& b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> min_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_list.push_back(test_list[i]);\n    }\n    return min_list;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](auto &a, auto &b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> res;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        res.push_back(test_list[i]);\n    }\n    return res;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::vector<Union_std_string_long>::iterator it;\n    std::sort(test_list.begin(), test_list.end());\n    for (it = test_list.begin(); it != test_list.end(); it++) {\n        if (K == 0)\n            break;\n        min_k_list.push_back(*it);\n        K--;\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](const Union_std_string_long& a, const Union_std_string_long& b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](auto &left, auto &right) {\n        return left.f1 < right.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](const Union_std_string_long& a, const Union_std_string_long& b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::vector<Union_std_string_long>::iterator itr;\n    std::vector<Union_std_string_long>::iterator itr2;\n    std::vector<Union_std_string_long>::iterator itr3;\n    std::vector<Union_std_string_long>::iterator itr4;\n    std::vector<Union_std_string_long>::iterator itr5;\n    std::vector<Union_std_string_long>::iterator itr6;\n    std::vector<Union_std_string_long>::iterator itr7;\n    std::vector<Union_std_string_long>::iterator itr8;\n    std::vector<Union_std_string_long>::iterator itr9;\n    std::vector<Union_std_string_long>::iterator itr10;\n    std::vector<Union_std_string_long>::iterator itr11;\n    std::vector<Union_std_string_long>::iterator itr12;\n    std::vector<Union_std_string_long>::iterator itr13;\n    std::vector<Union_std_string_long>::iterator itr14;\n    std::vector<Union_std_string_long>::iterator itr15;\n    std::vector<Union_std_string_long>::iterator itr16;\n    std::vector<Union_std_string_long>::iterator itr17;\n    std::vector<Union_std_string_long>::iterator itr18;\n    std::vector<Union_std_string_long>::iterator itr19;\n    std::vector<Union_std_string_long>::iterator itr20;\n    std::vector<Union_std_string_long>::iterator itr21;\n    std::vector<Union_std_string_long>::iterator itr22;\n    std::vector<Union_std_string_long>::iterator itr23;\n    std::vector<Union_std_string_long>::iterator itr24;\n    std::vector<Union_std_string_long",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        min_list.push_back(test_list[i]);\n    }\n    return min_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](const Union_std_string_long& a, const Union_std_string_long& b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_list.push_back(test_list[i]);\n    }\n    return min_list;"
  ]
}