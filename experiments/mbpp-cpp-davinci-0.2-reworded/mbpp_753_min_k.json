{
  "name": "mbpp_753_min_k",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long() {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find minimum k records from tuple vector. https://www.geeksforgeeks.org/cppthon-find-minimum-k-records-from-tuple-vector/ - in this case a verbatim cocpp of test cases\nstd::vector<Union_std_string_long> min_k(std::vector<Union_std_string_long> test_list, long K) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_753_min_k.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = min_k;\n    assert(candidate((std::vector<Union_std_string_long>({(std::tuple<std::string, long>)std::make_tuple(\"Manjeet\", 10), (std::tuple<std::string, long>)std::make_tuple(\"Akshat\", 4), (std::tuple<std::string, long>)std::make_tuple(\"Akash\", 2), (std::tuple<std::string, long>)std::make_tuple(\"Nikhil\", 8)})), (2)) == (std::vector<Union_std_string_long>({(std::tuple<std::string, long>)std::make_tuple(\"Akash\", 2), (std::tuple<std::string, long>)std::make_tuple(\"Akshat\", 4)})));\n    assert(candidate((std::vector<Union_std_string_long>({(std::tuple<std::string, long>)std::make_tuple(\"Sanjeev\", 11), (std::tuple<std::string, long>)std::make_tuple(\"Angat\", 5), (std::tuple<std::string, long>)std::make_tuple(\"Akash\", 3), (std::tuple<std::string, long>)std::make_tuple(\"Nepin\", 9)})), (3)) == (std::vector<Union_std_string_long>({(std::tuple<std::string, long>)std::make_tuple(\"Akash\", 3), (std::tuple<std::string, long>)std::make_tuple(\"Angat\", 5), (std::tuple<std::string, long>)std::make_tuple(\"Nepin\", 9)})));\n    assert(candidate((std::vector<Union_std_string_long>({(std::tuple<std::string, long>)std::make_tuple(\"tanmay\", 14), (std::tuple<std::string, long>)std::make_tuple(\"Amer\", 11), (std::tuple<std::string, long>)std::make_tuple(\"Ayesha\", 9), (std::tuple<std::string, long>)std::make_tuple(\"SKD\", 16)})), (1)) == (std::vector<Union_std_string_long>({(std::tuple<std::string, long>)std::make_tuple(\"Ayesha\", 9)})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](const Union_std_string_long& a, const Union_std_string_long& b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](const Union_std_string_long& a, const Union_std_string_long& b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    std::vector<Union_std_string_long>::iterator it_end;\n    std::vector<Union_std_string_long>::iterator it_begin;\n    it_begin = test_list.begin();\n    it_end = test_list.end();\n    for (it = it_begin; it != it_end; ++it) {\n        if (result.size() < K) {\n            result.push_back(*it);\n        } else {\n            std::vector<Union_std_string_long>::iterator it_result;\n            std::vector<Union_std_string_long>::iterator it_result_end;\n            it_result_end = result.end();\n            for (it_result = result.begin(); it_result != it_result_end; ++it_result) {\n                if (*it < *it_result) {\n                    *it_result = *it;\n                    break;\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::priority_queue<Union_std_string_long, std::vector<Union_std_string_long>, std::greater<Union_std_string_long>> pq;\n    for (auto it = test_list.begin(); it != test_list.end(); it++) {\n        pq.push(*it);\n        if (pq.size() > K) {\n            pq.pop();\n        }\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::vector<Union_std_string_long>::iterator it;\n    std::vector<Union_std_string_long>::iterator it_min;\n    for (long i = 0; i < K; i++) {\n        it_min = test_list.begin();\n        for (it = test_list.begin(); it != test_list.end(); it++) {\n            if (*it < *it_min) {\n                it_min = it;\n            }\n        }\n        min_k_list.push_back(*it_min);\n        test_list.erase(it_min);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> res;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        res.push_back(test_list[i]);\n    }\n    return res;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;"
  ]
}