{
  "name": "mbpp_790_even_position",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether every even index contains even numbers of a given vector.\nbool even_position(std::vector<long> nums) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_790_even_position.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = even_position;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (false));\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)4}))) == (true));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    for (int i = 0; i < nums.size(); i++) {\n        if (i % 2 == 0) {\n            if (nums[i] % 2 != 0) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    for(int i=0;i<nums.size();i++) {\n        if(i%2==0 && nums[i]%2!=0) {\n            return false;\n        }\n    }\n    return true;",
    "    for(int i=0;i<nums.size();i+=2){\n        if(nums[i]%2!=0){\n            return false;\n        }\n    }\n    return true;",
    "    for (int i = 0; i < nums.size(); i++) {\n        if (i % 2 == 0 && nums[i] % 2 != 0) {\n            return false;\n        }\n    }\n    return true;",
    "    for(int i=0;i<nums.size();i+=2) {\n        if(nums[i]%2!=0) {\n            return false;\n        }\n    }\n    return true;",
    "    for(int i=0;i<nums.size();i++){\n        if(i%2==0 && nums[i]%2!=0){\n            return false;\n        }\n    }\n    return true;",
    "    for (int i = 0; i < nums.size(); i++) {\n        if (i % 2 == 0 && nums[i] % 2 != 0) {\n            return false;\n        }\n    }\n    return true;",
    "    for(int i=0;i<nums.size();i++) {\n        if(i%2==0) {\n            if(nums[i]%2!=0) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    for(int i=0;i<nums.size();i+=2) {\n        if(nums[i]%2!=0) {\n            return false;\n        }\n    }\n    return true;",
    "    for (int i=0; i<nums.size(); i++) {\n        if (i%2==0 && nums[i]%2!=0) {\n            return false;\n        }\n    }\n    return true;",
    "    for(int i=0;i<nums.size();i+=2){\n        if(nums[i]%2!=0){\n            return false;\n        }\n    }\n    return true;",
    "    for(int i=0;i<nums.size();i++) {\n        if(i%2==0 && nums[i]%2!=0) {\n            return false;\n        }\n    }\n    return true;",
    "    for (int i = 0; i < nums.size(); i++) {\n        if (i % 2 == 0 && nums[i] % 2 != 0) {\n            return false;\n        }\n    }\n    return true;",
    "    for (int i = 0; i < nums.size(); i++) {\n        if (i % 2 == 0 && nums[i] % 2 != 0) {\n            return false;\n        }\n    }\n    return true;",
    "    for (int i = 0; i < nums.size(); i++) {\n        if (i % 2 == 0 && nums[i] % 2 != 0) {\n            return false;\n        }\n    }\n    return true;",
    "    for (int i = 0; i < nums.size(); i++) {\n        if (i % 2 == 0 && nums[i] % 2 != 0) {\n            return false;\n        }\n    }\n    return true;",
    "    for (int i = 0; i < nums.size(); i++) {\n        if (i % 2 == 0 && nums[i] % 2 != 0) {\n            return false;\n        }\n    }\n    return true;",
    "    for(int i=0;i<nums.size();i+=2) {\n        if(nums[i]%2!=0) {\n            return false;\n        }\n    }\n    return true;",
    "    for (int i = 0; i < nums.size(); i++) {\n        if (i % 2 == 0 && nums[i] % 2 != 0) {\n            return false;\n        }\n    }\n    return true;",
    "    for(int i = 0; i < nums.size(); i++) {\n        if(i % 2 == 0) {\n            if(nums[i] % 2 != 0) {\n                return false;\n            }\n        }\n    }\n    return true;"
  ]
}