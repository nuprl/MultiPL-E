{
  "name": "mbpp_249_intersection_array",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the intersection of two vectors.\nstd::vector<long> intersection_array(std::vector<long> array_nums1, std::vector<long> array_nums2) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_249_intersection_array.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = intersection_array;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)5, (long)7, (long)8, (long)9, (long)10})), (std::vector<long>({(long)1, (long)2, (long)4, (long)8, (long)9}))) == (std::vector<long>({(long)1, (long)2, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)5, (long)7, (long)8, (long)9, (long)10})), (std::vector<long>({(long)3, (long)5, (long)7, (long)9}))) == (std::vector<long>({(long)3, (long)5, (long)7, (long)9})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)5, (long)7, (long)8, (long)9, (long)10})), (std::vector<long>({(long)10, (long)20, (long)30, (long)40}))) == (std::vector<long>({(long)10})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "  std::vector<long> intersection;\n  std::sort(array_nums1.begin(), array_nums1.end());\n  std::sort(array_nums2.begin(), array_nums2.end());\n  std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection));\n  return intersection;",
    "    std::vector<long> intersection;\n    for (long i = 0; i < array_nums1.size(); ++i) {\n        for (long j = 0; j < array_nums2.size(); ++j) {\n            if (array_nums1[i] == array_nums2[j]) {\n                intersection.push_back(array_nums1[i]);\n                break;\n            }\n        }\n    }\n    return intersection;",
    "    std::vector<long> intersection;\n    int i = 0, j = 0;\n    while(i < array_nums1.size() && j < array_nums2.size()) {\n        if(array_nums1[i] == array_nums2[j]) {\n            intersection.push_back(array_nums1[i]);\n            i++;\n            j++;\n        }\n        else if(array_nums1[i] < array_nums2[j]) {\n            i++;\n        }\n        else {\n            j++;\n        }\n    }\n    return intersection;",
    "    std::vector<long> intersection;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection));\n    return intersection;",
    "    std::vector<long> intersection;\n    for (int i = 0; i < array_nums1.size(); i++) {\n        for (int j = 0; j < array_nums2.size(); j++) {\n            if (array_nums1[i] == array_nums2[j]) {\n                intersection.push_back(array_nums1[i]);\n            }\n        }\n    }\n    return intersection;",
    "    std::vector<long> result;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(result));\n    return result;",
    "    std::vector<long> intersection;\n    std::unordered_set<long> set_nums1(array_nums1.begin(), array_nums1.end());\n    std::unordered_set<long> set_nums2(array_nums2.begin(), array_nums2.end());\n    for (auto num : set_nums1) {\n        if (set_nums2.find(num) != set_nums2.end()) {\n            intersection.push_back(num);\n        }\n    }\n    return intersection;",
    "    std::vector<long> intersection_array;\n    for(long i = 0; i < array_nums1.size(); i++) {\n        for(long j = 0; j < array_nums2.size(); j++) {\n            if(array_nums1[i] == array_nums2[j]) {\n                intersection_array.push_back(array_nums1[i]);\n            }\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection;\n    for (long i = 0; i < array_nums1.size(); i++) {\n        for (long j = 0; j < array_nums2.size(); j++) {\n            if (array_nums1[i] == array_nums2[j]) {\n                intersection.push_back(array_nums1[i]);\n            }\n        }\n    }\n    return intersection;",
    "    std::vector<long> result;\n    for (int i = 0; i < array_nums1.size(); i++) {\n        for (int j = 0; j < array_nums2.size(); j++) {\n            if (array_nums1[i] == array_nums2[j]) {\n                result.push_back(array_nums1[i]);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(result));\n    return result;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection));\n    return intersection;",
    "    std::vector<long> intersection;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection));\n    return intersection;",
    "    std::vector<long> intersection_array;\n    for(int i=0;i<array_nums1.size();i++) {\n        for(int j=0;j<array_nums2.size();j++) {\n            if(array_nums1[i] == array_nums2[j]) {\n                intersection_array.push_back(array_nums1[i]);\n                break;\n            }\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> result;\n    std::unordered_set<long> set_nums1;\n    std::unordered_set<long> set_nums2;\n    for (long num : array_nums1) {\n        set_nums1.insert(num);\n    }\n    for (long num : array_nums2) {\n        set_nums2.insert(num);\n    }\n    for (long num : set_nums1) {\n        if (set_nums2.find(num) != set_nums2.end()) {\n            result.push_back(num);\n        }\n    }\n    return result;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    for(int i = 0; i < array_nums1.size(); i++) {\n        for(int j = 0; j < array_nums2.size(); j++) {\n            if(array_nums1[i] == array_nums2[j]) {\n                intersection_array.push_back(array_nums1[i]);\n            }\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    for (int i = 0; i < array_nums1.size(); i++) {\n        for (int j = 0; j < array_nums2.size(); j++) {\n            if (array_nums1[i] == array_nums2[j]) {\n                intersection_array.push_back(array_nums1[i]);\n            }\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    for (int i = 0; i < array_nums1.size(); i++) {\n        for (int j = 0; j < array_nums2.size(); j++) {\n            if (array_nums1[i] == array_nums2[j]) {\n                intersection_array.push_back(array_nums1[i]);\n            }\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> result;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(result));\n    return result;",
    "    std::vector<long> array_nums3;\n    for (auto i = array_nums1.begin(); i != array_nums1.end(); i++) {\n        for (auto j = array_nums2.begin(); j != array_nums2.end(); j++) {\n            if (*i == *j) {\n                array_nums3.push_back(*i);\n            }\n        }\n    }\n    return array_nums3;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection;\n    for (int i = 0; i < array_nums1.size(); i++) {\n        for (int j = 0; j < array_nums2.size(); j++) {\n            if (array_nums1[i] == array_nums2[j]) {\n                intersection.push_back(array_nums1[i]);\n            }\n        }\n    }\n    return intersection;",
    "  std::vector<long> result;\n  std::sort(array_nums1.begin(), array_nums1.end());\n  std::sort(array_nums2.begin(), array_nums2.end());\n  std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(result));\n  return result;",
    "    std::vector<long> intersection;\n    for(int i = 0; i < array_nums1.size(); i++) {\n        for(int j = 0; j < array_nums2.size(); j++) {\n            if(array_nums1[i] == array_nums2[j]) {\n                intersection.push_back(array_nums1[i]);\n                break;\n            }\n        }\n    }\n    return intersection;",
    "    std::vector<long> result;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(result));\n    return result;",
    "    std::vector<long> intersection;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection));\n    return intersection;",
    "    std::vector<long> result;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(result));\n    return result;",
    "    std::vector<long> intersection;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection));\n    return intersection;",
    "    std::vector<long> result;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(result));\n    return result;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection;\n    for(int i=0; i<array_nums1.size(); i++) {\n        for(int j=0; j<array_nums2.size(); j++) {\n            if(array_nums1[i] == array_nums2[j]) {\n                intersection.push_back(array_nums1[i]);\n            }\n        }\n    }\n    return intersection;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection));\n    return intersection;",
    "    std::vector<long> result;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(result));\n    return result;",
    "\tstd::vector<long> intersection_array;\n\tfor (int i = 0; i < array_nums1.size(); i++) {\n\t\tfor (int j = 0; j < array_nums2.size(); j++) {\n\t\t\tif (array_nums1[i] == array_nums2[j]) {\n\t\t\t\tintersection_array.push_back(array_nums1[i]);\n\t\t\t}\n\t\t}\n\t}\n\treturn intersection_array;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> array_nums3;\n    for (int i = 0; i < array_nums1.size(); i++) {\n        for (int j = 0; j < array_nums2.size(); j++) {\n            if (array_nums1[i] == array_nums2[j]) {\n                array_nums3.push_back(array_nums1[i]);\n            }\n        }\n    }\n    return array_nums3;",
    "    std::vector<long> intersection_array;\n    int i = 0, j = 0;\n    while(i < array_nums1.size() && j < array_nums2.size()) {\n        if(array_nums1[i] == array_nums2[j]) {\n            intersection_array.push_back(array_nums1[i]);\n            i++;\n            j++;\n        }\n        else if(array_nums1[i] < array_nums2[j]) {\n            i++;\n        }\n        else {\n            j++;\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    for (int i = 0; i < array_nums1.size(); i++) {\n        for (int j = 0; j < array_nums2.size(); j++) {\n            if (array_nums1[i] == array_nums2[j]) {\n                intersection_array.push_back(array_nums1[i]);\n            }\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> result;\n    std::unordered_map<long, long> map;\n    for (auto num : array_nums1) {\n        map[num]++;\n    }\n    for (auto num : array_nums2) {\n        if (map[num] > 0) {\n            result.push_back(num);\n            map[num]--;\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(result));\n    return result;",
    "    std::vector<long> result;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(result));\n    return result;",
    "    std::vector<long> intersection_array;\n    for(int i = 0; i < array_nums1.size(); i++) {\n        for(int j = 0; j < array_nums2.size(); j++) {\n            if(array_nums1[i] == array_nums2[j]) {\n                intersection_array.push_back(array_nums1[i]);\n            }\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    for (int i = 0; i < array_nums1.size(); i++) {\n        for (int j = 0; j < array_nums2.size(); j++) {\n            if (array_nums1[i] == array_nums2[j]) {\n                intersection_array.push_back(array_nums1[i]);\n            }\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection));\n    return intersection;",
    "    std::vector<long> intersection_array;\n    for (int i = 0; i < array_nums1.size(); i++) {\n        for (int j = 0; j < array_nums2.size(); j++) {\n            if (array_nums1[i] == array_nums2[j]) {\n                intersection_array.push_back(array_nums1[i]);\n            }\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection));\n    return intersection;",
    "    std::vector<long> result;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(result));\n    return result;",
    "    std::vector<long> array_nums3;\n    for (int i = 0; i < array_nums1.size(); i++) {\n        for (int j = 0; j < array_nums2.size(); j++) {\n            if (array_nums1[i] == array_nums2[j]) {\n                array_nums3.push_back(array_nums1[i]);\n            }\n        }\n    }\n    return array_nums3;",
    "    std::vector<long> result;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(result));\n    return result;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> result;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(result));\n    return result;",
    "    std::vector<long> intersection;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection));\n    return intersection;",
    "  std::vector<long> intersection_array;\n  std::sort(array_nums1.begin(), array_nums1.end());\n  std::sort(array_nums2.begin(), array_nums2.end());\n  std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n  return intersection_array;",
    "    std::vector<long> intersection;\n    for (int i = 0; i < array_nums1.size(); i++) {\n        for (int j = 0; j < array_nums2.size(); j++) {\n            if (array_nums1[i] == array_nums2[j]) {\n                intersection.push_back(array_nums1[i]);\n            }\n        }\n    }\n    return intersection;",
    "    std::vector<long> intersection;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection));\n    return intersection;",
    "    std::vector<long> result;\n    for (int i = 0; i < array_nums1.size(); i++) {\n        for (int j = 0; j < array_nums2.size(); j++) {\n            if (array_nums1[i] == array_nums2[j]) {\n                result.push_back(array_nums1[i]);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> intersection;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection));\n    return intersection;",
    "    std::vector<long> intersection;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection));\n    return intersection;",
    "    std::vector<long> intersection;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection));\n    return intersection;",
    "    std::vector<long> intersection;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection));\n    return intersection;",
    "    std::vector<long> result;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(result));\n    return result;",
    "    std::vector<long> intersection;\n    for(int i = 0; i < array_nums1.size(); i++) {\n        for(int j = 0; j < array_nums2.size(); j++) {\n            if(array_nums1[i] == array_nums2[j]) {\n                intersection.push_back(array_nums1[i]);\n            }\n        }\n    }\n    return intersection;",
    "    std::vector<long> intersection_array;\n    int i = 0;\n    int j = 0;\n    while (i < array_nums1.size() && j < array_nums2.size()) {\n        if (array_nums1[i] == array_nums2[j]) {\n            intersection_array.push_back(array_nums1[i]);\n            i++;\n            j++;\n        } else if (array_nums1[i] < array_nums2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    for (long i = 0; i < array_nums1.size(); i++) {\n        for (long j = 0; j < array_nums2.size(); j++) {\n            if (array_nums1[i] == array_nums2[j]) {\n                intersection_array.push_back(array_nums1[i]);\n                break;\n            }\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> result;\n    std::unordered_set<long> set_nums1;\n    std::unordered_set<long> set_nums2;\n    for(long i = 0; i < array_nums1.size(); i++) {\n        set_nums1.insert(array_nums1[i]);\n    }\n    for(long i = 0; i < array_nums2.size(); i++) {\n        set_nums2.insert(array_nums2[i]);\n    }\n    for(long i = 0; i < array_nums1.size(); i++) {\n        if(set_nums2.find(array_nums1[i]) != set_nums2.end()) {\n            result.push_back(array_nums1[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    int i = 0;\n    int j = 0;\n    while (i < array_nums1.size() && j < array_nums2.size()) {\n        if (array_nums1[i] == array_nums2[j]) {\n            result.push_back(array_nums1[i]);\n            i++;\n            j++;\n        } else if (array_nums1[i] < array_nums2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return result;",
    "    std::vector<long> intersection;\n    std::unordered_set<long> set_nums1;\n    for (auto num : array_nums1) {\n        set_nums1.insert(num);\n    }\n    for (auto num : array_nums2) {\n        if (set_nums1.find(num) != set_nums1.end()) {\n            intersection.push_back(num);\n        }\n    }\n    return intersection;",
    "    std::vector<long> result;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(result));\n    return result;",
    "    std::vector<long> intersection;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection));\n    return intersection;",
    "    std::vector<long> intersection;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection));\n    return intersection;",
    "    std::vector<long> intersection;\n    int i = 0, j = 0;\n    while(i < array_nums1.size() && j < array_nums2.size()) {\n        if(array_nums1[i] < array_nums2[j]) {\n            i++;\n        } else if(array_nums1[i] > array_nums2[j]) {\n            j++;\n        } else {\n            intersection.push_back(array_nums1[i]);\n            i++;\n            j++;\n        }\n    }\n    return intersection;",
    "    std::vector<long> intersection;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection));\n    return intersection;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> result;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(result));\n    return result;",
    "    std::vector<long> intersection_array;\n    for (int i = 0; i < array_nums1.size(); i++) {\n        for (int j = 0; j < array_nums2.size(); j++) {\n            if (array_nums1[i] == array_nums2[j]) {\n                intersection_array.push_back(array_nums1[i]);\n            }\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    for (auto num1 : array_nums1) {\n        for (auto num2 : array_nums2) {\n            if (num1 == num2) {\n                intersection_array.push_back(num1);\n            }\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection));\n    return intersection;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> result;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(result));\n    return result;",
    "    std::vector<long> intersection_array;\n    std::unordered_set<long> set_nums1;\n    std::unordered_set<long> set_nums2;\n    for(auto num : array_nums1) {\n        set_nums1.insert(num);\n    }\n    for(auto num : array_nums2) {\n        set_nums2.insert(num);\n    }\n    for(auto num : set_nums1) {\n        if(set_nums2.find(num) != set_nums2.end()) {\n            intersection_array.push_back(num);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::unordered_set<long> set_nums1(array_nums1.begin(), array_nums1.end());\n    std::unordered_set<long> set_nums2(array_nums2.begin(), array_nums2.end());\n    for(auto num : set_nums1) {\n        if(set_nums2.find(num) != set_nums2.end()) {\n            intersection_array.push_back(num);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> result;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(result));\n    return result;",
    "    std::vector<long> result;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(result));\n    return result;",
    "    std::vector<long> result;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(result));\n    return result;",
    "    std::vector<long> intersection_array;\n    for (int i = 0; i < array_nums1.size(); i++) {\n        for (int j = 0; j < array_nums2.size(); j++) {\n            if (array_nums1[i] == array_nums2[j]) {\n                intersection_array.push_back(array_nums1[i]);\n            }\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection));\n    return intersection;",
    "    std::vector<long> intersection_array;\n    for (int i = 0; i < array_nums1.size(); i++) {\n        for (int j = 0; j < array_nums2.size(); j++) {\n            if (array_nums1[i] == array_nums2[j]) {\n                intersection_array.push_back(array_nums1[i]);\n            }\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> result;\n    for (int i = 0; i < array_nums1.size(); i++) {\n        for (int j = 0; j < array_nums2.size(); j++) {\n            if (array_nums1[i] == array_nums2[j]) {\n                result.push_back(array_nums1[i]);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> intersection;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection));\n    return intersection;",
    "    std::vector<long> intersection;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection));\n    return intersection;",
    "    std::vector<long> result;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(result));\n    return result;",
    "    std::vector<long> intersection_array;\n    int i = 0;\n    int j = 0;\n    while (i < array_nums1.size() && j < array_nums2.size()) {\n        if (array_nums1[i] < array_nums2[j]) {\n            i++;\n        } else if (array_nums2[j] < array_nums1[i]) {\n            j++;\n        } else {\n            intersection_array.push_back(array_nums2[j]);\n            i++;\n            j++;\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> result;\n    std::unordered_set<long> set_nums1;\n    for (long num : array_nums1) {\n        set_nums1.insert(num);\n    }\n    for (long num : array_nums2) {\n        if (set_nums1.find(num) != set_nums1.end()) {\n            result.push_back(num);\n        }\n    }\n    return result;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    for (int i = 0; i < array_nums1.size(); i++) {\n        for (int j = 0; j < array_nums2.size(); j++) {\n            if (array_nums1[i] == array_nums2[j]) {\n                intersection_array.push_back(array_nums1[i]);\n            }\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> result;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(result));\n    return result;",
    "    std::vector<long> intersection;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection));\n    return intersection;",
    "    std::vector<long> intersection_array;\n    std::unordered_map<long, int> map;\n    for (int i = 0; i < array_nums1.size(); i++) {\n        map[array_nums1[i]]++;\n    }\n    for (int i = 0; i < array_nums2.size(); i++) {\n        if (map[array_nums2[i]] > 0) {\n            intersection_array.push_back(array_nums2[i]);\n            map[array_nums2[i]]--;\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    for (long i = 0; i < array_nums1.size(); i++) {\n        for (long j = 0; j < array_nums2.size(); j++) {\n            if (array_nums1[i] == array_nums2[j]) {\n                intersection_array.push_back(array_nums1[i]);\n            }\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection));\n    return intersection;",
    "    std::vector<long> result;\n    std::unordered_set<long> set;\n    for (long i = 0; i < array_nums1.size(); i++) {\n        set.insert(array_nums1[i]);\n    }\n    for (long i = 0; i < array_nums2.size(); i++) {\n        if (set.find(array_nums2[i]) != set.end()) {\n            result.push_back(array_nums2[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(result));\n    return result;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> result;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(result));\n    return result;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> result;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(result));\n    return result;",
    "    std::vector<long> intersection;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection));\n    return intersection;",
    "    std::vector<long> result;\n    std::unordered_set<long> set1;\n    std::unordered_set<long> set2;\n    for(auto i: array_nums1) {\n        set1.insert(i);\n    }\n    for(auto i: array_nums2) {\n        set2.insert(i);\n    }\n    for(auto i: set1) {\n        if(set2.find(i) != set2.end()) {\n            result.push_back(i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(result));\n    return result;",
    "    std::vector<long> result;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(result));\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < array_nums1.size(); i++) {\n        for (int j = 0; j < array_nums2.size(); j++) {\n            if (array_nums1[i] == array_nums2[j]) {\n                result.push_back(array_nums1[i]);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> intersection_array;\n    for (int i = 0; i < array_nums1.size(); i++) {\n        for (int j = 0; j < array_nums2.size(); j++) {\n            if (array_nums1[i] == array_nums2[j]) {\n                intersection_array.push_back(array_nums1[i]);\n            }\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    for(int i = 0; i < array_nums1.size(); i++) {\n        for(int j = 0; j < array_nums2.size(); j++) {\n            if(array_nums1[i] == array_nums2[j]) {\n                intersection_array.push_back(array_nums1[i]);\n            }\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "\tstd::vector<long> intersection_array;\n\tstd::sort(array_nums1.begin(), array_nums1.end());\n\tstd::sort(array_nums2.begin(), array_nums2.end());\n\tstd::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n\treturn intersection_array;",
    "    std::vector<long> intersection;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection));\n    return intersection;",
    "    std::vector<long> intersection_array;\n    for (int i = 0; i < array_nums1.size(); i++) {\n        for (int j = 0; j < array_nums2.size(); j++) {\n            if (array_nums1[i] == array_nums2[j]) {\n                intersection_array.push_back(array_nums1[i]);\n            }\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection));\n    return intersection;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "  std::vector<long> intersection;\n  for (int i = 0; i < array_nums1.size(); i++) {\n    for (int j = 0; j < array_nums2.size(); j++) {\n      if (array_nums1[i] == array_nums2[j]) {\n        intersection.push_back(array_nums1[i]);\n      }\n    }\n  }\n  return intersection;",
    "    std::vector<long> result;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(result));\n    return result;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    for (int i = 0; i < array_nums1.size(); i++) {\n        for (int j = 0; j < array_nums2.size(); j++) {\n            if (array_nums1[i] == array_nums2[j]) {\n                intersection_array.push_back(array_nums1[i]);\n            }\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection));\n    return intersection;",
    "    std::vector<long> intersection_array;\n    for (int i = 0; i < array_nums1.size(); i++) {\n        for (int j = 0; j < array_nums2.size(); j++) {\n            if (array_nums1[i] == array_nums2[j]) {\n                intersection_array.push_back(array_nums1[i]);\n            }\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> result;\n    int i = 0;\n    int j = 0;\n    while (i < array_nums1.size() && j < array_nums2.size()) {\n        if (array_nums1[i] == array_nums2[j]) {\n            result.push_back(array_nums1[i]);\n            i++;\n            j++;\n        } else if (array_nums1[i] < array_nums2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return result;",
    "    std::vector<long> intersection;\n    std::unordered_set<long> set_nums1(array_nums1.begin(), array_nums1.end());\n    std::unordered_set<long> set_nums2(array_nums2.begin(), array_nums2.end());\n    for (auto num : set_nums1) {\n        if (set_nums2.find(num) != set_nums2.end()) {\n            intersection.push_back(num);\n        }\n    }\n    return intersection;",
    "    std::vector<long> result;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(result));\n    return result;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    for (int i = 0; i < array_nums1.size(); i++) {\n        for (int j = 0; j < array_nums2.size(); j++) {\n            if (array_nums1[i] == array_nums2[j]) {\n                intersection_array.push_back(array_nums1[i]);\n            }\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> result;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(result));\n    return result;",
    "    std::vector<long> intersection_array;\n    for (int i = 0; i < array_nums1.size(); i++) {\n        for (int j = 0; j < array_nums2.size(); j++) {\n            if (array_nums1[i] == array_nums2[j]) {\n                intersection_array.push_back(array_nums1[i]);\n            }\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> result;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(result));\n    return result;",
    "    std::vector<long> result;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(result));\n    return result;",
    "\tstd::vector<long> intersection_array;\n\tstd::sort(array_nums1.begin(), array_nums1.end());\n\tstd::sort(array_nums2.begin(), array_nums2.end());\n\tstd::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n\treturn intersection_array;",
    "    std::vector<long> intersection;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection));\n    return intersection;",
    "    std::vector<long> intersection_array;\n    for (int i = 0; i < array_nums1.size(); i++) {\n        for (int j = 0; j < array_nums2.size(); j++) {\n            if (array_nums1[i] == array_nums2[j]) {\n                intersection_array.push_back(array_nums1[i]);\n            }\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> result;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(result));\n    return result;",
    "    std::vector<long> result;\n    std::unordered_set<long> set1;\n    for (long num : array_nums1) {\n        set1.insert(num);\n    }\n    for (long num : array_nums2) {\n        if (set1.find(num) != set1.end()) {\n            result.push_back(num);\n        }\n    }\n    return result;",
    "    std::vector<long> array_intersection;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(array_intersection));\n    return array_intersection;",
    "    std::vector<long> intersection;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection));\n    return intersection;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    for (int i = 0; i < array_nums1.size(); i++) {\n        for (int j = 0; j < array_nums2.size(); j++) {\n            if (array_nums1[i] == array_nums2[j]) {\n                intersection_array.push_back(array_nums1[i]);\n            }\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    for (long i = 0; i < array_nums1.size(); i++) {\n        for (long j = 0; j < array_nums2.size(); j++) {\n            if (array_nums1[i] == array_nums2[j]) {\n                intersection_array.push_back(array_nums1[i]);\n            }\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> result;\n    std::unordered_map<long, int> hash;\n    for (int i = 0; i < array_nums1.size(); i++) {\n        hash[array_nums1[i]]++;\n    }\n    for (int i = 0; i < array_nums2.size(); i++) {\n        if (hash[array_nums2[i]] > 0) {\n            result.push_back(array_nums2[i]);\n            hash[array_nums2[i]]--;\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(result));\n    return result;",
    "    std::vector<long> result;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(result));\n    return result;",
    "    std::vector<long> intersection;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection));\n    return intersection;",
    "    std::vector<long> intersection_array;\n    std::unordered_set<long> set_nums1;\n    for (auto num : array_nums1) {\n        set_nums1.insert(num);\n    }\n    for (auto num : array_nums2) {\n        if (set_nums1.find(num) != set_nums1.end()) {\n            intersection_array.push_back(num);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection));\n    return intersection;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    for (long i = 0; i < array_nums1.size(); i++) {\n        for (long j = 0; j < array_nums2.size(); j++) {\n            if (array_nums1[i] == array_nums2[j]) {\n                intersection_array.push_back(array_nums1[i]);\n            }\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection));\n    return intersection;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> result;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(result));\n    return result;",
    "    std::vector<long> array_nums3;\n    for (int i = 0; i < array_nums1.size(); i++) {\n        for (int j = 0; j < array_nums2.size(); j++) {\n            if (array_nums1[i] == array_nums2[j]) {\n                array_nums3.push_back(array_nums1[i]);\n            }\n        }\n    }\n    return array_nums3;",
    "    std::vector<long> result;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(result));\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < array_nums1.size(); i++) {\n        for (int j = 0; j < array_nums2.size(); j++) {\n            if (array_nums1[i] == array_nums2[j]) {\n                result.push_back(array_nums1[i]);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    for (long i = 0; i < array_nums1.size(); i++) {\n        for (long j = 0; j < array_nums2.size(); j++) {\n            if (array_nums1[i] == array_nums2[j]) {\n                intersection_array.push_back(array_nums1[i]);\n            }\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> result;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(result));\n    return result;",
    "    std::vector<long> intersection_array;\n    for (int i = 0; i < array_nums1.size(); i++) {\n        for (int j = 0; j < array_nums2.size(); j++) {\n            if (array_nums1[i] == array_nums2[j]) {\n                intersection_array.push_back(array_nums1[i]);\n            }\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection));\n    return intersection;",
    "    std::vector<long> result;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(result));\n    return result;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection));\n    return intersection;",
    "    std::vector<long> intersection;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection));\n    return intersection;",
    "    std::vector<long> intersection_array;\n    for (int i = 0; i < array_nums1.size(); i++) {\n        for (int j = 0; j < array_nums2.size(); j++) {\n            if (array_nums1[i] == array_nums2[j]) {\n                intersection_array.push_back(array_nums1[i]);\n            }\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> result;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(result));\n    return result;",
    "    std::vector<long> intersection_array;\n    for (int i = 0; i < array_nums1.size(); i++) {\n        for (int j = 0; j < array_nums2.size(); j++) {\n            if (array_nums1[i] == array_nums2[j]) {\n                intersection_array.push_back(array_nums1[i]);\n            }\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection;\n    for (int i = 0; i < array_nums1.size(); i++) {\n        for (int j = 0; j < array_nums2.size(); j++) {\n            if (array_nums1[i] == array_nums2[j]) {\n                intersection.push_back(array_nums1[i]);\n                break;\n            }\n        }\n    }\n    return intersection;",
    "    std::vector<long> intersection;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection));\n    return intersection;",
    "    std::vector<long> intersection;\n    for (int i = 0; i < array_nums1.size(); i++) {\n        for (int j = 0; j < array_nums2.size(); j++) {\n            if (array_nums1[i] == array_nums2[j]) {\n                intersection.push_back(array_nums1[i]);\n            }\n        }\n    }\n    return intersection;",
    "    std::vector<long> result;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(result));\n    return result;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    for (int i = 0; i < array_nums1.size(); i++) {\n        for (int j = 0; j < array_nums2.size(); j++) {\n            if (array_nums1[i] == array_nums2[j]) {\n                intersection_array.push_back(array_nums1[i]);\n            }\n        }\n    }\n    return intersection_array;"
  ]
}