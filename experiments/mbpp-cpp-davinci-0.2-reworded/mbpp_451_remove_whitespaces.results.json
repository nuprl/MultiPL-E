{
  "name": "mbpp_451_remove_whitespaces",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_451_remove_whitespaces.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2 = \"\";\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for(int i=0;i<text1.length();i++) {\n        if(text1[i]!=' ') {\n            text2+=text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n  std::string text2;\n  for (int i = 0; i < text1.length(); i++) {\n    if (text1[i] != ' ') {\n      text2 += text1[i];\n    }\n  }\n  return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n  std::string text2;\n  for (int i = 0; i < text1.length(); i++) {\n    if (text1[i] != ' ') {\n      text2 += text1[i];\n    }\n  }\n  return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n  std::string text2;\n  for (int i = 0; i < text1.length(); i++) {\n    if (text1[i] != ' ') {\n      text2 += text1[i];\n    }\n  }\n  return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for(int i = 0; i < text1.length(); i++) {\n        if(text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for(int i = 0; i < text1.length(); i++) {\n        if(text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n  std::string text2;\n  for (int i = 0; i < text1.length(); i++) {\n    if (text1[i] != ' ') {\n      text2 += text1[i];\n    }\n  }\n  return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for(int i=0;i<text1.length();i++) {\n        if(text1[i]!=' ') {\n            text2+=text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n  std::string text2;\n  for (int i = 0; i < text1.length(); i++) {\n    if (text1[i] != ' ') {\n      text2 += text1[i];\n    }\n  }\n  return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for(int i = 0; i < text1.length(); i++) {\n        if(text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n  std::string text2;\n  for (int i = 0; i < text1.length(); i++) {\n    if (text1[i] != ' ') {\n      text2 += text1[i];\n    }\n  }\n  return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2 = \"\";\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for(int i = 0; i < text1.length(); i++) {\n        if(text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n  std::string text2;\n  for (int i = 0; i < text1.length(); i++) {\n    if (text1[i] != ' ') {\n      text2 += text1[i];\n    }\n  }\n  return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for(int i=0;i<text1.length();i++) {\n        if(text1[i]!=' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1666123605,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n\tstd::string text2;\n\tfor (int i = 0; i < text1.length(); i++) {\n\t\tif (text1[i] != ' ') {\n\t\t\ttext2 += text1[i];\n\t\t}\n\t}\n\treturn text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1666123606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for(int i = 0; i < text1.length(); i++) {\n        if(text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n  std::string text2;\n  for (int i = 0; i < text1.length(); i++) {\n    if (text1[i] != ' ') {\n      text2 += text1[i];\n    }\n  }\n  return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for(int i=0;i<text1.length();i++) {\n        if(text1[i]!=' ') {\n            text2+=text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for(int i = 0; i < text1.length(); i++) {\n        if(text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2 = \"\";\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for(int i = 0; i < text1.length(); i++) {\n        if(text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2 = \"\";\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n\tstd::string text2 = \"\";\n\tfor (int i = 0; i < text1.length(); i++) {\n\t\tif (text1[i] != ' ') {\n\t\t\ttext2 += text1[i];\n\t\t}\n\t}\n\treturn text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1666123605,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n  std::string text2 = \"\";\n  for (int i = 0; i < text1.length(); i++) {\n    if (text1[i] != ' ') {\n      text2 += text1[i];\n    }\n  }\n  return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1666123606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n\tstd::string text2;\n\tfor (int i = 0; i < text1.length(); i++) {\n\t\tif (text1[i] != ' ') {\n\t\t\ttext2 += text1[i];\n\t\t}\n\t}\n\treturn text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1666123606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2 = \"\";\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for(int i = 0; i < text1.length(); i++) {\n        if(text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n  std::string text2;\n  for (int i = 0; i < text1.length(); i++) {\n    if (text1[i] != ' ') {\n      text2 += text1[i];\n    }\n  }\n  return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for(int i = 0; i < text1.length(); i++) {\n        if(text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n  std::string text2;\n  for (int i = 0; i < text1.length(); i++) {\n    if (text1[i] != ' ') {\n      text2 += text1[i];\n    }\n  }\n  return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2 = \"\";\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2 = \"\";\n    for(int i = 0; i < text1.length(); i++) {\n        if(text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1666123606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n  std::string text2;\n  for (int i = 0; i < text1.length(); i++) {\n    if (text1[i] != ' ') {\n      text2 += text1[i];\n    }\n  }\n  return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for(int i = 0; i < text1.length(); i++) {\n        if(text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n  std::string text2;\n  for (int i = 0; i < text1.length(); i++) {\n    if (text1[i] != ' ') {\n      text2 += text1[i];\n    }\n  }\n  return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for(int i = 0; i < text1.length(); i++) {\n        if(text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.size(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1666123605,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n  std::string text2;\n  for (int i = 0; i < text1.length(); i++) {\n    if (text1[i] != ' ') {\n      text2 += text1[i];\n    }\n  }\n  return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.size(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1666123605,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n  std::string text2;\n  for (int i = 0; i < text1.length(); i++) {\n    if (text1[i] != ' ') {\n      text2 += text1[i];\n    }\n  }\n  return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for(int i = 0; i < text1.length(); i++) {\n        if(text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n\tstd::string text2;\n\tfor (int i = 0; i < text1.length(); i++) {\n\t\tif (text1[i] != ' ') {\n\t\t\ttext2 += text1[i];\n\t\t}\n\t}\n\treturn text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1666123606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n  std::string text2;\n  for (int i = 0; i < text1.length(); i++) {\n    if (text1[i] != ' ') {\n      text2 += text1[i];\n    }\n  }\n  return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n  std::string text2;\n  for (int i = 0; i < text1.length(); i++) {\n    if (text1[i] != ' ') {\n      text2 += text1[i];\n    }\n  }\n  return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n  std::string text2 = \"\";\n  for (int i = 0; i < text1.length(); i++) {\n    if (text1[i] != ' ') {\n      text2 += text1[i];\n    }\n  }\n  return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1666123606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for(int i=0;i<text1.length();i++) {\n        if(text1[i]!=' ') {\n            text2+=text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n  std::string text2;\n  for (int i = 0; i < text1.length(); i++) {\n    if (text1[i] != ' ') {\n      text2 += text1[i];\n    }\n  }\n  return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for(int i = 0; i < text1.length(); i++) {\n        if(text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for(int i=0;i<text1.length();i++) {\n        if(text1[i]!=' ') {\n            text2.push_back(text1[i]);\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1666123605,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2 = \"\";\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for(int i=0;i<text1.length();i++) {\n        if(text1[i]!=' ') {\n            text2+=text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n\tstd::string text2;\n\tfor (int i = 0; i < text1.length(); i++) {\n\t\tif (text1[i] != ' ') {\n\t\t\ttext2 += text1[i];\n\t\t}\n\t}\n\treturn text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1666123606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for(int i=0;i<text1.length();i++) {\n        if(text1[i]!=' ') {\n            text2.push_back(text1[i]);\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1666123605,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for(int i=0;i<text1.length();i++) {\n        if(text1[i]!=' ') {\n            text2.push_back(text1[i]);\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1666123605,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for(int i = 0; i < text1.length(); i++) {\n        if(text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (auto i : text1) {\n        if (i != ' ') {\n            text2 += i;\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1666123606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2 = \"\";\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for(int i=0;i<text1.length();i++) {\n        if(text1[i]!=' ') {\n            text2.push_back(text1[i]);\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1666123605,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for(int i = 0; i < text1.length(); i++) {\n        if(text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2 = \"\";\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for(int i=0;i<text1.length();i++) {\n        if(text1[i]!=' ') {\n            text2+=text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n  std::string text2;\n  for (int i = 0; i < text1.length(); i++) {\n    if (text1[i] != ' ') {\n      text2 += text1[i];\n    }\n  }\n  return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2 = \"\";\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n  std::string text2;\n  for (int i = 0; i < text1.length(); i++) {\n    if (text1[i] != ' ') {\n      text2 += text1[i];\n    }\n  }\n  return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n  std::string text2;\n  for (int i = 0; i < text1.length(); i++) {\n    if (text1[i] != ' ') {\n      text2 += text1[i];\n    }\n  }\n  return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for(int i=0;i<text1.length();i++) {\n        if(text1[i]!=' ') {\n            text2+=text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for(int i = 0; i < text1.length(); i++) {\n        if(text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.size(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1666123605,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for(int i = 0; i < text1.length(); i++) {\n        if(text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2 = \"\";\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for(int i = 0; i < text1.length(); i++) {\n        if(text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2.push_back(text1[i]);\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1666123606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n  std::string text2;\n  for (int i = 0; i < text1.length(); i++) {\n    if (text1[i] != ' ') {\n      text2 += text1[i];\n    }\n  }\n  return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for(int i = 0; i < text1.length(); i++) {\n        if(text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2 = \"\";\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for(int i = 0; i < text1.length(); i++) {\n        if(text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n\tstd::string text2 = \"\";\n\tfor (int i = 0; i < text1.length(); i++) {\n\t\tif (text1[i] != ' ') {\n\t\t\ttext2 += text1[i];\n\t\t}\n\t}\n\treturn text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1666123605,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for(int i = 0; i < text1.length(); i++) {\n        if(text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for(int i=0;i<text1.length();i++) {\n        if(text1[i]!=' ') {\n            text2+=text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for(int i=0;i<text1.length();i++) {\n        if(text1[i]!=' ') {\n            text2+=text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2 = \"\";\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n  std::string text2;\n  for(int i = 0; i < text1.length(); i++) {\n    if(text1[i] != ' ') {\n      text2.push_back(text1[i]);\n    }\n  }\n  return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1666123606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for(int i = 0; i < text1.length(); i++) {\n        if(text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for(int i = 0; i < text1.length(); i++) {\n        if(text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for(int i = 0; i < text1.length(); i++) {\n        if(text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for(int i = 0; i < text1.length(); i++) {\n        if(text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for(int i = 0; i < text1.length(); i++) {\n        if(text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2 = \"\";\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n  std::string text2;\n  for (int i = 0; i < text1.length(); i++) {\n    if (text1[i] != ' ') {\n      text2 += text1[i];\n    }\n  }\n  return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n  std::string text2 = \"\";\n  for (int i = 0; i < text1.length(); i++) {\n    if (text1[i] != ' ') {\n      text2 += text1[i];\n    }\n  }\n  return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1666123606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n  std::string text2;\n  for (int i = 0; i < text1.length(); i++) {\n    if (text1[i] != ' ') {\n      text2 += text1[i];\n    }\n  }\n  return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for(int i=0;i<text1.length();i++) {\n        if(text1[i]!=' ') {\n            text2+=text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for(int i = 0; i < text1.length(); i++) {\n        if(text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for(int i=0;i<text1.length();i++) {\n        if(text1[i]!=' ') {\n            text2.push_back(text1[i]);\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1666123605,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n  int i = 0;\n  int j = 0;\n  while (text1[i] != '\\0') {\n    if (text1[i] != ' ') {\n      text1[j] = text1[i];\n      j++;\n    }\n    i++;\n  }\n  text1[j] = '\\0';\n  return text1;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1666123606,
      "stdout": "",
      "stderr": "tmp7m04sbzq: /tmp/tmp7m04sbzq.cpp:19: int main(): Assertion `candidate((\" Google    Flutter \")) == (\"GoogleFlutter\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for(int i = 0; i < text1.length(); i++) {\n        if(text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for(int i=0;i<text1.length();i++) {\n        if(text1[i]!=' ') {\n            text2+=text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.size(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1666123605,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n\tstd::string text2;\n\tfor (int i = 0; i < text1.length(); i++) {\n\t\tif (text1[i] != ' ') {\n\t\t\ttext2 += text1[i];\n\t\t}\n\t}\n\treturn text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1666123606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n  std::string text2;\n  for (int i = 0; i < text1.length(); i++) {\n    if (text1[i] != ' ') {\n      text2 += text1[i];\n    }\n  }\n  return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for(int i = 0; i < text1.length(); i++) {\n        if(text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    // Write your code here\n    int i=0;\n    while(text1[i]!='\\0'){\n        if(text1[i]==' '){\n            text1.erase(i,1);\n        }\n        else{\n            i++;\n        }\n    }\n    return text1;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1666123606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2 = \"\";\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2 = \"\";\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n  std::string text2;\n  for (int i = 0; i < text1.length(); i++) {\n    if (text1[i] != ' ') {\n      text2 += text1[i];\n    }\n  }\n  return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for(int i=0;i<text1.length();i++) {\n        if(text1[i]!=' ') {\n            text2+=text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2 = \"\";\n    for(int i = 0; i < text1.length(); i++) {\n        if(text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1666123606,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n    std::string text2;\n    for (int i = 0; i < text1.length(); i++) {\n        if (text1[i] != ' ') {\n            text2 += text1[i];\n        }\n    }\n    return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all whitespaces from the given string.\nstd::string remove_whitespaces(std::string text1) {\n  std::string text2;\n  for (int i = 0; i < text1.length(); i++) {\n    if (text1[i] != ' ') {\n      text2 += text1[i];\n    }\n  }\n  return text2;\n}\nint main() {\n    auto candidate = remove_whitespaces;\n    assert(candidate((\" Google    Flutter \")) == (\"GoogleFlutter\"));\n    assert(candidate((\" Google    Dart \")) == (\"GoogleDart\"));\n    assert(candidate((\" iOS    Swift \")) == (\"iOSSwift\"));\n}\n",
      "timestamp": 1665510229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}