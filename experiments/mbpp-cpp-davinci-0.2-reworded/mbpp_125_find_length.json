{
  "name": "mbpp_125_find_length",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_125_find_length.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long length = string.length();\n    return length;",
    "  long length = string.length();\n  return length;",
    "\tlong length = 0;\n\tlong max_length = 0;\n\tlong count_0 = 0;\n\tlong count_1 = 0;\n\tfor(long i = 0; i < string.length(); i++) {\n\t\tif(string[i] == '0') {\n\t\t\tcount_0++;\n\t\t} else {\n\t\t\tcount_1++;\n\t\t}\n\t\tif(count_0 == count_1) {\n\t\t\tlength = count_0 + count_1;\n\t\t\tif(length > max_length) {\n\t\t\t\tmax_length = length;\n\t\t\t}\n\t\t}\n\t}\n\treturn max_length;",
    "    long length = 0;\n    long zero_count = 0;\n    long one_count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '0') {\n            zero_count++;\n        } else {\n            one_count++;\n        }\n        if(zero_count == one_count) {\n            length = std::max(length, zero_count + one_count);\n        }\n    }\n    zero_count = 0;\n    one_count = 0;\n    for(int i = string.length() - 1; i >= 0; i--) {\n        if(string[i] == '0') {\n            zero_count++;\n        } else {\n            one_count++;\n        }\n        if(zero_count == one_count) {\n            length = std::max(length, zero_count + one_count);\n        }\n    }\n    return length;",
    "    long length = string.length();\n    return length;",
    "    long length = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            length++;\n        }\n    }\n    return length;",
    "    long length = string.length();\n    long max_length = 0;\n    long count_zero = 0;\n    long count_one = 0;\n    for(long i = 0; i < length; i++) {\n        if(string[i] == '0') {\n            count_zero++;\n        }\n        else {\n            count_one++;\n        }\n        if(count_zero == count_one) {\n            max_length = std::max(max_length, count_zero + count_one);\n        }\n    }\n    count_zero = 0;\n    count_one = 0;\n    for(long i = length - 1; i >= 0; i--) {\n        if(string[i] == '0') {\n            count_zero++;\n        }\n        else {\n            count_one++;\n        }\n        if(count_zero == count_one) {\n            max_length = std::max(max_length, count_zero + count_one);\n        }\n    }\n    return max_length;",
    "    long length = string.length();\n    return length;",
    "    long length = string.length();\n    return length;",
    "    long length = string.length();\n    return length;",
    "    long length = string.length();\n    return length;",
    "    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] == '1') {\n            count++;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return count;",
    "    long length = string.length();\n    return length;",
    "    long length = string.length();\n    return length;",
    "    long length = 0;\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n        else {\n            count--;\n        }\n        if(count == 0) {\n            length = std::max(length, i + 1);\n        }\n    }\n    return length;",
    "    long length = string.length();\n    return length;",
    "    long length = string.length();\n    return length;",
    "\tlong length = string.length();\n\treturn length;",
    "    long length = string.length();\n    return length;"
  ]
}