{
  "name": "mbpp_63_max_difference",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between available pairs in the given tuple vector.\nlong max_difference(std::vector<long> test_list) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_63_max_difference.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = max_difference;\n    assert(candidate((std::vector<long>({(std::tuple<long, long>)std::make_tuple(3, 5), (std::tuple<long, long>)std::make_tuple(1, 7), (std::tuple<long, long>)std::make_tuple(10, 3), (std::tuple<long, long>)std::make_tuple(1, 2)}))) == (7));\n    assert(candidate((std::vector<long>({(std::tuple<long, long>)std::make_tuple(4, 6), (std::tuple<long, long>)std::make_tuple(2, 17), (std::tuple<long, long>)std::make_tuple(9, 13), (std::tuple<long, long>)std::make_tuple(11, 12)}))) == (15));\n    assert(candidate((std::vector<long>({(std::tuple<long, long>)std::make_tuple(12, 35), (std::tuple<long, long>)std::make_tuple(21, 27), (std::tuple<long, long>)std::make_tuple(13, 23), (std::tuple<long, long>)std::make_tuple(41, 22)}))) == (23));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "\tlong max_diff = 0;\n\tfor (int i = 0; i < test_list.size(); i++) {\n\t\tfor (int j = i + 1; j < test_list.size(); j++) {\n\t\t\tif (test_list[j] - test_list[i] > max_diff) {\n\t\t\t\tmax_diff = test_list[j] - test_list[i];\n\t\t\t}\n\t\t}\n\t}\n\treturn max_diff;",
    "  long max_diff = 0;\n  for (int i = 0; i < test_list.size(); i++) {\n    for (int j = i + 1; j < test_list.size(); j++) {\n      if (test_list[i] < test_list[j]) {\n        long diff = test_list[j] - test_list[i];\n        if (diff > max_diff) {\n          max_diff = diff;\n        }\n      }\n    }\n  }\n  return max_diff;",
    "    long max_diff = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[j] - test_list[i] > max_diff) {\n                max_diff = test_list[j] - test_list[i];\n            }\n        }\n    }\n    return max_diff;",
    "    long max_diff = 0;\n    for(int i = 0; i < test_list.size(); i++){\n        for(int j = i+1; j < test_list.size(); j++){\n            if(test_list[j] - test_list[i] > max_diff){\n                max_diff = test_list[j] - test_list[i];\n            }\n        }\n    }\n    return max_diff;",
    "    long max_diff = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[j] - test_list[i] > max_diff) {\n                max_diff = test_list[j] - test_list[i];\n            }\n        }\n    }\n    return max_diff;",
    "    long max_diff = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] < test_list[j]) {\n                if(test_list[j] - test_list[i] > max_diff) {\n                    max_diff = test_list[j] - test_list[i];\n                }\n            }\n        }\n    }\n    return max_diff;",
    "    long max_diff = 0;\n    for (int i = 0; i < test_list.size() - 1; i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[j] - test_list[i] > max_diff) {\n                max_diff = test_list[j] - test_list[i];\n            }\n        }\n    }\n    return max_diff;",
    "    long max_diff = 0;\n    for(int i=0; i<test_list.size(); i++) {\n        for(int j=i+1; j<test_list.size(); j++) {\n            if(test_list[i] < test_list[j]) {\n                long diff = test_list[j] - test_list[i];\n                if(diff > max_diff) {\n                    max_diff = diff;\n                }\n            }\n        }\n    }\n    return max_diff;",
    "    long max_diff = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[j] - test_list[i] > max_diff) {\n                max_diff = test_list[j] - test_list[i];\n            }\n        }\n    }\n    return max_diff;",
    "    long max_diff = 0;\n    long max_val = test_list[0];\n    for(long i = 1; i < test_list.size(); i++) {\n        if(test_list[i] > max_val) {\n            max_val = test_list[i];\n        }\n        long diff = max_val - test_list[i];\n        if(diff > max_diff) {\n            max_diff = diff;\n        }\n    }\n    return max_diff;",
    "    long max_diff = 0;\n    long min_num = test_list[0];\n    for(int i = 1; i < test_list.size(); i++) {\n        if(test_list[i] - min_num > max_diff) {\n            max_diff = test_list[i] - min_num;\n        }\n        if(test_list[i] < min_num) {\n            min_num = test_list[i];\n        }\n    }\n    return max_diff;",
    "    long max_diff = 0;\n    long min_val = test_list[0];\n    for(int i = 1; i < test_list.size(); i++) {\n        if(test_list[i] - min_val > max_diff) {\n            max_diff = test_list[i] - min_val;\n        }\n        if(test_list[i] < min_val) {\n            min_val = test_list[i];\n        }\n    }\n    return max_diff;",
    "    long max_diff = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] < test_list[j]) {\n                if (max_diff < test_list[j] - test_list[i]) {\n                    max_diff = test_list[j] - test_list[i];\n                }\n            }\n        }\n    }\n    return max_diff;",
    "    long max_diff = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[j] - test_list[i] > max_diff) {\n                max_diff = test_list[j] - test_list[i];\n            }\n        }\n    }\n    return max_diff;",
    "    long max_diff = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[j] - test_list[i] > max_diff) {\n                max_diff = test_list[j] - test_list[i];\n            }\n        }\n    }\n    return max_diff;",
    "  long max_diff = 0;\n  long diff = 0;\n  for(int i = 0; i < test_list.size(); i++) {\n    for(int j = i+1; j < test_list.size(); j++) {\n      diff = test_list[i] - test_list[j];\n      if(diff < 0) {\n        diff = diff * -1;\n      }\n      if(diff > max_diff) {\n        max_diff = diff;\n      }\n    }\n  }\n  return max_diff;",
    "    long max_diff = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] < test_list[j]) {\n                max_diff = std::max(max_diff, test_list[j] - test_list[i]);\n            }\n        }\n    }\n    return max_diff;",
    "    long max_diff = 0;\n    long min_num = test_list[0];\n    for(int i = 1; i < test_list.size(); i++) {\n        if(test_list[i] - min_num > max_diff) {\n            max_diff = test_list[i] - min_num;\n        }\n        if(test_list[i] < min_num) {\n            min_num = test_list[i];\n        }\n    }\n    return max_diff;",
    "    long max = test_list[1] - test_list[0];\n    long min = test_list[0];\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i] - min > max)\n            max = test_list[i] - min;\n        if (test_list[i] < min)\n            min = test_list[i];\n    }\n    return max;",
    "    long max_diff = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] < test_list[j]) {\n                long diff = test_list[j] - test_list[i];\n                if(diff > max_diff) {\n                    max_diff = diff;\n                }\n            }\n        }\n    }\n    return max_diff;"
  ]
}