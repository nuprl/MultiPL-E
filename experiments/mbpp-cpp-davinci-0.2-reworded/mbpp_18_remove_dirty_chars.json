{
  "name": "mbpp_18_remove_dirty_chars",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove characters from the first string which are present in the second string.\nstd::string remove_dirty_chars(std::string string, std::string second_string) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_18_remove_dirty_chars.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = remove_dirty_chars;\n    assert(candidate((\"probasscurve\"), (\"pros\")) == (\"bacuve\"));\n    assert(candidate((\"digitalindia\"), (\"talent\")) == (\"digiidi\"));\n    assert(candidate((\"exoticmiles\"), (\"toxic\")) == (\"emles\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::string result;\n    std::vector<int> char_set(256, 0);\n    for(int i = 0; i < second_string.length(); i++) {\n        char_set[second_string[i]] = 1;\n    }\n    for(int i = 0; i < string.length(); i++) {\n        if(char_set[string[i]] == 0) {\n            result += string[i];\n        }\n    }\n    return result;",
    "    std::unordered_set<char> dirty_chars;\n    for (int i = 0; i < second_string.length(); i++) {\n        dirty_chars.insert(second_string[i]);\n    }\n    std::string result;\n    for (int i = 0; i < string.length(); i++) {\n        if (dirty_chars.find(string[i]) == dirty_chars.end()) {\n            result.push_back(string[i]);\n        }\n    }\n    return result;",
    "    std::string result;\n    for(int i = 0; i < string.size(); i++) {\n        bool is_dirty = false;\n        for(int j = 0; j < second_string.size(); j++) {\n            if(string[i] == second_string[j]) {\n                is_dirty = true;\n                break;\n            }\n        }\n        if(!is_dirty) {\n            result += string[i];\n        }\n    }\n    return result;",
    "\tstd::string result;\n\tstd::unordered_map<char, int> map;\n\tfor (int i = 0; i < second_string.length(); i++) {\n\t\tmap[second_string[i]]++;\n\t}\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (map.find(string[i]) == map.end()) {\n\t\t\tresult += string[i];\n\t\t}\n\t}\n\treturn result;",
    "\tstd::string result;\n\tstd::unordered_map<char, int> map;\n\tfor (int i = 0; i < second_string.length(); i++) {\n\t\tmap[second_string[i]]++;\n\t}\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (map.find(string[i]) == map.end()) {\n\t\t\tresult += string[i];\n\t\t}\n\t}\n\treturn result;",
    "    std::string result;\n    std::vector<bool> char_set(256, false);\n    for (int i = 0; i < second_string.length(); i++) {\n        char_set[second_string[i]] = true;\n    }\n    for (int i = 0; i < string.length(); i++) {\n        if (char_set[string[i]] == false) {\n            result += string[i];\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    std::unordered_set<char> dirty_chars;\n    for (int i = 0; i < second_string.length(); i++) {\n        dirty_chars.insert(second_string[i]);\n    }\n    for (int i = 0; i < string.length(); i++) {\n        if (dirty_chars.find(string[i]) == dirty_chars.end()) {\n            result += string[i];\n        }\n    }\n    return result;",
    "    std::string result;\n    std::unordered_set<char> dirty_chars;\n    for(auto c : second_string) {\n        dirty_chars.insert(c);\n    }\n    for(auto c : string) {\n        if(dirty_chars.find(c) == dirty_chars.end()) {\n            result.push_back(c);\n        }\n    }\n    return result;",
    "    std::string result;\n    std::map<char, int> map;\n    for (int i = 0; i < second_string.length(); i++) {\n        map[second_string[i]]++;\n    }\n    for (int i = 0; i < string.length(); i++) {\n        if (map.find(string[i]) == map.end()) {\n            result += string[i];\n        }\n    }\n    return result;",
    "    std::string result;\n    std::vector<int> char_set(256, 0);\n    for (int i = 0; i < second_string.length(); i++) {\n        char_set[second_string[i]] = 1;\n    }\n    for (int i = 0; i < string.length(); i++) {\n        if (char_set[string[i]] == 0) {\n            result.push_back(string[i]);\n        }\n    }\n    return result;",
    "    std::string result;\n    std::unordered_set<char> dirty_chars;\n    for(int i = 0; i < second_string.size(); i++) {\n        dirty_chars.insert(second_string[i]);\n    }\n    for(int i = 0; i < string.size(); i++) {\n        if(dirty_chars.find(string[i]) == dirty_chars.end()) {\n            result.push_back(string[i]);\n        }\n    }\n    return result;",
    "    std::string result;\n    std::vector<bool> char_set(256, false);\n    for (int i = 0; i < second_string.length(); ++i) {\n        char_set[second_string[i]] = true;\n    }\n    for (int i = 0; i < string.length(); ++i) {\n        if (!char_set[string[i]]) {\n            result.push_back(string[i]);\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    int hash[256] = {0};\n    for (int i = 0; i < second_string.length(); i++) {\n        hash[second_string[i]] = 1;\n    }\n    for (int i = 0; i < string.length(); i++) {\n        if (hash[string[i]] == 0) {\n            result += string[i];\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    std::unordered_map<char, int> dirty_chars;\n    for (int i = 0; i < second_string.length(); i++) {\n        dirty_chars[second_string[i]] = 1;\n    }\n    for (int i = 0; i < string.length(); i++) {\n        if (dirty_chars.find(string[i]) == dirty_chars.end()) {\n            result += string[i];\n        }\n    }\n    return result;",
    "    int hash[256] = {0};\n    for(int i = 0; i < second_string.length(); i++) {\n        hash[second_string[i]] = 1;\n    }\n    int j = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(hash[string[i]] == 0) {\n            string[j] = string[i];\n            j++;\n        }\n    }\n    return string.substr(0, j);",
    "    std::string result = \"\";\n    int hash_table[256] = {0};\n    for(int i = 0; i < second_string.length(); i++) {\n        hash_table[second_string[i]] = 1;\n    }\n    for(int i = 0; i < string.length(); i++) {\n        if(hash_table[string[i]] == 0) {\n            result += string[i];\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for(int i = 0; i < string.length(); i++) {\n        if(second_string.find(string[i]) == std::string::npos) {\n            result += string[i];\n        }\n    }\n    return result;",
    "    std::string result;\n    std::unordered_set<char> dirty_chars;\n    for (auto c : second_string) {\n        dirty_chars.insert(c);\n    }\n    for (auto c : string) {\n        if (dirty_chars.find(c) == dirty_chars.end()) {\n            result.push_back(c);\n        }\n    }\n    return result;",
    "    std::string result;\n    std::map<char, int> map;\n    for (int i = 0; i < second_string.length(); i++) {\n        map[second_string[i]] = 1;\n    }\n    for (int i = 0; i < string.length(); i++) {\n        if (map.find(string[i]) == map.end()) {\n            result += string[i];\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    std::vector<bool> char_set(256, false);\n    for (int i = 0; i < second_string.length(); i++) {\n        char_set[second_string[i]] = true;\n    }\n    for (int i = 0; i < string.length(); i++) {\n        if (!char_set[string[i]]) {\n            result += string[i];\n        }\n    }\n    return result;"
  ]
}