{
  "name": "mbpp_443_largest_neg",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the largest negative number from the given vector.\nlong largest_neg(std::vector<long> list1) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_443_largest_neg.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = largest_neg;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)-4, (long)-6}))) == (-6));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)-8, (long)-9}))) == (-9));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)-1}))) == (-1));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long max = 0;\n    for (auto i : list1) {\n        if (i < 0 && i > max) {\n            max = i;\n        }\n    }\n    return max;",
    "    long max = 0;\n    for (auto i : list1) {\n        if (i < 0 && i > max) {\n            max = i;\n        }\n    }\n    return max;",
    "    long max = 0;\n    for (auto i = list1.begin(); i != list1.end(); i++) {\n        if (*i < 0 && *i > max) {\n            max = *i;\n        }\n    }\n    return max;",
    "    long max = 0;\n    for (auto i = list1.begin(); i != list1.end(); i++) {\n        if (*i < 0) {\n            if (max < *i) {\n                max = *i;\n            }\n        }\n    }\n    return max;",
    "    long max = 0;\n    for (auto i = list1.begin(); i != list1.end(); i++) {\n        if (*i < 0) {\n            if (max < *i) {\n                max = *i;\n            }\n        }\n    }\n    return max;",
    "    long max = list1[0];\n    for (auto i = list1.begin(); i != list1.end(); i++) {\n        if (*i < 0 && *i > max) {\n            max = *i;\n        }\n    }\n    return max;",
    "    long max = list1[0];\n    for(int i=0; i<list1.size(); i++) {\n        if(list1[i] < 0 && list1[i] > max) {\n            max = list1[i];\n        }\n    }\n    return max;",
    "    long largest_neg = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] < 0) {\n            if (list1[i] > largest_neg) {\n                largest_neg = list1[i];\n            }\n        }\n    }\n    return largest_neg;",
    "    long max_neg = -1;\n    for (auto i : list1) {\n        if (i < 0 && i > max_neg) {\n            max_neg = i;\n        }\n    }\n    return max_neg;",
    "    long max = list1[0];\n    for(int i=0;i<list1.size();i++) {\n        if(list1[i] > max) {\n            max = list1[i];\n        }\n    }\n    return max;",
    "    long max = 0;\n    for (auto i = list1.begin(); i != list1.end(); i++) {\n        if (*i < 0 && *i > max) {\n            max = *i;\n        }\n    }\n    return max;",
    "    long largest = list1[0];\n    for (long i = 0; i < list1.size(); i++) {\n        if (list1[i] > largest) {\n            largest = list1[i];\n        }\n    }\n    return largest;",
    "    long max = 0;\n    for (auto i = list1.begin(); i != list1.end(); i++) {\n        if (*i < 0 && *i > max) {\n            max = *i;\n        }\n    }\n    return max;",
    "    long max = 0;\n    for (auto i : list1) {\n        if (i < 0 && i > max) {\n            max = i;\n        }\n    }\n    return max;",
    "    long max = list1[0];\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] > max) {\n            max = list1[i];\n        }\n    }\n    return max;",
    "    long max = 0;\n    for(int i = 0; i < list1.size(); i++) {\n        if(list1[i] < 0) {\n            if(list1[i] > max) {\n                max = list1[i];\n            }\n        }\n    }\n    return max;",
    "    long max = list1[0];\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] > max) {\n            max = list1[i];\n        }\n    }\n    return max;",
    "    long max = 0;\n    for (auto i = list1.begin(); i != list1.end(); i++) {\n        if (*i < 0 && *i > max) {\n            max = *i;\n        }\n    }\n    return max;",
    "    long largest = list1[0];\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] > largest) {\n            largest = list1[i];\n        }\n    }\n    return largest;",
    "    long max = list1[0];\n    for(long i=0; i<list1.size(); i++) {\n        if(list1[i] < 0) {\n            if(list1[i] > max) {\n                max = list1[i];\n            }\n        }\n    }\n    return max;"
  ]
}