{
  "name": "mbpp_802_count_rotation",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of rotations required to generate a sorted vector. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-vector/\nlong count_rotation(std::vector<long> arr) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_802_count_rotation.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = count_rotation;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)1, (long)2, (long)3}))) == (2));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (2));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long n = arr.size();\n    long low = 0;\n    long high = n-1;\n    while(low < high) {\n        long mid = low + (high-low)/2;\n        if(arr[mid] > arr[high]) {\n            low = mid+1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;",
    "    long n = arr.size();\n    long low = 0;\n    long high = n - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        long mid = low + (high - low) / 2;\n        long next = (mid + 1) % n;\n        long prev = (mid + n - 1) % n;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;",
    "    long low = 0;\n    long high = arr.size() - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high])\n            return low;\n        long mid = low + (high - low) / 2;\n        long next = (mid + 1) % arr.size();\n        long prev = (mid + arr.size() - 1) % arr.size();\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n            return mid;\n        else if (arr[mid] <= arr[high])\n            high = mid - 1;\n        else if (arr[mid] >= arr[low])\n            low = mid + 1;\n    }\n    return -1;",
    "    long n = arr.size();\n    long low = 0, high = n-1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        long mid = (low + high) / 2;\n        long next = (mid + 1) % n;\n        long prev = (mid + n - 1) % n;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        }\n        else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        }\n        else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;",
    "    long n = arr.size();\n    long low = 0;\n    long high = n - 1;\n    long mid = 0;\n    while(low <= high) {\n        if(arr[low] <= arr[high]) {\n            return low;\n        }\n        mid = (low + high) / 2;\n        long next = (mid + 1) % n;\n        long prev = (mid + n - 1) % n;\n        if(arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        }\n        else if(arr[mid] <= arr[high]) {\n            high = mid - 1;\n        }\n        else if(arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;",
    "    long n = arr.size();\n    long low = 0, high = n-1;\n    while(low <= high) {\n        if(arr[low] <= arr[high]) {\n            return low;\n        }\n        long mid = low + (high - low)/2;\n        long next = (mid + 1) % n;\n        long prev = (mid + n - 1) % n;\n        if(arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        }\n        else if(arr[mid] <= arr[high]) {\n            high = mid - 1;\n        }\n        else if(arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;",
    "    long n = arr.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        if(arr[low] <= arr[high]) {\n            return low;\n        }\n        long mid = (low + high)/2;\n        long next = (mid + 1)%n;\n        long prev = (mid + n - 1)%n;\n        if(arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        }\n        else if(arr[mid] <= arr[high]) {\n            high = mid - 1;\n        }\n        else if(arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;",
    "    long n = arr.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        if(arr[low] <= arr[high]) {\n            return low;\n        }\n        long mid = (low + high) / 2;\n        long next = (mid + 1) % n;\n        long prev = (mid + n - 1) % n;\n        if(arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if(arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if(arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;",
    "    long n = arr.size();\n    long low = 0;\n    long high = n-1;\n    while(low < high) {\n        long mid = (low + high) / 2;\n        if(arr[mid] > arr[high]) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;",
    "    long n = arr.size();\n    long low = 0;\n    long high = n-1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        long mid = low + (high-low)/2;\n        long next = (mid+1)%n;\n        long prev = (mid+n-1)%n;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        }\n        else if (arr[mid] <= arr[high]) {\n            high = mid-1;\n        }\n        else if (arr[mid] >= arr[low]) {\n            low = mid+1;\n        }\n    }\n    return -1;",
    "    long n = arr.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        if(arr[low] <= arr[high]) {\n            return low;\n        }\n        long mid = low + (high - low)/2;\n        long next = (mid + 1) % n;\n        long prev = (mid + n - 1) % n;\n        if(arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if(arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if(arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;",
    "    long n = arr.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        if(arr[low] <= arr[high]) {\n            return low;\n        }\n        long mid = low + (high-low)/2;\n        long next = (mid+1)%n;\n        long prev = (mid+n-1)%n;\n        if(arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        }\n        else if(arr[mid] <= arr[high]) {\n            high = mid-1;\n        }\n        else if(arr[mid] >= arr[low]) {\n            low = mid+1;\n        }\n    }\n    return -1;",
    "    long n = arr.size();\n    long low = 0;\n    long high = n - 1;\n    while(low <= high) {\n        if(arr[low] <= arr[high]) {\n            return low;\n        }\n        long mid = (low + high) / 2;\n        long next = (mid + 1) % n;\n        long prev = (mid + n - 1) % n;\n        if(arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        }\n        else if(arr[mid] <= arr[high]) {\n            high = mid - 1;\n        }\n        else if(arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;",
    "    long n = arr.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        if(arr[low] <= arr[high]) {\n            return low;\n        }\n        long mid = low + (high-low)/2;\n        long next = (mid+1)%n;\n        long prev = (mid+n-1)%n;\n        if(arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        }\n        else if(arr[mid] <= arr[high]) {\n            high = mid-1;\n        }\n        else if(arr[mid] >= arr[low]) {\n            low = mid+1;\n        }\n    }\n    return -1;",
    "    long n = arr.size();\n    long low = 0, high = n-1;\n    while(low <= high) {\n        if(arr[low] <= arr[high]) {\n            return low;\n        }\n        long mid = (low+high)/2;\n        long next = (mid+1)%n;\n        long prev = (mid+n-1)%n;\n        if(arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        }\n        else if(arr[mid] <= arr[high]) {\n            high = mid-1;\n        }\n        else if(arr[mid] >= arr[low]) {\n            low = mid+1;\n        }\n    }\n    return -1;",
    "    long n = arr.size();\n    long low = 0;\n    long high = n-1;\n    long mid = 0;\n    while(low <= high) {\n        if(arr[low] <= arr[high]) {\n            return low;\n        }\n        mid = (low + high)/2;\n        long next = (mid + 1)%n;\n        long prev = (mid + n - 1)%n;\n        if(arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        }\n        else if(arr[mid] <= arr[high]) {\n            high = mid - 1;\n        }\n        else if(arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;",
    "    long n = arr.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        if(arr[low] <= arr[high]) {\n            return low;\n        }\n        long mid = low + (high-low)/2;\n        long next = (mid+1)%n;\n        long prev = (mid+n-1)%n;\n        if(arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        }\n        else if(arr[mid] <= arr[high]) {\n            high = mid-1;\n        }\n        else if(arr[mid] >= arr[low]) {\n            low = mid+1;\n        }\n    }\n    return -1;",
    "    long n = arr.size();\n    long low = 0;\n    long high = n-1;\n    long mid = 0;\n    while(low <= high) {\n        if(arr[low] <= arr[high]) {\n            return low;\n        }\n        mid = low + (high-low)/2;\n        long next = (mid+1)%n;\n        long prev = (mid+n-1)%n;\n        if(arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        }\n        else if(arr[mid] <= arr[high]) {\n            high = mid-1;\n        }\n        else if(arr[mid] >= arr[low]) {\n            low = mid+1;\n        }\n    }\n    return -1;",
    "    long n = arr.size();\n    long low = 0;\n    long high = n-1;\n    while(low<=high) {\n        if(arr[low]<=arr[high]) {\n            return low;\n        }\n        long mid = low + (high-low)/2;\n        long next = (mid+1)%n;\n        long prev = (mid+n-1)%n;\n        if(arr[mid]<=arr[next] && arr[mid]<=arr[prev]) {\n            return mid;\n        } else if(arr[mid]<=arr[high]) {\n            high = mid-1;\n        } else if(arr[mid]>=arr[low]) {\n            low = mid+1;\n        }\n    }\n    return -1;",
    "    long n = arr.size();\n    long low = 0;\n    long high = n - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        long mid = low + (high - low) / 2;\n        long next = (mid + 1) % n;\n        long prev = (mid + n - 1) % n;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        }\n        else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        }\n        else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;"
  ]
}