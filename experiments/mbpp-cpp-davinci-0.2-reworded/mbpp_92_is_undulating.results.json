{
  "name": "mbpp_92_is_undulating",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_92_is_undulating.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    for (int i = 0; i < digits.size() - 2; ++i) {\n        if (digits[i] != digits[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit;\n    bool is_increasing = true;\n    while (n > 0) {\n        curr_digit = n % 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n        prev_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "tmpyeaduqh3: /tmp/tmpyeaduqh3.cpp:28: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev = n % 10;\n    n /= 10;\n    int curr;\n    bool is_increasing = true;\n    while (n) {\n        curr = n % 10;\n        if (is_increasing) {\n            if (curr > prev) {\n                return false;\n            }\n        } else {\n            if (curr < prev) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n        prev = curr;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "tmpszk3dhd9: /tmp/tmpszk3dhd9.cpp:28: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    long prev = -1;\n    long curr = n % 10;\n    n /= 10;\n    while (n) {\n        long next = n % 10;\n        if (prev != -1) {\n            if (prev == next) {\n                return false;\n            }\n        }\n        prev = curr;\n        curr = next;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "tmp8w2j_vzk: /tmp/tmp8w2j_vzk.cpp:23: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n  int last_digit = n % 10;\n  n /= 10;\n  int curr_digit;\n  bool is_increasing = true;\n  while (n > 0) {\n    curr_digit = n % 10;\n    if (is_increasing) {\n      if (curr_digit > last_digit) {\n        return false;\n      }\n    } else {\n      if (curr_digit < last_digit) {\n        return false;\n      }\n    }\n    last_digit = curr_digit;\n    n /= 10;\n    is_increasing = !is_increasing;\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "tmp0w5wdp02: /tmp/tmp0w5wdp02.cpp:28: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    // Write your code here\n    int count=0;\n    int prev=n%10;\n    n=n/10;\n    while(n>0){\n        int curr=n%10;\n        if(prev==curr){\n            return false;\n        }\n        prev=curr;\n        n=n/10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int curr = n % 10;\n        if (curr == prev) return false;\n        prev = curr;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int curr_digit = n % 10;\n        if (curr_digit != last_digit) {\n            return false;\n        }\n        last_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "tmpeezgpund: /tmp/tmpeezgpund.cpp:19: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit = n % 10;\n    n /= 10;\n    bool is_increasing = prev_digit > curr_digit;\n    while (n > 0) {\n        prev_digit = curr_digit;\n        curr_digit = n % 10;\n        n /= 10;\n        if (is_increasing) {\n            if (prev_digit < curr_digit) {\n                return false;\n            }\n        } else {\n            if (prev_digit > curr_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "tmp0mqh8i3v: /tmp/tmp0mqh8i3v.cpp:29: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n\tint last_digit = n % 10;\n\tn /= 10;\n\twhile (n > 0) {\n\t\tint curr_digit = n % 10;\n\t\tif (curr_digit == last_digit) {\n\t\t\treturn false;\n\t\t}\n\t\tlast_digit = curr_digit;\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev = n % 10;\n    n /= 10;\n    int curr = n % 10;\n    n /= 10;\n    bool is_increasing = curr > prev;\n    while (n > 0) {\n        prev = curr;\n        curr = n % 10;\n        n /= 10;\n        if (is_increasing) {\n            if (curr > prev) {\n                return false;\n            }\n        } else {\n            if (curr < prev) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    long prev = n % 10;\n    n /= 10;\n    while (n) {\n        long curr = n % 10;\n        if (prev != curr) {\n            return false;\n        }\n        prev = curr;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "tmp9ti1khmz: /tmp/tmp9ti1khmz.cpp:19: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    bool is_increasing = true;\n    while (n) {\n        int digit = n % 10;\n        if (is_increasing) {\n            if (digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (digit < prev_digit) {\n                return false;\n            }\n        }\n        prev_digit = digit;\n        n /= 10;\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "tmpcnrlr2yq: /tmp/tmpcnrlr2yq.cpp:27: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int curr = n % 10;\n        if (curr == prev) {\n            return false;\n        }\n        prev = curr;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    bool is_increasing = true;\n    while (n > 0) {\n        int digit = n % 10;\n        if (is_increasing) {\n            if (digit > last_digit) {\n                return false;\n            }\n        } else {\n            if (digit < last_digit) {\n                return false;\n            }\n        }\n        last_digit = digit;\n        n /= 10;\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "tmpmzmznn9q: /tmp/tmpmzmznn9q.cpp:27: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit == last_digit) {\n            return false;\n        }\n        last_digit = digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int curr_digit = n % 10;\n        if (curr_digit == prev_digit) {\n            return false;\n        }\n        prev_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int curr_digit = n % 10;\n        if (curr_digit != last_digit) {\n            return false;\n        }\n        last_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "tmpeezgpund: /tmp/tmpeezgpund.cpp:19: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    // Write your code here\n    int count = 0;\n    int prev = -1;\n    while(n > 0) {\n        int curr = n % 10;\n        if(prev == -1) {\n            prev = curr;\n            n = n / 10;\n            continue;\n        }\n        if(prev == curr) {\n            return false;\n        }\n        if(prev > curr) {\n            count++;\n        }\n        prev = curr;\n        n = n / 10;\n    }\n    if(count == 0) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit;\n    bool is_increasing = true;\n    while (n > 0) {\n        curr_digit = n % 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n        prev_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "tmpyeaduqh3: /tmp/tmpyeaduqh3.cpp:28: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    long last_digit = n % 10;\n    n /= 10;\n    bool is_increasing = true;\n    while (n > 0) {\n        long digit = n % 10;\n        if (is_increasing) {\n            if (digit > last_digit) {\n                return false;\n            }\n        } else {\n            if (digit < last_digit) {\n                return false;\n            }\n        }\n        last_digit = digit;\n        n /= 10;\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "tmp9lf_y6mm: /tmp/tmp9lf_y6mm.cpp:27: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    // Write your code here\n    int count = 0;\n    int prev = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int curr = n % 10;\n        if (curr == prev) {\n            return false;\n        }\n        prev = curr;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n  int last_digit = -1;\n  int count = 0;\n  while (n) {\n    int digit = n % 10;\n    if (last_digit == -1) {\n      last_digit = digit;\n      count = 1;\n    } else {\n      if (digit == last_digit) {\n        count++;\n      } else {\n        if (count < 3) {\n          return false;\n        }\n        count = 1;\n      }\n      last_digit = digit;\n    }\n    n /= 10;\n  }\n  return count >= 3;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "tmp1vq9uq9u: /tmp/tmp1vq9uq9u.cpp:29: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    for (int i = 0; i < digits.size() - 2; ++i) {\n        if (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2] || digits[i] == digits[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "tmpyi5fwdld: /tmp/tmpyi5fwdld.cpp:19: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int curr_digit = n % 10;\n        if (curr_digit == prev_digit) {\n            return false;\n        }\n        prev_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    std::vector<int> digits;\n    while (n) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    for (int i = 0; i < digits.size() - 2; i++) {\n        if (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    long prev = n % 10;\n    n /= 10;\n    while (n > 0) {\n        long curr = n % 10;\n        if (prev == curr) {\n            return false;\n        }\n        prev = curr;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit == last_digit) {\n            return false;\n        }\n        last_digit = digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    // Write your code here\n    int count = 0;\n    int flag = 0;\n    int flag1 = 0;\n    int flag2 = 0;\n    int flag3 = 0;\n    int flag4 = 0;\n    int flag5 = 0;\n    int flag6 = 0;\n    int flag7 = 0;\n    int flag8 = 0;\n    int flag9 = 0;\n    int flag10 = 0;\n    int flag11 = 0;\n    int flag12 = 0;\n    int flag13 = 0;\n    int flag14 = 0;\n    int flag15 = 0;\n    int flag16 = 0;\n    int flag17 = 0;\n    int flag18 = 0;\n    int flag19 = 0;\n    int flag20 = 0;\n    int flag21 = 0;\n    int flag22 = 0;\n    int flag23 = 0;\n    int flag24 = 0;\n    int flag25 = 0;\n    int flag26 = 0;\n    int flag27 = 0;\n    int flag28 = 0;\n    int flag29 = 0;\n    int flag30 = 0;\n    int flag31 = 0;\n    int flag32 = 0;\n    int flag33 = 0;\n    int flag34 = 0;\n    int flag35 = 0;\n    int flag36 = 0;\n    int flag37 = 0;\n    int flag38 = 0;\n    int flag39 = 0;\n    int flag40 = 0;\n    int flag41 = 0;\n    int flag42 = 0;\n    int flag43 = 0;\n    int flag44 = 0;\n    int flag45 = 0;\n    int flag46 = 0;\n    int flag47 = 0;\n    int flag48 = 0;\n    int flag49 = 0;\n    int flag50 = 0;\n    int flag51 = 0;\n    int flag52 = 0;\n    int flag53 = 0;\n    int flag54 = 0;\n    int flag55 = 0;\n    int flag56 = 0;\n    int flag57 = 0;\n    int flag58 = 0;\n    int flag59 = 0;\n    int flag60 = 0;\n    int flag61 = 0;\n    int\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "/tmp/tmp92sgnhks.cpp: In function \u2018bool is_undulating(long int)\u2019:\n/tmp/tmp92sgnhks.cpp:70:1: error: expected unqualified-id before \u2018}\u2019 token\n   70 | }\n      | ^\n/tmp/tmp92sgnhks.cpp:70:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int a[10], i = 0, j = 0, k = 0, l = 0;\n    while (n != 0) {\n        a[i] = n % 10;\n        n = n / 10;\n        i++;\n    }\n    for (j = 0; j < i; j++) {\n        if (a[j] == a[j + 1]) {\n            return false;\n        }\n    }\n    for (k = 0; k < i; k++) {\n        if (a[k] > a[k + 1]) {\n            for (l = k + 1; l < i; l++) {\n                if (a[l] > a[l + 1]) {\n                    return false;\n                }\n            }\n        }\n        else if (a[k] < a[k + 1]) {\n            for (l = k + 1; l < i; l++) {\n                if (a[l] < a[l + 1]) {\n                    return false;\n                }\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "tmp85u0u1o8: /tmp/tmp85u0u1o8.cpp:36: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int curr_digit = n % 10;\n        if (curr_digit != last_digit) {\n            return false;\n        }\n        last_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "tmpeezgpund: /tmp/tmpeezgpund.cpp:19: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    for (int i = 0; i < digits.size() - 2; i++) {\n        if (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2] || digits[i] == digits[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "tmpxg24oalt: /tmp/tmpxg24oalt.cpp:19: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit;\n    bool is_increasing = true;\n    while(n > 0) {\n        curr_digit = n % 10;\n        if(curr_digit == prev_digit) {\n            return false;\n        }\n        if(is_increasing) {\n            if(curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if(curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n        prev_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "tmpiasftgn6: /tmp/tmpiasftgn6.cpp:31: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    for (int i = 0; i < digits.size() - 2; i++) {\n        if (digits[i] != digits[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    long prev = n % 10;\n    n /= 10;\n    long curr = n % 10;\n    n /= 10;\n    while (n > 0) {\n        if (prev == curr) {\n            return false;\n        }\n        prev = curr;\n        curr = n % 10;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    long last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        long digit = n % 10;\n        if (digit == last_digit) {\n            return false;\n        }\n        last_digit = digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit = n % 10;\n    n /= 10;\n    bool is_increasing = prev_digit > curr_digit;\n    while (n) {\n        prev_digit = curr_digit;\n        curr_digit = n % 10;\n        n /= 10;\n        if (is_increasing) {\n            if (prev_digit < curr_digit) {\n                return false;\n            }\n        } else {\n            if (prev_digit > curr_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "tmp2ci45w3t: /tmp/tmp2ci45w3t.cpp:29: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    if (n < 100) {\n        return false;\n    }\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit = n % 10;\n    n /= 10;\n    bool is_increasing = curr_digit > prev_digit;\n    while (n > 0) {\n        prev_digit = curr_digit;\n        curr_digit = n % 10;\n        n /= 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n            if (curr_digit < prev_digit) {\n                is_increasing = false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n            if (curr_digit > prev_digit) {\n                is_increasing = true;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "tmpzr93kwua: /tmp/tmpzr93kwua.cpp:38: int main(): Assertion `candidate((1991)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    if (n < 100) {\n        return false;\n    }\n    int last_digit = n % 10;\n    n /= 10;\n    int second_last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int current_digit = n % 10;\n        if (current_digit != second_last_digit) {\n            return false;\n        }\n        second_last_digit = last_digit;\n        last_digit = current_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "tmpa0lucbiw: /tmp/tmpa0lucbiw.cpp:25: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    bool is_increasing = true;\n    while (n > 0) {\n        int digit = n % 10;\n        if (is_increasing) {\n            if (digit > last_digit) {\n                return false;\n            }\n        } else {\n            if (digit < last_digit) {\n                return false;\n            }\n        }\n        last_digit = digit;\n        n /= 10;\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "tmpmzmznn9q: /tmp/tmpmzmznn9q.cpp:27: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = -1;\n    int curr_digit = -1;\n    int next_digit = -1;\n    while(n > 0) {\n        prev_digit = curr_digit;\n        curr_digit = next_digit;\n        next_digit = n % 10;\n        if(prev_digit != -1 && curr_digit != -1 && next_digit != -1) {\n            if(prev_digit > curr_digit && curr_digit < next_digit) {\n                return false;\n            }\n        }\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "tmpf_44rbdh: /tmp/tmpf_44rbdh.cpp:23: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n  int last_digit = n % 10;\n  n /= 10;\n  int current_digit;\n  bool is_increasing = true;\n  while (n > 0) {\n    current_digit = n % 10;\n    if (is_increasing) {\n      if (current_digit > last_digit) {\n        return false;\n      }\n    } else {\n      if (current_digit < last_digit) {\n        return false;\n      }\n    }\n    last_digit = current_digit;\n    n /= 10;\n    is_increasing = !is_increasing;\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "tmpzzehz5qp: /tmp/tmpzzehz5qp.cpp:28: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit;\n    bool is_increasing = true;\n    while (n > 0) {\n        curr_digit = n % 10;\n        if (curr_digit == prev_digit) {\n            return false;\n        }\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n        prev_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "tmpu2zp52rk: /tmp/tmpu2zp52rk.cpp:31: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit = n % 10;\n    n /= 10;\n    bool is_increasing = curr_digit > prev_digit;\n    while (n > 0) {\n        prev_digit = curr_digit;\n        curr_digit = n % 10;\n        n /= 10;\n        if (is_increasing) {\n            if (curr_digit >= prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit <= prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    if(n<10)\n        return false;\n    int prev_digit = n%10;\n    n/=10;\n    int curr_digit = n%10;\n    n/=10;\n    bool is_increasing = (prev_digit>curr_digit);\n    while(n>0) {\n        prev_digit = curr_digit;\n        curr_digit = n%10;\n        if(is_increasing) {\n            if(prev_digit<curr_digit)\n                return false;\n        }\n        else {\n            if(prev_digit>curr_digit)\n                return false;\n        }\n        is_increasing = !is_increasing;\n        n/=10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "tmp495vu4n0: /tmp/tmp495vu4n0.cpp:30: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit = n % 10;\n    n /= 10;\n    bool is_increasing = curr_digit > prev_digit;\n    while (n > 0) {\n        prev_digit = curr_digit;\n        curr_digit = n % 10;\n        n /= 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int a, b, c;\n    a = n % 10;\n    n /= 10;\n    b = n % 10;\n    n /= 10;\n    c = n % 10;\n    n /= 10;\n    if (a == b && b == c) {\n        return false;\n    }\n    while (n > 0) {\n        if (a == b || b == c) {\n            return false;\n        }\n        a = b;\n        b = c;\n        c = n % 10;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    // Write your code here\n    int a[10],i=0,j=0,k=0,l=0,m=0,n1=0,n2=0,n3=0,n4=0;\n    while(n!=0)\n    {\n        a[i]=n%10;\n        n=n/10;\n        i++;\n    }\n    for(j=0;j<i-1;j++)\n    {\n        if(a[j]==a[j+1])\n        {\n            return false;\n        }\n    }\n    for(k=0;k<i-2;k++)\n    {\n        if(a[k]<a[k+1] && a[k+1]<a[k+2])\n        {\n            n1++;\n        }\n        else if(a[k]>a[k+1] && a[k+1]>a[k+2])\n        {\n            n2++;\n        }\n    }\n    for(l=0;l<i-3;l++)\n    {\n        if(a[l]<a[l+1] && a[l+1]>a[l+2] && a[l+2]<a[l+3])\n        {\n            n3++;\n        }\n        else if(a[l]>a[l+1] && a[l+1]<a[l+2] && a[l+2]>a[l+3])\n        {\n            n4++;\n        }\n    }\n    if(n1==i-2 || n2==i-2 || n3==i-3 || n4==i-3)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "tmp9aeqnjh7: /tmp/tmp9aeqnjh7.cpp:53: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n  std::string s = std::to_string(n);\n  for (int i = 0; i < s.size() - 2; i++) {\n    if (s[i] == s[i + 1] || s[i + 1] == s[i + 2] || s[i] == s[i + 2]) {\n      return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "tmpp8lpabkr: /tmp/tmpp8lpabkr.cpp:15: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    for (int i = 0; i < digits.size() - 2; i++) {\n        if (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit != last_digit) {\n            return false;\n        }\n        last_digit = digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "tmpawc1b9m2: /tmp/tmpawc1b9m2.cpp:19: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    for (size_t i = 0; i < digits.size() - 2; ++i) {\n        if (digits[i] != digits[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    bool is_increasing = true;\n    while (n) {\n        int curr_digit = n % 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        prev_digit = curr_digit;\n        n /= 10;\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "tmpvxuw2hko: /tmp/tmpvxuw2hko.cpp:27: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    for (int i = 0; i < digits.size() - 2; ++i) {\n        if (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int curr_digit = n % 10;\n        if (curr_digit == last_digit) {\n            return false;\n        }\n        last_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit = n % 10;\n    n /= 10;\n    bool is_increasing = prev_digit < curr_digit;\n    while (n > 0) {\n        prev_digit = curr_digit;\n        curr_digit = n % 10;\n        n /= 10;\n        if (is_increasing) {\n            if (prev_digit <= curr_digit) {\n                return false;\n            }\n        } else {\n            if (prev_digit >= curr_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    if(n<10)\n        return false;\n    int prev_digit = n%10;\n    n/=10;\n    int curr_digit = n%10;\n    n/=10;\n    bool is_increasing = curr_digit > prev_digit;\n    while(n>0) {\n        prev_digit = curr_digit;\n        curr_digit = n%10;\n        n/=10;\n        if(is_increasing) {\n            if(curr_digit > prev_digit)\n                return false;\n            if(curr_digit < prev_digit)\n                is_increasing = false;\n        }\n        else {\n            if(curr_digit < prev_digit)\n                return false;\n            if(curr_digit > prev_digit)\n                is_increasing = true;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "tmp6y03xfd_: /tmp/tmp6y03xfd_.cpp:34: int main(): Assertion `candidate((1991)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev = n % 10;\n    n /= 10;\n    int curr;\n    bool is_increasing = true;\n    while (n > 0) {\n        curr = n % 10;\n        if (curr > prev) {\n            if (!is_increasing) {\n                return false;\n            }\n        } else if (curr < prev) {\n            if (is_increasing) {\n                is_increasing = false;\n            }\n        } else {\n            return false;\n        }\n        prev = curr;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "tmpd_3vk8_l: /tmp/tmpd_3vk8_l.cpp:29: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int cur_digit = n % 10;\n        if (cur_digit == last_digit) {\n            return false;\n        }\n        last_digit = cur_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n) {\n        int curr_digit = n % 10;\n        if (curr_digit != last_digit) {\n            return false;\n        }\n        last_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "tmpqikk7gj_: /tmp/tmpqikk7gj_.cpp:19: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int curr_digit = n % 10;\n        if (curr_digit == last_digit) {\n            return false;\n        }\n        last_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int curr = n % 10;\n        if (prev == curr) {\n            return false;\n        }\n        prev = curr;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    bool is_increasing = true;\n    while (n > 0) {\n        int digit = n % 10;\n        if (is_increasing) {\n            if (digit > last_digit) {\n                return false;\n            }\n        } else {\n            if (digit < last_digit) {\n                return false;\n            }\n        }\n        last_digit = digit;\n        n /= 10;\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "tmpmzmznn9q: /tmp/tmpmzmznn9q.cpp:27: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit;\n    bool is_increasing = true;\n    while (n > 0) {\n        curr_digit = n % 10;\n        if (curr_digit == prev_digit) {\n            return false;\n        }\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n        prev_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "tmpu2zp52rk: /tmp/tmpu2zp52rk.cpp:31: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        if (prev_digit == curr_digit) {\n            return false;\n        }\n        prev_digit = curr_digit;\n        curr_digit = n % 10;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit = n % 10;\n    n /= 10;\n    bool is_increasing = (curr_digit > prev_digit);\n    while (n > 0) {\n        prev_digit = curr_digit;\n        curr_digit = n % 10;\n        n /= 10;\n        if (curr_digit == prev_digit) {\n            return false;\n        }\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    long prev_digit = n % 10;\n    n /= 10;\n    bool is_increasing = true;\n    while (n > 0) {\n        long curr_digit = n % 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n        prev_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "tmpomchm3t3: /tmp/tmpomchm3t3.cpp:27: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    std::string s = std::to_string(n);\n    for (int i = 0; i < s.size() - 1; i++) {\n        if (s[i] == s[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    if (n < 100) return false;\n    int prev_diff = n % 10 - (n / 10) % 10;\n    n /= 10;\n    while (n >= 10) {\n        int diff = n % 10 - (n / 10) % 10;\n        if (diff * prev_diff >= 0) return false;\n        prev_diff = diff;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    int current_digit = n % 10;\n    n /= 10;\n    bool increasing = current_digit > last_digit;\n    while (n > 0) {\n        last_digit = current_digit;\n        current_digit = n % 10;\n        n /= 10;\n        if (increasing) {\n            if (current_digit >= last_digit) {\n                return false;\n            }\n        } else {\n            if (current_digit <= last_digit) {\n                return false;\n            }\n        }\n        increasing = !increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    // Write your code here\n    int count = 0;\n    int last_digit = n % 10;\n    n = n / 10;\n    while (n > 0) {\n        int curr_digit = n % 10;\n        if (curr_digit == last_digit) {\n            return false;\n        }\n        last_digit = curr_digit;\n        n = n / 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    bool is_increasing = true;\n    while (n) {\n        int curr_digit = n % 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        prev_digit = curr_digit;\n        n /= 10;\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "tmpvxuw2hko: /tmp/tmpvxuw2hko.cpp:27: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit != last_digit) {\n            return false;\n        }\n        last_digit = digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "tmpawc1b9m2: /tmp/tmpawc1b9m2.cpp:19: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit;\n    bool is_increasing = true;\n    while (n > 0) {\n        curr_digit = n % 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        prev_digit = curr_digit;\n        n /= 10;\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "tmpfw3wqy5k: /tmp/tmpfw3wqy5k.cpp:28: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    // Write your code here\n    int prev = n % 10;\n    n /= 10;\n    int curr = n % 10;\n    n /= 10;\n    bool flag = false;\n    while(n > 0) {\n        if(prev == curr) {\n            return false;\n        }\n        if(prev > curr) {\n            if(flag) {\n                return false;\n            }\n            flag = true;\n        }\n        prev = curr;\n        curr = n % 10;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "tmpuc8yzdf3: /tmp/tmpuc8yzdf3.cpp:29: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit;\n    bool is_increasing = true;\n    while (n > 0) {\n        curr_digit = n % 10;\n        if (curr_digit == prev_digit) {\n            return false;\n        }\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n        prev_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "tmpu2zp52rk: /tmp/tmpu2zp52rk.cpp:31: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n  int prev_digit = n % 10;\n  n /= 10;\n  int curr_digit = n % 10;\n  n /= 10;\n  bool is_increasing = (curr_digit > prev_digit);\n  while (n > 0) {\n    prev_digit = curr_digit;\n    curr_digit = n % 10;\n    n /= 10;\n    if (is_increasing) {\n      if (curr_digit > prev_digit) {\n        return false;\n      }\n      if (curr_digit < prev_digit) {\n        is_increasing = false;\n      }\n    } else {\n      if (curr_digit < prev_digit) {\n        return false;\n      }\n      if (curr_digit > prev_digit) {\n        is_increasing = true;\n      }\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "tmpb4tc5xec: /tmp/tmpb4tc5xec.cpp:35: int main(): Assertion `candidate((1991)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int arr[10] = {0};\n    int i = 0;\n    while(n) {\n        arr[i++] = n%10;\n        n /= 10;\n    }\n    for(int j = 0; j < i-1; j++) {\n        if(arr[j] == arr[j+1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    for (int i = 0; i < digits.size() - 2; i++) {\n        if (digits[i] != digits[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n  int prev_digit = n % 10;\n  n /= 10;\n  int curr_digit = n % 10;\n  n /= 10;\n  bool is_increasing = curr_digit > prev_digit;\n  while (n > 0) {\n    prev_digit = curr_digit;\n    curr_digit = n % 10;\n    n /= 10;\n    if (is_increasing) {\n      if (curr_digit > prev_digit) {\n        return false;\n      }\n    } else {\n      if (curr_digit < prev_digit) {\n        return false;\n      }\n    }\n    is_increasing = !is_increasing;\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    bool increasing = true;\n    while (n) {\n        int digit = n % 10;\n        if (increasing) {\n            if (digit > last_digit) {\n                return false;\n            }\n        } else {\n            if (digit < last_digit) {\n                return false;\n            }\n        }\n        last_digit = digit;\n        n /= 10;\n        increasing = !increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "tmpd5ixsjhc: /tmp/tmpd5ixsjhc.cpp:27: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    for (int i = 0; i < digits.size() - 2; ++i) {\n        if (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int curr = n % 10;\n        if (prev == curr) {\n            return false;\n        }\n        prev = curr;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit == last_digit) {\n            return false;\n        }\n        last_digit = digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    int i = 0;\n    while (i < digits.size() - 1) {\n        if (digits[i] == digits[i + 1]) {\n            return false;\n        }\n        i += 2;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "tmpbevotzfy: /tmp/tmpbevotzfy.cpp:22: int main(): Assertion `candidate((1991)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit;\n    bool is_ascending = true;\n    while (n > 0) {\n        curr_digit = n % 10;\n        if (is_ascending) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        prev_digit = curr_digit;\n        n /= 10;\n        is_ascending = !is_ascending;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "tmp2fh6t3rd: /tmp/tmp2fh6t3rd.cpp:28: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    bool is_increasing = true;\n    while (n > 0) {\n        int curr_digit = n % 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n        prev_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "tmpuvk3wnof: /tmp/tmpuvk3wnof.cpp:27: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    if (n < 100) return false;\n    int last_digit = n % 10;\n    n /= 10;\n    int second_last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int third_last_digit = n % 10;\n        if (third_last_digit - second_last_digit != second_last_digit - last_digit) return false;\n        last_digit = second_last_digit;\n        second_last_digit = third_last_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "tmplvkti4vx: /tmp/tmplvkti4vx.cpp:21: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit == last_digit) {\n            return false;\n        }\n        last_digit = digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n) {\n        int current_digit = n % 10;\n        if (last_digit != current_digit) {\n            return false;\n        }\n        last_digit = current_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "tmpo3sapmwz: /tmp/tmpo3sapmwz.cpp:19: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    if (n < 100) {\n        return false;\n    }\n    int last_digit = n % 10;\n    n /= 10;\n    int next_to_last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int next_digit = n % 10;\n        if (next_to_last_digit - last_digit != next_digit - next_to_last_digit) {\n            return false;\n        }\n        last_digit = next_to_last_digit;\n        next_to_last_digit = next_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "tmpesp7s69y: /tmp/tmpesp7s69y.cpp:25: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    long last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        long digit = n % 10;\n        if (digit != last_digit) {\n            return false;\n        }\n        last_digit = digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "tmpo8evzedo: /tmp/tmpo8evzedo.cpp:19: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n  int last_digit = n % 10;\n  n /= 10;\n  while (n > 0) {\n    int digit = n % 10;\n    if (digit == last_digit) {\n      return false;\n    }\n    last_digit = digit;\n    n /= 10;\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    bool is_ascending = true;\n    while (n > 0) {\n        int curr_digit = n % 10;\n        if (is_ascending) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        prev_digit = curr_digit;\n        n /= 10;\n        is_ascending = !is_ascending;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "tmp81s7kz0j: /tmp/tmp81s7kz0j.cpp:27: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n) {\n        int digit = n % 10;\n        if (digit == last_digit) {\n            return false;\n        }\n        last_digit = digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    int i = 0;\n    while (i < digits.size() - 1) {\n        if (digits[i] == digits[i + 1]) {\n            return false;\n        }\n        i++;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit;\n    bool is_increasing = true;\n    while (n > 0) {\n        curr_digit = n % 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n        prev_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "tmpyeaduqh3: /tmp/tmpyeaduqh3.cpp:28: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int count = 0;\n    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int curr_digit = n % 10;\n        if (curr_digit == last_digit) {\n            return false;\n        }\n        last_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit = n % 10;\n    n /= 10;\n    bool is_increasing = prev_digit < curr_digit;\n    while (n > 0) {\n        prev_digit = curr_digit;\n        curr_digit = n % 10;\n        n /= 10;\n        if (is_increasing) {\n            if (prev_digit <= curr_digit) {\n                return false;\n            }\n        } else {\n            if (prev_digit >= curr_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev = n % 10;\n    n /= 10;\n    int curr = n % 10;\n    n /= 10;\n    bool is_increasing = curr > prev;\n    while (n > 0) {\n        prev = curr;\n        curr = n % 10;\n        n /= 10;\n        if (is_increasing) {\n            if (curr > prev) {\n                return false;\n            }\n        } else {\n            if (curr < prev) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    long last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        long current_digit = n % 10;\n        if (current_digit != last_digit) {\n            return false;\n        }\n        last_digit = current_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "tmpehzsn4_a: /tmp/tmpehzsn4_a.cpp:19: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit;\n    bool increasing = true;\n    while (n > 0) {\n        curr_digit = n % 10;\n        if (curr_digit == prev_digit) {\n            return false;\n        }\n        if (increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        increasing = !increasing;\n        prev_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "tmpszxo_9rv: /tmp/tmpszxo_9rv.cpp:31: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit;\n    bool is_increasing = true;\n    while (n > 0) {\n        curr_digit = n % 10;\n        if (curr_digit == prev_digit) {\n            return false;\n        }\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n        prev_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "tmpu2zp52rk: /tmp/tmpu2zp52rk.cpp:31: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_diff = 0;\n    int curr_diff = 0;\n    int prev_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int curr_digit = n % 10;\n        curr_diff = prev_digit - curr_digit;\n        if (prev_diff * curr_diff >= 0)\n            return false;\n        prev_diff = curr_diff;\n        prev_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "tmpzmo1je2v: /tmp/tmpzmo1je2v.cpp:22: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    long last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        long digit = n % 10;\n        if (digit == last_digit) {\n            return false;\n        }\n        last_digit = digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n  int last_digit = n % 10;\n  n /= 10;\n  while (n > 0) {\n    int current_digit = n % 10;\n    if (current_digit == last_digit) {\n      return false;\n    }\n    last_digit = current_digit;\n    n /= 10;\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit;\n    bool is_increasing = true;\n    while (n) {\n        curr_digit = n % 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n        prev_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "tmpmw4shxyd: /tmp/tmpmw4shxyd.cpp:28: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    long last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        long digit = n % 10;\n        if (digit == last_digit) {\n            return false;\n        }\n        last_digit = digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int current_digit = n % 10;\n        if (current_digit != last_digit) {\n            return false;\n        }\n        last_digit = current_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "tmpftuhvhpk: /tmp/tmpftuhvhpk.cpp:19: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = -1;\n    int curr_digit = -1;\n    int next_digit = -1;\n    while (n > 0) {\n        prev_digit = curr_digit;\n        curr_digit = next_digit;\n        next_digit = n % 10;\n        if (prev_digit != -1 && curr_digit != -1 && next_digit != -1) {\n            if (prev_digit > curr_digit && curr_digit < next_digit) {\n                return true;\n            }\n        }\n        n /= 10;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "tmp74g9_hh1: /tmp/tmp74g9_hh1.cpp:25: int main(): Assertion `candidate((121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int curr_digit = n % 10;\n        if (prev_digit == curr_digit) {\n            return false;\n        }\n        prev_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit != last_digit) {\n            return false;\n        }\n        last_digit = digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "tmpawc1b9m2: /tmp/tmpawc1b9m2.cpp:19: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    if (n < 100) {\n        return false;\n    }\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit = n % 10;\n    n /= 10;\n    bool is_increasing = curr_digit > prev_digit;\n    while (n > 0) {\n        prev_digit = curr_digit;\n        curr_digit = n % 10;\n        n /= 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n            if (curr_digit < prev_digit) {\n                is_increasing = false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n            if (curr_digit > prev_digit) {\n                is_increasing = true;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "tmpzr93kwua: /tmp/tmpzr93kwua.cpp:38: int main(): Assertion `candidate((1991)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int a = n % 10;\n    n /= 10;\n    int b = n % 10;\n    n /= 10;\n    while (n != 0) {\n        int c = n % 10;\n        if (a != b || b != c) {\n            return false;\n        }\n        a = b;\n        b = c;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "tmpbjm7ep5r: /tmp/tmpbjm7ep5r.cpp:22: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    bool is_increasing = true;\n    while (n > 0) {\n        int curr_digit = n % 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        prev_digit = curr_digit;\n        n /= 10;\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "tmp2ss1bzt7: /tmp/tmp2ss1bzt7.cpp:27: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit = n % 10;\n    n /= 10;\n    bool is_increasing = curr_digit > prev_digit;\n    while (n > 0) {\n        prev_digit = curr_digit;\n        curr_digit = n % 10;\n        n /= 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int curr = n % 10;\n        if (curr == prev) {\n            return false;\n        }\n        prev = curr;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev = n % 10;\n    n /= 10;\n    int curr = n % 10;\n    n /= 10;\n    bool is_increasing = curr > prev;\n    while (n > 0) {\n        prev = curr;\n        curr = n % 10;\n        n /= 10;\n        if (is_increasing) {\n            if (curr > prev) {\n                return false;\n            }\n        } else {\n            if (curr < prev) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    bool is_increasing = true;\n    while (n) {\n        int curr_digit = n % 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n        prev_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "tmpv7bijlvn: /tmp/tmpv7bijlvn.cpp:27: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit;\n    bool is_increasing = true;\n    while (n > 0) {\n        curr_digit = n % 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n        prev_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "tmpyeaduqh3: /tmp/tmpyeaduqh3.cpp:28: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit;\n    bool is_increasing = true;\n    while (n > 0) {\n        curr_digit = n % 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n        prev_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "tmpyeaduqh3: /tmp/tmpyeaduqh3.cpp:28: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int a[10],i=0,j=0,k=0,l=0,m=0,n1=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0;\n    while(n!=0)\n    {\n        a[i]=n%10;\n        n=n/10;\n        i++;\n    }\n    for(j=0;j<i;j++)\n    {\n        if(a[j]==0)\n        {\n            k++;\n        }\n        else if(a[j]==1)\n        {\n            l++;\n        }\n        else if(a[j]==2)\n        {\n            m++;\n        }\n        else if(a[j]==3)\n        {\n            n1++;\n        }\n        else if(a[j]==4)\n        {\n            o++;\n        }\n        else if(a[j]==5)\n        {\n            p++;\n        }\n        else if(a[j]==6)\n        {\n            q++;\n        }\n        else if(a[j]==7)\n        {\n            r++;\n        }\n        else if(a[j]==8)\n        {\n            s++;\n        }\n        else if(a[j]==9)\n        {\n            t++;\n        }\n    }\n    if(k>=1 && l>=1 && m>=1 && n1>=1 && o>=1 && p>=1 && q>=1 && r>=1 && s>=1 && t>=1)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "tmp60lwpopw: /tmp/tmp60lwpopw.cpp:66: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev = n % 10;\n    n /= 10;\n    int curr = n % 10;\n    n /= 10;\n    bool increasing = (prev < curr);\n    while (n > 0) {\n        prev = curr;\n        curr = n % 10;\n        n /= 10;\n        if (increasing) {\n            if (prev <= curr) {\n                return false;\n            }\n        } else {\n            if (prev >= curr) {\n                return false;\n            }\n        }\n        increasing = !increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int count = 0;\n    int prev_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int curr_digit = n % 10;\n        if (prev_digit == curr_digit) {\n            return false;\n        }\n        prev_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit != last_digit) {\n            return false;\n        }\n        last_digit = digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "tmpawc1b9m2: /tmp/tmpawc1b9m2.cpp:19: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    for (int i = 0; i < digits.size() - 2; i++) {\n        if (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2] || digits[i] == digits[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "tmpd24zum7k: /tmp/tmpd24zum7k.cpp:20: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    long prev_digit = -1;\n    long curr_digit = -1;\n    long next_digit = -1;\n    while (n > 0) {\n        next_digit = n % 10;\n        if (curr_digit == -1) {\n            curr_digit = next_digit;\n            n /= 10;\n            continue;\n        }\n        if (prev_digit == -1) {\n            prev_digit = curr_digit;\n            curr_digit = next_digit;\n            n /= 10;\n            continue;\n        }\n        if (prev_digit == next_digit) {\n            return false;\n        }\n        prev_digit = curr_digit;\n        curr_digit = next_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "tmp_wnzvdhv: /tmp/tmp_wnzvdhv.cpp:32: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    int second_last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int current_digit = n % 10;\n        if (current_digit != last_digit && current_digit != second_last_digit) {\n            return false;\n        }\n        second_last_digit = last_digit;\n        last_digit = current_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "tmpmfkqfbqa: /tmp/tmpmfkqfbqa.cpp:22: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit == last_digit) {\n            return false;\n        }\n        last_digit = digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    bool is_increasing = true;\n    while (n > 0) {\n        int digit = n % 10;\n        if (is_increasing) {\n            if (digit > last_digit) {\n                return false;\n            }\n        } else {\n            if (digit < last_digit) {\n                return false;\n            }\n        }\n        last_digit = digit;\n        n /= 10;\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "tmpmzmznn9q: /tmp/tmpmzmznn9q.cpp:27: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    long last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        long digit = n % 10;\n        if (digit == last_digit) {\n            return false;\n        }\n        last_digit = digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    int current_digit;\n    bool increasing = true;\n    while (n > 0) {\n        current_digit = n % 10;\n        if (increasing) {\n            if (current_digit > last_digit) {\n                return false;\n            }\n        } else {\n            if (current_digit < last_digit) {\n                return false;\n            }\n        }\n        last_digit = current_digit;\n        n /= 10;\n        increasing = !increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "tmp2lm8ii11: /tmp/tmp2lm8ii11.cpp:28: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    bool is_increasing = true;\n    while (n > 0) {\n        int curr_digit = n % 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n        prev_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "tmpuvk3wnof: /tmp/tmpuvk3wnof.cpp:27: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n  int last_digit = n % 10;\n  n /= 10;\n  while (n > 0) {\n    int digit = n % 10;\n    if (digit == last_digit) {\n      return false;\n    }\n    last_digit = digit;\n    n /= 10;\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = -1;\n    int curr_digit = -1;\n    int next_digit = -1;\n    while (n > 0) {\n        next_digit = n % 10;\n        if (prev_digit != -1 && curr_digit != -1) {\n            if (prev_digit == next_digit) {\n                return false;\n            }\n        }\n        prev_digit = curr_digit;\n        curr_digit = next_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "tmp41pew_93: /tmp/tmp41pew_93.cpp:23: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit = n % 10;\n    n /= 10;\n    int next_digit = n % 10;\n    n /= 10;\n    bool is_increasing = curr_digit > prev_digit;\n    while (n > 0) {\n        prev_digit = curr_digit;\n        curr_digit = next_digit;\n        next_digit = n % 10;\n        n /= 10;\n        if (is_increasing) {\n            if (curr_digit < prev_digit || curr_digit > next_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit > prev_digit || curr_digit < next_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "tmpnl2d3lua: /tmp/tmpnl2d3lua.cpp:32: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit;\n    bool is_increasing = true;\n    while (n > 0) {\n        curr_digit = n % 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n        prev_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "tmpyeaduqh3: /tmp/tmpyeaduqh3.cpp:28: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n\tint prev_digit = n % 10;\n\tn /= 10;\n\tint curr_digit;\n\tbool is_increasing = true;\n\twhile (n > 0) {\n\t\tcurr_digit = n % 10;\n\t\tif (is_increasing) {\n\t\t\tif (curr_digit > prev_digit) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (curr_digit < prev_digit) {\n\t\t\t\tis_increasing = false;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (curr_digit < prev_digit) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (curr_digit > prev_digit) {\n\t\t\t\tis_increasing = true;\n\t\t\t}\n\t\t}\n\t\tprev_digit = curr_digit;\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "tmpc4lfpmny: /tmp/tmpc4lfpmny.cpp:34: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    long last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        long digit = n % 10;\n        if (digit != last_digit) {\n            return false;\n        }\n        n /= 10;\n        last_digit = digit;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "tmpi5phr0r_: /tmp/tmpi5phr0r_.cpp:19: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev = n % 10;\n    n /= 10;\n    int curr;\n    bool increasing = true;\n    bool decreasing = true;\n    while (n > 0) {\n        curr = n % 10;\n        if (curr > prev) {\n            decreasing = false;\n        } else if (curr < prev) {\n            increasing = false;\n        }\n        prev = curr;\n        n /= 10;\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "tmp9fp0riz7: /tmp/tmp9fp0riz7.cpp:24: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev = n % 10;\n    n /= 10;\n    while (n) {\n        int curr = n % 10;\n        if (curr == prev) {\n            return false;\n        }\n        prev = curr;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    bool is_increasing = true;\n    while (n > 0) {\n        int digit = n % 10;\n        if (is_increasing) {\n            if (digit > last_digit) {\n                return false;\n            }\n        } else {\n            if (digit < last_digit) {\n                return false;\n            }\n        }\n        last_digit = digit;\n        is_increasing = !is_increasing;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "tmpbc51upj5: /tmp/tmpbc51upj5.cpp:27: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int current_digit = n % 10;\n        if (current_digit != last_digit) {\n            return false;\n        }\n        last_digit = current_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "tmpftuhvhpk: /tmp/tmpftuhvhpk.cpp:19: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = -1;\n    int curr_digit = -1;\n    int next_digit = -1;\n    while (n > 0) {\n        prev_digit = curr_digit;\n        curr_digit = next_digit;\n        next_digit = n % 10;\n        if (prev_digit != -1 && curr_digit != -1 && next_digit != -1) {\n            if (prev_digit < curr_digit && curr_digit > next_digit) {\n                return true;\n            }\n            if (prev_digit > curr_digit && curr_digit < next_digit) {\n                return true;\n            }\n        }\n        n /= 10;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    if (n < 100) {\n        return false;\n    }\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit = n % 10;\n    n /= 10;\n    bool is_increasing = prev_digit > curr_digit;\n    while (n > 0) {\n        int next_digit = n % 10;\n        if ((is_increasing && next_digit > curr_digit) ||\n            (!is_increasing && next_digit < curr_digit)) {\n            return false;\n        }\n        prev_digit = curr_digit;\n        curr_digit = next_digit;\n        is_increasing = !is_increasing;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "tmpvzgxrnun: /tmp/tmpvzgxrnun.cpp:28: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit == last_digit) {\n            return false;\n        }\n        last_digit = digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit == last_digit) {\n            return false;\n        }\n        last_digit = digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    long prev = n % 10;\n    n /= 10;\n    long curr = n % 10;\n    n /= 10;\n    bool is_increasing = curr > prev;\n    while (n > 0) {\n        prev = curr;\n        curr = n % 10;\n        n /= 10;\n        if (is_increasing && curr > prev) {\n            return false;\n        }\n        if (!is_increasing && curr < prev) {\n            return false;\n        }\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit = n % 10;\n    n /= 10;\n    int next_digit = n % 10;\n    n /= 10;\n    bool increasing = curr_digit > prev_digit;\n    while (n > 0) {\n        prev_digit = curr_digit;\n        curr_digit = next_digit;\n        next_digit = n % 10;\n        n /= 10;\n        if (increasing) {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n            if (curr_digit > next_digit) {\n                increasing = false;\n            }\n        } else {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n            if (curr_digit < next_digit) {\n                increasing = true;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "tmph0fxc02q: /tmp/tmph0fxc02q.cpp:37: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    int second_last_digit = n % 10;\n    n /= 10;\n    while(n > 0) {\n        int current_digit = n % 10;\n        if(current_digit != last_digit && current_digit != second_last_digit) {\n            return false;\n        }\n        second_last_digit = last_digit;\n        last_digit = current_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "tmp892niwba: /tmp/tmp892niwba.cpp:22: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    // Write your code here\n    int a[10];\n    int i=0;\n    while(n>0){\n        a[i++]=n%10;\n        n/=10;\n    }\n    int j=0;\n    while(j<i-1){\n        if(a[j]==a[j+1]){\n            return false;\n        }\n        j++;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    bool is_increasing = true;\n    while (n > 0) {\n        int curr_digit = n % 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n        prev_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "tmpuvk3wnof: /tmp/tmpuvk3wnof.cpp:27: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    long last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        long digit = n % 10;\n        if (digit == last_digit) {\n            return false;\n        }\n        last_digit = digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    std::vector<int> digits;\n    while (n) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    for (int i = 0; i < digits.size() - 2; i++) {\n        if (digits[i] != digits[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev = n % 10;\n    n /= 10;\n    int curr;\n    bool increasing = true;\n    while (n) {\n        curr = n % 10;\n        if (increasing) {\n            if (curr > prev) {\n                return false;\n            }\n        } else {\n            if (curr < prev) {\n                return false;\n            }\n        }\n        increasing = !increasing;\n        prev = curr;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "tmpe5ilvon_: /tmp/tmpe5ilvon_.cpp:28: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    if (n < 100) {\n        return false;\n    }\n    int last_digit = n % 10;\n    n /= 10;\n    int second_last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int third_last_digit = n % 10;\n        if (last_digit != second_last_digit && second_last_digit != third_last_digit) {\n            return false;\n        }\n        last_digit = second_last_digit;\n        second_last_digit = third_last_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "tmp50pkq70r: /tmp/tmp50pkq70r.cpp:25: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit == last_digit) {\n            return false;\n        }\n        last_digit = digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit;\n    bool is_increasing = true;\n    while (n > 0) {\n        curr_digit = n % 10;\n        if (curr_digit == prev_digit) {\n            return false;\n        }\n        if (is_increasing) {\n            if (curr_digit < prev_digit) {\n                is_increasing = false;\n            }\n        } else {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        }\n        prev_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "tmpbcr0f45v: /tmp/tmpbcr0f45v.cpp:30: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = -1;\n    int curr_digit = -1;\n    int next_digit = -1;\n    while(n > 0) {\n        prev_digit = curr_digit;\n        curr_digit = next_digit;\n        next_digit = n % 10;\n        if(prev_digit == -1) {\n            prev_digit = next_digit;\n        }\n        if(curr_digit == -1) {\n            curr_digit = next_digit;\n        }\n        if(prev_digit == curr_digit) {\n            return false;\n        }\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "tmpfy9f434f: /tmp/tmpfy9f434f.cpp:27: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    std::string s = std::to_string(n);\n    for (int i = 1; i < s.size(); i++) {\n        if (s[i] == s[i-1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int curr = n % 10;\n        if (curr == prev) {\n            return false;\n        }\n        prev = curr;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit = n % 10;\n    n /= 10;\n    bool increasing = curr_digit > prev_digit;\n    while (n > 0) {\n        prev_digit = curr_digit;\n        curr_digit = n % 10;\n        n /= 10;\n        if (increasing) {\n            if (curr_digit > prev_digit) return false;\n            if (curr_digit < prev_digit) increasing = false;\n        } else {\n            if (curr_digit < prev_digit) return false;\n            if (curr_digit > prev_digit) increasing = true;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "tmpts85lwet: /tmp/tmpts85lwet.cpp:27: int main(): Assertion `candidate((1991)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    for (int i = 0; i < digits.size() - 2; ++i) {\n        if (digits[i] != digits[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    if (n < 100) {\n        return false;\n    }\n    int prev_diff = n % 10 - (n / 10) % 10;\n    n /= 10;\n    while (n >= 10) {\n        int diff = n % 10 - (n / 10) % 10;\n        if (diff != prev_diff) {\n            return false;\n        }\n        prev_diff = diff;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "tmpcfsmli7q: /tmp/tmpcfsmli7q.cpp:22: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    long last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        long digit = n % 10;\n        if (digit == last_digit) {\n            return false;\n        }\n        last_digit = digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit == last_digit) {\n            return false;\n        }\n        last_digit = digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit != last_digit) {\n            return false;\n        }\n        last_digit = digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "tmpawc1b9m2: /tmp/tmpawc1b9m2.cpp:19: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    bool is_increasing = true;\n    while (n > 0) {\n        int curr_digit = n % 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        prev_digit = curr_digit;\n        n /= 10;\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "tmp2ss1bzt7: /tmp/tmp2ss1bzt7.cpp:27: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    bool is_increasing = true;\n    while (n > 0) {\n        int current_digit = n % 10;\n        if (is_increasing) {\n            if (current_digit > last_digit) {\n                return false;\n            }\n        } else {\n            if (current_digit < last_digit) {\n                return false;\n            }\n        }\n        last_digit = current_digit;\n        n /= 10;\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "tmp4pqop03p: /tmp/tmp4pqop03p.cpp:27: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit;\n    bool is_increasing = true;\n    while (n > 0) {\n        curr_digit = n % 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n        prev_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "tmpyeaduqh3: /tmp/tmpyeaduqh3.cpp:28: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n  int last_digit = n % 10;\n  n /= 10;\n  while (n > 0) {\n    int next_digit = n % 10;\n    if (next_digit != last_digit) {\n      return false;\n    }\n    last_digit = next_digit;\n    n /= 10;\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "tmp4yc21tfj: /tmp/tmp4yc21tfj.cpp:19: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    std::string s = std::to_string(n);\n    for (int i = 0; i < s.size() - 1; i++) {\n        if (s[i] == s[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    std::string s = std::to_string(n);\n    int i = 0;\n    while (i < s.length() - 1) {\n        if (s[i] == s[i + 1]) {\n            return false;\n        }\n        i++;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit = n % 10;\n    n /= 10;\n    bool increasing = (curr_digit > prev_digit);\n    while (n > 0) {\n        prev_digit = curr_digit;\n        curr_digit = n % 10;\n        n /= 10;\n        if (increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        increasing = !increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    // Write your code here\n    std::vector<int> v;\n    while(n!=0)\n    {\n        v.push_back(n%10);\n        n/=10;\n    }\n    int i=0;\n    while(i<v.size()-1)\n    {\n        if(i%2==0)\n        {\n            if(v[i]<=v[i+1])\n            {\n                return false;\n            }\n        }\n        else\n        {\n            if(v[i]>=v[i+1])\n            {\n                return false;\n            }\n        }\n        i++;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "tmp2lnkfosm: /tmp/tmp2lnkfosm.cpp:35: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    bool is_increasing = true;\n    while (n > 0) {\n        int curr_digit = n % 10;\n        if (is_increasing) {\n            if (curr_digit > last_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < last_digit) {\n                return false;\n            }\n        }\n        last_digit = curr_digit;\n        n /= 10;\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "tmpnsab3_zf: /tmp/tmpnsab3_zf.cpp:27: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    if (n < 100) {\n        return false;\n    }\n    long prev_digit = n % 10;\n    n /= 10;\n    long curr_digit = n % 10;\n    n /= 10;\n    bool is_increasing = curr_digit > prev_digit;\n    while (n > 0) {\n        prev_digit = curr_digit;\n        curr_digit = n % 10;\n        n /= 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    if (n < 100) return false;\n    int prev = n % 10;\n    n /= 10;\n    int curr = n % 10;\n    n /= 10;\n    bool increasing = curr > prev;\n    while (n > 0) {\n        prev = curr;\n        curr = n % 10;\n        n /= 10;\n        if (increasing) {\n            if (curr > prev) return false;\n        } else {\n            if (curr < prev) return false;\n        }\n        increasing = !increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    int current_digit;\n    while (n > 0) {\n        current_digit = n % 10;\n        if (current_digit != last_digit) {\n            return false;\n        }\n        last_digit = current_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "tmp5l8l6mka: /tmp/tmp5l8l6mka.cpp:20: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int d1, d2, d3;\n    d1 = n % 10;\n    n /= 10;\n    d2 = n % 10;\n    n /= 10;\n    d3 = n % 10;\n    if (d1 == d2 && d2 == d3) {\n        return false;\n    }\n    if (d1 > d2 && d2 > d3) {\n        return true;\n    }\n    if (d1 < d2 && d2 < d3) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "tmpwe84yo40: /tmp/tmpwe84yo40.cpp:24: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = -1;\n    int curr_digit = -1;\n    int next_digit = -1;\n    while (n > 0) {\n        prev_digit = curr_digit;\n        curr_digit = next_digit;\n        next_digit = n % 10;\n        n /= 10;\n        if (prev_digit == -1) {\n            continue;\n        }\n        if (prev_digit == curr_digit) {\n            return false;\n        }\n        if (prev_digit > curr_digit && curr_digit < next_digit) {\n            return false;\n        }\n        if (prev_digit < curr_digit && curr_digit > next_digit) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "tmpgc7cwhqy: /tmp/tmpgc7cwhqy.cpp:30: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit == last_digit) {\n            return false;\n        }\n        last_digit = digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n  long last_digit = n % 10;\n  n /= 10;\n  while (n > 0) {\n    long digit = n % 10;\n    if (digit == last_digit) {\n      return false;\n    }\n    last_digit = digit;\n    n /= 10;\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev = n % 10;\n    n /= 10;\n    int curr;\n    bool is_increasing = true;\n    while (n > 0) {\n        curr = n % 10;\n        if (curr > prev) {\n            if (!is_increasing) {\n                return false;\n            }\n        } else if (curr < prev) {\n            is_increasing = false;\n        } else {\n            return false;\n        }\n        prev = curr;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122538,
      "stdout": "",
      "stderr": "tmptdgmno56: /tmp/tmptdgmno56.cpp:27: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    int second_last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int current_digit = n % 10;\n        if (current_digit != last_digit && current_digit != second_last_digit) {\n            return false;\n        }\n        second_last_digit = last_digit;\n        last_digit = current_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "tmpmfkqfbqa: /tmp/tmpmfkqfbqa.cpp:22: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit != last_digit) {\n            return false;\n        }\n        last_digit = digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "tmpawc1b9m2: /tmp/tmpawc1b9m2.cpp:19: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit != last_digit) {\n            return false;\n        }\n        last_digit = digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "tmpawc1b9m2: /tmp/tmpawc1b9m2.cpp:19: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit == last_digit) {\n            return false;\n        }\n        last_digit = digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int curr_digit = n % 10;\n        if (prev_digit == curr_digit) {\n            return false;\n        }\n        prev_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int curr_digit = n % 10;\n        if (curr_digit == prev_digit) {\n            return false;\n        }\n        prev_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n  int prev_digit = n % 10;\n  n /= 10;\n  int curr_digit = n % 10;\n  n /= 10;\n  bool is_increasing = (prev_digit < curr_digit);\n  while (n > 0) {\n    prev_digit = curr_digit;\n    curr_digit = n % 10;\n    n /= 10;\n    if (is_increasing) {\n      if (prev_digit < curr_digit) {\n        return false;\n      }\n    } else {\n      if (prev_digit > curr_digit) {\n        return false;\n      }\n    }\n    is_increasing = !is_increasing;\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    long prev = n % 10;\n    n /= 10;\n    long curr;\n    bool is_increasing = true;\n    while (n > 0) {\n        curr = n % 10;\n        if (is_increasing) {\n            if (curr > prev) {\n                return false;\n            }\n        } else {\n            if (curr < prev) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n        prev = curr;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122538,
      "stdout": "",
      "stderr": "tmp7lx2om4_: /tmp/tmp7lx2om4_.cpp:28: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit;\n    bool is_increasing = true;\n    while (n > 0) {\n        curr_digit = n % 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n        prev_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "tmpyeaduqh3: /tmp/tmpyeaduqh3.cpp:28: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit = n % 10;\n    n /= 10;\n    bool is_increasing = curr_digit > prev_digit;\n    while (n > 0) {\n        prev_digit = curr_digit;\n        curr_digit = n % 10;\n        n /= 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    std::string s = std::to_string(n);\n    for (int i = 0; i < s.length() - 1; i++) {\n        if (s[i] == s[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int curr_digit = n % 10;\n        if (curr_digit == prev_digit) {\n            return false;\n        }\n        prev_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    std::string s = std::to_string(n);\n    for (int i = 0; i < s.size() - 1; i++) {\n        if (s[i] == s[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    bool increasing = true;\n    while (n > 0) {\n        int curr_digit = n % 10;\n        if (increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        prev_digit = curr_digit;\n        n /= 10;\n        increasing = !increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122538,
      "stdout": "",
      "stderr": "tmpgmq633so: /tmp/tmpgmq633so.cpp:27: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int curr = n % 10;\n        if (curr == prev) {\n            return false;\n        }\n        prev = curr;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev = n % 10;\n    n /= 10;\n    int curr;\n    bool is_increasing = true;\n    while (n > 0) {\n        curr = n % 10;\n        if (curr == prev) {\n            return false;\n        }\n        if (is_increasing) {\n            if (curr > prev) {\n                return false;\n            }\n        } else {\n            if (curr < prev) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n        prev = curr;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122538,
      "stdout": "",
      "stderr": "tmp82zrkp6w: /tmp/tmp82zrkp6w.cpp:31: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}