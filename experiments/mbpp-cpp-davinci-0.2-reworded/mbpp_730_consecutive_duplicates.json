{
  "name": "mbpp_730_consecutive_duplicates",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove consecutive duplicates of a given vector.\nstd::any consecutive_duplicates(std::any nums) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_730_consecutive_duplicates.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = consecutive_duplicates;\n    assert(candidate((std::any({(long)0, (long)0, (long)1, (long)2, (long)3, (long)4, (long)4, (long)5, (long)6, (long)6, (long)6, (long)7, (long)8, (long)9, (long)4, (long)4}))) == (std::any({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)4})));\n    assert(candidate((std::any({(long)10, (long)10, (long)15, (long)19, (long)18, (long)18, (long)17, (long)26, (long)26, (long)17, (long)18, (long)10}))) == (std::any({(long)10, (long)15, (long)19, (long)18, (long)17, (long)26, (long)17, (long)18, (long)10})));\n    assert(candidate((std::any({(std::string)\"a\", (std::string)\"a\", (std::string)\"b\", (std::string)\"c\", (std::string)\"d\", (std::string)\"d\"}))) == (std::any({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\", (std::string)\"d\"})));\n    assert(candidate((std::any({(std::string)\"a\", (std::string)\"a\", (std::string)\"b\", (std::string)\"c\", (std::string)\"d\", (std::string)\"d\", (std::string)\"a\", (std::string)\"a\"}))) == (std::any({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\", (std::string)\"d\", (std::string)\"a\"})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::any result;\n    for (int i = 0; i < nums.size(); i++) {\n        if (i == 0) {\n            result.push_back(nums[i]);\n        } else {\n            if (nums[i] != nums[i - 1]) {\n                result.push_back(nums[i]);\n            }\n        }\n    }\n    return result;",
    "    std::any temp;\n    for (auto i = nums.begin(); i != nums.end(); i++) {\n        if (temp.empty() || temp.back() != *i) {\n            temp.push_back(*i);\n        }\n    }\n    return temp;",
    "    std::any result;\n    for (int i = 0; i < nums.size(); i++) {\n        if (i == 0) {\n            result.push_back(nums[i]);\n        }\n        else {\n            if (nums[i] != nums[i - 1]) {\n                result.push_back(nums[i]);\n            }\n        }\n    }\n    return result;",
    "    std::any result;\n    for (int i = 0; i < nums.size(); i++) {\n        if (i == 0 || nums[i] != nums[i - 1]) {\n            result.push_back(nums[i]);\n        }\n    }\n    return result;",
    "  std::any result;\n  for (int i = 0; i < nums.size(); i++) {\n    if (nums[i] != nums[i + 1]) {\n      result.push_back(nums[i]);\n    }\n  }\n  return result;",
    "    std::any res;\n    for (auto i : nums) {\n        if (res.empty() || res.back() != i) {\n            res.push_back(i);\n        }\n    }\n    return res;",
    "    std::any result;\n    std::any prev;\n    for (auto num : nums) {\n        if (num != prev) {\n            result.push_back(num);\n            prev = num;\n        }\n    }\n    return result;",
    "    std::any res;\n    std::any prev;\n    for (auto num : nums) {\n        if (num != prev) {\n            res.push_back(num);\n            prev = num;\n        }\n    }\n    return res;",
    "    std::any result;\n    std::any temp;\n    for (auto i = 0; i < nums.size(); i++) {\n        if (nums[i] != temp) {\n            result.push_back(nums[i]);\n            temp = nums[i];\n        }\n    }\n    return result;",
    "    std::any res;\n    for (int i = 0; i < nums.size(); i++) {\n        if (i == 0) {\n            res.push_back(nums[i]);\n        } else {\n            if (nums[i] != nums[i - 1]) {\n                res.push_back(nums[i]);\n            }\n        }\n    }\n    return res;",
    "    std::any temp;\n    std::any::iterator it;\n    for (it = nums.begin(); it != nums.end(); it++) {\n        if (it == nums.begin()) {\n            temp.push_back(*it);\n        } else {\n            if (*it != *(it - 1)) {\n                temp.push_back(*it);\n            }\n        }\n    }\n    return temp;",
    "    std::any res;\n    for (int i = 0; i < nums.size(); i++) {\n        if (i == 0) {\n            res.push_back(nums[i]);\n        } else if (nums[i] != nums[i - 1]) {\n            res.push_back(nums[i]);\n        }\n    }\n    return res;",
    "    std::any result;\n    std::any last_element;\n    for (auto num : nums) {\n        if (num != last_element) {\n            result.push_back(num);\n            last_element = num;\n        }\n    }\n    return result;",
    "    std::any result;\n    for (auto i : nums) {\n        if (result.empty() || result.back() != i) {\n            result.push_back(i);\n        }\n    }\n    return result;",
    "    std::any result;\n    for (auto num : nums) {\n        if (result.empty() || result.back() != num) {\n            result.push_back(num);\n        }\n    }\n    return result;",
    "    std::any temp;\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] != nums[i + 1]) {\n            temp.push_back(nums[i]);\n        }\n    }\n    return temp;",
    "  std::any result;\n  for (int i = 0; i < nums.size(); i++) {\n    if (i == 0) {\n      result.push_back(nums[i]);\n    } else {\n      if (nums[i] != nums[i - 1]) {\n        result.push_back(nums[i]);\n      }\n    }\n  }\n  return result;",
    "    std::any result;\n    for (int i = 0; i < nums.size(); i++) {\n        if (i == 0) {\n            result.push_back(nums[i]);\n        } else {\n            if (nums[i] != nums[i - 1]) {\n                result.push_back(nums[i]);\n            }\n        }\n    }\n    return result;",
    "    std::any result;\n    for (auto i = 0; i < nums.size(); i++) {\n        if (i == 0 || nums[i] != nums[i - 1]) {\n            result.push_back(nums[i]);\n        }\n    }\n    return result;",
    "    std::any res;\n    for (int i = 0; i < nums.size(); i++) {\n        if (i == 0 || nums[i] != nums[i - 1]) {\n            res.push_back(nums[i]);\n        }\n    }\n    return res;"
  ]
}