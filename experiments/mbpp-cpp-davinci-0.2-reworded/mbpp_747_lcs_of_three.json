{
  "name": "mbpp_747_lcs_of_three",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nlong lcs_of_three(std::string X, std::string Y, std::string Z) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_747_lcs_of_three.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = lcs_of_three;\n    assert(candidate((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2));\n    assert(candidate((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5));\n    assert(candidate((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    int m = X.size();\n    int n = Y.size();\n    int o = Z.size();\n    int L[m+1][n+1][o+1];\n    for(int i = 0; i <= m; i++) {\n        for(int j = 0; j <= n; j++) {\n            for(int k = 0; k <= o; k++) {\n                if(i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if(X[i-1] == Y[j-1] && X[i-1] == Z[k-1]) {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                } else {\n                    L[i][j][k] = std::max(std::max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];",
    "    int m = X.length();\n    int n = Y.length();\n    int o = Z.length();\n    int L[m+1][n+1][o+1];\n    for(int i = 0; i <= m; i++) {\n        for(int j = 0; j <= n; j++) {\n            for(int k = 0; k <= o; k++) {\n                if(i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if(X[i-1] == Y[j-1] && X[i-1] == Z[k-1]) {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                } else {\n                    L[i][j][k] = std::max(std::max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];",
    "    int m = X.length();\n    int n = Y.length();\n    int o = Z.length();\n    int L[m+1][n+1][o+1];\n    for (int i=0; i<=m; i++) {\n        for (int j=0; j<=n; j++) {\n            for (int k=0; k<=o; k++) {\n                if (i == 0 || j == 0||k==0)\n                    L[i][j][k] = 0;\n                else if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1])\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                else\n                    L[i][j][k] = std::max(std::max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n            }\n        }\n    }\n    return L[m][n][o];",
    "    long m = X.length();\n    long n = Y.length();\n    long o = Z.length();\n    long L[m+1][n+1][o+1];\n    for (long i=0; i<=m; i++) {\n        for (long j=0; j<=n; j++) {\n            for (long k=0; k<=o; k++) {\n                if (i == 0 || j == 0||k==0)\n                    L[i][j][k] = 0;\n                else if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1])\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                else\n                    L[i][j][k] = std::max(std::max(L[i-1][j][k], L[i][j-1][k]),L[i][j][k-1]);\n            }\n        }\n    }\n    return L[m][n][o];",
    "    int m = X.length();\n    int n = Y.length();\n    int o = Z.length();\n    int L[m+1][n+1][o+1];\n    for (int i=0; i<=m; i++) {\n        for (int j=0; j<=n; j++) {\n            for (int k=0; k<=o; k++) {\n                if (i == 0 || j == 0||k==0)\n                    L[i][j][k] = 0;\n                else if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1])\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                else\n                    L[i][j][k] = std::max(std::max(L[i-1][j][k], L[i][j-1][k]),L[i][j][k-1]);\n            }\n        }\n    }\n    return L[m][n][o];",
    "    int m = X.length();\n    int n = Y.length();\n    int o = Z.length();\n    int L[m+1][n+1][o+1];\n    for(int i=0;i<=m;i++) {\n        for(int j=0;j<=n;j++) {\n            for(int k=0;k<=o;k++) {\n                if(i==0 || j==0 || k==0) {\n                    L[i][j][k] = 0;\n                } else if(X[i-1] == Y[j-1] && X[i-1] == Z[k-1]) {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                } else {\n                    L[i][j][k] = std::max(std::max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];",
    "    int m = X.length();\n    int n = Y.length();\n    int o = Z.length();\n    int L[m+1][n+1][o+1];\n    for(int i = 0; i <= m; i++) {\n        for(int j = 0; j <= n; j++) {\n            for(int k = 0; k <= o; k++) {\n                if(i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if(X[i-1] == Y[j-1] && X[i-1] == Z[k-1]) {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                } else {\n                    L[i][j][k] = std::max(std::max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];",
    "    int m = X.length();\n    int n = Y.length();\n    int o = Z.length();\n    int L[m+1][n+1][o+1];\n    for(int i=0; i<=m; i++) {\n        for(int j=0; j<=n; j++) {\n            for(int k=0; k<=o; k++) {\n                if(i==0 || j==0 || k==0) {\n                    L[i][j][k] = 0;\n                } else if(X[i-1] == Y[j-1] && X[i-1] == Z[k-1]) {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                } else {\n                    L[i][j][k] = std::max(std::max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];",
    "    int m = X.length();\n    int n = Y.length();\n    int o = Z.length();\n    int L[m+1][n+1][o+1];\n    for(int i = 0; i <= m; i++) {\n        for(int j = 0; j <= n; j++) {\n            for(int k = 0; k <= o; k++) {\n                if(i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if(X[i-1] == Y[j-1] && X[i-1] == Z[k-1]) {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                } else {\n                    L[i][j][k] = std::max(std::max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];",
    "    int m = X.length();\n    int n = Y.length();\n    int o = Z.length();\n    int L[m+1][n+1][o+1];\n    for(int i=0; i<=m; i++) {\n        for(int j=0; j<=n; j++) {\n            for(int k=0; k<=o; k++) {\n                if(i==0 || j==0 || k==0) {\n                    L[i][j][k] = 0;\n                } else if(X[i-1] == Y[j-1] && X[i-1] == Z[k-1]) {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                } else {\n                    L[i][j][k] = std::max(std::max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];",
    "    int m = X.length();\n    int n = Y.length();\n    int o = Z.length();\n    int L[m+1][n+1][o+1];\n    for(int i = 0; i <= m; i++) {\n        for(int j = 0; j <= n; j++) {\n            for(int k = 0; k <= o; k++) {\n                if(i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if(X[i-1] == Y[j-1] && X[i-1] == Z[k-1]) {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                } else {\n                    L[i][j][k] = std::max(std::max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];",
    "    int m = X.length();\n    int n = Y.length();\n    int o = Z.length();\n    int L[m+1][n+1][o+1];\n    for(int i = 0; i <= m; i++) {\n        for(int j = 0; j <= n; j++) {\n            for(int k = 0; k <= o; k++) {\n                if(i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if(X[i-1] == Y[j-1] && X[i-1] == Z[k-1]) {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                } else {\n                    L[i][j][k] = std::max(std::max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];",
    "    int m = X.length();\n    int n = Y.length();\n    int o = Z.length();\n    int L[m+1][n+1][o+1];\n    for(int i = 0; i <= m; i++) {\n        for(int j = 0; j <= n; j++) {\n            for(int k = 0; k <= o; k++) {\n                if(i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if(X[i-1] == Y[j-1] && X[i-1] == Z[k-1]) {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                } else {\n                    L[i][j][k] = std::max(std::max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];",
    "    int m = X.length();\n    int n = Y.length();\n    int o = Z.length();\n    int L[m+1][n+1][o+1];\n    for(int i = 0; i <= m; i++) {\n        for(int j = 0; j <= n; j++) {\n            for(int k = 0; k <= o; k++) {\n                if(i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if(X[i-1] == Y[j-1] && X[i-1] == Z[k-1]) {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                } else {\n                    L[i][j][k] = std::max(L[i-1][j][k], std::max(L[i][j-1][k], L[i][j][k-1]));\n                }\n            }\n        }\n    }\n    return L[m][n][o];",
    "    int m = X.length(), n = Y.length(), o = Z.length();\n    int L[m+1][n+1][o+1];\n    for(int i = 0; i <= m; i++) {\n        for(int j = 0; j <= n; j++) {\n            for(int k = 0; k <= o; k++) {\n                if(i == 0 || j == 0 || k == 0)\n                    L[i][j][k] = 0;\n                else if(X[i-1] == Y[j-1] && X[i-1] == Z[k-1])\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                else\n                    L[i][j][k] = std::max(std::max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n            }\n        }\n    }\n    return L[m][n][o];",
    "    int m = X.size();\n    int n = Y.size();\n    int o = Z.size();\n    int L[m+1][n+1][o+1];\n    for(int i=0; i<=m; i++) {\n        for(int j=0; j<=n; j++) {\n            for(int k=0; k<=o; k++) {\n                if(i==0 || j==0 || k==0) {\n                    L[i][j][k] = 0;\n                } else if(X[i-1] == Y[j-1] && X[i-1] == Z[k-1]) {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                } else {\n                    L[i][j][k] = std::max(std::max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];",
    "    int m = X.length();\n    int n = Y.length();\n    int o = Z.length();\n    int L[m+1][n+1][o+1];\n    for(int i=0; i<=m; i++) {\n        for(int j=0; j<=n; j++) {\n            for(int k=0; k<=o; k++) {\n                if(i==0 || j==0 || k==0) {\n                    L[i][j][k] = 0;\n                }\n                else if(X[i-1] == Y[j-1] && X[i-1] == Z[k-1]) {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                }\n                else {\n                    L[i][j][k] = std::max(std::max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];",
    "    int m = X.length(), n = Y.length(), o = Z.length();\n    int L[m+1][n+1][o+1];\n    for(int i = 0; i <= m; i++) {\n        for(int j = 0; j <= n; j++) {\n            for(int k = 0; k <= o; k++) {\n                if(i == 0 || j == 0 || k == 0)\n                    L[i][j][k] = 0;\n                else if(X[i-1] == Y[j-1] && X[i-1] == Z[k-1])\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                else\n                    L[i][j][k] = std::max(std::max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n            }\n        }\n    }\n    return L[m][n][o];",
    "    int m = X.length();\n    int n = Y.length();\n    int o = Z.length();\n    int L[m+1][n+1][o+1];\n    for(int i=0; i<=m; i++) {\n        for(int j=0; j<=n; j++) {\n            for(int k=0; k<=o; k++) {\n                if(i==0 || j==0 || k==0) {\n                    L[i][j][k] = 0;\n                } else if(X[i-1] == Y[j-1] && X[i-1] == Z[k-1]) {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                } else {\n                    L[i][j][k] = std::max(std::max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];",
    "    int m = X.length();\n    int n = Y.length();\n    int o = Z.length();\n    int L[m+1][n+1][o+1];\n    for(int i = 0; i <= m; i++) {\n        for(int j = 0; j <= n; j++) {\n            for(int k = 0; k <= o; k++) {\n                if(i == 0 || j == 0 || k == 0) {\n                    L[i][j][k] = 0;\n                } else if(X[i-1] == Y[j-1] && X[i-1] == Z[k-1]) {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                } else {\n                    L[i][j][k] = std::max(std::max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];"
  ]
}