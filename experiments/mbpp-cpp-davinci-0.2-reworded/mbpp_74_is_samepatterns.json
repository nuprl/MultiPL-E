{
  "name": "mbpp_74_is_samepatterns",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether it follows the sequence given in the patterns vector.\nbool is_samepatterns(std::vector<std::string> colors, std::vector<std::string> patterns) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_74_is_samepatterns.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = is_samepatterns;\n    assert(candidate((std::vector<std::string>({(std::string)\"red\", (std::string)\"green\", (std::string)\"green\"})), (std::vector<std::string>({(std::string)\"a\", (std::string)\"b\", (std::string)\"b\"}))) == (true));\n    assert(candidate((std::vector<std::string>({(std::string)\"red\", (std::string)\"green\", (std::string)\"greenn\"})), (std::vector<std::string>({(std::string)\"a\", (std::string)\"b\", (std::string)\"b\"}))) == (false));\n    assert(candidate((std::vector<std::string>({(std::string)\"red\", (std::string)\"green\", (std::string)\"greenn\"})), (std::vector<std::string>({(std::string)\"a\", (std::string)\"b\"}))) == (false));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    int i,j;\n    for(i=0;i<colors.size();i++)\n    {\n        for(j=0;j<patterns.size();j++)\n        {\n            if(colors[i]==patterns[j])\n            {\n                break;\n            }\n        }\n        if(j==patterns.size())\n        {\n            return false;\n        }\n    }\n    return true;",
    "    std::map<std::string, std::string> m;\n    for(int i=0; i<colors.size(); i++) {\n        if(m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        } else {\n            if(m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    int i = 0;\n    int j = 0;\n    while(i < colors.size() && j < patterns.size()) {\n        if(colors[i] == patterns[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if(j == patterns.size()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::map<std::string, std::string> m;\n    for(int i=0;i<colors.size();i++)\n    {\n        if(m.find(colors[i])==m.end())\n        {\n            m[colors[i]]=patterns[i];\n        }\n        else\n        {\n            if(m[colors[i]]!=patterns[i])\n            {\n                return false;\n            }\n        }\n    }\n    return true;",
    "\t// Write your code here\n\tstd::map<std::string, std::string> m;\n\tfor (int i = 0; i < colors.size(); i++) {\n\t\tif (m.find(colors[i]) == m.end()) {\n\t\t\tm[colors[i]] = patterns[i];\n\t\t}\n\t\telse {\n\t\t\tif (m[colors[i]] != patterns[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;",
    "    int i = 0;\n    for(auto x : patterns) {\n        if(x == \"red\") {\n            if(colors[i] != \"red\")\n                return false;\n        }\n        else if(x == \"green\") {\n            if(colors[i] != \"green\")\n                return false;\n        }\n        else if(x == \"blue\") {\n            if(colors[i] != \"blue\")\n                return false;\n        }\n        else if(x == \"yellow\") {\n            if(colors[i] != \"yellow\")\n                return false;\n        }\n        else if(x == \"orange\") {\n            if(colors[i] != \"orange\")\n                return false;\n        }\n        else if(x == \"white\") {\n            if(colors[i] != \"white\")\n                return false;\n        }\n        else if(x == \"violet\") {\n            if(colors[i] != \"violet\")\n                return false;\n        }\n        else if(x == \"indigo\") {\n            if(colors[i] != \"indigo\")\n                return false;\n        }\n        else if(x == \"black\") {\n            if(colors[i] != \"black\")\n                return false;\n        }\n        else if(x == \"brown\") {\n            if(colors[i] != \"brown\")\n                return false;\n        }\n        i++;\n    }\n    return true;",
    "\tstd::vector<std::string>::iterator it;\n\tstd::vector<std::string>::iterator it1;\n\tfor (it = colors.begin(), it1 = patterns.begin(); it != colors.end(); it++, it1++) {\n\t\tif (*it != *it1) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;",
    "    std::map<std::string, std::string> m;\n    for(int i = 0; i < colors.size(); i++) {\n        if(m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        } else {\n            if(m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    std::vector<std::string>::iterator itr1 = colors.begin();\n    std::vector<std::string>::iterator itr2 = patterns.begin();\n    while(itr1 != colors.end() && itr2 != patterns.end()) {\n        if(*itr1 == *itr2) {\n            itr1++;\n            itr2++;\n        }\n        else {\n            itr1++;\n        }\n    }\n    if(itr2 == patterns.end()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::map<std::string, std::string> m;\n    for(int i=0;i<colors.size();i++){\n        if(m.find(colors[i])==m.end()){\n            m[colors[i]]=patterns[i];\n        }\n        else{\n            if(m[colors[i]]!=patterns[i]){\n                return false;\n            }\n        }\n    }\n    return true;",
    "    int i = 0, j = 0;\n    while(i < colors.size() && j < patterns.size()) {\n        if(colors[i] == patterns[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if(j == patterns.size()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::string s = \"\";\n    for(int i = 0; i < colors.size(); i++) {\n        s += colors[i];\n    }\n    std::string t = \"\";\n    for(int i = 0; i < patterns.size(); i++) {\n        t += patterns[i];\n    }\n    if(s.find(t) != std::string::npos) {\n        return true;\n    }\n    return false;",
    "\t// Write your code here\n\tstd::map<std::string, std::string> m;\n\tfor (int i = 0; i < patterns.size(); i++) {\n\t\tif (m.find(patterns[i]) == m.end()) {\n\t\t\tm[patterns[i]] = colors[i];\n\t\t}\n\t\telse {\n\t\t\tif (m[patterns[i]] != colors[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;",
    "    std::map<std::string, std::string> m;\n    for (int i = 0; i < patterns.size(); i++) {\n        if (m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        } else {\n            if (m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    // Write your code here\n    int i=0,j=0;\n    while(i<colors.size() && j<patterns.size()){\n        if(colors[i]==patterns[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j==patterns.size()){\n        return true;\n    }\n    else{\n        return false;\n    }",
    "    int i=0,j=0;\n    while(i<colors.size() && j<patterns.size())\n    {\n        if(colors[i]==patterns[j])\n        {\n            i++;\n            j++;\n        }\n        else\n        {\n            i++;\n        }\n    }\n    if(j==patterns.size())\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }",
    "    int i=0;\n    for(auto x:colors){\n        if(x==patterns[i]){\n            i++;\n        }\n        if(i==patterns.size()){\n            return true;\n        }\n    }\n    return false;",
    "    std::vector<std::string>::iterator it;\n    std::vector<std::string>::iterator it1;\n    it = colors.begin();\n    it1 = patterns.begin();\n    while(it != colors.end() && it1 != patterns.end()) {\n        if(*it == *it1) {\n            it++;\n            it1++;\n        }\n        else {\n            return false;\n        }\n    }\n    return true;",
    "\t// Write your code here\n\tstd::map<std::string, std::string> m;\n\tfor (int i = 0; i < patterns.size(); i++) {\n\t\tif (m.find(patterns[i]) == m.end()) {\n\t\t\tm[patterns[i]] = colors[i];\n\t\t}\n\t\telse {\n\t\t\tif (m[patterns[i]] != colors[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;",
    "    int i=0,j=0;\n    while(i<colors.size() && j<patterns.size())\n    {\n        if(colors[i]==patterns[j])\n        {\n            i++;\n            j++;\n        }\n        else\n        {\n            i++;\n        }\n    }\n    if(j==patterns.size())\n        return true;\n    else\n        return false;"
  ]
}