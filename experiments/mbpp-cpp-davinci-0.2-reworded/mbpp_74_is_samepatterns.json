{
  "name": "mbpp_74_is_samepatterns",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether it follows the sequence given in the patterns vector.\nbool is_samepatterns(std::vector<std::string> colors, std::vector<std::string> patterns) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_74_is_samepatterns.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = is_samepatterns;\n    assert(candidate((std::vector<std::string>({(std::string)\"red\", (std::string)\"green\", (std::string)\"green\"})), (std::vector<std::string>({(std::string)\"a\", (std::string)\"b\", (std::string)\"b\"}))) == (true));\n    assert(candidate((std::vector<std::string>({(std::string)\"red\", (std::string)\"green\", (std::string)\"greenn\"})), (std::vector<std::string>({(std::string)\"a\", (std::string)\"b\", (std::string)\"b\"}))) == (false));\n    assert(candidate((std::vector<std::string>({(std::string)\"red\", (std::string)\"green\", (std::string)\"greenn\"})), (std::vector<std::string>({(std::string)\"a\", (std::string)\"b\"}))) == (false));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    int i,j;\n    for(i=0;i<colors.size();i++)\n    {\n        for(j=0;j<patterns.size();j++)\n        {\n            if(colors[i]==patterns[j])\n            {\n                break;\n            }\n        }\n        if(j==patterns.size())\n        {\n            return false;\n        }\n    }\n    return true;",
    "    std::map<std::string, std::string> m;\n    for(int i=0; i<colors.size(); i++) {\n        if(m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        } else {\n            if(m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    int i = 0;\n    int j = 0;\n    while(i < colors.size() && j < patterns.size()) {\n        if(colors[i] == patterns[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if(j == patterns.size()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::map<std::string, std::string> m;\n    for(int i=0;i<colors.size();i++)\n    {\n        if(m.find(colors[i])==m.end())\n        {\n            m[colors[i]]=patterns[i];\n        }\n        else\n        {\n            if(m[colors[i]]!=patterns[i])\n            {\n                return false;\n            }\n        }\n    }\n    return true;",
    "\t// Write your code here\n\tstd::map<std::string, std::string> m;\n\tfor (int i = 0; i < colors.size(); i++) {\n\t\tif (m.find(colors[i]) == m.end()) {\n\t\t\tm[colors[i]] = patterns[i];\n\t\t}\n\t\telse {\n\t\t\tif (m[colors[i]] != patterns[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;",
    "    int i = 0;\n    for(auto x : patterns) {\n        if(x == \"red\") {\n            if(colors[i] != \"red\")\n                return false;\n        }\n        else if(x == \"green\") {\n            if(colors[i] != \"green\")\n                return false;\n        }\n        else if(x == \"blue\") {\n            if(colors[i] != \"blue\")\n                return false;\n        }\n        else if(x == \"yellow\") {\n            if(colors[i] != \"yellow\")\n                return false;\n        }\n        else if(x == \"orange\") {\n            if(colors[i] != \"orange\")\n                return false;\n        }\n        else if(x == \"white\") {\n            if(colors[i] != \"white\")\n                return false;\n        }\n        else if(x == \"violet\") {\n            if(colors[i] != \"violet\")\n                return false;\n        }\n        else if(x == \"indigo\") {\n            if(colors[i] != \"indigo\")\n                return false;\n        }\n        else if(x == \"black\") {\n            if(colors[i] != \"black\")\n                return false;\n        }\n        else if(x == \"brown\") {\n            if(colors[i] != \"brown\")\n                return false;\n        }\n        i++;\n    }\n    return true;",
    "\tstd::vector<std::string>::iterator it;\n\tstd::vector<std::string>::iterator it1;\n\tfor (it = colors.begin(), it1 = patterns.begin(); it != colors.end(); it++, it1++) {\n\t\tif (*it != *it1) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;",
    "    std::map<std::string, std::string> m;\n    for(int i = 0; i < colors.size(); i++) {\n        if(m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        } else {\n            if(m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    std::vector<std::string>::iterator itr1 = colors.begin();\n    std::vector<std::string>::iterator itr2 = patterns.begin();\n    while(itr1 != colors.end() && itr2 != patterns.end()) {\n        if(*itr1 == *itr2) {\n            itr1++;\n            itr2++;\n        }\n        else {\n            itr1++;\n        }\n    }\n    if(itr2 == patterns.end()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::map<std::string, std::string> m;\n    for(int i=0;i<colors.size();i++){\n        if(m.find(colors[i])==m.end()){\n            m[colors[i]]=patterns[i];\n        }\n        else{\n            if(m[colors[i]]!=patterns[i]){\n                return false;\n            }\n        }\n    }\n    return true;",
    "    int i = 0, j = 0;\n    while(i < colors.size() && j < patterns.size()) {\n        if(colors[i] == patterns[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if(j == patterns.size()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::string s = \"\";\n    for(int i = 0; i < colors.size(); i++) {\n        s += colors[i];\n    }\n    std::string t = \"\";\n    for(int i = 0; i < patterns.size(); i++) {\n        t += patterns[i];\n    }\n    if(s.find(t) != std::string::npos) {\n        return true;\n    }\n    return false;",
    "\t// Write your code here\n\tstd::map<std::string, std::string> m;\n\tfor (int i = 0; i < patterns.size(); i++) {\n\t\tif (m.find(patterns[i]) == m.end()) {\n\t\t\tm[patterns[i]] = colors[i];\n\t\t}\n\t\telse {\n\t\t\tif (m[patterns[i]] != colors[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;",
    "    std::map<std::string, std::string> m;\n    for (int i = 0; i < patterns.size(); i++) {\n        if (m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        } else {\n            if (m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    // Write your code here\n    int i=0,j=0;\n    while(i<colors.size() && j<patterns.size()){\n        if(colors[i]==patterns[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j==patterns.size()){\n        return true;\n    }\n    else{\n        return false;\n    }",
    "    int i=0,j=0;\n    while(i<colors.size() && j<patterns.size())\n    {\n        if(colors[i]==patterns[j])\n        {\n            i++;\n            j++;\n        }\n        else\n        {\n            i++;\n        }\n    }\n    if(j==patterns.size())\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }",
    "    int i=0;\n    for(auto x:colors){\n        if(x==patterns[i]){\n            i++;\n        }\n        if(i==patterns.size()){\n            return true;\n        }\n    }\n    return false;",
    "    std::vector<std::string>::iterator it;\n    std::vector<std::string>::iterator it1;\n    it = colors.begin();\n    it1 = patterns.begin();\n    while(it != colors.end() && it1 != patterns.end()) {\n        if(*it == *it1) {\n            it++;\n            it1++;\n        }\n        else {\n            return false;\n        }\n    }\n    return true;",
    "\t// Write your code here\n\tstd::map<std::string, std::string> m;\n\tfor (int i = 0; i < patterns.size(); i++) {\n\t\tif (m.find(patterns[i]) == m.end()) {\n\t\t\tm[patterns[i]] = colors[i];\n\t\t}\n\t\telse {\n\t\t\tif (m[patterns[i]] != colors[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;",
    "    int i=0,j=0;\n    while(i<colors.size() && j<patterns.size())\n    {\n        if(colors[i]==patterns[j])\n        {\n            i++;\n            j++;\n        }\n        else\n        {\n            i++;\n        }\n    }\n    if(j==patterns.size())\n        return true;\n    else\n        return false;",
    "    // Write your code here\n    std::map<std::string, std::string> m;\n    for(int i=0;i<colors.size();i++)\n    {\n        if(m.find(colors[i])==m.end())\n        {\n            m[colors[i]]=patterns[i];\n        }\n        else\n        {\n            if(m[colors[i]]!=patterns[i])\n            {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    std::string s = \"\";\n    for(int i = 0; i < colors.size(); i++) {\n        s += colors[i];\n    }\n    std::string p = \"\";\n    for(int i = 0; i < patterns.size(); i++) {\n        p += patterns[i];\n    }\n    if(s.find(p) != std::string::npos) {\n        return true;\n    }\n    return false;",
    "\t// Write your code here\n\tstd::map<std::string, std::string> m;\n\tfor (int i = 0; i < colors.size(); i++) {\n\t\tif (m.find(colors[i]) == m.end()) {\n\t\t\tm[colors[i]] = patterns[i];\n\t\t}\n\t\telse {\n\t\t\tif (m[colors[i]] != patterns[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;",
    "    // Write your code here\n    int i=0,j=0;\n    while(i<colors.size() && j<patterns.size()){\n        if(colors[i]==patterns[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j==patterns.size())\n        return true;\n    else\n        return false;",
    "    std::map<std::string, std::string> m;\n    for (int i = 0; i < patterns.size(); i++) {\n        if (m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        } else {\n            if (m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    int i = 0;\n    int j = 0;\n    while(i < colors.size() && j < patterns.size()) {\n        if(colors[i] == patterns[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if(j == patterns.size()) {\n        return true;\n    }\n    return false;",
    "    // Write your code here\n    std::map<std::string, std::string> m;\n    for(int i=0;i<colors.size();i++){\n        if(m.find(colors[i])==m.end()){\n            m[colors[i]]=patterns[i];\n        }\n        else{\n            if(m[colors[i]]!=patterns[i]){\n                return false;\n            }\n        }\n    }\n    return true;",
    "    // Write your code here\n    std::vector<std::string>::iterator it;\n    std::vector<std::string>::iterator it1;\n    int i=0;\n    for(it=patterns.begin();it!=patterns.end();it++){\n        if(*it==\"red\"){\n            for(it1=colors.begin();it1!=colors.end();it1++){\n                if(*it1==\"red\"){\n                    colors.erase(it1);\n                    break;\n                }\n            }\n        }\n        else if(*it==\"green\"){\n            for(it1=colors.begin();it1!=colors.end();it1++){\n                if(*it1==\"green\"){\n                    colors.erase(it1);\n                    break;\n                }\n            }\n        }\n        else if(*it==\"blue\"){\n            for(it1=colors.begin();it1!=colors.end();it1++){\n                if(*it1==\"blue\"){\n                    colors.erase(it1);\n                    break;\n                }\n            }\n        }\n        else if(*it==\"yellow\"){\n            for(it1=colors.begin();it1!=colors.end();it1++){\n                if(*it1==\"yellow\"){\n                    colors.erase(it1);\n                    break;\n                }\n            }\n        }\n        else if(*it==\"orange\"){\n            for(it1=colors.begin();it1!=colors.end();it1++){\n                if(*it1==\"orange\"){\n                    colors.erase(it1);\n                    break;\n                }\n            }\n        }\n        else if(*it==\"white\"){\n            for(it1=colors.begin();it1!=colors.end();it1++){\n                if(*it1==\"white\"){\n                    colors.erase(it1);\n                    break;\n                }\n            }\n        }\n        else if(*it==\"black\"){\n            for(it1=colors.begin();it1!=col",
    "    int i=0;\n    int j=0;\n    while(i<colors.size() && j<patterns.size())\n    {\n        if(colors[i]==patterns[j])\n        {\n            i++;\n            j++;\n        }\n        else\n        {\n            i++;\n        }\n    }\n    if(j==patterns.size())\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }",
    "    std::map<std::string, std::string> m;\n    for(int i=0;i<colors.size();i++){\n        if(m.find(colors[i])==m.end()){\n            m[colors[i]]=patterns[i];\n        }\n        else{\n            if(m[colors[i]]!=patterns[i]){\n                return false;\n            }\n        }\n    }\n    return true;",
    "    // Write your code here\n    std::map<std::string, std::string> m;\n    for(int i=0;i<colors.size();i++){\n        m[colors[i]] = patterns[i];\n    }\n    for(int i=0;i<colors.size();i++){\n        if(m[colors[i]] != patterns[i]){\n            return false;\n        }\n    }\n    return true;",
    "\t// Write your code here\n\tint i = 0;\n\tint j = 0;\n\tint n = colors.size();\n\tint m = patterns.size();\n\twhile (i < n && j < m) {\n\t\tif (colors[i] == patterns[j]) {\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse {\n\t\t\ti++;\n\t\t}\n\t}\n\tif (j == m) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}",
    "    int i,j,k,l;\n    for(i=0;i<colors.size();i++)\n    {\n        for(j=0;j<patterns.size();j++)\n        {\n            if(colors[i]==patterns[j])\n            {\n                for(k=i+1;k<colors.size();k++)\n                {\n                    for(l=j+1;l<patterns.size();l++)\n                    {\n                        if(colors[k]==patterns[l])\n                        {\n                            return true;\n                        }\n                        else\n                        {\n                            return false;\n                        }\n                    }\n                }\n            }\n        }\n    }",
    "\t// Write your code here\n\tstd::map<std::string, std::string> m;\n\tfor (int i = 0; i < patterns.size(); i++) {\n\t\tif (m.find(colors[i]) == m.end()) {\n\t\t\tm[colors[i]] = patterns[i];\n\t\t}\n\t\telse {\n\t\t\tif (m[colors[i]] != patterns[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;",
    "    std::vector<std::string>::iterator it = patterns.begin();\n    for(std::vector<std::string>::iterator it1 = colors.begin(); it1 != colors.end(); it1++) {\n        if(*it1 == *it) {\n            it++;\n        }\n        if(it == patterns.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    // Write your code here\n    int n = colors.size();\n    int m = patterns.size();\n    int i = 0, j = 0;\n    while(i < n && j < m){\n        if(colors[i] == patterns[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j == m){\n        return true;\n    }\n    else{\n        return false;\n    }",
    "    // Write your code here\n    int n=colors.size();\n    int m=patterns.size();\n    if(n!=m)\n        return false;\n    std::map<std::string,std::string> mp;\n    for(int i=0;i<n;i++)\n    {\n        if(mp.find(colors[i])==mp.end())\n        {\n            mp[colors[i]]=patterns[i];\n        }\n        else\n        {\n            if(mp[colors[i]]!=patterns[i])\n                return false;\n        }\n    }\n    return true;",
    "    std::vector<std::string>::iterator itr = patterns.begin();\n    for(std::vector<std::string>::iterator it = colors.begin(); it != colors.end(); it++) {\n        if(*it == *itr) {\n            itr++;\n        }\n        if(itr == patterns.end()) {\n            return true;\n        }\n    }\n    return false;",
    "\tstd::map<std::string, std::string> m;\n\tfor (int i = 0; i < colors.size(); i++) {\n\t\tif (m.count(colors[i]) == 0) {\n\t\t\tm[colors[i]] = patterns[i];\n\t\t}\n\t\telse {\n\t\t\tif (m[colors[i]] != patterns[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;",
    "    // Write your code here\n    int i=0,j=0;\n    while(i<colors.size() && j<patterns.size()){\n        if(colors[i]==patterns[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j==patterns.size()){\n        return true;\n    }\n    else{\n        return false;\n    }",
    "    std::map<std::string, std::string> m;\n    for(int i=0;i<colors.size();i++){\n        if(m.find(colors[i])==m.end()){\n            m[colors[i]]=patterns[i];\n        }\n        else if(m[colors[i]]!=patterns[i]){\n            return false;\n        }\n    }\n    return true;",
    "    std::vector<std::string>::iterator it = patterns.begin();\n    std::vector<std::string>::iterator it1 = colors.begin();\n    while(it != patterns.end() && it1 != colors.end())\n    {\n        if(*it == *it1)\n        {\n            it++;\n            it1++;\n        }\n        else\n        {\n            it1++;\n        }\n    }\n    if(it == patterns.end())\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }",
    "    // Write your code here\n    int n = colors.size();\n    int m = patterns.size();\n    if(n!=m)\n        return false;\n    std::map<std::string,std::string> mp;\n    for(int i=0;i<n;i++)\n    {\n        if(mp.find(colors[i])==mp.end())\n        {\n            mp[colors[i]] = patterns[i];\n        }\n        else\n        {\n            if(mp[colors[i]]!=patterns[i])\n                return false;\n        }\n    }\n    return true;",
    "    int i = 0;\n    int j = 0;\n    while(i < colors.size() && j < patterns.size()) {\n        if(colors[i] == patterns[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if(j == patterns.size()) {\n        return true;\n    }\n    return false;",
    "    int i=0;\n    for(auto x:patterns)\n    {\n        if(x==\"odd\")\n        {\n            if(i%2==0)\n            {\n                return false;\n            }\n        }\n        else if(x==\"even\")\n        {\n            if(i%2!=0)\n            {\n                return false;\n            }\n        }\n        else if(x==\"red\")\n        {\n            if(colors[i]!=\"red\")\n            {\n                return false;\n            }\n        }\n        else if(x==\"blue\")\n        {\n            if(colors[i]!=\"blue\")\n            {\n                return false;\n            }\n        }\n        else if(x==\"green\")\n        {\n            if(colors[i]!=\"green\")\n            {\n                return false;\n            }\n        }\n        else if(x==\"yellow\")\n        {\n            if(colors[i]!=\"yellow\")\n            {\n                return false;\n            }\n        }\n        else if(x==\"orange\")\n        {\n            if(colors[i]!=\"orange\")\n            {\n                return false;\n            }\n        }\n        else if(x==\"white\")\n        {\n            if(colors[i]!=\"white\")\n            {\n                return false;\n            }\n        }\n        else if(x==\"black\")\n        {\n            if(colors[i]!=\"black\")\n            {\n                return false;\n            }\n        }\n        else if(x==\"violet\")\n        {\n            if(colors[i]!=\"violet\")\n            {\n                return false;\n            }\n        }\n        else if(x==\"indigo\")\n        {\n            if(colors[i]!=\"indigo\")\n            {\n                return false;\n            }\n        }\n        else if(x==\"brown\")\n        {\n            if(colors[i]!=\"brown\")\n            {\n                return false;\n            }\n        }\n        else if(x==\"grey\")\n        {\n",
    "    std::map<std::string, std::string> m;\n    for(int i = 0; i < colors.size(); i++) {\n        if(m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        }\n        else {\n            if(m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    // Write your code here\n    std::map<std::string, std::string> m;\n    for(int i=0;i<colors.size();i++)\n    {\n        if(m.find(colors[i])==m.end())\n        {\n            m[colors[i]]=patterns[i];\n        }\n        else\n        {\n            if(m[colors[i]]!=patterns[i])\n            {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    std::map<std::string, std::string> m;\n    for(int i = 0; i < colors.size(); i++) {\n        if(m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        } else {\n            if(m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    int i=0;\n    for(auto x:patterns){\n        if(x==\"even\"){\n            if(colors[i]!=colors[i+1]){\n                return false;\n            }\n            i+=2;\n        }\n        else if(x==\"odd\"){\n            if(colors[i]==colors[i+1]){\n                return false;\n            }\n            i+=2;\n        }\n    }\n    return true;",
    "    std::map<std::string, std::string> m;\n    for(int i = 0; i < colors.size(); i++) {\n        if(m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        }\n        else {\n            if(m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    // Write your code here\n    int n = colors.size();\n    int m = patterns.size();\n    int i = 0;\n    int j = 0;\n    while(i < n && j < m) {\n        if(colors[i] == patterns[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if(j == m) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    int i=0,j=0;\n    while(i<colors.size() && j<patterns.size())\n    {\n        if(colors[i]==patterns[j])\n        {\n            i++;\n            j++;\n        }\n        else\n        {\n            i++;\n        }\n    }\n    if(j==patterns.size())\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }",
    "    std::map<std::string, std::string> m;\n    for(int i=0;i<colors.size();i++) {\n        if(m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        } else {\n            if(m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    std::vector<std::string>::iterator it;\n    std::vector<std::string>::iterator it2;\n    int i = 0;\n    for(it = colors.begin(); it != colors.end(); it++) {\n        if(*it == patterns[i]) {\n            i++;\n        }\n        else {\n            return false;\n        }\n    }\n    return true;",
    "    // Write your code here\n    std::map<std::string, std::string> map;\n    for(int i=0; i<colors.size(); i++){\n        map[colors[i]] = patterns[i];\n    }\n    for(int i=0; i<colors.size(); i++){\n        if(map[colors[i]] != patterns[i]){\n            return false;\n        }\n    }\n    return true;",
    "    // Write your code here\n    std::map<std::string, std::string> m;\n    for(int i=0;i<colors.size();i++){\n        if(m.find(colors[i])==m.end()){\n            m[colors[i]]=patterns[i];\n        }\n        else{\n            if(m[colors[i]]!=patterns[i]){\n                return false;\n            }\n        }\n    }\n    return true;",
    "\t// Write your code here\n\tint n = colors.size();\n\tint m = patterns.size();\n\tif (n != m)\n\t\treturn false;\n\tstd::map<std::string, std::string> mp;\n\tfor (int i = 0; i < n; i++) {\n\t\tif (mp.count(colors[i]) == 0)\n\t\t\tmp[colors[i]] = patterns[i];\n\t\telse {\n\t\t\tif (mp[colors[i]] != patterns[i])\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;",
    "    // Write your code here\n    std::map<std::string, std::string> m;\n    for(int i = 0; i < colors.size(); i++)\n    {\n        if(m.find(colors[i]) == m.end())\n        {\n            m[colors[i]] = patterns[i];\n        }\n        else\n        {\n            if(m[colors[i]] != patterns[i])\n            {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    int i=0;\n    int j=0;\n    while(i<colors.size() && j<patterns.size()){\n        if(colors[i]==patterns[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j==patterns.size()){\n        return true;\n    }\n    else{\n        return false;\n    }",
    "    int i=0,j=0;\n    while(i<colors.size() && j<patterns.size()){\n        if(colors[i]==patterns[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j==patterns.size()){\n        return true;\n    }\n    return false;",
    "    std::vector<std::string>::iterator it;\n    std::vector<std::string>::iterator it2;\n    std::vector<std::string>::iterator it3;\n    std::vector<std::string>::iterator it4;\n    std::vector<std::string>::iterator it5;\n    std::vector<std::string>::iterator it6;\n    std::vector<std::string>::iterator it7;\n    std::vector<std::string>::iterator it8;\n    std::vector<std::string>::iterator it9;\n    std::vector<std::string>::iterator it10;\n    std::vector<std::string>::iterator it11;\n    std::vector<std::string>::iterator it12;\n    std::vector<std::string>::iterator it13;\n    std::vector<std::string>::iterator it14;\n    std::vector<std::string>::iterator it15;\n    std::vector<std::string>::iterator it16;\n    std::vector<std::string>::iterator it17;\n    std::vector<std::string>::iterator it18;\n    std::vector<std::string>::iterator it19;\n    std::vector<std::string>::iterator it20;\n    std::vector<std::string>::iterator it21;\n    std::vector<std::string>::iterator it22;\n    std::vector<std::string>::iterator it23;\n    std::vector<std::string>::iterator it24;\n    std::vector<std::string>::iterator it25;\n    std::vector<std::string>::iterator it26;\n    std::vector<std::string>::iterator it27;\n    std::vector<std::string>::iterator it28;\n    std::vector<std::string>::iterator it29;\n    std::vector<std::string>::iterator it30;\n    std::vector<std::string>::iterator it31;\n    std::vector<std::string>::iterator it32;\n    std::vector<std::string>::iterator it33;\n    std::vector<std::string>::iterator it34;\n    std",
    "    int i = 0;\n    int j = 0;\n    while (i < colors.size() && j < patterns.size()) {\n        if (colors[i] == patterns[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == patterns.size()) {\n        return true;\n    } else {\n        return false;\n    }",
    "    int n = patterns.size();\n    int m = colors.size();\n    if(n == 0 || m == 0)\n        return false;\n    int i = 0;\n    int j = 0;\n    while(i < n && j < m) {\n        if(patterns[i] == colors[j]) {\n            i++;\n            j++;\n        }\n        else\n            j++;\n    }\n    if(i == n)\n        return true;\n    else\n        return false;",
    "    // Write your code here\n    int n = colors.size();\n    int m = patterns.size();\n    if(n != m)\n        return false;\n    std::map<std::string, std::string> mp;\n    for(int i = 0; i < n; i++) {\n        if(mp.find(colors[i]) == mp.end()) {\n            mp[colors[i]] = patterns[i];\n        }\n        else {\n            if(mp[colors[i]] != patterns[i])\n                return false;\n        }\n    }\n    return true;",
    "    std::vector<std::string>::iterator itr;\n    std::vector<std::string>::iterator itr1;\n    itr = colors.begin();\n    itr1 = patterns.begin();\n    while(itr != colors.end() && itr1 != patterns.end()){\n        if(*itr == *itr1){\n            itr++;\n            itr1++;\n        }\n        else{\n            return false;\n        }\n    }\n    return true;",
    "    // Write your code here\n    int n = colors.size();\n    int m = patterns.size();\n    if(n < m)\n        return false;\n    int i = 0, j = 0;\n    while(i < n && j < m){\n        if(colors[i] == patterns[j]){\n            i++;\n            j++;\n        }\n        else\n            i++;\n    }\n    if(j == m)\n        return true;\n    else\n        return false;",
    "    std::map<std::string, std::string> m;\n    for(int i = 0; i < patterns.size(); i++) {\n        if(m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        }\n        else {\n            if(m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    std::vector<std::string>::iterator itr;\n    std::vector<std::string>::iterator itr1;\n    int i=0;\n    for(itr=colors.begin();itr!=colors.end();itr++)\n    {\n        if(*itr==patterns[i])\n        {\n            i++;\n        }\n    }\n    if(i==patterns.size())\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }",
    "    // Write your code here\n    std::vector<std::string>::iterator itr1 = colors.begin();\n    std::vector<std::string>::iterator itr2 = patterns.begin();\n    while(itr1 != colors.end() && itr2 != patterns.end()){\n        if(*itr1 == *itr2){\n            itr1++;\n            itr2++;\n        }\n        else{\n            itr1++;\n        }\n    }\n    if(itr2 == patterns.end()){\n        return true;\n    }\n    else{\n        return false;\n    }",
    "    int i, j, k;\n    for(i = 0; i < patterns.size(); i++) {\n        if(patterns[i] == \"*\") {\n            continue;\n        }\n        if(patterns[i] != colors[i]) {\n            return false;\n        }\n    }\n    return true;",
    "\t// Write your code here\n\tstd::map<std::string, std::string> m;\n\tfor (int i = 0; i < colors.size(); i++) {\n\t\tif (m.find(colors[i]) == m.end()) {\n\t\t\tm[colors[i]] = patterns[i];\n\t\t}\n\t\telse {\n\t\t\tif (m[colors[i]] != patterns[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;",
    "    // Write your code here\n    int i=0;\n    int j=0;\n    int n=colors.size();\n    int m=patterns.size();\n    while(i<n && j<m){\n        if(colors[i]==patterns[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j==m){\n        return true;\n    }\n    else{\n        return false;\n    }",
    "    // Write your code here\n    int i,j,k;\n    int n=colors.size();\n    int m=patterns.size();\n    int flag=0;\n    for(i=0;i<n;i++)\n    {\n        for(j=0;j<m;j++)\n        {\n            if(colors[i]==patterns[j])\n            {\n                flag=1;\n                break;\n            }\n        }\n        if(flag==0)\n        {\n            return false;\n        }\n        flag=0;\n    }\n    return true;",
    "    int i = 0;\n    int j = 0;\n    while(i < colors.size() && j < patterns.size()) {\n        if(colors[i] == patterns[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if(j == patterns.size()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    // Write your code here\n    int i=0;\n    int j=0;\n    int count=0;\n    for(i=0;i<colors.size();i++)\n    {\n        if(colors[i]==patterns[j])\n        {\n            count++;\n            j++;\n        }\n        else\n        {\n            j=0;\n        }\n    }\n    if(count==patterns.size())\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }",
    "    int i = 0;\n    int j = 0;\n    while(i < colors.size() && j < patterns.size()) {\n        if(colors[i] == patterns[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if(j == patterns.size()) {\n        return true;\n    }\n    return false;",
    "\t// Write your code here\n\tstd::vector<std::string>::iterator itr = patterns.begin();\n\tstd::vector<std::string>::iterator itr1 = colors.begin();\n\tstd::vector<std::string>::iterator itr2 = colors.begin();\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint a = 0;\n\tint b = 0;\n\tint c = 0;\n\tint d = 0;\n\tint e = 0;\n\tint f = 0;\n\tint g = 0;\n\tint h = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\tint aa = 0;\n\tint bb = 0;\n\tint cc = 0;\n\tint dd = 0;\n\tint ee = 0;\n\tint ff = 0;\n\tint gg = 0;\n\tint hh = 0;\n\tint iii = 0;\n\tint jjj = 0;\n\tint kkk = 0;\n\tint lll = 0;\n\tint mmm = 0;\n\tint nnn = 0;\n\tint ooo = 0;\n\tint ppp = 0;\n\t",
    "    std::vector<std::string>::iterator it;\n    std::vector<std::string>::iterator it2;\n    for(it = patterns.begin(), it2 = colors.begin(); it != patterns.end(); it++, it2++) {\n        if(*it == \"*\") {\n            continue;\n        }\n        if(*it != *it2) {\n            return false;\n        }\n    }\n    return true;",
    "    // Write your code here\n    int i=0,j=0;\n    while(i<colors.size() && j<patterns.size()){\n        if(colors[i]==patterns[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j==patterns.size()){\n        return true;\n    }\n    else{\n        return false;\n    }",
    "\t// Write your code here\n\tstd::map<std::string, std::string> m;\n\tfor (int i = 0; i < colors.size(); i++) {\n\t\tm[colors[i]] = patterns[i];\n\t}\n\tfor (int i = 0; i < colors.size(); i++) {\n\t\tif (m[colors[i]] != patterns[i]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;",
    "    std::map<std::string, std::string> m;\n    for (int i = 0; i < patterns.size(); i++) {\n        if (m.find(patterns[i]) == m.end()) {\n            m[patterns[i]] = colors[i];\n        } else {\n            if (m[patterns[i]] != colors[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    int i,j;\n    for(i=0;i<patterns.size();i++)\n    {\n        for(j=0;j<colors.size();j++)\n        {\n            if(patterns[i]==colors[j])\n            {\n                break;\n            }\n        }\n        if(j==colors.size())\n        {\n            return false;\n        }\n    }\n    return true;",
    "    // Write your code here\n    std::map<std::string,std::string> m;\n    for(int i=0;i<colors.size();i++)\n    {\n        if(m.find(colors[i])==m.end())\n        {\n            m[colors[i]]=patterns[i];\n        }\n        else\n        {\n            if(m[colors[i]]!=patterns[i])\n            {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    std::string pattern = \"\";\n    for(int i=0; i<patterns.size(); i++) {\n        pattern += patterns[i];\n    }\n    std::string color = \"\";\n    for(int i=0; i<colors.size(); i++) {\n        color += colors[i];\n    }\n    std::regex r(pattern);\n    return std::regex_match(color, r);",
    "    int i=0;\n    int j=0;\n    while(i<colors.size() && j<patterns.size())\n    {\n        if(colors[i]==patterns[j])\n        {\n            i++;\n            j++;\n        }\n        else\n        {\n            i++;\n        }\n    }\n    if(j==patterns.size())\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }",
    "    int i=0;\n    for(int j=0;j<colors.size();j++){\n        if(colors[j]==patterns[i]){\n            i++;\n        }\n        if(i==patterns.size()){\n            return true;\n        }\n    }\n    return false;",
    "    // Write your code here\n    int i=0;\n    int j=0;\n    int k=0;\n    int l=0;\n    int m=0;\n    int n=0;\n    int p=0;\n    int q=0;\n    int r=0;\n    int s=0;\n    int t=0;\n    int u=0;\n    int v=0;\n    int w=0;\n    int x=0;\n    int y=0;\n    int z=0;\n    int a=0;\n    int b=0;\n    int c=0;\n    int d=0;\n    int e=0;\n    int f=0;\n    int g=0;\n    int h=0;\n    int ii=0;\n    int jj=0;\n    int kk=0;\n    int ll=0;\n    int mm=0;\n    int nn=0;\n    int oo=0;\n    int pp=0;\n    int qq=0;\n    int rr=0;\n    int ss=0;\n    int tt=0;\n    int uu=0;\n    int vv=0;\n    int ww=0;\n    int xx=0;\n    int yy=0;\n    int zz=0;\n    int aa=0;\n    int bb=0;\n    int cc=0;\n    int dd=0;\n    int ee=0;\n    int ff=0;\n    int gg=0;\n    int hh=0;\n    int iii=0;\n    int jjj=0;\n    int kkk=0;\n    int lll=0;\n    int mmm=0;\n    int nnn=0;\n    int ooo=0;\n    int ppp=0;\n    int qqq=0;\n    int rrr=0;\n    int sss=0;\n    int ttt=0;\n    int uuu=0;\n    int vvv=0;\n    int www=0;\n    int xxx=0;\n    int yyy",
    "    int i = 0;\n    int j = 0;\n    while (i < colors.size() && j < patterns.size()) {\n        if (colors[i] == patterns[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == patterns.size()) {\n        return true;\n    }\n    return false;",
    "\t// Write your code here\n\tstd::map<std::string, std::string> m;\n\tfor (int i = 0; i < colors.size(); i++) {\n\t\tm[colors[i]] = patterns[i];\n\t}\n\tfor (int i = 0; i < colors.size(); i++) {\n\t\tif (m[colors[i]] != patterns[i]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;",
    "    // Write your code here\n    std::map<std::string,int> m;\n    for(int i=0;i<colors.size();i++)\n    {\n        if(m.find(colors[i])==m.end())\n        {\n            m[colors[i]]=i;\n        }\n    }\n    std::vector<int> v;\n    for(int i=0;i<patterns.size();i++)\n    {\n        v.push_back(m[patterns[i]]);\n    }\n    for(int i=0;i<v.size()-1;i++)\n    {\n        if(v[i]>v[i+1])\n        {\n            return false;\n        }\n    }\n    return true;",
    "    // Write your code here\n    int n=colors.size();\n    int m=patterns.size();\n    std::map<std::string,std::string> mymap;\n    for(int i=0;i<n;i++)\n    {\n        if(mymap.find(colors[i])==mymap.end())\n        {\n            mymap[colors[i]]=patterns[i];\n        }\n        else\n        {\n            if(mymap[colors[i]]!=patterns[i])\n            {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    int i = 0;\n    for(auto pattern : patterns) {\n        if(pattern == \"even\") {\n            if(i % 2 == 0) {\n                i++;\n            }\n            else {\n                return false;\n            }\n        }\n        else if(pattern == \"odd\") {\n            if(i % 2 != 0) {\n                i++;\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            if(colors[i] == pattern) {\n                i++;\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    // Write your code here\n    int i=0;\n    int j=0;\n    while(i<colors.size() && j<patterns.size()){\n        if(colors[i]==patterns[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j==patterns.size()){\n        return true;\n    }\n    else{\n        return false;\n    }",
    "\t// Write your code here\n\tstd::vector<std::string>::iterator itr1 = colors.begin();\n\tstd::vector<std::string>::iterator itr2 = patterns.begin();\n\twhile (itr1 != colors.end() && itr2 != patterns.end())\n\t{\n\t\tif (*itr1 == *itr2)\n\t\t{\n\t\t\titr1++;\n\t\t\titr2++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\titr1++;\n\t\t}\n\t}\n\tif (itr2 == patterns.end())\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}",
    "    std::map<std::string, std::string> m;\n    for(int i = 0; i < colors.size(); i++) {\n        if(m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        } else {\n            if(m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    // Write your code here\n    std::vector<std::string>::iterator itr;\n    std::vector<std::string>::iterator itr1;\n    for(itr=colors.begin(),itr1=patterns.begin();itr!=colors.end(),itr1!=patterns.end();itr++,itr1++)\n    {\n        if(*itr==*itr1)\n        {\n            continue;\n        }\n        else\n        {\n            return false;\n        }\n    }\n    return true;",
    "    // Write your code here\n    int i=0;\n    int j=0;\n    int k=0;\n    int l=0;\n    int m=0;\n    int n=0;\n    int o=0;\n    int p=0;\n    int q=0;\n    int r=0;\n    int s=0;\n    int t=0;\n    int u=0;\n    int v=0;\n    int w=0;\n    int x=0;\n    int y=0;\n    int z=0;\n    int aa=0;\n    int bb=0;\n    int cc=0;\n    int dd=0;\n    int ee=0;\n    int ff=0;\n    int gg=0;\n    int hh=0;\n    int ii=0;\n    int jj=0;\n    int kk=0;\n    int ll=0;\n    int mm=0;\n    int nn=0;\n    int oo=0;\n    int pp=0;\n    int qq=0;\n    int rr=0;\n    int ss=0;\n    int tt=0;\n    int uu=0;\n    int vv=0;\n    int ww=0;\n    int xx=0;\n    int yy=0;\n    int zz=0;\n    int aaa=0;\n    int bbb=0;\n    int ccc=0;\n    int ddd=0;\n    int eee=0;\n    int fff=0;\n    int ggg=0;\n    int hhh=0;\n    int iii=0;\n    int jjj=0;\n    int kkk=0;\n    int lll=0;\n    int mmm=0;\n    int nnn=0;\n    int ooo=0;\n    int ppp=0;\n    int qqq=0;\n    int rrr=0;\n    int sss=0;\n    int ttt=0;\n    int uuu=0;\n    int vvv=0;\n    int www=",
    "    std::map<std::string, std::string> m;\n    for(int i=0;i<colors.size();i++){\n        m[colors[i]] = patterns[i];\n    }\n    for(int i=0;i<colors.size();i++){\n        if(m[colors[i]] != patterns[i]){\n            return false;\n        }\n    }\n    return true;",
    "    int i=0;\n    int j=0;\n    while(i<colors.size() && j<patterns.size()){\n        if(colors[i]==patterns[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j==patterns.size()){\n        return true;\n    }\n    else{\n        return false;\n    }",
    "    // Write your code here\n    int n = colors.size();\n    int m = patterns.size();\n    int i = 0, j = 0;\n    while(i < n && j < m) {\n        if(colors[i] == patterns[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if(j == m) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    // Write your code here\n    std::vector<std::string>::iterator itr = colors.begin();\n    std::vector<std::string>::iterator itr1 = patterns.begin();\n    while(itr!=colors.end() && itr1!=patterns.end())\n    {\n        if(*itr==*itr1)\n        {\n            itr++;\n            itr1++;\n        }\n        else\n        {\n            itr++;\n        }\n    }\n    if(itr1==patterns.end())\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }",
    "    std::map<std::string, std::string> m;\n    for(int i = 0; i < colors.size(); i++) {\n        if(m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        } else {\n            if(m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    // Write your code here\n    int i=0;\n    int j=0;\n    int k=0;\n    int l=0;\n    int m=0;\n    int n=0;\n    int o=0;\n    int p=0;\n    int q=0;\n    int r=0;\n    int s=0;\n    int t=0;\n    int u=0;\n    int v=0;\n    int w=0;\n    int x=0;\n    int y=0;\n    int z=0;\n    int a=0;\n    int b=0;\n    int c=0;\n    int d=0;\n    int e=0;\n    int f=0;\n    int g=0;\n    int h=0;\n    int ii=0;\n    int jj=0;\n    int kk=0;\n    int ll=0;\n    int mm=0;\n    int nn=0;\n    int oo=0;\n    int pp=0;\n    int qq=0;\n    int rr=0;\n    int ss=0;\n    int tt=0;\n    int uu=0;\n    int vv=0;\n    int ww=0;\n    int xx=0;\n    int yy=0;\n    int zz=0;\n    int aa=0;\n    int bb=0;\n    int cc=0;\n    int dd=0;\n    int ee=0;\n    int ff=0;\n    int gg=0;\n    int hh=0;\n    int iii=0;\n    int jjj=0;\n    int kkk=0;\n    int lll=0;\n    int mmm=0;\n    int nnn=0;\n    int ooo=0;\n    int ppp=0;\n    int qqq=0;\n    int rrr=0;\n    int sss=0;\n    int ttt=0;\n    int uuu=0;\n    int vvv=0;\n    int www=0;\n    int xxx=",
    "    // Write your code here\n    std::vector<std::string>::iterator itr = colors.begin();\n    std::vector<std::string>::iterator itr1 = patterns.begin();\n    std::vector<std::string>::iterator itr2 = patterns.begin();\n    int count = 0;\n    for(itr1; itr1 != patterns.end(); itr1++){\n        if(*itr1 == \"red\"){\n            count++;\n        }\n    }\n    for(itr; itr != colors.end(); itr++){\n        if(*itr == \"red\"){\n            count--;\n        }\n    }\n    if(count != 0){\n        return false;\n    }\n    for(itr2; itr2 != patterns.end(); itr2++){\n        if(*itr2 == \"blue\"){\n            count++;\n        }\n    }\n    for(itr; itr != colors.end(); itr++){\n        if(*itr == \"blue\"){\n            count--;\n        }\n    }\n    if(count != 0){\n        return false;\n    }\n    return true;",
    "    // Write your code here\n    int i,j,k,n,m;\n    n=colors.size();\n    m=patterns.size();\n    std::vector<std::string> v;\n    for(i=0;i<n;i++){\n        if(colors[i]==patterns[0]){\n            v.push_back(colors[i]);\n            for(j=1;j<m;j++){\n                if(colors[i+j]==patterns[j]){\n                    v.push_back(colors[i+j]);\n                }\n                else{\n                    v.clear();\n                    break;\n                }\n            }\n        }\n        if(v.size()==m){\n            return true;\n        }\n    }\n    return false;",
    "    // Write your code here\n    std::string str = \"\";\n    for(int i = 0; i < colors.size(); i++)\n    {\n        str += colors[i];\n    }\n    std::string str1 = \"\";\n    for(int i = 0; i < patterns.size(); i++)\n    {\n        str1 += patterns[i];\n    }\n    if(str.find(str1) != std::string::npos)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }",
    "    // Write your code here\n    int i=0,j=0;\n    while(i<colors.size() && j<patterns.size()){\n        if(colors[i]==patterns[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j==patterns.size()){\n        return true;\n    }\n    else{\n        return false;\n    }",
    "    int i=0;\n    for(i=0;i<colors.size();i++){\n        if(colors[i]!=patterns[i]){\n            return false;\n        }\n    }\n    return true;",
    "    int i=0,j=0;\n    while(i<colors.size() && j<patterns.size()){\n        if(colors[i]==patterns[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j==patterns.size()){\n        return true;\n    }\n    else{\n        return false;\n    }",
    "\t// Write your code here\n\tstd::map<std::string, std::string> m;\n\tfor (int i = 0; i < colors.size(); i++) {\n\t\tif (m.find(colors[i]) == m.end()) {\n\t\t\tm[colors[i]] = patterns[i];\n\t\t}\n\t\telse {\n\t\t\tif (m[colors[i]] != patterns[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;",
    "    // Write your code here\n    int i=0,j=0;\n    while(i<colors.size() && j<patterns.size()){\n        if(colors[i]==patterns[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j==patterns.size()){\n        return true;\n    }\n    else{\n        return false;\n    }",
    "    int i = 0;\n    for (int j = 0; j < patterns.size(); j++) {\n        if (colors[i] == patterns[j]) {\n            i++;\n        }\n    }\n    if (i == colors.size()) {\n        return true;\n    }\n    return false;",
    "    // Write your code here\n    int i=0;\n    int j=0;\n    int k=0;\n    int l=0;\n    int m=0;\n    int n=0;\n    int o=0;\n    int p=0;\n    int q=0;\n    int r=0;\n    int s=0;\n    int t=0;\n    int u=0;\n    int v=0;\n    int w=0;\n    int x=0;\n    int y=0;\n    int z=0;\n    int a=0;\n    int b=0;\n    int c=0;\n    int d=0;\n    int e=0;\n    int f=0;\n    int g=0;\n    int h=0;\n    int ii=0;\n    int jj=0;\n    int kk=0;\n    int ll=0;\n    int mm=0;\n    int nn=0;\n    int oo=0;\n    int pp=0;\n    int qq=0;\n    int rr=0;\n    int ss=0;\n    int tt=0;\n    int uu=0;\n    int vv=0;\n    int ww=0;\n    int xx=0;\n    int yy=0;\n    int zz=0;\n    int aa=0;\n    int bb=0;\n    int cc=0;\n    int dd=0;\n    int ee=0;\n    int ff=0;\n    int gg=0;\n    int hh=0;\n    int iii=0;\n    int jjj=0;\n    int kkk=0;\n    int lll=0;\n    int mmm=0;\n    int nnn=0;\n    int ooo=0;\n    int ppp=0;\n    int qqq=0;\n    int rrr=0;\n    int sss=0;\n    int ttt=0;\n    int uuu=0;\n    int vvv=0;\n    int www=0;\n    int xxx=",
    "    // Write your code here\n    int i=0,j=0;\n    while(i<colors.size() && j<patterns.size())\n    {\n        if(colors[i]==patterns[j])\n        {\n            i++;\n            j++;\n        }\n        else\n        {\n            i++;\n        }\n    }\n    if(j==patterns.size())\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }",
    "    std::map<std::string, std::string> m;\n    for(int i=0; i<colors.size(); i++) {\n        if(m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        }\n        else {\n            if(m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    std::vector<std::string>::iterator it;\n    for(it = patterns.begin(); it != patterns.end(); it++) {\n        if(std::find(colors.begin(), colors.end(), *it) == colors.end()) {\n            return false;\n        }\n    }\n    return true;",
    "    int i = 0;\n    for(auto s : colors) {\n        if(s == patterns[i]) {\n            i++;\n        }\n        if(i == patterns.size()) {\n            return true;\n        }\n    }\n    return false;",
    "    std::vector<std::string>::iterator it;\n    int i=0;\n    for(it=patterns.begin();it!=patterns.end();it++){\n        if(colors[i]==*it){\n            i++;\n        }\n        else{\n            return false;\n        }\n    }\n    return true;",
    "    int i = 0;\n    int j = 0;\n    while(i < colors.size() && j < patterns.size()) {\n        if(colors[i] == patterns[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if(j == patterns.size()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    // Write your code here\n    std::map<std::string, std::string> m;\n    for(int i = 0; i < colors.size(); i++) {\n        m[colors[i]] = patterns[i];\n    }\n    for(int i = 0; i < colors.size() - 1; i++) {\n        if(m[colors[i]] == m[colors[i + 1]]) {\n            return false;\n        }\n    }\n    return true;",
    "    std::map<std::string, std::string> m;\n    for(int i=0;i<colors.size();i++) {\n        if(m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        }\n        else {\n            if(m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    std::vector<std::string>::iterator it;\n    std::vector<std::string>::iterator it1;\n    int count = 0;\n    for(it = colors.begin(), it1 = patterns.begin(); it != colors.end(), it1 != patterns.end(); it++, it1++) {\n        if(*it == *it1) {\n            count++;\n        }\n    }\n    if(count == patterns.size()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    // Write your code here\n    std::vector<std::string>::iterator itr;\n    std::vector<std::string>::iterator itr1;\n    int count=0;\n    for(itr=patterns.begin();itr!=patterns.end();itr++)\n    {\n        for(itr1=colors.begin();itr1!=colors.end();itr1++)\n        {\n            if(*itr==*itr1)\n            {\n                count++;\n                break;\n            }\n        }\n    }\n    if(count==patterns.size())\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }",
    "    int i,j;\n    for(i=0;i<patterns.size();i++)\n    {\n        for(j=0;j<colors.size();j++)\n        {\n            if(patterns[i]==colors[j])\n            {\n                break;\n            }\n        }\n        if(j==colors.size())\n        {\n            return false;\n        }\n    }\n    return true;",
    "    // Write your code here\n    int i,j,k;\n    int n=colors.size();\n    int m=patterns.size();\n    std::vector<std::string> v;\n    for(i=0;i<n;i++)\n    {\n        if(colors[i]==patterns[0])\n        {\n            for(j=i;j<n;j++)\n            {\n                v.push_back(colors[j]);\n            }\n            for(k=0;k<i;k++)\n            {\n                v.push_back(colors[k]);\n            }\n            break;\n        }\n    }\n    for(i=0;i<m;i++)\n    {\n        if(v[i]!=patterns[i])\n        {\n            return false;\n        }\n    }\n    return true;",
    "    std::map<std::string, std::string> m;\n    for(int i = 0; i < colors.size(); i++) {\n        if(m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        }\n        else {\n            if(m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    // Write your code here\n    int i=0,j=0;\n    while(i<colors.size() && j<patterns.size())\n    {\n        if(colors[i]==patterns[j])\n        {\n            i++;\n            j++;\n        }\n        else\n        {\n            i++;\n        }\n    }\n    if(j==patterns.size())\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }",
    "    std::string str;\n    for(int i=0;i<colors.size();i++){\n        str+=colors[i];\n    }\n    for(int i=0;i<patterns.size();i++){\n        if(str.find(patterns[i])==std::string::npos){\n            return false;\n        }\n    }\n    return true;",
    "    // Write your code here\n    int n=colors.size();\n    int m=patterns.size();\n    int i=0,j=0;\n    while(i<n && j<m)\n    {\n        if(colors[i]==patterns[j])\n        {\n            i++;\n            j++;\n        }\n        else\n        {\n            i++;\n        }\n    }\n    if(j==m)\n    {\n        return true;\n    }\n    return false;",
    "    std::map<std::string, std::string> m;\n    for(int i = 0; i < colors.size(); i++) {\n        if(m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        } else {\n            if(m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    std::map<std::string, std::string> m;\n    for(int i=0;i<colors.size();i++){\n        m[colors[i]]=patterns[i];\n    }\n    for(int i=0;i<colors.size();i++){\n        if(m[colors[i]]!=patterns[i]){\n            return false;\n        }\n    }\n    return true;",
    "  int i=0,j=0;\n  while(i<colors.size() && j<patterns.size())\n  {\n    if(colors[i]==patterns[j])\n    {\n      i++;\n      j++;\n    }\n    else\n    {\n      i++;\n    }\n  }\n  if(j==patterns.size())\n  {\n    return true;\n  }\n  else\n  {\n    return false;\n  }",
    "\t// Write your code here\n\tint i, j, k;\n\tint n = colors.size();\n\tint m = patterns.size();\n\tstd::vector<std::vector<int>> v(n, std::vector<int>(n, 0));\n\tfor (i = 0; i < n; i++) {\n\t\tfor (j = 0; j < n; j++) {\n\t\t\tif (colors[i] == colors[j]) {\n\t\t\t\tv[i][j] = 1;\n\t\t\t}\n\t\t}\n\t}\n\tfor (i = 0; i < n; i++) {\n\t\tfor (j = 0; j < n; j++) {\n\t\t\tfor (k = 0; k < n; k++) {\n\t\t\t\tif (v[i][j] == 1 && v[j][k] == 1) {\n\t\t\t\t\tv[i][k] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfor (i = 0; i < m; i++) {\n\t\tif (patterns[i] == \"same\") {\n\t\t\tif (v[i][i + 1] == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if (patterns[i] == \"different\") {\n\t\t\tif (v[i][i + 1] == 1) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;",
    "    std::map<std::string, std::string> m;\n    for(int i=0;i<colors.size();i++){\n        if(m.find(colors[i])==m.end()){\n            m[colors[i]] = patterns[i];\n        }\n        else{\n            if(m[colors[i]]!=patterns[i]){\n                return false;\n            }\n        }\n    }\n    return true;",
    "    int i=0;\n    int j=0;\n    while(i<colors.size() && j<patterns.size())\n    {\n        if(colors[i]==patterns[j])\n        {\n            i++;\n            j++;\n        }\n        else\n        {\n            i++;\n        }\n    }\n    if(j==patterns.size())\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }",
    "    // Write your code here\n    int i,j;\n    int n=colors.size();\n    int m=patterns.size();\n    int k=0;\n    for(i=0;i<n;i++)\n    {\n        if(colors[i]==patterns[k])\n        {\n            k++;\n        }\n        if(k==m)\n        {\n            return true;\n        }\n    }\n    return false;",
    "    std::vector<std::string>::iterator it;\n    std::vector<std::string>::iterator it1;\n    for(it = colors.begin(), it1 = patterns.begin(); it != colors.end(), it1 != patterns.end(); it++, it1++) {\n        if(*it != *it1) {\n            return false;\n        }\n    }\n    return true;",
    "    int i=0;\n    int j=0;\n    while(i<colors.size() && j<patterns.size()){\n        if(colors[i]==patterns[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j==patterns.size()){\n        return true;\n    }\n    else{\n        return false;\n    }",
    "    int i=0,j=0;\n    while(i<colors.size() && j<patterns.size()){\n        if(colors[i]==patterns[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j==patterns.size()){\n        return true;\n    }\n    else{\n        return false;\n    }",
    "    // Write your code here\n    int i=0,j=0;\n    while(i<colors.size() && j<patterns.size())\n    {\n        if(colors[i]==patterns[j])\n        {\n            i++;\n            j++;\n        }\n        else\n        {\n            i++;\n        }\n    }\n    if(j==patterns.size())\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }",
    "    std::vector<std::string>::iterator itr = colors.begin();\n    std::vector<std::string>::iterator itr1 = patterns.begin();\n    while(itr != colors.end() && itr1 != patterns.end()) {\n        if(*itr != *itr1) {\n            return false;\n        }\n        itr++;\n        itr1++;\n    }\n    return true;",
    "    int i = 0;\n    for(auto x : patterns) {\n        if(x == \"red\") {\n            if(colors[i] == \"red\") {\n                i++;\n            }\n            else {\n                return false;\n            }\n        }\n        else if(x == \"green\") {\n            if(colors[i] == \"green\") {\n                i++;\n            }\n            else {\n                return false;\n            }\n        }\n        else if(x == \"blue\") {\n            if(colors[i] == \"blue\") {\n                i++;\n            }\n            else {\n                return false;\n            }\n        }\n        else if(x == \"orange\") {\n            if(colors[i] == \"orange\") {\n                i++;\n            }\n            else {\n                return false;\n            }\n        }\n        else if(x == \"yellow\") {\n            if(colors[i] == \"yellow\") {\n                i++;\n            }\n            else {\n                return false;\n            }\n        }\n        else if(x == \"white\") {\n            if(colors[i] == \"white\") {\n                i++;\n            }\n            else {\n                return false;\n            }\n        }\n        else if(x == \"black\") {\n            if(colors[i] == \"black\") {\n                i++;\n            }\n            else {\n                return false;\n            }\n        }\n        else if(x == \"purple\") {\n            if(colors[i] == \"purple\") {\n                i++;\n            }\n            else {\n                return false;\n            }\n        }\n        else if(x == \"pink\") {\n            if(colors[i] == \"pink\") {\n                i++;\n            }\n            else {\n                return false;\n            }\n        }\n        else if(x == \"brown\") {\n            if(colors[i] == \"brown\") {\n                i++;\n            }\n            else {\n                return false;\n            }\n        }\n        else if(x == \"grey\") {\n            if(colors[i] == \"",
    "    // Write your code here\n    int i=0,j=0;\n    while(i<colors.size() && j<patterns.size()){\n        if(colors[i]==patterns[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j==patterns.size()){\n        return true;\n    }\n    else{\n        return false;\n    }",
    "    // Write your code here\n    int i=0;\n    for(i=0;i<patterns.size();i++)\n    {\n        if(patterns[i]==\"*\")\n        {\n            continue;\n        }\n        else\n        {\n            if(patterns[i]!=colors[i])\n            {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    // Write your code here\n    std::vector<std::string>::iterator itr;\n    std::vector<std::string>::iterator itr1;\n    std::vector<std::string>::iterator itr2;\n    std::vector<std::string>::iterator itr3;\n    std::vector<std::string>::iterator itr4;\n    std::vector<std::string>::iterator itr5;\n    std::vector<std::string>::iterator itr6;\n    std::vector<std::string>::iterator itr7;\n    std::vector<std::string>::iterator itr8;\n    std::vector<std::string>::iterator itr9;\n    std::vector<std::string>::iterator itr10;\n    std::vector<std::string>::iterator itr11;\n    std::vector<std::string>::iterator itr12;\n    std::vector<std::string>::iterator itr13;\n    std::vector<std::string>::iterator itr14;\n    std::vector<std::string>::iterator itr15;\n    std::vector<std::string>::iterator itr16;\n    std::vector<std::string>::iterator itr17;\n    std::vector<std::string>::iterator itr18;\n    std::vector<std::string>::iterator itr19;\n    std::vector<std::string>::iterator itr20;\n    std::vector<std::string>::iterator itr21;\n    std::vector<std::string>::iterator itr22;\n    std::vector<std::string>::iterator itr23;\n    std::vector<std::string>::iterator itr24;\n    std::vector<std::string>::iterator itr25;\n    std::vector<std::string>::iterator itr26;\n    std::vector<std::string>::iterator itr27;\n    std::vector<std::string>::iterator itr28;\n    std::vector<std::string>::iterator itr29;\n    std::vector<std::string>::iterator itr30;\n    std::vector<std::string>",
    "    // Write your code here\n    int n=colors.size();\n    int m=patterns.size();\n    int i=0,j=0;\n    while(i<n && j<m)\n    {\n        if(colors[i]==patterns[j])\n        {\n            i++;\n            j++;\n        }\n        else\n        {\n            i++;\n        }\n    }\n    if(j==m)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }",
    "  std::map<std::string, std::string> m;\n  for(int i=0;i<colors.size();i++)\n  {\n    if(m.find(colors[i])==m.end())\n    {\n      m[colors[i]]=patterns[i];\n    }\n    else\n    {\n      if(m[colors[i]]!=patterns[i])\n      {\n        return false;\n      }\n    }\n  }\n  return true;",
    "    std::map<std::string, std::string> m;\n    for (int i = 0; i < patterns.size(); i++) {\n        if (m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        } else {\n            if (m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    int i = 0;\n    int j = 0;\n    while(i < colors.size() && j < patterns.size()) {\n        if(colors[i] == patterns[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if(j == patterns.size()) {\n        return true;\n    }\n    return false;",
    "    // Write your code here\n    int i=0;\n    int j=0;\n    int k=0;\n    int l=0;\n    int n=colors.size();\n    int m=patterns.size();\n    int flag=0;\n    while(i<n && j<m){\n        if(colors[i]==patterns[j]){\n            i++;\n            j++;\n        }\n        else{\n            if(flag==0){\n                k=i;\n                l=j;\n                flag=1;\n            }\n            else{\n                if(colors[k]==patterns[l]){\n                    k++;\n                    l++;\n                }\n                else{\n                    return false;\n                }\n            }\n        }\n    }\n    if(i==n && j==m){\n        return true;\n    }\n    else{\n        return false;\n    }",
    "    // Write your code here\n    int i,j;\n    for(i=0;i<patterns.size();i++)\n    {\n        for(j=0;j<colors.size();j++)\n        {\n            if(patterns[i]==colors[j])\n            {\n                break;\n            }\n        }\n        if(j==colors.size())\n        {\n            return false;\n        }\n    }\n    return true;",
    "    int i = 0;\n    int j = 0;\n    while(i < colors.size() && j < patterns.size()) {\n        if(colors[i] == patterns[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if(j == patterns.size()) {\n        return true;\n    } else {\n        return false;\n    }",
    "    int i=0;\n    for(auto x:patterns){\n        if(x==\"red\"){\n            if(colors[i]==\"red\"){\n                i++;\n            }\n            else{\n                return false;\n            }\n        }\n        else if(x==\"green\"){\n            if(colors[i]==\"green\"){\n                i++;\n            }\n            else{\n                return false;\n            }\n        }\n        else if(x==\"blue\"){\n            if(colors[i]==\"blue\"){\n                i++;\n            }\n            else{\n                return false;\n            }\n        }\n        else if(x==\"yellow\"){\n            if(colors[i]==\"yellow\"){\n                i++;\n            }\n            else{\n                return false;\n            }\n        }\n        else if(x==\"orange\"){\n            if(colors[i]==\"orange\"){\n                i++;\n            }\n            else{\n                return false;\n            }\n        }\n        else if(x==\"white\"){\n            if(colors[i]==\"white\"){\n                i++;\n            }\n            else{\n                return false;\n            }\n        }\n        else if(x==\"black\"){\n            if(colors[i]==\"black\"){\n                i++;\n            }\n            else{\n                return false;\n            }\n        }\n        else if(x==\"pink\"){\n            if(colors[i]==\"pink\"){\n                i++;\n            }\n            else{\n                return false;\n            }\n        }\n        else if(x==\"violet\"){\n            if(colors[i]==\"violet\"){\n                i++;\n            }\n            else{\n                return false;\n            }\n        }\n        else if(x==\"indigo\"){\n            if(colors[i]==\"indigo\"){\n                i++;\n            }\n            else{\n                return false;\n            }\n        }\n        else if(x==\"brown\"){\n            if(colors[i]",
    "\t// Write your code here\n\tstd::map<std::string, std::string> m;\n\tfor (int i = 0; i < patterns.size(); i++) {\n\t\tm[patterns[i]] = colors[i];\n\t}\n\tfor (int i = 0; i < patterns.size(); i++) {\n\t\tif (m[patterns[i]] != colors[i]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;",
    "    // Write your code here\n    int i=0;\n    int j=0;\n    int k=0;\n    int l=0;\n    int m=0;\n    int n=0;\n    int o=0;\n    int p=0;\n    int q=0;\n    int r=0;\n    int s=0;\n    int t=0;\n    int u=0;\n    int v=0;\n    int w=0;\n    int x=0;\n    int y=0;\n    int z=0;\n    int aa=0;\n    int bb=0;\n    int cc=0;\n    int dd=0;\n    int ee=0;\n    int ff=0;\n    int gg=0;\n    int hh=0;\n    int ii=0;\n    int jj=0;\n    int kk=0;\n    int ll=0;\n    int mm=0;\n    int nn=0;\n    int oo=0;\n    int pp=0;\n    int qq=0;\n    int rr=0;\n    int ss=0;\n    int tt=0;\n    int uu=0;\n    int vv=0;\n    int ww=0;\n    int xx=0;\n    int yy=0;\n    int zz=0;\n    int aaa=0;\n    int bbb=0;\n    int ccc=0;\n    int ddd=0;\n    int eee=0;\n    int fff=0;\n    int ggg=0;\n    int hhh=0;\n    int iii=0;\n    int jjj=0;\n    int kkk=0;\n    int lll=0;\n    int mmm=0;\n    int nnn=0;\n    int ooo=0;\n    int ppp=0;\n    int qqq=0;\n    int rrr=0;\n    int sss=0;\n    int ttt=0;\n    int uuu=0;\n    int vvv=0;\n    int www=",
    "    // Write your code here\n    int i=0;\n    int j=0;\n    int k=0;\n    int l=0;\n    int m=0;\n    int n=0;\n    int o=0;\n    int p=0;\n    int q=0;\n    int r=0;\n    int s=0;\n    int t=0;\n    int u=0;\n    int v=0;\n    int w=0;\n    int x=0;\n    int y=0;\n    int z=0;\n    int aa=0;\n    int bb=0;\n    int cc=0;\n    int dd=0;\n    int ee=0;\n    int ff=0;\n    int gg=0;\n    int hh=0;\n    int ii=0;\n    int jj=0;\n    int kk=0;\n    int ll=0;\n    int mm=0;\n    int nn=0;\n    int oo=0;\n    int pp=0;\n    int qq=0;\n    int rr=0;\n    int ss=0;\n    int tt=0;\n    int uu=0;\n    int vv=0;\n    int ww=0;\n    int xx=0;\n    int yy=0;\n    int zz=0;\n    int aaa=0;\n    int bbb=0;\n    int ccc=0;\n    int ddd=0;\n    int eee=0;\n    int fff=0;\n    int ggg=0;\n    int hhh=0;\n    int iii=0;\n    int jjj=0;\n    int kkk=0;\n    int lll=0;\n    int mmm=0;\n    int nnn=0;\n    int ooo=0;\n    int ppp=0;\n    int qqq=0;\n    int rrr=0;\n    int sss=0;\n    int ttt=0;\n    int uuu=0;\n    int vvv=0;\n    int www=",
    "    // Write your code here\n    std::map<std::string, std::string> m;\n    for(int i=0;i<colors.size();i++){\n        m[colors[i]] = patterns[i];\n    }\n    std::string temp = m[colors[0]];\n    for(int i=1;i<colors.size();i++){\n        if(m[colors[i]] != temp){\n            return false;\n        }\n    }\n    return true;",
    "    std::map<std::string, int> m;\n    for (int i = 0; i < colors.size(); i++) {\n        m[colors[i]] = i;\n    }\n    for (int i = 0; i < patterns.size() - 1; i++) {\n        if (m[patterns[i]] > m[patterns[i + 1]]) {\n            return false;\n        }\n    }\n    return true;",
    "    // Write your code here\n    int i=0,j=0;\n    for(i=0;i<patterns.size();i++)\n    {\n        if(patterns[i]==\"red\")\n        {\n            if(colors[i]==\"red\")\n            {\n                continue;\n            }\n            else\n            {\n                return false;\n            }\n        }\n        else if(patterns[i]==\"green\")\n        {\n            if(colors[i]==\"green\")\n            {\n                continue;\n            }\n            else\n            {\n                return false;\n            }\n        }\n        else if(patterns[i]==\"blue\")\n        {\n            if(colors[i]==\"blue\")\n            {\n                continue;\n            }\n            else\n            {\n                return false;\n            }\n        }\n        else if(patterns[i]==\"yellow\")\n        {\n            if(colors[i]==\"yellow\")\n            {\n                continue;\n            }\n            else\n            {\n                return false;\n            }\n        }\n        else if(patterns[i]==\"orange\")\n        {\n            if(colors[i]==\"orange\")\n            {\n                continue;\n            }\n            else\n            {\n                return false;\n            }\n        }\n        else if(patterns[i]==\"white\")\n        {\n            if(colors[i]==\"white\")\n            {\n                continue;\n            }\n            else\n            {\n                return false;\n            }\n        }\n        else if(patterns[i]==\"black\")\n        {\n            if(colors[i]==\"black\")\n            {\n                continue;\n            }\n            else\n            {\n                return false;\n            }\n        }\n        else if(patterns[i]==\"violet\")\n        {\n            if(colors[i]==\"violet\")\n            {\n                continue;\n            }\n            else\n            {\n                return false;\n            }\n        }\n        else if(patterns[i]==\"indigo\")\n       ",
    "    int i = 0;\n    for(auto x : patterns) {\n        if(x == \"odd\") {\n            if(i % 2 == 0) {\n                return false;\n            }\n        }\n        else if(x == \"even\") {\n            if(i % 2 != 0) {\n                return false;\n            }\n        }\n        else if(x == \"blue\") {\n            if(colors[i] != \"blue\") {\n                return false;\n            }\n        }\n        else if(x == \"green\") {\n            if(colors[i] != \"green\") {\n                return false;\n            }\n        }\n        else if(x == \"red\") {\n            if(colors[i] != \"red\") {\n                return false;\n            }\n        }\n        else if(x == \"yellow\") {\n            if(colors[i] != \"yellow\") {\n                return false;\n            }\n        }\n        i++;\n    }\n    return true;",
    "    // Write your code here\n    int i=0;\n    int j=0;\n    while(i<colors.size() && j<patterns.size()){\n        if(colors[i]==patterns[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j==patterns.size()){\n        return true;\n    }\n    else{\n        return false;\n    }",
    "    int n = colors.size();\n    int m = patterns.size();\n    int i = 0;\n    int j = 0;\n    while(i < n && j < m) {\n        if(colors[i] == patterns[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if(j == m) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::map<std::string, std::string> m;\n    for(int i = 0; i < colors.size(); i++) {\n        if(m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        } else {\n            if(m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    // Write your code here\n    int i=0,j=0;\n    while(i<colors.size() && j<patterns.size())\n    {\n        if(colors[i]==patterns[j])\n        {\n            i++;\n            j++;\n        }\n        else\n        {\n            i++;\n        }\n    }\n    if(j==patterns.size())\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }",
    "    int i = 0;\n    for(auto x : patterns) {\n        if(x == \"even\") {\n            if(i % 2 == 0) {\n                i++;\n                continue;\n            }\n            else {\n                return false;\n            }\n        }\n        else if(x == \"odd\") {\n            if(i % 2 == 1) {\n                i++;\n                continue;\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            if(x == colors[i]) {\n                i++;\n                continue;\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    std::map<std::string, int> m;\n    int i = 0;\n    for(auto x : patterns) {\n        m[x] = i++;\n    }\n    for(int i = 0; i < colors.size(); i++) {\n        if(m[colors[i]] != i) {\n            return false;\n        }\n    }\n    return true;",
    "    std::map<std::string, std::string> m;\n    for(int i=0;i<colors.size();i++)\n    {\n        if(m.find(colors[i])==m.end())\n            m[colors[i]]=patterns[i];\n        else\n        {\n            if(m[colors[i]]!=patterns[i])\n                return false;\n        }\n    }\n    return true;",
    "    int i = 0, j = 0;\n    while(i < colors.size() && j < patterns.size()) {\n        if(colors[i] == patterns[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if(j == patterns.size()) {\n        return true;\n    }\n    return false;",
    "    // Write your code here\n    int n = colors.size();\n    int m = patterns.size();\n    int i = 0, j = 0;\n    while(i < n && j < m) {\n        if(colors[i] == patterns[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if(j == m) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    // Write your code here\n    int i=0,j=0;\n    for(i=0;i<colors.size();i++)\n    {\n        if(colors[i]==patterns[j])\n        {\n            j++;\n        }\n        if(j==patterns.size())\n        {\n            return true;\n        }\n    }\n    return false;",
    "    // Write your code here\n    int n = colors.size();\n    int m = patterns.size();\n    int i = 0, j = 0;\n    while(i < n && j < m) {\n        if(colors[i] == patterns[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if(j == m) {\n        return true;\n    }\n    return false;",
    "    std::map<std::string, std::string> m;\n    for(int i=0;i<colors.size();i++) {\n        if(m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        }\n        else {\n            if(m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    // Write your code here\n    int i=0,j=0;\n    while(i<colors.size() && j<patterns.size())\n    {\n        if(colors[i]==patterns[j])\n        {\n            i++;\n            j++;\n        }\n        else\n        {\n            i++;\n        }\n    }\n    if(j==patterns.size())\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }",
    "    // Write your code here\n    int i=0;\n    int j=0;\n    while(i<colors.size() && j<patterns.size()){\n        if(colors[i]==patterns[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j==patterns.size()){\n        return true;\n    }\n    else{\n        return false;\n    }",
    "    int i = 0;\n    int j = 0;\n    while(i < colors.size() && j < patterns.size()) {\n        if(colors[i] == patterns[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if(j == patterns.size()) {\n        return true;\n    }\n    return false;",
    "    std::vector<std::string>::iterator it;\n    std::vector<std::string>::iterator it1;\n    it = patterns.begin();\n    it1 = colors.begin();\n    while(it != patterns.end() && it1 != colors.end()) {\n        if(*it == *it1) {\n            it++;\n            it1++;\n        }\n        else {\n            it1++;\n        }\n    }\n    if(it == patterns.end()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "\t// Write your code here\n\tstd::map<std::string, std::string> m;\n\tfor (int i = 0; i < colors.size(); i++) {\n\t\tif (m.find(colors[i]) == m.end()) {\n\t\t\tm[colors[i]] = patterns[i];\n\t\t}\n\t\telse {\n\t\t\tif (m[colors[i]] != patterns[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;",
    "\t// Write your code here\n\tint i = 0;\n\tint j = 0;\n\twhile (i < colors.size() && j < patterns.size()) {\n\t\tif (colors[i] == patterns[j]) {\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse {\n\t\t\ti++;\n\t\t}\n\t}\n\tif (j == patterns.size()) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}",
    "\t// Write your code here\n\tstd::vector<std::string>::iterator itr = patterns.begin();\n\tstd::vector<std::string>::iterator itr1 = colors.begin();\n\twhile (itr != patterns.end())\n\t{\n\t\tif (*itr == \"*\")\n\t\t{\n\t\t\titr++;\n\t\t\titr1++;\n\t\t}\n\t\telse if (*itr == *itr1)\n\t\t{\n\t\t\titr++;\n\t\t\titr1++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;",
    "    // Write your code here\n    int n = colors.size();\n    int m = patterns.size();\n    if(n != m)\n        return false;\n    std::map<std::string, std::string> mp;\n    for(int i = 0; i < n; i++){\n        if(mp.find(colors[i]) == mp.end()){\n            mp[colors[i]] = patterns[i];\n        }\n        else{\n            if(mp[colors[i]] != patterns[i])\n                return false;\n        }\n    }\n    return true;",
    "\t// Write your code here\n\tstd::vector<std::string>::iterator it;\n\tstd::vector<std::string>::iterator it2;\n\tstd::vector<std::string>::iterator it3;\n\tstd::vector<std::string>::iterator it4;\n\tstd::vector<std::string>::iterator it5;\n\tstd::vector<std::string>::iterator it6;\n\tstd::vector<std::string>::iterator it7;\n\tstd::vector<std::string>::iterator it8;\n\tstd::vector<std::string>::iterator it9;\n\tstd::vector<std::string>::iterator it10;\n\tstd::vector<std::string>::iterator it11;\n\tstd::vector<std::string>::iterator it12;\n\tstd::vector<std::string>::iterator it13;\n\tstd::vector<std::string>::iterator it14;\n\tstd::vector<std::string>::iterator it15;\n\tstd::vector<std::string>::iterator it16;\n\tstd::vector<std::string>::iterator it17;\n\tstd::vector<std::string>::iterator it18;\n\tstd::vector<std::string>::iterator it19;\n\tstd::vector<std::string>::iterator it20;\n\tstd::vector<std::string>::iterator it21;\n\tstd::vector<std::string>::iterator it22;\n\tstd::vector<std::string>::iterator it23;\n\tstd::vector<std::string>::iterator it24;\n\tstd::vector<std::string>::iterator it25;\n\tstd::vector<std::string>::iterator it26;\n\tstd::vector<std::string>::iterator it27;\n\tstd::vector<std::string>::iterator it28;\n\tstd::vector<std::string>::iterator it29;\n\tstd::vector<std::string>::iterator it30;\n\tstd::vector<std::string>::iterator it31;\n\tstd::vector<std::string>::iterator it32;\n\tstd::vector<std::string>::iterator it33;\n\tstd::vector<std::string>::",
    "    // Write your code here\n    int i=0;\n    for(int j=0;j<patterns.size();j++)\n    {\n        if(colors[i]==patterns[j])\n        {\n            i++;\n        }\n    }\n    if(i==colors.size())\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }",
    "    // Write your code here\n    int i=0;\n    int j=0;\n    while(i<colors.size() && j<patterns.size())\n    {\n        if(colors[i]==patterns[j])\n        {\n            i++;\n            j++;\n        }\n        else\n        {\n            i++;\n        }\n    }\n    if(j==patterns.size())\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }",
    "    // Write your code here\n    int i,j;\n    for(i=0;i<colors.size();i++)\n    {\n        for(j=0;j<patterns.size();j++)\n        {\n            if(colors[i]==patterns[j])\n            {\n                patterns.erase(patterns.begin()+j);\n                break;\n            }\n        }\n    }\n    if(patterns.size()==0)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }",
    "    std::map<std::string, std::string> m;\n    for(int i=0; i<colors.size(); i++) {\n        if(m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        } else {\n            if(m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "\t// Write your code here\n\tint i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, ii, jj, kk, ll, mm, nn, oo, pp, qq, rr, ss, tt, uu, vv, ww, xx, yy, zz, aa, bb, cc, dd, ee, ff, gg, hh, ii1, jj1, kk1, ll1, mm1, nn1, oo1, pp1, qq1, rr1, ss1, tt1, uu1, vv1, ww1, xx1, yy1, zz1, aa1, bb1, cc1, dd1, ee1, ff1, gg1, hh1, ii2, jj2, kk2, ll2, mm2, nn2, oo2, pp2, qq2, rr2, ss2, tt2, uu2, vv2, ww2, xx2, yy2, zz2, aa2, bb2, cc2, dd2, ee2, ff2, gg2, hh2, ii3, jj3, kk3, ll3, mm3, nn3, oo3, pp3, qq3, rr3, ss3, tt3, uu3, vv3, ww3, xx3, yy3, zz3, aa3, bb3, cc3, dd3, ee3, ff3, gg3, hh3, ii4, jj4, kk4, ll4, mm4, nn4, oo4, pp4, qq4, rr4, ss4, tt4, uu4, vv4, ww4, xx4, yy4, zz4, aa4, bb4, cc4, dd4, ee4, ff4, gg4, hh4, ii",
    "    int i=0;\n    int j=0;\n    while(i<colors.size() && j<patterns.size()){\n        if(colors[i]==patterns[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j==patterns.size()){\n        return true;\n    }\n    else{\n        return false;\n    }",
    "    // Write your code here\n    std::map<std::string,std::string> m;\n    for(int i=0;i<colors.size();i++){\n        m[colors[i]]=patterns[i];\n    }\n    for(int i=0;i<colors.size();i++){\n        if(m[colors[i]]!=patterns[i]){\n            return false;\n        }\n    }\n    return true;",
    "\tint i = 0;\n\tint j = 0;\n\twhile (i < colors.size() && j < patterns.size()) {\n\t\tif (colors[i] == patterns[j]) {\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse {\n\t\t\ti++;\n\t\t}\n\t}\n\tif (j == patterns.size()) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}",
    "    // Write your code here\n    int i=0;\n    int j=0;\n    while(i<colors.size() && j<patterns.size()){\n        if(colors[i]==patterns[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j==patterns.size()){\n        return true;\n    }\n    else{\n        return false;\n    }",
    "    std::vector<std::string>::iterator itr;\n    std::vector<std::string>::iterator itr1;\n    itr = colors.begin();\n    itr1 = patterns.begin();\n    while(itr != colors.end() && itr1 != patterns.end()) {\n        if(*itr == *itr1) {\n            itr++;\n            itr1++;\n        }\n        else {\n            return false;\n        }\n    }\n    return true;",
    "\tstd::map<std::string, std::string> m;\n\tfor (int i = 0; i < colors.size(); i++) {\n\t\tif (m.find(colors[i]) == m.end()) {\n\t\t\tm[colors[i]] = patterns[i];\n\t\t}\n\t\telse {\n\t\t\tif (m[colors[i]] != patterns[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;",
    "    std::map<std::string, std::string> m;\n    for(int i = 0; i < colors.size(); i++) {\n        if(m.find(colors[i]) == m.end()) {\n            m[colors[i]] = patterns[i];\n        } else {\n            if(m[colors[i]] != patterns[i]) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    // Write your code here\n    int i,j,k;\n    int n=colors.size();\n    int m=patterns.size();\n    for(i=0;i<n;i++)\n    {\n        for(j=0;j<m;j++)\n        {\n            if(colors[i]==patterns[j])\n            {\n                if(i==0)\n                {\n                    continue;\n                }\n                else\n                {\n                    if(colors[i-1]==patterns[j-1])\n                    {\n                        continue;\n                    }\n                    else\n                    {\n                        return false;\n                    }\n                }\n            }\n        }\n    }\n    return true;",
    "\tint i=0;\n\tfor(auto x:patterns)\n\t{\n\t\tif(x==\"red\")\n\t\t{\n\t\t\tif(colors[i]==\"red\")\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if(x==\"green\")\n\t\t{\n\t\t\tif(colors[i]==\"green\")\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if(x==\"blue\")\n\t\t{\n\t\t\tif(colors[i]==\"blue\")\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if(x==\"yellow\")\n\t\t{\n\t\t\tif(colors[i]==\"yellow\")\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if(x==\"orange\")\n\t\t{\n\t\t\tif(colors[i]==\"orange\")\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if(x==\"white\")\n\t\t{\n\t\t\tif(colors[i]==\"white\")\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if(x==\"black\")\n\t\t{\n\t\t\tif(colors[i]==\"black\")\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t",
    "    int i=0,j=0;\n    while(i<colors.size() && j<patterns.size()){\n        if(colors[i]==patterns[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j==patterns.size()){\n        return true;\n    }\n    else{\n        return false;\n    }",
    "    // Write your code here\n    int i=0,j=0;\n    while(i<colors.size() && j<patterns.size())\n    {\n        if(colors[i]==patterns[j])\n        {\n            i++;\n            j++;\n        }\n        else\n        {\n            i++;\n        }\n    }\n    if(j==patterns.size())\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }",
    "    // Write your code here\n    int i,j,k;\n    std::vector<std::string>::iterator it;\n    std::vector<std::string>::iterator it1;\n    std::vector<std::string>::iterator it2;\n    std::vector<std::string>::iterator it3;\n    std::vector<std::string>::iterator it4;\n    std::vector<std::string>::iterator it5;\n    std::vector<std::string>::iterator it6;\n    std::vector<std::string>::iterator it7;\n    std::vector<std::string>::iterator it8;\n    std::vector<std::string>::iterator it9;\n    std::vector<std::string>::iterator it10;\n    std::vector<std::string>::iterator it11;\n    std::vector<std::string>::iterator it12;\n    std::vector<std::string>::iterator it13;\n    std::vector<std::string>::iterator it14;\n    std::vector<std::string>::iterator it15;\n    std::vector<std::string>::iterator it16;\n    std::vector<std::string>::iterator it17;\n    std::vector<std::string>::iterator it18;\n    std::vector<std::string>::iterator it19;\n    std::vector<std::string>::iterator it20;\n    std::vector<std::string>::iterator it21;\n    std::vector<std::string>::iterator it22;\n    std::vector<std::string>::iterator it23;\n    std::vector<std::string>::iterator it24;\n    std::vector<std::string>::iterator it25;\n    std::vector<std::string>::iterator it26;\n    std::vector<std::string>::iterator it27;\n    std::vector<std::string>::iterator it28;\n    std::vector<std::string>::iterator it29;\n    std::vector<std::string>::iterator it30;\n    std::vector<std::string>::iterator it31;\n    std::vector<std::string>::iterator it32;\n   ",
    "    // Write your code here\n    int i=0;\n    int j=0;\n    while(i<colors.size() && j<patterns.size())\n    {\n        if(colors[i]==patterns[j])\n        {\n            i++;\n            j++;\n        }\n        else\n        {\n            i++;\n        }\n    }\n    if(j==patterns.size())\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }",
    "    std::vector<std::string>::iterator it = patterns.begin();\n    for (std::vector<std::string>::iterator it = patterns.begin(); it != patterns.end(); it++) {\n        if (colors.size() < patterns.size()) {\n            return false;\n        }\n        if (colors.front() == *it) {\n            colors.erase(colors.begin());\n        }\n    }\n    return true;"
  ]
}