{
  "name": "mbpp_604_reverse_words",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to reverse words seperated by spaces in a given string.\nstd::string reverse_words(std::string s) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_604_reverse_words.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = reverse_words;\n    assert(candidate((\"python program\")) == (\"program python\"));\n    assert(candidate((\"java language\")) == (\"language java\"));\n    assert(candidate((\"indian man\")) == (\"man indian\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::string result = \"\";\n    int i = 0;\n    while(i < s.length()) {\n        std::string temp = \"\";\n        while(i < s.length() && s[i] != ' ') {\n            temp += s[i];\n            i++;\n        }\n        std::reverse(temp.begin(), temp.end());\n        result += temp;\n        if(i < s.length()) {\n            result += \" \";\n            i++;\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    int i = 0;\n    while (i < s.size()) {\n        int j = i;\n        while (j < s.size() && s[j] != ' ') {\n            j++;\n        }\n        for (int k = j - 1; k >= i; k--) {\n            result += s[k];\n        }\n        if (j < s.size()) {\n            result += ' ';\n        }\n        i = j + 1;\n    }\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n            result = word + \" \" + result;\n            word = \"\";\n        } else {\n            word += s[i];\n        }\n    }\n    result = word + \" \" + result;\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n            result = word + \" \" + result;\n            word = \"\";\n        } else {\n            word += s[i];\n        }\n    }\n    result = word + \" \" + result;\n    return result;",
    "    int i = 0;\n    int j = 0;\n    int n = s.size();\n    while(j < n) {\n        while(j < n && s[j] != ' ') {\n            j++;\n        }\n        std::reverse(s.begin() + i, s.begin() + j);\n        i = j + 1;\n        j = i;\n    }\n    return s;",
    "    std::stringstream ss(s);\n    std::string word;\n    std::string result;\n    while(ss >> word) {\n        std::reverse(word.begin(), word.end());\n        result += word + \" \";\n    }\n    result.pop_back();\n    return result;",
    "    std::string result;\n    std::string word;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == ' ') {\n            if (word.size() > 0) {\n                result = word + \" \" + result;\n                word = \"\";\n            }\n        } else {\n            word += s[i];\n        }\n    }\n    if (word.size() > 0) {\n        result = word + \" \" + result;\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == ' ') {\n            result = word + \" \" + result;\n            word = \"\";\n        } else {\n            word += s[i];\n        }\n    }\n    result = word + \" \" + result;\n    return result;",
    "    std::string result;\n    std::string word;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == ' ') {\n            result = \" \" + word + result;\n            word = \"\";\n        } else {\n            word += s[i];\n        }\n    }\n    result = word + result;\n    return result;",
    "    std::string result;\n    std::string word;\n    std::stringstream ss(s);\n    while(ss >> word) {\n        result = word + \" \" + result;\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == ' ') {\n            result = word + \" \" + result;\n            word = \"\";\n        } else {\n            word += s[i];\n        }\n    }\n    result = word + \" \" + result;\n    return result;",
    "    std::string result;\n    std::stringstream ss(s);\n    std::string word;\n    while(ss >> word) {\n        std::reverse(word.begin(), word.end());\n        result += word + \" \";\n    }\n    result.pop_back();\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n            result = word + \" \" + result;\n            word = \"\";\n        } else {\n            word += s[i];\n        }\n    }\n    result = word + \" \" + result;\n    return result;",
    "    std::string result;\n    std::string word;\n    for (auto c : s) {\n        if (c == ' ') {\n            if (word.size() > 0) {\n                result = word + \" \" + result;\n                word.clear();\n            }\n        } else {\n            word += c;\n        }\n    }\n    if (word.size() > 0) {\n        result = word + \" \" + result;\n    }\n    return result;",
    "    std::string res = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n            res = word + \" \" + res;\n            word = \"\";\n        } else {\n            word += s[i];\n        }\n    }\n    res = word + \" \" + res;\n    return res;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        if(s[i] == ' ') {\n            result = word + \" \" + result;\n            word = \"\";\n        }\n        else {\n            word += s[i];\n        }\n    }\n    result = word + \" \" + result;\n    return result;",
    "    std::string result;\n    std::stringstream ss(s);\n    std::string word;\n    while (ss >> word) {\n        std::reverse(word.begin(), word.end());\n        result += word + \" \";\n    }\n    result.pop_back();\n    return result;",
    "    std::string result;\n    std::stringstream ss(s);\n    std::string word;\n    while(ss >> word) {\n        std::reverse(word.begin(), word.end());\n        result += word + \" \";\n    }\n    result.pop_back();\n    return result;",
    "    int i = 0;\n    int j = 0;\n    int n = s.size();\n    while (i < n) {\n        while (i < n && s[i] == ' ') {\n            i++;\n        }\n        j = i;\n        while (j < n && s[j] != ' ') {\n            j++;\n        }\n        std::reverse(s.begin() + i, s.begin() + j);\n        i = j;\n    }\n    return s;",
    "    std::stringstream ss(s);\n    std::string word;\n    std::vector<std::string> words;\n    while(ss >> word) {\n        words.push_back(word);\n    }\n    std::string result = \"\";\n    for(int i = words.size() - 1; i >= 0; i--) {\n        result += words[i];\n        if(i != 0) {\n            result += \" \";\n        }\n    }\n    return result;"
  ]
}