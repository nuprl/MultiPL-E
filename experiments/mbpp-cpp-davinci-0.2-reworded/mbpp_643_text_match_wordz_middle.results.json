{
  "name": "mbpp_643_text_match_wordz_middle",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_643_text_match_wordz_middle.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    if(len < 3) {\n        return false;\n    }\n    for(int i = 1; i < len-1; i++) {\n        if(text[i] == 'z') {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool flag = false;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == 'z' && i != 0 && i != text.length() - 1) {\n            flag = true;\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool match = false;\n    for (int i = 1; i < text.size()-1; i++) {\n        if (text[i] == 'z') {\n            match = true;\n        }\n    }\n    return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool flag = false;\n    for(int i=1; i<text.size()-1; i++) {\n        if(text[i] == 'z') {\n            flag = true;\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool match = false;\n    for (int i = 1; i < text.size() - 1; i++) {\n        if (text[i] == 'z') {\n            match = true;\n        }\n    }\n    return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool match = false;\n    for (int i = 1; i < text.size() - 1; i++) {\n        if (text[i] == 'z') {\n            match = true;\n        }\n    }\n    return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool flag = false;\n    for(int i = 1; i < text.size() - 1; i++) {\n        if(text[i] == 'z') {\n            flag = true;\n            break;\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool match = false;\n    for (int i = 1; i < text.size() - 1; i++) {\n        if (text[i] == 'z') {\n            match = true;\n        }\n    }\n    return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    int i = 0;\n    while(i < len) {\n        if(text[i] == 'z') {\n            if(i == 0 || i == len-1) {\n                i++;\n                continue;\n            }\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool flag = false;\n    for(int i = 1; i < text.size()-1; i++) {\n        if(text[i] == 'z') {\n            flag = true;\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool flag = false;\n    for(int i = 1; i < text.size() - 1; i++) {\n        if(text[i] == 'z') {\n            flag = true;\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n  bool match = false;\n  for(int i = 1; i < text.size() - 1; i++) {\n    if(text[i] == 'z') {\n      match = true;\n    }\n  }\n  return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    for (int i = 1; i < len - 1; i++) {\n        if (text[i] == 'z') {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    if(len < 3) {\n        return false;\n    }\n    for(int i = 1; i < len-1; i++) {\n        if(text[i] == 'z') {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool match = false;\n    for (int i = 1; i < text.size() - 1; i++) {\n        if (text[i] == 'z') {\n            match = true;\n        }\n    }\n    return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int l = text.length();\n    for(int i=1;i<l-1;i++) {\n        if(text[i] == 'z') {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    int i = 0;\n    while(i < len) {\n        if(text[i] == 'z') {\n            if(i == 0 || i == len-1) {\n                i++;\n            } else {\n                return true;\n            }\n        } else {\n            i++;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    if (len < 3) {\n        return false;\n    }\n    for (int i = 1; i < len - 1; i++) {\n        if (text[i] == 'z') {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool flag = false;\n    for(int i = 0; i < text.size(); i++) {\n        if(text[i] == 'z') {\n            if(i != 0 && i != text.size() - 1) {\n                flag = true;\n            }\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool match = false;\n    for (int i = 1; i < text.size() - 1; i++) {\n        if (text[i] == 'z') {\n            match = true;\n        }\n    }\n    return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool match = false;\n    for (int i = 1; i < text.size() - 1; i++) {\n        if (text[i] == 'z') {\n            match = true;\n        }\n    }\n    return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool found = false;\n    for (int i = 1; i < text.size() - 1; i++) {\n        if (text[i] == 'z') {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    if(len < 3)\n        return false;\n    for(int i = 1; i < len - 1; i++) {\n        if(text[i] == 'z')\n            return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool match = false;\n    for (int i = 1; i < text.size() - 1; i++) {\n        if (text[i] == 'z') {\n            match = true;\n        }\n    }\n    return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool match = false;\n    for(int i = 1; i < text.size() - 1; i++) {\n        if(text[i] == 'z') {\n            match = true;\n            break;\n        }\n    }\n    return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    if (len < 3) {\n        return false;\n    }\n    for (int i = 1; i < len - 1; i++) {\n        if (text[i] == 'z') {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    for(int i = 1; i < len-1; i++) {\n        if(text[i] == 'z') {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool found = false;\n    for (int i = 1; i < text.length() - 1; i++) {\n        if (text[i] == 'z') {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool result = false;\n    for (int i = 1; i < text.size() - 1; i++) {\n        if (text[i] == 'z') {\n            result = true;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool match = false;\n    for (int i = 1; i < text.size()-1; i++) {\n        if (text[i] == 'z') {\n            match = true;\n        }\n    }\n    return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    for(int i = 1; i < len-1; i++) {\n        if(text[i] == 'z') {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    for(int i=1; i<len-1; i++) {\n        if(text[i] == 'z') {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool flag = false;\n    for(int i=1; i<text.size()-1; i++) {\n        if(text[i] == 'z') {\n            flag = true;\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool result = false;\n    for (int i = 1; i < text.size() - 1; i++) {\n        if (text[i] == 'z') {\n            result = true;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int count = 0;\n    for (int i = 1; i < text.size() - 1; i++) {\n        if (text[i] == 'z') {\n            count++;\n        }\n    }\n    if (count > 0) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    for (int i = 1; i < len - 1; i++) {\n        if (text[i] == 'z') {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool result = false;\n    for (int i = 1; i < text.size() - 1; i++) {\n        if (text[i] == 'z') {\n            result = true;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    int i = 0;\n    while (i < len) {\n        if (text[i] == 'z') {\n            if (i == 0 || i == len - 1) {\n                i++;\n                continue;\n            }\n            else {\n                return true;\n            }\n        }\n        i++;\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    if (len < 3) {\n        return false;\n    }\n    for (int i = 1; i < len - 1; i++) {\n        if (text[i] == 'z') {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int i = 0;\n    int j = text.size() - 1;\n    while (i < j) {\n        if (text[i] == 'z' && text[j] == 'z') {\n            return true;\n        }\n        i++;\n        j--;\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "tmpkm7ro0zk: /tmp/tmpkm7ro0zk.cpp:18: int main(): Assertion `candidate((\"pythonzabc.\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool result = false;\n    for (int i = 1; i < text.size() - 1; i++) {\n        if (text[i] == 'z') {\n            result = true;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool flag = false;\n    for (int i = 1; i < text.size() - 1; i++) {\n        if (text[i] == 'z') {\n            flag = true;\n            break;\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool result = false;\n    for (int i = 1; i < text.length() - 1; i++) {\n        if (text[i] == 'z') {\n            result = true;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    for(int i = 1; i < len - 1; i++) {\n        if(text[i] == 'z') {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool found = false;\n    for(int i = 0; i < text.size(); i++) {\n        if(text[i] == 'z') {\n            if(i != 0 && i != text.size() - 1) {\n                found = true;\n            }\n        }\n    }\n    return found;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool match = false;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == 'z') {\n            if (i == 0 || i == text.size() - 1) {\n                continue;\n            } else {\n                match = true;\n                break;\n            }\n        }\n    }\n    return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool match = false;\n    for (int i = 1; i < text.size() - 1; i++) {\n        if (text[i] == 'z') {\n            match = true;\n        }\n    }\n    return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool result = false;\n    for(int i=1; i<text.size()-1; i++) {\n        if(text[i] == 'z') {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    if (len < 3) return false;\n    for (int i = 1; i < len-1; i++) {\n        if (text[i] == 'z') return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    if (len < 3) {\n        return false;\n    }\n    for (int i = 1; i < len - 1; i++) {\n        if (text[i] == 'z') {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    if (len < 3) {\n        return false;\n    }\n    for (int i = 1; i < len - 1; i++) {\n        if (text[i] == 'z') {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool match = false;\n    for(int i = 1; i < text.size()-1; i++) {\n        if(text[i] == 'z') {\n            match = true;\n        }\n    }\n    return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool result = false;\n    for (int i = 1; i < text.size() - 1; i++) {\n        if (text[i] == 'z') {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool result = false;\n    for(int i = 1; i < text.size() - 1; i++) {\n        if(text[i] == 'z') {\n            result = true;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int text_length = text.length();\n    for(int i = 1; i < text_length - 1; i++) {\n        if(text[i] == 'z') {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool match = false;\n    for (int i = 1; i < text.length()-1; i++) {\n        if (text[i] == 'z') {\n            match = true;\n        }\n    }\n    return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool flag = false;\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == 'z' && i != 0 && i != text.length() - 1) {\n            flag = true;\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool flag = false;\n    for (int i = 1; i < text.length() - 1; i++) {\n        if (text[i] == 'z') {\n            flag = true;\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool result = false;\n    for (int i = 1; i < text.size() - 1; i++) {\n        if (text[i] == 'z') {\n            result = true;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool match = false;\n    for(int i = 1; i < text.size() - 1; i++) {\n        if(text[i] == 'z') {\n            match = true;\n        }\n    }\n    return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    for(int i=1; i<len-1; i++) {\n        if(text[i] == 'z') {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool flag = false;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == 'z') {\n            if (i != 0 && i != text.length() - 1) {\n                flag = true;\n            }\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool match = false;\n    for (int i = 1; i < text.size() - 1; i++) {\n        if (text[i] == 'z') {\n            match = true;\n        }\n    }\n    return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n  std::regex w(\"\\\\bz\\\\w*z\\\\b\");\n  return std::regex_search(text, w);\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123690,
      "stdout": "",
      "stderr": "tmppitmb3gx: /tmp/tmppitmb3gx.cpp:10: int main(): Assertion `candidate((\"pythonzabc.\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    int i = 0;\n    while (i < len) {\n        if (text[i] == 'z') {\n            if (i == 0 || i == len - 1) {\n                i++;\n            } else {\n                return true;\n            }\n        } else {\n            i++;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool match = false;\n    for(int i = 1; i < text.size() - 1; i++) {\n        if(text[i] == 'z') {\n            match = true;\n        }\n    }\n    return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    if(len < 3) return false;\n    if(text[0] == 'z' || text[len - 1] == 'z') return false;\n    for(int i = 1; i < len - 1; i++) {\n        if(text[i] == 'z') return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    if (len < 3) {\n        return false;\n    }\n    for (int i = 1; i < len - 1; i++) {\n        if (text[i] == 'z') {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool found = false;\n    for(int i = 1; i < text.length()-1; i++) {\n        if(text[i] == 'z') {\n            found = true;\n        }\n    }\n    return found;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool match = false;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == 'z') {\n            if (i != 0 && i != text.size() - 1) {\n                match = true;\n            }\n        }\n    }\n    return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool match = false;\n    for(int i = 1; i < text.size() - 1; i++) {\n        if(text[i] == 'z') {\n            match = true;\n        }\n    }\n    return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool match = false;\n    for (int i = 1; i < text.size() - 1; i++) {\n        if (text[i] == 'z') {\n            match = true;\n        }\n    }\n    return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool match = false;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == 'z' && i != 0 && i != text.size() - 1) {\n            match = true;\n        }\n    }\n    return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool match = false;\n    for (int i = 1; i < text.size() - 1; i++) {\n        if (text[i] == 'z') {\n            match = true;\n        }\n    }\n    return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool flag = false;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == 'z') {\n            if (i != 0 && i != text.length() - 1) {\n                flag = true;\n            }\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int i = 0;\n    int j = text.length() - 1;\n    while (i < j) {\n        if (text[i] == 'z' && text[j] == 'z') {\n            return true;\n        }\n        i++;\n        j--;\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "tmpow8yncth: /tmp/tmpow8yncth.cpp:18: int main(): Assertion `candidate((\"pythonzabc.\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    int i = 0;\n    while(i < len) {\n        if(text[i] == 'z') {\n            if(i == 0 || i == len - 1) {\n                i++;\n                continue;\n            }\n            else {\n                return true;\n            }\n        }\n        i++;\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool match = false;\n    for (int i = 1; i < text.size() - 1; i++) {\n        if (text[i] == 'z') {\n            match = true;\n        }\n    }\n    return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool flag = false;\n    for(int i = 1; i < text.length() - 1; i++) {\n        if(text[i] == 'z') {\n            flag = true;\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool found_z = false;\n    for(int i = 0; i < text.size(); i++) {\n        if(text[i] == 'z') {\n            found_z = true;\n        }\n        if(found_z && text[i] == 'z' && i != text.size() - 1) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "tmpwoopab6i: /tmp/tmpwoopab6i.cpp:19: int main(): Assertion `candidate((\"zxyabc.\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    if (len < 3) {\n        return false;\n    }\n    for (int i = 1; i < len - 1; i++) {\n        if (text[i] == 'z') {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int count = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == 'z') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "tmpndt8_c6o: /tmp/tmpndt8_c6o.cpp:18: int main(): Assertion `candidate((\"pythonzabc.\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    if (len < 3) {\n        return false;\n    }\n    for (int i = 1; i < len - 1; i++) {\n        if (text[i] == 'z') {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool check = false;\n    for (int i = 1; i < text.size() - 1; i++) {\n        if (text[i] == 'z') {\n            check = true;\n        }\n    }\n    return check;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool match = false;\n    for(int i = 1; i < text.size() - 1; i++) {\n        if(text[i] == 'z') {\n            match = true;\n        }\n    }\n    return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    for (int i = 1; i < len - 1; i++) {\n        if (text[i] == 'z') {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool match = false;\n    for(int i = 1; i < text.size()-1; i++) {\n        if(text[i] == 'z') {\n            match = true;\n        }\n    }\n    return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    if (len < 3) {\n        return false;\n    }\n    for (int i = 1; i < len - 1; i++) {\n        if (text[i] == 'z') {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    for (int i = 1; i < len - 1; i++) {\n        if (text[i] == 'z') {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool result = false;\n    for (int i = 1; i < text.size() - 1; i++) {\n        if (text[i] == 'z') {\n            result = true;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    for(int i = 1; i < len-1; i++) {\n        if(text[i] == 'z') {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    int i = 0;\n    while(i < len) {\n        if(text[i] == 'z') {\n            if(i == 0 || i == len - 1) {\n                i++;\n                continue;\n            }\n            else {\n                return true;\n            }\n        }\n        i++;\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    if(len < 3) {\n        return false;\n    }\n    for(int i = 1; i < len-1; i++) {\n        if(text[i] == 'z') {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    if (len < 3) {\n        return false;\n    }\n    for (int i = 1; i < len - 1; i++) {\n        if (text[i] == 'z') {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    for (int i = 1; i < len - 1; i++) {\n        if (text[i] == 'z') {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    for(int i = 1; i < len-1; i++) {\n        if(text[i] == 'z') {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool z_found = false;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == 'z') {\n            if (i > 0 && i < text.size() - 1) {\n                z_found = true;\n            }\n        }\n    }\n    return z_found;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool flag = false;\n    for(int i = 1; i < text.length() - 1; i++) {\n        if(text[i] == 'z') {\n            flag = true;\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    if (len < 3) {\n        return false;\n    }\n    for (int i = 1; i < len - 1; i++) {\n        if (text[i] == 'z') {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    if (len < 3) {\n        return false;\n    }\n    for (int i = 1; i < len - 1; i++) {\n        if (text[i] == 'z') {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool flag = false;\n    for (int i = 1; i < text.length() - 1; i++) {\n        if (text[i] == 'z') {\n            flag = true;\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool match = false;\n    for (int i = 1; i < text.size() - 1; i++) {\n        if (text[i] == 'z') {\n            match = true;\n        }\n    }\n    return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    if (len < 3) {\n        return false;\n    }\n    for (int i = 1; i < len - 1; i++) {\n        if (text[i] == 'z') {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    if(len < 3)\n        return false;\n    for(int i = 1; i < len - 1; i++) {\n        if(text[i] == 'z')\n            return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool match = false;\n    for (int i = 1; i < text.length() - 1; i++) {\n        if (text[i] == 'z') {\n            match = true;\n        }\n    }\n    return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool result = false;\n    for (int i = 1; i < text.size() - 1; i++) {\n        if (text[i] == 'z') {\n            result = true;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool found = false;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == 'z') {\n            if (i == 0 || i == text.size() - 1) {\n                continue;\n            }\n            found = true;\n        }\n    }\n    return found;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    if(len < 3) {\n        return false;\n    }\n    for(int i = 1; i < len - 1; i++) {\n        if(text[i] == 'z') {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool match = false;\n    for (int i = 1; i < text.size() - 1; i++) {\n        if (text[i] == 'z') {\n            match = true;\n        }\n    }\n    return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    if (len < 3) {\n        return false;\n    }\n    for (int i = 1; i < len - 1; i++) {\n        if (text[i] == 'z') {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool match = false;\n    for (int i = 1; i < text.size() - 1; i++) {\n        if (text[i] == 'z') {\n            match = true;\n        }\n    }\n    return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    if (len < 3) {\n        return false;\n    }\n    for (int i = 1; i < len-1; i++) {\n        if (text[i] == 'z') {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    for(int i = 1; i < len-1; i++) {\n        if(text[i] == 'z') {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool match = false;\n    for(int i = 1; i < text.length()-1; i++) {\n        if(text[i] == 'z') {\n            match = true;\n        }\n    }\n    return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    if (len < 3) {\n        return false;\n    }\n    for (int i = 1; i < len - 1; i++) {\n        if (text[i] == 'z') {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool match = false;\n    for(int i = 1; i < text.length()-1; i++) {\n        if(text[i] == 'z') {\n            match = true;\n        }\n    }\n    return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool flag = false;\n    for (int i = 1; i < text.size() - 1; i++) {\n        if (text[i] == 'z') {\n            flag = true;\n            break;\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool match = false;\n    for (int i = 1; i < text.size() - 1; i++) {\n        if (text[i] == 'z') {\n            match = true;\n        }\n    }\n    return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool flag = false;\n    for(int i = 1; i < text.size()-1; i++) {\n        if(text[i] == 'z') {\n            flag = true;\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool flag = false;\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == 'z' && i != 0 && i != text.length() - 1) {\n            flag = true;\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    if (len < 3) {\n        return false;\n    }\n    for (int i = 1; i < len - 1; i++) {\n        if (text[i] == 'z') {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool match = false;\n    for(int i = 1; i < text.size() - 1; i++) {\n        if(text[i] == 'z') {\n            match = true;\n        }\n    }\n    return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    for(int i = 1; i < len - 1; i++) {\n        if(text[i] == 'z') {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    if(len < 3) {\n        return false;\n    }\n    for(int i = 1; i < len-1; i++) {\n        if(text[i] == 'z') {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool result = false;\n    for (int i = 1; i < text.size() - 1; i++) {\n        if (text[i] == 'z') {\n            result = true;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool result = false;\n    if (text.size() > 2) {\n        for (int i = 1; i < text.size() - 1; i++) {\n            if (text[i] == 'z') {\n                result = true;\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool match = false;\n    for(int i = 1; i < text.length()-1; i++) {\n        if(text[i] == 'z') {\n            match = true;\n        }\n    }\n    return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool found = false;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == 'z') {\n            if (i != 0 && i != text.size() - 1) {\n                found = true;\n            }\n        }\n    }\n    return found;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int count = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == 'z') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "tmpndt8_c6o: /tmp/tmpndt8_c6o.cpp:18: int main(): Assertion `candidate((\"pythonzabc.\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool match = false;\n    for (int i = 1; i < text.size() - 1; i++) {\n        if (text[i] == 'z') {\n            match = true;\n        }\n    }\n    return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    if (len < 3) {\n        return false;\n    }\n    for (int i = 1; i < len - 1; i++) {\n        if (text[i] == 'z') {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    if (len < 3) {\n        return false;\n    }\n    for (int i = 1; i < len - 1; i++) {\n        if (text[i] == 'z') {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool match = false;\n    for (int i = 1; i < text.size() - 1; i++) {\n        if (text[i] == 'z') {\n            match = true;\n        }\n    }\n    return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.size();\n    if(len < 3)\n        return false;\n    for(int i = 1; i < len - 1; i++) {\n        if(text[i] == 'z')\n            return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    if(text.size() == 0) {\n        return false;\n    }\n    if(text.size() == 1) {\n        return text[0] == 'z';\n    }\n    if(text[0] == 'z' || text[text.size()-1] == 'z') {\n        return false;\n    }\n    for(int i = 1; i < text.size() - 1; i++) {\n        if(text[i] == 'z') {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool match = false;\n    for (int i = 1; i < text.length() - 1; i++) {\n        if (text[i] == 'z') {\n            match = true;\n            break;\n        }\n    }\n    return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool match = false;\n    for (int i = 1; i < text.length() - 1; i++) {\n        if (text[i] == 'z') {\n            match = true;\n        }\n    }\n    return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    if (len < 3) {\n        return false;\n    }\n    for (int i = 1; i < len - 1; i++) {\n        if (text[i] == 'z') {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n  bool match = false;\n  for (int i = 1; i < text.size() - 1; i++) {\n    if (text[i] == 'z') {\n      match = true;\n    }\n  }\n  return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool result = false;\n    for (int i = 1; i < text.size()-1; i++) {\n        if (text[i] == 'z') {\n            result = true;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool result = false;\n    for (int i = 1; i < text.size()-1; i++) {\n        if (text[i] == 'z') {\n            result = true;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool match = false;\n    for(int i = 1; i < text.size() - 1; i++) {\n        if(text[i] == 'z') {\n            match = true;\n        }\n    }\n    return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool match = false;\n    for(int i = 1; i < text.size() - 1; i++) {\n        if(text[i] == 'z') {\n            match = true;\n        }\n    }\n    return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool match = false;\n    for (int i = 1; i < text.size() - 1; i++) {\n        if (text[i] == 'z') {\n            match = true;\n        }\n    }\n    return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool found = false;\n    for (int i = 1; i < text.length() - 1; i++) {\n        if (text[i] == 'z') {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool match = false;\n    for(int i=1; i<text.size()-1; i++) {\n        if(text[i] == 'z') {\n            match = true;\n        }\n    }\n    return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    if (len < 3) {\n        return false;\n    }\n    for (int i = 1; i < len - 1; i++) {\n        if (text[i] == 'z') {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool match = false;\n    for (int i = 1; i < text.size() - 1; i++) {\n        if (text[i] == 'z') {\n            match = true;\n        }\n    }\n    return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    if (len < 3) {\n        return false;\n    }\n    for (int i = 1; i < len - 1; i++) {\n        if (text[i] == 'z') {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool match = false;\n    for (int i = 1; i < text.size() - 1; i++) {\n        if (text[i] == 'z') {\n            match = true;\n        }\n    }\n    return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    for(int i=1; i<len-1; i++) {\n        if(text[i] == 'z') {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    if(len < 3) {\n        return false;\n    }\n    for(int i = 1; i < len - 1; i++) {\n        if(text[i] == 'z') {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n  bool match = false;\n  for (int i = 1; i < text.size() - 1; i++) {\n    if (text[i] == 'z') {\n      match = true;\n    }\n  }\n  return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    int i = 0;\n    while (i < len) {\n        if (text[i] == 'z') {\n            if (i == 0 || i == len - 1) {\n                i++;\n                continue;\n            }\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool match = false;\n    for (int i = 1; i < text.length() - 1; i++) {\n        if (text[i] == 'z') {\n            match = true;\n        }\n    }\n    return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool flag = false;\n    for(int i = 0; i < text.size(); i++) {\n        if(text[i] == 'z') {\n            if(i > 0 && i < text.size() - 1) {\n                flag = true;\n            }\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool check = false;\n    for (int i = 1; i < text.size() - 1; i++) {\n        if (text[i] == 'z') {\n            check = true;\n        }\n    }\n    return check;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    for(int i=1; i<len-1; i++) {\n        if(text[i] == 'z') {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    if (len < 3) {\n        return false;\n    }\n    for (int i = 1; i < len - 1; i++) {\n        if (text[i] == 'z') {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool result = false;\n    for (int i = 1; i < text.size() - 1; i++) {\n        if (text[i] == 'z') {\n            result = true;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool result = false;\n    for (int i = 1; i < text.size() - 1; i++) {\n        if (text[i] == 'z') {\n            result = true;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool flag = false;\n    for(int i = 1; i < text.size()-1; i++) {\n        if(text[i] == 'z') {\n            flag = true;\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool match = false;\n    for(int i = 1; i < text.size()-1; i++) {\n        if(text[i] == 'z') {\n            match = true;\n        }\n    }\n    return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    for (int i = 1; i < len - 1; i++) {\n        if (text[i] == 'z') {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool flag = false;\n    for(int i = 1; i < text.size() - 1; i++) {\n        if(text[i] == 'z') {\n            flag = true;\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    for(int i = 1; i < len - 1; i++) {\n        if(text[i] == 'z') {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n\tbool result = false;\n\tint len = text.length();\n\tif (len > 2) {\n\t\tfor (int i = 1; i < len - 1; i++) {\n\t\t\tif (text[i] == 'z') {\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int count = 0;\n    for (int i = 1; i < text.size() - 1; i++) {\n        if (text[i] == 'z') {\n            count++;\n        }\n    }\n    return count > 0;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool flag = false;\n    for (int i = 1; i < text.length() - 1; i++) {\n        if (text[i] == 'z') {\n            flag = true;\n            break;\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool match = false;\n    for (int i = 1; i < text.size() - 1; i++) {\n        if (text[i] == 'z') {\n            match = true;\n        }\n    }\n    return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    if(len < 3) return false;\n    for(int i = 1; i < len - 1; i++) {\n        if(text[i] == 'z') return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n  int len = text.length();\n  int i = 0;\n  while(i < len) {\n    if(text[i] == 'z') {\n      if(i > 0 && i < len - 1) {\n        return true;\n      }\n    }\n    i++;\n  }\n  return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool match = false;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == 'z') {\n            if (i != 0 && i != text.length() - 1) {\n                match = true;\n            }\n        }\n    }\n    return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    for(int i = 1; i < len - 1; i++) {\n        if(text[i] == 'z') {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool flag = false;\n    for (int i = 1; i < text.length() - 1; i++) {\n        if (text[i] == 'z') {\n            flag = true;\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool match = false;\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == 'z') {\n            if(i != 0 && i != text.length() - 1) {\n                match = true;\n            }\n        }\n    }\n    return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool result = false;\n    for (int i = 1; i < text.size() - 1; i++) {\n        if (text[i] == 'z') {\n            result = true;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    for (int i = 1; i < len - 1; i++) {\n        if (text[i] == 'z') {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool flag = false;\n    for (int i = 1; i < text.length() - 1; i++) {\n        if (text[i] == 'z') {\n            flag = true;\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int count = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == 'z') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123690,
      "stdout": "",
      "stderr": "tmp0o2v9_bw: /tmp/tmp0o2v9_bw.cpp:20: int main(): Assertion `candidate((\"pythonzabc.\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n\tbool flag = false;\n\tfor (int i = 1; i < text.size() - 1; i++) {\n\t\tif (text[i] == 'z') {\n\t\t\tflag = true;\n\t\t}\n\t}\n\treturn flag;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int count = 0;\n    for(int i = 1; i < text.length()-1; i++) {\n        if(text[i] == 'z') {\n            count++;\n        }\n    }\n    if(count > 0) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    if(len < 3) return false;\n    for(int i = 1; i < len - 1; i++) {\n        if(text[i] == 'z') return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool match = false;\n    for (int i = 1; i < text.length() - 1; i++) {\n        if (text[i] == 'z') {\n            match = true;\n        }\n    }\n    return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    if (len < 3) {\n        return false;\n    }\n    for (int i = 1; i < len - 1; i++) {\n        if (text[i] == 'z') {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool match = false;\n    for (int i = 1; i < text.size() - 1; i++) {\n        if (text[i] == 'z') {\n            match = true;\n        }\n    }\n    return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    if (len < 3) {\n        return false;\n    }\n    for (int i = 1; i < len - 1; i++) {\n        if (text[i] == 'z') {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    int i = 0;\n    while (i < len) {\n        if (text[i] == 'z') {\n            if (i == 0 || i == len - 1) {\n                i++;\n                continue;\n            }\n            else {\n                return true;\n            }\n        }\n        i++;\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    int count = 0;\n    for(int i = 0; i < len; i++) {\n        if(text[i] == 'z') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123690,
      "stdout": "",
      "stderr": "tmpygn6byzh: /tmp/tmpygn6byzh.cpp:19: int main(): Assertion `candidate((\"pythonzabc.\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool match = false;\n    for (int i = 1; i < text.size() - 1; i++) {\n        if (text.at(i) == 'z') {\n            match = true;\n        }\n    }\n    return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool match = false;\n    for (int i = 1; i < text.size() - 1; i++) {\n        if (text[i] == 'z') {\n            match = true;\n        }\n    }\n    return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    if (len < 3)\n        return false;\n    for (int i = 1; i < len - 1; i++) {\n        if (text[i] == 'z')\n            return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool flag = false;\n    for (int i = 1; i < text.length() - 1; i++) {\n        if (text[i] == 'z') {\n            flag = true;\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    if (len < 3) {\n        return false;\n    }\n    for (int i = 1; i < len - 1; i++) {\n        if (text[i] == 'z') {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    for(int i = 1; i < len - 1; i++) {\n        if(text[i] == 'z') {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    int len = text.length();\n    for(int i = 1; i < len - 1; i++) {\n        if(text[i] == 'z') {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool match = false;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == 'z') {\n            if (i > 0 && i < text.size() - 1) {\n                match = true;\n            }\n        }\n    }\n    return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool match = false;\n    for(int i = 1; i < text.length()-1; i++) {\n        if(text[i] == 'z') {\n            match = true;\n        }\n    }\n    return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool flag = false;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == 'z' && i != 0 && i != text.length() - 1) {\n            flag = true;\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nbool text_match_wordz_middle(std::string text) {\n    bool match = false;\n    for (int i = 1; i < text.size() - 1; i++) {\n        if (text[i] == 'z') {\n            match = true;\n        }\n    }\n    return match;\n}\nint main() {\n    auto candidate = text_match_wordz_middle;\n    assert(candidate((\"pythonzabc.\")) == (true));\n    assert(candidate((\"zxyabc.\")) == (false));\n    assert(candidate((\"  lang  .\")) == (false));\n}\n",
      "timestamp": 1665510552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}