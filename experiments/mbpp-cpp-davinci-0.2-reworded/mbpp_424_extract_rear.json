{
  "name": "mbpp_424_extract_rear",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract only the rear index element of each string in the given tuple.\nstd::vector<std::string> extract_rear(std::string test_tuple) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_424_extract_rear.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = extract_rear;\n    assert(candidate(std::make_tuple(\"Mers\", \"for\", \"Vers\")) == (std::vector<std::string>({(std::string)\"s\", (std::string)\"r\", (std::string)\"s\"})));\n    assert(candidate(std::make_tuple(\"Avenge\", \"for\", \"People\")) == (std::vector<std::string>({(std::string)\"e\", (std::string)\"r\", (std::string)\"e\"})));\n    assert(candidate(std::make_tuple(\"Gotta\", \"get\", \"go\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"t\", (std::string)\"o\"})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.length() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string s;\n    while(std::getline(ss, s, ',')) {\n        result.push_back(s.substr(s.find_last_of('_') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0;i<test_tuple.length();i++){\n        if(test_tuple[i]==','){\n            result.push_back(temp);\n            temp=\"\";\n        }\n        else if(test_tuple[i]==')'){\n            result.push_back(temp);\n            temp=\"\";\n        }\n        else{\n            temp+=test_tuple[i];\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.size() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.find_last_of(' ') + 1));\n    }\n    return result;",
    "  std::vector<std::string> result;\n  std::stringstream ss(test_tuple);\n  std::string temp;\n  while(std::getline(ss, temp, ',')) {\n    result.push_back(temp.substr(temp.length()-1));\n  }\n  return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0;i<test_tuple.length();i++) {\n        if(test_tuple[i]==',') {\n            result.push_back(temp);\n            temp=\"\";\n        }\n        else {\n            temp+=test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while (std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.size() - 1, 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.size() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.size()-1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.length() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.length()-1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.find_last_of(' ') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.find_last_of('_') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.find_last_of('_') + 1));\n    }\n    return result;",
    "    std::vector<std::string> rear_index_elements;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        rear_index_elements.push_back(token.substr(token.find_last_of(' ')+1));\n    }\n    return rear_index_elements;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.find_last_of(' ') + 1));\n    }\n    return result;",
    "    std::vector<std::string> rear_index;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        rear_index.push_back(token.substr(token.find_last_of(' ') + 1));\n    }\n    return rear_index;",
    "    std::vector<std::string> result;\n    std::string temp = \"\";\n    for(int i = 0; i < test_tuple.size(); i++) {\n        if(test_tuple[i] == ',') {\n            result.push_back(temp);\n            temp = \"\";\n        }\n        else {\n            temp += test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while (std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.find_last_of(':') + 1));\n    }\n    return result;",
    "    std::vector<std::string> v;\n    std::stringstream ss(test_tuple);\n    std::string word;\n    while(ss >> word) {\n        v.push_back(word);\n    }\n    std::vector<std::string> result;\n    for(int i = 0; i < v.size(); i++) {\n        result.push_back(v[i].substr(v[i].length() - 1, 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while (std::getline(ss, token, ',')) {\n        result.push_back(token);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.length() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (int i = 0; i < test_tuple.length(); i++) {\n        if (test_tuple[i] == ',') {\n            result.push_back(temp);\n            temp.clear();\n        } else {\n            temp += test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0;i<test_tuple.length();i++) {\n        if(test_tuple[i] == ',') {\n            result.push_back(temp);\n            temp.clear();\n        }\n        else {\n            temp.push_back(test_tuple[i]);\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.find_last_of('_')+1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item.substr(item.length()-1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.find_last_of('_') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0;i<test_tuple.size();i++) {\n        if(test_tuple[i] == ',') {\n            result.push_back(temp);\n            temp.clear();\n        }\n        else {\n            temp.push_back(test_tuple[i]);\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.find_last_of('_') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp = \"\";\n    for(int i = 0; i < test_tuple.length(); i++) {\n        if(test_tuple[i] == ',') {\n            result.push_back(temp);\n            temp = \"\";\n        }\n        else {\n            temp += test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i = 0; i < test_tuple.length(); i++) {\n        if(test_tuple[i] != ',') {\n            temp += test_tuple[i];\n        } else {\n            result.push_back(temp);\n            temp = \"\";\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.find_last_of('_') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.length() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.find_last_of(' ') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.length() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.find_last_of(' ')+1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0;i<test_tuple.length();i++)\n    {\n        if(test_tuple[i]==',')\n        {\n            result.push_back(temp);\n            temp.clear();\n        }\n        else\n        {\n            temp.push_back(test_tuple[i]);\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.size() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.size() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.find_last_of(' ') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0;i<test_tuple.size();i++){\n        if(test_tuple[i]=='(' || test_tuple[i]==')' || test_tuple[i]==','){\n            if(temp.size()>0){\n                result.push_back(temp);\n                temp.clear();\n            }\n        }\n        else{\n            temp+=test_tuple[i];\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.size()-1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i = 0; i < test_tuple.length(); i++) {\n        if(test_tuple[i] != ',') {\n            temp += test_tuple[i];\n        }\n        else {\n            result.push_back(temp);\n            temp = \"\";\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i = 0; i < test_tuple.length(); i++) {\n        if(test_tuple[i] == ',') {\n            result.push_back(temp);\n            temp.clear();\n        }\n        else {\n            temp += test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "  std::vector<std::string> result;\n  std::stringstream ss(test_tuple);\n  std::string token;\n  while(std::getline(ss, token, ',')) {\n    result.push_back(token.substr(token.find_last_of(\"0123456789\")));\n  }\n  return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i = 0; i < test_tuple.length(); i++) {\n        if(test_tuple[i] == ',') {\n            result.push_back(temp);\n            temp = \"\";\n        }\n        else {\n            temp += test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i = 0; i < test_tuple.size(); i++) {\n        if(test_tuple[i] == ',') {\n            result.push_back(temp);\n            temp = \"\";\n        }\n        else {\n            temp += test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    int i = 0;\n    while(i < test_tuple.length()) {\n        std::string temp = \"\";\n        while(test_tuple[i] != ',') {\n            temp += test_tuple[i];\n            i++;\n        }\n        result.push_back(temp);\n        i++;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while (std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.find_last_of('_') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    int i = 0;\n    while(test_tuple[i] != '\\0') {\n        if(test_tuple[i] == ',') {\n            result.push_back(temp);\n            temp.clear();\n        }\n        else {\n            temp.push_back(test_tuple[i]);\n        }\n        i++;\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i = 0; i < test_tuple.size(); i++) {\n        if(test_tuple[i] == '(' || test_tuple[i] == ')' || test_tuple[i] == ',') {\n            if(temp.size() > 0) {\n                result.push_back(temp);\n                temp.clear();\n            }\n        } else {\n            temp.push_back(test_tuple[i]);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp = \"\";\n    for(int i = 0; i < test_tuple.length(); i++) {\n        if(test_tuple[i] == ',') {\n            result.push_back(temp);\n            temp = \"\";\n        }\n        else {\n            temp += test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.length()-1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.size() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0;i<test_tuple.length();i++){\n        if(test_tuple[i]==','){\n            result.push_back(temp);\n            temp.clear();\n        }\n        else{\n            temp+=test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.size()-1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.size() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp = \"\";\n    for(int i = 0; i < test_tuple.length(); i++) {\n        if(test_tuple[i] == ',') {\n            result.push_back(temp);\n            temp = \"\";\n        }\n        else {\n            temp += test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.find_last_of('_') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.length()-1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    int i = 0;\n    while(test_tuple[i] != '\\0') {\n        if(test_tuple[i] == '(') {\n            i++;\n            while(test_tuple[i] != ')') {\n                temp += test_tuple[i];\n                i++;\n            }\n            result.push_back(temp);\n            temp.clear();\n        }\n        i++;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.find_last_of('_')+1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i = 0; i < test_tuple.size(); i++) {\n        if(test_tuple[i] == ',') {\n            result.push_back(temp);\n            temp = \"\";\n        }\n        else {\n            temp += test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0;i<test_tuple.size();i++){\n        if(test_tuple[i]==','){\n            result.push_back(temp);\n            temp.clear();\n        }\n        else{\n            temp.push_back(test_tuple[i]);\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while (std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.length() - 1));\n    }\n    return result;",
    "    // Write your code here\n    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0;i<test_tuple.size();i++){\n        if(test_tuple[i]==','){\n            result.push_back(temp);\n            temp.clear();\n        }\n        else if(test_tuple[i]=='('){\n            continue;\n        }\n        else if(test_tuple[i]==')'){\n            result.push_back(temp);\n            temp.clear();\n        }\n        else{\n            temp+=test_tuple[i];\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.find_last_of('_') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0;i<test_tuple.size();i++) {\n        if(test_tuple[i] == ',') {\n            result.push_back(temp);\n            temp.clear();\n        }\n        else {\n            temp.push_back(test_tuple[i]);\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.size()-1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp = \"\";\n    for(int i=0; i<test_tuple.length(); i++) {\n        if(test_tuple[i] == ',') {\n            result.push_back(temp);\n            temp = \"\";\n        }\n        else {\n            temp += test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.size() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0;i<test_tuple.length();i++){\n        if(test_tuple[i]==','){\n            result.push_back(temp);\n            temp.clear();\n        }\n        else{\n            temp+=test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.find_last_of('_') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.size() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.size() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.size()-1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.find_last_of('_') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i = 0; i < test_tuple.size(); i++) {\n        if(test_tuple[i] == ',') {\n            result.push_back(temp);\n            temp = \"\";\n        }\n        else {\n            temp += test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(ss >> temp) {\n        result.push_back(temp.substr(temp.length() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.find_last_of(' ') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.find_last_of('_') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.find_last_of('_') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i = 0; i < test_tuple.length(); i++) {\n        if(test_tuple[i] == ',') {\n            result.push_back(temp);\n            temp = \"\";\n        }\n        else {\n            temp += test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string word;\n    while(ss >> word) {\n        result.push_back(word.substr(word.length()-1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.find_last_of('_') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp = \"\";\n    for (int i = 0; i < test_tuple.length(); i++) {\n        if (test_tuple[i] == ',') {\n            result.push_back(temp);\n            temp = \"\";\n        }\n        else {\n            temp += test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.length() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while (std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.find_last_of(\"0123456789\")));\n    }\n    return result;",
    "    std::vector<std::string> rear_index_elements;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while (std::getline(ss, token, ',')) {\n        rear_index_elements.push_back(token.substr(token.size()-1));\n    }\n    return rear_index_elements;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string s;\n    while (std::getline(ss, s, ',')) {\n        result.push_back(s.substr(s.find_last_of('_') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0;i<test_tuple.length();i++)\n    {\n        if(test_tuple[i]=='(')\n        {\n            temp=\"\";\n        }\n        else if(test_tuple[i]==',')\n        {\n            result.push_back(temp);\n            temp=\"\";\n        }\n        else if(test_tuple[i]==')')\n        {\n            result.push_back(temp);\n            temp=\"\";\n        }\n        else\n        {\n            temp+=test_tuple[i];\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i = 0; i < test_tuple.length(); i++) {\n        if(test_tuple[i] == ',') {\n            result.push_back(temp);\n            temp = \"\";\n        }\n        else {\n            temp += test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i = 0; i < test_tuple.size(); i++) {\n        if(test_tuple[i] == ',') {\n            result.push_back(temp);\n            temp.clear();\n        } else {\n            temp += test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.size()-1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0;i<test_tuple.size();i++){\n        if(test_tuple[i]=='('){\n            temp.clear();\n            continue;\n        }\n        if(test_tuple[i]==')'){\n            result.push_back(temp);\n            continue;\n        }\n        temp.push_back(test_tuple[i]);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i = 0; i < test_tuple.size(); i++) {\n        if(test_tuple[i] == ',') {\n            result.push_back(temp);\n            temp.clear();\n        }\n        else {\n            temp.push_back(test_tuple[i]);\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0;i<test_tuple.length();i++)\n    {\n        if(test_tuple[i]==',')\n        {\n            result.push_back(temp);\n            temp.clear();\n        }\n        else\n        {\n            temp.push_back(test_tuple[i]);\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.size() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.size() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.length() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while (std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.find_last_of('_') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    int i = 0;\n    while(test_tuple[i] != '\\0') {\n        if(test_tuple[i] == ',') {\n            result.push_back(temp);\n            temp = \"\";\n        }\n        else {\n            temp += test_tuple[i];\n        }\n        i++;\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.find_last_of('_') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0;i<test_tuple.size();i++){\n        if(test_tuple[i]==','){\n            result.push_back(temp);\n            temp.clear();\n        }\n        else{\n            temp+=test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "\tstd::vector<std::string> result;\n\tstd::string temp;\n\tfor (int i = 0; i < test_tuple.size(); i++) {\n\t\tif (test_tuple[i] == ',') {\n\t\t\tresult.push_back(temp);\n\t\t\ttemp = \"\";\n\t\t}\n\t\telse {\n\t\t\ttemp += test_tuple[i];\n\t\t}\n\t}\n\tresult.push_back(temp);\n\treturn result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item.substr(item.find_last_of(\"0123456789\")));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp = \"\";\n    for(int i = 0; i < test_tuple.size(); i++) {\n        if(test_tuple[i] == ',') {\n            result.push_back(temp);\n            temp = \"\";\n        }\n        else {\n            temp += test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i = 0; i < test_tuple.size(); i++){\n        if(test_tuple[i] == ','){\n            result.push_back(temp);\n            temp.clear();\n        }\n        else{\n            temp += test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.find_last_of('_') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i = 0; i < test_tuple.size(); i++) {\n        if(test_tuple[i] != ',') {\n            temp += test_tuple[i];\n        }\n        else {\n            result.push_back(temp);\n            temp.clear();\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0; i<test_tuple.length(); i++) {\n        if(test_tuple[i] == ',') {\n            result.push_back(temp);\n            temp.clear();\n        }\n        else {\n            temp += test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.find_last_of(\" \") + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (int i = 0; i < test_tuple.length(); i++) {\n        if (test_tuple[i] == ',') {\n            result.push_back(temp);\n            temp = \"\";\n        } else {\n            temp += test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0;i<test_tuple.size();i++){\n        if(test_tuple[i]==','){\n            result.push_back(temp);\n            temp.clear();\n        }\n        else{\n            temp.push_back(test_tuple[i]);\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.size() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.size() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while (std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.find_last_of('_') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (int i = 0; i < test_tuple.length(); i++) {\n        if (test_tuple[i] == ',') {\n            result.push_back(temp);\n            temp = \"\";\n        } else {\n            temp += test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (int i = 0; i < test_tuple.size(); i++) {\n        if (test_tuple[i] == ',') {\n            result.push_back(temp);\n            temp = \"\";\n        }\n        else {\n            temp += test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0;i<test_tuple.length();i++){\n        if(test_tuple[i]==','){\n            result.push_back(temp);\n            temp=\"\";\n        }\n        else if(test_tuple[i]=='('){\n            continue;\n        }\n        else if(test_tuple[i]==')'){\n            result.push_back(temp);\n            temp=\"\";\n        }\n        else{\n            temp+=test_tuple[i];\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string word;\n    while(ss >> word) {\n        result.push_back(word.substr(word.size()-1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.length()-1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while (std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.length() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.find_last_of('_') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item.substr(item.length() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp = \"\";\n    for(int i=0;i<test_tuple.size();i++) {\n        if(test_tuple[i] == ',') {\n            result.push_back(temp);\n            temp = \"\";\n        }\n        else {\n            temp += test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0;i<test_tuple.length();i++){\n        if(test_tuple[i]==','){\n            result.push_back(temp);\n            temp.clear();\n        }\n        else{\n            temp+=test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0;i<test_tuple.size();i++)\n    {\n        if(test_tuple[i]!=',')\n        {\n            temp.push_back(test_tuple[i]);\n        }\n        else\n        {\n            result.push_back(temp);\n            temp.clear();\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i = 0; i < test_tuple.length(); i++) {\n        if(test_tuple[i] == ',') {\n            result.push_back(temp);\n            temp = \"\";\n        } else {\n            temp += test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.size() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.find_last_of(' ') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        std::stringstream ss2(token);\n        std::string token2;\n        std::getline(ss2, token2, ':');\n        result.push_back(token2);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    int i = 0;\n    int j = 0;\n    while (i < test_tuple.size()) {\n        if (test_tuple[i] == '(') {\n            j = i + 1;\n            while (test_tuple[j] != ')') {\n                j++;\n            }\n            result.push_back(test_tuple.substr(i + 1, j - i - 1));\n            i = j + 1;\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.find_last_of('_') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    int i = 0;\n    while(test_tuple[i] != '\\0') {\n        if(test_tuple[i] == ',') {\n            result.push_back(temp);\n            temp.clear();\n        }\n        else {\n            temp.push_back(test_tuple[i]);\n        }\n        i++;\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> rear_index_elements;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while (std::getline(ss, token, ',')) {\n        rear_index_elements.push_back(token.substr(token.find_last_of(\" \") + 1));\n    }\n    return rear_index_elements;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.find_last_of(' ') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.size() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.find_last_of(' ') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i = 0; i < test_tuple.size(); i++) {\n        if(test_tuple[i] == ',') {\n            result.push_back(temp);\n            temp.clear();\n        }\n        else {\n            temp += test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.find_last_of(' ') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.length()-1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.find_last_of('_') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.length()-1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0;i<test_tuple.length();i++){\n        if(test_tuple[i]==','){\n            result.push_back(temp);\n            temp=\"\";\n        }\n        else{\n            temp+=test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp = \"\";\n    for(int i = 0; i < test_tuple.size(); i++) {\n        if(test_tuple[i] == ',') {\n            result.push_back(temp);\n            temp = \"\";\n        }\n        else {\n            temp += test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.size()-1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.find_last_of(' ') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.size() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0;i<test_tuple.length();i++) {\n        if(test_tuple[i]==',') {\n            result.push_back(temp);\n            temp.clear();\n        } else {\n            temp.push_back(test_tuple[i]);\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0;i<test_tuple.length();i++){\n        if(test_tuple[i]==','){\n            result.push_back(temp);\n            temp=\"\";\n        }\n        else if(test_tuple[i]==')'){\n            result.push_back(temp);\n            temp=\"\";\n        }\n        else{\n            temp+=test_tuple[i];\n        }\n    }\n    return result;",
    "\tstd::vector<std::string> result;\n\tstd::string temp = \"\";\n\tfor (int i = 0; i < test_tuple.length(); i++) {\n\t\tif (test_tuple[i] == ',') {\n\t\t\tresult.push_back(temp);\n\t\t\ttemp = \"\";\n\t\t}\n\t\telse {\n\t\t\ttemp += test_tuple[i];\n\t\t}\n\t}\n\tresult.push_back(temp);\n\treturn result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.find_last_of('.')+1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i = 0; i < test_tuple.size(); i++) {\n        if(test_tuple[i] == ',') {\n            result.push_back(temp);\n            temp = \"\";\n        }\n        else {\n            temp += test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.size() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.length() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.find_last_of('_') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0;i<test_tuple.length();i++)\n    {\n        if(test_tuple[i]=='(')\n        {\n            temp=\"\";\n        }\n        else if(test_tuple[i]==')')\n        {\n            result.push_back(temp);\n        }\n        else\n        {\n            temp+=test_tuple[i];\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i = 0; i < test_tuple.size(); i++) {\n        if(test_tuple[i] == ',') {\n            result.push_back(temp);\n            temp = \"\";\n        } else {\n            temp += test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.length() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(getline(ss, token, ',')) {\n        result.push_back(token.substr(token.find_last_of(\" \") + 1));\n    }\n    return result;"
  ]
}