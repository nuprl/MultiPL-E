{
  "name": "mbpp_732_replace_specialchar",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nstd::string replace_specialchar(std::string text) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_732_replace_specialchar.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = replace_specialchar;\n    assert(candidate((\"Python language, Programming language.\")) == (\"Python:language::Programming:language:\"));\n    assert(candidate((\"a b c,d e f\")) == (\"a:b:c:d:e:f\"));\n    assert(candidate((\"ram reshma,ram rahim\")) == (\"ram:reshma:ram:rahim\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::string result;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ' || text[i] == ',' || text[i] == '.') {\n            result += ':';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ' || text[i] == ',' || text[i] == '.') {\n            result += ':';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto c : text) {\n        if (c == ' ' || c == ',' || c == '.') {\n            result += ':';\n        } else {\n            result += c;\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == ' ' || text[i] == ',' || text[i] == '.') {\n            result += ':';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ' || text[i] == ',' || text[i] == '.') {\n            result += ':';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;",
    "\tstd::string result = \"\";\n\tfor (int i = 0; i < text.length(); i++) {\n\t\tif (text[i] == ' ' || text[i] == ',' || text[i] == '.') {\n\t\t\tresult += ':';\n\t\t}\n\t\telse {\n\t\t\tresult += text[i];\n\t\t}\n\t}\n\treturn result;",
    "    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ' || text[i] == ',' || text[i] == '.') {\n            result += ':';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;",
    "    std::string result;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ' || text[i] == ',' || text[i] == '.') {\n            result += ':';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;",
    "    std::string result;\n    for (char c : text) {\n        if (c == ' ' || c == ',' || c == '.') {\n            result += ':';\n        } else {\n            result += c;\n        }\n    }\n    return result;",
    "    std::string result;\n    for (char c : text) {\n        if (c == ' ' || c == ',' || c == '.') {\n            result += ':';\n        } else {\n            result += c;\n        }\n    }\n    return result;",
    "    std::string result;\n    for (char c : text) {\n        if (c == ' ' || c == ',' || c == '.') {\n            result += ':';\n        } else {\n            result += c;\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ' || text[i] == ',' || text[i] == '.') {\n            result += ':';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ' || text[i] == ',' || text[i] == '.') {\n            result += ':';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;",
    "    std::string result;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ' || text[i] == ',' || text[i] == '.') {\n            result += ':';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;",
    "    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ' || text[i] == ',' || text[i] == '.') {\n            text[i] = ':';\n        }\n    }\n    return text;",
    "    std::string result;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ' || text[i] == ',' || text[i] == '.') {\n            result += ':';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;",
    "    std::string result;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ' || text[i] == ',' || text[i] == '.') {\n            result += ':';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ' || text[i] == ',' || text[i] == '.') {\n            result += ':';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;",
    "    std::string result;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ' || text[i] == ',' || text[i] == '.') {\n            result += ':';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;",
    "    std::string result;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ' || text[i] == ',' || text[i] == '.') {\n            result += ':';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;"
  ]
}