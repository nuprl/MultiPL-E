{
  "name": "mbpp_427_change_date_format",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_427_change_date_format.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string res = \"\";\n    std::string year = \"\";\n    std::string month = \"\";\n    std::string day = \"\";\n    int i = 0;\n    while(dt[i] != '-') {\n        year += dt[i];\n        i++;\n    }\n    i++;\n    while(dt[i] != '-') {\n        month += dt[i];\n        i++;\n    }\n    i++;\n    while(i < dt.size()) {\n        day += dt[i];\n        i++;\n    }\n    res += day + \"-\" + month + \"-\" + year;\n    return res;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string year = dt.substr(0,4);\n    std::string month = dt.substr(5,2);\n    std::string day = dt.substr(8,2);\n    return day + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string year = dt.substr(0, 4);\n    std::string month = dt.substr(5, 2);\n    std::string day = dt.substr(8, 2);\n    return day + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd, mm, yyyy;\n    dd = dt.substr(8, 2);\n    mm = dt.substr(5, 2);\n    yyyy = dt.substr(0, 4);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string year = dt.substr(0,4);\n    std::string month = dt.substr(5,2);\n    std::string day = dt.substr(8,2);\n    std::string new_dt = day + \"-\" + month + \"-\" + year;\n    return new_dt;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string day = dt.substr(8,2);\n    std::string month = dt.substr(5,2);\n    std::string year = dt.substr(0,4);\n    return day + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string yyyy = dt.substr(0,4);\n    std::string mm = dt.substr(5,2);\n    std::string dd = dt.substr(8,2);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string year = dt.substr(0, 4);\n    std::string month = dt.substr(5, 2);\n    std::string day = dt.substr(8, 2);\n    return day + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd, mm, yyyy;\n    int i = 0;\n    while(dt[i] != '-') {\n        yyyy += dt[i];\n        i++;\n    }\n    i++;\n    while(dt[i] != '-') {\n        mm += dt[i];\n        i++;\n    }\n    i++;\n    while(i < dt.size()) {\n        dd += dt[i];\n        i++;\n    }\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::stringstream ss(dt);\n    std::string year, month, day;\n    std::getline(ss, year, '-');\n    std::getline(ss, month, '-');\n    std::getline(ss, day, '-');\n    return day + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    assert(dt.size() == 10);\n    std::string ans = \"\";\n    ans += dt[8];\n    ans += dt[9];\n    ans += \"-\";\n    ans += dt[5];\n    ans += dt[6];\n    ans += \"-\";\n    ans += dt[0];\n    ans += dt[1];\n    ans += dt[2];\n    ans += dt[3];\n    return ans;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::stringstream ss(dt);\n    std::string year, month, day;\n    std::getline(ss, year, '-');\n    std::getline(ss, month, '-');\n    std::getline(ss, day, '-');\n    return day + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd = dt.substr(8,2);\n    std::string mm = dt.substr(5,2);\n    std::string yyyy = dt.substr(0,4);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::stringstream ss(dt);\n    std::string year, month, day;\n    std::getline(ss, year, '-');\n    std::getline(ss, month, '-');\n    std::getline(ss, day, '-');\n    return day + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string yyyy = dt.substr(0,4);\n    std::string mm = dt.substr(5,2);\n    std::string dd = dt.substr(8,2);\n    std::string new_dt = dd + \"-\" + mm + \"-\" + yyyy;\n    return new_dt;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::stringstream ss;\n    ss << dt;\n    std::string y, m, d;\n    std::getline(ss, y, '-');\n    std::getline(ss, m, '-');\n    std::getline(ss, d, '-');\n    return d + \"-\" + m + \"-\" + y;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::stringstream ss(dt);\n    std::string year, month, day;\n    std::getline(ss, year, '-');\n    std::getline(ss, month, '-');\n    std::getline(ss, day, '-');\n    return day + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string year = dt.substr(0,4);\n    std::string month = dt.substr(5,2);\n    std::string day = dt.substr(8,2);\n    return day + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd, mm, yyyy;\n    dd = dt.substr(8, 2);\n    mm = dt.substr(5, 2);\n    yyyy = dt.substr(0, 4);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string year = dt.substr(0,4);\n    std::string month = dt.substr(5,2);\n    std::string day = dt.substr(8,2);\n    return day + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::stringstream ss(dt);\n    std::string year, month, day;\n    std::getline(ss, year, '-');\n    std::getline(ss, month, '-');\n    std::getline(ss, day, '-');\n    return day + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string year = dt.substr(0, 4);\n    std::string month = dt.substr(5, 2);\n    std::string day = dt.substr(8, 2);\n    return day + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string new_dt = \"\";\n    std::string year = \"\";\n    std::string month = \"\";\n    std::string day = \"\";\n    int i = 0;\n    for(; i < dt.length(); i++) {\n        if(dt[i] == '-') {\n            break;\n        }\n        year += dt[i];\n    }\n    i++;\n    for(; i < dt.length(); i++) {\n        if(dt[i] == '-') {\n            break;\n        }\n        month += dt[i];\n    }\n    i++;\n    for(; i < dt.length(); i++) {\n        if(dt[i] == '-') {\n            break;\n        }\n        day += dt[i];\n    }\n    new_dt = day + \"-\" + month + \"-\" + year;\n    return new_dt;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string yyyy = dt.substr(0, 4);\n    std::string mm = dt.substr(5, 2);\n    std::string dd = dt.substr(8, 2);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd = dt.substr(8,2);\n    std::string mm = dt.substr(5,2);\n    std::string yyyy = dt.substr(0,4);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::stringstream ss;\n    ss << dt;\n    std::string year, month, day;\n    std::getline(ss, year, '-');\n    std::getline(ss, month, '-');\n    std::getline(ss, day, '-');\n    return day + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string res = \"\";\n    std::stringstream ss(dt);\n    std::string temp;\n    std::vector<std::string> v;\n    while(std::getline(ss, temp, '-')) {\n        v.push_back(temp);\n    }\n    res += v[2] + \"-\" + v[1] + \"-\" + v[0];\n    return res;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::stringstream ss(dt);\n    std::string year, month, day;\n    std::getline(ss, year, '-');\n    std::getline(ss, month, '-');\n    std::getline(ss, day, '-');\n    return day + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    assert(dt.size() == 10);\n    std::string ans = \"\";\n    ans += dt[8];\n    ans += dt[9];\n    ans += \"-\";\n    ans += dt[5];\n    ans += dt[6];\n    ans += \"-\";\n    ans += dt[0];\n    ans += dt[1];\n    ans += dt[2];\n    ans += dt[3];\n    return ans;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd = dt.substr(8,2);\n    std::string mm = dt.substr(5,2);\n    std::string yyyy = dt.substr(0,4);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd, mm, yyyy;\n    dd = dt.substr(8, 2);\n    mm = dt.substr(5, 2);\n    yyyy = dt.substr(0, 4);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string year = dt.substr(0,4);\n    std::string month = dt.substr(5,2);\n    std::string day = dt.substr(8,2);\n    return day + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd, mm, yyyy;\n    dd = dt.substr(8, 2);\n    mm = dt.substr(5, 2);\n    yyyy = dt.substr(0, 4);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string ans = \"\";\n    ans += dt.substr(8,2);\n    ans += \"-\";\n    ans += dt.substr(5,2);\n    ans += \"-\";\n    ans += dt.substr(0,4);\n    return ans;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string yyyy = dt.substr(0, 4);\n    std::string mm = dt.substr(5, 2);\n    std::string dd = dt.substr(8, 2);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string year = dt.substr(0,4);\n    std::string month = dt.substr(5,2);\n    std::string day = dt.substr(8,2);\n    return day + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n  std::string year = dt.substr(0,4);\n  std::string month = dt.substr(5,2);\n  std::string day = dt.substr(8,2);\n  return day + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd, mm, yyyy;\n    dd = dt.substr(8, 2);\n    mm = dt.substr(5, 2);\n    yyyy = dt.substr(0, 4);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string yyyy = dt.substr(0,4);\n    std::string mm = dt.substr(5,2);\n    std::string dd = dt.substr(8,2);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd, mm, yyyy;\n    dd = dt.substr(8, 2);\n    mm = dt.substr(5, 2);\n    yyyy = dt.substr(0, 4);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd, mm, yyyy;\n    dd = dt.substr(8, 2);\n    mm = dt.substr(5, 2);\n    yyyy = dt.substr(0, 4);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string day = dt.substr(8,2);\n    std::string month = dt.substr(5,2);\n    std::string year = dt.substr(0,4);\n    return day + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n\tstd::string ans = \"\";\n\tans += dt[8];\n\tans += dt[9];\n\tans += \"-\";\n\tans += dt[5];\n\tans += dt[6];\n\tans += \"-\";\n\tans += dt[0];\n\tans += dt[1];\n\tans += dt[2];\n\tans += dt[3];\n\treturn ans;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string ans = \"\";\n    ans += dt[8];\n    ans += dt[9];\n    ans += '-';\n    ans += dt[5];\n    ans += dt[6];\n    ans += '-';\n    ans += dt[0];\n    ans += dt[1];\n    ans += dt[2];\n    ans += dt[3];\n    return ans;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd, mm, yyyy;\n    int i = 0;\n    while(dt[i] != '-') {\n        yyyy += dt[i];\n        i++;\n    }\n    i++;\n    while(dt[i] != '-') {\n        mm += dt[i];\n        i++;\n    }\n    i++;\n    while(i < dt.length()) {\n        dd += dt[i];\n        i++;\n    }\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string ans = \"\";\n    ans += dt.substr(8,2);\n    ans += \"-\";\n    ans += dt.substr(5,2);\n    ans += \"-\";\n    ans += dt.substr(0,4);\n    return ans;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd, mm, yyyy;\n    dd = dt.substr(8, 2);\n    mm = dt.substr(5, 2);\n    yyyy = dt.substr(0, 4);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd, mm, yyyy;\n    dd = dt.substr(8, 2);\n    mm = dt.substr(5, 2);\n    yyyy = dt.substr(0, 4);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd, mm, yyyy;\n    dd = dt.substr(8, 2);\n    mm = dt.substr(5, 2);\n    yyyy = dt.substr(0, 4);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string yyyy = dt.substr(0,4);\n    std::string mm = dt.substr(5,2);\n    std::string dd = dt.substr(8,2);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::stringstream ss(dt);\n    std::string year, month, day;\n    std::getline(ss, year, '-');\n    std::getline(ss, month, '-');\n    std::getline(ss, day, '-');\n    return day + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string ans = \"\";\n    ans += dt[8];\n    ans += dt[9];\n    ans += \"-\";\n    ans += dt[5];\n    ans += dt[6];\n    ans += \"-\";\n    ans += dt[0];\n    ans += dt[1];\n    ans += dt[2];\n    ans += dt[3];\n    return ans;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd, mm, yyyy;\n    dd = dt.substr(8, 2);\n    mm = dt.substr(5, 2);\n    yyyy = dt.substr(0, 4);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd, mm, yyyy;\n    dd = dt.substr(8, 2);\n    mm = dt.substr(5, 2);\n    yyyy = dt.substr(0, 4);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::stringstream ss(dt);\n    std::string y, m, d;\n    std::getline(ss, y, '-');\n    std::getline(ss, m, '-');\n    std::getline(ss, d, '-');\n    return d + \"-\" + m + \"-\" + y;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::stringstream ss(dt);\n    std::string y, m, d;\n    std::getline(ss, y, '-');\n    std::getline(ss, m, '-');\n    std::getline(ss, d, '-');\n    return d + \"-\" + m + \"-\" + y;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd, mm, yyyy;\n    dd = dt.substr(8, 2);\n    mm = dt.substr(5, 2);\n    yyyy = dt.substr(0, 4);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::stringstream ss(dt);\n    std::string y, m, d;\n    std::getline(ss, y, '-');\n    std::getline(ss, m, '-');\n    std::getline(ss, d, '-');\n    return d + \"-\" + m + \"-\" + y;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd = dt.substr(8,2);\n    std::string mm = dt.substr(5,2);\n    std::string yyyy = dt.substr(0,4);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string year = dt.substr(0, 4);\n    std::string month = dt.substr(5, 2);\n    std::string day = dt.substr(8, 2);\n    return day + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd, mm, yyyy;\n    dd = dt.substr(8, 2);\n    mm = dt.substr(5, 2);\n    yyyy = dt.substr(0, 4);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string year = dt.substr(0,4);\n    std::string month = dt.substr(5,2);\n    std::string day = dt.substr(8,2);\n    return day + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string date = dt.substr(0,2);\n    std::string month = dt.substr(3,2);\n    std::string year = dt.substr(6,4);\n    return year + \"-\" + month + \"-\" + date;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123442,
      "stdout": "",
      "stderr": "tmpo_a5su97: /tmp/tmpo_a5su97.cpp:12: int main(): Assertion `candidate((\"2026-01-02\")) == (\"02-01-2026\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::stringstream ss(dt);\n    std::string yyyy, mm, dd;\n    std::getline(ss, yyyy, '-');\n    std::getline(ss, mm, '-');\n    std::getline(ss, dd, '-');\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string new_dt;\n    std::stringstream ss(dt);\n    std::string year, month, day;\n    std::getline(ss, year, '-');\n    std::getline(ss, month, '-');\n    std::getline(ss, day, '-');\n    new_dt = day + \"-\" + month + \"-\" + year;\n    return new_dt;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string year = dt.substr(0,4);\n    std::string month = dt.substr(5,2);\n    std::string day = dt.substr(8,2);\n    return day + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string year, month, day;\n    year = dt.substr(0, 4);\n    month = dt.substr(5, 2);\n    day = dt.substr(8, 2);\n    return day + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string year = dt.substr(0, 4);\n    std::string month = dt.substr(5, 2);\n    std::string day = dt.substr(8, 2);\n    return day + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd = dt.substr(8,2);\n    std::string mm = dt.substr(5,2);\n    std::string yyyy = dt.substr(0,4);\n    return dd+\"-\"+mm+\"-\"+yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string res;\n    std::stringstream ss(dt);\n    std::string year, month, day;\n    std::getline(ss, year, '-');\n    std::getline(ss, month, '-');\n    std::getline(ss, day, '-');\n    res = day + \"-\" + month + \"-\" + year;\n    return res;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string day = dt.substr(8,2);\n    std::string month = dt.substr(5,2);\n    std::string year = dt.substr(0,4);\n    return day+\"-\"+month+\"-\"+year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::stringstream ss(dt);\n    std::string year, month, day;\n    std::getline(ss, year, '-');\n    std::getline(ss, month, '-');\n    std::getline(ss, day, '-');\n    return day + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd = dt.substr(8,2);\n    std::string mm = dt.substr(5,2);\n    std::string yyyy = dt.substr(0,4);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    assert(dt.size() == 10);\n    std::string dd = dt.substr(8,2);\n    std::string mm = dt.substr(5,2);\n    std::string yyyy = dt.substr(0,4);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string ans = \"\";\n    ans += dt[8];\n    ans += dt[9];\n    ans += \"-\";\n    ans += dt[5];\n    ans += dt[6];\n    ans += \"-\";\n    ans += dt[0];\n    ans += dt[1];\n    ans += dt[2];\n    ans += dt[3];\n    return ans;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd, mm, yyyy;\n    dd = dt.substr(8, 2);\n    mm = dt.substr(5, 2);\n    yyyy = dt.substr(0, 4);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string year, month, day;\n    year = dt.substr(0, 4);\n    month = dt.substr(5, 2);\n    day = dt.substr(8, 2);\n    return day + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::stringstream ss(dt);\n    std::string year, month, day;\n    std::getline(ss, year, '-');\n    std::getline(ss, month, '-');\n    std::getline(ss, day, '-');\n    return day + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd = dt.substr(8,2);\n    std::string mm = dt.substr(5,2);\n    std::string yyyy = dt.substr(0,4);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string year = dt.substr(0,4);\n    std::string month = dt.substr(5,2);\n    std::string day = dt.substr(8,2);\n    return day + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd, mm, yyyy;\n    int i = 0;\n    while (dt[i] != '-') {\n        yyyy += dt[i];\n        i++;\n    }\n    i++;\n    while (dt[i] != '-') {\n        mm += dt[i];\n        i++;\n    }\n    i++;\n    while (i < dt.size()) {\n        dd += dt[i];\n        i++;\n    }\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string yyyy = dt.substr(0,4);\n    std::string mm = dt.substr(5,2);\n    std::string dd = dt.substr(8,2);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string year = dt.substr(0, 4);\n    std::string month = dt.substr(5, 2);\n    std::string day = dt.substr(8, 2);\n    return day + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd = dt.substr(8,2);\n    std::string mm = dt.substr(5,2);\n    std::string yyyy = dt.substr(0,4);\n    return dd+\"-\"+mm+\"-\"+yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd, mm, yyyy;\n    int i = 0;\n    while(dt[i] != '-') {\n        yyyy += dt[i];\n        i++;\n    }\n    i++;\n    while(dt[i] != '-') {\n        mm += dt[i];\n        i++;\n    }\n    i++;\n    while(i < dt.length()) {\n        dd += dt[i];\n        i++;\n    }\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd, mm, yyyy;\n    dd = dt.substr(8, 2);\n    mm = dt.substr(5, 2);\n    yyyy = dt.substr(0, 4);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::stringstream ss(dt);\n    std::string year, month, day;\n    std::getline(ss, year, '-');\n    std::getline(ss, month, '-');\n    std::getline(ss, day, '-');\n    return day + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::stringstream ss(dt);\n    std::string yyyy, mm, dd;\n    std::getline(ss, yyyy, '-');\n    std::getline(ss, mm, '-');\n    std::getline(ss, dd, '-');\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd, mm, yyyy;\n    dd = dt.substr(8, 2);\n    mm = dt.substr(5, 2);\n    yyyy = dt.substr(0, 4);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::stringstream ss;\n    ss << dt;\n    std::string y, m, d;\n    std::getline(ss, y, '-');\n    std::getline(ss, m, '-');\n    std::getline(ss, d, '-');\n    return d + \"-\" + m + \"-\" + y;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string ans = \"\";\n    ans += dt[8];\n    ans += dt[9];\n    ans += \"-\";\n    ans += dt[5];\n    ans += dt[6];\n    ans += \"-\";\n    ans += dt[0];\n    ans += dt[1];\n    ans += dt[2];\n    ans += dt[3];\n    return ans;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string ans = \"\";\n    ans += dt[8];\n    ans += dt[9];\n    ans += \"-\";\n    ans += dt[5];\n    ans += dt[6];\n    ans += \"-\";\n    ans += dt[0];\n    ans += dt[1];\n    ans += dt[2];\n    ans += dt[3];\n    return ans;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd, mm, yyyy;\n    dd = dt.substr(8, 2);\n    mm = dt.substr(5, 2);\n    yyyy = dt.substr(0, 4);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string year = dt.substr(0, 4);\n    std::string month = dt.substr(5, 2);\n    std::string day = dt.substr(8, 2);\n    return day + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::stringstream ss(dt);\n    std::string year, month, day;\n    std::getline(ss, year, '-');\n    std::getline(ss, month, '-');\n    std::getline(ss, day, '-');\n    return day + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd, mm, yyyy;\n    int i = 0;\n    while(dt[i] != '-') {\n        yyyy += dt[i];\n        i++;\n    }\n    i++;\n    while(dt[i] != '-') {\n        mm += dt[i];\n        i++;\n    }\n    i++;\n    while(i < dt.length()) {\n        dd += dt[i];\n        i++;\n    }\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string day = dt.substr(8,2);\n    std::string month = dt.substr(5,2);\n    std::string year = dt.substr(0,4);\n    return day + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string year = dt.substr(0, 4);\n    std::string month = dt.substr(5, 2);\n    std::string day = dt.substr(8, 2);\n    return day + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string ans = \"\";\n    std::string year = \"\";\n    std::string month = \"\";\n    std::string day = \"\";\n    int i = 0;\n    while(dt[i] != '-') {\n        year += dt[i];\n        i++;\n    }\n    i++;\n    while(dt[i] != '-') {\n        month += dt[i];\n        i++;\n    }\n    i++;\n    while(i < dt.length()) {\n        day += dt[i];\n        i++;\n    }\n    ans += day + \"-\" + month + \"-\" + year;\n    return ans;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::stringstream ss(dt);\n    std::string y, m, d;\n    std::getline(ss, y, '-');\n    std::getline(ss, m, '-');\n    std::getline(ss, d, '-');\n    return d + \"-\" + m + \"-\" + y;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::stringstream ss(dt);\n    std::string yyyy, mm, dd;\n    std::getline(ss, yyyy, '-');\n    std::getline(ss, mm, '-');\n    std::getline(ss, dd, '-');\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::stringstream ss(dt);\n    std::string year, month, day;\n    std::getline(ss, year, '-');\n    std::getline(ss, month, '-');\n    std::getline(ss, day, '-');\n    return day + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd = dt.substr(8,2);\n    std::string mm = dt.substr(5,2);\n    std::string yyyy = dt.substr(0,4);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string ans = \"\";\n    ans += dt[8];\n    ans += dt[9];\n    ans += '-';\n    ans += dt[5];\n    ans += dt[6];\n    ans += '-';\n    ans += dt[0];\n    ans += dt[1];\n    ans += dt[2];\n    ans += dt[3];\n    return ans;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n  std::string dd, mm, yyyy;\n  dd = dt.substr(8, 2);\n  mm = dt.substr(5, 2);\n  yyyy = dt.substr(0, 4);\n  return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::stringstream ss(dt);\n    std::string item;\n    std::vector<std::string> v;\n    while (std::getline(ss, item, '-')) {\n        v.push_back(item);\n    }\n    std::string new_dt = v[2] + \"-\" + v[1] + \"-\" + v[0];\n    return new_dt;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string year = dt.substr(0,4);\n    std::string month = dt.substr(5,2);\n    std::string day = dt.substr(8,2);\n    return day + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::stringstream ss(dt);\n    std::string year, month, day;\n    std::getline(ss, year, '-');\n    std::getline(ss, month, '-');\n    std::getline(ss, day, '-');\n    return day + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd = dt.substr(8,2);\n    std::string mm = dt.substr(5,2);\n    std::string yyyy = dt.substr(0,4);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd = dt.substr(8,2);\n    std::string mm = dt.substr(5,2);\n    std::string yyyy = dt.substr(0,4);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd, mm, yyyy;\n    dd = dt.substr(8, 2);\n    mm = dt.substr(5, 2);\n    yyyy = dt.substr(0, 4);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::stringstream ss(dt);\n    std::string temp;\n    std::vector<std::string> v;\n    while(std::getline(ss, temp, '-')) {\n        v.push_back(temp);\n    }\n    std::string ans = v[2] + \"-\" + v[1] + \"-\" + v[0];\n    return ans;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123443,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string yyyy = dt.substr(0,4);\n    std::string mm = dt.substr(5,2);\n    std::string dd = dt.substr(8,2);\n    return dd+\"-\"+mm+\"-\"+yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123443,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd, mm, yyyy;\n    dd = dt.substr(8, 2);\n    mm = dt.substr(5, 2);\n    yyyy = dt.substr(0, 4);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd = dt.substr(8,2);\n    std::string mm = dt.substr(5,2);\n    std::string yyyy = dt.substr(0,4);\n    return dd+\"-\"+mm+\"-\"+yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::stringstream ss(dt);\n    std::string yy, mm, dd;\n    std::getline(ss, yy, '-');\n    std::getline(ss, mm, '-');\n    std::getline(ss, dd, '-');\n    return dd + \"-\" + mm + \"-\" + yy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123443,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string ans;\n    ans.push_back(dt[8]);\n    ans.push_back(dt[9]);\n    ans.push_back('-');\n    ans.push_back(dt[5]);\n    ans.push_back(dt[6]);\n    ans.push_back('-');\n    ans.push_back(dt[0]);\n    ans.push_back(dt[1]);\n    ans.push_back(dt[2]);\n    ans.push_back(dt[3]);\n    return ans;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123443,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string year = dt.substr(0, 4);\n    std::string month = dt.substr(5, 2);\n    std::string day = dt.substr(8, 2);\n    return day + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string year = dt.substr(0,4);\n    std::string month = dt.substr(5,2);\n    std::string day = dt.substr(8,2);\n    return day + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dt_new;\n    dt_new.push_back(dt[8]);\n    dt_new.push_back(dt[9]);\n    dt_new.push_back('-');\n    dt_new.push_back(dt[5]);\n    dt_new.push_back(dt[6]);\n    dt_new.push_back('-');\n    dt_new.push_back(dt[0]);\n    dt_new.push_back(dt[1]);\n    dt_new.push_back(dt[2]);\n    dt_new.push_back(dt[3]);\n    return dt_new;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123443,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string ans = \"\";\n    ans += dt[8];\n    ans += dt[9];\n    ans += \"-\";\n    ans += dt[5];\n    ans += dt[6];\n    ans += \"-\";\n    ans += dt[0];\n    ans += dt[1];\n    ans += dt[2];\n    ans += dt[3];\n    return ans;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    assert(dt.size() == 10);\n    std::string dd = dt.substr(8, 2);\n    std::string mm = dt.substr(5, 2);\n    std::string yyyy = dt.substr(0, 4);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123443,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string ans = \"\";\n    ans += dt[8];\n    ans += dt[9];\n    ans += \"-\";\n    ans += dt[5];\n    ans += dt[6];\n    ans += \"-\";\n    ans += dt[0];\n    ans += dt[1];\n    ans += dt[2];\n    ans += dt[3];\n    return ans;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string day = dt.substr(8,2);\n    std::string month = dt.substr(5,2);\n    std::string year = dt.substr(0,4);\n    return day + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dt_new;\n    dt_new.push_back(dt[8]);\n    dt_new.push_back(dt[9]);\n    dt_new.push_back('-');\n    dt_new.push_back(dt[5]);\n    dt_new.push_back(dt[6]);\n    dt_new.push_back('-');\n    dt_new.push_back(dt[0]);\n    dt_new.push_back(dt[1]);\n    dt_new.push_back(dt[2]);\n    dt_new.push_back(dt[3]);\n    return dt_new;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123443,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string res = \"\";\n    std::string yy = dt.substr(0, 4);\n    std::string mm = dt.substr(5, 2);\n    std::string dd = dt.substr(8, 2);\n    res = dd + \"-\" + mm + \"-\" + yy;\n    return res;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123443,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string ans = \"\";\n    ans += dt.substr(8,2);\n    ans += \"-\";\n    ans += dt.substr(5,2);\n    ans += \"-\";\n    ans += dt.substr(0,4);\n    return ans;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd, mm, yyyy;\n    dd = dt.substr(8, 2);\n    mm = dt.substr(5, 2);\n    yyyy = dt.substr(0, 4);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string ans = \"\";\n    ans += dt[8];\n    ans += dt[9];\n    ans += \"-\";\n    ans += dt[5];\n    ans += dt[6];\n    ans += \"-\";\n    ans += dt[0];\n    ans += dt[1];\n    ans += dt[2];\n    ans += dt[3];\n    return ans;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string ans;\n    ans += dt[8];\n    ans += dt[9];\n    ans += '-';\n    ans += dt[5];\n    ans += dt[6];\n    ans += '-';\n    ans += dt[0];\n    ans += dt[1];\n    ans += dt[2];\n    ans += dt[3];\n    return ans;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123443,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd, mm, yyyy;\n    dd = dt.substr(8, 2);\n    mm = dt.substr(5, 2);\n    yyyy = dt.substr(0, 4);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dt_new;\n    dt_new.push_back(dt[8]);\n    dt_new.push_back(dt[9]);\n    dt_new.push_back('-');\n    dt_new.push_back(dt[5]);\n    dt_new.push_back(dt[6]);\n    dt_new.push_back('-');\n    dt_new.push_back(dt[0]);\n    dt_new.push_back(dt[1]);\n    dt_new.push_back(dt[2]);\n    dt_new.push_back(dt[3]);\n    return dt_new;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123443,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::stringstream ss(dt);\n    std::string yyyy, mm, dd;\n    std::getline(ss, yyyy, '-');\n    std::getline(ss, mm, '-');\n    std::getline(ss, dd, '-');\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string yyyy = dt.substr(0,4);\n    std::string mm = dt.substr(5,2);\n    std::string dd = dt.substr(8,2);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::stringstream ss(dt);\n    std::string year, month, day;\n    std::getline(ss, year, '-');\n    std::getline(ss, month, '-');\n    std::getline(ss, day, '-');\n    return day + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::stringstream ss(dt);\n    std::string yyyy, mm, dd;\n    std::getline(ss, yyyy, '-');\n    std::getline(ss, mm, '-');\n    std::getline(ss, dd, '-');\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::stringstream ss(dt);\n    std::string year, month, day;\n    std::getline(ss, year, '-');\n    std::getline(ss, month, '-');\n    std::getline(ss, day, '-');\n    return day + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd, mm, yyyy;\n    dd = dt.substr(8, 2);\n    mm = dt.substr(5, 2);\n    yyyy = dt.substr(0, 4);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string year = dt.substr(0,4);\n    std::string month = dt.substr(5,2);\n    std::string day = dt.substr(8,2);\n    return day + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::stringstream ss(dt);\n    std::string y, m, d;\n    std::getline(ss, y, '-');\n    std::getline(ss, m, '-');\n    std::getline(ss, d, '-');\n    return d + \"-\" + m + \"-\" + y;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string ans;\n    ans += dt[8];\n    ans += dt[9];\n    ans += '-';\n    ans += dt[5];\n    ans += dt[6];\n    ans += '-';\n    ans += dt[0];\n    ans += dt[1];\n    ans += dt[2];\n    ans += dt[3];\n    return ans;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123443,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string ans = \"\";\n    ans += dt[8];\n    ans += dt[9];\n    ans += \"-\";\n    ans += dt[5];\n    ans += dt[6];\n    ans += \"-\";\n    ans += dt[0];\n    ans += dt[1];\n    ans += dt[2];\n    ans += dt[3];\n    return ans;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd = dt.substr(8,2);\n    std::string mm = dt.substr(5,2);\n    std::string yyyy = dt.substr(0,4);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::stringstream ss(dt);\n    std::string yyyy, mm, dd;\n    std::getline(ss, yyyy, '-');\n    std::getline(ss, mm, '-');\n    std::getline(ss, dd, '-');\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string year = dt.substr(0,4);\n    std::string month = dt.substr(5,2);\n    std::string day = dt.substr(8,2);\n    return day + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string year = dt.substr(0, 4);\n    std::string month = dt.substr(5, 2);\n    std::string day = dt.substr(8, 2);\n    std::string new_dt = day + \"-\" + month + \"-\" + year;\n    return new_dt;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123443,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n\tstd::string dt_new;\n\tdt_new.push_back(dt[8]);\n\tdt_new.push_back(dt[9]);\n\tdt_new.push_back('-');\n\tdt_new.push_back(dt[5]);\n\tdt_new.push_back(dt[6]);\n\tdt_new.push_back('-');\n\tdt_new.push_back(dt[0]);\n\tdt_new.push_back(dt[1]);\n\tdt_new.push_back(dt[2]);\n\tdt_new.push_back(dt[3]);\n\treturn dt_new;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123443,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string ans = \"\";\n    ans += dt[8];\n    ans += dt[9];\n    ans += \"-\";\n    ans += dt[5];\n    ans += dt[6];\n    ans += \"-\";\n    ans += dt[0];\n    ans += dt[1];\n    ans += dt[2];\n    ans += dt[3];\n    return ans;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::stringstream ss(dt);\n    std::string year, month, day;\n    std::getline(ss, year, '-');\n    std::getline(ss, month, '-');\n    std::getline(ss, day, '-');\n    return day + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string year = dt.substr(0,4);\n    std::string month = dt.substr(5,2);\n    std::string day = dt.substr(8,2);\n    return day + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::stringstream ss(dt);\n    std::string y, m, d;\n    std::getline(ss, y, '-');\n    std::getline(ss, m, '-');\n    std::getline(ss, d, '-');\n    return d + \"-\" + m + \"-\" + y;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string ans = \"\";\n    ans += dt[8];\n    ans += dt[9];\n    ans += \"-\";\n    ans += dt[5];\n    ans += dt[6];\n    ans += \"-\";\n    ans += dt[0];\n    ans += dt[1];\n    ans += dt[2];\n    ans += dt[3];\n    return ans;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string day = dt.substr(8,2);\n    std::string month = dt.substr(5,2);\n    std::string year = dt.substr(0,4);\n    return day + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string ans = \"\";\n    ans += dt[8];\n    ans += dt[9];\n    ans += \"-\";\n    ans += dt[5];\n    ans += dt[6];\n    ans += \"-\";\n    ans += dt[0];\n    ans += dt[1];\n    ans += dt[2];\n    ans += dt[3];\n    return ans;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd = dt.substr(8,2);\n    std::string mm = dt.substr(5,2);\n    std::string yyyy = dt.substr(0,4);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::stringstream ss(dt);\n    std::string year, month, day;\n    std::getline(ss, year, '-');\n    std::getline(ss, month, '-');\n    std::getline(ss, day, '-');\n    return day + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd, mm, yyyy;\n    dd = dt.substr(8, 2);\n    mm = dt.substr(5, 2);\n    yyyy = dt.substr(0, 4);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string yyyy = dt.substr(0,4);\n    std::string mm = dt.substr(5,2);\n    std::string dd = dt.substr(8,2);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string year = dt.substr(0,4);\n    std::string month = dt.substr(5,2);\n    std::string day = dt.substr(8,2);\n    return day + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string ans;\n    ans.push_back(dt[8]);\n    ans.push_back(dt[9]);\n    ans.push_back('-');\n    ans.push_back(dt[5]);\n    ans.push_back(dt[6]);\n    ans.push_back('-');\n    ans.push_back(dt[0]);\n    ans.push_back(dt[1]);\n    ans.push_back(dt[2]);\n    ans.push_back(dt[3]);\n    return ans;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123443,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string year = dt.substr(0,4);\n    std::string month = dt.substr(5,2);\n    std::string day = dt.substr(8,2);\n    std::string new_dt = day + \"-\" + month + \"-\" + year;\n    return new_dt;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string ans = \"\";\n    int i = dt.length() - 1;\n    int cnt = 0;\n    while(i >= 0) {\n        if(dt[i] == '-') {\n            cnt++;\n            ans += '-';\n        }\n        else {\n            ans += dt[i];\n        }\n        if(cnt == 2) {\n            break;\n        }\n        i--;\n    }\n    std::reverse(ans.begin(), ans.end());\n    return ans;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123443,
      "stdout": "",
      "stderr": "tmp_ugw01eb: /tmp/tmp_ugw01eb.cpp:26: int main(): Assertion `candidate((\"2026-01-02\")) == (\"02-01-2026\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd = dt.substr(8,2);\n    std::string mm = dt.substr(5,2);\n    std::string yyyy = dt.substr(0,4);\n    return dd+\"-\"+mm+\"-\"+yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string ans = \"\";\n    ans += dt.substr(8, 2);\n    ans += \"-\";\n    ans += dt.substr(5, 2);\n    ans += \"-\";\n    ans += dt.substr(0, 4);\n    return ans;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123443,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    // Write your code here\n    std::string year = dt.substr(0,4);\n    std::string month = dt.substr(5,2);\n    std::string day = dt.substr(8,2);\n    std::string new_dt = day + \"-\" + month + \"-\" + year;\n    return new_dt;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123443,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd, mm, yyyy;\n    dd = dt.substr(8, 2);\n    mm = dt.substr(5, 2);\n    yyyy = dt.substr(0, 4);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd = dt.substr(8,2);\n    std::string mm = dt.substr(5,2);\n    std::string yyyy = dt.substr(0,4);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string ans;\n    ans += dt.substr(8,2);\n    ans += \"-\";\n    ans += dt.substr(5,2);\n    ans += \"-\";\n    ans += dt.substr(0,4);\n    return ans;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123443,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd = dt.substr(8,2);\n    std::string mm = dt.substr(5,2);\n    std::string yyyy = dt.substr(0,4);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd, mm, yyyy;\n    dd = dt.substr(8, 2);\n    mm = dt.substr(5, 2);\n    yyyy = dt.substr(0, 4);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string ans;\n    std::stringstream ss(dt);\n    std::string temp;\n    std::vector<std::string> v;\n    while(std::getline(ss, temp, '-')) {\n        v.push_back(temp);\n    }\n    ans = v[2] + \"-\" + v[1] + \"-\" + v[0];\n    return ans;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123443,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    assert(dt.size() == 10);\n    std::string day = dt.substr(8, 2);\n    std::string month = dt.substr(5, 2);\n    std::string year = dt.substr(0, 4);\n    return day + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123443,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd = dt.substr(8,2);\n    std::string mm = dt.substr(5,2);\n    std::string yyyy = dt.substr(0,4);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::stringstream ss(dt);\n    std::string y, m, d;\n    std::getline(ss, y, '-');\n    std::getline(ss, m, '-');\n    std::getline(ss, d, '-');\n    return d + \"-\" + m + \"-\" + y;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::stringstream ss(dt);\n    std::string date, month, year;\n    std::getline(ss, year, '-');\n    std::getline(ss, month, '-');\n    std::getline(ss, date, '-');\n    return date + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123443,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::stringstream ss(dt);\n    std::string year, month, day;\n    std::getline(ss, year, '-');\n    std::getline(ss, month, '-');\n    std::getline(ss, day, '-');\n    return day + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd, mm, yyyy;\n    int i = 0;\n    while(dt[i] != '-') {\n        yyyy += dt[i];\n        i++;\n    }\n    i++;\n    while(dt[i] != '-') {\n        mm += dt[i];\n        i++;\n    }\n    i++;\n    while(i < dt.size()) {\n        dd += dt[i];\n        i++;\n    }\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string year = dt.substr(0,4);\n    std::string month = dt.substr(5,2);\n    std::string day = dt.substr(8,2);\n    return day + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd, mm, yyyy;\n    dd = dt.substr(8, 2);\n    mm = dt.substr(5, 2);\n    yyyy = dt.substr(0, 4);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string ans = \"\";\n    ans += dt[8];\n    ans += dt[9];\n    ans += \"-\";\n    ans += dt[5];\n    ans += dt[6];\n    ans += \"-\";\n    ans += dt[0];\n    ans += dt[1];\n    ans += dt[2];\n    ans += dt[3];\n    return ans;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd = dt.substr(8,2);\n    std::string mm = dt.substr(5,2);\n    std::string yyyy = dt.substr(0,4);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string res = \"\";\n    int i = 0;\n    while(dt[i] != '-') {\n        res += dt[i];\n        i++;\n    }\n    std::string year = res;\n    res = \"\";\n    i++;\n    while(dt[i] != '-') {\n        res += dt[i];\n        i++;\n    }\n    std::string month = res;\n    res = \"\";\n    i++;\n    while(i < dt.size()) {\n        res += dt[i];\n        i++;\n    }\n    std::string day = res;\n    res = \"\";\n    res = day + \"-\" + month + \"-\" + year;\n    return res;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123443,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::stringstream ss(dt);\n    std::string year, month, day;\n    std::getline(ss, year, '-');\n    std::getline(ss, month, '-');\n    std::getline(ss, day, '-');\n    return day + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n  std::string ans;\n  ans.push_back(dt[8]);\n  ans.push_back(dt[9]);\n  ans.push_back('-');\n  ans.push_back(dt[5]);\n  ans.push_back(dt[6]);\n  ans.push_back('-');\n  ans.push_back(dt[0]);\n  ans.push_back(dt[1]);\n  ans.push_back(dt[2]);\n  ans.push_back(dt[3]);\n  return ans;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123443,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::stringstream ss(dt);\n    std::string year, month, day;\n    std::getline(ss, year, '-');\n    std::getline(ss, month, '-');\n    std::getline(ss, day, '-');\n    return day + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::stringstream ss(dt);\n    std::string y, m, d;\n    std::getline(ss, y, '-');\n    std::getline(ss, m, '-');\n    std::getline(ss, d, '-');\n    return d + \"-\" + m + \"-\" + y;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd, mm, yyyy;\n    dd = dt.substr(8, 2);\n    mm = dt.substr(5, 2);\n    yyyy = dt.substr(0, 4);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd, mm, yyyy;\n    int i = 0;\n    while(dt[i] != '-') {\n        yyyy += dt[i];\n        i++;\n    }\n    i++;\n    while(dt[i] != '-') {\n        mm += dt[i];\n        i++;\n    }\n    i++;\n    while(i < dt.size()) {\n        dd += dt[i];\n        i++;\n    }\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string ans;\n    ans += dt[8];\n    ans += dt[9];\n    ans += '-';\n    ans += dt[5];\n    ans += dt[6];\n    ans += '-';\n    ans += dt[0];\n    ans += dt[1];\n    ans += dt[2];\n    ans += dt[3];\n    return ans;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123443,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd, mm, yyyy;\n    dd = dt.substr(8, 2);\n    mm = dt.substr(5, 2);\n    yyyy = dt.substr(0, 4);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dt_new;\n    dt_new.push_back(dt[8]);\n    dt_new.push_back(dt[9]);\n    dt_new.push_back('-');\n    dt_new.push_back(dt[5]);\n    dt_new.push_back(dt[6]);\n    dt_new.push_back('-');\n    dt_new.push_back(dt[0]);\n    dt_new.push_back(dt[1]);\n    dt_new.push_back(dt[2]);\n    dt_new.push_back(dt[3]);\n    return dt_new;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123443,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    assert(dt.size() == 10);\n    std::string dd = dt.substr(8, 2);\n    std::string mm = dt.substr(5, 2);\n    std::string yyyy = dt.substr(0, 4);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123443,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd = dt.substr(8,2);\n    std::string mm = dt.substr(5,2);\n    std::string yyyy = dt.substr(0,4);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string year = dt.substr(0,4);\n    std::string month = dt.substr(5,2);\n    std::string day = dt.substr(8,2);\n    return day + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd, mm, yyyy;\n    dd = dt.substr(8, 2);\n    mm = dt.substr(5, 2);\n    yyyy = dt.substr(0, 4);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    // Write your code here\n    std::stringstream ss(dt);\n    std::string year, month, day;\n    std::getline(ss, year, '-');\n    std::getline(ss, month, '-');\n    std::getline(ss, day, '-');\n    return day + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1666123443,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd, mm, yyyy;\n    dd = dt.substr(8, 2);\n    mm = dt.substr(5, 2);\n    yyyy = dt.substr(0, 4);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd, mm, yyyy;\n    dd = dt.substr(8, 2);\n    mm = dt.substr(5, 2);\n    yyyy = dt.substr(0, 4);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::stringstream ss(dt);\n    std::string year, month, day;\n    std::getline(ss, year, '-');\n    std::getline(ss, month, '-');\n    std::getline(ss, day, '-');\n    return day + \"-\" + month + \"-\" + year;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nstd::string change_date_format(std::string dt) {\n    std::string dd, mm, yyyy;\n    dd = dt.substr(8, 2);\n    mm = dt.substr(5, 2);\n    yyyy = dt.substr(0, 4);\n    return dd + \"-\" + mm + \"-\" + yyyy;\n}\nint main() {\n    auto candidate = change_date_format;\n    assert(candidate((\"2026-01-02\")) == (\"02-01-2026\"));\n    assert(candidate((\"2020-11-13\")) == (\"13-11-2020\"));\n    assert(candidate((\"2021-04-26\")) == (\"26-04-2021\"));\n}\n",
      "timestamp": 1665510429,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}