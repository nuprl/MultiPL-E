{
  "name": "mbpp_131_reverse_vowels",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to reverse only the vowels of a given string (where y is not a vowel).\nstd::string reverse_vowels(std::string str1) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_131_reverse_vowels.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = reverse_vowels;\n    assert(candidate((\"Python\")) == (\"Python\"));\n    assert(candidate((\"USA\")) == (\"ASU\"));\n    assert(candidate((\"ab\")) == (\"ab\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    std::stack<char> s;\n    for (int i = 0; i < str1.length(); i++) {\n        if (vowels.find(str1[i]) != std::string::npos) {\n            s.push(str1[i]);\n        }\n    }\n    for (int i = 0; i < str1.length(); i++) {\n        if (vowels.find(str1[i]) != std::string::npos) {\n            result += s.top();\n            s.pop();\n        } else {\n            result += str1[i];\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string str2 = \"\";\n    for (int i = 0; i < str1.length(); i++) {\n        if (vowels.find(str1[i]) == std::string::npos) {\n            str2 += str1[i];\n        }\n    }\n    int j = str2.length() - 1;\n    for (int i = 0; i < str1.length(); i++) {\n        if (vowels.find(str1[i]) != std::string::npos) {\n            str1[i] = str2[j];\n            j--;\n        }\n    }\n    return str1;",
    "    int i = 0;\n    int j = str1.length() - 1;\n    while (i < j) {\n        if (str1[i] == 'a' || str1[i] == 'e' || str1[i] == 'i' || str1[i] == 'o' || str1[i] == 'u') {\n            if (str1[j] == 'a' || str1[j] == 'e' || str1[j] == 'i' || str1[j] == 'o' || str1[j] == 'u') {\n                std::swap(str1[i], str1[j]);\n                i++;\n                j--;\n            } else {\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return str1;",
    "    std::string vowels = \"aeiouAEIOU\";\n    int i = 0;\n    int j = str1.length() - 1;\n    while (i < j) {\n        if (vowels.find(str1[i]) == std::string::npos) {\n            i++;\n            continue;\n        }\n        if (vowels.find(str1[j]) == std::string::npos) {\n            j--;\n            continue;\n        }\n        std::swap(str1[i], str1[j]);\n        i++;\n        j--;\n    }\n    return str1;",
    "    std::string str2;\n    std::vector<char> vowels;\n    for (int i = 0; i < str1.length(); i++) {\n        if (str1[i] == 'a' || str1[i] == 'e' || str1[i] == 'i' || str1[i] == 'o' || str1[i] == 'u') {\n            vowels.push_back(str1[i]);\n        }\n    }\n    int j = vowels.size() - 1;\n    for (int i = 0; i < str1.length(); i++) {\n        if (str1[i] == 'a' || str1[i] == 'e' || str1[i] == 'i' || str1[i] == 'o' || str1[i] == 'u') {\n            str2 += vowels[j];\n            j--;\n        } else {\n            str2 += str1[i];\n        }\n    }\n    return str2;",
    "    int i = 0;\n    int j = str1.length() - 1;\n    while (i < j) {\n        if (str1[i] == 'a' || str1[i] == 'e' || str1[i] == 'i' || str1[i] == 'o' || str1[i] == 'u') {\n            if (str1[j] == 'a' || str1[j] == 'e' || str1[j] == 'i' || str1[j] == 'o' || str1[j] == 'u') {\n                std::swap(str1[i], str1[j]);\n                i++;\n                j--;\n            }\n            else {\n                j--;\n            }\n        }\n        else {\n            i++;\n        }\n    }\n    return str1;",
    "    int i = 0;\n    int j = str1.length() - 1;\n    while (i < j) {\n        if (str1[i] == 'a' || str1[i] == 'e' || str1[i] == 'i' || str1[i] == 'o' || str1[i] == 'u') {\n            if (str1[j] == 'a' || str1[j] == 'e' || str1[j] == 'i' || str1[j] == 'o' || str1[j] == 'u') {\n                std::swap(str1[i], str1[j]);\n                i++;\n                j--;\n            }\n            else {\n                j--;\n            }\n        }\n        else {\n            i++;\n        }\n    }\n    return str1;",
    "    int i = 0;\n    int j = str1.length() - 1;\n    while(i < j) {\n        if(str1[i] == 'a' || str1[i] == 'e' || str1[i] == 'i' || str1[i] == 'o' || str1[i] == 'u') {\n            if(str1[j] == 'a' || str1[j] == 'e' || str1[j] == 'i' || str1[j] == 'o' || str1[j] == 'u') {\n                std::swap(str1[i], str1[j]);\n                i++;\n                j--;\n            }\n            else {\n                j--;\n            }\n        }\n        else {\n            i++;\n        }\n    }\n    return str1;",
    "    std::string str2;\n    std::string vowels = \"aeiouAEIOU\";\n    std::vector<int> v;\n    for (int i = 0; i < str1.length(); i++) {\n        if (vowels.find(str1[i]) != std::string::npos) {\n            v.push_back(i);\n        }\n    }\n    for (int i = 0; i < str1.length(); i++) {\n        if (vowels.find(str1[i]) != std::string::npos) {\n            str2 += str1[v.back()];\n            v.pop_back();\n        }\n        else {\n            str2 += str1[i];\n        }\n    }\n    return str2;",
    "    std::string str2 = \"\";\n    std::string vowels = \"aeiouAEIOU\";\n    std::stack<char> st;\n    for (int i = 0; i < str1.length(); i++) {\n        if (vowels.find(str1[i]) != std::string::npos) {\n            st.push(str1[i]);\n        }\n    }\n    for (int i = 0; i < str1.length(); i++) {\n        if (vowels.find(str1[i]) != std::string::npos) {\n            str2 += st.top();\n            st.pop();\n        }\n        else {\n            str2 += str1[i];\n        }\n    }\n    return str2;",
    "    int i = 0;\n    int j = str1.length() - 1;\n    while (i < j) {\n        if (str1[i] == 'a' || str1[i] == 'e' || str1[i] == 'i' || str1[i] == 'o' || str1[i] == 'u') {\n            if (str1[j] == 'a' || str1[j] == 'e' || str1[j] == 'i' || str1[j] == 'o' || str1[j] == 'u') {\n                std::swap(str1[i], str1[j]);\n                i++;\n                j--;\n            }\n            else {\n                j--;\n            }\n        }\n        else {\n            i++;\n        }\n    }\n    return str1;",
    "    std::string str2 = \"\";\n    std::string str3 = \"\";\n    std::string str4 = \"\";\n    std::string str5 = \"\";\n    std::string str6 = \"\";\n    std::string str7 = \"\";\n    std::string str8 = \"\";\n    std::string str9 = \"\";\n    std::string str10 = \"\";\n    std::string str11 = \"\";\n    std::string str12 = \"\";\n    std::string str13 = \"\";\n    std::string str14 = \"\";\n    std::string str15 = \"\";\n    std::string str16 = \"\";\n    std::string str17 = \"\";\n    std::string str18 = \"\";\n    std::string str19 = \"\";\n    std::string str20 = \"\";\n    std::string str21 = \"\";\n    std::string str22 = \"\";\n    std::string str23 = \"\";\n    std::string str24 = \"\";\n    std::string str25 = \"\";\n    std::string str26 = \"\";\n    std::string str27 = \"\";\n    std::string str28 = \"\";\n    std::string str29 = \"\";\n    std::string str30 = \"\";\n    std::string str31 = \"\";\n    std::string str32 = \"\";\n    std::string str33 = \"\";\n    std::string str34 = \"\";\n    std::string str35 = \"\";\n    std::string str36 = \"\";\n    std::string str37 = \"\";\n    std::string str38 = \"\";\n    std::string str39 = \"\";\n    std::string str40 = \"\";\n    std::string str41 = \"\";\n    std::string str42 = \"\";\n    std::string str43 = \"\";\n    std::string str44 = \"\";\n    std::string str45 = \"\";\n    std::string str46 = \"\";\n    std::string str47 = \"\";\n    std::string str48 = \"\";\n    std::string str49 = \"\";\n    std::string str50 = \"\";\n    std::string str51 = \"\";\n    std::string str52 = \"\";\n   ",
    "    int i = 0;\n    int j = str1.length() - 1;\n    while (i < j) {\n        if (str1[i] == 'a' || str1[i] == 'e' || str1[i] == 'i' || str1[i] == 'o' || str1[i] == 'u') {\n            if (str1[j] == 'a' || str1[j] == 'e' || str1[j] == 'i' || str1[j] == 'o' || str1[j] == 'u') {\n                std::swap(str1[i], str1[j]);\n                i++;\n                j--;\n            } else {\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return str1;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    int i = 0;\n    int j = str1.length() - 1;\n    while (i < j) {\n        if (vowels.find(str1[i]) != std::string::npos && vowels.find(str1[j]) != std::string::npos) {\n            std::swap(str1[i], str1[j]);\n            i++;\n            j--;\n        }\n        else if (vowels.find(str1[i]) != std::string::npos) {\n            j--;\n        }\n        else if (vowels.find(str1[j]) != std::string::npos) {\n            i++;\n        }\n        else {\n            i++;\n            j--;\n        }\n    }\n    return str1;",
    "    std::string vowels = \"aeiouAEIOU\";\n    int i = 0;\n    int j = str1.length() - 1;\n    while(i < j) {\n        if(vowels.find(str1[i]) == std::string::npos) {\n            i++;\n            continue;\n        }\n        if(vowels.find(str1[j]) == std::string::npos) {\n            j--;\n            continue;\n        }\n        std::swap(str1[i], str1[j]);\n        i++;\n        j--;\n    }\n    return str1;",
    "    int i = 0;\n    int j = str1.length()-1;\n    while(i < j) {\n        if(str1[i] == 'a' || str1[i] == 'e' || str1[i] == 'i' || str1[i] == 'o' || str1[i] == 'u') {\n            if(str1[j] == 'a' || str1[j] == 'e' || str1[j] == 'i' || str1[j] == 'o' || str1[j] == 'u') {\n                char temp = str1[i];\n                str1[i] = str1[j];\n                str1[j] = temp;\n                i++;\n                j--;\n            }\n            else {\n                j--;\n            }\n        }\n        else {\n            i++;\n        }\n    }\n    return str1;",
    "    std::string str2;\n    std::string vowels = \"aeiouAEIOU\";\n    std::stack<char> s;\n    for (int i = 0; i < str1.length(); i++) {\n        if (vowels.find(str1[i]) != std::string::npos) {\n            s.push(str1[i]);\n        }\n    }\n    for (int i = 0; i < str1.length(); i++) {\n        if (vowels.find(str1[i]) != std::string::npos) {\n            str2.push_back(s.top());\n            s.pop();\n        } else {\n            str2.push_back(str1[i]);\n        }\n    }\n    return str2;",
    "    int i = 0;\n    int j = str1.length() - 1;\n    while (i < j) {\n        if (str1[i] == 'a' || str1[i] == 'e' || str1[i] == 'i' || str1[i] == 'o' || str1[i] == 'u') {\n            if (str1[j] == 'a' || str1[j] == 'e' || str1[j] == 'i' || str1[j] == 'o' || str1[j] == 'u') {\n                std::swap(str1[i], str1[j]);\n                i++;\n                j--;\n            }\n            else {\n                j--;\n            }\n        }\n        else {\n            i++;\n        }\n    }\n    return str1;",
    "    int i = 0;\n    int j = str1.length() - 1;\n    while (i < j) {\n        if (str1[i] == 'a' || str1[i] == 'e' || str1[i] == 'i' || str1[i] == 'o' || str1[i] == 'u') {\n            if (str1[j] == 'a' || str1[j] == 'e' || str1[j] == 'i' || str1[j] == 'o' || str1[j] == 'u') {\n                std::swap(str1[i], str1[j]);\n                i++;\n                j--;\n            }\n            else {\n                j--;\n            }\n        }\n        else {\n            i++;\n        }\n    }\n    return str1;",
    "    int i = 0;\n    int j = str1.length() - 1;\n    while (i < j) {\n        if (str1[i] == 'a' || str1[i] == 'e' || str1[i] == 'i' || str1[i] == 'o' || str1[i] == 'u') {\n            if (str1[j] == 'a' || str1[j] == 'e' || str1[j] == 'i' || str1[j] == 'o' || str1[j] == 'u') {\n                std::swap(str1[i], str1[j]);\n                i++;\n                j--;\n            }\n            else {\n                j--;\n            }\n        }\n        else {\n            i++;\n        }\n    }\n    return str1;"
  ]
}