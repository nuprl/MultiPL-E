{
  "name": "mbpp_576_is_Sub_Array",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_576_is_Sub_Array.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < m && j < n) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (B[i] == A[j])\n                break;\n        }\n        if (j == m)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "tmplqsdq7q9: /tmp/tmplqsdq7q9.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0, j = 0;\n    while (i < A.size() && j < B.size()) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == B.size()) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n && j < m; i++) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (B[i] == A[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "tmpka9a9c63: /tmp/tmpka9a9c63.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    if (A.size() > B.size()) {\n        return false;\n    }\n    int i = 0;\n    int j = 0;\n    while (i < A.size() && j < B.size()) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = 0;\n            j++;\n        }\n    }\n    if (i == A.size()) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    if (A.size() > B.size()) {\n        return false;\n    }\n    int i = 0;\n    int j = 0;\n    while (i < A.size() && j < B.size()) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = 0;\n            j++;\n        }\n    }\n    if (i == A.size()) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    for (int i = 0; i < n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++)\n            if (B[i + j] != A[j])\n                break;\n        if (j == m)\n            return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "tmplx0t711l: /tmp/tmplx0t711l.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0, j = 0;\n    while (i < A.size() && j < B.size()) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == B.size()) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n && j < m; i++) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0, j = 0;\n    while (i < A.size() && j < B.size()) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == B.size()) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++)\n            if (B[i + j] != A[j])\n                break;\n        if (j == m)\n            return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n && j < m; i++) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0;\n    int j = 0;\n    while (i < A.size() && j < B.size()) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == B.size()) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < n && j < m) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n        i++;\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0;\n    int j = 0;\n    while (i < A.size() && j < B.size()) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.size()) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (B[i] == A[j])\n                break;\n        }\n        if (j == m)\n            return 0;\n    }\n    return 1;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "tmpfmal_gaz: /tmp/tmpfmal_gaz.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0;\n    int j = 0;\n    while(i < A.size() && j < B.size()) {\n        if(A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if(j == B.size()) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (B[i] == A[j])\n                break;\n        }\n        if (j == m)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "tmplqsdq7q9: /tmp/tmplqsdq7q9.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < m && j < n) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == n) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < m && j < n) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0, j = 0;\n    while(i < A.size() && j < B.size()) {\n        if(A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if(j == B.size()) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < m && j < n) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n && j < m; i++) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n && j < m; i++) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0;\n    int j = 0;\n    int n = A.size();\n    int m = B.size();\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (A[i + j] != B[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "tmpswaco478: /tmp/tmpswaco478.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n && j < m; i++) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < m && j < n) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == n)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n && j < m; i++) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (B[i] == A[j])\n                break;\n        }\n        if (j == m)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "tmplqsdq7q9: /tmp/tmplqsdq7q9.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0;\n    int j = 0;\n    while(i < A.size() && j < B.size()) {\n        if(A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if(j == B.size()) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < n && j < m) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n        i++;\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n && j < m; i++) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0;\n    int j = 0;\n    int n = A.size();\n    int m = B.size();\n    while(i < n && j < m) {\n        if(A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if(j == m) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (B[i] == A[j])\n                break;\n        }\n        if (j == m)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "tmplqsdq7q9: /tmp/tmplqsdq7q9.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n && j < m; i++) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int M = A.size();\n    int N = B.size();\n    for (int i = 0; i <= N - M; i++) {\n        int j;\n        for (j = 0; j < M; j++)\n            if (B[i + j] != A[j])\n                break;\n        if (j == M)\n            return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n && j < m; i++) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < m && j < n) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == n) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < m && j < n) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n && j < m; i++) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n && j < m; i++) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < m && j < n) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0;\n    int j = 0;\n    while(i < A.size() && j < B.size()) {\n        if(A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if(j == B.size()) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124054,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < m && j < n) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == n) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < m && j < n) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == n) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124054,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < n && j < m) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n        i++;\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (B[i] == A[j])\n                break;\n        }\n        if (j == m)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "tmplqsdq7q9: /tmp/tmplqsdq7q9.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (B[i] == A[j])\n                break;\n        }\n        if (j == m)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "tmplqsdq7q9: /tmp/tmplqsdq7q9.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n && j < m; i++) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < m && j < n) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0, j = 0;\n    while(i < A.size() && j < B.size()) {\n        if(A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if(j == B.size()) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124054,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0, j = 0;\n    while (i < A.size() && j < B.size()) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == B.size()) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124054,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < n && j < m) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n        i++;\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (B[i] == A[j])\n                break;\n        }\n        if (j == m)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "tmplqsdq7q9: /tmp/tmplqsdq7q9.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < m && j < n) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == n)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++)\n            if (B[i + j] != A[j])\n                break;\n        if (j == m)\n            return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (B[i] == A[j])\n                break;\n        }\n        if (j == m)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "tmplqsdq7q9: /tmp/tmplqsdq7q9.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n\tint i = 0;\n\tfor (int j = 0; j < B.size(); j++) {\n\t\tif (A[i] == B[j]) {\n\t\t\ti++;\n\t\t}\n\t\tif (i == A.size()) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0, j = 0;\n    while (i < A.size() && j < B.size()) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == B.size()) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n && j < m; i++) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n && j < m; i++) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0;\n    int j = 0;\n    int n = A.size();\n    int m = B.size();\n    while(i < n && j < m) {\n        if(A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if(j == m) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124054,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (B[i] == A[j])\n                break;\n        }\n        if (j == m)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "tmplqsdq7q9: /tmp/tmplqsdq7q9.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (B[i] == A[j])\n                break;\n        }\n        if (j == m)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "tmplqsdq7q9: /tmp/tmplqsdq7q9.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n && j < m; i++) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < n && j < m) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == m) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124054,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n && j < m; i++) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < m && j < n) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == n) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < m && j < n) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n && j < m; i++) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n && j < m; i++) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < m && j < n) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == n) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0;\n    int j = 0;\n    while (i < A.size() && j < B.size()) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == B.size()) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (B[i] == A[j])\n                break;\n        }\n        if (j == m)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "tmplqsdq7q9: /tmp/tmplqsdq7q9.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (B[i] == A[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "tmpka9a9c63: /tmp/tmpka9a9c63.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n && j < m; i++) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    for (int i = 0; i < n - m + 1; i++) {\n        int j;\n        for (j = 0; j < m; j++)\n            if (B[i + j] != A[j])\n                break;\n        if (j == m)\n            return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (B[i] == A[j])\n                break;\n        }\n        if (j == m)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "tmplqsdq7q9: /tmp/tmplqsdq7q9.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < n && j < m) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n        i++;\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    for (int i = 0; i < n - m + 1; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (B[i + j] != A[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124054,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < m && j < n) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == n) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    if(A.size() > B.size()) {\n        return false;\n    }\n    int i = 0;\n    int j = 0;\n    while(i < A.size() && j < B.size()) {\n        if(A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = 0;\n            j++;\n        }\n    }\n    if(i == A.size()) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (B[i] == A[j])\n                break;\n        }\n        if (j == m)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "tmplqsdq7q9: /tmp/tmplqsdq7q9.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < m && j < n) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == n) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < m && j < n) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == n) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124054,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n && j < m; i++) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < m && j < n) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == n) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < m && j < n) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n && j < m; i++) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0;\n    int j = 0;\n    int n = A.size();\n    int m = B.size();\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (A[i + j] != B[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "tmpswaco478: /tmp/tmpswaco478.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < m && j < n) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == n) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (B[i] == A[j])\n                break;\n        }\n        if (j == m)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "tmplqsdq7q9: /tmp/tmplqsdq7q9.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    for (int i = 0; i < n - m + 1; i++) {\n        int j;\n        for (j = 0; j < m; j++)\n            if (B[i + j] != A[j])\n                break;\n        if (j == m)\n            return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (B[i] == A[j])\n                break;\n        }\n        if (j == m)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "tmplqsdq7q9: /tmp/tmplqsdq7q9.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n && j < m; i++) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    if(A.size() == 0) {\n        return true;\n    }\n    if(B.size() == 0) {\n        return false;\n    }\n    if(A.size() > B.size()) {\n        return false;\n    }\n    int i = 0, j = 0;\n    while(i < A.size() && j < B.size()) {\n        if(A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = 0;\n            j++;\n        }\n    }\n    if(i == A.size()) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (B[i] == A[j])\n                break;\n        }\n        if (j == m)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "tmplqsdq7q9: /tmp/tmplqsdq7q9.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < n && j < m) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n        i++;\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (B[i] == A[j])\n                break;\n        }\n        if (j == m)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "tmplqsdq7q9: /tmp/tmplqsdq7q9.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    for (int i = 0; i < n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (B[i + j] != A[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124054,
      "stdout": "",
      "stderr": "tmpordtkxi8: /tmp/tmpordtkxi8.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0;\n    int j = 0;\n    while (i < A.size() && j < B.size()) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == B.size()) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0;\n    int j = 0;\n    while (i < A.size() && j < B.size()) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.size()) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < m && j < n) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == n) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124054,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (B[i] == A[j])\n                break;\n        }\n        if (j == m)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "tmplqsdq7q9: /tmp/tmplqsdq7q9.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n && j < m; i++) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0;\n    int j = 0;\n    int n = A.size();\n    int m = B.size();\n    while(i < n && j < m) {\n        if(A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if(j == m) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124054,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (B[i] == A[j])\n                break;\n        }\n        if (j == m)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "tmplqsdq7q9: /tmp/tmplqsdq7q9.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < n && j < m) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n        i++;\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < m && j < n) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == n) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < m && j < n) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n && j < m; i++) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < m && j < n) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == n) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (B[i] == A[j])\n                break;\n        }\n        if (j == m)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "tmplqsdq7q9: /tmp/tmplqsdq7q9.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n && j < m; i++) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < m && j < n) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == n)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < m && j < n) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == n) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < n && j < m) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n        i++;\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < m && j < n) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n && j < m; i++) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < n && j < m) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == m)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    for (int i = 0; i < n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++)\n            if (B[i + j] != A[j])\n                break;\n        if (j == m)\n            return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "tmplx0t711l: /tmp/tmplx0t711l.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0, j = 0;\n    while(i < A.size() && j < B.size()) {\n        if(A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if(j == B.size()) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (B[i] == A[j])\n                break;\n        }\n        if (j == m)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "tmplqsdq7q9: /tmp/tmplqsdq7q9.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n && j < m; i++) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < m && j < n) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == n) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0;\n    int j = 0;\n    while (i < A.size() && j < B.size()) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == B.size()) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    for (int i = 0; i < n - m + 1; i++) {\n        int j;\n        for (j = 0; j < m; j++)\n            if (B[i + j] != A[j])\n                break;\n        if (j == m)\n            return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < n && j < m) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n        i++;\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (B[i] == A[j])\n                break;\n        }\n        if (j == m)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "tmplqsdq7q9: /tmp/tmplqsdq7q9.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n && j < m; i++) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < m && j < n) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == n) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    int i = 0;\n    int j = 0;\n    while(i < n && j < m) {\n        if(A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if(j == m) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0;\n    int j = 0;\n    while(i < A.size() && j < B.size()) {\n        if(A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if(j == B.size()) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < n && j < m) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n        i++;\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < n && j < m) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n        i++;\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0, j = 0;\n    while (i < A.size() && j < B.size()) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == B.size()) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124054,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (B[i] == A[j])\n                break;\n        }\n        if (j == m)\n            return 0;\n    }\n    return 1;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "tmpfmal_gaz: /tmp/tmpfmal_gaz.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (B[i] == A[j])\n                break;\n        }\n        if (j == m)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "tmplqsdq7q9: /tmp/tmplqsdq7q9.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < m && j < n) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == n) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0, j = 0;\n    while (i < A.size() && j < B.size()) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == B.size()) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124054,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < m && j < n) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == n) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n  int m = A.size();\n  int n = B.size();\n  int i = 0;\n  int j = 0;\n  for (i = 0; i < n && j < m; i++) {\n    if (A[j] == B[i]) {\n      j++;\n    }\n  }\n  return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (B[i] == A[j])\n                break;\n        }\n        if (j == m)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "tmplqsdq7q9: /tmp/tmplqsdq7q9.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < m && j < n) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0, j = 0;\n    while (i < A.size() && j < B.size()) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == B.size()) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124054,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < m && j < n) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == n) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (B[i] == A[j])\n                break;\n        }\n        if (j == m)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "tmplqsdq7q9: /tmp/tmplqsdq7q9.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < m && j < n) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == n) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < n && j < m) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n        i++;\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0;\n    int j = 0;\n    while(i < A.size() && j < B.size()) {\n        if(A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if(j == B.size()) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < m && j < n) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0, j = 0;\n    while(i < A.size() && j < B.size()) {\n        if(A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if(j == B.size()) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0, j = 0;\n    while(i < A.size() && j < B.size()) {\n        if(A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if(j == B.size()) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0;\n    int j = 0;\n    while (i < A.size() && j < B.size()) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == B.size()) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < m && j < n) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n && j < m; i++) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n && j < m; i++) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < m && j < n) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == n) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    if(m > n) {\n        return false;\n    }\n    for(int i = 0; i <= n - m; i++) {\n        int j;\n        for(j = 0; j < m; j++) {\n            if(A[i + j] != B[j]) {\n                break;\n            }\n        }\n        if(j == m) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (B[i] == A[j])\n                break;\n        }\n        if (j == m)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "tmplqsdq7q9: /tmp/tmplqsdq7q9.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (B[i] == A[j])\n                break;\n        }\n        if (j == m)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "tmplqsdq7q9: /tmp/tmplqsdq7q9.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (B[i] == A[j])\n                break;\n        }\n        if (j == m)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "tmplqsdq7q9: /tmp/tmplqsdq7q9.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n && j < m; i++) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < n && j < m) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n        i++;\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (B[i] == A[j])\n                break;\n        }\n        if (j == m)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "tmplqsdq7q9: /tmp/tmplqsdq7q9.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0, j = 0;\n    while (i < A.size() && j < B.size()) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.size()) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < n && j < m) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n        i++;\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0;\n    int j = 0;\n    int n = A.size();\n    int m = B.size();\n    while(i < n && j < m) {\n        if(A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if(j == m) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < m && j < n) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == n) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0;\n    int j = 0;\n    while (i < A.size() && j < B.size()) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.size()) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0;\n    int j = 0;\n    int n = A.size();\n    int m = B.size();\n    while (i < n && j < m) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == m) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < m && j < n) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == n) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124054,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n && j < m; i++) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (B[i] == A[j])\n                break;\n        }\n        if (j == m)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "tmplqsdq7q9: /tmp/tmplqsdq7q9.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n && j < m; i++) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < m && j < n) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < m && j < n) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == n) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int n = A.size();\n    int m = B.size();\n    int i = 0, j = 0;\n    while (i < n && j < m) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == m) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int M = A.size();\n    int N = B.size();\n    for (int i=0; i<N-M+1; i++) {\n        int j;\n        for (j=0; j<M; j++)\n            if (B[i+j] != A[j])\n                break;\n        if (j == M)\n            return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n && j < m; i++) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (B[i] == A[j])\n                break;\n        }\n        if (j == m)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "tmplqsdq7q9: /tmp/tmplqsdq7q9.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < m && j < n) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < n && j < m) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n        i++;\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++)\n            if (B[i + j] != A[j])\n                break;\n        if (j == m)\n            return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0, j = 0;\n    while (i < m && j < n) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (B[i] == A[j])\n                break;\n        }\n        if (j == m)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "tmplqsdq7q9: /tmp/tmplqsdq7q9.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if(B[i] == A[j])\n                break;\n        }\n        if (j == m)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "tmpy5tviv4t: /tmp/tmpy5tviv4t.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < m && j < n) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < m && j < n) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == n)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (B[i] == A[j])\n                break;\n        }\n        if (j == m)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "tmplqsdq7q9: /tmp/tmplqsdq7q9.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (B[i] == A[j])\n                break;\n        }\n        if (j == m)\n            return 0;\n    }\n    return 1;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "tmpfmal_gaz: /tmp/tmpfmal_gaz.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (B[i] == A[j])\n                break;\n        }\n        if (j == m)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "tmplqsdq7q9: /tmp/tmplqsdq7q9.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (B[i] == A[j])\n                break;\n        }\n        if (j == m)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "tmplqsdq7q9: /tmp/tmplqsdq7q9.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n            if (B[i] == A[j])\n                break;\n        }\n        if (j == m)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "tmplqsdq7q9: /tmp/tmplqsdq7q9.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < m && j < n) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == n) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < n && j < m; i++) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n    }\n    return (j == m);\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int i = 0, j = 0;\n    while (i < A.size() && j < B.size()) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == B.size()) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124054,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n    int m = A.size();\n    int n = B.size();\n    int i = 0;\n    int j = 0;\n    while (i < m && j < n) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == n) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether a vector is subvector of another or not.\nbool is_Sub_Array(std::vector<long> A, std::vector<long> B) {\n\tint m = A.size();\n\tint n = B.size();\n\tint i = 0;\n\tint j = 0;\n\tfor (i = 0; i < n; i++) {\n\t\tfor (j = 0; j < m; j++) {\n\t\t\tif (B[i] == A[j])\n\t\t\t\tbreak;\n\t\t}\n\t\tif (j == m)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_Sub_Array;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)5})), (std::vector<long>({(long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false));\n}\n",
      "timestamp": 1666124057,
      "stdout": "",
      "stderr": "tmprt7ex_d7: /tmp/tmprt7ex_d7.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2})), (std::vector<long>({(long)2, (long)2, (long)0}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}