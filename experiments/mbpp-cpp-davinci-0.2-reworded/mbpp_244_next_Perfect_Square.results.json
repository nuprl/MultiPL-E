{
  "name": "mbpp_244_next_Perfect_Square",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_244_next_Perfect_Square.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Your code here\n    long n=N;\n    while(n*n<=N)\n    {\n        n++;\n    }\n    return n*n;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "tmpk2eu84cr: /tmp/tmpk2eu84cr.cpp:15: int main(): Assertion `candidate((35)) == (36)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i = 1;\n    while(i*i <= N)\n        i++;\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    if(N < 0) {\n        return -1;\n    }\n    long i = 1;\n    while(i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Your code here\n    long i=1;\n    while(i*i<N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "tmpvpv4cz5r: /tmp/tmpvpv4cz5r.cpp:17: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long num = sqrt(N);\n    if(num*num == N)\n        return (num+1)*(num+1);\n    else\n        return (num+1)*(num+1);\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i += 1;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "tmp8wj39lgs: /tmp/tmp8wj39lgs.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long num = N;\n    while(true) {\n        long sqrt_num = sqrt(num);\n        if(sqrt_num * sqrt_num == num) {\n            return num;\n        }\n        num++;\n    }\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "tmpv4ywh4th: /tmp/tmpv4ywh4th.cpp:18: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Your code here\n    long i=1;\n    while(i*i<=N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<N){\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "tmp38bqwvvl: /tmp/tmp38bqwvvl.cpp:16: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "tmp6fnto9ek: /tmp/tmp6fnto9ek.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "tmp6fnto9ek: /tmp/tmp6fnto9ek.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "tmp6fnto9ek: /tmp/tmp6fnto9ek.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "tmp6fnto9ek: /tmp/tmp6fnto9ek.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Your code here\n    long i=0;\n    while(i*i<N)\n    i++;\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "tmpa0dmg3vx: /tmp/tmpa0dmg3vx.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N){\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    int i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (1) {\n        if (i*i > N) {\n            return i*i;\n        }\n        i++;\n    }\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N){\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "tmp6fnto9ek: /tmp/tmp6fnto9ek.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long num = sqrt(N);\n    return (num + 1) * (num + 1);\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long num = sqrt(N);\n    if(num*num == N) {\n        return (num+1)*(num+1);\n    }\n    return -1;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "tmp9pmxa85z: /tmp/tmp9pmxa85z.cpp:13: int main(): Assertion `candidate((35)) == (36)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "tmp6fnto9ek: /tmp/tmp6fnto9ek.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Your code here\n    long i=1;\n    while(i*i<=N){\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "tmp6fnto9ek: /tmp/tmp6fnto9ek.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Your code here\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=0;\n    while(i*i<=N){\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long num = N;\n    long sqrt_num = sqrt(num);\n    long next_sqrt = sqrt_num + 1;\n    long next_perfect_square = next_sqrt * next_sqrt;\n    return next_perfect_square;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "tmp6fnto9ek: /tmp/tmp6fnto9ek.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<N){\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "tmp38bqwvvl: /tmp/tmp38bqwvvl.cpp:16: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "tmp6fnto9ek: /tmp/tmp6fnto9ek.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "tmpb0wxp7ls: /tmp/tmpb0wxp7ls.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Your code here\n    long i=1;\n    while(i*i<=N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n\tlong i = 1;\n\twhile (i*i <= N) {\n\t\ti++;\n\t}\n\treturn i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n\tlong i = 1;\n\twhile (i * i <= N) {\n\t\ti++;\n\t}\n\treturn i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "tmp6fnto9ek: /tmp/tmp6fnto9ek.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "tmp8wj39lgs: /tmp/tmp8wj39lgs.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "tmp6fnto9ek: /tmp/tmp6fnto9ek.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long sqrt_N = sqrt(N);\n    if (sqrt_N * sqrt_N == N) {\n        return (sqrt_N + 1) * (sqrt_N + 1);\n    }\n    else {\n        return (sqrt_N + 1) * (sqrt_N + 1);\n    }\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "tmp6fnto9ek: /tmp/tmp6fnto9ek.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "tmp6fnto9ek: /tmp/tmp6fnto9ek.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long root = sqrt(N);\n    if (root * root == N) {\n        return N;\n    }\n    return (root + 1) * (root + 1);\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "tmpn70rkqqy: /tmp/tmpn70rkqqy.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "tmpb0wxp7ls: /tmp/tmpb0wxp7ls.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "tmp6fnto9ek: /tmp/tmp6fnto9ek.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "tmp6fnto9ek: /tmp/tmp6fnto9ek.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "tmp8wj39lgs: /tmp/tmp8wj39lgs.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n\tlong i = 1;\n\twhile (i*i <= N) {\n\t\ti++;\n\t}\n\treturn i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long temp = sqrt(N);\n    if(temp*temp == N)\n        return (temp+1)*(temp+1);\n    else\n        return (temp+1)*(temp+1);\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "tmp6fnto9ek: /tmp/tmp6fnto9ek.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "tmp6fnto9ek: /tmp/tmp6fnto9ek.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "tmp6fnto9ek: /tmp/tmp6fnto9ek.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "tmp8wj39lgs: /tmp/tmp8wj39lgs.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long n = N;\n    long sqrt_n = sqrt(n);\n    if(sqrt_n*sqrt_n == n)\n        return n;\n    else\n        return (sqrt_n+1)*(sqrt_n+1);\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "tmp_q38ikqk: /tmp/tmp_q38ikqk.cpp:17: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122772,
      "stdout": "",
      "stderr": "tmpf05sfong: /tmp/tmpf05sfong.cpp:17: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    if(N<0)\n        return -1;\n    long root = sqrt(N);\n    if(root*root == N)\n        return (root+1)*(root+1);\n    else\n        return -1;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122772,
      "stdout": "",
      "stderr": "tmpy4bjujvh: /tmp/tmpy4bjujvh.cpp:16: int main(): Assertion `candidate((35)) == (36)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long sqrt_N = (long)sqrt(N);\n    if (sqrt_N * sqrt_N == N) {\n        return (sqrt_N + 1) * (sqrt_N + 1);\n    }\n    else {\n        return (sqrt_N + 1) * (sqrt_N + 1);\n    }\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122772,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "tmp6fnto9ek: /tmp/tmp6fnto9ek.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "tmp6fnto9ek: /tmp/tmp6fnto9ek.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i = 1;\n    while(i*i<=N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122772,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "tmp8wj39lgs: /tmp/tmp8wj39lgs.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "tmpb0wxp7ls: /tmp/tmpb0wxp7ls.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "tmp6fnto9ek: /tmp/tmp6fnto9ek.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long num = N;\n    while (true) {\n        long sqrt_num = sqrt(num);\n        if (sqrt_num * sqrt_num == num) {\n            return num;\n        }\n        num++;\n    }\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122772,
      "stdout": "",
      "stderr": "tmp2spoqbg6: /tmp/tmp2spoqbg6.cpp:18: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Your code here\n    long i=1;\n    while(i*i<N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "tmpvpv4cz5r: /tmp/tmpvpv4cz5r.cpp:17: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "tmp6fnto9ek: /tmp/tmp6fnto9ek.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N){\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "tmpb0wxp7ls: /tmp/tmpb0wxp7ls.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Your code here\n    long num = N;\n    while(num>0){\n        if(sqrt(num) == (int)sqrt(num)){\n            return num;\n        }\n        num++;\n    }\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122772,
      "stdout": "",
      "stderr": "tmpy0309xkr: /tmp/tmpy0309xkr.cpp:18: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "tmp6fnto9ek: /tmp/tmp6fnto9ek.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "tmp6fnto9ek: /tmp/tmp6fnto9ek.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "tmp8wj39lgs: /tmp/tmp8wj39lgs.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long sq=sqrt(N);\n    if(sq*sq==N)\n        return (sq+1)*(sq+1);\n    else\n        return (sq+1)*(sq+1);\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122772,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "tmp8wj39lgs: /tmp/tmp8wj39lgs.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "tmp6fnto9ek: /tmp/tmp6fnto9ek.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "tmp6fnto9ek: /tmp/tmp6fnto9ek.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i<=N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122772,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "tmp6fnto9ek: /tmp/tmp6fnto9ek.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "tmp6fnto9ek: /tmp/tmp6fnto9ek.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "tmp6fnto9ek: /tmp/tmp6fnto9ek.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "tmp6fnto9ek: /tmp/tmp6fnto9ek.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<N){\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "tmp38bqwvvl: /tmp/tmp38bqwvvl.cpp:16: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122772,
      "stdout": "",
      "stderr": "tmpf05sfong: /tmp/tmpf05sfong.cpp:17: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Your code here\n    long i=1;\n    while(i*i<=N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "tmp6fnto9ek: /tmp/tmp6fnto9ek.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N){\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "tmpb0wxp7ls: /tmp/tmpb0wxp7ls.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long root = sqrt(N);\n    return (root+1)*(root+1);\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122772,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "tmpb0wxp7ls: /tmp/tmpb0wxp7ls.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long root = sqrt(N);\n    return (root + 1) * (root + 1);\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122772,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Your code here\n    long n = sqrt(N);\n    return (n+1)*(n+1);\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122772,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "tmp6fnto9ek: /tmp/tmp6fnto9ek.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    if (N < 0) {\n        return -1;\n    }\n    if (N == 0) {\n        return 1;\n    }\n    long i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122772,
      "stdout": "",
      "stderr": "tmpvo_32cxt: /tmp/tmpvo_32cxt.cpp:21: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Your code here\n    long i=1;\n    while(i*i<N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "tmpvpv4cz5r: /tmp/tmpvpv4cz5r.cpp:17: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "tmp6fnto9ek: /tmp/tmp6fnto9ek.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n\t// Write your code here\n\tlong i = 1;\n\twhile (i * i <= N) {\n\t\ti++;\n\t}\n\treturn i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122772,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "tmp6fnto9ek: /tmp/tmp6fnto9ek.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}