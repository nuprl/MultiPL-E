{
  "name": "mbpp_255_combinations_colors",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a vector and length n, and generates all combinations (with repetition) of the elements of the vector and returns a vector with a tuple for each combination.\nstd::vector<std::string> combinations_colors(std::vector<std::string> l, long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_255_combinations_colors.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = combinations_colors;\n    assert(candidate((std::vector<std::string>({(std::string)\"Red\", (std::string)\"Green\", (std::string)\"Blue\"})), (1)) == (std::vector<std::string>({(std::tuple<std::string>)std::make_tuple(\"Red\"), (std::tuple<std::string>)std::make_tuple(\"Green\"), (std::tuple<std::string>)std::make_tuple(\"Blue\")})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Red\", (std::string)\"Green\", (std::string)\"Blue\"})), (2)) == (std::vector<std::string>({(std::tuple<std::string, std::string>)std::make_tuple(\"Red\", \"Red\"), (std::tuple<std::string, std::string>)std::make_tuple(\"Red\", \"Green\"), (std::tuple<std::string, std::string>)std::make_tuple(\"Red\", \"Blue\"), (std::tuple<std::string, std::string>)std::make_tuple(\"Green\", \"Green\"), (std::tuple<std::string, std::string>)std::make_tuple(\"Green\", \"Blue\"), (std::tuple<std::string, std::string>)std::make_tuple(\"Blue\", \"Blue\")})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Red\", (std::string)\"Green\", (std::string)\"Blue\"})), (3)) == (std::vector<std::string>({(std::tuple<std::string, std::string, std::string>)std::make_tuple(\"Red\", \"Red\", \"Red\"), (std::tuple<std::string, std::string, std::string>)std::make_tuple(\"Red\", \"Red\", \"Green\"), (std::tuple<std::string, std::string, std::string>)std::make_tuple(\"Red\", \"Red\", \"Blue\"), (std::tuple<std::string, std::string, std::string>)std::make_tuple(\"Red\", \"Green\", \"Green\"), (std::tuple<std::string, std::string, std::string>)std::make_tuple(\"Red\", \"Green\", \"Blue\"), (std::tuple<std::string, std::string, std::string>)std::make_tuple(\"Red\", \"Blue\", \"Blue\"), (std::tuple<std::string, std::string, std::string>)std::make_tuple(\"Green\", \"Green\", \"Green\"), (std::tuple<std::string, std::string, std::string>)std::make_tuple(\"Green\", \"Green\", \"Blue\"), (std::tuple<std::string, std::string, std::string>)std::make_tuple(\"Green\", \"Blue\", \"Blue\"), (std::tuple<std::string, std::string, std::string>)std::make_tuple(\"Blue\", \"Blue\", \"Blue\")})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<std::string> result;\n    std::string temp;\n    for (long i = 0; i < n; i++) {\n        temp += l[0];\n    }\n    result.push_back(temp);\n    for (long i = 1; i < l.size(); i++) {\n        long size = result.size();\n        for (long j = 0; j < size; j++) {\n            std::string temp = result[j];\n            for (long k = 0; k < n; k++) {\n                result.push_back(temp);\n                result[result.size() - 1][k] = l[i][0];\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::stringstream ss;\n    std::stringstream ss2;\n    std::stringstream ss3;\n    std::stringstream ss4;\n    std::stringstream ss5;\n    std::stringstream ss6;\n    std::stringstream ss7;\n    std::stringstream ss8;\n    std::stringstream ss9;\n    std::stringstream ss10;\n    std::stringstream ss11;\n    std::stringstream ss12;\n    std::stringstream ss13;\n    std::stringstream ss14;\n    std::stringstream ss15;\n    std::stringstream ss16;\n    std::stringstream ss17;\n    std::stringstream ss18;\n    std::stringstream ss19;\n    std::stringstream ss20;\n    std::stringstream ss21;\n    std::stringstream ss22;\n    std::stringstream ss23;\n    std::stringstream ss24;\n    std::stringstream ss25;\n    std::stringstream ss26;\n    std::stringstream ss27;\n    std::stringstream ss28;\n    std::stringstream ss29;\n    std::stringstream ss30;\n    std::stringstream ss31;\n    std::stringstream ss32;\n    std::stringstream ss33;\n    std::stringstream ss34;\n    std::stringstream ss35;\n    std::stringstream ss36;\n    std::stringstream ss37;\n    std::stringstream ss38;\n    std::stringstream ss39;\n    std::stringstream ss40;\n    std::stringstream ss41;\n    std::stringstream ss42;\n    std::stringstream ss43;\n    std::stringstream ss44;\n    std::stringstream ss45;\n    std::stringstream ss46;\n    std::stringstream ss47;\n    std::stringstream ss48;\n    std::stringstream ss49;\n    std::stringstream ss50;\n    std::stringstream ss51;\n    std::stringstream ss52;\n    std::stringstream ss53;\n    std::stringstream ss54;\n    std::stringstream ss55",
    "    std::vector<std::string> result;\n    std::string s;\n    std::stringstream ss;\n    for (long i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < l.size(); j++) {\n            s = result[i];\n            s[i] = l[j][0];\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    std::vector<int> indices(n, 0);\n    while (true) {\n        for (int i = 0; i < n; i++) {\n            temp += l[indices[i]];\n        }\n        result.push_back(temp);\n        temp.clear();\n        int i;\n        for (i = n - 1; i >= 0; i--) {\n            if (indices[i] < l.size() - 1) {\n                indices[i]++;\n                break;\n            } else {\n                indices[i] = 0;\n            }\n        }\n        if (i < 0) {\n            break;\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (long i = 0; i < n; i++) {\n        temp.append(l[i]);\n    }\n    result.push_back(temp);\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < l.size(); j++) {\n            temp = result[i];\n            temp[i] = l[j][0];\n            result.push_back(temp);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    std::stringstream ss;\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = 0; j < l.size(); j++) {\n            for (int k = 0; k < l.size(); k++) {\n                ss << l[i] << l[j] << l[k];\n                ss >> temp;\n                result.push_back(temp);\n                ss.clear();\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    std::string temp_result;\n    for(int i=0; i<n; i++) {\n        temp += l[i];\n    }\n    for(int i=0; i<n; i++) {\n        for(int j=0; j<n; j++) {\n            for(int k=0; k<n; k++) {\n                temp_result = temp[i];\n                temp_result += temp[j];\n                temp_result += temp[k];\n                result.push_back(temp_result);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::vector<int> v(n, 0);\n    while (true) {\n        for (int i = 0; i < n; i++) {\n            s += l[v[i]];\n        }\n        result.push_back(s);\n        s.clear();\n        int i = 0;\n        while (i < n && v[i] == l.size() - 1) {\n            v[i] = 0;\n            i++;\n        }\n        if (i == n) {\n            break;\n        }\n        v[i]++;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::sort(l.begin(), l.end());\n    do {\n        for (int i = 0; i < n; i++) {\n            s += l[i];\n        }\n        result.push_back(s);\n        s.clear();\n    } while (std::next_permutation(l.begin(), l.end()));\n    return result;",
    "  std::vector<std::string> result;\n  std::string s;\n  std::vector<int> v(n,0);\n  while(1) {\n    for(int i=0;i<n;i++) {\n      s+=l[v[i]];\n    }\n    result.push_back(s);\n    s.clear();\n    int i;\n    for(i=n-1;i>=0;i--) {\n      if(v[i]!=l.size()-1) {\n        break;\n      }\n    }\n    if(i==-1) {\n      break;\n    }\n    v[i]++;\n    for(int j=i+1;j<n;j++) {\n      v[j]=0;\n    }\n  }\n  return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (long i = 0; i < n; i++) {\n        temp += l[0];\n    }\n    result.push_back(temp);\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < l.size(); j++) {\n            temp = result[i];\n            temp[i] = l[j][0];\n            result.push_back(temp);\n        }\n    }\n    return result;",
    "  std::vector<std::string> result;\n  std::string s = \"\";\n  std::function<void(long)> combinations_colors_helper = [&](long index) {\n    if (index == n) {\n      result.push_back(s);\n      return;\n    }\n    for (long i = 0; i < l.size(); i++) {\n      s += l[i];\n      combinations_colors_helper(index + 1);\n      s.pop_back();\n    }\n  };\n  combinations_colors_helper(0);\n  return result;",
    "    std::vector<std::string> combinations;\n    std::string combination;\n    for (long i = 0; i < n; i++) {\n        combination += l[0];\n    }\n    combinations.push_back(combination);\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < l.size(); j++) {\n            combination[i] = l[j];\n            combinations.push_back(combination);\n        }\n    }\n    return combinations;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::vector<int> v(n, 0);\n    while (true) {\n        for (int i = 0; i < n; i++) {\n            s += l[v[i]];\n        }\n        result.push_back(s);\n        s = \"\";\n        int i;\n        for (i = 0; i < n; ++i) {\n            if (v[i] != l.size() - 1) {\n                break;\n            }\n        }\n        if (i == n) {\n            break;\n        }\n        v[i]++;\n        for (int j = 0; j < i; j++) {\n            v[j] = 0;\n        }\n    }\n    return result;",
    "  std::vector<std::string> result;\n  std::string s;\n  std::vector<int> v(n, 0);\n  while (true) {\n    for (int i = 0; i < n; i++) {\n      s += l[v[i]];\n    }\n    result.push_back(s);\n    s.clear();\n    int i = 0;\n    while (i < n && v[i] == l.size() - 1) {\n      v[i] = 0;\n      i++;\n    }\n    if (i == n) {\n      break;\n    }\n    v[i]++;\n  }\n  return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (int i = 0; i < n; i++) {\n        temp = temp + l[i];\n    }\n    result.push_back(temp);\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            temp = temp + l[j];\n            result.push_back(temp);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < l.size(); j++) {\n            temp = l[j];\n            result.push_back(temp);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string current;\n    std::vector<int> indices(n, 0);\n    while (true) {\n        for (int i = 0; i < n; i++) {\n            current += l[indices[i]];\n        }\n        result.push_back(current);\n        current.clear();\n        int i = n - 1;\n        while (i >= 0 && indices[i] == l.size() - 1) {\n            indices[i] = 0;\n            i--;\n        }\n        if (i < 0) {\n            break;\n        }\n        indices[i]++;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp = \"\";\n    for (int i = 0; i < n; i++) {\n        temp += l[0];\n    }\n    result.push_back(temp);\n    for (int i = 1; i < l.size(); i++) {\n        std::vector<std::string> temp_result;\n        for (int j = 0; j < result.size(); j++) {\n            for (int k = 0; k < n; k++) {\n                temp_result.push_back(result[j].substr(0, k) + l[i] + result[j].substr(k, n - k));\n            }\n        }\n        result = temp_result;\n    }\n    return result;",
    "    std::vector<std::string> res;\n    std::string s;\n    std::vector<int> v(n,0);\n    while(1){\n        for(int i=0;i<n;i++)\n            s+=l[v[i]];\n        res.push_back(s);\n        s.clear();\n        int i;\n        for(i=n-1;i>=0;i--){\n            if(v[i]!=l.size()-1){\n                v[i]++;\n                break;\n            }\n            else\n                v[i]=0;\n        }\n        if(i==-1)\n            break;\n    }\n    return res;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::vector<int> v(n, 0);\n    while (true) {\n        for (int i = 0; i < n; i++) {\n            s += l[v[i]];\n        }\n        result.push_back(s);\n        s = \"\";\n        int i;\n        for (i = 0; i < n; ++i) {\n            if (v[i] < l.size() - 1) {\n                ++v[i];\n                break;\n            }\n            v[i] = 0;\n        }\n        if (i == n) {\n            break;\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i = 0; i < n; i++) {\n        temp += l[0];\n    }\n    result.push_back(temp);\n    for(int i = 1; i < l.size(); i++) {\n        std::vector<std::string> temp_result;\n        for(int j = 0; j < result.size(); j++) {\n            for(int k = 0; k < n; k++) {\n                temp_result.push_back(result[j].substr(0, k) + l[i] + result[j].substr(k, n-k));\n            }\n        }\n        result = temp_result;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    for (long i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for (long i = 1; i < l.size(); i++) {\n        std::vector<std::string> temp;\n        for (long j = 0; j < result.size(); j++) {\n            for (long k = 0; k < n; k++) {\n                std::string s = result[j];\n                s[k] = l[i][0];\n                temp.push_back(s);\n            }\n        }\n        result = temp;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    for (long i = 0; i < n; i++) {\n        s += \"0\";\n    }\n    long count = 0;\n    while (count < pow(l.size(), n)) {\n        for (long i = 0; i < n; i++) {\n            result.push_back(l[s[i] - '0']);\n        }\n        result.push_back(\"\\n\");\n        count++;\n        long i = n - 1;\n        while (i >= 0 && s[i] == '3') {\n            s[i] = '0';\n            i--;\n        }\n        if (i >= 0) {\n            s[i]++;\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    for(int i=0;i<n;i++)\n        s.push_back('0');\n    int i=0;\n    while(i<n){\n        if(s[i]=='0'){\n            s[i]='1';\n            result.push_back(s);\n            i++;\n        }\n        else{\n            s[i]='0';\n            i--;\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    for (int i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for (int i = 1; i < l.size(); i++) {\n        std::vector<std::string> temp;\n        for (int j = 0; j < result.size(); j++) {\n            std::string s = result[j];\n            for (int k = 0; k < n; k++) {\n                std::string t = s;\n                t[k] = l[i][0];\n                temp.push_back(t);\n            }\n        }\n        result = temp;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i = 0; i < n; i++) {\n        temp += l[i];\n    }\n    result.push_back(temp);\n    while(std::next_permutation(temp.begin(), temp.end())) {\n        result.push_back(temp);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(long i = 0; i < l.size(); i++) {\n        for(long j = 0; j < n; j++) {\n            temp += l[i];\n        }\n        result.push_back(temp);\n        temp = \"\";\n    }\n    return result;",
    "    std::vector<std::string> combinations;\n    std::string combination;\n    for (int i = 0; i < n; i++) {\n        combination += l[0];\n    }\n    combinations.push_back(combination);\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < l.size(); j++) {\n            combination = combinations[i];\n            combination[n - i - 1] = l[j][0];\n            combinations.push_back(combination);\n        }\n    }\n    return combinations;",
    "    std::vector<std::string> combinations;\n    std::string s = \"\";\n    for (long i = 0; i < n; i++) {\n        s += \"0\";\n    }\n    std::string temp = s;\n    while (temp != s + std::string(n, '1')) {\n        std::string t = \"\";\n        for (long i = 0; i < n; i++) {\n            if (temp[i] == '1') {\n                t += l[i];\n            }\n        }\n        combinations.push_back(t);\n        temp = std::bitset<64>(std::bitset<64>(temp).to_ulong() + 1).to_string();\n    }\n    return combinations;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    std::vector<int> v(n, 0);\n    while (true) {\n        for (int i = 0; i < n; i++) {\n            s += l[v[i]];\n        }\n        result.push_back(s);\n        s = \"\";\n        int i;\n        for (i = n - 1; i >= 0; i--) {\n            if (v[i] < l.size() - 1) {\n                v[i]++;\n                break;\n            } else {\n                v[i] = 0;\n            }\n        }\n        if (i < 0) {\n            break;\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    for (int i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < l.size(); j++) {\n            std::string temp = result[i];\n            temp[n-i-1] = l[j][0];\n            result.push_back(temp);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    for (int i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < l.size(); j++) {\n            std::string s = result[i];\n            s[n - i - 1] = l[j][0];\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    for (int i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    while (s != l[l.size()-1]) {\n        int i = n-1;\n        while (i >= 0 && s[i] == l[l.size()-1]) {\n            s[i] = l[0];\n            i--;\n        }\n        if (i >= 0) {\n            int j = 0;\n            while (l[j] != s[i]) {\n                j++;\n            }\n            s[i] = l[j+1];\n        }\n        result.push_back(s);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    for (long i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < l.size(); j++) {\n            std::string s = result[i];\n            s[n - i - 1] = l[j][0];\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    for(int i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < l.size(); j++) {\n            s = result[i];\n            s[i] = l[j][0];\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    std::vector<std::string>::iterator it;\n    for(long i=0;i<n;i++){\n        for(it=l.begin();it!=l.end();it++){\n            temp = *it;\n            result.push_back(temp);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (long i = 0; i < n; i++) {\n        temp += l[0];\n    }\n    result.push_back(temp);\n    for (long i = 1; i < l.size(); i++) {\n        std::vector<std::string> temp_result;\n        for (long j = 0; j < result.size(); j++) {\n            for (long k = 0; k < n; k++) {\n                std::string temp = result[j];\n                temp[k] = l[i][0];\n                temp_result.push_back(temp);\n            }\n        }\n        result = temp_result;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    std::stringstream ss;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            for (int k = 0; k < n; k++) {\n                ss << l[i] << l[j] << l[k];\n                ss >> temp;\n                result.push_back(temp);\n                ss.clear();\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> res;\n    std::string temp;\n    std::string temp2;\n    std::string temp3;\n    std::string temp4;\n    std::string temp5;\n    std::string temp6;\n    std::string temp7;\n    std::string temp8;\n    std::string temp9;\n    std::string temp10;\n    std::string temp11;\n    std::string temp12;\n    std::string temp13;\n    std::string temp14;\n    std::string temp15;\n    std::string temp16;\n    std::string temp17;\n    std::string temp18;\n    std::string temp19;\n    std::string temp20;\n    std::string temp21;\n    std::string temp22;\n    std::string temp23;\n    std::string temp24;\n    std::string temp25;\n    std::string temp26;\n    std::string temp27;\n    std::string temp28;\n    std::string temp29;\n    std::string temp30;\n    std::string temp31;\n    std::string temp32;\n    std::string temp33;\n    std::string temp34;\n    std::string temp35;\n    std::string temp36;\n    std::string temp37;\n    std::string temp38;\n    std::string temp39;\n    std::string temp40;\n    std::string temp41;\n    std::string temp42;\n    std::string temp43;\n    std::string temp44;\n    std::string temp45;\n    std::string temp46;\n    std::string temp47;\n    std::string temp48;\n    std::string temp49;\n    std::string temp50;\n    std::string temp51;\n    std::string temp52;\n    std::string temp53;\n    std::string temp54;\n    std::string temp55;\n    std::string temp56;\n    std::string temp57;\n    std::string temp58;\n    std::string temp59;\n    std::string temp60;\n    std::string temp61;\n    std::string temp62;\n    std::string",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (long i = 0; i < n; i++) {\n        temp += l[0];\n    }\n    result.push_back(temp);\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < l.size(); j++) {\n            temp = result[i];\n            temp[i] = l[j][0];\n            result.push_back(temp);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::stringstream ss;\n    for (long i = 0; i < n; i++) {\n        s += \"0\";\n    }\n    std::string t = s;\n    while (s != t) {\n        for (long i = 0; i < n; i++) {\n            ss << l[s[i] - '0'];\n        }\n        result.push_back(ss.str());\n        ss.str(\"\");\n        s = std::bitset<64>(std::stoull(s, 0, 2) + 1).to_string();\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::vector<int> v(n, 0);\n    while (true) {\n        for (int i = 0; i < n; i++) {\n            s += l[v[i]];\n        }\n        result.push_back(s);\n        s.clear();\n        int i;\n        for (i = 0; i < n; ++i) {\n            if (v[i] < l.size() - 1) {\n                v[i]++;\n                break;\n            } else {\n                v[i] = 0;\n            }\n        }\n        if (i == n) {\n            break;\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    std::string s;\n    for(long i = 0; i < l.size(); i++) {\n        temp = l[i];\n        s = temp;\n        result.push_back(s);\n        for(long j = i+1; j < l.size(); j++) {\n            temp = temp + \" \" + l[j];\n            s = temp;\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    std::vector<int> v(n, 0);\n    int i = 0;\n    while (i < n) {\n        if (v[i] < l.size()) {\n            temp.append(l[v[i]]);\n            if (i == n - 1) {\n                result.push_back(temp);\n                temp.clear();\n            }\n            i++;\n        } else {\n            v[i] = 0;\n            i--;\n            temp.pop_back();\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    for (long i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < l.size(); j++) {\n            std::string s = result[i];\n            s[n - i - 1] = l[j][0];\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::vector<int> v(n, 0);\n    while (true) {\n        for (int i = 0; i < n; i++) {\n            s += l[v[i]];\n        }\n        result.push_back(s);\n        s = \"\";\n        int i;\n        for (i = 0; i < n; ++i) {\n            if (v[i] != l.size() - 1) {\n                break;\n            }\n        }\n        if (i == n) {\n            break;\n        }\n        v[i]++;\n        for (int j = 0; j < i; j++) {\n            v[j] = 0;\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (long i = 0; i < n; i++) {\n        temp += l[0];\n    }\n    result.push_back(temp);\n    for (long i = 1; i < l.size(); i++) {\n        std::vector<std::string> temp_result;\n        for (long j = 0; j < result.size(); j++) {\n            for (long k = 0; k < n; k++) {\n                temp_result.push_back(result[j].substr(0, k) + l[i] + result[j].substr(k, n - k));\n            }\n        }\n        result = temp_result;\n    }\n    return result;",
    "    std::vector<std::string> combinations;\n    std::string s;\n    for (long i = 0; i < n; i++) {\n        s += l[i];\n    }\n    combinations.push_back(s);\n    while (std::next_permutation(s.begin(), s.end())) {\n        combinations.push_back(s);\n    }\n    return combinations;",
    "    std::vector<std::string> result;\n    std::string temp = \"\";\n    for (long i = 0; i < n; i++) {\n        temp += l[0];\n    }\n    result.push_back(temp);\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < l.size(); j++) {\n            std::string temp = result[i];\n            temp[i] = l[j][0];\n            result.push_back(temp);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    std::function<void(long)> combination = [&](long offset) {\n        if (offset == n) {\n            result.push_back(s);\n            return;\n        }\n        for (long i = 0; i < l.size(); ++i) {\n            s += l[i];\n            combination(offset + 1);\n            s.pop_back();\n        }\n    };\n    combination(0);\n    return result;",
    "  std::vector<std::string> result;\n  std::string temp;\n  for (int i = 0; i < n; i++) {\n    temp += l[i];\n  }\n  result.push_back(temp);\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < n; j++) {\n      if (i != j) {\n        temp = l[i] + l[j];\n        result.push_back(temp);\n      }\n    }\n  }\n  return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    std::stringstream ss;\n    for(int i = 0; i < l.size(); i++) {\n        for(int j = 0; j < l.size(); j++) {\n            for(int k = 0; k < l.size(); k++) {\n                ss << l[i] << l[j] << l[k];\n                ss >> temp;\n                result.push_back(temp);\n                ss.clear();\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i = 0; i < l.size(); i++) {\n        for(int j = 0; j < l.size(); j++) {\n            for(int k = 0; k < l.size(); k++) {\n                temp = l[i] + l[j] + l[k];\n                result.push_back(temp);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    for (int i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < l.size(); j++) {\n            s[i] = l[j];\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    std::vector<int> v(n, 0);\n    while (true) {\n        for (int i = 0; i < n; i++) {\n            s += l[v[i]];\n        }\n        result.push_back(s);\n        s = \"\";\n        int i;\n        for (i = n - 1; i >= 0; i--) {\n            if (v[i] < l.size() - 1) {\n                v[i]++;\n                break;\n            } else {\n                v[i] = 0;\n            }\n        }\n        if (i < 0) {\n            break;\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    for (int i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < l.size(); j++) {\n            std::string s1 = result[i];\n            s1[n - 1 - i] = l[j][0];\n            result.push_back(s1);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::vector<int> v(n, 0);\n    while (true) {\n        for (int i = 0; i < n; i++) {\n            s += l[v[i]];\n        }\n        result.push_back(s);\n        s = \"\";\n        int i;\n        for (i = 0; i < n; ++i) {\n            if (v[i] != l.size() - 1) {\n                break;\n            }\n        }\n        if (i == n) {\n            break;\n        }\n        v[i]++;\n        for (int j = 0; j < i; j++) {\n            v[j] = 0;\n        }\n    }\n    return result;",
    "    std::vector<std::string> res;\n    std::string temp;\n    for (long i = 0; i < l.size(); i++) {\n        for (long j = 0; j < l.size(); j++) {\n            for (long k = 0; k < l.size(); k++) {\n                temp = l[i] + l[j] + l[k];\n                res.push_back(temp);\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::string> result;\n    std::string str = \"\";\n    for (int i = 0; i < n; i++) {\n        str += l[0];\n    }\n    result.push_back(str);\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < l.size(); j++) {\n            str = result[i];\n            str[n - i - 1] = l[j][0];\n            result.push_back(str);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    std::string s;\n    for(int i=0;i<n;i++)\n        s+=\"0\";\n    for(int i=0;i<pow(l.size(),n);i++)\n    {\n        temp=s;\n        for(int j=0;j<n;j++)\n        {\n            result.push_back(l[temp[j]-'0']);\n        }\n        int j=n-1;\n        while(j>=0 && temp[j]=='3')\n        {\n            temp[j]='0';\n            j--;\n        }\n        if(j>=0)\n            temp[j]++;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp = \"\";\n    for (long i = 0; i < n; i++) {\n        temp += l[0];\n    }\n    result.push_back(temp);\n    for (long i = 1; i < l.size(); i++) {\n        std::vector<std::string> temp_result;\n        for (long j = 0; j < result.size(); j++) {\n            for (long k = 0; k < n; k++) {\n                std::string temp = result[j];\n                temp[k] = l[i][0];\n                temp_result.push_back(temp);\n            }\n        }\n        result = temp_result;\n    }\n    return result;",
    "  std::vector<std::string> result;\n  std::string s;\n  std::vector<int> v(n, 0);\n  while (true) {\n    for (int i = 0; i < n; i++) {\n      s += l[v[i]];\n    }\n    result.push_back(s);\n    s.clear();\n    int i = 0;\n    while (i < n && v[i] == l.size() - 1) {\n      v[i] = 0;\n      i++;\n    }\n    if (i == n) {\n      break;\n    }\n    v[i]++;\n  }\n  return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    for (int i = 0; i < n; i++) {\n        s += \"0\";\n    }\n    for (int i = 0; i < pow(l.size(), n); i++) {\n        for (int j = 0; j < n; j++) {\n            s[j] = l[s[j] - '0'];\n        }\n        result.push_back(s);\n        s[n - 1]++;\n        for (int j = n - 1; j >= 0; j--) {\n            if (s[j] == l.size() + '0') {\n                s[j] = '0';\n                if (j > 0) {\n                    s[j - 1]++;\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    for (long i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < l.size(); j++) {\n            std::string s = result[i];\n            s[n - i - 1] = l[j][0];\n            result.push_back(s);\n        }\n    }\n    return result;",
    "  std::vector<std::string> result;\n  std::string temp;\n  for (long i = 0; i < n; i++) {\n    temp += l[0];\n  }\n  result.push_back(temp);\n  for (long i = 1; i < l.size(); i++) {\n    std::vector<std::string> temp_result;\n    for (long j = 0; j < result.size(); j++) {\n      for (long k = 0; k < n; k++) {\n        std::string temp_str = result[j];\n        temp_str[k] = l[i][0];\n        temp_result.push_back(temp_str);\n      }\n    }\n    result = temp_result;\n  }\n  return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (long i = 0; i < n; i++) {\n        temp += l[0];\n    }\n    result.push_back(temp);\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < l.size(); j++) {\n            for (long k = 0; k < result.size(); k++) {\n                if (result[k][i] == l[j][0]) {\n                    continue;\n                }\n                temp = result[k];\n                temp[i] = l[j][0];\n                result.push_back(temp);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> res;\n    std::string s;\n    for (int i = 0; i < n; i++) {\n        s += l[0];\n    }\n    res.push_back(s);\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < l.size(); j++) {\n            std::string s = res[i];\n            s[n - i - 1] = l[j][0];\n            res.push_back(s);\n        }\n    }\n    return res;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (int i = 0; i < n; i++) {\n        temp += l[0];\n    }\n    result.push_back(temp);\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < l.size(); j++) {\n            temp = result[i];\n            temp[i] = l[j][0];\n            result.push_back(temp);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i = 0; i < n; i++) {\n        temp += l[0];\n    }\n    result.push_back(temp);\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < l.size(); j++) {\n            temp = result[i];\n            temp[i] = l[j][0];\n            result.push_back(temp);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    for(int i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < l.size(); j++) {\n            s = result[i];\n            s[i] = l[j][0];\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::sort(l.begin(), l.end());\n    do {\n        for (int i = 0; i < n; i++) {\n            s += l[i];\n        }\n        result.push_back(s);\n        s = \"\";\n    } while (std::next_permutation(l.begin(), l.end()));\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(long i = 0; i < n; i++) {\n        temp += l[i];\n    }\n    result.push_back(temp);\n    for(long i = n - 1; i >= 0; i--) {\n        if(l[i] != l[n - 1]) {\n            temp = temp.substr(0, i) + l[n - 1] + temp.substr(i + 1, n - i - 1);\n            result.push_back(temp);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    std::string temp2;\n    std::string temp3;\n    std::string temp4;\n    std::string temp5;\n    std::string temp6;\n    std::string temp7;\n    std::string temp8;\n    std::string temp9;\n    std::string temp10;\n    std::string temp11;\n    std::string temp12;\n    std::string temp13;\n    std::string temp14;\n    std::string temp15;\n    std::string temp16;\n    std::string temp17;\n    std::string temp18;\n    std::string temp19;\n    std::string temp20;\n    std::string temp21;\n    std::string temp22;\n    std::string temp23;\n    std::string temp24;\n    std::string temp25;\n    std::string temp26;\n    std::string temp27;\n    std::string temp28;\n    std::string temp29;\n    std::string temp30;\n    std::string temp31;\n    std::string temp32;\n    std::string temp33;\n    std::string temp34;\n    std::string temp35;\n    std::string temp36;\n    std::string temp37;\n    std::string temp38;\n    std::string temp39;\n    std::string temp40;\n    std::string temp41;\n    std::string temp42;\n    std::string temp43;\n    std::string temp44;\n    std::string temp45;\n    std::string temp46;\n    std::string temp47;\n    std::string temp48;\n    std::string temp49;\n    std::string temp50;\n    std::string temp51;\n    std::string temp52;\n    std::string temp53;\n    std::string temp54;\n    std::string temp55;\n    std::string temp56;\n    std::string temp57;\n    std::string temp58;\n    std::string temp59;\n    std::string temp60;\n    std::string temp61;\n    std::string temp62;\n    std::string",
    "    std::vector<std::string> combinations;\n    std::string combination;\n    std::stringstream ss;\n    for (int i = 0; i < l.size(); i++) {\n        combination = l[i];\n        combinations.push_back(combination);\n        for (int j = i+1; j < l.size(); j++) {\n            combination = l[i] + \" \" + l[j];\n            combinations.push_back(combination);\n        }\n    }\n    return combinations;",
    "    std::vector<std::string> result;\n    std::string s;\n    for (int i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < l.size(); j++) {\n            std::string temp = result[i];\n            temp[n - i - 1] = l[j][0];\n            result.push_back(temp);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    for (int i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < l.size(); j++) {\n            std::string s = result[i];\n            s[n - i - 1] = l[j][0];\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::vector<int> v(n,0);\n    while(1) {\n        for(int i=0;i<n;i++) {\n            s += l[v[i]];\n        }\n        result.push_back(s);\n        s.clear();\n        int i;\n        for(i=n-1;i>=0;i--) {\n            if(v[i] != l.size()-1) {\n                v[i]++;\n                break;\n            }\n        }\n        if(i<0) break;\n        for(int j=i+1;j<n;j++) {\n            v[j] = 0;\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    std::string str;\n    for(int i=0;i<l.size();i++){\n        str = l[i];\n        for(int j=0;j<n;j++){\n            temp = temp + str;\n        }\n        result.push_back(temp);\n        temp = \"\";\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::vector<int> v(n, 0);\n    while (true) {\n        for (int i = 0; i < n; i++) {\n            s += l[v[i]];\n        }\n        result.push_back(s);\n        s = \"\";\n        int i;\n        for (i = 0; i < n; ++i) {\n            if (v[i] != l.size() - 1) {\n                break;\n            }\n        }\n        if (i == n) {\n            break;\n        }\n        v[i]++;\n        for (int j = 0; j < i; j++) {\n            v[j] = 0;\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::vector<int> v(n, 0);\n    while (true) {\n        for (int i = 0; i < n; i++) {\n            s += l[v[i]];\n        }\n        result.push_back(s);\n        s = \"\";\n        int i;\n        for (i = 0; i < n; ++i) {\n            if (v[i] < l.size() - 1) {\n                ++v[i];\n                break;\n            }\n            v[i] = 0;\n        }\n        if (i == n) {\n            break;\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    std::string temp2;\n    for (int i = 0; i < l.size(); i++) {\n        temp = l[i];\n        result.push_back(temp);\n        for (int j = i + 1; j < l.size(); j++) {\n            temp2 = temp + l[j];\n            result.push_back(temp2);\n            for (int k = j + 1; k < l.size(); k++) {\n                temp2 = temp2 + l[k];\n                result.push_back(temp2);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string str;\n    for (long i = 0; i < n; i++) {\n        str += l[0];\n    }\n    result.push_back(str);\n    long i = n - 1;\n    while (i >= 0) {\n        if (l[0] == str[i]) {\n            i--;\n        } else {\n            str[i] = l[0];\n            i = n - 1;\n            result.push_back(str);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    for (long i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < l.size(); j++) {\n            std::string s = result[i];\n            s[i] = l[j][0];\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (long i = 0; i < n; i++) {\n        temp += l[0];\n    }\n    result.push_back(temp);\n    for (long i = 1; i < l.size(); i++) {\n        std::vector<std::string> temp_result = result;\n        for (long j = 0; j < temp_result.size(); j++) {\n            std::string temp = temp_result[j];\n            for (long k = 0; k < n; k++) {\n                temp[k] = l[i];\n                result.push_back(temp);\n                temp = temp_result[j];\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp = \"\";\n    std::vector<std::string>::iterator it;\n    for(int i = 0; i < n; i++) {\n        for(it = l.begin(); it != l.end(); it++) {\n            temp = temp + *it;\n            result.push_back(temp);\n            temp = \"\";\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp = \"\";\n    for (long i = 0; i < n; i++) {\n        temp += l[0];\n    }\n    result.push_back(temp);\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < l.size(); j++) {\n            temp = result[i];\n            temp[i] = l[j][0];\n            result.push_back(temp);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    std::stringstream ss;\n    for(long i=0; i<n; i++) {\n        ss << l[i];\n    }\n    temp = ss.str();\n    result.push_back(temp);\n    for(long i=1; i<l.size(); i++) {\n        for(long j=0; j<result.size(); j++) {\n            std::stringstream ss;\n            ss << result[j] << l[i];\n            result.push_back(ss.str());\n        }\n    }\n    return result;",
    "  std::vector<std::string> result;\n  std::string s;\n  std::stringstream ss;\n  for (int i = 0; i < l.size(); i++) {\n    for (int j = 0; j < l.size(); j++) {\n      for (int k = 0; k < l.size(); k++) {\n        ss << l[i] << l[j] << l[k];\n        ss >> s;\n        result.push_back(s);\n        ss.clear();\n      }\n    }\n  }\n  return result;",
    "    std::vector<std::string> res;\n    std::string temp;\n    for(int i = 0; i < n; i++) {\n        temp += l[0];\n    }\n    res.push_back(temp);\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < l.size(); j++) {\n            temp = res[i];\n            temp[i] = l[j][0];\n            res.push_back(temp);\n        }\n    }\n    return res;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (long i = 0; i < n; i++) {\n        temp += l[0];\n    }\n    result.push_back(temp);\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < l.size(); j++) {\n            temp = result[i];\n            temp[i] = l[j][0];\n            result.push_back(temp);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::vector<int> v(n, 0);\n    while (true) {\n        for (int i = 0; i < n; i++) {\n            s += l[v[i]];\n        }\n        result.push_back(s);\n        s = \"\";\n        int i;\n        for (i = 0; i < n; ++i) {\n            if (v[i] < l.size() - 1) {\n                ++v[i];\n                break;\n            }\n            v[i] = 0;\n        }\n        if (i == n) {\n            break;\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    std::string str;\n    for (int i = 0; i < l.size(); i++) {\n        str = l[i];\n        for (int j = 0; j < l.size(); j++) {\n            temp = str + l[j];\n            result.push_back(temp);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (long i = 0; i < n; i++) {\n        temp += l[i];\n    }\n    result.push_back(temp);\n    while (std::next_permutation(temp.begin(), temp.end())) {\n        result.push_back(temp);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (long i = 0; i < n; i++) {\n        temp.append(l[i]);\n    }\n    result.push_back(temp);\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < l.size(); j++) {\n            temp = result[i];\n            temp[i] = l[j][0];\n            result.push_back(temp);\n        }\n    }\n    return result;",
    "  std::vector<std::string> result;\n  std::string temp;\n  for (long i = 0; i < n; i++) {\n    temp += l[0];\n  }\n  result.push_back(temp);\n  for (long i = 1; i < l.size(); i++) {\n    long size = result.size();\n    for (long j = 0; j < size; j++) {\n      std::string temp = result[j];\n      for (long k = 0; k < n; k++) {\n        temp[k] = l[i];\n        result.push_back(temp);\n      }\n    }\n  }\n  return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    std::string str;\n    for(int i = 0; i < l.size(); i++) {\n        temp = l[i];\n        for(int j = 0; j < l.size(); j++) {\n            str = temp + l[j];\n            result.push_back(str);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    std::sort(l.begin(), l.end());\n    do {\n        for (int i = 0; i < n; i++) {\n            temp += l[i];\n        }\n        result.push_back(temp);\n        temp = \"\";\n    } while (std::next_permutation(l.begin(), l.end()));\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::stringstream ss;\n    std::vector<std::string>::iterator it;\n    for (int i = 0; i < n; i++) {\n        for (it = l.begin(); it != l.end(); it++) {\n            s = *it;\n            ss << s;\n            if (i < n - 1) {\n                ss << \",\";\n            }\n        }\n        result.push_back(ss.str());\n        ss.str(\"\");\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (int i = 0; i < n; i++) {\n        temp += l[0];\n    }\n    result.push_back(temp);\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < l.size(); j++) {\n            temp = result[i];\n            temp[i] = l[j][0];\n            result.push_back(temp);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(long i = 0; i < l.size(); i++) {\n        temp = l[i];\n        result.push_back(temp);\n        for(long j = i+1; j < l.size(); j++) {\n            temp = temp + l[j];\n            result.push_back(temp);\n            for(long k = j+1; k < l.size(); k++) {\n                temp = temp + l[k];\n                result.push_back(temp);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> res;\n    std::string temp;\n    for(int i=0; i<n; i++) {\n        temp += \"0\";\n    }\n    res.push_back(temp);\n    for(int i=0; i<n; i++) {\n        int j = i;\n        while(j>=0) {\n            temp[j] = '1';\n            res.push_back(temp);\n            j--;\n        }\n        temp = \"\";\n        for(int k=0; k<n; k++) {\n            temp += \"0\";\n        }\n    }\n    return res;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (long i = 0; i < n; i++) {\n        temp += l[0];\n    }\n    result.push_back(temp);\n    for (long i = 1; i < l.size(); i++) {\n        std::vector<std::string> temp_result;\n        for (long j = 0; j < result.size(); j++) {\n            for (long k = 0; k < n; k++) {\n                temp_result.push_back(result[j].substr(0, k) + l[i] + result[j].substr(k + 1, n - k - 1));\n            }\n        }\n        result = temp_result;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    for (int i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    while (s != \"\") {\n        s = next_combination(s, l);\n        result.push_back(s);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::vector<int> v(n, 0);\n    while (true) {\n        for (int i = 0; i < n; i++) {\n            s += l[v[i]];\n        }\n        result.push_back(s);\n        s = \"\";\n        int i;\n        for (i = 0; i < n; ++i) {\n            if (v[i] != l.size() - 1) {\n                break;\n            }\n        }\n        if (i == n) {\n            break;\n        }\n        v[i]++;\n        for (int j = 0; j < i; j++) {\n            v[j] = 0;\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (int i = 0; i < n; i++) {\n        temp += l[0];\n    }\n    result.push_back(temp);\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < l.size(); j++) {\n            temp = result[i];\n            temp[i] = l[j][0];\n            result.push_back(temp);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::stringstream ss;\n    std::string temp;\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = 0; j < l.size(); j++) {\n            for (int k = 0; k < l.size(); k++) {\n                ss << l[i] << \" \" << l[j] << \" \" << l[k];\n                ss >> temp;\n                result.push_back(temp);\n                ss.clear();\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string current;\n    std::function<void(long)> comb_helper = [&](long k) {\n        if (k == n) {\n            result.push_back(current);\n            return;\n        }\n        for (auto color : l) {\n            current.push_back(color);\n            comb_helper(k+1);\n            current.pop_back();\n        }\n    };\n    comb_helper(0);\n    return result;",
    "    std::vector<std::string> result;\n    std::string str = \"\";\n    for (long i = 0; i < n; i++) {\n        str += l[0];\n    }\n    result.push_back(str);\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < l.size(); j++) {\n            std::string str = result[i];\n            str[n - i - 1] = l[j][0];\n            result.push_back(str);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::vector<int> v(n, 0);\n    while (true) {\n        for (int i = 0; i < n; i++) {\n            s += l[v[i]];\n        }\n        result.push_back(s);\n        s = \"\";\n        int i = 0;\n        while (i < n && v[i] == l.size() - 1) {\n            v[i] = 0;\n            i++;\n        }\n        if (i == n) {\n            break;\n        }\n        v[i]++;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    std::function<void(long)> combinations_colors_helper =\n        [&](long index) {\n            if (index == n) {\n                result.push_back(s);\n                return;\n            }\n            for (auto i : l) {\n                s += i;\n                combinations_colors_helper(index + 1);\n                s.pop_back();\n            }\n        };\n    combinations_colors_helper(0);\n    return result;",
    "    std::vector<std::string> combinations;\n    std::string temp;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++) {\n            for (long k = 0; k < n; k++) {\n                temp = l[i] + l[j] + l[k];\n                combinations.push_back(temp);\n            }\n        }\n    }\n    return combinations;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (long i = 0; i < l.size(); i++) {\n        for (long j = 0; j < n; j++) {\n            temp += l[i];\n        }\n        result.push_back(temp);\n        temp.clear();\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::vector<std::string>::iterator it;\n    for (int i = 0; i < n; i++) {\n        for (it = l.begin(); it != l.end(); it++) {\n            s += *it;\n        }\n        result.push_back(s);\n        s.clear();\n    }\n    return result;",
    "    std::vector<std::string> combinations;\n    std::string combination;\n    std::sort(l.begin(), l.end());\n    do {\n        for (int i = 0; i < n; i++) {\n            combination += l[i];\n        }\n        combinations.push_back(combination);\n        combination = \"\";\n    } while (std::next_permutation(l.begin(), l.end()));\n    return combinations;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    std::string temp = \"\";\n    std::string temp2 = \"\";\n    std::string temp3 = \"\";\n    std::string temp4 = \"\";\n    std::string temp5 = \"\";\n    std::string temp6 = \"\";\n    std::string temp7 = \"\";\n    std::string temp8 = \"\";\n    std::string temp9 = \"\";\n    std::string temp10 = \"\";\n    std::string temp11 = \"\";\n    std::string temp12 = \"\";\n    std::string temp13 = \"\";\n    std::string temp14 = \"\";\n    std::string temp15 = \"\";\n    std::string temp16 = \"\";\n    std::string temp17 = \"\";\n    std::string temp18 = \"\";\n    std::string temp19 = \"\";\n    std::string temp20 = \"\";\n    std::string temp21 = \"\";\n    std::string temp22 = \"\";\n    std::string temp23 = \"\";\n    std::string temp24 = \"\";\n    std::string temp25 = \"\";\n    std::string temp26 = \"\";\n    std::string temp27 = \"\";\n    std::string temp28 = \"\";\n    std::string temp29 = \"\";\n    std::string temp30 = \"\";\n    std::string temp31 = \"\";\n    std::string temp32 = \"\";\n    std::string temp33 = \"\";\n    std::string temp34 = \"\";\n    std::string temp35 = \"\";\n    std::string temp36 = \"\";\n    std::string temp37 = \"\";\n    std::string temp38 = \"\";\n    std::string temp39 = \"\";\n    std::string temp40 = \"\";\n    std::string temp41 = \"\";\n    std::string temp42 = \"\";\n    std::string temp43 = \"\";\n    std::string temp44 = \"\";\n    std::string temp45 = \"\";\n    std::string temp46 = \"\";\n    std::string temp47 = \"\";\n    std::string temp48 = \"\";\n    std::string temp49 = \"\";\n   ",
    "    std::vector<std::string> result;\n    std::string s;\n    std::vector<int> v(n, 0);\n    while (true) {\n        for (int i = 0; i < n; i++) {\n            s += l[v[i]];\n        }\n        result.push_back(s);\n        s = \"\";\n        int i = 0;\n        while (i < n && v[i] == l.size() - 1) {\n            v[i] = 0;\n            i++;\n        }\n        if (i == n) {\n            break;\n        }\n        v[i]++;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (int i = 0; i < n; i++) {\n        temp += l[i];\n    }\n    result.push_back(temp);\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < l.size(); j++) {\n            temp = result[i];\n            temp[i] = l[j][0];\n            result.push_back(temp);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    for (int i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < l.size(); j++) {\n            std::string s = result[i];\n            s[i] = l[j][0];\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    for(int i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for(int i = 1; i < l.size(); i++) {\n        int j = 0;\n        while(j < result.size()) {\n            std::string s = result[j];\n            for(int k = 0; k < n; k++) {\n                result.push_back(s.substr(0, k) + l[i] + s.substr(k + 1));\n            }\n            j++;\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::vector<int> v(n, 0);\n    while (true) {\n        for (int i = 0; i < n; i++) {\n            s += l[v[i]];\n        }\n        result.push_back(s);\n        s.clear();\n        int i = 0;\n        while (i < n && v[i] == l.size() - 1) {\n            v[i] = 0;\n            i++;\n        }\n        if (i == n) {\n            break;\n        }\n        v[i]++;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp = \"\";\n    for (long i = 0; i < n; i++) {\n        temp += l[0];\n    }\n    result.push_back(temp);\n    for (long i = 1; i < l.size(); i++) {\n        std::vector<std::string> temp_result;\n        for (long j = 0; j < result.size(); j++) {\n            std::string temp_string = result[j];\n            for (long k = 0; k < n; k++) {\n                temp_string[k] = l[i];\n                temp_result.push_back(temp_string);\n                temp_string = result[j];\n            }\n        }\n        result = temp_result;\n    }\n    return result;",
    "    std::vector<std::string> combinations;\n    std::string combination;\n    for (long i = 0; i < n; i++) {\n        combination += l[0];\n    }\n    combinations.push_back(combination);\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < l.size(); j++) {\n            combination[i] = l[j];\n            combinations.push_back(combination);\n        }\n    }\n    return combinations;",
    "    std::vector<std::string> result;\n    std::string temp;\n    std::stringstream ss;\n    for(long i = 0; i < n; i++) {\n        for(long j = 0; j < n; j++) {\n            for(long k = 0; k < n; k++) {\n                ss << l[i] << l[j] << l[k];\n                ss >> temp;\n                result.push_back(temp);\n                ss.clear();\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::string temp;\n    for(int i=0;i<l.size();i++)\n    {\n        s+=l[i];\n    }\n    for(int i=0;i<s.size();i++)\n    {\n        temp+=s[i];\n        for(int j=i+1;j<s.size();j++)\n        {\n            temp+=s[j];\n            result.push_back(temp);\n        }\n        temp.clear();\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    std::stringstream ss;\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = 0; j < l.size(); j++) {\n            for (int k = 0; k < l.size(); k++) {\n                ss << l[i] << l[j] << l[k];\n                ss >> temp;\n                result.push_back(temp);\n                ss.clear();\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    for (long i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < l.size(); j++) {\n            std::string s = result[i];\n            s[i] = l[j][0];\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (long i = 0; i < n; i++) {\n        temp += l[0];\n    }\n    result.push_back(temp);\n    for (long i = 1; i < l.size(); i++) {\n        std::vector<std::string> temp_result;\n        for (long j = 0; j < result.size(); j++) {\n            for (long k = 0; k < n; k++) {\n                temp_result.push_back(result[j].substr(0, k) + l[i] + result[j].substr(k));\n            }\n        }\n        result = temp_result;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    for (long i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < l.size(); j++) {\n            std::string s = result[i];\n            s[n-i-1] = l[j][0];\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::sort(l.begin(), l.end());\n    do {\n        for (int i = 0; i < n; i++) {\n            s += l[i];\n        }\n        result.push_back(s);\n        s.clear();\n    } while (std::next_permutation(l.begin(), l.end()));\n    return result;",
    "\tstd::vector<std::string> result;\n\tstd::string temp;\n\tfor (long i = 0; i < n; i++) {\n\t\ttemp.push_back('0');\n\t}\n\tfor (long i = 0; i < pow(l.size(), n); i++) {\n\t\tfor (long j = 0; j < n; j++) {\n\t\t\ttemp[j] = l[(i / (long)pow(l.size(), j)) % l.size()][0];\n\t\t}\n\t\tresult.push_back(temp);\n\t}\n\treturn result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    for (int i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < l.size(); j++) {\n            s = result[i];\n            s[i] = l[j][0];\n            result.push_back(s);\n        }\n    }\n    return result;",
    "  std::vector<std::string> combinations;\n  std::string combination;\n  std::stringstream ss;\n  for(long i = 0; i < n; i++) {\n    combination += l[0];\n  }\n  combinations.push_back(combination);\n  for(long i = 0; i < n; i++) {\n    for(long j = 0; j < l.size(); j++) {\n      combination = combinations[i];\n      combination[i] = l[j];\n      combinations.push_back(combination);\n    }\n  }\n  return combinations;",
    "    std::vector<std::string> result;\n    std::string s;\n    for(int i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < l.size(); j++) {\n            s = result[i];\n            s[i] = l[j][0];\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    for(int i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < l.size(); j++) {\n            std::string s = result[i];\n            s[i] = l[j][0];\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::sort(l.begin(), l.end());\n    do {\n        for (int i = 0; i < n; i++) {\n            s += l[i];\n        }\n        result.push_back(s);\n        s = \"\";\n    } while (std::next_permutation(l.begin(), l.end()));\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::sort(l.begin(), l.end());\n    do {\n        for (int i = 0; i < n; ++i) {\n            s += l[i];\n        }\n        result.push_back(s);\n        s = \"\";\n    } while (std::next_permutation(l.begin(), l.end()));\n    return result;",
    "\tstd::vector<std::string> result;\n\tstd::string temp;\n\tfor (int i = 0; i < n; i++) {\n\t\ttemp += l[i];\n\t}\n\tresult.push_back(temp);\n\tfor (int i = 0; i < n; i++) {\n\t\tfor (int j = 0; j < l.size(); j++) {\n\t\t\ttemp = temp.substr(0, i) + l[j] + temp.substr(i + 1, n - i - 1);\n\t\t\tresult.push_back(temp);\n\t\t}\n\t}\n\treturn result;",
    "    std::vector<std::string> result;\n    std::string s;\n    for (int i = 0; i < n; i++) {\n        s += l[i];\n    }\n    result.push_back(s);\n    while (std::next_permutation(s.begin(), s.end())) {\n        result.push_back(s);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    std::string temp2;\n    for (int i = 0; i < l.size(); i++) {\n        temp = l[i];\n        result.push_back(temp);\n        for (int j = 0; j < l.size(); j++) {\n            temp2 = temp + l[j];\n            result.push_back(temp2);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::sort(l.begin(), l.end());\n    do {\n        for (int i = 0; i < n; i++) {\n            s += l[i];\n        }\n        result.push_back(s);\n        s = \"\";\n    } while (std::next_permutation(l.begin(), l.end()));\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp = \"\";\n    for(long i = 0; i < n; i++) {\n        temp += l[0];\n    }\n    result.push_back(temp);\n    for(long i = 1; i < l.size(); i++) {\n        std::vector<std::string> temp_result;\n        for(long j = 0; j < result.size(); j++) {\n            for(long k = 0; k < n; k++) {\n                std::string temp = result[j];\n                temp[k] = l[i][0];\n                temp_result.push_back(temp);\n            }\n        }\n        result = temp_result;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::vector<int> v(n, 0);\n    while(true) {\n        for(int i = 0; i < n; i++) {\n            s += l[v[i]];\n        }\n        result.push_back(s);\n        s.clear();\n        int i;\n        for(i = n - 1; i >= 0; i--) {\n            if(v[i] < l.size() - 1) {\n                v[i]++;\n                break;\n            }\n            else {\n                v[i] = 0;\n            }\n        }\n        if(i < 0) {\n            break;\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i = 0; i < l.size(); i++) {\n        for(int j = 0; j < l.size(); j++) {\n            for(int k = 0; k < l.size(); k++) {\n                temp = l[i] + l[j] + l[k];\n                result.push_back(temp);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> combinations;\n    std::string combination;\n    std::stringstream ss;\n    for (long i = 0; i < n; i++) {\n        combination += l[0];\n    }\n    combinations.push_back(combination);\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < l.size(); j++) {\n            combination = combinations[i];\n            combination[i] = l[j];\n            combinations.push_back(combination);\n        }\n    }\n    return combinations;",
    "    std::vector<std::string> result;\n    std::string s;\n    for (int i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < l.size(); j++) {\n            s = result[i];\n            s[n-1-i] = l[j][0];\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    for (int i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for (int i = 1; i < l.size(); i++) {\n        std::vector<std::string> temp;\n        for (int j = 0; j < result.size(); j++) {\n            for (int k = 0; k < n; k++) {\n                temp.push_back(result[j].substr(0, k) + l[i] + result[j].substr(k + 1, n - k - 1));\n            }\n        }\n        result = temp;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (long i = 0; i < n; i++) {\n        temp += l[0];\n    }\n    result.push_back(temp);\n    for (long i = 1; i < l.size(); i++) {\n        std::vector<std::string> temp_result;\n        for (long j = 0; j < result.size(); j++) {\n            for (long k = 0; k < n; k++) {\n                temp_result.push_back(result[j].substr(0, k) + l[i] + result[j].substr(k + 1, n - k - 1));\n            }\n        }\n        result = temp_result;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (int i = 0; i < n; i++) {\n        temp += l[0];\n    }\n    result.push_back(temp);\n    for (int i = 0; i < n; i++) {\n        for (int j = 1; j < l.size(); j++) {\n            temp = result[i];\n            temp[n - i - 1] = l[j][0];\n            result.push_back(temp);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = 0; j < l.size(); j++) {\n            for (int k = 0; k < l.size(); k++) {\n                temp = l[i] + l[j] + l[k];\n                result.push_back(temp);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    for(int i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for(int i = 1; i < l.size(); i++) {\n        std::vector<std::string> temp;\n        for(int j = 0; j < result.size(); j++) {\n            for(int k = 0; k < n; k++) {\n                temp.push_back(result[j].substr(0, k) + l[i] + result[j].substr(k, n - k));\n            }\n        }\n        result = temp;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(long i = 0; i < l.size(); i++) {\n        for(long j = 0; j < l.size(); j++) {\n            for(long k = 0; k < l.size(); k++) {\n                temp = l[i] + l[j] + l[k];\n                result.push_back(temp);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (long i = 0; i < n; i++) {\n        temp += l[0];\n    }\n    result.push_back(temp);\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < l.size(); j++) {\n            temp = result[i];\n            temp[n - i - 1] = l[j][0];\n            result.push_back(temp);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    for (long i = 0; i < n; i++) {\n        s.append(l[i]);\n    }\n    result.push_back(s);\n    for (long i = 1; i < l.size(); i++) {\n        for (long j = 0; j < n; j++) {\n            s[j] = l[i][0];\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    for(int i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < l.size(); j++) {\n            s = result[i];\n            s[i] = l[j][0];\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (long i = 0; i < n; i++) {\n        temp.append(l[i]);\n    }\n    result.push_back(temp);\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < l.size(); j++) {\n            temp = result[i];\n            temp.replace(i, 1, l[j]);\n            result.push_back(temp);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::sort(l.begin(), l.end());\n    do {\n        for (int i = 0; i < n; i++) {\n            s += l[i];\n        }\n        result.push_back(s);\n        s.clear();\n    } while (std::next_permutation(l.begin(), l.end()));\n    return result;",
    "    std::vector<std::string> result;\n    std::string str = \"\";\n    std::function<void(long)> combination = [&](long i) {\n        if (i == n) {\n            result.push_back(str);\n            return;\n        }\n        for (auto &x : l) {\n            str += x;\n            combination(i + 1);\n            str.pop_back();\n        }\n    };\n    combination(0);\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    for (int i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < l.size(); j++) {\n            s = result[i];\n            s[i] = l[j][0];\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    for (long i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < l.size(); j++) {\n            s = result[i];\n            s[i] = l[j][0];\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    for (int i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < l.size(); j++) {\n            std::string s = result[i];\n            s[n - i - 1] = l[j][0];\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::sort(l.begin(), l.end());\n    do {\n        s = \"\";\n        for (int i = 0; i < n; i++) {\n            s += l[i];\n        }\n        result.push_back(s);\n    } while (std::next_permutation(l.begin(), l.end()));\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    for (int i = 0; i < n; i++) {\n        s.append(l[i]);\n    }\n    result.push_back(s);\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    for (int i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < l.size(); j++) {\n            std::string s1 = result[i];\n            s1[n - 1 - i] = l[j][0];\n            result.push_back(s1);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    std::sort(l.begin(), l.end());\n    do {\n        for (int i = 0; i < n; i++) {\n            temp += l[i];\n        }\n        result.push_back(temp);\n        temp = \"\";\n    } while (std::next_permutation(l.begin(), l.end()));\n    return result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    std::sort(l.begin(), l.end());\n    combinations_colors_helper(l, n, 0, s, result);\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    std::stringstream ss;\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = 0; j < l.size(); j++) {\n            for (int k = 0; k < l.size(); k++) {\n                ss << l[i] << l[j] << l[k];\n                ss >> temp;\n                result.push_back(temp);\n                ss.clear();\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    std::string s_temp = \"\";\n    for (int i = 0; i < n; i++) {\n        s += \"0\";\n    }\n    for (int i = 0; i < pow(l.size(), n); i++) {\n        s_temp = s;\n        for (int j = 0; j < n; j++) {\n            s_temp[j] = l[s[j] - '0'][0];\n        }\n        result.push_back(s_temp);\n        s = std::to_string(std::stoi(s, nullptr, l.size()) + 1);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::vector<int> v(n, 0);\n    while (true) {\n        for (int i = 0; i < n; i++) {\n            s += l[v[i]];\n        }\n        result.push_back(s);\n        s = \"\";\n        int i;\n        for (i = 0; i < n; ++i) {\n            if (v[i] < l.size() - 1) {\n                ++v[i];\n                break;\n            }\n            v[i] = 0;\n        }\n        if (i == n) {\n            break;\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    for (int i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < l.size(); j++) {\n            s = result[i];\n            s[n - i - 1] = l[j][0];\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::stringstream ss;\n    for (long i = 0; i < l.size(); i++) {\n        for (long j = 0; j < l.size(); j++) {\n            for (long k = 0; k < l.size(); k++) {\n                ss << l[i] << l[j] << l[k];\n                s = ss.str();\n                result.push_back(s);\n                ss.str(std::string());\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp = \"\";\n    for (int i = 0; i < n; i++) {\n        temp += l[0];\n    }\n    result.push_back(temp);\n    for (int i = 1; i < l.size(); i++) {\n        std::vector<std::string> temp_result;\n        for (int j = 0; j < result.size(); j++) {\n            for (int k = 0; k < n; k++) {\n                std::string temp = result[j];\n                temp[k] = l[i][0];\n                temp_result.push_back(temp);\n            }\n        }\n        result = temp_result;\n    }\n    return result;",
    "    std::vector<std::string> combinations;\n    std::string combination;\n    std::vector<int> indices(n, 0);\n    int i = 0;\n    while (i < n) {\n        combination += l[indices[i]];\n        if (i == n - 1) {\n            combinations.push_back(combination);\n            combination = \"\";\n            i--;\n        }\n        else {\n            i++;\n        }\n        if (i == -1) {\n            return combinations;\n        }\n        indices[i]++;\n        if (indices[i] == l.size()) {\n            indices[i] = 0;\n            i--;\n        }\n    }\n    return combinations;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::stringstream ss;\n    std::string temp;\n    for(int i = 0; i < l.size(); i++) {\n        s = l[i];\n        for(int j = 0; j < l.size(); j++) {\n            ss << s << \" \" << l[j];\n            ss >> temp;\n            result.push_back(temp);\n            ss.clear();\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::stringstream ss;\n    std::stringstream ss2;\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = 0; j < l.size(); j++) {\n            for (int k = 0; k < l.size(); k++) {\n                ss << l[i] << \" \" << l[j] << \" \" << l[k];\n                ss >> s;\n                result.push_back(s);\n                ss.clear();\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> combinations;\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = 0; j < l.size(); j++) {\n            for (int k = 0; k < l.size(); k++) {\n                std::string s = \"\";\n                s += l[i];\n                s += l[j];\n                s += l[k];\n                combinations.push_back(s);\n            }\n        }\n    }\n    return combinations;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i = 0; i < l.size(); i++) {\n        for(int j = 0; j < l.size(); j++) {\n            for(int k = 0; k < l.size(); k++) {\n                temp = l[i] + l[j] + l[k];\n                result.push_back(temp);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (int i = 0; i < n; i++) {\n        temp += l[0];\n    }\n    result.push_back(temp);\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < l.size(); j++) {\n            temp = result[i];\n            temp[i] = l[j][0];\n            result.push_back(temp);\n        }\n    }\n    return result;",
    "    std::vector<std::string> res;\n    std::string str = \"\";\n    std::sort(l.begin(), l.end());\n    combinations_colors_helper(l, n, 0, str, res);\n    return res;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    for (int i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < l.size(); j++) {\n            s = result[i];\n            s[i] = l[j][0];\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = 0; j < l.size(); j++) {\n            for (int k = 0; k < l.size(); k++) {\n                temp = l[i] + l[j] + l[k];\n                result.push_back(temp);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(long i = 0; i < l.size(); i++) {\n        for(long j = 0; j < n; j++) {\n            temp += l[i];\n        }\n        result.push_back(temp);\n        temp.clear();\n    }\n    return result;",
    "    std::vector<std::string> res;\n    std::string temp;\n    for (long i = 0; i < n; i++) {\n        temp += l[0];\n    }\n    res.push_back(temp);\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < l.size(); j++) {\n            temp = res[i];\n            temp[i] = l[j][0];\n            res.push_back(temp);\n        }\n    }\n    return res;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::vector<int> v(n, 0);\n    while (true) {\n        for (int i = 0; i < n; i++) {\n            s += l[v[i]];\n        }\n        result.push_back(s);\n        s = \"\";\n        int i = 0;\n        while (i < n && v[i] == l.size() - 1) {\n            v[i] = 0;\n            i++;\n        }\n        if (i == n) {\n            break;\n        }\n        v[i]++;\n    }\n    return result;",
    "\tstd::vector<std::string> result;\n\tstd::string temp;\n\tfor (int i = 0; i < n; i++) {\n\t\ttemp += l[0];\n\t}\n\tresult.push_back(temp);\n\tfor (int i = 0; i < l.size(); i++) {\n\t\tstd::vector<std::string> temp_result = result;\n\t\tfor (int j = 0; j < temp_result.size(); j++) {\n\t\t\ttemp = temp_result[j];\n\t\t\ttemp[0] = l[i];\n\t\t\tresult.push_back(temp);\n\t\t}\n\t}\n\treturn result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i = 0; i < n; i++) {\n        temp += l[i];\n    }\n    result.push_back(temp);\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < l.size(); j++) {\n            temp = result[i];\n            temp[i] = l[j][0];\n            result.push_back(temp);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (int i = 0; i < n; i++) {\n        temp += l[i];\n    }\n    result.push_back(temp);\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < l.size(); j++) {\n            temp = result[i];\n            temp[i] = l[j][0];\n            result.push_back(temp);\n        }\n    }\n    return result;",
    "\tstd::vector<std::string> result;\n\tstd::string s;\n\tstd::stringstream ss;\n\tfor (long i = 0; i < n; i++) {\n\t\tfor (long j = 0; j < n; j++) {\n\t\t\tfor (long k = 0; k < n; k++) {\n\t\t\t\tss << l[i] << l[j] << l[k];\n\t\t\t\tss >> s;\n\t\t\t\tresult.push_back(s);\n\t\t\t\tss.clear();\n\t\t\t}\n\t\t}\n\t}\n\treturn result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::vector<int> v(n, 0);\n    while (1) {\n        for (int i = 0; i < n; i++) {\n            s += l[v[i]];\n        }\n        result.push_back(s);\n        s.clear();\n        int i;\n        for (i = 0; i < n; ++i) {\n            if (v[i] != l.size() - 1) {\n                break;\n            }\n        }\n        if (i == n) {\n            break;\n        }\n        v[i]++;\n        for (int j = 0; j < i; j++) {\n            v[j] = 0;\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::vector<int> v(n, 0);\n    while (true) {\n        for (int i = 0; i < n; i++) {\n            s += l[v[i]];\n        }\n        result.push_back(s);\n        s = \"\";\n        int i;\n        for (i = 0; i < n; ++i) {\n            if (v[i] != l.size() - 1) {\n                break;\n            }\n        }\n        if (i == n) {\n            break;\n        }\n        v[i]++;\n        for (int j = 0; j < i; j++) {\n            v[j] = 0;\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    std::string temp_result;\n    for(long i = 0; i < n; i++) {\n        temp += l[i];\n    }\n    result.push_back(temp);\n    for(long i = 0; i < n; i++) {\n        for(long j = 0; j < n; j++) {\n            temp_result = temp;\n            temp_result[i] = l[j];\n            result.push_back(temp_result);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    std::stringstream ss;\n    for (long i = 0; i < l.size(); i++) {\n        for (long j = 0; j < l.size(); j++) {\n            for (long k = 0; k < l.size(); k++) {\n                ss << l[i] << l[j] << l[k];\n                ss >> temp;\n                result.push_back(temp);\n                ss.clear();\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    for (long i = 0; i < n; i++) {\n        s += \"0\";\n    }\n    while (s != std::string(n, '1')) {\n        std::string t;\n        for (long i = 0; i < n; i++) {\n            if (s[i] == '1') {\n                t += l[i];\n            }\n        }\n        result.push_back(t);\n        s = std::bitset<64>(std::bitset<64>(s).to_ullong() + 1).to_string();\n    }\n    std::string t;\n    for (long i = 0; i < n; i++) {\n        t += l[i];\n    }\n    result.push_back(t);\n    return result;",
    "    std::vector<std::string> result;\n    std::string s = \"\";\n    std::vector<int> v(n, 0);\n    while (true) {\n        for (int i = 0; i < n; i++) {\n            s += l[v[i]];\n        }\n        result.push_back(s);\n        s = \"\";\n        int i;\n        for (i = n - 1; i >= 0; i--) {\n            if (v[i] < l.size() - 1) {\n                v[i]++;\n                break;\n            } else {\n                v[i] = 0;\n            }\n        }\n        if (i < 0) {\n            break;\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    std::stringstream ss;\n    std::string s;\n    for(int i = 0; i < l.size(); i++) {\n        for(int j = 0; j < l.size(); j++) {\n            for(int k = 0; k < l.size(); k++) {\n                ss << l[i] << \" \" << l[j] << \" \" << l[k];\n                ss >> s;\n                result.push_back(s);\n                ss.clear();\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::vector<int> v(n, 0);\n    while (true) {\n        for (int i = 0; i < n; i++) {\n            s += l[v[i]];\n        }\n        result.push_back(s);\n        s = \"\";\n        int i;\n        for (i = 0; i < n; i++) {\n            if (v[i] < l.size() - 1) {\n                v[i]++;\n                break;\n            } else {\n                v[i] = 0;\n            }\n        }\n        if (i == n) {\n            break;\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    std::sort(l.begin(), l.end());\n    do {\n        for (int i = 0; i < n; i++) {\n            temp += l[i];\n        }\n        result.push_back(temp);\n        temp = \"\";\n    } while (std::next_permutation(l.begin(), l.end()));\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::sort(l.begin(), l.end());\n    do {\n        for (int i = 0; i < n; i++) {\n            s += l[i];\n        }\n        result.push_back(s);\n        s = \"\";\n    } while (std::next_permutation(l.begin(), l.end()));\n    return result;",
    "  std::vector<std::string> result;\n  std::string s;\n  std::vector<int> v(n,0);\n  int i = 0;\n  while(i < n) {\n    if(v[i] < l.size()) {\n      s += l[v[i]];\n      if(i == n-1) {\n        result.push_back(s);\n        s.clear();\n      }\n      i++;\n    }\n    else {\n      v[i] = 0;\n      i--;\n      if(i >= 0) {\n        v[i]++;\n      }\n    }\n  }\n  return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::vector<int> v(n, 0);\n    while (true) {\n        for (int i = 0; i < n; i++) {\n            s += l[v[i]];\n        }\n        result.push_back(s);\n        s.clear();\n        int i;\n        for (i = 0; i < n; i++) {\n            if (v[i] != l.size() - 1) {\n                break;\n            }\n        }\n        if (i == n) {\n            break;\n        }\n        v[i]++;\n        for (int j = 0; j < i; j++) {\n            v[j] = 0;\n        }\n    }\n    return result;"
  ]
}