{
  "name": "mbpp_255_combinations_colors",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a vector and length n, and generates all combinations (with repetition) of the elements of the vector and returns a vector with a tuple for each combination.\nstd::vector<std::string> combinations_colors(std::vector<std::string> l, long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_255_combinations_colors.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = combinations_colors;\n    assert(candidate((std::vector<std::string>({(std::string)\"Red\", (std::string)\"Green\", (std::string)\"Blue\"})), (1)) == (std::vector<std::string>({(std::tuple<std::string>)std::make_tuple(\"Red\"), (std::tuple<std::string>)std::make_tuple(\"Green\"), (std::tuple<std::string>)std::make_tuple(\"Blue\")})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Red\", (std::string)\"Green\", (std::string)\"Blue\"})), (2)) == (std::vector<std::string>({(std::tuple<std::string, std::string>)std::make_tuple(\"Red\", \"Red\"), (std::tuple<std::string, std::string>)std::make_tuple(\"Red\", \"Green\"), (std::tuple<std::string, std::string>)std::make_tuple(\"Red\", \"Blue\"), (std::tuple<std::string, std::string>)std::make_tuple(\"Green\", \"Green\"), (std::tuple<std::string, std::string>)std::make_tuple(\"Green\", \"Blue\"), (std::tuple<std::string, std::string>)std::make_tuple(\"Blue\", \"Blue\")})));\n    assert(candidate((std::vector<std::string>({(std::string)\"Red\", (std::string)\"Green\", (std::string)\"Blue\"})), (3)) == (std::vector<std::string>({(std::tuple<std::string, std::string, std::string>)std::make_tuple(\"Red\", \"Red\", \"Red\"), (std::tuple<std::string, std::string, std::string>)std::make_tuple(\"Red\", \"Red\", \"Green\"), (std::tuple<std::string, std::string, std::string>)std::make_tuple(\"Red\", \"Red\", \"Blue\"), (std::tuple<std::string, std::string, std::string>)std::make_tuple(\"Red\", \"Green\", \"Green\"), (std::tuple<std::string, std::string, std::string>)std::make_tuple(\"Red\", \"Green\", \"Blue\"), (std::tuple<std::string, std::string, std::string>)std::make_tuple(\"Red\", \"Blue\", \"Blue\"), (std::tuple<std::string, std::string, std::string>)std::make_tuple(\"Green\", \"Green\", \"Green\"), (std::tuple<std::string, std::string, std::string>)std::make_tuple(\"Green\", \"Green\", \"Blue\"), (std::tuple<std::string, std::string, std::string>)std::make_tuple(\"Green\", \"Blue\", \"Blue\"), (std::tuple<std::string, std::string, std::string>)std::make_tuple(\"Blue\", \"Blue\", \"Blue\")})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<std::string> result;\n    std::string temp;\n    for (long i = 0; i < n; i++) {\n        temp += l[0];\n    }\n    result.push_back(temp);\n    for (long i = 1; i < l.size(); i++) {\n        long size = result.size();\n        for (long j = 0; j < size; j++) {\n            std::string temp = result[j];\n            for (long k = 0; k < n; k++) {\n                result.push_back(temp);\n                result[result.size() - 1][k] = l[i][0];\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::stringstream ss;\n    std::stringstream ss2;\n    std::stringstream ss3;\n    std::stringstream ss4;\n    std::stringstream ss5;\n    std::stringstream ss6;\n    std::stringstream ss7;\n    std::stringstream ss8;\n    std::stringstream ss9;\n    std::stringstream ss10;\n    std::stringstream ss11;\n    std::stringstream ss12;\n    std::stringstream ss13;\n    std::stringstream ss14;\n    std::stringstream ss15;\n    std::stringstream ss16;\n    std::stringstream ss17;\n    std::stringstream ss18;\n    std::stringstream ss19;\n    std::stringstream ss20;\n    std::stringstream ss21;\n    std::stringstream ss22;\n    std::stringstream ss23;\n    std::stringstream ss24;\n    std::stringstream ss25;\n    std::stringstream ss26;\n    std::stringstream ss27;\n    std::stringstream ss28;\n    std::stringstream ss29;\n    std::stringstream ss30;\n    std::stringstream ss31;\n    std::stringstream ss32;\n    std::stringstream ss33;\n    std::stringstream ss34;\n    std::stringstream ss35;\n    std::stringstream ss36;\n    std::stringstream ss37;\n    std::stringstream ss38;\n    std::stringstream ss39;\n    std::stringstream ss40;\n    std::stringstream ss41;\n    std::stringstream ss42;\n    std::stringstream ss43;\n    std::stringstream ss44;\n    std::stringstream ss45;\n    std::stringstream ss46;\n    std::stringstream ss47;\n    std::stringstream ss48;\n    std::stringstream ss49;\n    std::stringstream ss50;\n    std::stringstream ss51;\n    std::stringstream ss52;\n    std::stringstream ss53;\n    std::stringstream ss54;\n    std::stringstream ss55",
    "    std::vector<std::string> result;\n    std::string s;\n    std::stringstream ss;\n    for (long i = 0; i < n; i++) {\n        s += l[0];\n    }\n    result.push_back(s);\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < l.size(); j++) {\n            s = result[i];\n            s[i] = l[j][0];\n            result.push_back(s);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    std::vector<int> indices(n, 0);\n    while (true) {\n        for (int i = 0; i < n; i++) {\n            temp += l[indices[i]];\n        }\n        result.push_back(temp);\n        temp.clear();\n        int i;\n        for (i = n - 1; i >= 0; i--) {\n            if (indices[i] < l.size() - 1) {\n                indices[i]++;\n                break;\n            } else {\n                indices[i] = 0;\n            }\n        }\n        if (i < 0) {\n            break;\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (long i = 0; i < n; i++) {\n        temp.append(l[i]);\n    }\n    result.push_back(temp);\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < l.size(); j++) {\n            temp = result[i];\n            temp[i] = l[j][0];\n            result.push_back(temp);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    std::stringstream ss;\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = 0; j < l.size(); j++) {\n            for (int k = 0; k < l.size(); k++) {\n                ss << l[i] << l[j] << l[k];\n                ss >> temp;\n                result.push_back(temp);\n                ss.clear();\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    std::string temp_result;\n    for(int i=0; i<n; i++) {\n        temp += l[i];\n    }\n    for(int i=0; i<n; i++) {\n        for(int j=0; j<n; j++) {\n            for(int k=0; k<n; k++) {\n                temp_result = temp[i];\n                temp_result += temp[j];\n                temp_result += temp[k];\n                result.push_back(temp_result);\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::vector<int> v(n, 0);\n    while (true) {\n        for (int i = 0; i < n; i++) {\n            s += l[v[i]];\n        }\n        result.push_back(s);\n        s.clear();\n        int i = 0;\n        while (i < n && v[i] == l.size() - 1) {\n            v[i] = 0;\n            i++;\n        }\n        if (i == n) {\n            break;\n        }\n        v[i]++;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::sort(l.begin(), l.end());\n    do {\n        for (int i = 0; i < n; i++) {\n            s += l[i];\n        }\n        result.push_back(s);\n        s.clear();\n    } while (std::next_permutation(l.begin(), l.end()));\n    return result;",
    "  std::vector<std::string> result;\n  std::string s;\n  std::vector<int> v(n,0);\n  while(1) {\n    for(int i=0;i<n;i++) {\n      s+=l[v[i]];\n    }\n    result.push_back(s);\n    s.clear();\n    int i;\n    for(i=n-1;i>=0;i--) {\n      if(v[i]!=l.size()-1) {\n        break;\n      }\n    }\n    if(i==-1) {\n      break;\n    }\n    v[i]++;\n    for(int j=i+1;j<n;j++) {\n      v[j]=0;\n    }\n  }\n  return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (long i = 0; i < n; i++) {\n        temp += l[0];\n    }\n    result.push_back(temp);\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < l.size(); j++) {\n            temp = result[i];\n            temp[i] = l[j][0];\n            result.push_back(temp);\n        }\n    }\n    return result;",
    "  std::vector<std::string> result;\n  std::string s = \"\";\n  std::function<void(long)> combinations_colors_helper = [&](long index) {\n    if (index == n) {\n      result.push_back(s);\n      return;\n    }\n    for (long i = 0; i < l.size(); i++) {\n      s += l[i];\n      combinations_colors_helper(index + 1);\n      s.pop_back();\n    }\n  };\n  combinations_colors_helper(0);\n  return result;",
    "    std::vector<std::string> combinations;\n    std::string combination;\n    for (long i = 0; i < n; i++) {\n        combination += l[0];\n    }\n    combinations.push_back(combination);\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < l.size(); j++) {\n            combination[i] = l[j];\n            combinations.push_back(combination);\n        }\n    }\n    return combinations;",
    "    std::vector<std::string> result;\n    std::string s;\n    std::vector<int> v(n, 0);\n    while (true) {\n        for (int i = 0; i < n; i++) {\n            s += l[v[i]];\n        }\n        result.push_back(s);\n        s = \"\";\n        int i;\n        for (i = 0; i < n; ++i) {\n            if (v[i] != l.size() - 1) {\n                break;\n            }\n        }\n        if (i == n) {\n            break;\n        }\n        v[i]++;\n        for (int j = 0; j < i; j++) {\n            v[j] = 0;\n        }\n    }\n    return result;",
    "  std::vector<std::string> result;\n  std::string s;\n  std::vector<int> v(n, 0);\n  while (true) {\n    for (int i = 0; i < n; i++) {\n      s += l[v[i]];\n    }\n    result.push_back(s);\n    s.clear();\n    int i = 0;\n    while (i < n && v[i] == l.size() - 1) {\n      v[i] = 0;\n      i++;\n    }\n    if (i == n) {\n      break;\n    }\n    v[i]++;\n  }\n  return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (int i = 0; i < n; i++) {\n        temp = temp + l[i];\n    }\n    result.push_back(temp);\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            temp = temp + l[j];\n            result.push_back(temp);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < l.size(); j++) {\n            temp = l[j];\n            result.push_back(temp);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string current;\n    std::vector<int> indices(n, 0);\n    while (true) {\n        for (int i = 0; i < n; i++) {\n            current += l[indices[i]];\n        }\n        result.push_back(current);\n        current.clear();\n        int i = n - 1;\n        while (i >= 0 && indices[i] == l.size() - 1) {\n            indices[i] = 0;\n            i--;\n        }\n        if (i < 0) {\n            break;\n        }\n        indices[i]++;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp = \"\";\n    for (int i = 0; i < n; i++) {\n        temp += l[0];\n    }\n    result.push_back(temp);\n    for (int i = 1; i < l.size(); i++) {\n        std::vector<std::string> temp_result;\n        for (int j = 0; j < result.size(); j++) {\n            for (int k = 0; k < n; k++) {\n                temp_result.push_back(result[j].substr(0, k) + l[i] + result[j].substr(k, n - k));\n            }\n        }\n        result = temp_result;\n    }\n    return result;",
    "    std::vector<std::string> res;\n    std::string s;\n    std::vector<int> v(n,0);\n    while(1){\n        for(int i=0;i<n;i++)\n            s+=l[v[i]];\n        res.push_back(s);\n        s.clear();\n        int i;\n        for(i=n-1;i>=0;i--){\n            if(v[i]!=l.size()-1){\n                v[i]++;\n                break;\n            }\n            else\n                v[i]=0;\n        }\n        if(i==-1)\n            break;\n    }\n    return res;"
  ]
}