{
  "name": "mbpp_803_is_perfect_square",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nbool is_perfect_square(long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_803_is_perfect_square.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = is_perfect_square;\n    assert(candidate((10)) == (false));\n    assert(candidate((36)) == (true));\n    assert(candidate((14)) == (false));\n    assert(candidate((196)) == (true));\n    assert(candidate((125)) == (false));\n    assert(candidate((15625)) == (true));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long sqrt_n = std::sqrt(n);\n    return (sqrt_n*sqrt_n == n);",
    "    if(n<0) return false;\n    if(n==0 || n==1) return true;\n    long start=1, end=n/2;\n    while(start<=end) {\n        long mid = start + (end-start)/2;\n        if(mid*mid==n) return true;\n        else if(mid*mid<n) start=mid+1;\n        else end=mid-1;\n    }\n    return false;",
    "    long x = n;\n    while (x * x > n) {\n        x = (x + n / x) / 2;\n    }\n    return x * x == n;",
    "    long i = 1;\n    while (i*i < n) {\n        i++;\n    }\n    return i*i == n;",
    "    if(n<0) return false;\n    if(n==0 || n==1) return true;\n    long long int left = 0, right = n/2;\n    while(left<=right) {\n        long long int mid = left + (right-left)/2;\n        long long int square = mid*mid;\n        if(square == n) return true;\n        else if(square < n) left = mid+1;\n        else right = mid-1;\n    }\n    return false;",
    "    long sqrt_n = sqrt(n);\n    return (sqrt_n * sqrt_n == n);",
    "    long s = sqrt(n);\n    return (s*s == n);",
    "    long sqrt_n = sqrt(n);\n    return (sqrt_n * sqrt_n == n);",
    "    if(n < 0) {\n        return false;\n    }\n    long tst = (long)(sqrt(n) + 0.5);\n    return tst*tst == n;",
    "    if (n < 0) return false;\n    if (n == 1) return true;\n    long low = 1, high = n;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (mid * mid == n)\n            return true;\n        else if (mid * mid < n)\n            low = mid + 1;\n        else\n            high = mid - 1;\n    }\n    return false;",
    "    if (n < 0)\n        return false;\n    if (n == 0 || n == 1)\n        return true;\n    long long int i = 1, sum = 0;\n    while (sum < n) {\n        sum += i;\n        i += 2;\n    }\n    return (sum == n);",
    "    long s = sqrt(n);\n    return (s*s == n);",
    "    long x = n;\n    while(x*x > n) {\n        x = (x + n/x) / 2;\n    }\n    return x*x == n;",
    "    if (n < 0) return false;\n    if (n == 0 || n == 1) return true;\n    long t = n / 2;\n    while (t * t > n) {\n        t = (t + n / t) / 2;\n    }\n    return t * t == n;",
    "    if (n < 0) return false;\n    if (n == 0 || n == 1) return true;\n    long t = n / 2;\n    while (t * t > n) {\n        t = (t + n / t) / 2;\n    }\n    return t * t == n;",
    "    if (n < 0) return false;\n    if (n == 0 || n == 1) return true;\n    long t = n;\n    while (t > n/t) {\n        t = (t + n/t)/2;\n    }\n    return t*t == n;",
    "    if (n < 0) return false;\n    if (n == 0 || n == 1) return true;\n    long t = n / 2;\n    while (t * t > n) {\n        t = (t + n / t) / 2;\n    }\n    return t * t == n;",
    "    if (n < 0) return false;\n    if (n == 0 || n == 1) return true;\n    long t = n / 2;\n    while (t * t > n) {\n        t = (t + n / t) / 2;\n    }\n    return t * t == n;",
    "    if(n<0) return false;\n    if(n==0 || n==1) return true;\n    long long int low = 1, high = n/2, mid;\n    while(low<=high) {\n        mid = low + (high-low)/2;\n        if(mid*mid == n) return true;\n        else if(mid*mid > n) high = mid-1;\n        else low = mid+1;\n    }\n    return false;",
    "    if (n < 0) return false;\n    if (n == 0 || n == 1) return true;\n    long t = n;\n    while (t > n / t) {\n        t = (t + n / t) / 2;\n    }\n    return t * t == n;"
  ]
}