{
  "name": "mbpp_640_remove_parenthesis",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_640_remove_parenthesis.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::string result;\n    for(auto item : items) {\n        if(item.find('(') == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.front() == '(' && item.back() == ')') {\n            result += item.substr(1, item.size() - 2);\n        } else {\n            result += item;\n        }\n    }\n    return result;",
    "  std::string result = \"\";\n  for (auto item : items) {\n    if (item.find(\"(\") != std::string::npos) {\n      item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n    }\n    if (item.find(\")\") != std::string::npos) {\n      item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n    }\n    result += item;\n  }\n  return result;",
    "    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find('(') == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for(int i = 0; i < items.size(); i++) {\n        std::string item = items[i];\n        if(item[0] == '(') {\n            int j = 1;\n            while(item[j] != ')') {\n                j++;\n            }\n            result += item.substr(1, j-1);\n        } else {\n            result += item;\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n        }\n        if (item.find(\")\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;",
    "  std::string result;\n  for (auto item : items) {\n    if (item.find(\"(\") != std::string::npos) {\n      item.erase(item.begin() + item.find(\"(\"), item.begin() + item.find(\")\") + 1);\n    }\n    result += item;\n  }\n  return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.find(\"(\") == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < items.size(); i++) {\n        if (items[i] == \"(\") {\n            while (items[i] != \")\") {\n                i++;\n            }\n        } else {\n            result += items[i];\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto item : items) {\n        if (item[0] == '(') {\n            item.erase(0, 1);\n        }\n        if (item[item.size() - 1] == ')') {\n            item.erase(item.size() - 1, 1);\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item[0] == '(') {\n            item.erase(0, 1);\n            item.erase(item.size() - 1, 1);\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result;\n    for(int i = 0; i < items.size(); i++) {\n        if(items[i] != \"(\") {\n            result += items[i];\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(item.find(\"(\"), item.find(\")\") - item.find(\"(\") + 1);\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.size() == 1) {\n            result += item;\n        } else {\n            result += item.substr(1, item.size() - 2);\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item = item.substr(0, item.find(\"(\"));\n        }\n        result += item;\n    }\n    return result;",
    "    std::string result;\n    for(auto item : items) {\n        if(item[0] == '(' && item[item.size()-1] == ')') {\n            result += item.substr(1, item.size()-2);\n        } else {\n            result += item;\n        }\n    }\n    return result;",
    "  std::string result = \"\";\n  for(auto item : items) {\n    if(item.find(\"(\") == std::string::npos) {\n      result += item;\n    }\n  }\n  return result;",
    "    std::string result;\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            auto pos = item.find(\"(\");\n            item.erase(pos, item.size() - pos);\n        }\n        result += item;\n    }\n    return result;"
  ]
}