{
  "name": "mbpp_785_tuple_str_int",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert tuple string to integer tuple.\nlong tuple_str_int(std::string test_str) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_785_tuple_str_int.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = tuple_str_int;\n    assert(candidate((\"(7, 8, 9)\")) == std::make_tuple(7, 8, 9));\n    assert(candidate((\"(1, 2, 3)\")) == std::make_tuple(1, 2, 3));\n    assert(candidate((\"(4, 5, 6)\")) == std::make_tuple(4, 5, 6));\n    assert(candidate((\"(7, 81, 19)\")) == std::make_tuple(7, 81, 19));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::stringstream ss;\n    ss << test_str;\n    long test_int;\n    ss >> test_int;\n    return test_int;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    // Write your code here\n    std::stringstream ss(test_str);\n    std::string temp;\n    long sum = 0;\n    while(std::getline(ss, temp, ',')) {\n        sum += std::stoi(temp);\n    }\n    return sum;",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<std::string> result;\n    while (ss >> temp) {\n        result.push_back(temp);\n    }\n    long sum = 0;\n    for (int i = 0; i < result.size(); i++) {\n        sum = sum + std::stol(result[i]);\n    }\n    return sum;",
    "    int i = 0;\n    int j = 0;\n    int k = 0;\n    long result = 0;\n    while (test_str[i] != '\\0') {\n        if (test_str[i] == '(') {\n            i++;\n            while (test_str[i] != ',') {\n                result = result * 10 + (test_str[i] - '0');\n                i++;\n            }\n            i++;\n            while (test_str[i] != ',') {\n                result = result * 10 + (test_str[i] - '0');\n                i++;\n            }\n            i++;\n            while (test_str[i] != ')') {\n                result = result * 10 + (test_str[i] - '0');\n                i++;\n            }\n        }\n        i++;\n    }\n    return result;",
    "    // Write your code here\n    long result = 0;\n    int i = 0;\n    while(test_str[i] != '\\0') {\n        if(test_str[i] == ',') {\n            result = result * 100;\n        }\n        else {\n            result = result * 10 + (test_str[i] - '0');\n        }\n        i++;\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] == ',') {\n            result = result * 100;\n        } else {\n            result = result * 10 + (test_str[i] - '0');\n        }\n    }\n    return result;",
    "    // Write your code here\n    long ans = 0;\n    for(int i=0; i<test_str.length(); i++)\n    {\n        if(test_str[i] == ',')\n            ans = ans*100 + 0;\n        else\n            ans = ans*100 + (test_str[i]-'0');\n    }\n    return ans;",
    "    int i,j,k,l;\n    long sum=0;\n    for(i=0;i<test_str.length();i++) {\n        if(test_str[i]=='<') {\n            for(j=i+1;j<test_str.length();j++) {\n                if(test_str[j]==',') {\n                    std::string str1=test_str.substr(i+1,j-i-1);\n                    sum=sum+std::stoi(str1);\n                    i=j;\n                }\n                else if(test_str[j]=='>') {\n                    std::string str1=test_str.substr(i+1,j-i-1);\n                    sum=sum+std::stoi(str1);\n                    i=j;\n                    break;\n                }\n            }\n        }\n    }\n    return sum;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    long result = 0;\n    for (int i = 0; i < test_str.size(); i++) {\n        result = result * 10 + (test_str[i] - '0');\n    }\n    return result;",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<std::string> elems;\n    while(std::getline(ss, temp, ',')) {\n        elems.push_back(temp);\n    }\n    int i = 0;\n    long result = 0;\n    for(auto x : elems) {\n        result += std::stoi(x) * std::pow(10, i);\n        i += 1;\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    std::stringstream ss(test_str);\n    std::string token;\n    std::vector<int> v;\n    while(std::getline(ss, token, ',')) {\n        v.push_back(std::stoi(token));\n    }\n    long sum = 0;\n    for(int i = 0; i < v.size(); i++) {\n        sum += v[i];\n    }\n    return sum;",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    long result = 0;\n    while(std::getline(ss, temp, ',')) {\n        result = result * 10 + std::stol(temp);\n    }\n    return result;",
    "    // Write your code here\n    // return 0;\n    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    int found1;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        else if (temp == \",\")\n            std::cout << temp;\n        else if (temp == \"(\" || temp == \")\")\n            ;\n        else\n            std::cout << \" \";\n    }\n    return 0;",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<int> test_int;\n    while(std::getline(ss, temp, ',')) {\n        test_int.push_back(std::stoi(temp));\n    }\n    long result = 0;\n    for(int i = 0; i < test_int.size(); i++) {\n        result += test_int[i] * pow(10, i);\n    }\n    return result;",
    "  std::stringstream ss;\n  ss << test_str;\n  long result;\n  ss >> result;\n  return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    long result;\n    ss >> result;\n    return result;"
  ]
}