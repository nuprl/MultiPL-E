{
  "name": "mbpp_785_tuple_str_int",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert tuple string to integer tuple.\nlong tuple_str_int(std::string test_str) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_785_tuple_str_int.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = tuple_str_int;\n    assert(candidate((\"(7, 8, 9)\")) == std::make_tuple(7, 8, 9));\n    assert(candidate((\"(1, 2, 3)\")) == std::make_tuple(1, 2, 3));\n    assert(candidate((\"(4, 5, 6)\")) == std::make_tuple(4, 5, 6));\n    assert(candidate((\"(7, 81, 19)\")) == std::make_tuple(7, 81, 19));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::stringstream ss;\n    ss << test_str;\n    long test_int;\n    ss >> test_int;\n    return test_int;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    // Write your code here\n    std::stringstream ss(test_str);\n    std::string temp;\n    long sum = 0;\n    while(std::getline(ss, temp, ',')) {\n        sum += std::stoi(temp);\n    }\n    return sum;",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<std::string> result;\n    while (ss >> temp) {\n        result.push_back(temp);\n    }\n    long sum = 0;\n    for (int i = 0; i < result.size(); i++) {\n        sum = sum + std::stol(result[i]);\n    }\n    return sum;",
    "    int i = 0;\n    int j = 0;\n    int k = 0;\n    long result = 0;\n    while (test_str[i] != '\\0') {\n        if (test_str[i] == '(') {\n            i++;\n            while (test_str[i] != ',') {\n                result = result * 10 + (test_str[i] - '0');\n                i++;\n            }\n            i++;\n            while (test_str[i] != ',') {\n                result = result * 10 + (test_str[i] - '0');\n                i++;\n            }\n            i++;\n            while (test_str[i] != ')') {\n                result = result * 10 + (test_str[i] - '0');\n                i++;\n            }\n        }\n        i++;\n    }\n    return result;",
    "    // Write your code here\n    long result = 0;\n    int i = 0;\n    while(test_str[i] != '\\0') {\n        if(test_str[i] == ',') {\n            result = result * 100;\n        }\n        else {\n            result = result * 10 + (test_str[i] - '0');\n        }\n        i++;\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] == ',') {\n            result = result * 100;\n        } else {\n            result = result * 10 + (test_str[i] - '0');\n        }\n    }\n    return result;",
    "    // Write your code here\n    long ans = 0;\n    for(int i=0; i<test_str.length(); i++)\n    {\n        if(test_str[i] == ',')\n            ans = ans*100 + 0;\n        else\n            ans = ans*100 + (test_str[i]-'0');\n    }\n    return ans;",
    "    int i,j,k,l;\n    long sum=0;\n    for(i=0;i<test_str.length();i++) {\n        if(test_str[i]=='<') {\n            for(j=i+1;j<test_str.length();j++) {\n                if(test_str[j]==',') {\n                    std::string str1=test_str.substr(i+1,j-i-1);\n                    sum=sum+std::stoi(str1);\n                    i=j;\n                }\n                else if(test_str[j]=='>') {\n                    std::string str1=test_str.substr(i+1,j-i-1);\n                    sum=sum+std::stoi(str1);\n                    i=j;\n                    break;\n                }\n            }\n        }\n    }\n    return sum;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    long result = 0;\n    for (int i = 0; i < test_str.size(); i++) {\n        result = result * 10 + (test_str[i] - '0');\n    }\n    return result;",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<std::string> elems;\n    while(std::getline(ss, temp, ',')) {\n        elems.push_back(temp);\n    }\n    int i = 0;\n    long result = 0;\n    for(auto x : elems) {\n        result += std::stoi(x) * std::pow(10, i);\n        i += 1;\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    std::stringstream ss(test_str);\n    std::string token;\n    std::vector<int> v;\n    while(std::getline(ss, token, ',')) {\n        v.push_back(std::stoi(token));\n    }\n    long sum = 0;\n    for(int i = 0; i < v.size(); i++) {\n        sum += v[i];\n    }\n    return sum;",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    long result = 0;\n    while(std::getline(ss, temp, ',')) {\n        result = result * 10 + std::stol(temp);\n    }\n    return result;",
    "    // Write your code here\n    // return 0;\n    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    int found1;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        else if (temp == \",\")\n            std::cout << temp;\n        else if (temp == \"(\" || temp == \")\")\n            ;\n        else\n            std::cout << \" \";\n    }\n    return 0;",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<int> test_int;\n    while(std::getline(ss, temp, ',')) {\n        test_int.push_back(std::stoi(temp));\n    }\n    long result = 0;\n    for(int i = 0; i < test_int.size(); i++) {\n        result += test_int[i] * pow(10, i);\n    }\n    return result;",
    "  std::stringstream ss;\n  ss << test_str;\n  long result;\n  ss >> result;\n  return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    long result;\n    ss >> result;\n    return result;",
    "    int len = test_str.length();\n    long result = 0;\n    for(int i = 0; i < len; i++) {\n        result = result * 10 + (test_str[i] - '0');\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<std::string> tuple_str;\n    while(std::getline(ss, temp, ',')) {\n        tuple_str.push_back(temp);\n    }\n    long tuple_int = 0;\n    for(int i = 0; i < tuple_str.size(); i++) {\n        tuple_int = tuple_int << 8;\n        tuple_int = tuple_int | std::stoi(tuple_str[i]);\n    }\n    return tuple_int;",
    "    std::stringstream ss;\n    ss << test_str;\n    long test_int;\n    ss >> test_int;\n    return test_int;",
    "    // Write your code here\n    long result = 0;\n    int i = 0;\n    while(test_str[i] != '\\0') {\n        if(test_str[i] == ',') {\n            result = result * 10 + 1;\n        }\n        else {\n            result = result * 10 + (test_str[i] - '0');\n        }\n        i++;\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        result = result * 10 + (test_str[i] - '0');\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_str.size(); i++) {\n        result = result * 10 + (test_str[i] - '0');\n    }\n    return result;",
    "    long result = 0;\n    int i = 0;\n    while (test_str[i] != '\\0') {\n        if (test_str[i] == ',') {\n            result = result << 8;\n            result += test_str[i];\n        } else {\n            result = result << 8;\n            result += test_str[i] - '0';\n        }\n        i++;\n    }\n    return result;",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<std::string> elems;\n    while (std::getline(ss, temp, ',')) {\n        elems.push_back(temp);\n    }\n    long result = 0;\n    for (int i = 0; i < elems.size(); i++) {\n        result = result * 10 + std::stoi(elems[i]);\n    }\n    return result;",
    "    long result = 0;\n    int i = 0;\n    while(test_str[i] != '\\0') {\n        if(test_str[i] == ',') {\n            i++;\n            continue;\n        }\n        result = result * 10 + (test_str[i] - '0');\n        i++;\n    }\n    return result;",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<int> test_int;\n    while (std::getline(ss, temp, ',')) {\n        test_int.push_back(std::stoi(temp));\n    }\n    long result = 0;\n    for (int i = 0; i < test_int.size(); i++) {\n        result += test_int[i] * pow(10, i);\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    long result = 0;\n    for (int i = 0; i < test_str.size(); i++) {\n        result = result * 10 + (test_str[i] - '0');\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    long num = 0;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] == ',') {\n            num = num*10 + (long)test_str[i];\n        }\n        else {\n            num = num*10 + (long)(test_str[i] - '0');\n        }\n    }\n    return num;",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<std::string> tokens;\n    while(std::getline(ss, temp, ',')) {\n        tokens.push_back(temp);\n    }\n    long result = 0;\n    for(int i = 0; i < tokens.size(); i++) {\n        result = result * 10 + std::stoi(tokens[i]);\n    }\n    return result;",
    "    long int_tuple = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        int_tuple = int_tuple * 10 + (test_str[i] - '0');\n    }\n    return int_tuple;",
    "    std::stringstream ss;\n    ss << test_str;\n    int i;\n    ss >> i;\n    return i;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    // Write your code here\n    std::vector<int> v;\n    std::stringstream ss(test_str);\n    int i;\n    while (ss >> i)\n    {\n        v.push_back(i);\n        if (ss.peek() == ',')\n            ss.ignore();\n    }\n    long sum = 0;\n    for(int i = 0; i < v.size(); i++){\n        sum += v[i] * pow(10, v.size() - i - 1);\n    }\n    return sum;",
    "    std::vector<int> v;\n    int i = 0;\n    while(i < test_str.size()) {\n        int num = 0;\n        while(i < test_str.size() && test_str[i] != ',') {\n            num = num*10 + (test_str[i] - '0');\n            i++;\n        }\n        v.push_back(num);\n        i++;\n    }\n    long ans = 0;\n    for(int i = 0; i < v.size(); i++) {\n        ans = ans*100 + v[i];\n    }\n    return ans;",
    "    long result = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        result = result * 10 + (test_str[i] - '0');\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_str.size(); i++) {\n        result = result * 10 + (test_str[i] - '0');\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    // Write your code here\n    std::vector<int> v;\n    std::stringstream ss(test_str);\n    std::string temp;\n    while (std::getline(ss, temp, ',')) {\n        v.push_back(std::stoi(temp));\n    }\n    long sum = 0;\n    for (int i = 0; i < v.size(); i++) {\n        sum += v[i] * pow(10, i);\n    }\n    return sum;",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<int> test_int;\n    while(std::getline(ss, temp, ',')) {\n        test_int.push_back(std::stoi(temp));\n    }\n    long res = 0;\n    for(int i = 0; i < test_int.size(); i++) {\n        res = res * 10 + test_int[i];\n    }\n    return res;",
    "    std::stringstream ss;\n    ss << test_str;\n    long result;\n    ss >> result;\n    return result;",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<int> nums;\n    while (std::getline(ss, temp, ',')) {\n        nums.push_back(std::stoi(temp));\n    }\n    long res = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        res += nums[i] * pow(10, nums.size() - i - 1);\n    }\n    return res;",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<int> test_int;\n    while(std::getline(ss, temp, ',')) {\n        test_int.push_back(std::stoi(temp));\n    }\n    return test_int;",
    "    std::stringstream ss;\n    ss << test_str;\n    long result;\n    ss >> result;\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    std::vector<int> test_vec;\n    int num = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] == ',') {\n            test_vec.push_back(num);\n            num = 0;\n        }\n        else {\n            num = num * 10 + (test_str[i] - '0');\n        }\n    }\n    test_vec.push_back(num);\n    long long int result = 0;\n    for (int i = 0; i < test_vec.size(); i++) {\n        result = result * 100 + test_vec[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_str.size(); i++) {\n        result = result * 10 + (test_str[i] - '0');\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    long result = 0;\n    int i = 0;\n    while(test_str[i] != '\\0') {\n        result = result * 10 + (test_str[i] - '0');\n        i++;\n    }\n    return result;",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<int> tuple_int;\n    while(std::getline(ss, temp, ',')) {\n        tuple_int.push_back(std::stoi(temp));\n    }\n    long result = 0;\n    for(auto i: tuple_int) {\n        result = result * 100 + i;\n    }\n    return result;",
    "    long result = 0;\n    int i = 0;\n    while(test_str[i] != ',') {\n        result = result * 10 + (test_str[i] - '0');\n        i++;\n    }\n    return result;",
    "    long result = 0;\n    int i = 0;\n    while(test_str[i] != '\\0') {\n        result = result * 10 + (test_str[i] - '0');\n        i++;\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    long found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \" << temp << std::endl;\n        temp = \"\";\n    }\n    return found;",
    "    int len = test_str.length();\n    int i = 0;\n    long result = 0;\n    while(i < len) {\n        if(test_str[i] == '(') {\n            i++;\n            continue;\n        }\n        if(test_str[i] == ')') {\n            i++;\n            continue;\n        }\n        if(test_str[i] == ',') {\n            i++;\n            continue;\n        }\n        result = result * 10 + (test_str[i] - '0');\n        i++;\n    }\n    return result;",
    "    // Write your code here\n    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<int> v;\n    while(std::getline(ss, temp, ',')) {\n        v.push_back(std::stoi(temp));\n    }\n    long res = 0;\n    for(int i = 0; i < v.size(); i++) {\n        res = res * 100 + v[i];\n    }\n    return res;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    // Write your code here\n    // return the integer tuple\n    long int num = 0;\n    for(int i = 0; i < test_str.length(); i++) {\n        num = num * 10 + (test_str[i] - '0');\n    }\n    return num;",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<int> test_int;\n    while(std::getline(ss, temp, ',')) {\n        test_int.push_back(std::stoi(temp));\n    }\n    long result = 0;\n    for(int i = 0; i < test_int.size(); i++) {\n        result += test_int[i] * pow(10, i);\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    // Write your code here\n    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<int> v;\n    while(std::getline(ss, temp, ',')) {\n        v.push_back(std::stoi(temp));\n    }\n    long result = 0;\n    for(int i = 0; i < v.size(); i++) {\n        result = result * 10 + v[i];\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    long test_int;\n    ss >> test_int;\n    return test_int;",
    "    long result = 0;\n    for (int i = 0; i < test_str.size(); i++) {\n        result = result * 10 + (test_str[i] - '0');\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    long num;\n    ss >> num;\n    return num;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    long result = 0;\n    int i = 0;\n    while(test_str[i] != '\\0') {\n        if(test_str[i] == ',') {\n            result = result * 10 + 0;\n        }\n        else {\n            result = result * 10 + (test_str[i] - '0');\n        }\n        i++;\n    }\n    return result;",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    long result = 0;\n    while (std::getline(ss, temp, ',')) {\n        result = result * 10 + std::stol(temp);\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        result = result * 10 + (test_str[i] - '0');\n    }\n    return result;",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<int> test_int;\n    while(std::getline(ss, temp, ',')) {\n        test_int.push_back(std::stoi(temp));\n    }\n    long result = 0;\n    for(int i = 0; i < test_int.size(); i++) {\n        result = result * 100 + test_int[i];\n    }\n    return result;",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<int> v;\n    while(std::getline(ss, temp, ',')) {\n        v.push_back(std::stoi(temp));\n    }\n    long result = 0;\n    for(int i = 0; i < v.size(); i++) {\n        result += v[i] * pow(10, v.size() - i - 1);\n    }\n    return result;",
    "    long result = 0;\n    int len = test_str.length();\n    int i = 0;\n    while(i < len) {\n        if(test_str[i] == '(') {\n            i++;\n            continue;\n        }\n        if(test_str[i] == ')') {\n            i++;\n            continue;\n        }\n        if(test_str[i] == ',') {\n            i++;\n            continue;\n        }\n        result = result * 10 + (test_str[i] - '0');\n        i++;\n    }\n    return result;",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<int> v;\n    while(std::getline(ss, temp, ',')) {\n        v.push_back(std::stoi(temp));\n    }\n    long result = 0;\n    for(int i = 0; i < v.size(); i++) {\n        result = result * 10 + v[i];\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    long result = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        result = result * 10 + (test_str[i] - '0');\n    }\n    return result;",
    "    std::stringstream ss(test_str);\n    std::string item;\n    std::vector<std::string> splittedStrings;\n    while (std::getline(ss, item, ',')) {\n        splittedStrings.push_back(item);\n    }\n    long result = 0;\n    for (int i = 0; i < splittedStrings.size(); i++) {\n        result += std::stol(splittedStrings[i]);\n    }\n    return result;",
    "    std::stringstream ss(test_str);\n    std::string item;\n    std::vector<std::string> splitted_str;\n    while (std::getline(ss, item, ',')) {\n        splitted_str.push_back(item);\n    }\n    long result = 0;\n    for (int i = 0; i < splitted_str.size(); i++) {\n        result += std::stol(splitted_str[i]);\n    }\n    return result;",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<int> test_int;\n    while(std::getline(ss, temp, ',')) {\n        test_int.push_back(std::stoi(temp));\n    }\n    long result = 0;\n    for(int i = 0; i < test_int.size(); i++) {\n        result = result * 10 + test_int[i];\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int aa = 0;\n    int ab = 0;\n    int ac = 0;\n    int ad = 0;\n    int ae = 0;\n    int af = 0;\n    int ag = 0;\n    int ah = 0;\n    int ai = 0;\n    int aj = 0;\n    int ak = 0;\n    int al = 0;\n    int am = 0;\n    int an = 0;\n    int ao = 0;\n    int ap = 0;\n    int aq = 0;\n    int ar = 0;\n    int as = 0;\n    int at = 0;\n    int au = 0;\n    int av = 0;\n    int aw = 0;\n    int ax = 0;\n    int ay = 0;\n    int az = 0;\n    int ba = 0;\n    int bb = 0;\n    int bc = 0;\n    int bd = 0;\n    int be = 0;\n    int bf = 0;\n    int bg = 0;\n    int bh = 0;\n    int bi = 0;\n    int bj = 0;\n    int bk = 0;\n    int bl = 0;\n    int bm = 0;\n    int bn = 0;\n    int bo = 0;\n    int bp = 0;\n    int bq = 0;\n    int br = 0;\n    int bs = 0;\n    int bt = 0;\n    int bu = 0;\n    int bv = 0;\n    int bw = 0;\n    int bx = 0;\n    int by = 0;\n    int bz = 0",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<int> test_int;\n    while(std::getline(ss, temp, ',')) {\n        test_int.push_back(std::stoi(temp));\n    }\n    long result = 0;\n    for(int i = 0; i < test_int.size(); i++) {\n        result += test_int[i] * pow(10, i);\n    }\n    return result;",
    "    int i = 0;\n    int val = 0;\n    while (test_str[i] != '\\0') {\n        if (test_str[i] == ',') {\n            i++;\n            continue;\n        }\n        val = val * 10 + test_str[i] - '0';\n        i++;\n    }\n    return val;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    std::stringstream ss(test_str);\n    std::string item;\n    std::vector<std::string> splitted_str;\n    while (std::getline(ss, item, ',')) {\n        splitted_str.push_back(item);\n    }\n    long result = 0;\n    for (int i = 0; i < splitted_str.size(); i++) {\n        result = result * 10 + std::stol(splitted_str[i]);\n    }\n    return result;",
    "    long test_int = 0;\n    int len = test_str.length();\n    for (int i = 0; i < len; i++) {\n        test_int = test_int * 10 + (test_str[i] - '0');\n    }\n    return test_int;",
    "    long num = 0;\n    std::stringstream ss;\n    ss << test_str;\n    ss >> num;\n    return num;",
    "    std::stringstream ss(test_str);\n    std::string item;\n    std::vector<std::string> splittedStrings;\n    while (std::getline(ss, item, ',')) {\n        splittedStrings.push_back(item);\n    }\n    long result = 0;\n    for (int i = 0; i < splittedStrings.size(); i++) {\n        result = result * 10 + std::stoi(splittedStrings[i]);\n    }\n    return result;",
    "    int len = test_str.length();\n    int i = 0;\n    long result = 0;\n    while(i < len) {\n        if(test_str[i] == ',') {\n            i++;\n            continue;\n        }\n        result = result * 10 + (test_str[i] - '0');\n        i++;\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    long result = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        result = result * 10 + (test_str[i] - '0');\n    }\n    return result;",
    "    // write your code here\n    long sum=0;\n    for(int i=0;i<test_str.length();i++){\n        if(test_str[i]>='0' && test_str[i]<='9'){\n            sum=sum*10+(test_str[i]-'0');\n        }\n    }\n    return sum;",
    "    long result = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        result = result * 10 + (test_str[i] - '0');\n    }\n    return result;",
    "    // Your code here\n    int i,j,k,l,m,n,o,p;\n    char a[100],b[100],c[100],d[100],e[100],f[100],g[100],h[100];\n    sscanf(test_str.c_str(),\"(%[^,],%[^,],%[^,],%[^,],%[^,],%[^,],%[^,],%[^)])\",a,b,c,d,e,f,g,h);\n    i=atoi(a);\n    j=atoi(b);\n    k=atoi(c);\n    l=atoi(d);\n    m=atoi(e);\n    n=atoi(f);\n    o=atoi(g);\n    p=atoi(h);\n    return (i*100000000+j*1000000+k*10000+l*100+m*1+n*0.01+o*0.0001+p*0.000001);",
    "    std::stringstream ss;\n    ss << test_str;\n    long test_int;\n    ss >> test_int;\n    return test_int;",
    "    std::stringstream ss;\n    ss << test_str;\n    long result;\n    ss >> result;\n    return result;",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<int> tuple_int;\n    while(std::getline(ss, temp, ',')) {\n        tuple_int.push_back(std::stoi(temp));\n    }\n    long tuple_int_long = 0;\n    for(int i = 0; i < tuple_int.size(); i++) {\n        tuple_int_long = tuple_int_long * 10 + tuple_int[i];\n    }\n    return tuple_int_long;",
    "    long result = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        result = result * 10 + test_str[i] - '0';\n    }\n    return result;",
    "    int len = test_str.length();\n    int i = 0;\n    long result = 0;\n    while(i < len) {\n        if(test_str[i] == '(') {\n            i++;\n            continue;\n        }\n        if(test_str[i] == ')') {\n            i++;\n            continue;\n        }\n        if(test_str[i] == ',') {\n            i++;\n            continue;\n        }\n        result = result * 10 + (test_str[i] - '0');\n        i++;\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    long result;\n    ss >> result;\n    return result;",
    "    long result = 0;\n    int i = 0;\n    while(test_str[i] != '\\0') {\n        if(test_str[i] == ',') {\n            result = result * 10;\n        } else {\n            result = result * 10 + (test_str[i] - '0');\n        }\n        i++;\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        result = result * 10 + (test_str[i] - '0');\n    }\n    return result;",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<int> test_vec;\n    while(std::getline(ss, temp, ',')) {\n        test_vec.push_back(std::stoi(temp));\n    }\n    long result = 0;\n    for(int i = 0; i < test_vec.size(); i++) {\n        result += test_vec[i] * pow(10, i);\n    }\n    return result;",
    "    int i,j,k;\n    std::string temp;\n    std::vector<int> v;\n    for(i=0;i<test_str.length();i++) {\n        if(test_str[i]=='(' || test_str[i]==')' || test_str[i]==',') {\n            continue;\n        }\n        else {\n            temp+=test_str[i];\n        }\n    }\n    for(i=0;i<temp.length();i++) {\n        if(temp[i]==' ') {\n            continue;\n        }\n        else {\n            j=i;\n            while(temp[j]!=' ' && j<temp.length()) {\n                j++;\n            }\n            v.push_back(std::stoi(temp.substr(i,j-i)));\n            i=j;\n        }\n    }\n    long ans=0;\n    for(i=0;i<v.size();i++) {\n        ans=ans*100+v[i];\n    }\n    return ans;",
    "    long int_tuple = 0;\n    int i = 0;\n    while (test_str[i] != '\\0') {\n        if (test_str[i] == ',') {\n            int_tuple = int_tuple * 10;\n        }\n        else {\n            int_tuple = int_tuple * 10 + (test_str[i] - '0');\n        }\n        i++;\n    }\n    return int_tuple;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    std::stringstream ss;\n    ss << test_str;\n    long result;\n    ss >> result;\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while(!ss.eof()) {\n        ss >> temp;\n        if(std::stringstream(temp) >> found) {\n            std::cout << found << \" \";\n        }\n        temp = \"\";\n    }\n    return 0;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    // Write your code here\n    long result = 0;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] == ',') {\n            result = result * 100;\n        } else {\n            result = result * 10 + (test_str[i] - '0');\n        }\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        result = result * 10 + (test_str[i] - '0');\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<int> tuple_int;\n    while (std::getline(ss, temp, ',')) {\n        tuple_int.push_back(std::stoi(temp));\n    }\n    long tuple = 0;\n    for (int i = 0; i < tuple_int.size(); i++) {\n        tuple = tuple * 10 + tuple_int[i];\n    }\n    return tuple;",
    "\tstd::stringstream ss(test_str);\n\tstd::string token;\n\tstd::vector<int> test_vec;\n\twhile (std::getline(ss, token, ',')) {\n\t\ttest_vec.push_back(std::stoi(token));\n\t}\n\tlong test_int = 0;\n\tfor (int i = 0; i < test_vec.size(); i++) {\n\t\ttest_int = test_int * 10 + test_vec[i];\n\t}\n\treturn test_int;",
    "    std::stringstream ss;\n    ss << test_str;\n    long result;\n    ss >> result;\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        result = result * 10 + (test_str[i] - '0');\n    }\n    return result;",
    "    int i = 0;\n    long test_int = 0;\n    while (test_str[i] != '\\0') {\n        test_int = test_int * 10 + (test_str[i] - '0');\n        i++;\n    }\n    return test_int;",
    "    // write your code here\n    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<int> v;\n    while (std::getline(ss, temp, ',')) {\n        v.push_back(std::stoi(temp));\n    }\n    long result = 0;\n    for (int i = 0; i < v.size(); i++) {\n        result = result*10 + v[i];\n    }\n    return result;",
    "    long int_tuple = 0;\n    for (int i = 0; i < test_str.size(); i++) {\n        int_tuple = int_tuple * 10 + (test_str[i] - '0');\n    }\n    return int_tuple;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    long result = 0;\n    while (std::getline(ss, temp, ',')) {\n        result = result * 1000 + std::stol(temp);\n    }\n    return result;",
    "    int i = 0;\n    long result = 0;\n    while (test_str[i] != '\\0') {\n        if (test_str[i] == ',') {\n            result = result * 10 + 0;\n        } else {\n            result = result * 10 + (test_str[i] - '0');\n        }\n        i++;\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    long int_tuple = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        int_tuple = int_tuple * 10 + (test_str[i] - '0');\n    }\n    return int_tuple;",
    "    std::stringstream ss;\n    ss << test_str;\n    long test_int;\n    ss >> test_int;\n    return test_int;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    long result = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        result = result * 10 + (test_str[i] - '0');\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }",
    "    long result = 0;\n    int i = 0;\n    while(test_str[i] != '\\0') {\n        result = result * 10 + (test_str[i] - '0');\n        i++;\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    long result;\n    ss >> result;\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    std::stringstream ss;\n    ss << test_str;\n    long test_int;\n    ss >> test_int;\n    return test_int;",
    "    long result = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        result = result * 10 + (test_str[i] - '0');\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    std::stringstream ss(test_str);\n    std::string item;\n    std::vector<std::string> splitted_str;\n    while (std::getline(ss, item, ',')) {\n        splitted_str.push_back(item);\n    }\n    long res = 0;\n    for (auto i : splitted_str) {\n        res = res * 10 + std::stoi(i);\n    }\n    return res;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    std::stringstream ss;\n    ss << test_str;\n    long result = 0;\n    ss >> result;\n    return result;",
    "    // Write your code here\n    long result = 0;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] == ',') {\n            result = result * 100;\n        } else {\n            result = result * 10 + (test_str[i] - '0');\n        }\n    }\n    return result;",
    "    // Write your code here\n    int i=0;\n    int j=0;\n    int k=0;\n    int l=0;\n    int m=0;\n    int n=0;\n    int o=0;\n    int p=0;\n    int q=0;\n    int r=0;\n    int s=0;\n    int t=0;\n    int u=0;\n    int v=0;\n    int w=0;\n    int x=0;\n    int y=0;\n    int z=0;\n    int aa=0;\n    int bb=0;\n    int cc=0;\n    int dd=0;\n    int ee=0;\n    int ff=0;\n    int gg=0;\n    int hh=0;\n    int ii=0;\n    int jj=0;\n    int kk=0;\n    int ll=0;\n    int mm=0;\n    int nn=0;\n    int oo=0;\n    int pp=0;\n    int qq=0;\n    int rr=0;\n    int ss=0;\n    int tt=0;\n    int uu=0;\n    int vv=0;\n    int ww=0;\n    int xx=0;\n    int yy=0;\n    int zz=0;\n    int aaa=0;\n    int bbb=0;\n    int ccc=0;\n    int ddd=0;\n    int eee=0;\n    int fff=0;\n    int ggg=0;\n    int hhh=0;\n    int iii=0;\n    int jjj=0;\n    int kkk=0;\n    int lll=0;\n    int mmm=0;\n    int nnn=0;\n    int ooo=0;\n    int ppp=0;\n    int qqq=0;\n    int rrr=0;\n    int sss=0;\n    int ttt=0;\n    int uuu=0;\n    int vvv=0;\n    int www=",
    "    // Write your code here\n    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<int> v;\n    while (std::getline(ss, temp, ',')) {\n        v.push_back(std::stoi(temp));\n    }\n    long sum = 0;\n    for (int i = 0; i < v.size(); i++) {\n        sum += v[i] * std::pow(10, v.size() - i - 1);\n    }\n    return sum;",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    long result = 0;\n    while (std::getline(ss, temp, ',')) {\n        result = result * 100 + std::stol(temp);\n    }\n    return result;",
    "  std::vector<int> test_int;\n  std::stringstream ss(test_str);\n  int i;\n  while (ss >> i) {\n    test_int.push_back(i);\n    if (ss.peek() == ',')\n      ss.ignore();\n  }\n  long result = 0;\n  for (auto i : test_int) {\n    result = result * 10 + i;\n  }\n  return result;",
    "    // Write your code here\n    long num = 0;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] == ',') {\n            num = num * 10 + 0;\n        }\n        else {\n            num = num * 10 + (test_str[i] - '0');\n        }\n    }\n    return num;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<int> test_int;\n    while(std::getline(ss, temp, ',')) {\n        test_int.push_back(std::stoi(temp));\n    }\n    long result = 0;\n    for(int i = 0; i < test_int.size(); i++) {\n        result += test_int[i] * pow(10, test_int.size() - i - 1);\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    long result = 0;\n    for (int i = 0; i < test_str.size(); i++) {\n        result = result * 10 + (test_str[i] - '0');\n    }\n    return result;",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<int> tuple_int;\n    while(std::getline(ss, temp, ',')) {\n        tuple_int.push_back(std::stoi(temp));\n    }\n    long tuple_int_long = 0;\n    for(int i = 0; i < tuple_int.size(); i++) {\n        tuple_int_long += tuple_int[i] * pow(10, i);\n    }\n    return tuple_int_long;",
    "    std::stringstream ss;\n    ss << test_str;\n    long result;\n    ss >> result;\n    return result;",
    "    long int_tuple = 0;\n    int i = 0;\n    while(test_str[i] != '\\0') {\n        if(test_str[i] == ',') {\n            int_tuple = int_tuple << 8;\n        }\n        else {\n            int_tuple = int_tuple << 8;\n            int_tuple += test_str[i];\n        }\n        i++;\n    }\n    return int_tuple;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }",
    "  std::stringstream ss;\n  ss << test_str;\n  std::string temp;\n  int found;\n  while (!ss.eof()) {\n    ss >> temp;\n    if (std::stringstream(temp) >> found)\n      std::cout << found << \" \";\n    temp = \"\";\n  }\n  return 0;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<std::string> result;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp);\n    }\n    long res = 0;\n    for(int i = 0; i < result.size(); i++) {\n        res = res * 10 + std::stoi(result[i]);\n    }\n    return res;",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<int> tuple;\n    while(std::getline(ss, temp, ',')) {\n        tuple.push_back(std::stoi(temp));\n    }\n    long result = 0;\n    for(auto i : tuple) {\n        result = result * 10 + i;\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<int> test_int;\n    while(std::getline(ss, temp, ',')) {\n        test_int.push_back(std::stoi(temp));\n    }\n    long result = 0;\n    for(int i = 0; i < test_int.size(); i++) {\n        result += test_int[i] * pow(10, i);\n    }\n    return result;",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<int> test_int;\n    while (std::getline(ss, temp, ',')) {\n        test_int.push_back(std::stoi(temp));\n    }\n    long result = 0;\n    for (int i = 0; i < test_int.size(); i++) {\n        result += test_int[i] * pow(10, test_int.size() - i - 1);\n    }\n    return result;",
    "    long int_tuple = 0;\n    for(int i=0; i<test_str.size(); i++) {\n        int_tuple = int_tuple*10 + test_str[i] - '0';\n    }\n    return int_tuple;",
    "    std::stringstream ss;\n    ss << test_str;\n    long result;\n    ss >> result;\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    long result = 0;\n    int i = 0;\n    while (test_str[i] != ',') {\n        result = result * 10 + (test_str[i] - '0');\n        i++;\n    }\n    return result;",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<int> tuple;\n    while(std::getline(ss, temp, ',')) {\n        tuple.push_back(std::stoi(temp));\n    }\n    long tuple_int = 0;\n    for(int i = 0; i < tuple.size(); i++) {\n        tuple_int = (tuple_int << 8) + tuple[i];\n    }\n    return tuple_int;",
    "    long result = 0;\n    int i = 0;\n    while (test_str[i] != '\\0') {\n        if (test_str[i] == ',') {\n            i++;\n            continue;\n        }\n        result = result * 10 + (test_str[i] - '0');\n        i++;\n    }\n    return result;",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<int> tuple_int;\n    while(std::getline(ss, temp, ',')) {\n        tuple_int.push_back(std::stoi(temp));\n    }\n    long tuple_int_long = 0;\n    for(auto i = tuple_int.begin(); i != tuple_int.end(); i++) {\n        tuple_int_long = tuple_int_long * 100 + *i;\n    }\n    return tuple_int_long;",
    "    std::stringstream ss;\n    ss << test_str;\n    long result;\n    ss >> result;\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found) {\n            std::cout << found << \" \";\n        }\n        temp = \"\";\n    }\n    return 0;",
    "    std::stringstream ss;\n    ss << test_str;\n    long result;\n    ss >> result;\n    return result;",
    "    long result = 0;\n    std::stringstream ss;\n    ss << test_str;\n    ss >> result;\n    return result;",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<int> test_int;\n    while(std::getline(ss, temp, ',')) {\n        test_int.push_back(std::stoi(temp));\n    }\n    long res = 0;\n    for(int i = 0; i < test_int.size(); i++) {\n        res += test_int[i] * pow(10, i);\n    }\n    return res;",
    "    long result = 0;\n    int i = 0;\n    while(test_str[i] != '\\0') {\n        if(test_str[i] == '(' || test_str[i] == ')' || test_str[i] == ',') {\n            i++;\n            continue;\n        }\n        result = result * 10 + (test_str[i] - '0');\n        i++;\n    }\n    return result;",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    long result = 0;\n    while(std::getline(ss, temp, ',')) {\n        result = result*10 + std::stol(temp);\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        result = result * 10 + (test_str[i] - '0');\n    }\n    return result;",
    "    long result = 0;\n    int i = 0;\n    while(i < test_str.length()) {\n        if(test_str[i] == '(') {\n            i++;\n            continue;\n        }\n        if(test_str[i] == ')') {\n            i++;\n            continue;\n        }\n        if(test_str[i] == ',') {\n            i++;\n            continue;\n        }\n        if(test_str[i] == ' ') {\n            i++;\n            continue;\n        }\n        result = result*10 + (test_str[i] - '0');\n        i++;\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    std::stringstream ss;\n    ss << test_str;\n    long result;\n    ss >> result;\n    return result;",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<int> test_int;\n    while(std::getline(ss, temp, ',')) {\n        test_int.push_back(std::stoi(temp));\n    }\n    long result = 0;\n    for(int i = 0; i < test_int.size(); i++) {\n        result = result * 100 + test_int[i];\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    long result;\n    ss >> result;\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    // Write your code here\n    long num = 0;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] == ',') {\n            num = num * 100;\n        }\n        else {\n            num = num * 10 + (test_str[i] - '0');\n        }\n    }\n    return num;",
    "    long result = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        result = result * 10 + (test_str[i] - '0');\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    long result;\n    ss >> result;\n    return result;"
  ]
}