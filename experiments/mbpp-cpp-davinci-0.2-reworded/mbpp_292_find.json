{
  "name": "mbpp_292_find",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find quotient of two numbers (rounded down to the nearest integer).\nlong find(long n, long m) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_292_find.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = find;\n    assert(candidate((10), (3)) == (3));\n    assert(candidate((4), (2)) == (2));\n    assert(candidate((20), (5)) == (4));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    if (n == 0) {\n        return 0;\n    }\n    if (m == 0) {\n        return INT_MAX;\n    }\n    if (n < 0) {\n        return find(-n, m);\n    }\n    if (m < 0) {\n        return find(n, -m);\n    }\n    if (n < m) {\n        return 0;\n    }\n    return 1 + find(n - m, m);",
    "    // Write your code here\n    return n/m;",
    "    // Your code here\n    return n/m;",
    "    return n/m;",
    "    return n / m;",
    "    if(n==0)\n        return 0;\n    if(n<0)\n        return -find(-n,m);\n    if(m==0)\n        return INT_MAX;\n    if(m<0)\n        return -find(n,-m);\n    long ans=0;\n    while(n>=m) {\n        n-=m;\n        ans++;\n    }\n    return ans;",
    "    return n/m;",
    "    if(n==0)\n        return 0;\n    if(n<m)\n        return 0;\n    else\n        return 1+find(n-m,m);",
    "    if (m == 0) {\n        return -1;\n    }\n    long quotient = 0;\n    long divisor = m;\n    long dividend = n;\n    while (divisor <= dividend) {\n        divisor <<= 1;\n    }\n    while (divisor >= m) {\n        quotient <<= 1;\n        if (divisor <= dividend) {\n            dividend -= divisor;\n            quotient += 1;\n        }\n        divisor >>= 1;\n    }\n    return quotient;",
    "    // Your code here\n    return n/m;",
    "    // write your code here\n    // return the quotient\n    return n/m;",
    "    long quotient = 0;\n    long temp = 0;\n    for (long i = 31; i >= 0; i--) {\n        if (temp + (m << i) <= n) {\n            temp += m << i;\n            quotient |= 1LL << i;\n        }\n    }\n    return quotient;",
    "    return (n / m);",
    "    // Your code here\n    if(n<m){\n        return 0;\n    }\n    if(n==m){\n        return 1;\n    }\n    if(n>m){\n        return 1+find(n-m,m);\n    }",
    "    // Your code here\n    if(n<0)\n    {\n        n=n*-1;\n    }\n    if(m<0)\n    {\n        m=m*-1;\n    }\n    long q=n/m;\n    return q;",
    "    if(n<m)\n        return 0;\n    return 1+find(n-m,m);",
    "    if (n == 0) {\n        return 0;\n    }\n    if (n < 0) {\n        return -1 + find(n + m, m);\n    }\n    return 1 + find(n - m, m);",
    "    return n / m;",
    "    // write your code here\n    // return the quotient\n    return (n/m);",
    "    long q = n / m;\n    if (n % m == 0) {\n        return q;\n    }\n    else {\n        return q - 1;\n    }"
  ]
}