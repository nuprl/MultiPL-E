{
  "name": "mbpp_429_and_tuples",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract the elementwise and tuples from the given two tuples.\nlong and_tuples(long test_tup1, long test_tup2) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_429_and_tuples.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = and_tuples;\n    assert(candidate(std::make_tuple(10, 4, 6, 9), std::make_tuple(5, 2, 3, 3)) == std::make_tuple(0, 0, 2, 1));\n    assert(candidate(std::make_tuple(1, 2, 3, 4), std::make_tuple(5, 6, 7, 8)) == std::make_tuple(1, 2, 3, 0));\n    assert(candidate(std::make_tuple(8, 9, 11, 12), std::make_tuple(7, 13, 14, 17)) == std::make_tuple(0, 9, 10, 0));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "  long res = 0;\n  for(int i = 0; i < 64; i++) {\n    long bit1 = (test_tup1 >> i) & 1;\n    long bit2 = (test_tup2 >> i) & 1;\n    if(bit1 == 1 && bit2 == 1) {\n      res = res | (1 << i);\n    }\n  }\n  return res;",
    "    long result = 0;\n    int i = 0;\n    while (test_tup1 > 0 && test_tup2 > 0) {\n        if ((test_tup1 % 10) && (test_tup2 % 10)) {\n            result += pow(10, i);\n        }\n        test_tup1 /= 10;\n        test_tup2 /= 10;\n        i++;\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        long bit1 = (test_tup1 >> i) & 1;\n        long bit2 = (test_tup2 >> i) & 1;\n        if (bit1 == 1 && bit2 == 1) {\n            result = result | (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if (((test_tup1 >> i) & 1) && ((test_tup2 >> i) & 1)) {\n            result |= (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    long mask = 1;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & mask) && (test_tup2 & mask)) {\n            result |= mask;\n        }\n        mask <<= 1;\n    }\n    return result;",
    "    long result = 0;\n    for(int i = 0; i < 64; i++) {\n        if(((test_tup1 >> i) & 1) & ((test_tup2 >> i) & 1)) {\n            result |= (1L << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for(int i = 0; i < 64; i++) {\n        if((test_tup1 & (1 << i)) && (test_tup2 & (1 << i))) {\n            result = result | (1 << i);\n        }\n    }\n    return result;",
    "\tlong result = 0;\n\tfor (int i = 0; i < 32; i++) {\n\t\tif ((test_tup1 & (1 << i)) && (test_tup2 & (1 << i))) {\n\t\t\tresult |= (1 << i);\n\t\t}\n\t}\n\treturn result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if (((test_tup1 >> i) & 1) == 1 && ((test_tup2 >> i) & 1) == 1) {\n            result = result | (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    long mask = 1;\n    for(int i = 0; i < 64; i++) {\n        if((test_tup1 & mask) && (test_tup2 & mask)) {\n            result |= mask;\n        }\n        mask <<= 1;\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if (((test_tup1 >> i) & 1) & ((test_tup2 >> i) & 1)) {\n            result |= (1L << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    int i = 0;\n    while(test_tup1 != 0 && test_tup2 != 0) {\n        long temp1 = test_tup1 & 1;\n        long temp2 = test_tup2 & 1;\n        if(temp1 == 1 && temp2 == 1) {\n            result |= 1 << i;\n        }\n        test_tup1 >>= 1;\n        test_tup2 >>= 1;\n        i++;\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & 1) == 1 && (test_tup2 & 1) == 1) {\n            result = result | (1 << i);\n        }\n        test_tup1 = test_tup1 >> 1;\n        test_tup2 = test_tup2 >> 1;\n    }\n    return result;",
    "    long result = 0;\n    long mask = 1;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & mask) && (test_tup2 & mask)) {\n            result |= mask;\n        }\n        mask <<= 1;\n    }\n    return result;",
    "    long result = 0;\n    for(int i = 0; i < 64; i++) {\n        if(((test_tup1 >> i) & 1) && ((test_tup2 >> i) & 1)) {\n            result |= (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    long temp = 1;\n    for(int i = 0; i < 64; i++) {\n        if((test_tup1 & temp) && (test_tup2 & temp)) {\n            result = result | temp;\n        }\n        temp = temp << 1;\n    }\n    return result;",
    "\tlong result = 0;\n\tfor (int i = 0; i < 64; i++) {\n\t\tif ((test_tup1 & 1) && (test_tup2 & 1)) {\n\t\t\tresult |= (1L << i);\n\t\t}\n\t\ttest_tup1 >>= 1;\n\t\ttest_tup2 >>= 1;\n\t}\n\treturn result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        long bit1 = (test_tup1 >> i) & 1;\n        long bit2 = (test_tup2 >> i) & 1;\n        if (bit1 == 1 && bit2 == 1) {\n            result |= (1L << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for(int i = 0; i < 64; i++) {\n        if(((test_tup1 >> i) & 1) == 1 && ((test_tup2 >> i) & 1) == 1) {\n            result |= (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if (((test_tup1 >> i) & 1) == 1 && ((test_tup2 >> i) & 1) == 1) {\n            result = result | (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for(int i = 0; i < 64; i++) {\n        if(((test_tup1 >> i) & 1) == 1 && ((test_tup2 >> i) & 1) == 1) {\n            result = result | (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for(int i = 0; i < 64; i++) {\n        if(((test_tup1 >> i) & 1) && ((test_tup2 >> i) & 1)) {\n            result |= (1 << i);\n        }\n    }\n    return result;",
    "\tlong result = 0;\n\tlong mask = 1;\n\tfor (int i = 0; i < 64; i++) {\n\t\tif ((test_tup1 & mask) && (test_tup2 & mask)) {\n\t\t\tresult |= mask;\n\t\t}\n\t\tmask <<= 1;\n\t}\n\treturn result;",
    "    long result = 0;\n    for(int i = 0; i < 64; i++) {\n        if(((test_tup1 >> i) & 1) && ((test_tup2 >> i) & 1)) {\n            result |= (1L << i);\n        }\n    }\n    return result;",
    "    long res = 0;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & (1 << i)) && (test_tup2 & (1 << i))) {\n            res |= (1 << i);\n        }\n    }\n    return res;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & (1L << i)) && (test_tup2 & (1L << i))) {\n            result |= (1L << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & (1L << i)) && (test_tup2 & (1L << i))) {\n            result |= (1L << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        long bit1 = test_tup1 & (1 << i);\n        long bit2 = test_tup2 & (1 << i);\n        if (bit1 != 0 && bit2 != 0) {\n            result = result | (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    long mask = 1;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & mask) && (test_tup2 & mask)) {\n            result = result | mask;\n        }\n        mask = mask << 1;\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if (((test_tup1 >> i) & 1) == 1 && ((test_tup2 >> i) & 1) == 1) {\n            result = result | (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        long bit1 = test_tup1 & (1L << i);\n        long bit2 = test_tup2 & (1L << i);\n        if (bit1 && bit2) {\n            result |= (1L << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if (((test_tup1 >> i) & 1) == 1 && ((test_tup2 >> i) & 1) == 1) {\n            result |= (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if (((test_tup1 >> i) & 1) == 1 && ((test_tup2 >> i) & 1) == 1) {\n            result = result | (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if (test_tup1 & 1 && test_tup2 & 1) {\n            result |= 1;\n        }\n        result <<= 1;\n        test_tup1 >>= 1;\n        test_tup2 >>= 1;\n    }\n    return result;",
    "    long result = 0;\n    for(int i = 0; i < 64; i++) {\n        if((test_tup1 & (1L << i)) && (test_tup2 & (1L << i))) {\n            result |= (1L << i);\n        }\n    }\n    return result;",
    "    long res = 0;\n    for(int i = 0; i < 64; i++) {\n        if((test_tup1 & (1 << i)) && (test_tup2 & (1 << i))) {\n            res |= (1 << i);\n        }\n    }\n    return res;",
    "    long result = 0;\n    for (int i = 0; i < 32; i++) {\n        if (((test_tup1 >> i) & 1) == 1 && ((test_tup2 >> i) & 1) == 1) {\n            result = result | (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if (((test_tup1 >> i) & 1) == 1 && ((test_tup2 >> i) & 1) == 1) {\n            result = result | (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 32; i++) {\n        result = result | ((test_tup1 & (1 << i)) & (test_tup2 & (1 << i)));\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & 1) && (test_tup2 & 1)) {\n            result |= 1;\n        }\n        result <<= 1;\n        test_tup1 >>= 1;\n        test_tup2 >>= 1;\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & (1 << i)) && (test_tup2 & (1 << i))) {\n            result |= (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & (1L << i)) && (test_tup2 & (1L << i))) {\n            result |= (1L << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if (((test_tup1 >> i) & 1) && ((test_tup2 >> i) & 1)) {\n            result |= (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    long temp = 1;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & temp) && (test_tup2 & temp)) {\n            result |= temp;\n        }\n        temp <<= 1;\n    }\n    return result;",
    "    long result = 0;\n    for(int i = 0; i < 64; i++) {\n        result = result | ((test_tup1 & (1L << i)) & (test_tup2 & (1L << i)));\n    }\n    return result;",
    "    long result = 0;\n    for(int i = 0; i < 64; i++) {\n        if((test_tup1 & (1L << i)) && (test_tup2 & (1L << i))) {\n            result |= (1L << i);\n        }\n    }\n    return result;",
    "    // Write your code here\n    long result = 0;\n    long mask = 1;\n    for(int i = 0; i < 64; i++) {\n        if((test_tup1 & mask) && (test_tup2 & mask)) {\n            result |= mask;\n        }\n        mask <<= 1;\n    }\n    return result;",
    "    long result = 0;\n    long mask = 1;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & mask) && (test_tup2 & mask)) {\n            result = result | mask;\n        }\n        mask = mask << 1;\n    }\n    return result;",
    "\tlong result = 0;\n\tfor (int i = 0; i < 64; i++) {\n\t\tif ((test_tup1 & (1 << i)) && (test_tup2 & (1 << i))) {\n\t\t\tresult |= (1 << i);\n\t\t}\n\t}\n\treturn result;",
    "\tlong result = 0;\n\tfor (int i = 0; i < 64; i++) {\n\t\tif (((test_tup1 >> i) & 1) == 1 && ((test_tup2 >> i) & 1) == 1) {\n\t\t\tresult = result | (1 << i);\n\t\t}\n\t}\n\treturn result;",
    "    long result = 0;\n    long mask = 1;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & mask) && (test_tup2 & mask)) {\n            result |= mask;\n        }\n        mask <<= 1;\n    }\n    return result;",
    "    long result = 0;\n    for(int i = 0; i < 64; i++) {\n        if(((test_tup1 >> i) & 1) == 1 && ((test_tup2 >> i) & 1) == 1) {\n            result |= (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & (1L << i)) && (test_tup2 & (1L << i))) {\n            result |= (1L << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    long mask = 1;\n    for(int i = 0; i < 64; i++) {\n        if((test_tup1 & mask) && (test_tup2 & mask)) {\n            result = result | mask;\n        }\n        mask = mask << 1;\n    }\n    return result;",
    "\tlong result = 0;\n\tfor (int i = 0; i < 64; i++) {\n\t\tif ((test_tup1 & (1 << i)) && (test_tup2 & (1 << i))) {\n\t\t\tresult |= (1 << i);\n\t\t}\n\t}\n\treturn result;",
    "    long result = 0;\n    for(int i = 0; i < 64; i++) {\n        if(((test_tup1 >> i) & 1) == 1 && ((test_tup2 >> i) & 1) == 1) {\n            result |= (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for(int i = 0; i < 64; i++) {\n        if(((test_tup1 >> i) & 1) == 1 && ((test_tup2 >> i) & 1) == 1) {\n            result = result | (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if (((test_tup1 >> i) & 1) == 1 && ((test_tup2 >> i) & 1) == 1) {\n            result |= (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for(int i = 0; i < 64; i++) {\n        if((test_tup1 & (1 << i)) && (test_tup2 & (1 << i))) {\n            result |= (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & (1L << i)) && (test_tup2 & (1L << i))) {\n            result |= (1L << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for(int i=0; i<64; i++) {\n        if((test_tup1 & (1<<i)) && (test_tup2 & (1<<i))) {\n            result |= (1<<i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if (((test_tup1 >> i) & 1) && ((test_tup2 >> i) & 1)) {\n            result |= (1L << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    long mask = 1;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & mask) && (test_tup2 & mask)) {\n            result |= mask;\n        }\n        mask <<= 1;\n    }\n    return result;",
    "    long result = 0;\n    for(int i = 0; i < 64; i++) {\n        if((test_tup1 & (1L << i)) && (test_tup2 & (1L << i))) {\n            result |= (1L << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        long mask = 1L << i;\n        if ((test_tup1 & mask) && (test_tup2 & mask)) {\n            result |= mask;\n        }\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        long bit1 = (test_tup1 >> i) & 1;\n        long bit2 = (test_tup2 >> i) & 1;\n        if (bit1 == 1 && bit2 == 1) {\n            result = result | (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for(int i = 0; i < 64; i++) {\n        if((test_tup1 & (1 << i)) && (test_tup2 & (1 << i))) {\n            result |= (1 << i);\n        }\n    }\n    return result;",
    "    long and_tuple = 0;\n    for (int i = 0; i < 64; i++) {\n        if (((test_tup1 >> i) & 1) == 1 && ((test_tup2 >> i) & 1) == 1) {\n            and_tuple = and_tuple | (1 << i);\n        }\n    }\n    return and_tuple;",
    "\tlong result = 0;\n\tlong mask = 1;\n\tfor (int i = 0; i < 64; i++) {\n\t\tif ((test_tup1 & mask) && (test_tup2 & mask)) {\n\t\t\tresult |= mask;\n\t\t}\n\t\tmask <<= 1;\n\t}\n\treturn result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if (((test_tup1 >> i) & 1) == 1 && ((test_tup2 >> i) & 1) == 1) {\n            result = result | (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for(int i = 0; i < 32; i++) {\n        long bit1 = (test_tup1 >> i) & 1;\n        long bit2 = (test_tup2 >> i) & 1;\n        if(bit1 == 1 && bit2 == 1) {\n            result = result | (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if (((test_tup1 >> i) & 1) & ((test_tup2 >> i) & 1)) {\n            result = result | (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    long mask = 1;\n    for(int i = 0; i < 64; i++) {\n        if((test_tup1 & mask) && (test_tup2 & mask)) {\n            result |= mask;\n        }\n        mask <<= 1;\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if (((test_tup1 >> i) & 1) && ((test_tup2 >> i) & 1)) {\n            result = result | (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        long bit1 = (test_tup1 >> i) & 1;\n        long bit2 = (test_tup2 >> i) & 1;\n        if (bit1 == 1 && bit2 == 1) {\n            result |= (1L << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if (((test_tup1 >> i) & 1) && ((test_tup2 >> i) & 1)) {\n            result |= (1L << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for(int i=0; i<64; i++) {\n        if((test_tup1 & (1L << i)) && (test_tup2 & (1L << i))) {\n            result |= (1L << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if (((test_tup1 >> i) & 1) == 1 && ((test_tup2 >> i) & 1) == 1) {\n            result |= (1 << i);\n        }\n    }\n    return result;",
    "\tlong result = 0;\n\tlong temp = 1;\n\tfor (int i = 0; i < 64; i++) {\n\t\tif ((test_tup1 & temp) && (test_tup2 & temp)) {\n\t\t\tresult = result | temp;\n\t\t}\n\t\ttemp = temp << 1;\n\t}\n\treturn result;",
    "    long result = 0;\n    for(int i = 0; i < 64; i++) {\n        result = result | ((test_tup1 & (1 << i)) & (test_tup2 & (1 << i)));\n    }\n    return result;",
    "    long result = 0;\n    long mask = 1;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & mask) && (test_tup2 & mask)) {\n            result |= mask;\n        }\n        mask <<= 1;\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & (1 << i)) && (test_tup2 & (1 << i))) {\n            result |= (1 << i);\n        }\n    }\n    return result;",
    "\tlong result = 0;\n\tlong mask = 1;\n\tfor (int i = 0; i < 64; i++) {\n\t\tif ((test_tup1 & mask) == mask && (test_tup2 & mask) == mask) {\n\t\t\tresult = result | mask;\n\t\t}\n\t\tmask = mask << 1;\n\t}\n\treturn result;",
    "    long result = 0;\n    for(int i = 0; i < 64; i++) {\n        if(((test_tup1 >> i) & 1) == 1 && ((test_tup2 >> i) & 1) == 1) {\n            result |= (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    long mask = 1;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & mask) && (test_tup2 & mask)) {\n            result |= mask;\n        }\n        mask <<= 1;\n    }\n    return result;",
    "  long result = 0;\n  long mask = 1;\n  for(int i = 0; i < 64; i++) {\n    if((test_tup1 & mask) && (test_tup2 & mask)) {\n      result |= mask;\n    }\n    mask <<= 1;\n  }\n  return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if (((test_tup1 >> i) & 1) == 1 && ((test_tup2 >> i) & 1) == 1) {\n            result |= (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for(int i = 0; i < 64; i++) {\n        if((test_tup1 & (1 << i)) && (test_tup2 & (1 << i))) {\n            result |= (1 << i);\n        }\n    }\n    return result;",
    "    long and_tup = 0;\n    long mask = 1;\n    for(int i = 0; i < 64; i++) {\n        if((test_tup1 & mask) && (test_tup2 & mask)) {\n            and_tup = and_tup | mask;\n        }\n        mask = mask << 1;\n    }\n    return and_tup;",
    "    long result = 0;\n    for(int i = 0; i < 64; i++) {\n        if((test_tup1 & (1L << i)) && (test_tup2 & (1L << i))) {\n            result |= (1L << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if (((test_tup1 >> i) & 1) && ((test_tup2 >> i) & 1)) {\n            result |= (1L << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    long mask = 1;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & mask) && (test_tup2 & mask)) {\n            result |= mask;\n        }\n        mask <<= 1;\n    }\n    return result;",
    "    long result = 0;\n    for(int i = 0; i < 64; i++) {\n        if(((test_tup1 >> i) & 1) && ((test_tup2 >> i) & 1)) {\n            result |= (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    long mask = 1;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & mask) && (test_tup2 & mask)) {\n            result |= mask;\n        }\n        mask <<= 1;\n    }\n    return result;",
    "    long result = 0;\n    for(int i = 0; i < 64; i++) {\n        if((test_tup1 & (1 << i)) && (test_tup2 & (1 << i))) {\n            result |= (1 << i);\n        }\n    }\n    return result;",
    "\tlong result = 0;\n\tfor (int i = 0; i < 64; i++) {\n\t\tif (((test_tup1 >> i) & 1) == 1 && ((test_tup2 >> i) & 1) == 1) {\n\t\t\tresult = result | (1 << i);\n\t\t}\n\t}\n\treturn result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if (((test_tup1 >> i) & 1) && ((test_tup2 >> i) & 1)) {\n            result += 1 << i;\n        }\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & (1 << i)) && (test_tup2 & (1 << i))) {\n            result |= (1 << i);\n        }\n    }\n    return result;",
    "\tlong result = 0;\n\tfor(int i = 0; i < 64; i++) {\n\t\tif(test_tup1 & (1 << i) && test_tup2 & (1 << i)) {\n\t\t\tresult |= (1 << i);\n\t\t}\n\t}\n\treturn result;",
    "    long res = 0;\n    for(int i = 0; i < 64; i++) {\n        if((test_tup1 & (1 << i)) && (test_tup2 & (1 << i))) {\n            res |= (1 << i);\n        }\n    }\n    return res;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & (1 << i)) && (test_tup2 & (1 << i))) {\n            result = result | (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 32; i++) {\n        if ((test_tup1 & (1 << i)) && (test_tup2 & (1 << i))) {\n            result |= (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    long mask = 1;\n    for(int i = 0; i < 64; i++) {\n        if((test_tup1 & mask) && (test_tup2 & mask)) {\n            result |= mask;\n        }\n        mask <<= 1;\n    }\n    return result;",
    "    long result = 0;\n    int i = 0;\n    while(test_tup1 != 0 || test_tup2 != 0) {\n        long bit1 = test_tup1 & 1;\n        long bit2 = test_tup2 & 1;\n        if(bit1 == 1 && bit2 == 1) {\n            result = result | (1 << i);\n        }\n        test_tup1 = test_tup1 >> 1;\n        test_tup2 = test_tup2 >> 1;\n        i++;\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & (1 << i)) && (test_tup2 & (1 << i))) {\n            result |= (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for(int i = 0; i < 32; i++) {\n        if((test_tup1 & (1 << i)) && (test_tup2 & (1 << i))) {\n            result |= (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & (1L << i)) && (test_tup2 & (1L << i))) {\n            result |= (1L << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for(int i = 0; i < 64; i++) {\n        if(((test_tup1 >> i) & 1) == 1 && ((test_tup2 >> i) & 1) == 1) {\n            result = result | (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    long mask = 1;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & mask) && (test_tup2 & mask)) {\n            result |= mask;\n        }\n        mask <<= 1;\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if (test_tup1 & (1L << i) && test_tup2 & (1L << i)) {\n            result |= (1L << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for(int i = 0; i < 64; i++) {\n        if((test_tup1 & (1L << i)) && (test_tup2 & (1L << i))) {\n            result |= (1L << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 32; i++) {\n        if ((test_tup1 & (1 << i)) && (test_tup2 & (1 << i))) {\n            result |= (1 << i);\n        }\n    }\n    return result;",
    "\tlong result = 0;\n\tlong mask = 1;\n\tfor(int i = 0; i < 64; i++) {\n\t\tif((test_tup1 & mask) && (test_tup2 & mask)) {\n\t\t\tresult |= mask;\n\t\t}\n\t\tmask <<= 1;\n\t}\n\treturn result;",
    "    long result = 0;\n    for(int i = 0; i < 64; i++) {\n        if((test_tup1 & (1L << i)) && (test_tup2 & (1L << i))) {\n            result |= (1L << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & (1L << i)) && (test_tup2 & (1L << i))) {\n            result |= (1L << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    long mask = 1;\n    for (int i = 0; i < 8; i++) {\n        if ((test_tup1 & mask) && (test_tup2 & mask)) {\n            result = result | mask;\n        }\n        mask = mask << 1;\n    }\n    return result;",
    "\tlong result = 0;\n\tfor (int i = 0; i < 64; i++) {\n\t\tlong bit1 = (test_tup1 >> i) & 1;\n\t\tlong bit2 = (test_tup2 >> i) & 1;\n\t\tif (bit1 == 1 && bit2 == 1) {\n\t\t\tresult = result | (1 << i);\n\t\t}\n\t}\n\treturn result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & 1) && (test_tup2 & 1)) {\n            result |= (1L << i);\n        }\n        test_tup1 >>= 1;\n        test_tup2 >>= 1;\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & (1 << i)) && (test_tup2 & (1 << i))) {\n            result |= (1 << i);\n        }\n    }\n    return result;",
    "\tlong result = 0;\n\tlong mask = 1;\n\tfor (int i = 0; i < 64; i++) {\n\t\tlong bit1 = test_tup1 & mask;\n\t\tlong bit2 = test_tup2 & mask;\n\t\tif (bit1 != 0 && bit2 != 0) {\n\t\t\tresult = result | mask;\n\t\t}\n\t\tmask = mask << 1;\n\t}\n\treturn result;",
    "    long result = 0;\n    for(int i = 0; i < 64; i++) {\n        if(((test_tup1 >> i) & 1) == 1 && ((test_tup2 >> i) & 1) == 1) {\n            result = result | (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 32; i++) {\n        if (((test_tup1 >> i) & 1) && ((test_tup2 >> i) & 1)) {\n            result |= (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & (1L << i)) && (test_tup2 & (1L << i))) {\n            result |= (1L << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & (1L << i)) && (test_tup2 & (1L << i))) {\n            result |= (1L << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & (1 << i)) && (test_tup2 & (1 << i))) {\n            result = result | (1 << i);\n        }\n    }\n    return result;",
    "    long res = 0;\n    for(int i = 0; i < 64; i++) {\n        if((test_tup1 & (1L << i)) && (test_tup2 & (1L << i))) {\n            res |= (1L << i);\n        }\n    }\n    return res;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & 1) == 1 && (test_tup2 & 1) == 1) {\n            result = result | (1 << i);\n        }\n        test_tup1 = test_tup1 >> 1;\n        test_tup2 = test_tup2 >> 1;\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if (((test_tup1 >> i) & 1) && ((test_tup2 >> i) & 1)) {\n            result |= (1L << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & (1 << i)) && (test_tup2 & (1 << i))) {\n            result |= (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & (1 << i)) && (test_tup2 & (1 << i))) {\n            result |= (1 << i);\n        }\n    }\n    return result;",
    "\tlong result = 0;\n\tfor (int i = 0; i < 64; i++) {\n\t\tif ((test_tup1 & (1L << i)) && (test_tup2 & (1L << i))) {\n\t\t\tresult |= (1L << i);\n\t\t}\n\t}\n\treturn result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & (1L << i)) && (test_tup2 & (1L << i))) {\n            result |= (1L << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for(int i = 0; i < 64; i++) {\n        if((test_tup1 & (1 << i)) && (test_tup2 & (1 << i))) {\n            result |= (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if (((test_tup1 >> i) & 1) == 1 && ((test_tup2 >> i) & 1) == 1) {\n            result = result | (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if (((test_tup1 >> i) & 1) == 1 && ((test_tup2 >> i) & 1) == 1) {\n            result |= (1 << i);\n        }\n    }\n    return result;",
    "\tlong result = 0;\n\tfor (int i = 0; i < 32; i++) {\n\t\tif ((test_tup1 & (1 << i)) && (test_tup2 & (1 << i))) {\n\t\t\tresult = result | (1 << i);\n\t\t}\n\t}\n\treturn result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & (1 << i)) && (test_tup2 & (1 << i))) {\n            result |= (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    long mask = 1;\n    for(int i = 0; i < 64; i++) {\n        if((test_tup1 & mask) && (test_tup2 & mask)) {\n            result |= mask;\n        }\n        mask <<= 1;\n    }\n    return result;",
    "    long result = 0;\n    for(int i = 0; i < 64; i++) {\n        if(((test_tup1 >> i) & 1) == 1 && ((test_tup2 >> i) & 1) == 1) {\n            result = result | (1 << i);\n        }\n    }\n    return result;",
    "  long result = 0;\n  for (int i = 0; i < 64; i++) {\n    if (((test_tup1 >> i) & 1) == 1 && ((test_tup2 >> i) & 1) == 1) {\n      result = result | (1 << i);\n    }\n  }\n  return result;",
    "    long result = 0;\n    long mask = 1;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & mask) && (test_tup2 & mask)) {\n            result |= mask;\n        }\n        mask <<= 1;\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        long bit1 = (test_tup1 >> i) & 1;\n        long bit2 = (test_tup2 >> i) & 1;\n        if (bit1 == 1 && bit2 == 1) {\n            result = result | (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & (1L << i)) && (test_tup2 & (1L << i))) {\n            result |= (1L << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for(int i = 0; i < 64; i++) {\n        if(((test_tup1 >> i) & 1) == 1 && ((test_tup2 >> i) & 1) == 1) {\n            result = result | (1 << i);\n        }\n    }\n    return result;",
    "    long res = 0;\n    for(int i = 0; i < 64; i++) {\n        if((test_tup1 & (1L << i)) && (test_tup2 & (1L << i))) {\n            res |= (1L << i);\n        }\n    }\n    return res;",
    "    long result = 0;\n    long mask = 1;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & mask) && (test_tup2 & mask)) {\n            result |= mask;\n        }\n        mask <<= 1;\n    }\n    return result;",
    "    long result = 0;\n    for(int i = 0; i < 64; i++) {\n        if((test_tup1 & (1 << i)) && (test_tup2 & (1 << i))) {\n            result |= (1 << i);\n        }\n    }\n    return result;",
    "    long and_tuple = 0;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & (1L << i)) && (test_tup2 & (1L << i))) {\n            and_tuple = and_tuple | (1L << i);\n        }\n    }\n    return and_tuple;",
    "    long result = 0;\n    for(int i = 0; i < 64; i++) {\n        if((test_tup1 & (1 << i)) && (test_tup2 & (1 << i))) {\n            result |= (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for(int i = 0; i < 64; i++) {\n        if((test_tup1 & (1 << i)) && (test_tup2 & (1 << i))) {\n            result |= (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for(int i = 0; i < 32; i++) {\n        if((test_tup1 & (1 << i)) && (test_tup2 & (1 << i))) {\n            result |= (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & 1) && (test_tup2 & 1)) {\n            result = result | (1 << i);\n        }\n        test_tup1 = test_tup1 >> 1;\n        test_tup2 = test_tup2 >> 1;\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if (((test_tup1 >> i) & 1) == 1 && ((test_tup2 >> i) & 1) == 1) {\n            result |= (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for(int i = 0; i < 64; i++) {\n        if(((test_tup1 & (1 << i)) != 0) && ((test_tup2 & (1 << i)) != 0)) {\n            result |= (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & (1 << i)) && (test_tup2 & (1 << i))) {\n            result |= (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if (((test_tup1 >> i) & 1) == 1 && ((test_tup2 >> i) & 1) == 1) {\n            result |= (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for(int i = 0; i < 64; i++) {\n        if((test_tup1 & (1 << i)) && (test_tup2 & (1 << i))) {\n            result |= (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    long mask = 1;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & mask) && (test_tup2 & mask)) {\n            result |= mask;\n        }\n        mask <<= 1;\n    }\n    return result;",
    "    long result = 0;\n    long mask = 1;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & mask) && (test_tup2 & mask)) {\n            result |= mask;\n        }\n        mask <<= 1;\n    }\n    return result;",
    "    long result = 0;\n    for(int i = 0; i < 64; i++) {\n        if((test_tup1 & (1 << i)) && (test_tup2 & (1 << i))) {\n            result |= (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & (1L << i)) != 0 && (test_tup2 & (1L << i)) != 0) {\n            result |= (1L << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    long mask = 1;\n    for(int i = 0; i < 64; i++) {\n        if((test_tup1 & mask) && (test_tup2 & mask)) {\n            result |= mask;\n        }\n        mask <<= 1;\n    }\n    return result;",
    "    long result = 0;\n    for(int i = 0; i < 32; i++) {\n        if(((test_tup1 >> i) & 1) == 1 && ((test_tup2 >> i) & 1) == 1) {\n            result = result | (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    long mask = 1;\n    for (int i = 0; i < 64; i++) {\n        long bit1 = test_tup1 & mask;\n        long bit2 = test_tup2 & mask;\n        if (bit1 == bit2) {\n            result = result | bit1;\n        }\n        mask = mask << 1;\n    }\n    return result;",
    "  long result = 0;\n  for (int i = 0; i < 64; i++) {\n    if (((test_tup1 >> i) & 1) == 1 && ((test_tup2 >> i) & 1) == 1) {\n      result = result | (1 << i);\n    }\n  }\n  return result;",
    "    long result = 0;\n    long mask = 1;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & mask) && (test_tup2 & mask)) {\n            result |= mask;\n        }\n        mask <<= 1;\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if (((test_tup1 >> i) & 1) == 1 && ((test_tup2 >> i) & 1) == 1) {\n            result |= (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & (1L << i)) && (test_tup2 & (1L << i))) {\n            result = result | (1L << i);\n        }\n    }\n    return result;",
    "\tlong result = 0;\n\tfor (int i = 0; i < 64; i++) {\n\t\tlong bit1 = (test_tup1 >> i) & 1;\n\t\tlong bit2 = (test_tup2 >> i) & 1;\n\t\tlong bit = bit1 & bit2;\n\t\tresult = result | (bit << i);\n\t}\n\treturn result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if (((test_tup1 >> i) & 1) == 1 && ((test_tup2 >> i) & 1) == 1) {\n            result |= (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 32; i++) {\n        long bit1 = (test_tup1 >> i) & 1;\n        long bit2 = (test_tup2 >> i) & 1;\n        if (bit1 == 1 && bit2 == 1) {\n            result = result | (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        long bit1 = (test_tup1 >> i) & 1;\n        long bit2 = (test_tup2 >> i) & 1;\n        if (bit1 == 1 && bit2 == 1) {\n            result |= (1L << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if (((test_tup1 >> i) & 1) && ((test_tup2 >> i) & 1)) {\n            result = result | (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if (((test_tup1 >> i) & 1) == 1 && ((test_tup2 >> i) & 1) == 1) {\n            result |= (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & (1L << i)) && (test_tup2 & (1L << i))) {\n            result |= (1L << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    long mask = 1;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & mask) && (test_tup2 & mask)) {\n            result |= mask;\n        }\n        mask <<= 1;\n    }\n    return result;",
    "    long result = 0;\n    int i = 0;\n    while (test_tup1 > 0 && test_tup2 > 0) {\n        if (test_tup1 % 2 == 1 && test_tup2 % 2 == 1) {\n            result += pow(2, i);\n        }\n        test_tup1 /= 2;\n        test_tup2 /= 2;\n        i++;\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if (((test_tup1 >> i) & 1) == 1 && ((test_tup2 >> i) & 1) == 1) {\n            result |= (1L << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for(int i = 0; i < 64; i++) {\n        if((test_tup1 & (1 << i)) && (test_tup2 & (1 << i))) {\n            result |= (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        long bit1 = (test_tup1 >> i) & 1;\n        long bit2 = (test_tup2 >> i) & 1;\n        if (bit1 == 1 && bit2 == 1) {\n            result = result | (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for(int i = 0; i < 32; i++) {\n        if((test_tup1 & (1 << i)) && (test_tup2 & (1 << i))) {\n            result |= (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for(int i = 0; i < 64; i++) {\n        if((test_tup1 & (1 << i)) && (test_tup2 & (1 << i))) {\n            result |= (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for(int i = 0; i < 64; i++) {\n        long bit1 = (test_tup1 >> i) & 1;\n        long bit2 = (test_tup2 >> i) & 1;\n        if(bit1 == 1 && bit2 == 1) {\n            result |= (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & (1L << i)) && (test_tup2 & (1L << i))) {\n            result |= (1L << i);\n        }\n    }\n    return result;",
    "\tlong result = 0;\n\tfor (int i = 0; i < 8; i++) {\n\t\tlong temp1 = (test_tup1 >> (i * 4)) & 15;\n\t\tlong temp2 = (test_tup2 >> (i * 4)) & 15;\n\t\tresult = result | (temp1 & temp2) << (i * 4);\n\t}\n\treturn result;",
    "\tlong result = 0;\n\tfor (int i = 0; i < 64; i++) {\n\t\tlong bit1 = (test_tup1 >> i) & 1;\n\t\tlong bit2 = (test_tup2 >> i) & 1;\n\t\tif (bit1 == 1 && bit2 == 1) {\n\t\t\tresult = result | (1 << i);\n\t\t}\n\t}\n\treturn result;",
    "    long res = 0;\n    for(int i = 0; i < 64; i++) {\n        if(((test_tup1 >> i) & 1) & ((test_tup2 >> i) & 1)) {\n            res |= (1 << i);\n        }\n    }\n    return res;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & 1) && (test_tup2 & 1)) {\n            result |= (1L << i);\n        }\n        test_tup1 >>= 1;\n        test_tup2 >>= 1;\n    }\n    return result;",
    "\tlong result = 0;\n\tlong temp1 = test_tup1;\n\tlong temp2 = test_tup2;\n\tint i = 0;\n\twhile (temp1 != 0) {\n\t\tif ((temp1 & 1) == 1 && (temp2 & 1) == 1) {\n\t\t\tresult = result | (1 << i);\n\t\t}\n\t\ttemp1 = temp1 >> 1;\n\t\ttemp2 = temp2 >> 1;\n\t\ti++;\n\t}\n\treturn result;",
    "    long result = 0;\n    for(int i = 0; i < 64; i++) {\n        if(((test_tup1 >> i) & 1) && ((test_tup2 >> i) & 1)) {\n            result |= (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & 1) && (test_tup2 & 1)) {\n            result |= (1L << i);\n        }\n        test_tup1 >>= 1;\n        test_tup2 >>= 1;\n    }\n    return result;",
    "\tlong result = 0;\n\tfor(int i=0; i<64; i++) {\n\t\tif((test_tup1 & (1L << i)) && (test_tup2 & (1L << i))) {\n\t\t\tresult |= (1L << i);\n\t\t}\n\t}\n\treturn result;",
    "    long result = 0;\n    for(int i = 0; i < 64; i++) {\n        if((test_tup1 & (1L << i)) && (test_tup2 & (1L << i))) {\n            result |= (1L << i);\n        }\n    }\n    return result;",
    "\tlong result = 0;\n\tlong mask = 1;\n\tfor (int i = 0; i < 64; i++) {\n\t\tif ((test_tup1 & mask) && (test_tup2 & mask)) {\n\t\t\tresult = result | mask;\n\t\t}\n\t\tmask = mask << 1;\n\t}\n\treturn result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        long bit1 = (test_tup1 >> i) & 1;\n        long bit2 = (test_tup2 >> i) & 1;\n        if (bit1 == 1 && bit2 == 1) {\n            result = result | (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & (1L << i)) && (test_tup2 & (1L << i))) {\n            result |= (1L << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    long mask = 1;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & mask) && (test_tup2 & mask)) {\n            result |= mask;\n        }\n        mask <<= 1;\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & (1 << i)) && (test_tup2 & (1 << i))) {\n            result |= (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    long mask = 1;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & mask) && (test_tup2 & mask)) {\n            result |= mask;\n        }\n        mask <<= 1;\n    }\n    return result;",
    "\tlong result = 0;\n\tfor (int i = 0; i < 64; i++) {\n\t\tif (((test_tup1 >> i) & 1) == 1 && ((test_tup2 >> i) & 1) == 1) {\n\t\t\tresult = result | (1 << i);\n\t\t}\n\t}\n\treturn result;"
  ]
}