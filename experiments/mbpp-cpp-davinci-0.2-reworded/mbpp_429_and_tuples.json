{
  "name": "mbpp_429_and_tuples",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract the elementwise and tuples from the given two tuples.\nlong and_tuples(long test_tup1, long test_tup2) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_429_and_tuples.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = and_tuples;\n    assert(candidate(std::make_tuple(10, 4, 6, 9), std::make_tuple(5, 2, 3, 3)) == std::make_tuple(0, 0, 2, 1));\n    assert(candidate(std::make_tuple(1, 2, 3, 4), std::make_tuple(5, 6, 7, 8)) == std::make_tuple(1, 2, 3, 0));\n    assert(candidate(std::make_tuple(8, 9, 11, 12), std::make_tuple(7, 13, 14, 17)) == std::make_tuple(0, 9, 10, 0));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "  long res = 0;\n  for(int i = 0; i < 64; i++) {\n    long bit1 = (test_tup1 >> i) & 1;\n    long bit2 = (test_tup2 >> i) & 1;\n    if(bit1 == 1 && bit2 == 1) {\n      res = res | (1 << i);\n    }\n  }\n  return res;",
    "    long result = 0;\n    int i = 0;\n    while (test_tup1 > 0 && test_tup2 > 0) {\n        if ((test_tup1 % 10) && (test_tup2 % 10)) {\n            result += pow(10, i);\n        }\n        test_tup1 /= 10;\n        test_tup2 /= 10;\n        i++;\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        long bit1 = (test_tup1 >> i) & 1;\n        long bit2 = (test_tup2 >> i) & 1;\n        if (bit1 == 1 && bit2 == 1) {\n            result = result | (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if (((test_tup1 >> i) & 1) && ((test_tup2 >> i) & 1)) {\n            result |= (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    long mask = 1;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & mask) && (test_tup2 & mask)) {\n            result |= mask;\n        }\n        mask <<= 1;\n    }\n    return result;",
    "    long result = 0;\n    for(int i = 0; i < 64; i++) {\n        if(((test_tup1 >> i) & 1) & ((test_tup2 >> i) & 1)) {\n            result |= (1L << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for(int i = 0; i < 64; i++) {\n        if((test_tup1 & (1 << i)) && (test_tup2 & (1 << i))) {\n            result = result | (1 << i);\n        }\n    }\n    return result;",
    "\tlong result = 0;\n\tfor (int i = 0; i < 32; i++) {\n\t\tif ((test_tup1 & (1 << i)) && (test_tup2 & (1 << i))) {\n\t\t\tresult |= (1 << i);\n\t\t}\n\t}\n\treturn result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if (((test_tup1 >> i) & 1) == 1 && ((test_tup2 >> i) & 1) == 1) {\n            result = result | (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    long mask = 1;\n    for(int i = 0; i < 64; i++) {\n        if((test_tup1 & mask) && (test_tup2 & mask)) {\n            result |= mask;\n        }\n        mask <<= 1;\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if (((test_tup1 >> i) & 1) & ((test_tup2 >> i) & 1)) {\n            result |= (1L << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    int i = 0;\n    while(test_tup1 != 0 && test_tup2 != 0) {\n        long temp1 = test_tup1 & 1;\n        long temp2 = test_tup2 & 1;\n        if(temp1 == 1 && temp2 == 1) {\n            result |= 1 << i;\n        }\n        test_tup1 >>= 1;\n        test_tup2 >>= 1;\n        i++;\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & 1) == 1 && (test_tup2 & 1) == 1) {\n            result = result | (1 << i);\n        }\n        test_tup1 = test_tup1 >> 1;\n        test_tup2 = test_tup2 >> 1;\n    }\n    return result;",
    "    long result = 0;\n    long mask = 1;\n    for (int i = 0; i < 64; i++) {\n        if ((test_tup1 & mask) && (test_tup2 & mask)) {\n            result |= mask;\n        }\n        mask <<= 1;\n    }\n    return result;",
    "    long result = 0;\n    for(int i = 0; i < 64; i++) {\n        if(((test_tup1 >> i) & 1) && ((test_tup2 >> i) & 1)) {\n            result |= (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    long temp = 1;\n    for(int i = 0; i < 64; i++) {\n        if((test_tup1 & temp) && (test_tup2 & temp)) {\n            result = result | temp;\n        }\n        temp = temp << 1;\n    }\n    return result;",
    "\tlong result = 0;\n\tfor (int i = 0; i < 64; i++) {\n\t\tif ((test_tup1 & 1) && (test_tup2 & 1)) {\n\t\t\tresult |= (1L << i);\n\t\t}\n\t\ttest_tup1 >>= 1;\n\t\ttest_tup2 >>= 1;\n\t}\n\treturn result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        long bit1 = (test_tup1 >> i) & 1;\n        long bit2 = (test_tup2 >> i) & 1;\n        if (bit1 == 1 && bit2 == 1) {\n            result |= (1L << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for(int i = 0; i < 64; i++) {\n        if(((test_tup1 >> i) & 1) == 1 && ((test_tup2 >> i) & 1) == 1) {\n            result |= (1 << i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < 64; i++) {\n        if (((test_tup1 >> i) & 1) == 1 && ((test_tup2 >> i) & 1) == 1) {\n            result = result | (1 << i);\n        }\n    }\n    return result;"
  ]
}