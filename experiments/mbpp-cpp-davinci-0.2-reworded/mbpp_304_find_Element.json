{
  "name": "mbpp_304_find_Element",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find element at a given index after number of rotations.\nlong find_Element(std::vector<long> arr, std::vector<std::vector<long>> ranges, long rotations, long index) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_304_find_Element.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = find_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})), (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)2}), (std::vector<long>)std::vector<long>({(long)0, (long)3})})), (2), (1)) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)2})})), (1), (2)) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)2})})), (1), (1)) == (1));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    for (long i = 0; i < rotations; i++) {\n        long start = ranges[i][0];\n        long end = ranges[i][1];\n        long temp = arr[end];\n        for (long j = end; j > start; j--) {\n            arr[j] = arr[j-1];\n        }\n        arr[start] = temp;\n    }\n    return arr[index];",
    "    // Write your code here\n    long n = arr.size();\n    long m = ranges.size();\n    long i = 0;\n    while(i < rotations) {\n        for(long j = 0; j < m; j++) {\n            long start = ranges[j][0];\n            long end = ranges[j][1];\n            std::reverse(arr.begin() + start, arr.begin() + end + 1);\n        }\n        i++;\n    }\n    return arr[index];",
    "    long n = arr.size();\n    long m = ranges.size();\n    long i = 0;\n    for(i = 0; i < m; i++) {\n        if(ranges[i][0] <= index && ranges[i][1] >= index) {\n            break;\n        }\n    }\n    long diff = rotations - i;\n    long new_index = index - ranges[i][0];\n    new_index = (new_index + diff) % (ranges[i][1] - ranges[i][0] + 1);\n    new_index = new_index + ranges[i][0];\n    return arr[new_index];",
    "    // Write your code here\n    long n = arr.size();\n    long m = ranges.size();\n    long i = 0;\n    while(i < rotations) {\n        for(long j = 0; j < m; j++) {\n            long l = ranges[j][0];\n            long r = ranges[j][1];\n            std::vector<long> temp;\n            for(long k = l; k <= r; k++) {\n                temp.push_back(arr[k]);\n            }\n            std::reverse(temp.begin(), temp.end());\n            long t = 0;\n            for(long k = l; k <= r; k++) {\n                arr[k] = temp[t];\n                t++;\n            }\n        }\n        i++;\n    }\n    return arr[index];",
    "    long n = arr.size();\n    long i = 0;\n    while(i < rotations) {\n        long start = ranges[i][0];\n        long end = ranges[i][1];\n        std::reverse(arr.begin() + start, arr.begin() + end + 1);\n        i++;\n    }\n    return arr[index];",
    "    long n = arr.size();\n    long i = 0;\n    while(i < rotations) {\n        long start = ranges[i][0];\n        long end = ranges[i][1];\n        std::reverse(arr.begin() + start, arr.begin() + end + 1);\n        i++;\n    }\n    return arr[index];",
    "    // Write your code here\n    long n = arr.size();\n    long m = ranges.size();\n    long i, j, k, l, r, x, y, z;\n    for(i = 0; i < m; i++) {\n        l = ranges[i][0];\n        r = ranges[i][1];\n        x = rotations % (r - l + 1);\n        for(j = 0; j < x; j++) {\n            y = arr[l];\n            for(k = l; k < r; k++) {\n                arr[k] = arr[k + 1];\n            }\n            arr[r] = y;\n        }\n    }\n    return arr[index];",
    "    // Write your code here\n    long n = arr.size();\n    long m = ranges.size();\n    long i, j, k;\n    for(i = 0; i < rotations; i++) {\n        for(j = 0; j < m; j++) {\n            long start = ranges[j][0];\n            long end = ranges[j][1];\n            long temp = arr[end];\n            for(k = end; k > start; k--) {\n                arr[k] = arr[k-1];\n            }\n            arr[start] = temp;\n        }\n    }\n    return arr[index];",
    "    long n = arr.size();\n    long new_index = (index + rotations) % n;\n    return arr[new_index];",
    "    long n = arr.size();\n    long r = rotations % n;\n    long i = index - r;\n    if (i < 0) {\n        i = n + i;\n    }\n    return arr[i];",
    "    long n = arr.size();\n    long i = index;\n    for (long r = 0; r < rotations; r++) {\n        long range_start = ranges[r][0];\n        long range_end = ranges[r][1];\n        if (i >= range_start && i <= range_end) {\n            i = range_end - (i - range_start);\n        }\n    }\n    return arr[i];",
    "    long n = arr.size();\n    long r = ranges.size();\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long temp = 0;\n    long temp_index = 0;\n    long temp_rotations = 0;\n    long temp_ranges = 0;\n    long temp_ranges_size = 0;\n    long temp_ranges_start = 0;\n    long temp_ranges_end = 0;\n    long temp_ranges_size_start = 0;\n    long temp_ranges_size_end = 0;\n    long temp_ranges_size_start_index = 0;\n    long temp_ranges_size_end_index = 0;\n    long temp_ranges_size_start_index_value = 0;\n    long temp_ranges_size_end_index_value = 0;\n    long temp_ranges_size_start_index_value_temp = 0;\n    long temp_ranges_size_end_index_value_temp = 0;\n    long temp_ranges_size_start_index_value_temp_index = 0;\n    long temp_ranges_size_end_index_value_temp_index = 0;\n    long temp_ranges_size_start_index_value_temp_index_value = 0;\n    long temp_ranges_size_end_index_value_temp_index_value = 0;\n    long temp_ranges_size_start_index_value_temp_index_value_temp = 0;\n    long temp_ranges_size_end_index_value_temp_index_value_temp = 0;\n    long temp_ranges_size_start_index_value_temp_index_value_temp_index = 0;\n    long temp_ranges_size_end_index_value_temp_index_value_temp_index = 0;\n    long temp_ranges_size_start_index_value_temp_index_value_temp_index_value = 0;\n    long temp_ranges_size_end_index_value_temp_index_value_temp_index_value = 0;\n    long temp_",
    "    // Write your code here\n    long n = arr.size();\n    long i = 0;\n    while(i < rotations){\n        long start = ranges[i][0];\n        long end = ranges[i][1];\n        std::vector<long> temp;\n        for(long j = start; j <= end; j++){\n            temp.push_back(arr[j]);\n        }\n        for(long j = start; j <= end; j++){\n            arr[j] = temp[end - j];\n        }\n        i++;\n    }\n    return arr[index];",
    "\tlong n = arr.size();\n\tlong r = rotations % n;\n\tlong start = ranges[r][0];\n\tlong end = ranges[r][1];\n\tlong diff = end - start;\n\tlong new_index = index - start;\n\tif (new_index < 0) {\n\t\tnew_index = n + new_index;\n\t}\n\treturn arr[new_index];",
    "    long n = arr.size();\n    long i = index;\n    for (long j = 0; j < rotations; j++) {\n        i = ranges[j][0] + (i - ranges[j][1]) % (ranges[j][2] - ranges[j][1] + 1);\n    }\n    return arr[i];",
    "    // Write your code here\n    for(long i=0;i<rotations;i++){\n        long temp = arr[0];\n        for(long j=0;j<arr.size()-1;j++){\n            arr[j] = arr[j+1];\n        }\n        arr[arr.size()-1] = temp;\n    }\n    return arr[index];",
    "    for (long i = 0; i < rotations; i++) {\n        long start = ranges[i][0];\n        long end = ranges[i][1];\n        std::reverse(arr.begin() + start, arr.begin() + end + 1);\n    }\n    return arr[index];",
    "    // Write your code here\n    long n = arr.size();\n    long m = ranges.size();\n    long i, j;\n    for(i = 0; i < rotations; i++) {\n        for(j = 0; j < m; j++) {\n            long start = ranges[j][0];\n            long end = ranges[j][1];\n            long temp = arr[start];\n            for(long k = start; k < end; k++) {\n                arr[k] = arr[k+1];\n            }\n            arr[end] = temp;\n        }\n    }\n    return arr[index];",
    "    long n = arr.size();\n    long r = rotations % n;\n    for(long i = 0; i < ranges.size(); i++) {\n        long l = ranges[i][0];\n        long r = ranges[i][1];\n        long k = ranges[i][2];\n        long left = (l + r + 1) / 2;\n        long right = (r - l + 1) / 2;\n        long left_rot = (left + r) % n;\n        long right_rot = (right + l) % n;\n        if(left_rot <= right_rot) {\n            for(long j = left_rot; j <= right_rot; j++) {\n                arr[j] += k;\n            }\n        } else {\n            for(long j = left_rot; j < n; j++) {\n                arr[j] += k;\n            }\n            for(long j = 0; j <= right_rot; j++) {\n                arr[j] += k;\n            }\n        }\n    }\n    return arr[(index + r) % n];",
    "    if (index >= arr.size()) {\n        return -1;\n    }\n    for (auto range : ranges) {\n        if (range[0] <= index && index <= range[1]) {\n            index = range[0] + (range[1] - index);\n        }\n    }\n    index = (index + rotations) % arr.size();\n    return arr[index];",
    "    // Write your code here\n    long n = arr.size();\n    long m = ranges.size();\n    long start, end, temp;\n    for(long i=0; i<m; i++) {\n        start = ranges[i][0];\n        end = ranges[i][1];\n        temp = arr[start];\n        for(long j=start; j<end; j++) {\n            arr[j] = arr[j+1];\n        }\n        arr[end] = temp;\n    }\n    return arr[(index+rotations)%n];",
    "    // Write your code here\n    long n = arr.size();\n    long i = 0;\n    while(i < rotations) {\n        long start = ranges[i][0];\n        long end = ranges[i][1];\n        std::reverse(arr.begin() + start, arr.begin() + end + 1);\n        i++;\n    }\n    return arr[index];",
    "    long n = arr.size();\n    long m = ranges.size();\n    for(long i = 0; i < m; i++) {\n        long l = ranges[i][0];\n        long r = ranges[i][1];\n        long d = ranges[i][2];\n        for(long j = l; j <= r; j++) {\n            arr[j] += d;\n        }\n    }\n    long new_index = (index + rotations) % n;\n    return arr[new_index];",
    "    long n = arr.size();\n    long rotations_performed = 0;\n    while(rotations_performed < rotations) {\n        for(long i = 0; i < ranges.size(); i++) {\n            long start = ranges[i][0];\n            long end = ranges[i][1];\n            long temp = arr[end];\n            for(long j = end; j > start; j--) {\n                arr[j] = arr[j-1];\n            }\n            arr[start] = temp;\n        }\n        rotations_performed++;\n    }\n    return arr[index];",
    "    long size = arr.size();\n    long range_size = ranges.size();\n    long start, end;\n    for (long i = 0; i < range_size; i++) {\n        start = ranges[i][0];\n        end = ranges[i][1];\n        if (start <= index && index <= end) {\n            index = (index - start + rotations) % size;\n            return arr[index];\n        }\n    }\n    return -1;",
    "    long n = arr.size();\n    long i = 0;\n    while(i < rotations) {\n        long start = ranges[i][0];\n        long end = ranges[i][1];\n        std::vector<long> temp;\n        for(long j = start; j <= end; j++) {\n            temp.push_back(arr[j]);\n        }\n        long k = 0;\n        for(long j = end; j >= start; j--) {\n            arr[j] = temp[k];\n            k++;\n        }\n        i++;\n    }\n    return arr[index];",
    "    long n = arr.size();\n    long i = 0;\n    for(i=0; i<ranges.size(); i++) {\n        if(ranges[i][0] <= index && ranges[i][1] >= index) {\n            break;\n        }\n    }\n    long range_index = i;\n    long range_size = ranges[range_index][1] - ranges[range_index][0] + 1;\n    long range_rotations = rotations % range_size;\n    long new_index = ranges[range_index][0] + range_rotations;\n    if(new_index > ranges[range_index][1]) {\n        new_index = new_index - ranges[range_index][1] + ranges[range_index][0] - 1;\n    }\n    return arr[new_index];",
    "\tlong size = arr.size();\n\tlong new_index = (index + rotations) % size;\n\treturn arr[new_index];",
    "    long n = arr.size();\n    long r = rotations % n;\n    long i = index - r;\n    if (i < 0) {\n        i += n;\n    }\n    return arr[i];",
    "\tfor(long i = 0; i < rotations; i++) {\n\t\tlong start = ranges[i][0];\n\t\tlong end = ranges[i][1];\n\t\tlong temp = arr[start];\n\t\tfor(long j = start; j < end; j++) {\n\t\t\tarr[j] = arr[j+1];\n\t\t}\n\t\tarr[end] = temp;\n\t}\n\treturn arr[index];",
    "    long n = arr.size();\n    long i = 0;\n    while(i < rotations) {\n        long start = ranges[i][0];\n        long end = ranges[i][1];\n        std::reverse(arr.begin() + start, arr.begin() + end + 1);\n        i++;\n    }\n    return arr[index];",
    "    for (long i = 0; i < rotations; i++) {\n        long start = ranges[i][0];\n        long end = ranges[i][1];\n        long temp = arr[end];\n        for (long j = end; j > start; j--) {\n            arr[j] = arr[j-1];\n        }\n        arr[start] = temp;\n    }\n    return arr[index];",
    "    long n = arr.size();\n    long i = 0;\n    while(i < rotations) {\n        long start = ranges[i][0];\n        long end = ranges[i][1];\n        std::reverse(arr.begin() + start, arr.begin() + end + 1);\n        i++;\n    }\n    return arr[index];",
    "    // Write your code here\n    long n = arr.size();\n    long m = ranges.size();\n    long i = 0;\n    while(i < rotations) {\n        long l = ranges[i][0];\n        long r = ranges[i][1];\n        long d = r - l + 1;\n        std::vector<long> temp(d);\n        for(long j = 0; j < d; j++) {\n            temp[j] = arr[l + j];\n        }\n        for(long j = 0; j < d; j++) {\n            arr[l + j] = temp[(j + 1) % d];\n        }\n        i++;\n    }\n    return arr[index];",
    "    // Write your code here\n    long n = arr.size();\n    long i = 0;\n    while(i < rotations) {\n        long start = ranges[i][0];\n        long end = ranges[i][1];\n        std::reverse(arr.begin() + start, arr.begin() + end + 1);\n        i++;\n    }\n    return arr[index];",
    "    long n = arr.size();\n    long m = ranges.size();\n    long i = 0;\n    while(i < m) {\n        long l = ranges[i][0];\n        long r = ranges[i][1];\n        long d = r - l + 1;\n        long k = rotations % d;\n        if(index >= l && index <= r) {\n            if(index + k > r) {\n                index = l + (index + k - r - 1);\n            } else {\n                index = index + k;\n            }\n        }\n        i++;\n    }\n    return arr[index];",
    "    long n = arr.size();\n    long i = 0;\n    while(i < rotations) {\n        long start = ranges[i][0];\n        long end = ranges[i][1];\n        std::reverse(arr.begin()+start, arr.begin()+end+1);\n        i++;\n    }\n    return arr[index];",
    "    long n = arr.size();\n    long new_index = (index + rotations) % n;\n    return arr[new_index];",
    "    long n = arr.size();\n    long start = ranges[rotations][0];\n    long end = ranges[rotations][1];\n    long length = end - start + 1;\n    if (index < start) {\n        index = index + n - length;\n    }\n    else {\n        index = index - length;\n    }\n    return arr[index];",
    "    long n = arr.size();\n    long i = 0;\n    long j = ranges.size() - 1;\n    long mid = 0;\n    while(i <= j) {\n        mid = (i + j) / 2;\n        if(ranges[mid][0] <= rotations && ranges[mid][1] >= rotations) {\n            break;\n        }\n        if(ranges[mid][0] > rotations) {\n            j = mid - 1;\n        }\n        else {\n            i = mid + 1;\n        }\n    }\n    long new_index = (index + rotations) % n;\n    return arr[new_index];",
    "    // Write your code here\n    long n = arr.size();\n    long i;\n    long j;\n    long k;\n    long temp;\n    long count;\n    long m = ranges.size();\n    for(i=0;i<m;i++){\n        for(j=ranges[i][0];j<=ranges[i][1];j++){\n            temp = arr[j];\n            count = 0;\n            k = j;\n            while(count<rotations){\n                k = (k+1)%n;\n                count++;\n            }\n            arr[k] = temp;\n        }\n    }\n    return arr[index];",
    "    // Write your code here\n    long n = arr.size();\n    long m = ranges.size();\n    long i = 0;\n    while(i < rotations) {\n        long start = ranges[i%m][0];\n        long end = ranges[i%m][1];\n        long temp = arr[end];\n        for(long j = end; j > start; j--) {\n            arr[j] = arr[j-1];\n        }\n        arr[start] = temp;\n        i++;\n    }\n    return arr[index];",
    "    // Write your code here\n    long n = arr.size();\n    long i = 0;\n    while(i < rotations) {\n        long l = ranges[i][0];\n        long r = ranges[i][1];\n        long temp = arr[l];\n        for(long j = l; j < r; j++) {\n            arr[j] = arr[j+1];\n        }\n        arr[r] = temp;\n        i++;\n    }\n    return arr[index];",
    "    long n = arr.size();\n    long m = ranges.size();\n    long i, j;\n    for(i = 0; i < rotations; i++) {\n        for(j = 0; j < m; j++) {\n            if(index >= ranges[j][0] && index <= ranges[j][1]) {\n                index = ranges[j][1] - (index - ranges[j][0]);\n                break;\n            }\n        }\n    }\n    return arr[index];",
    "    long size = arr.size();\n    long range_size = ranges.size();\n    long start, end;\n    for(long i = 0; i < range_size; i++) {\n        start = ranges[i][0];\n        end = ranges[i][1];\n        if(index >= start && index <= end) {\n            index = (index - start + rotations) % size;\n            break;\n        }\n    }\n    return arr[index];",
    "    long n = arr.size();\n    long r = rotations % n;\n    long i = index - r;\n    if (i < 0) {\n        i = n + i;\n    }\n    return arr[i];",
    "    long n = arr.size();\n    long i = index;\n    long j = 0;\n    while(j < rotations) {\n        i = ranges[i][0];\n        j++;\n    }\n    return arr[i];",
    "    long n = arr.size();\n    long left = ranges[rotations][0];\n    long right = ranges[rotations][1];\n    long new_index = index - left;\n    if (new_index < 0) {\n        new_index = n + new_index;\n    }\n    return arr[new_index];",
    "    long n = arr.size();\n    long i = 0;\n    while(i < rotations) {\n        long l = ranges[i][0];\n        long r = ranges[i][1];\n        long temp = arr[l];\n        for(long j = l; j < r; j++) {\n            arr[j] = arr[j+1];\n        }\n        arr[r] = temp;\n        i++;\n    }\n    return arr[index];",
    "    // Write your code here\n    long n = arr.size();\n    long m = ranges.size();\n    long i, j;\n    for(i = 0; i < rotations; i++) {\n        for(j = 0; j < m; j++) {\n            long l = ranges[j][0];\n            long r = ranges[j][1];\n            long temp = arr[l];\n            for(long k = l; k < r; k++) {\n                arr[k] = arr[k+1];\n            }\n            arr[r] = temp;\n        }\n    }\n    return arr[index];",
    "    long size = arr.size();\n    long start = ranges[rotations][0];\n    long end = ranges[rotations][1];\n    long diff = end - start;\n    if (index < start) {\n        index = size - (start - index);\n    } else {\n        index = index - start;\n    }\n    return arr[index];",
    "    long n = arr.size();\n    long r = ranges.size();\n    long i = 0;\n    while(i < r) {\n        long l = ranges[i][0];\n        long r = ranges[i][1];\n        long d = ranges[i][2];\n        rotations -= d;\n        i++;\n    }\n    long rot = rotations % n;\n    long new_index = (index + rot) % n;\n    return arr[new_index];",
    "    // Write your code here\n    long n = arr.size();\n    long m = ranges.size();\n    long i,j;\n    long start,end;\n    for(i=0;i<m;i++)\n    {\n        start = ranges[i][0];\n        end = ranges[i][1];\n        for(j=start;j<=end;j++)\n        {\n            arr[j] = arr[j+1];\n        }\n        arr[end] = arr[start];\n    }\n    for(i=0;i<rotations;i++)\n    {\n        long temp = arr[n-1];\n        for(j=n-1;j>0;j--)\n        {\n            arr[j] = arr[j-1];\n        }\n        arr[0] = temp;\n    }\n    return arr[index];",
    "    long n = arr.size();\n    long m = ranges.size();\n    long i = 0;\n    while(i < m) {\n        long l = ranges[i][0];\n        long r = ranges[i][1];\n        if(l <= index && index <= r) {\n            long diff = r - l + 1;\n            long rot = rotations % diff;\n            long new_index = (index - l + rot) % diff + l;\n            return arr[new_index];\n        }\n        i++;\n    }\n    return arr[index];",
    "    long n = arr.size();\n    long m = ranges.size();\n    long i = 0;\n    while(i < rotations) {\n        for(long j = 0; j < m; j++) {\n            long start = ranges[j][0];\n            long end = ranges[j][1];\n            std::reverse(arr.begin() + start, arr.begin() + end + 1);\n        }\n        i++;\n    }\n    return arr[index];",
    "    for(long i = 0; i < rotations; i++) {\n        long start = ranges[i][0];\n        long end = ranges[i][1];\n        long temp = arr[end];\n        for(long j = end; j > start; j--) {\n            arr[j] = arr[j - 1];\n        }\n        arr[start] = temp;\n    }\n    return arr[index];",
    "    long n = arr.size();\n    long r = rotations % n;\n    long i = index - r;\n    if (i < 0) {\n        i = i + n;\n    }\n    return arr[i];",
    "    long n = arr.size();\n    long i = 0;\n    while(i < rotations) {\n        long start = ranges[i][0];\n        long end = ranges[i][1];\n        long temp = arr[end];\n        for(long j = end; j > start; j--) {\n            arr[j] = arr[j-1];\n        }\n        arr[start] = temp;\n        i++;\n    }\n    return arr[index];",
    "    // Write your code here\n    long n = arr.size();\n    long m = ranges.size();\n    long i, j;\n    for(i = 0; i < rotations; i++) {\n        for(j = 0; j < m; j++) {\n            long l = ranges[j][0];\n            long r = ranges[j][1];\n            long temp = arr[l];\n            long k;\n            for(k = l; k < r; k++) {\n                arr[k] = arr[k+1];\n            }\n            arr[r] = temp;\n        }\n    }\n    return arr[index];",
    "    for(int i=0;i<rotations;i++) {\n        long temp = arr[0];\n        for(int i=0;i<arr.size()-1;i++) {\n            arr[i] = arr[i+1];\n        }\n        arr[arr.size()-1] = temp;\n    }\n    return arr[index];",
    "    long size = arr.size();\n    long new_index = index;\n    for (long i = 0; i < rotations; i++) {\n        long start = ranges[i][0];\n        long end = ranges[i][1];\n        if (new_index >= start && new_index <= end) {\n            if (new_index == start) {\n                new_index = end;\n            } else {\n                new_index--;\n            }\n        }\n    }\n    return arr[new_index];",
    "    long size = arr.size();\n    long start = ranges[rotations][0];\n    long end = ranges[rotations][1];\n    long diff = end - start;\n    long new_index = index - diff;\n    if (new_index < 0) {\n        new_index = size + new_index;\n    }\n    return arr[new_index];",
    "    long n = arr.size();\n    long m = ranges.size();\n    long i, j;\n    for (i = 0; i < rotations; i++) {\n        for (j = 0; j < m; j++) {\n            long left = ranges[j][0];\n            long right = ranges[j][1];\n            long temp = arr[left];\n            for (long k = left; k < right; k++) {\n                arr[k] = arr[k + 1];\n            }\n            arr[right] = temp;\n        }\n    }\n    return arr[index];",
    "    long n = arr.size();\n    long new_index = (index + rotations) % n;\n    return arr[new_index];",
    "    long size = arr.size();\n    long range_size = ranges.size();\n    long i = 0;\n    while (i < range_size) {\n        long start = ranges[i][0];\n        long end = ranges[i][1];\n        long temp = arr[start];\n        for (long j = start; j < end; j++) {\n            arr[j] = arr[j+1];\n        }\n        arr[end] = temp;\n        i++;\n    }\n    return arr[index];",
    "    long n = arr.size();\n    long r = rotations % n;\n    long i = index - r;\n    if (i < 0) {\n        i = n + i;\n    }\n    return arr[i];",
    "    long n = arr.size();\n    long m = ranges.size();\n    long i, j;\n    for(i = 0; i < m; i++) {\n        long l = ranges[i][0];\n        long r = ranges[i][1];\n        long d = ranges[i][2];\n        for(j = l; j <= r; j++) {\n            arr[j] += d;\n        }\n    }\n    long new_index = (index + rotations) % n;\n    return arr[new_index];",
    "    long n = arr.size();\n    long r = rotations % n;\n    long i = index - r;\n    if (i < 0) {\n        i = n + i;\n    }\n    return arr[i];",
    "    long size = arr.size();\n    long start, end;\n    for (long i = 0; i < rotations; i++) {\n        start = ranges[i][0];\n        end = ranges[i][1];\n        if (index >= start && index <= end) {\n            if (index == start) {\n                index = end;\n            } else {\n                index--;\n            }\n        }\n    }\n    return arr[index];",
    "    long size = arr.size();\n    long start = ranges[rotations][0];\n    long end = ranges[rotations][1];\n    long diff = end - start + 1;\n    if (index < start) {\n        index = index + diff;\n    }\n    else if (index > end) {\n        index = index - diff;\n    }\n    return arr[index];",
    "    long n = arr.size();\n    long r = ranges.size();\n    long i = 0;\n    while(i < r) {\n        long l = ranges[i][0];\n        long r = ranges[i][1];\n        long d = ranges[i][2];\n        long j = l;\n        while(j <= r) {\n            arr[j] += d;\n            j++;\n        }\n        i++;\n    }\n    long k = 0;\n    while(k < rotations) {\n        long temp = arr[0];\n        long j = 0;\n        while(j < n-1) {\n            arr[j] = arr[j+1];\n            j++;\n        }\n        arr[n-1] = temp;\n        k++;\n    }\n    return arr[index];",
    "    long n = arr.size();\n    long m = ranges.size();\n    long i, j;\n    for(i = 0; i < rotations; i++) {\n        for(j = 0; j < m; j++) {\n            long start = ranges[j][0];\n            long end = ranges[j][1];\n            long temp = arr[end];\n            for(long k = end; k > start; k--) {\n                arr[k] = arr[k-1];\n            }\n            arr[start] = temp;\n        }\n    }\n    return arr[index];",
    "    for(long i = 0; i < rotations; i++) {\n        long temp = arr[ranges[i][0]];\n        for(long j = ranges[i][0]; j < ranges[i][1]; j++) {\n            arr[j] = arr[j+1];\n        }\n        arr[ranges[i][1]] = temp;\n    }\n    return arr[index];",
    "    for(long i = 0; i < rotations; i++) {\n        long start = ranges[i][0];\n        long end = ranges[i][1];\n        long temp = arr[end];\n        for(long j = end; j > start; j--) {\n            arr[j] = arr[j - 1];\n        }\n        arr[start] = temp;\n    }\n    return arr[index];",
    "    long n = arr.size();\n    long r = rotations % n;\n    long i = index - r;\n    if (i < 0) {\n        i += n;\n    }\n    return arr[i];",
    "    // Write your code here\n    long n = arr.size();\n    long m = ranges.size();\n    for(long i = 0; i < m; i++) {\n        long l = ranges[i][0];\n        long r = ranges[i][1];\n        std::vector<long> temp;\n        for(long j = l; j <= r; j++) {\n            temp.push_back(arr[j]);\n        }\n        std::reverse(temp.begin(), temp.end());\n        long k = 0;\n        for(long j = l; j <= r; j++) {\n            arr[j] = temp[k];\n            k++;\n        }\n    }\n    long ans = arr[index];\n    return ans;",
    "    long size = arr.size();\n    long start = ranges[rotations][0];\n    long end = ranges[rotations][1];\n    long diff = end - start;\n    long new_index = index - diff;\n    if (new_index < 0) {\n        new_index = size + new_index;\n    }\n    return arr[new_index];",
    "    long n = arr.size();\n    long start = ranges[rotations][0];\n    long end = ranges[rotations][1];\n    long new_index = (index + n - start) % n;\n    return arr[new_index];",
    "    long n = arr.size();\n    long new_index = (index + rotations) % n;\n    return arr[new_index];",
    "    long n = arr.size();\n    long range_size = ranges.size();\n    for (long i = 0; i < range_size; i++) {\n        long start = ranges[i][0];\n        long end = ranges[i][1];\n        if (start <= index && end >= index) {\n            long diff = end - index;\n            if (diff < rotations) {\n                rotations -= diff;\n                index = start - 1;\n            } else {\n                index += rotations;\n                rotations = 0;\n            }\n        }\n    }\n    index += rotations;\n    index = index % n;\n    return arr[index];",
    "    // Write your code here\n    long n = arr.size();\n    long m = ranges.size();\n    long i,j,k;\n    for(i=0;i<rotations;i++){\n        for(j=0;j<m;j++){\n            long left = ranges[j][0];\n            long right = ranges[j][1];\n            long temp = arr[left];\n            for(k=left;k<right;k++){\n                arr[k] = arr[k+1];\n            }\n            arr[right] = temp;\n        }\n    }\n    return arr[index];",
    "    long n = arr.size();\n    long m = ranges.size();\n    long i = 0;\n    while(i < rotations) {\n        long start = ranges[i][0];\n        long end = ranges[i][1];\n        long temp = arr[end];\n        for(long j = end; j > start; j--) {\n            arr[j] = arr[j-1];\n        }\n        arr[start] = temp;\n        i++;\n    }\n    return arr[index];",
    "    long n = arr.size();\n    for (auto range : ranges) {\n        long l = range[0];\n        long r = range[1];\n        long d = r - l + 1;\n        long rotations_per_range = rotations % d;\n        long new_l = l + rotations_per_range;\n        long new_r = r + rotations_per_range;\n        if (new_l > n) {\n            new_l -= n;\n        }\n        if (new_r > n) {\n            new_r -= n;\n        }\n        if (new_l <= index && new_r >= index) {\n            if (new_l <= new_r) {\n                return arr[index - new_l];\n            } else {\n                if (index <= new_r) {\n                    return arr[index];\n                } else {\n                    return arr[index - new_l];\n                }\n            }\n        }\n    }\n    return arr[index];",
    "    // Write your code here\n    long n = arr.size();\n    long m = ranges.size();\n    long i,j;\n    for(i=0;i<m;i++){\n        long l = ranges[i][0];\n        long r = ranges[i][1];\n        long d = r-l+1;\n        for(j=0;j<d/2;j++){\n            long temp = arr[l+j];\n            arr[l+j] = arr[r-j];\n            arr[r-j] = temp;\n        }\n    }\n    long k = rotations%n;\n    long ans = arr[(index+k)%n];\n    return ans;",
    "    // Write your code here\n    long n = arr.size();\n    long m = ranges.size();\n    long i,j,k;\n    for(i=0;i<m;i++){\n        long l = ranges[i][0];\n        long r = ranges[i][1];\n        long d = ranges[i][2];\n        for(j=l;j<=r;j++){\n            arr[j] = arr[j] + d;\n        }\n    }\n    long max = arr[0];\n    for(i=1;i<n;i++){\n        if(arr[i]>max){\n            max = arr[i];\n        }\n    }\n    long max_index = 0;\n    for(i=1;i<n;i++){\n        if(arr[i]==max){\n            max_index = i;\n            break;\n        }\n    }\n    long ans = (max_index + rotations)%n;\n    return arr[ans];",
    "    // Write your code here\n    long n = arr.size();\n    long m = ranges.size();\n    long i,j;\n    for(i=0;i<m;i++)\n    {\n        long start = ranges[i][0];\n        long end = ranges[i][1];\n        long temp = arr[start];\n        for(j=start;j<end;j++)\n        {\n            arr[j] = arr[j+1];\n        }\n        arr[end] = temp;\n    }\n    long ans = arr[index];\n    return ans;",
    "    // Write your code here\n    long n = arr.size();\n    long r = rotations % n;\n    long i = index - r;\n    if (i < 0) {\n        i = i + n;\n    }\n    return arr[i];",
    "    long n = arr.size();\n    long range_size = ranges.size();\n    long start, end;\n    for(long i=0; i<range_size; i++) {\n        start = ranges[i][0];\n        end = ranges[i][1];\n        if(index >= start && index <= end) {\n            index = (index - start + rotations) % n;\n            break;\n        }\n    }\n    return arr[index];",
    "    long n = arr.size();\n    long range_size = ranges.size();\n    long i = 0;\n    while(i < range_size) {\n        long start = ranges[i][0];\n        long end = ranges[i][1];\n        long temp = arr[start];\n        for(long j = start; j < end; j++) {\n            arr[j] = arr[j+1];\n        }\n        arr[end] = temp;\n        i++;\n    }\n    return arr[index];",
    "    // Write your code here\n    long n = arr.size();\n    long m = ranges.size();\n    long i, j, k;\n    long start, end;\n    for (i = 0; i < rotations; i++) {\n        for (j = 0; j < m; j++) {\n            start = ranges[j][0];\n            end = ranges[j][1];\n            if (start <= end) {\n                std::rotate(arr.begin() + start, arr.begin() + start + 1, arr.begin() + end + 1);\n            } else {\n                std::rotate(arr.begin() + start, arr.begin() + start + 1, arr.end());\n                std::rotate(arr.begin(), arr.begin() + end + 1, arr.end());\n            }\n        }\n    }\n    return arr[index];",
    "    long n = arr.size();\n    long i = 0;\n    while(i < ranges.size()) {\n        long start = ranges[i][0];\n        long end = ranges[i][1];\n        long temp = arr[end];\n        for(long j = end; j > start; j--) {\n            arr[j] = arr[j-1];\n        }\n        arr[start] = temp;\n        i++;\n    }\n    return arr[index];",
    "    // Write your code here\n    long n = arr.size();\n    long m = ranges.size();\n    for(long i=0;i<m;i++){\n        long l = ranges[i][0];\n        long r = ranges[i][1];\n        long d = r-l+1;\n        long temp = arr[l];\n        for(long j=l;j<r;j++){\n            arr[j] = arr[j+1];\n        }\n        arr[r] = temp;\n    }\n    return arr[index];",
    "    long size = arr.size();\n    long start, end, temp;\n    for (long i = 0; i < rotations; i++) {\n        start = ranges[i][0];\n        end = ranges[i][1];\n        temp = arr[end];\n        for (long j = end; j > start; j--) {\n            arr[j] = arr[j - 1];\n        }\n        arr[start] = temp;\n    }\n    return arr[index];",
    "    long n = arr.size();\n    long m = ranges.size();\n    long start = 0;\n    long end = n-1;\n    long mid = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long count = 0;\n    long index_of_element = 0;\n    long temp = 0;\n    long temp1 = 0;\n    long temp2 = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5 = 0;\n    long temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long temp9 = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n    long temp13 = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16 = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n    long temp20 = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23 = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n    long temp27 = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30 = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n    long temp34 = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37 = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n    long temp41 = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44 = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n    long temp48 = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51 = 0;\n    long temp52 = 0;\n   ",
    "    long n = arr.size();\n    long m = ranges.size();\n    long i = 0;\n    while(i < m) {\n        long l = ranges[i][0];\n        long r = ranges[i][1];\n        long d = r - l + 1;\n        long k = rotations % d;\n        if(index >= l && index <= r) {\n            if(index - l < k) {\n                index = r - k + 1 + (index - l);\n            }\n            else {\n                index = index - k;\n            }\n        }\n        i++;\n    }\n    return arr[index];",
    "    // Write your code here\n    long n = arr.size();\n    long m = ranges.size();\n    long i, j, k;\n    for(i = 0; i < rotations; i++) {\n        for(j = 0; j < m; j++) {\n            long start = ranges[j][0];\n            long end = ranges[j][1];\n            long temp = arr[end];\n            for(k = end; k > start; k--) {\n                arr[k] = arr[k-1];\n            }\n            arr[start] = temp;\n        }\n    }\n    return arr[index];",
    "    // Write your code here\n    long n = arr.size();\n    for(long i = 0; i < rotations; i++) {\n        long start = ranges[i][0];\n        long end = ranges[i][1];\n        std::vector<long> temp;\n        for(long j = start; j <= end; j++) {\n            temp.push_back(arr[j]);\n        }\n        for(long j = start; j <= end; j++) {\n            arr[j] = temp[end - j];\n        }\n    }\n    return arr[index];",
    "    long size = arr.size();\n    long range_size = ranges.size();\n    long start_index = 0;\n    long end_index = 0;\n    long temp_index = 0;\n    long temp_rotations = 0;\n    long temp_start_index = 0;\n    long temp_end_index = 0;\n    long temp_range_size = 0;\n    long temp_size = 0;\n    long temp_index_value = 0;\n    long temp_index_value_2 = 0;\n    long temp_index_value_3 = 0;\n    long temp_index_value_4 = 0;\n    long temp_index_value_5 = 0;\n    long temp_index_value_6 = 0;\n    long temp_index_value_7 = 0;\n    long temp_index_value_8 = 0;\n    long temp_index_value_9 = 0;\n    long temp_index_value_10 = 0;\n    long temp_index_value_11 = 0;\n    long temp_index_value_12 = 0;\n    long temp_index_value_13 = 0;\n    long temp_index_value_14 = 0;\n    long temp_index_value_15 = 0;\n    long temp_index_value_16 = 0;\n    long temp_index_value_17 = 0;\n    long temp_index_value_18 = 0;\n    long temp_index_value_19 = 0;\n    long temp_index_value_20 = 0;\n    long temp_index_value_21 = 0;\n    long temp_index_value_22 = 0;\n    long temp_index_value_23 = 0;\n    long temp_index_value_24 = 0;\n    long temp_index_value_25 = 0;\n    long temp_index_value_26 = 0;\n    long temp_index_value_27 = 0;\n    long temp_index_value_28 = 0;\n    long temp_index_value_29 = 0;\n    long temp_index_value_30 = 0;\n    long temp_index_value_31 = 0;\n    long temp_index_value_32 = 0",
    "    long n = arr.size();\n    long m = ranges.size();\n    long i = 0;\n    while(i < rotations) {\n        long start = ranges[i][0];\n        long end = ranges[i][1];\n        long temp = arr[end];\n        for(long j = end; j > start; j--) {\n            arr[j] = arr[j-1];\n        }\n        arr[start] = temp;\n        i++;\n    }\n    return arr[index];",
    "    // Write your code here\n    long n = arr.size();\n    long m = ranges.size();\n    long i,j,k;\n    for(i=0;i<m;i++){\n        long l = ranges[i][0];\n        long r = ranges[i][1];\n        long d = ranges[i][2];\n        for(j=l;j<=r;j++){\n            arr[j] += d;\n        }\n    }\n    for(i=0;i<rotations;i++){\n        long temp = arr[n-1];\n        for(j=n-1;j>=1;j--){\n            arr[j] = arr[j-1];\n        }\n        arr[0] = temp;\n    }\n    return arr[index];",
    "    for(long i = 0; i < rotations; i++) {\n        long start = ranges[i][0];\n        long end = ranges[i][1];\n        long temp = arr[end];\n        for(long j = end; j > start; j--) {\n            arr[j] = arr[j-1];\n        }\n        arr[start] = temp;\n    }\n    return arr[index];",
    "    long n = arr.size();\n    long m = ranges.size();\n    long i = 0;\n    while(i < m) {\n        long l = ranges[i][0];\n        long r = ranges[i][1];\n        long d = rotations % (r - l + 1);\n        if(index >= l && index <= r) {\n            if(index - l < d) {\n                index = r - d + (index - l) + 1;\n            }\n            else {\n                index = index - d;\n            }\n        }\n        i++;\n    }\n    return arr[index];",
    "    long size = arr.size();\n    long start = ranges[rotations][0];\n    long end = ranges[rotations][1];\n    long diff = end - start;\n    long new_index = index - start;\n    if (new_index < 0) {\n        new_index = size + new_index;\n    }\n    long new_index_after_rotation = new_index % diff;\n    long final_index = new_index_after_rotation + start;\n    if (final_index >= size) {\n        final_index = final_index - size;\n    }\n    return arr[final_index];",
    "    long n = arr.size();\n    long r = rotations % n;\n    long i = index - r;\n    if (i < 0) {\n        i = i + n;\n    }\n    return arr[i];",
    "    // Write your code here\n    long n = arr.size();\n    long m = ranges.size();\n    long i, j, k;\n    for(i = 0; i < rotations; i++) {\n        for(j = 0; j < m; j++) {\n            long l = ranges[j][0];\n            long r = ranges[j][1];\n            long temp = arr[l];\n            for(k = l; k < r; k++) {\n                arr[k] = arr[k+1];\n            }\n            arr[r] = temp;\n        }\n    }\n    return arr[index];",
    "    long size = arr.size();\n    for(long i = 0; i < rotations; i++) {\n        long start = ranges[i][0];\n        long end = ranges[i][1];\n        std::vector<long> temp;\n        for(long j = start; j <= end; j++) {\n            temp.push_back(arr[j]);\n        }\n        for(long j = start; j <= end; j++) {\n            arr[j] = temp[end - j];\n        }\n    }\n    return arr[index];",
    "\t// Write your code here\n\tfor (int i = 0; i < rotations; i++) {\n\t\tlong temp = arr[0];\n\t\tfor (int j = 0; j < arr.size() - 1; j++) {\n\t\t\tarr[j] = arr[j + 1];\n\t\t}\n\t\tarr[arr.size() - 1] = temp;\n\t}\n\treturn arr[index];",
    "    long size = arr.size();\n    long new_index = (index + rotations) % size;\n    return arr[new_index];",
    "    long n = arr.size();\n    long start, end;\n    for (long i = 0; i < ranges.size(); i++) {\n        start = ranges[i][0];\n        end = ranges[i][1];\n        if (start <= index && index <= end) {\n            index = (index - start + rotations) % n;\n            break;\n        }\n    }\n    return arr[index];",
    "    long n = arr.size();\n    long r = rotations % n;\n    long i = index - r;\n    if (i < 0) {\n        i = n + i;\n    }\n    return arr[i];",
    "    long n = arr.size();\n    long i = 0;\n    for (i = 0; i < ranges.size(); i++) {\n        if (index >= ranges[i][0] && index <= ranges[i][1]) {\n            break;\n        }\n    }\n    long range = ranges[i][1] - ranges[i][0] + 1;\n    long offset = rotations % range;\n    long new_index = ranges[i][0] + offset;\n    if (new_index > ranges[i][1]) {\n        new_index = new_index - range;\n    }\n    return arr[new_index];",
    "    long n = arr.size();\n    long i = rotations % n;\n    long j = index % n;\n    long k = ranges[i][0] % n;\n    long l = ranges[i][1] % n;\n    long m = (j - k + n) % n;\n    long p = (l - k + n) % n;\n    long q = (m + p) % n;\n    return arr[q];",
    "    long n = arr.size();\n    long r = rotations % n;\n    long i = index - r;\n    if (i < 0) {\n        i += n;\n    }\n    return arr[i];",
    "    long size = arr.size();\n    long start, end;\n    for(long i = 0; i < rotations; i++) {\n        start = ranges[i][0];\n        end = ranges[i][1];\n        std::rotate(arr.begin() + start, arr.begin() + end, arr.begin() + end + 1);\n    }\n    return arr[index];",
    "    // Write your code here\n    long n = arr.size();\n    long m = ranges.size();\n    long i, j, k;\n    for(i = 0; i < rotations; i++) {\n        for(j = 0; j < m; j++) {\n            long l = ranges[j][0];\n            long r = ranges[j][1];\n            long temp = arr[l];\n            for(k = l; k < r; k++) {\n                arr[k] = arr[k+1];\n            }\n            arr[r] = temp;\n        }\n    }\n    return arr[index];",
    "    long n = arr.size();\n    long start = ranges[rotations][0];\n    long end = ranges[rotations][1];\n    long diff = end - start + 1;\n    long new_index = (index + diff) % n;\n    return arr[new_index];",
    "    // Write your code here\n    long n = arr.size();\n    long i = 0;\n    while(i < rotations) {\n        long start = ranges[i][0];\n        long end = ranges[i][1];\n        long temp = arr[end];\n        for(long j = end; j > start; j--) {\n            arr[j] = arr[j-1];\n        }\n        arr[start] = temp;\n        i++;\n    }\n    return arr[index];",
    "    long n = arr.size();\n    long m = ranges.size();\n    long i = 0;\n    while(i < rotations) {\n        long start = ranges[i][0];\n        long end = ranges[i][1];\n        std::vector<long> temp;\n        for(long j = start; j <= end; j++) {\n            temp.push_back(arr[j]);\n        }\n        long k = 0;\n        for(long j = start; j <= end; j++) {\n            arr[j] = temp[k];\n            k++;\n        }\n        i++;\n    }\n    return arr[index];",
    "    // Write your code here\n    long n = arr.size();\n    long r = rotations % n;\n    long i = index - r;\n    if(i < 0) {\n        i = i + n;\n    }\n    return arr[i];",
    "    long n = arr.size();\n    long i = 0;\n    while(i < rotations) {\n        long start = ranges[i][0];\n        long end = ranges[i][1];\n        long temp = arr[start];\n        for(long j = start; j < end; j++) {\n            arr[j] = arr[j+1];\n        }\n        arr[end] = temp;\n        i++;\n    }\n    return arr[index];",
    "    long n = arr.size();\n    long i = 0;\n    while (i < rotations) {\n        long start = ranges[i][0];\n        long end = ranges[i][1];\n        long temp = arr[end];\n        for (long j = end; j > start; j--) {\n            arr[j] = arr[j - 1];\n        }\n        arr[start] = temp;\n        i++;\n    }\n    return arr[index];",
    "    long n = arr.size();\n    long rotations_per_index = rotations % n;\n    long index_after_rotation = (index + rotations_per_index) % n;\n    return arr[index_after_rotation];",
    "    long n = arr.size();\n    long new_index = (index + rotations) % n;\n    return arr[new_index];",
    "    // Write your code here\n    long n = arr.size();\n    long m = ranges.size();\n    long count = 0;\n    for(long i = 0; i < m; i++) {\n        if(ranges[i][0] <= index && ranges[i][1] >= index) {\n            count++;\n        }\n    }\n    long rot = rotations % n;\n    long new_index = (index + rot) % n;\n    if(count % 2 == 0) {\n        return arr[new_index];\n    }\n    else {\n        return arr[n - new_index - 1];\n    }",
    "    // Write your code here\n    long n = arr.size();\n    long start, end;\n    for(long i = 0; i < rotations; i++) {\n        start = ranges[i][0];\n        end = ranges[i][1];\n        std::vector<long> temp;\n        for(long j = start; j <= end; j++) {\n            temp.push_back(arr[j]);\n        }\n        for(long j = start; j <= end; j++) {\n            arr[j] = temp[(j - start + 1) % temp.size()];\n        }\n    }\n    return arr[index];",
    "    long n = arr.size();\n    long m = ranges.size();\n    for (long i = 0; i < rotations; i++) {\n        long start = ranges[i % m][0];\n        long end = ranges[i % m][1];\n        long temp = arr[end];\n        for (long j = end; j > start; j--) {\n            arr[j] = arr[j - 1];\n        }\n        arr[start] = temp;\n    }\n    return arr[index];",
    "    long n = arr.size();\n    long i = 0;\n    while(i < rotations) {\n        long start = ranges[i][0];\n        long end = ranges[i][1];\n        std::reverse(arr.begin() + start, arr.begin() + end + 1);\n        i++;\n    }\n    return arr[index];",
    "    // Write your code here\n    long n = arr.size();\n    long i;\n    for(i=0;i<rotations;i++){\n        long temp = arr[n-1];\n        for(long j=n-1;j>0;j--){\n            arr[j] = arr[j-1];\n        }\n        arr[0] = temp;\n    }\n    return arr[index];",
    "    long size = arr.size();\n    long range_size = ranges.size();\n    long i = 0;\n    while(i < range_size) {\n        long left = ranges[i][0];\n        long right = ranges[i][1];\n        long temp = arr[left];\n        for(long j = left; j < right; j++) {\n            arr[j] = arr[j+1];\n        }\n        arr[right] = temp;\n        i++;\n    }\n    return arr[index];",
    "    // Write your code here\n    for(long i=0;i<rotations;i++){\n        long temp = arr[0];\n        for(long j=0;j<arr.size()-1;j++){\n            arr[j] = arr[j+1];\n        }\n        arr[arr.size()-1] = temp;\n    }\n    return arr[index];",
    "    // Write your code here\n    long n = arr.size();\n    long m = ranges.size();\n    long i, j;\n    for(i = 0; i < rotations; i++) {\n        for(j = 0; j < m; j++) {\n            long start = ranges[j][0];\n            long end = ranges[j][1];\n            long temp = arr[end];\n            for(long k = end; k > start; k--) {\n                arr[k] = arr[k - 1];\n            }\n            arr[start] = temp;\n        }\n    }\n    return arr[index];",
    "    long size = arr.size();\n    long start, end;\n    for (long i = 0; i < rotations; i++) {\n        start = ranges[i][0];\n        end = ranges[i][1];\n        if (index >= start && index <= end) {\n            if (index == start) {\n                index = end;\n            } else {\n                index--;\n            }\n        }\n    }\n    return arr[index];",
    "    // Write your code here\n    long n = arr.size();\n    long r = rotations;\n    long i = index;\n    long count = 0;\n    long j = 0;\n    long k = 0;\n    long temp;\n    long temp2;\n    long temp3;\n    long temp4;\n    long temp5;\n    long temp6;\n    long temp7;\n    long temp8;\n    long temp9;\n    long temp10;\n    long temp11;\n    long temp12;\n    long temp13;\n    long temp14;\n    long temp15;\n    long temp16;\n    long temp17;\n    long temp18;\n    long temp19;\n    long temp20;\n    long temp21;\n    long temp22;\n    long temp23;\n    long temp24;\n    long temp25;\n    long temp26;\n    long temp27;\n    long temp28;\n    long temp29;\n    long temp30;\n    long temp31;\n    long temp32;\n    long temp33;\n    long temp34;\n    long temp35;\n    long temp36;\n    long temp37;\n    long temp38;\n    long temp39;\n    long temp40;\n    long temp41;\n    long temp42;\n    long temp43;\n    long temp44;\n    long temp45;\n    long temp46;\n    long temp47;\n    long temp48;\n    long temp49;\n    long temp50;\n    long temp51;\n    long temp52;\n    long temp53;\n    long temp54;\n    long temp55;\n    long temp56;\n    long temp57;\n    long temp58;\n    long temp59;\n    long temp60;\n    long temp61;\n    long temp62;\n    long temp63;\n    long temp64;\n    long temp65;\n    long temp66;\n    long temp67;\n    long temp68;\n    long temp69;\n    long temp70;\n    long temp71;\n    long temp72;\n    long temp73;\n    long temp74;\n    long temp75;\n    long temp76;\n    long temp77",
    "    long n = arr.size();\n    long r = rotations % n;\n    long i = index - r;\n    if (i < 0) {\n        i = i + n;\n    }\n    return arr[i];",
    "    long size = arr.size();\n    long start = ranges[rotations][0];\n    long end = ranges[rotations][1];\n    long length = end - start + 1;\n    long new_index = (index + length) % size;\n    return arr[new_index];",
    "    // Write your code here\n    for(int i=0;i<rotations;i++){\n        long temp = arr[0];\n        for(int j=0;j<arr.size()-1;j++){\n            arr[j]=arr[j+1];\n        }\n        arr[arr.size()-1]=temp;\n    }\n    return arr[index];",
    "    long size = arr.size();\n    long start = ranges[rotations][0];\n    long end = ranges[rotations][1];\n    if (index >= start && index <= end) {\n        return arr[index];\n    }\n    else if (index < start) {\n        return arr[index + size - (end - start + 1)];\n    }\n    else {\n        return arr[index - (end - start + 1)];\n    }",
    "    long n = arr.size();\n    long r = rotations % n;\n    long i = index - r;\n    if (i < 0) {\n        i = i + n;\n    }\n    return arr[i];",
    "    long n = arr.size();\n    long m = ranges.size();\n    long i = 0;\n    while(rotations > 0) {\n        if(i < m && ranges[i][0] <= rotations) {\n            long r = ranges[i][0];\n            long l = ranges[i][1];\n            long temp = arr[l];\n            for(long j = l; j > r; j--) {\n                arr[j] = arr[j-1];\n            }\n            arr[r] = temp;\n            rotations -= r;\n            i++;\n        } else {\n            long r = rotations;\n            long temp = arr[n-1];\n            for(long j = n-1; j > r; j--) {\n                arr[j] = arr[j-1];\n            }\n            arr[r] = temp;\n            rotations -= r;\n        }\n    }\n    return arr[index];",
    "    for(long i=0; i<ranges.size(); i++) {\n        long start = ranges[i][0];\n        long end = ranges[i][1];\n        long temp = arr[start];\n        for(long j=start; j<end; j++) {\n            arr[j] = arr[j+1];\n        }\n        arr[end] = temp;\n    }\n    return arr[index];",
    "    long n = arr.size();\n    long r = rotations % n;\n    long i = index - r;\n    if (i < 0) {\n        i += n;\n    }\n    return arr[i];",
    "    long n = arr.size();\n    long m = ranges.size();\n    long start, end;\n    for (long i = 0; i < m; i++) {\n        start = ranges[i][0];\n        end = ranges[i][1];\n        if (start <= index && end >= index) {\n            rotations = rotations % (end - start + 1);\n            if (rotations > 0) {\n                if (index - rotations >= start) {\n                    index = index - rotations;\n                } else {\n                    index = end - (rotations - (index - start)) + 1;\n                }\n            }\n        }\n    }\n    return arr[index];",
    "    long n = arr.size();\n    long m = ranges.size();\n    long start = 0;\n    long end = n - 1;\n    long mid = 0;\n    long ans = 0;\n    while (start <= end) {\n        mid = (start + end) / 2;\n        if (mid == index) {\n            ans = arr[mid];\n            break;\n        }\n        if (mid < index) {\n            start = mid + 1;\n        }\n        else {\n            end = mid - 1;\n        }\n    }\n    for (long i = 0; i < m; i++) {\n        if (ranges[i][0] <= index && ranges[i][1] >= index) {\n            rotations = rotations % (ranges[i][1] - ranges[i][0] + 1);\n            if (rotations == 0) {\n                return ans;\n            }\n            else {\n                if (index - rotations >= ranges[i][0]) {\n                    return arr[index - rotations];\n                }\n                else {\n                    return arr[ranges[i][1] - (rotations - (index - ranges[i][0])) + 1];\n                }\n            }\n        }\n    }\n    return -1;",
    "    for(int i = 0; i < rotations; i++) {\n        long start = ranges[i][0];\n        long end = ranges[i][1];\n        long temp = arr[end];\n        for(long j = end; j > start; j--) {\n            arr[j] = arr[j-1];\n        }\n        arr[start] = temp;\n    }\n    return arr[index];",
    "    long n = arr.size();\n    long range_size = ranges.size();\n    long i = 0;\n    while(i < range_size) {\n        long l = ranges[i][0];\n        long r = ranges[i][1];\n        long d = rotations / range_size;\n        long m = rotations % range_size;\n        if(index >= l && index <= r) {\n            if(m == 0) {\n                return arr[(index - l + d) % (r - l + 1) + l];\n            }\n            else {\n                if(index + d <= r) {\n                    return arr[index + d];\n                }\n                else {\n                    return arr[(index + d) % (r - l + 1) + l];\n                }\n            }\n        }\n        i++;\n    }\n    return arr[index];",
    "    long n = arr.size();\n    long start, end;\n    long new_index;\n    for (long i = 0; i < rotations; i++) {\n        start = ranges[i][0];\n        end = ranges[i][1];\n        if (index >= start && index <= end) {\n            new_index = end - (index - start);\n        } else {\n            new_index = index;\n        }\n        index = new_index;\n    }\n    return arr[index];",
    "\t// Write your code here\n\tfor (long i = 0; i < rotations; i++) {\n\t\tlong start = ranges[i][0];\n\t\tlong end = ranges[i][1];\n\t\tlong temp = arr[end];\n\t\tfor (long j = end; j > start; j--) {\n\t\t\tarr[j] = arr[j - 1];\n\t\t}\n\t\tarr[start] = temp;\n\t}\n\treturn arr[index];",
    "    long n = arr.size();\n    long r = rotations % n;\n    long i = index - r;\n    if (i < 0) {\n        i = n + i;\n    }\n    return arr[i];",
    "    long n = arr.size();\n    long new_index = (index + rotations) % n;\n    return arr[new_index];",
    "    // Write your code here\n    long n = arr.size();\n    long m = ranges.size();\n    long i,j;\n    for(i=0;i<m;i++)\n    {\n        long l = ranges[i][0];\n        long r = ranges[i][1];\n        long d = ranges[i][2];\n        for(j=l;j<=r;j++)\n        {\n            arr[j]+=d;\n        }\n    }\n    long k = rotations%n;\n    long ans = arr[(index+k)%n];\n    return ans;",
    "    // Write your code here\n    long n = arr.size();\n    long m = ranges.size();\n    long sum = 0;\n    for(long i=0;i<m;i++)\n    {\n        sum = sum + (ranges[i][1] - ranges[i][0] + 1);\n    }\n    long rot = rotations % sum;\n    long i = 0;\n    while(rot > 0)\n    {\n        if(rot > ranges[i][1] - ranges[i][0] + 1)\n        {\n            rot = rot - (ranges[i][1] - ranges[i][0] + 1);\n            i++;\n        }\n        else\n        {\n            long temp = ranges[i][1] - rot + 1;\n            ranges[i][1] = ranges[i][0] + rot - 1;\n            ranges[i][0] = temp;\n            rot = 0;\n        }\n    }\n    long ans = 0;\n    for(long i=0;i<m;i++)\n    {\n        if(index >= ranges[i][0] && index <= ranges[i][1])\n        {\n            ans = index - ranges[i][0] + ranges[i][1] - ranges[i][0] + 1;\n            break;\n        }\n        else\n        {\n            ans = ans + (ranges[i][1] - ranges[i][0] + 1);\n        }\n    }\n    return arr[ans];",
    "    long n = arr.size();\n    long i = 0;\n    while (i < rotations) {\n        long start = ranges[i][0];\n        long end = ranges[i][1];\n        long temp = arr[end];\n        for (long j = end; j > start; j--) {\n            arr[j] = arr[j-1];\n        }\n        arr[start] = temp;\n        i++;\n    }\n    return arr[index];",
    "  long n = arr.size();\n  long rotations_per_index = rotations % n;\n  long index_after_rotation = (index + rotations_per_index) % n;\n  return arr[index_after_rotation];",
    "    long n = arr.size();\n    long start = ranges[rotations][0];\n    long end = ranges[rotations][1];\n    long length = end - start + 1;\n    long new_index = (index + length) % n;\n    return arr[new_index];",
    "    // Write your code here\n    long n = arr.size();\n    long i = 0;\n    while(i < rotations){\n        long start = ranges[i][0];\n        long end = ranges[i][1];\n        std::reverse(arr.begin()+start, arr.begin()+end+1);\n        i++;\n    }\n    return arr[index];",
    "    long n = arr.size();\n    long r = rotations % n;\n    long i = index - r;\n    if (i < 0) {\n        i = i + n;\n    }\n    return arr[i];",
    "    long size = arr.size();\n    long start, end;\n    for(long i = 0; i < rotations; i++) {\n        start = ranges[i][0];\n        end = ranges[i][1];\n        if(index >= start && index <= end) {\n            if(index == start) {\n                index = end;\n            } else {\n                index--;\n            }\n        }\n    }\n    return arr[index];",
    "    // Write your code here\n    long n = arr.size();\n    long m = ranges.size();\n    long i, j, k;\n    for(i = 0; i < rotations; i++) {\n        for(j = 0; j < m; j++) {\n            long start = ranges[j][0];\n            long end = ranges[j][1];\n            long temp = arr[end];\n            for(k = end; k > start; k--) {\n                arr[k] = arr[k-1];\n            }\n            arr[start] = temp;\n        }\n    }\n    return arr[index];",
    "    long n = arr.size();\n    long i = 0;\n    while(i < rotations) {\n        long start = ranges[i][0];\n        long end = ranges[i][1];\n        std::vector<long> temp;\n        for(long j = start; j <= end; j++) {\n            temp.push_back(arr[j]);\n        }\n        long k = end;\n        for(long j = temp.size() - 1; j >= 0; j--) {\n            arr[k] = temp[j];\n            k--;\n        }\n        i++;\n    }\n    return arr[index];",
    "    long n = arr.size();\n    long m = ranges.size();\n    long i = 0;\n    while(i < rotations) {\n        long start = ranges[i][0];\n        long end = ranges[i][1];\n        long temp = arr[end];\n        for(long j = end; j > start; j--) {\n            arr[j] = arr[j-1];\n        }\n        arr[start] = temp;\n        i++;\n    }\n    return arr[index];",
    "    long n = arr.size();\n    long new_index = (index + rotations) % n;\n    return arr[new_index];",
    "    long n = arr.size();\n    long r = rotations % n;\n    long i = index - r;\n    if (i < 0) {\n        i = n + i;\n    }\n    return arr[i];",
    "    long n = arr.size();\n    long rotations_performed = 0;\n    for(long i = 0; i < ranges.size(); i++) {\n        long start = ranges[i][0];\n        long end = ranges[i][1];\n        long rotations_to_perform = rotations - rotations_performed;\n        if(rotations_to_perform > 0) {\n            long rotations_to_perform_in_this_range = rotations_to_perform % (end - start + 1);\n            if(rotations_to_perform_in_this_range > 0) {\n                long temp = arr[end];\n                for(long j = end; j > start; j--) {\n                    arr[j] = arr[j - 1];\n                }\n                arr[start] = temp;\n            }\n            rotations_performed += rotations_to_perform_in_this_range;\n        }\n    }\n    return arr[index];",
    "    long n = arr.size();\n    long start, end;\n    for (long i = 0; i < ranges.size(); i++) {\n        start = ranges[i][0];\n        end = ranges[i][1];\n        if (start <= index && end >= index) {\n            if (index == start) {\n                index = end - rotations % (end - start + 1);\n            } else {\n                index = index - rotations % (end - start + 1);\n            }\n        }\n    }\n    return arr[index];",
    "    long n = arr.size();\n    long r = rotations % n;\n    long i = index - r;\n    if (i < 0) {\n        i += n;\n    }\n    return arr[i];",
    "    long n = arr.size();\n    long range_size = ranges.size();\n    long start, end;\n    for (long i = 0; i < range_size; i++) {\n        start = ranges[i][0];\n        end = ranges[i][1];\n        if (start <= index && index <= end) {\n            rotations = rotations % (end - start + 1);\n            index = (index + rotations) % n;\n            break;\n        }\n    }\n    return arr[index];",
    "    long n = arr.size();\n    long i = index;\n    for (long j = 0; j < rotations; j++) {\n        i = ranges[i][0];\n    }\n    return arr[i];",
    "    long n = arr.size();\n    long m = ranges.size();\n    long temp;\n    for(long i=0; i<m; i++) {\n        long l = ranges[i][0];\n        long r = ranges[i][1];\n        if(l<=r) {\n            temp = arr[r];\n            for(long j=r; j>l; j--) {\n                arr[j] = arr[j-1];\n            }\n            arr[l] = temp;\n        }\n        else {\n            temp = arr[r];\n            for(long j=r; j<l; j++) {\n                arr[j] = arr[j+1];\n            }\n            arr[l] = temp;\n        }\n    }\n    return arr[index];",
    "    long size = arr.size();\n    long start = ranges[rotations][0];\n    long end = ranges[rotations][1];\n    long diff = end - start;\n    long new_index = (index + diff) % size;\n    return arr[new_index];",
    "    long n = arr.size();\n    long i = 0;\n    while (i < rotations) {\n        long start = ranges[i][0];\n        long end = ranges[i][1];\n        long temp = arr[end];\n        for (long j = end; j > start; j--) {\n            arr[j] = arr[j-1];\n        }\n        arr[start] = temp;\n        i++;\n    }\n    return arr[index];",
    "    // Write your code here\n    long n = arr.size();\n    long m = ranges.size();\n    long i,j;\n    for(i=0;i<rotations;i++)\n    {\n        for(j=0;j<m;j++)\n        {\n            long l = ranges[j][0];\n            long r = ranges[j][1];\n            long temp = arr[l];\n            for(long k=l;k<r;k++)\n            {\n                arr[k] = arr[k+1];\n            }\n            arr[r] = temp;\n        }\n    }\n    return arr[index];",
    "    long n = arr.size();\n    long i = 0;\n    while(i < rotations) {\n        long start = ranges[i][0];\n        long end = ranges[i][1];\n        long temp = arr[end];\n        for(long j = end; j > start; j--) {\n            arr[j] = arr[j-1];\n        }\n        arr[start] = temp;\n        i++;\n    }\n    return arr[index];",
    "    // Write your code here\n    long n = arr.size();\n    long m = ranges.size();\n    long r = rotations % n;\n    long i = index % n;\n    long j = (i + r) % n;\n    long k = 0;\n    while(k < m) {\n        if(ranges[k][0] <= j && ranges[k][1] >= j) {\n            j = (j + ranges[k][2]) % n;\n            k = 0;\n        }\n        else {\n            k++;\n        }\n    }\n    return arr[j];",
    "    long n = arr.size();\n    long mod = rotations % n;\n    long i = index - mod;\n    if (i < 0) {\n        i += n;\n    }\n    return arr[i];",
    "    long size = arr.size();\n    long i = 0;\n    while(i < rotations) {\n        long start = ranges[i][0];\n        long end = ranges[i][1];\n        std::reverse(arr.begin() + start, arr.begin() + end + 1);\n        i++;\n    }\n    return arr[index];",
    "    long size = arr.size();\n    long range_size = ranges.size();\n    long start, end, temp;\n    for (long i = 0; i < range_size; i++) {\n        start = ranges[i][0];\n        end = ranges[i][1];\n        for (long j = 0; j < rotations; j++) {\n            temp = arr[end];\n            for (long k = end; k > start; k--) {\n                arr[k] = arr[k - 1];\n            }\n            arr[start] = temp;\n        }\n    }\n    return arr[index];",
    "    long n = arr.size();\n    long start = ranges[rotations][0];\n    long end = ranges[rotations][1];\n    if (index >= start && index <= end) {\n        return arr[index];\n    }\n    else if (index < start) {\n        return arr[index + n - (end - start + 1)];\n    }\n    else {\n        return arr[index - (end - start + 1)];\n    }",
    "    long n = arr.size();\n    long i = 0;\n    while(i < rotations) {\n        long start = ranges[i][0];\n        long end = ranges[i][1];\n        long temp = arr[end];\n        for(long j = end; j > start; j--) {\n            arr[j] = arr[j-1];\n        }\n        arr[start] = temp;\n        i++;\n    }\n    return arr[index];",
    "\tfor (long i = 0; i < rotations; i++) {\n\t\tlong start = ranges[i][0];\n\t\tlong end = ranges[i][1];\n\t\tlong temp = arr[start];\n\t\tfor (long j = start; j < end; j++) {\n\t\t\tarr[j] = arr[j + 1];\n\t\t}\n\t\tarr[end] = temp;\n\t}\n\treturn arr[index];",
    "    long n = arr.size();\n    long m = ranges.size();\n    long start, end;\n    for(long i = 0; i < m; i++) {\n        start = ranges[i][0];\n        end = ranges[i][1];\n        if(start <= index && end >= index) {\n            rotations = rotations % (end - start + 1);\n            if(index - rotations < start) {\n                index = index - rotations + (end - start + 1);\n            }\n            else {\n                index = index - rotations;\n            }\n        }\n    }\n    return arr[index];",
    "    // Write your code here\n    long n = arr.size();\n    long m = ranges.size();\n    long i = 0;\n    while (i < rotations) {\n        long start = ranges[i][0];\n        long end = ranges[i][1];\n        std::vector<long> temp;\n        for (long j = start; j <= end; j++) {\n            temp.push_back(arr[j]);\n        }\n        long k = 0;\n        for (long j = start; j <= end; j++) {\n            arr[j] = temp[k];\n            k++;\n        }\n        i++;\n    }\n    return arr[index];",
    "    long n = arr.size();\n    long i = 0;\n    while(i < rotations) {\n        long start = ranges[i][0];\n        long end = ranges[i][1];\n        long temp = arr[end];\n        for(long j = end; j > start; j--) {\n            arr[j] = arr[j-1];\n        }\n        arr[start] = temp;\n        i++;\n    }\n    return arr[index];",
    "    // Write your code here\n    long n = arr.size();\n    long m = ranges.size();\n    long i = 0;\n    while(i < m) {\n        long l = ranges[i][0];\n        long r = ranges[i][1];\n        long d = r - l + 1;\n        rotations = rotations % d;\n        if(rotations < 0) {\n            rotations = rotations + d;\n        }\n        if(index >= l && index <= r) {\n            if(index + rotations <= r) {\n                index = index + rotations;\n            }\n            else {\n                index = l + (index + rotations) % (r + 1);\n            }\n            break;\n        }\n        i++;\n    }\n    return arr[index];",
    "    // Write your code here\n    long n = arr.size();\n    for(long i=0; i<rotations; i++) {\n        long start = ranges[i][0];\n        long end = ranges[i][1];\n        long temp = arr[end];\n        for(long j=end; j>start; j--) {\n            arr[j] = arr[j-1];\n        }\n        arr[start] = temp;\n    }\n    return arr[index];",
    "    // Write your code here\n    long n = arr.size();\n    long m = ranges.size();\n    long start, end;\n    for(long i=0;i<m;i++){\n        start = ranges[i][0];\n        end = ranges[i][1];\n        if(start<=index && end>=index){\n            index = (index-start+rotations)%(end-start+1) + start;\n        }\n    }\n    return arr[index];",
    "    // Write your code here\n    long n = arr.size();\n    long m = ranges.size();\n    std::vector<long> temp(n,0);\n    for(long i=0;i<n;i++)\n        temp[i] = arr[i];\n    for(long i=0;i<m;i++)\n    {\n        long l = ranges[i][0];\n        long r = ranges[i][1];\n        for(long j=l;j<=r;j++)\n        {\n            temp[j] = arr[(j+1)%n];\n        }\n    }\n    return temp[index];",
    "    for(long i = 0; i < rotations; i++) {\n        long start = ranges[i][0];\n        long end = ranges[i][1];\n        long temp = arr[start];\n        for(long j = start; j < end; j++) {\n            arr[j] = arr[j+1];\n        }\n        arr[end] = temp;\n    }\n    return arr[index];",
    "    long n = arr.size();\n    long r = rotations % n;\n    long i = index - r;\n    if (i < 0) {\n        i += n;\n    }\n    return arr[i];",
    "    long size = arr.size();\n    long new_index = (index + rotations) % size;\n    return arr[new_index];",
    "    for(long i = 0; i < rotations; i++) {\n        long start = ranges[i][0];\n        long end = ranges[i][1];\n        long temp = arr[end];\n        for(long j = end; j > start; j--) {\n            arr[j] = arr[j-1];\n        }\n        arr[start] = temp;\n    }\n    return arr[index];",
    "    // Write your code here\n    long n = arr.size();\n    long m = ranges.size();\n    long i = 0;\n    while(i < m) {\n        long l = ranges[i][0];\n        long r = ranges[i][1];\n        long d = r - l + 1;\n        long r1 = rotations % d;\n        if(index >= l && index <= r) {\n            if(index + r1 <= r) {\n                index = index + r1;\n            } else {\n                index = l + (index + r1 - r - 1);\n            }\n        }\n        i++;\n    }\n    return arr[index];",
    "    long n = arr.size();\n    long r = rotations % n;\n    long i = index - r;\n    if (i < 0) {\n        i = n + i;\n    }\n    return arr[i];",
    "    // Write your code here\n    long n = arr.size();\n    long start, end;\n    for(long i = 0; i < rotations; i++) {\n        start = ranges[i][0];\n        end = ranges[i][1];\n        std::rotate(arr.begin() + start, arr.begin() + end, arr.begin() + end + 1);\n    }\n    return arr[index];",
    "    long n = arr.size();\n    for (long i = 0; i < rotations; i++) {\n        long start = ranges[i][0];\n        long end = ranges[i][1];\n        long temp = arr[end];\n        for (long j = end; j > start; j--) {\n            arr[j] = arr[j - 1];\n        }\n        arr[start] = temp;\n    }\n    return arr[index];",
    "    long n = arr.size();\n    long r = rotations % n;\n    long i = index;\n    long j = 0;\n    while(j < ranges.size()) {\n        if(i >= ranges[j][0] && i <= ranges[j][1]) {\n            i = ranges[j][1] - (i - ranges[j][0]);\n        }\n        j++;\n    }\n    i = (i + r) % n;\n    return arr[i];",
    "    long size = arr.size();\n    long new_index = (index + rotations) % size;\n    return arr[new_index];",
    "    // Write your code here\n    long n = arr.size();\n    long m = ranges.size();\n    long i, j;\n    for(i = 0; i < rotations; i++) {\n        for(j = 0; j < m; j++) {\n            if(ranges[j][0] <= i && i <= ranges[j][1]) {\n                long temp = arr[ranges[j][0]];\n                for(long k = ranges[j][0]; k < ranges[j][1]; k++) {\n                    arr[k] = arr[k+1];\n                }\n                arr[ranges[j][1]] = temp;\n            }\n        }\n    }\n    return arr[index];",
    "\t// Write your code here\n\tfor (long i = 0; i < rotations; i++) {\n\t\tlong start = ranges[i][0];\n\t\tlong end = ranges[i][1];\n\t\tstd::vector<long> temp;\n\t\tfor (long j = start; j <= end; j++) {\n\t\t\ttemp.push_back(arr[j]);\n\t\t}\n\t\tlong k = 0;\n\t\tfor (long j = end; j >= start; j--) {\n\t\t\tarr[j] = temp[k];\n\t\t\tk++;\n\t\t}\n\t}\n\treturn arr[index];",
    "    long n = arr.size();\n    long r = rotations % n;\n    long i = index - r;\n    if (i < 0)\n        i += n;\n    return arr[i];",
    "    long n = arr.size();\n    long r = rotations % n;\n    long i = index - r;\n    if (i < 0) {\n        i = i + n;\n    }\n    return arr[i];"
  ]
}