{
  "name": "mbpp_439_multiple_to_single",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_439_multiple_to_single.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (long i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmpdsp_lcf5: /tmp/tmpdsp_lcf5.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long long int sum = 0;\n    for(int i = 0; i < L.size(); i++)\n    {\n        sum = sum * 10 + L[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmpe5_4wvke: /tmp/tmpe5_4wvke.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (long i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmpdsp_lcf5: /tmp/tmpdsp_lcf5.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n  long result = 0;\n  for (int i = 0; i < L.size(); i++) {\n    result = result * 10 + L[i];\n  }\n  return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmp2qbkisjh: /tmp/tmp2qbkisjh.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (long i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmpdsp_lcf5: /tmp/tmpdsp_lcf5.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    std::string s;\n    for(auto x: L) {\n        s += std::to_string(x);\n    }\n    return std::stol(s);\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (auto i : L) {\n        result = result * 10 + i;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmpqxc_k9fo: /tmp/tmpqxc_k9fo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (long i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmpdsp_lcf5: /tmp/tmpdsp_lcf5.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (long i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmpdsp_lcf5: /tmp/tmpdsp_lcf5.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (long i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmpdsp_lcf5: /tmp/tmpdsp_lcf5.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n  long res = 0;\n  for (auto i : L) {\n    res = res * 10 + i;\n  }\n  return res;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123764,
      "stdout": "",
      "stderr": "tmpht4dsra7: /tmp/tmpht4dsra7.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long num = 0;\n    for (int i = 0; i < L.size(); i++) {\n        num = num * 10 + L[i];\n    }\n    return num;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123764,
      "stdout": "",
      "stderr": "tmp9bqk34rl: /tmp/tmp9bqk34rl.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long res = 0;\n    for (int i = 0; i < L.size(); i++) {\n        res = res * 10 + L[i];\n    }\n    return res;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123764,
      "stdout": "",
      "stderr": "tmpovuhgj4e: /tmp/tmpovuhgj4e.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long num = 0;\n    for(int i = 0; i < L.size(); i++) {\n        num = num * 10 + L[i];\n    }\n    return num;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123764,
      "stdout": "",
      "stderr": "tmpvp9r4l16: /tmp/tmpvp9r4l16.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n  long result = 0;\n  for (int i = 0; i < L.size(); i++) {\n    result = result * 10 + L[i];\n  }\n  return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmp2qbkisjh: /tmp/tmp2qbkisjh.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long num = 0;\n    for (int i = 0; i < L.size(); i++) {\n        num = num * 10 + L[i];\n    }\n    return num;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123764,
      "stdout": "",
      "stderr": "tmp9bqk34rl: /tmp/tmp9bqk34rl.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (auto i : L) {\n        result = result * 10 + i;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmpqxc_k9fo: /tmp/tmpqxc_k9fo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long res = 0;\n    for (long i = 0; i < L.size(); i++) {\n        res = res * 10 + L[i];\n    }\n    return res;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123764,
      "stdout": "",
      "stderr": "tmpmavkji6q: /tmp/tmpmavkji6q.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (auto i : L) {\n        result = result * 10 + i;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmpqxc_k9fo: /tmp/tmpqxc_k9fo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result += L[i] * pow(10, L.size() - i - 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123764,
      "stdout": "",
      "stderr": "tmpo869c_xw: /tmp/tmpo869c_xw.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (long i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmpdsp_lcf5: /tmp/tmpdsp_lcf5.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long res = 0;\n    for(int i = 0; i < L.size(); i++) {\n        res = res * 10 + L[i];\n    }\n    return res;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123764,
      "stdout": "",
      "stderr": "tmpgx8t2qkf: /tmp/tmpgx8t2qkf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long num = 0;\n    for(int i = 0; i < L.size(); i++) {\n        num = num * 10 + L[i];\n    }\n    return num;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123764,
      "stdout": "",
      "stderr": "tmpvp9r4l16: /tmp/tmpvp9r4l16.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long num = 0;\n    for (int i = 0; i < L.size(); i++) {\n        num = num * 10 + L[i];\n    }\n    return num;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123764,
      "stdout": "",
      "stderr": "tmp9bqk34rl: /tmp/tmp9bqk34rl.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n  long result = 0;\n  for (long i = 0; i < L.size(); i++) {\n    result = result * 10 + L[i];\n  }\n  return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123764,
      "stdout": "",
      "stderr": "tmpwckipaay: /tmp/tmpwckipaay.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long res = 0;\n    for (int i = 0; i < L.size(); i++) {\n        res = res * 10 + L[i];\n    }\n    return res;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123764,
      "stdout": "",
      "stderr": "tmpovuhgj4e: /tmp/tmpovuhgj4e.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long sum = 0;\n    for(int i = 0; i < L.size(); i++) {\n        sum = sum * 10 + L[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123764,
      "stdout": "",
      "stderr": "tmpad11ad0s: /tmp/tmpad11ad0s.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for(int i=0; i<L.size(); i++) {\n        result = result*10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123764,
      "stdout": "",
      "stderr": "tmp37d4bb2h: /tmp/tmp37d4bb2h.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); ++i) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123764,
      "stdout": "",
      "stderr": "tmpr0znwtm0: /tmp/tmpr0znwtm0.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result += L[i] * pow(10, L.size() - i - 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123764,
      "stdout": "",
      "stderr": "tmpo869c_xw: /tmp/tmpo869c_xw.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (long i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmpdsp_lcf5: /tmp/tmpdsp_lcf5.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for(int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123764,
      "stdout": "",
      "stderr": "tmp9e2qljpp: /tmp/tmp9e2qljpp.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long res = 0;\n    for (int i = 0; i < L.size(); i++) {\n        res = res * 10 + L[i];\n    }\n    return res;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123764,
      "stdout": "",
      "stderr": "tmpovuhgj4e: /tmp/tmpovuhgj4e.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for(int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123764,
      "stdout": "",
      "stderr": "tmp9e2qljpp: /tmp/tmp9e2qljpp.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (auto i : L) {\n        result = result * 10 + i;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmpqxc_k9fo: /tmp/tmpqxc_k9fo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (long i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmpdsp_lcf5: /tmp/tmpdsp_lcf5.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n\tlong result = 0;\n\tfor (int i = 0; i < L.size(); i++) {\n\t\tresult = result * 10 + L[i];\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123764,
      "stdout": "",
      "stderr": "tmpd10s874y: /tmp/tmpd10s874y.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for(int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123764,
      "stdout": "",
      "stderr": "tmp9e2qljpp: /tmp/tmp9e2qljpp.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long ans = 0;\n    for(int i = 0; i < L.size(); i++) {\n        ans = ans * 10 + L[i];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123764,
      "stdout": "",
      "stderr": "tmprb9awh1i: /tmp/tmprb9awh1i.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long res = 0;\n    for (int i = 0; i < L.size(); i++) {\n        res = res * 10 + L[i];\n    }\n    return res;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123764,
      "stdout": "",
      "stderr": "tmpovuhgj4e: /tmp/tmpovuhgj4e.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n  long result = 0;\n  for (int i = 0; i < L.size(); i++) {\n    result = result * 10 + L[i];\n  }\n  return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmp2qbkisjh: /tmp/tmp2qbkisjh.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long res = 0;\n    for(long i = 0; i < L.size(); i++) {\n        res = res * 10 + L[i];\n    }\n    return res;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123764,
      "stdout": "",
      "stderr": "tmpxqo1_eff: /tmp/tmpxqo1_eff.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (auto i : L) {\n        result = result * 10 + i;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmpqxc_k9fo: /tmp/tmpqxc_k9fo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (long i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmpdsp_lcf5: /tmp/tmpdsp_lcf5.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long res = 0;\n    for (int i = 0; i < L.size(); i++) {\n        res = res * 10 + L[i];\n    }\n    return res;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123764,
      "stdout": "",
      "stderr": "tmpovuhgj4e: /tmp/tmpovuhgj4e.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long res = 0;\n    for (int i = 0; i < L.size(); i++) {\n        res = res * 10 + L[i];\n    }\n    return res;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123764,
      "stdout": "",
      "stderr": "tmpovuhgj4e: /tmp/tmpovuhgj4e.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long num = 0;\n    for (int i = 0; i < L.size(); i++) {\n        num = num * 10 + L[i];\n    }\n    return num;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123764,
      "stdout": "",
      "stderr": "tmp9bqk34rl: /tmp/tmp9bqk34rl.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long res = 0;\n    for (int i = 0; i < L.size(); i++) {\n        res = res * 10 + L[i];\n    }\n    return res;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123764,
      "stdout": "",
      "stderr": "tmpovuhgj4e: /tmp/tmpovuhgj4e.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long ans = 0;\n    for(int i = 0; i < L.size(); i++) {\n        ans = ans * 10 + L[i];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123764,
      "stdout": "",
      "stderr": "tmprb9awh1i: /tmp/tmprb9awh1i.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long sum = 0;\n    for (int i = 0; i < L.size(); i++) {\n        sum = sum * 10 + L[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123764,
      "stdout": "",
      "stderr": "tmpwwgt71be: /tmp/tmpwwgt71be.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    std::string s;\n    for (int i = 0; i < L.size(); i++) {\n        s += std::to_string(L[i]);\n    }\n    return std::stol(s);\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123764,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long res = 0;\n    for (int i = 0; i < L.size(); i++) {\n        res = res * 10 + L[i];\n    }\n    return res;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123764,
      "stdout": "",
      "stderr": "tmpovuhgj4e: /tmp/tmpovuhgj4e.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (long i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmpdsp_lcf5: /tmp/tmpdsp_lcf5.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    std::string s;\n    for(int i=0;i<L.size();i++){\n        s+=std::to_string(L[i]);\n    }\n    return std::stol(s);\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123764,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for(int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123764,
      "stdout": "",
      "stderr": "tmp9e2qljpp: /tmp/tmp9e2qljpp.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long num = 0;\n    for (int i = 0; i < L.size(); i++) {\n        num = num * 10 + L[i];\n    }\n    return num;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123764,
      "stdout": "",
      "stderr": "tmp9bqk34rl: /tmp/tmp9bqk34rl.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long sum = 0;\n    for(int i = 0; i < L.size(); i++) {\n        sum = sum * 10 + L[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123764,
      "stdout": "",
      "stderr": "tmpad11ad0s: /tmp/tmpad11ad0s.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for(int i=0;i<L.size();i++) {\n        result = result*10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123764,
      "stdout": "",
      "stderr": "tmpsjtyc_1e: /tmp/tmpsjtyc_1e.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for(int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123764,
      "stdout": "",
      "stderr": "tmp9e2qljpp: /tmp/tmp9e2qljpp.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long res = 0;\n    for (int i = 0; i < L.size(); i++) {\n        res = res * 10 + L[i];\n    }\n    return res;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123764,
      "stdout": "",
      "stderr": "tmpovuhgj4e: /tmp/tmpovuhgj4e.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (auto i : L) {\n        result = result * 10 + i;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmpqxc_k9fo: /tmp/tmpqxc_k9fo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long res = 0;\n    for (auto i : L) {\n        res = res * 10 + i;\n    }\n    return res;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123764,
      "stdout": "",
      "stderr": "tmpvpd66owr: /tmp/tmpvpd66owr.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long sum = 0;\n    for (int i = 0; i < L.size(); i++) {\n        sum = sum * 10 + L[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123764,
      "stdout": "",
      "stderr": "tmpwwgt71be: /tmp/tmpwwgt71be.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (auto i : L) {\n        result = result * 10 + i;\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmpqxc_k9fo: /tmp/tmpqxc_k9fo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long res = 0;\n    for(int i = 0; i < L.size(); i++) {\n        res = res * 10 + L[i];\n    }\n    return res;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123764,
      "stdout": "",
      "stderr": "tmpgx8t2qkf: /tmp/tmpgx8t2qkf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for(int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123764,
      "stdout": "",
      "stderr": "tmp9e2qljpp: /tmp/tmp9e2qljpp.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long ans = 0;\n    for (int i = 0; i < L.size(); i++) {\n        ans = ans * 10 + L[i];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123764,
      "stdout": "",
      "stderr": "tmp0sok1jfl: /tmp/tmp0sok1jfl.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long num = 0;\n    for (int i = 0; i < L.size(); i++) {\n        num = num * 10 + L[i];\n    }\n    return num;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123764,
      "stdout": "",
      "stderr": "tmp9bqk34rl: /tmp/tmp9bqk34rl.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    std::stringstream ss;\n    for (auto i: L) {\n        ss << i;\n    }\n    long result;\n    ss >> result;\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123764,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long res = 0;\n    for (auto i : L) {\n        res = res * 10 + i;\n    }\n    return res;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123764,
      "stdout": "",
      "stderr": "tmpvpd66owr: /tmp/tmpvpd66owr.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long res = 0;\n    for (int i = 0; i < L.size(); i++) {\n        res = res * 10 + L[i];\n    }\n    return res;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123764,
      "stdout": "",
      "stderr": "tmpovuhgj4e: /tmp/tmpovuhgj4e.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long num = 0;\n    for(int i = 0; i < L.size(); i++) {\n        num = num * 10 + L[i];\n    }\n    return num;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123764,
      "stdout": "",
      "stderr": "tmpvp9r4l16: /tmp/tmpvp9r4l16.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    std::stringstream ss;\n    for (int i = 0; i < L.size(); i++) {\n        ss << L[i];\n    }\n    long result;\n    ss >> result;\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123764,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (long i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmpdsp_lcf5: /tmp/tmpdsp_lcf5.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long ans = 0;\n    for(int i = 0; i < L.size(); i++) {\n        ans = ans * 10 + L[i];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1666123764,
      "stdout": "",
      "stderr": "tmprb9awh1i: /tmp/tmprb9awh1i.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmprmn0ensy: /tmp/tmprmn0ensy.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n    long result = 0;\n    for (long i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "tmpdsp_lcf5: /tmp/tmpdsp_lcf5.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}