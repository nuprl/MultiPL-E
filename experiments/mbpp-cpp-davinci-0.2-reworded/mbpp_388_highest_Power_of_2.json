{
  "name": "mbpp_388_highest_Power_of_2",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the highest power of 2 that is less than or equal to n.\nlong highest_Power_of_2(long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_388_highest_Power_of_2.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = highest_Power_of_2;\n    assert(candidate((10)) == (8));\n    assert(candidate((19)) == (16));\n    assert(candidate((32)) == (32));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long res = 0;\n    for (int i = n; i >= 1; i--) {\n        if ((i & (i - 1)) == 0) {\n            res = i;\n            break;\n        }\n    }\n    return res;",
    "    long res = 1;\n    while (res <= n) {\n        res = res << 1;\n    }\n    return res >> 1;",
    "    long res = 1;\n    while (res <= n) {\n        res *= 2;\n    }\n    return res / 2;",
    "    long p = 1;\n    if (n < 1)\n        return 0;\n    while (p <= n) {\n        p <<= 1;\n    }\n    return p >> 1;",
    "    long res = 1;\n    while (res <= n) {\n        res *= 2;\n    }\n    return res / 2;",
    "    long res = 1;\n    while (res <= n) {\n        res *= 2;\n    }\n    return res / 2;",
    "    long res = 1;\n    while (res <= n) {\n        res *= 2;\n    }\n    return res / 2;",
    "    if (n < 1) {\n        return 0;\n    }\n    int res = 1;\n    for (int i = 0; i < 8 * sizeof(int); i++) {\n        int curr = 1 << i;\n        if (curr > n) {\n            break;\n        }\n        res = curr;\n    }\n    return res;",
    "    long p = 0;\n    while (n) {\n        n = n >> 1;\n        p++;\n    }\n    return (1 << (p - 1));",
    "    long res = 1;\n    while (res <= n) {\n        res = res << 1;\n    }\n    return res >> 1;",
    "    long p = 1;\n    while (p <= n) {\n        p <<= 1;\n    }\n    return p >> 1;",
    "    int res = 0;\n    for (int i = n; i >= 1; i--) {\n        if ((i & (i - 1)) == 0) {\n            res = i;\n            break;\n        }\n    }\n    return res;",
    "    long res = 1;\n    while (res <= n) {\n        res = res << 1;\n    }\n    return res >> 1;",
    "    long res = 1;\n    while (res <= n) {\n        res *= 2;\n    }\n    return res / 2;",
    "    long res = 1;\n    while (res <= n) {\n        res *= 2;\n    }\n    return res / 2;",
    "    long p = 1;\n    if (n < 1)\n        return 0;\n    while (p <= n) {\n        p <<= 1;\n    }\n    return p >> 1;",
    "    long res = 1;\n    while (res <= n) {\n        res *= 2;\n    }\n    return res / 2;",
    "    long res = 1;\n    while (res < n) {\n        res = res << 1;\n    }\n    return res >> 1;",
    "    long res = 1;\n    while (res <= n) {\n        res *= 2;\n    }\n    return res / 2;",
    "    if (n == 0)\n        return 0;\n    long res = 1;\n    for (long i = n; i >= 1; i--) {\n        long x = i;\n        while (x % 2 == 0) {\n            x = x / 2;\n        }\n        if (x == 1) {\n            res = i;\n            break;\n        }\n    }\n    return res;"
  ]
}