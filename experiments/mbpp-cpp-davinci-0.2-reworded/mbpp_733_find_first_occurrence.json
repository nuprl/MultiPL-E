{
  "name": "mbpp_733_find_first_occurrence",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the index of the first occurrence of a given number in a sorted vector.\nlong find_first_occurrence(std::vector<long> A, long x) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_733_find_first_occurrence.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = find_first_occurrence;\n    assert(candidate((std::vector<long>({(long)2, (long)5, (long)5, (long)5, (long)6, (long)6, (long)8, (long)9, (long)9, (long)9})), (5)) == (1));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)5, (long)6, (long)6, (long)8, (long)9, (long)9, (long)9})), (5)) == (2));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)5, (long)6, (long)6, (long)8, (long)9, (long)9, (long)9})), (6)) == (4));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "  // Implement the solution here.\n  long low = 0;\n  long high = A.size()-1;\n  long result = -1;\n  while(low <= high) {\n    long mid = low + (high-low)/2;\n    if(A[mid] == x) {\n      result = mid;\n      high = mid - 1;\n    }\n    else if(A[mid] > x) {\n      high = mid - 1;\n    }\n    else {\n      low = mid + 1;\n    }\n  }\n  return result;",
    "  // Implement the solution here\n  long low = 0;\n  long high = A.size()-1;\n  long mid;\n  long result = -1;\n  while(low<=high){\n    mid = (low+high)/2;\n    if(A[mid] == x){\n      result = mid;\n      high = mid-1;\n    }\n    else if(A[mid] > x){\n      high = mid-1;\n    }\n    else{\n      low = mid+1;\n    }\n  }\n  return result;",
    "    // Implement this placeholder.\n    return 0;",
    "    long low = 0;\n    long high = A.size() - 1;\n    long result = -1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (x == A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    // Implement this placeholder.\n    return 0;",
    "    // Implement this placeholder.\n    return 0;",
    "  // Implement the solution here.\n  int low = 0;\n  int high = A.size() - 1;\n  int mid;\n  int result = -1;\n  while(low <= high) {\n    mid = (low + high) / 2;\n    if(A[mid] == x) {\n      result = mid;\n      high = mid - 1;\n    }\n    else if(A[mid] > x) {\n      high = mid - 1;\n    }\n    else {\n      low = mid + 1;\n    }\n  }\n  return result;",
    "    // Implement this placeholder.\n    return 0;",
    "    // Implement this placeholder.\n    return 0;",
    "    // Implement this placeholder.\n    return 0;",
    "  // Implement the function here.\n  long low = 0, high = A.size() - 1, mid;\n  while(low <= high) {\n    mid = low + (high - low) / 2;\n    if(A[mid] == x) {\n      if(mid == 0 || A[mid - 1] != x)\n        return mid;\n      else\n        high = mid - 1;\n    }\n    else if(A[mid] > x)\n      high = mid - 1;\n    else\n      low = mid + 1;\n  }\n  return -1;",
    "    // Implement this placeholder.\n    return 0;",
    "\t// Implement this placeholder.\n\treturn 0;",
    "  // Implement the solution here.\n  long low = 0;\n  long high = A.size() - 1;\n  long mid;\n  long result = -1;\n  while(low <= high){\n    mid = low + (high - low)/2;\n    if(A[mid] == x){\n      result = mid;\n      high = mid - 1;\n    }\n    else if(A[mid] > x){\n      high = mid - 1;\n    }\n    else{\n      low = mid + 1;\n    }\n  }\n  return result;",
    "    // Implement this placeholder.\n    return 0;",
    "    // Implement this placeholder.\n    return 0;",
    "  // Implement this placeholder.\n  return 0;",
    "    // Implement this placeholder.\n    return 0;",
    "    // Implement this placeholder.\n    return 0;",
    "    // Implement this placeholder.\n    return 0;"
  ]
}