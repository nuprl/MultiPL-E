{
  "name": "mbpp_141_pancake_sort",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_141_pancake_sort.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> res;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            if (max_index != 0) {\n                res.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            res.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "tmpxogka4rw: /tmp/tmpxogka4rw.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if(max_index == n - i - 1) {\n            continue;\n        }\n        if(max_index != 0) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        result.push_back(n - i);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "tmpfto0ydgj: /tmp/tmpfto0ydgj.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted_nums;\n    for (int i = 0; i < nums.size(); i++) {\n        sorted_nums.push_back(i + 1);\n    }\n    std::vector<long> result;\n    while (nums != sorted_nums) {\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums[i] == sorted_nums[i]) {\n                continue;\n            }\n            else {\n                int j = 0;\n                while (nums[j] != sorted_nums[i]) {\n                    j++;\n                }\n                if (j != 0) {\n                    result.push_back(j + 1);\n                    reverse(nums.begin(), nums.begin() + j + 1);\n                }\n                result.push_back(i + 1);\n                reverse(nums.begin(), nums.begin() + i + 1);\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "*** Error in `/tmp/tmpyp07gvmp': malloc(): memory corruption (fast): 0x0000000000902c80 ***\n======= Backtrace: =========\n/lib64/libc.so.6(+0x7f474)[0x2b07d7893474]\n/lib64/libc.so.6(+0x82bb0)[0x2b07d7896bb0]\n/lib64/libc.so.6(__libc_malloc+0x4c)[0x2b07d789978c]\n/shared/centos7/gcc/9.2.0-skylake/lib64/libstdc++.so.6(_Znwm+0x15)[0x2b07d6fc5d45]\n/tmp/tmpyp07gvmp[0x4023e4]\n/tmp/tmpyp07gvmp[0x40229d]\n/tmp/tmpyp07gvmp[0x401f2c]\n/tmp/tmpyp07gvmp[0x401be4]\n/tmp/tmpyp07gvmp[0x4017ae]\n/tmp/tmpyp07gvmp[0x40145a]\n/tmp/tmpyp07gvmp[0x400b1e]\n/tmp/tmpyp07gvmp[0x400d1d]\n/lib64/libc.so.6(__libc_start_main+0xf5)[0x2b07d7836555]\n/tmp/tmpyp07gvmp[0x4008a9]\n======= Memory map: ========\n00400000-00404000 r-xp 00000000 08:02 3544                               /tmp/tmpyp07gvmp\n00603000-00604000 r--p 00003000 08:02 3544                               /tmp/tmpyp07gvmp\n00604000-00605000 rw-p 00004000 08:02 3544                               /tmp/tmpyp07gvmp\n008f1000-00923000 rw-p 00000000 00:00 0                                  [heap]\n2b",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "tmpni9_0ia_: /tmp/tmpni9_0ia_.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if (max_index != n - i - 1) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(n - i);\n            std::reverse(nums.begin(), nums.begin() + n - i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509861,
      "stdout": "",
      "stderr": "tmpn7tjfut4: /tmp/tmpn7tjfut4.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> res;\n    int n = nums.size();\n    for(int i = n; i > 0; i--){\n        int max_index = std::max_element(nums.begin(), nums.begin() + i) - nums.begin();\n        res.push_back(max_index + 1);\n        res.push_back(i);\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + i);\n    }\n    return res;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "tmpfnwuk_3d: /tmp/tmpfnwuk_3d.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> res;\n    int n = nums.size();\n    for (int i = n; i > 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i) - nums.begin();\n        if (max_index == i - 1) continue;\n        if (max_index != 0) {\n            res.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        res.push_back(i);\n        std::reverse(nums.begin(), nums.begin() + i);\n    }\n    return res;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "tmpf7silqvr: /tmp/tmpf7silqvr.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = i;\n        for (int j = 0; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index != i) {\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n            result.push_back(i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "tmp4ykmnd4v: /tmp/tmp4ykmnd4v.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_idx = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_idx + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "tmpxvugrfyc: /tmp/tmpxvugrfyc.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted_nums;\n    std::vector<long>::iterator it;\n    std::vector<long>::iterator max_it;\n    long max_val;\n    long max_pos;\n    long i;\n    long j;\n    long temp;\n    for (i = nums.size() - 1; i >= 0; i--) {\n        max_val = nums[0];\n        max_pos = 0;\n        for (j = 0; j <= i; j++) {\n            if (nums[j] > max_val) {\n                max_val = nums[j];\n                max_pos = j;\n            }\n        }\n        if (max_pos == i) {\n            sorted_nums.push_back(max_val);\n            nums.erase(nums.begin() + i);\n        } else {\n            if (max_pos != 0) {\n                std::reverse(nums.begin(), nums.begin() + max_pos + 1);\n                sorted_nums.push_back(max_val);\n                nums.erase(nums.begin() + max_pos);\n            }\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n            sorted_nums.push_back(nums[i]);\n            nums.erase(nums.begin() + i);\n        }\n    }\n    return sorted_nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "",
      "exit_code": -11,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "tmpni9_0ia_: /tmp/tmpni9_0ia_.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if (max_index != n - 1 - i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(n - i);\n            std::reverse(nums.begin(), nums.begin() + n - i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "tmpy2tpnjgz: /tmp/tmpy2tpnjgz.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    // Write your code here.\n    std::vector<long> result;\n    int n = nums.size();\n    for(int i = n-1; i >= 0; i--){\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if(max_index != i){\n            if(max_index != 0){\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "tmpui3kemjd: /tmp/tmpui3kemjd.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    // Write your code here\n    std::vector<long> sorted;\n    for(int i=0;i<nums.size();i++){\n        sorted.push_back(i+1);\n    }\n    int n=nums.size();\n    while(n>0){\n        int index=0;\n        for(int i=0;i<n;i++){\n            if(nums[i]==sorted[n-1]){\n                index=i;\n                break;\n            }\n        }\n        if(index!=0){\n            std::reverse(nums.begin(),nums.begin()+index+1);\n        }\n        std::reverse(nums.begin(),nums.begin()+n);\n        n--;\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "tmp2f9mx_tk: /tmp/tmp2f9mx_tk.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for (int i = n; i > 1; i--) {\n        int max_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.begin() + i));\n        if (max_index != i - 1) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i);\n            std::reverse(nums.begin(), nums.begin() + i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "tmpq9wua7fx: /tmp/tmpq9wua7fx.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    for (int i = 0; i < nums.size(); i++) {\n        int max_index = i;\n        for (int j = i; j < nums.size(); j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + i + 1);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "tmpsbqhvmkm: /tmp/tmpsbqhvmkm.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    for (int i = 0; i < nums.size(); i++) {\n        int max_index = i;\n        for (int j = i; j < nums.size(); j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index != i) {\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "tmp3pj2i09y: /tmp/tmp3pj2i09y.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "tmp_i30kvv4: /tmp/tmp_i30kvv4.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "tmp_pjiwivv: /tmp/tmp_pjiwivv.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "tmpxzrl5vg_: /tmp/tmpxzrl5vg_.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for(int i=nums.size()-1;i>=0;i--){\n        int max_index = std::max_element(nums.begin(),nums.begin()+i+1)-nums.begin();\n        if(max_index!=i){\n            if(max_index!=0){\n                result.push_back(max_index+1);\n                std::reverse(nums.begin(),nums.begin()+max_index+1);\n            }\n            result.push_back(i+1);\n            std::reverse(nums.begin(),nums.begin()+i+1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124256,
      "stdout": "",
      "stderr": "tmp25gla24j: /tmp/tmp25gla24j.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size(); i > 0; i--) {\n        auto it = std::find(nums.begin(), nums.end(), i);\n        if (it == nums.end()) {\n            continue;\n        }\n        int index = std::distance(nums.begin(), it);\n        result.push_back(index + 1);\n        std::reverse(nums.begin(), nums.begin() + index + 1);\n        result.push_back(i);\n        std::reverse(nums.begin(), nums.begin() + i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124256,
      "stdout": "",
      "stderr": "tmp2qmrls6g: /tmp/tmp2qmrls6g.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if(max_index == n - 1 - i) {\n            continue;\n        }\n        if(max_index != 0) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        result.push_back(n - i);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124256,
      "stdout": "",
      "stderr": "tmpe4q5axcj: /tmp/tmpe4q5axcj.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "tmp_pjiwivv: /tmp/tmp_pjiwivv.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for (int i = n; i > 1; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i) - nums.begin();\n        if (max_index != i - 1) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i);\n            std::reverse(nums.begin(), nums.begin() + i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124256,
      "stdout": "",
      "stderr": "tmp4s_6ly56: /tmp/tmp4s_6ly56.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted;\n    while(nums.size() > 0) {\n        int max_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.end()));\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.end());\n        sorted.push_back(nums.back());\n        nums.pop_back();\n    }\n    return sorted;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124256,
      "stdout": "",
      "stderr": "tmpf9m6e7i6: /tmp/tmpf9m6e7i6.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "tmp_pjiwivv: /tmp/tmp_pjiwivv.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted;\n    for(int i=nums.size()-1;i>=0;i--){\n        int max_index = std::max_element(nums.begin(),nums.begin()+i+1)-nums.begin();\n        if(max_index!=i){\n            if(max_index!=0){\n                std::reverse(nums.begin(),nums.begin()+max_index+1);\n                sorted.push_back(max_index+1);\n            }\n            std::reverse(nums.begin(),nums.begin()+i+1);\n            sorted.push_back(i+1);\n        }\n    }\n    return sorted;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124256,
      "stdout": "",
      "stderr": "tmpnimj14gv: /tmp/tmpnimj14gv.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if(max_index == n - i - 1) {\n            continue;\n        }\n        if(max_index != 0) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        result.push_back(n - i);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "tmpfto0ydgj: /tmp/tmpfto0ydgj.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = i;\n        for (int j = 0; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + i + 1);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if (max_index != n - 1 - i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(n - i);\n            std::reverse(nums.begin(), nums.begin() + n - i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "tmpy2tpnjgz: /tmp/tmpy2tpnjgz.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "tmpni9_0ia_: /tmp/tmpni9_0ia_.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        result.push_back(max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        result.push_back(n - i);\n        std::reverse(nums.begin(), nums.end());\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124256,
      "stdout": "",
      "stderr": "tmpoh493ve7: /tmp/tmpoh493ve7.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "tmp_pjiwivv: /tmp/tmp_pjiwivv.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.end()));\n        if (max_index != n - 1) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(n - i);\n            std::reverse(nums.begin(), nums.end() - i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124256,
      "stdout": "",
      "stderr": "tmp3q1nxw55: /tmp/tmp3q1nxw55.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted_nums;\n    for (int i = nums.size(); i > 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + i);\n        sorted_nums.push_back(nums[i - 1]);\n    }\n    return sorted_nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124256,
      "stdout": "",
      "stderr": "tmpffp7jlxa: /tmp/tmpffp7jlxa.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "tmpxzrl5vg_: /tmp/tmpxzrl5vg_.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    // Write your code here.\n    std::vector<long> result;\n    int size = nums.size();\n    for(int i=size;i>0;i--){\n        int max_index = std::max_element(nums.begin(),nums.begin()+i) - nums.begin();\n        result.push_back(max_index+1);\n        result.push_back(i);\n        std::reverse(nums.begin(),nums.begin()+max_index+1);\n        std::reverse(nums.begin(),nums.begin()+i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124256,
      "stdout": "",
      "stderr": "tmp58z6ang6: /tmp/tmp58z6ang6.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "tmpxzrl5vg_: /tmp/tmpxzrl5vg_.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = 0; i < nums.size(); i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if (max_index == nums.size() - 1) {\n            nums.erase(nums.begin() + max_index);\n            continue;\n        }\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        result.push_back(max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + nums.size() - i);\n        result.push_back(nums.size() - i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124256,
      "stdout": "",
      "stderr": "tmpjp1h50s9: /tmp/tmpjp1h50s9.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if (max_index != n - 1 - i) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(n - i);\n            std::reverse(nums.begin(), nums.begin() + n - i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124256,
      "stdout": "",
      "stderr": "tmpf2q5zr2f: /tmp/tmpf2q5zr2f.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n  // Write your code here.\n\tstd::vector<long> sorted_nums = nums;\n\tstd::sort(sorted_nums.begin(), sorted_nums.end());\n\tstd::vector<long> flips;\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\tint index = std::find(nums.begin(), nums.end(), sorted_nums[i]) - nums.begin();\n\t\tif (index == i) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (index != 0) {\n\t\t\tflips.push_back(index + 1);\n\t\t\tstd::reverse(nums.begin(), nums.begin() + index + 1);\n\t\t}\n\t\tflips.push_back(i + 1);\n\t\tstd::reverse(nums.begin(), nums.begin() + i + 1);\n\t}\n\treturn flips;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124256,
      "stdout": "",
      "stderr": "tmpjxer9df4: /tmp/tmpjxer9df4.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "tmpni9_0ia_: /tmp/tmpni9_0ia_.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "tmpni9_0ia_: /tmp/tmpni9_0ia_.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "tmpxzrl5vg_: /tmp/tmpxzrl5vg_.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if (max_index == n - 1) {\n            continue;\n        }\n        if (max_index != 0) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        result.push_back(n - i);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124256,
      "stdout": "",
      "stderr": "tmp42dwgziw: /tmp/tmp42dwgziw.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    for (int i = nums.size() - 1; i > 0; i--) {\n        int max_index = 0;\n        for (int j = 0; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index == i) {\n            continue;\n        }\n        if (max_index != 0) {\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        std::reverse(nums.begin(), nums.begin() + i + 1);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    for(int i=nums.size()-1;i>=0;i--){\n        int max_index=0;\n        for(int j=0;j<=i;j++){\n            if(nums[j]>nums[max_index]){\n                max_index=j;\n            }\n        }\n        if(max_index!=i){\n            std::reverse(nums.begin(),nums.begin()+max_index+1);\n            std::reverse(nums.begin(),nums.begin()+i+1);\n        }\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted;\n    for(int i=0;i<nums.size();i++){\n        int max_index = std::distance(nums.begin(),std::max_element(nums.begin(),nums.end()));\n        std::reverse(nums.begin(),nums.begin()+max_index+1);\n        std::reverse(nums.begin(),nums.end());\n        sorted.push_back(nums.back());\n        nums.pop_back();\n    }\n    return sorted;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124256,
      "stdout": "",
      "stderr": "tmp777radgk: /tmp/tmp777radgk.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted_nums;\n    for(int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if(max_index != i) {\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "tmp_i30kvv4: /tmp/tmp_i30kvv4.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "tmp_i30kvv4: /tmp/tmp_i30kvv4.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for(int i = nums.size() - 1; i > 0; i--) {\n        int max_index = 0;\n        for(int j = 0; j <= i; j++) {\n            if(nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if(max_index != i) {\n            if(max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124256,
      "stdout": "",
      "stderr": "tmp5fmfd010: /tmp/tmp5fmfd010.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i > 0; i--) {\n        int max_index = 0;\n        for (int j = 1; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index == i) {\n            continue;\n        }\n        if (max_index != 0) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        result.push_back(i + 1);\n        std::reverse(nums.begin(), nums.begin() + i + 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124256,
      "stdout": "",
      "stderr": "tmpw21i11ut: /tmp/tmpw21i11ut.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if(max_index != n - 1 - i) {\n            if(max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(n - i);\n            std::reverse(nums.begin(), nums.begin() + n - i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124256,
      "stdout": "",
      "stderr": "tmptshcplvh: /tmp/tmptshcplvh.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    // Write your code here.\n    int n = nums.size();\n    for(int i = 0; i < n; i++){\n        int max_index = 0;\n        for(int j = 0; j < n-i; j++){\n            if(nums[j] > nums[max_index]){\n                max_index = j;\n            }\n        }\n        reverse(nums.begin(), nums.begin()+max_index+1);\n        reverse(nums.begin(), nums.begin()+n-i);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    for(int i=0;i<nums.size();i++){\n        int max_index=0;\n        for(int j=0;j<nums.size()-i;j++){\n            if(nums[j]>nums[max_index]){\n                max_index=j;\n            }\n        }\n        std::reverse(nums.begin(),nums.begin()+max_index+1);\n        std::reverse(nums.begin(),nums.begin()+nums.size()-i);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted_nums;\n    for(int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.begin() + i + 1));\n        if(max_index == i) {\n            sorted_nums.push_back(nums[i]);\n            continue;\n        }\n        if(max_index != 0) {\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            sorted_nums.push_back(nums[max_index]);\n        }\n        std::reverse(nums.begin(), nums.begin() + i + 1);\n        sorted_nums.push_back(nums[i]);\n    }\n    return sorted_nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "tmprlpoi2qr: /tmp/tmprlpoi2qr.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "tmpxzrl5vg_: /tmp/tmpxzrl5vg_.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size(); i > 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i) - nums.begin();\n        if (max_index != i - 1) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i);\n            std::reverse(nums.begin(), nums.begin() + i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "tmpxsoo53c8: /tmp/tmpxsoo53c8.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted_nums;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.begin() + i + 1));\n        if (max_index != i) {\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    // Write your code here.\n    std::vector<long> result;\n    for(int i=nums.size()-1;i>=0;i--){\n        int max_index = std::max_element(nums.begin(),nums.begin()+i+1)-nums.begin();\n        if(max_index!=i){\n            if(max_index!=0){\n                result.push_back(max_index+1);\n                std::reverse(nums.begin(),nums.begin()+max_index+1);\n            }\n            result.push_back(i+1);\n            std::reverse(nums.begin(),nums.begin()+i+1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "tmp1bhh6equ: /tmp/tmp1bhh6equ.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = i;\n        for (int j = 0; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index != i) {\n            result.push_back(max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "tmp1dlol7cw: /tmp/tmp1dlol7cw.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index == i) {\n            continue;\n        }\n        if (max_index != 0) {\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(max_index + 1);\n        }\n        std::reverse(nums.begin(), nums.begin() + i + 1);\n        result.push_back(i + 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "tmp47sjyghd: /tmp/tmp47sjyghd.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted_nums = nums;\n    std::sort(sorted_nums.begin(), sorted_nums.end());\n    std::vector<long> result;\n    for (int i = 0; i < nums.size(); i++) {\n        auto it = std::find(nums.begin(), nums.end(), sorted_nums[i]);\n        int index = std::distance(nums.begin(), it);\n        result.push_back(index + 1);\n        result.push_back(nums.size() - i);\n        std::reverse(nums.begin(), it + 1);\n        std::reverse(nums.begin(), nums.end() - i);\n        std::reverse(nums.begin(), nums.end());\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "tmpsuu68uc4: /tmp/tmpsuu68uc4.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    // Write your code here.\n    std::vector<long> result;\n    int size = nums.size();\n    for(int i = 0; i < size; i++){\n        int max_index = 0;\n        for(int j = 0; j < size - i; j++){\n            if(nums[j] > nums[max_index]){\n                max_index = j;\n            }\n        }\n        if(max_index != size - i - 1){\n            if(max_index != 0){\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(size - i);\n            std::reverse(nums.begin(), nums.begin() + size - i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "tmp3r_mdqyp: /tmp/tmp3r_mdqyp.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = i;\n        for (int j = 0; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index != i) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "tmp40051cqp: /tmp/tmp40051cqp.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for(int i=0; i<n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if(max_index == n-1-i) {\n            continue;\n        }\n        if(max_index != 0) {\n            result.push_back(max_index+1);\n            std::reverse(nums.begin(), nums.begin()+max_index+1);\n        }\n        result.push_back(n-i);\n        std::reverse(nums.begin(), nums.begin()+n-i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "tmpyjx2lhkf: /tmp/tmpyjx2lhkf.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int size = nums.size();\n    for (int i = 0; i < size; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if (max_index != size - 1) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(size - i);\n            std::reverse(nums.begin(), nums.end() - i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "tmpjtcbvom5: /tmp/tmpjtcbvom5.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    // Write your code here.\n    std::vector<long> result;\n    int n = nums.size();\n    for(int i = 0; i < n; i++){\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        result.push_back(max_index + 1);\n        result.push_back(n - i);\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "tmpuz5uk_63: /tmp/tmpuz5uk_63.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted_nums;\n    std::vector<long>::iterator it;\n    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        it = std::max_element(nums.begin(), nums.end());\n        int index = std::distance(nums.begin(), it);\n        std::reverse(nums.begin(), it + 1);\n        std::reverse(nums.begin(), nums.end());\n        sorted_nums.push_back(index + 1);\n        sorted_nums.push_back(n - i);\n    }\n    return sorted_nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "tmptgq_gb_4: /tmp/tmptgq_gb_4.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "tmpxzrl5vg_: /tmp/tmpxzrl5vg_.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = i;\n        for (int j = 0; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index != i) {\n            result.push_back(max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "tmp1dlol7cw: /tmp/tmp1dlol7cw.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    // Write your code here.\n    int n = nums.size();\n    for(int i = 0; i < n; i++){\n        int max = 0;\n        for(int j = 0; j < n - i; j++){\n            if(nums[j] > nums[max]){\n                max = j;\n            }\n        }\n        std::reverse(nums.begin(), nums.begin() + max + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    for(int i=0;i<nums.size();i++){\n        int max_index=i;\n        for(int j=i;j<nums.size();j++){\n            if(nums[j]>nums[max_index]){\n                max_index=j;\n            }\n        }\n        if(max_index!=i){\n            std::reverse(nums.begin(),nums.begin()+max_index+1);\n            std::reverse(nums.begin(),nums.begin()+i+1);\n        }\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "tmpuf1d97y5: /tmp/tmpuf1d97y5.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i > 0; i--) {\n        int max_index = 0;\n        for (int j = 1; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index == i) {\n            continue;\n        }\n        if (max_index != 0) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        result.push_back(i + 1);\n        std::reverse(nums.begin(), nums.begin() + i + 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124256,
      "stdout": "",
      "stderr": "tmpw21i11ut: /tmp/tmpw21i11ut.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n  std::vector<long> result;\n  int n = nums.size();\n  for (int i = 0; i < n; i++) {\n    int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n    if (max_index == n - i - 1) {\n      continue;\n    }\n    if (max_index != 0) {\n      result.push_back(max_index + 1);\n      std::reverse(nums.begin(), nums.begin() + max_index + 1);\n    }\n    result.push_back(n - i);\n    std::reverse(nums.begin(), nums.begin() + n - i);\n  }\n  return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "tmpfj4mcr_x: /tmp/tmpfj4mcr_x.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "tmpni9_0ia_: /tmp/tmpni9_0ia_.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = 0;\n        for (int j = 0; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "tmptxiw21a5: /tmp/tmptxiw21a5.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n  // Write your code here.\n\tfor (int i = nums.size() - 1; i >= 0; i--) {\n\t\tint max_index = i;\n\t\tfor (int j = 0; j <= i; j++) {\n\t\t\tif (nums[j] > nums[max_index]) {\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\tstd::reverse(nums.begin(), nums.begin() + max_index + 1);\n\t\tstd::reverse(nums.begin(), nums.begin() + i + 1);\n\t}\n\treturn nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "tmpxzrl5vg_: /tmp/tmpxzrl5vg_.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted;\n    for(int i=0;i<nums.size();i++){\n        int max_index = std::max_element(nums.begin(),nums.end())-nums.begin();\n        std::reverse(nums.begin(),nums.begin()+max_index+1);\n        std::reverse(nums.begin(),nums.end());\n        sorted.push_back(nums.back());\n        nums.pop_back();\n    }\n    return sorted;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "tmp1hdpztw3: /tmp/tmp1hdpztw3.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for(int i=nums.size()-1;i>=0;i--){\n        int max_index = std::max_element(nums.begin(),nums.begin()+i+1)-nums.begin();\n        if(max_index != i){\n            if(max_index != 0){\n                result.push_back(max_index+1);\n                std::reverse(nums.begin(),nums.begin()+max_index+1);\n            }\n            result.push_back(i+1);\n            std::reverse(nums.begin(),nums.begin()+i+1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "tmpbjjq4d16: /tmp/tmpbjjq4d16.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "tmpni9_0ia_: /tmp/tmpni9_0ia_.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "tmp_pjiwivv: /tmp/tmp_pjiwivv.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    // Write your code here.\n    for(int i=nums.size()-1;i>=0;i--){\n        int max_index = i;\n        for(int j=0;j<=i;j++){\n            if(nums[j]>nums[max_index]){\n                max_index = j;\n            }\n        }\n        if(max_index!=i){\n            std::reverse(nums.begin(),nums.begin()+max_index+1);\n            std::reverse(nums.begin(),nums.begin()+i+1);\n        }\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        result.push_back(max_index + 1);\n        result.push_back(n - i);\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "tmp340lif18: /tmp/tmp340lif18.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int size = nums.size();\n    for(int i = 0; i < size; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if(max_index != size - 1) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(size - i);\n            std::reverse(nums.begin(), nums.end());\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124260,
      "stdout": "",
      "stderr": "tmplf2v0bnx: /tmp/tmplf2v0bnx.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted_nums = nums;\n    std::sort(sorted_nums.begin(), sorted_nums.end());\n    for (int i = 0; i < nums.size(); i++) {\n        int index = std::find(nums.begin(), nums.end(), sorted_nums[i]) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + index + 1);\n        std::reverse(nums.begin(), nums.begin() + i + 1);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124260,
      "stdout": "",
      "stderr": "tmppw4nbuxp: /tmp/tmppw4nbuxp.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    for (int i = nums.size() - 1; i > 0; i--) {\n        int max_index = i;\n        for (int j = 0; j < i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index != i) {\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    for (int i = nums.size(); i > 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + i);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = i;\n        for (int j = 0; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + i + 1);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted_nums;\n    for (int i = 0; i < nums.size(); i++) {\n        sorted_nums.push_back(nums[i]);\n    }\n    std::sort(sorted_nums.begin(), sorted_nums.end());\n    std::vector<long> result;\n    for (int i = 0; i < nums.size(); i++) {\n        for (int j = 0; j < nums.size(); j++) {\n            if (nums[j] == sorted_nums[i]) {\n                result.push_back(j + 1);\n                std::reverse(nums.begin(), nums.begin() + j + 1);\n                result.push_back(i + 1);\n                std::reverse(nums.begin(), nums.begin() + i + 1);\n                break;\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124260,
      "stdout": "",
      "stderr": "tmpenhn4xw4: /tmp/tmpenhn4xw4.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for(int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = i;\n        for(int j = 0; j <= i; j++) {\n            if(nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if(max_index != i) {\n            result.push_back(max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124260,
      "stdout": "",
      "stderr": "tmpmvl8tr67: /tmp/tmpmvl8tr67.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        result.push_back(max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n        result.push_back(n - i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124260,
      "stdout": "",
      "stderr": "tmps6534_tm: /tmp/tmps6534_tm.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = 0;\n        for (int j = 0; j < n - i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index == n - i - 1) {\n            continue;\n        }\n        if (max_index != 0) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        result.push_back(n - i);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124260,
      "stdout": "",
      "stderr": "tmp7gbm3y0w: /tmp/tmp7gbm3y0w.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "tmpxzrl5vg_: /tmp/tmpxzrl5vg_.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size(); i > 0; i--) {\n        int max_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.begin() + i));\n        if (max_index != i - 1) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i);\n            std::reverse(nums.begin(), nums.begin() + i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124260,
      "stdout": "",
      "stderr": "tmpdslfv3ps: /tmp/tmpdslfv3ps.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    // Write your code here.\n    int n = nums.size();\n    for(int i = 0; i < n; i++){\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124260,
      "stdout": "",
      "stderr": "tmpattbirqf: /tmp/tmpattbirqf.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = i;\n        for (int j = 0; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index != i) {\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n            result.push_back(i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "tmp4ykmnd4v: /tmp/tmp4ykmnd4v.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n  // Write your code here.\n  std::vector<long> result;\n  int n = nums.size();\n  for (int i = 0; i < n; i++) {\n    int max = std::max_element(nums.begin(), nums.end()) - nums.begin();\n    if (max != n - i - 1) {\n      if (max != 0) {\n        result.push_back(max + 1);\n        std::reverse(nums.begin(), nums.begin() + max + 1);\n      }\n      result.push_back(n - i);\n      std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124260,
      "stdout": "",
      "stderr": "tmpxy15_8ap: /tmp/tmpxy15_8ap.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.end()));\n        result.push_back(max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        result.push_back(n);\n        std::reverse(nums.begin(), nums.end());\n        n--;\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124260,
      "stdout": "",
      "stderr": "tmpss73j5e_: /tmp/tmpss73j5e_.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted;\n    std::vector<long> unsorted;\n    for (int i = 0; i < nums.size(); i++) {\n        unsorted.push_back(nums[i]);\n    }\n    while (unsorted.size() > 0) {\n        int max_index = 0;\n        for (int i = 0; i < unsorted.size(); i++) {\n            if (unsorted[i] > unsorted[max_index]) {\n                max_index = i;\n            }\n        }\n        if (max_index != 0) {\n            std::reverse(unsorted.begin(), unsorted.begin() + max_index + 1);\n            sorted.push_back(max_index + 1);\n        }\n        std::reverse(unsorted.begin(), unsorted.end());\n        sorted.push_back(unsorted.size());\n        unsorted.pop_back();\n    }\n    return sorted;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124260,
      "stdout": "",
      "stderr": "tmpka7uf0pw: /tmp/tmpka7uf0pw.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n  // Write your code here.\n\tstd::vector<long> sorted;\n\tfor(int i=0;i<nums.size();i++){\n\t\tint max_index = std::max_element(nums.begin(),nums.end()) - nums.begin();\n\t\tstd::reverse(nums.begin(),nums.begin()+max_index+1);\n\t\tsorted.push_back(max_index+1);\n\t\tstd::reverse(nums.begin(),nums.end());\n\t\tsorted.push_back(nums.size()-i);\n\t}\n\treturn sorted;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124260,
      "stdout": "",
      "stderr": "tmpop_2edgc: /tmp/tmpop_2edgc.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted;\n    for (int i = 0; i < nums.size(); i++) {\n        sorted.push_back(i+1);\n    }\n    std::vector<long> result;\n    while (nums != sorted) {\n        int max_index = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums[i] > nums[max_index]) {\n                max_index = i;\n            }\n        }\n        result.push_back(max_index+1);\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        result.push_back(nums.size());\n        std::reverse(nums.begin(), nums.end());\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124275,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index == i) {\n            continue;\n        }\n        if (max_index != 0) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        result.push_back(i + 1);\n        std::reverse(nums.begin(), nums.begin() + i + 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124260,
      "stdout": "",
      "stderr": "tmpgva2mnsu: /tmp/tmpgva2mnsu.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int size = nums.size();\n    for(int i = 0; i < size; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if(max_index == size - i - 1) {\n            continue;\n        }\n        if(max_index != 0) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        result.push_back(size - i);\n        std::reverse(nums.begin(), nums.begin() + size - i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124260,
      "stdout": "",
      "stderr": "tmpz_b3__8p: /tmp/tmpz_b3__8p.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    // Write your code here\n    for(int i=0;i<nums.size();i++){\n        int max=0;\n        for(int j=0;j<nums.size()-i;j++){\n            if(nums[j]>nums[max]){\n                max=j;\n            }\n        }\n        if(max!=nums.size()-i-1){\n            if(max!=0){\n                std::reverse(nums.begin(),nums.begin()+max+1);\n            }\n            std::reverse(nums.begin(),nums.begin()+nums.size()-i);\n        }\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted_nums;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n        sorted_nums.push_back(max_index + 1);\n        sorted_nums.push_back(n - i);\n    }\n    return sorted_nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124260,
      "stdout": "",
      "stderr": "tmp3djrtc5m: /tmp/tmp3djrtc5m.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted_nums = nums;\n    std::sort(sorted_nums.begin(), sorted_nums.end());\n    for (int i = 0; i < nums.size(); i++) {\n        for (int j = 0; j < nums.size(); j++) {\n            if (nums[j] == sorted_nums[i]) {\n                std::reverse(nums.begin(), nums.begin() + j + 1);\n                std::reverse(nums.begin(), nums.begin() + i + 1);\n                break;\n            }\n        }\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124260,
      "stdout": "",
      "stderr": "tmpexmlnheb: /tmp/tmpexmlnheb.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "tmpxzrl5vg_: /tmp/tmpxzrl5vg_.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = 0;\n        for (int j = 0; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "tmptxiw21a5: /tmp/tmptxiw21a5.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> res;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if (max_index != n - 1) {\n            if (max_index != 0) {\n                res.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            res.push_back(n - i);\n            std::reverse(nums.begin(), nums.end() - i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124260,
      "stdout": "",
      "stderr": "tmpk3oyjxqc: /tmp/tmpk3oyjxqc.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted;\n    for(int i=0; i<nums.size(); i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin()+max_index+1);\n        std::reverse(nums.begin(), nums.end());\n        sorted.push_back(nums.back());\n        nums.pop_back();\n    }\n    return sorted;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124260,
      "stdout": "",
      "stderr": "tmpk62rsg8v: /tmp/tmpk62rsg8v.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int size = nums.size();\n    for(int i = 0; i < size; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        result.push_back(max_index + 1);\n        std::reverse(nums.begin(), nums.end());\n        result.push_back(size - i);\n        nums.pop_back();\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124260,
      "stdout": "",
      "stderr": "tmp3gvuuz28: /tmp/tmp3gvuuz28.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n            result.push_back(i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124262,
      "stdout": "",
      "stderr": "tmpa7h__ndv: /tmp/tmpa7h__ndv.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    // Write your code here.\n    for(int i=0;i<nums.size();i++){\n        int max_index = std::max_element(nums.begin(),nums.end()-i)-nums.begin();\n        std::reverse(nums.begin(),nums.begin()+max_index+1);\n        std::reverse(nums.begin(),nums.end()-i);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted_nums;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.end());\n        sorted_nums.push_back(nums.back());\n        nums.pop_back();\n    }\n    return sorted_nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124262,
      "stdout": "",
      "stderr": "tmpgqrng7cd: /tmp/tmpgqrng7cd.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> ans;\n    for(int i=nums.size()-1;i>=0;i--){\n        int index = std::distance(nums.begin(),std::max_element(nums.begin(),nums.begin()+i+1));\n        if(index!=i){\n            if(index!=0){\n                ans.push_back(index+1);\n                std::reverse(nums.begin(),nums.begin()+index+1);\n            }\n            ans.push_back(i+1);\n            std::reverse(nums.begin(),nums.begin()+i+1);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124262,
      "stdout": "",
      "stderr": "tmp4wr8qlck: /tmp/tmp4wr8qlck.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = i;\n        for (int j = 0; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index != i) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "tmp40051cqp: /tmp/tmp40051cqp.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "tmpni9_0ia_: /tmp/tmpni9_0ia_.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.begin() + i + 1));\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124262,
      "stdout": "",
      "stderr": "tmpmopm2dfm: /tmp/tmpmopm2dfm.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted;\n    std::vector<long> temp;\n    int n = nums.size();\n    for(int i=0;i<n;i++){\n        temp.push_back(nums[i]);\n    }\n    std::sort(temp.begin(),temp.end());\n    for(int i=0;i<n;i++){\n        for(int j=0;j<n;j++){\n            if(nums[j]==temp[i]){\n                sorted.push_back(j+1);\n                break;\n            }\n        }\n    }\n    return sorted;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124262,
      "stdout": "",
      "stderr": "tmphwy_5tp5: /tmp/tmphwy_5tp5.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int size = nums.size();\n    for(int i = size - 1; i > 0; i--) {\n        int max_index = 0;\n        for(int j = 1; j <= i; j++) {\n            if(nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if(max_index != i) {\n            if(max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124262,
      "stdout": "",
      "stderr": "tmpp_cexy6y: /tmp/tmpp_cexy6y.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "tmpni9_0ia_: /tmp/tmpni9_0ia_.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    for(int i=0;i<nums.size();i++){\n        int max_index=0;\n        for(int j=0;j<nums.size()-i;j++){\n            if(nums[j]>nums[max_index]){\n                max_index=j;\n            }\n        }\n        if(max_index!=nums.size()-i-1){\n            if(max_index!=0){\n                std::reverse(nums.begin(),nums.begin()+max_index+1);\n            }\n            std::reverse(nums.begin(),nums.begin()+nums.size()-i);\n        }\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "tmpni9_0ia_: /tmp/tmpni9_0ia_.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for(int i=0;i<nums.size();i++){\n        int max_index = std::max_element(nums.begin(),nums.end()-i)-nums.begin();\n        if(max_index!=nums.size()-i-1){\n            result.push_back(max_index+1);\n            result.push_back(nums.size()-i);\n            std::reverse(nums.begin(),nums.begin()+max_index+1);\n            std::reverse(nums.begin(),nums.end()-i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124262,
      "stdout": "",
      "stderr": "tmpkz2jug8w: /tmp/tmpkz2jug8w.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    // Write your code here.\n    int n = nums.size();\n    for(int i = 0; i < n; i++){\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124260,
      "stdout": "",
      "stderr": "tmpattbirqf: /tmp/tmpattbirqf.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if (max_index != n - 1 - i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(n - i);\n            std::reverse(nums.begin(), nums.begin() + n - i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "tmpy2tpnjgz: /tmp/tmpy2tpnjgz.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n  // Write your code here.\n\tfor (int i = nums.size() - 1; i >= 0; i--) {\n\t\tint max_index = i;\n\t\tfor (int j = 0; j <= i; j++) {\n\t\t\tif (nums[j] > nums[max_index]) {\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\treverse(nums.begin(), nums.begin() + max_index + 1);\n\t\treverse(nums.begin(), nums.begin() + i + 1);\n\t}\n\treturn nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    // Write your code here\n    std::vector<long> result;\n    for(int i=nums.size()-1;i>=0;i--){\n        int max_index = std::max_element(nums.begin(),nums.begin()+i+1)-nums.begin();\n        if(max_index!=i){\n            if(max_index!=0){\n                result.push_back(max_index+1);\n                std::reverse(nums.begin(),nums.begin()+max_index+1);\n            }\n            result.push_back(i+1);\n            std::reverse(nums.begin(),nums.begin()+i+1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124262,
      "stdout": "",
      "stderr": "tmp16tvk_34: /tmp/tmp16tvk_34.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted_nums;\n    for(int i=nums.size()-1;i>=0;i--){\n        int max_index = std::max_element(nums.begin(),nums.begin()+i+1)-nums.begin();\n        if(max_index!=i){\n            if(max_index!=0){\n                std::reverse(nums.begin(),nums.begin()+max_index+1);\n            }\n            std::reverse(nums.begin(),nums.begin()+i+1);\n        }\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted;\n    for(int i = 0; i < nums.size(); i++) {\n        int max_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.end()));\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.end());\n        sorted.push_back(nums.back());\n        nums.pop_back();\n    }\n    return sorted;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124262,
      "stdout": "",
      "stderr": "tmpekl21ymt: /tmp/tmpekl21ymt.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted_nums;\n    std::vector<long> temp_nums;\n    for (int i = 0; i < nums.size(); i++) {\n        temp_nums.push_back(nums[i]);\n    }\n    std::sort(temp_nums.begin(), temp_nums.end());\n    for (int i = 0; i < nums.size(); i++) {\n        long max_num = temp_nums[temp_nums.size() - 1];\n        int max_num_index = -1;\n        for (int j = 0; j < nums.size(); j++) {\n            if (nums[j] == max_num) {\n                max_num_index = j;\n                break;\n            }\n        }\n        if (max_num_index != 0) {\n            if (max_num_index != nums.size() - 1) {\n                std::reverse(nums.begin(), nums.begin() + max_num_index + 1);\n            }\n            std::reverse(nums.begin(), nums.end());\n        }\n        sorted_nums.push_back(nums[0]);\n        nums.erase(nums.begin());\n    }\n    return sorted_nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124262,
      "stdout": "",
      "stderr": "tmp3inma6x6: /tmp/tmp3inma6x6.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n  std::vector<long> result;\n  int n = nums.size();\n  for (int i = 0; i < n; i++) {\n    int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n    if (max_index == n - i - 1)\n      continue;\n    if (max_index != 0) {\n      result.push_back(max_index + 1);\n      std::reverse(nums.begin(), nums.begin() + max_index + 1);\n    }\n    result.push_back(n - i);\n    std::reverse(nums.begin(), nums.begin() + n - i);\n  }\n  return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124262,
      "stdout": "",
      "stderr": "tmpgdwhpcj9: /tmp/tmpgdwhpcj9.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.end()));\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        result.push_back(max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n        result.push_back(n - i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124262,
      "stdout": "",
      "stderr": "tmpc274v3r1: /tmp/tmpc274v3r1.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n  // Write your code here.\n\tfor(int i=nums.size()-1;i>=0;i--){\n\t\tint max_index=0;\n\t\tfor(int j=0;j<=i;j++){\n\t\t\tif(nums[j]>nums[max_index]){\n\t\t\t\tmax_index=j;\n\t\t\t}\n\t\t}\n\t\treverse(nums.begin(),nums.begin()+max_index+1);\n\t\treverse(nums.begin(),nums.begin()+i+1);\n\t}\n\treturn nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if (max_index != n - 1) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(n - i);\n            std::reverse(nums.begin(), nums.begin() + n - i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124262,
      "stdout": "",
      "stderr": "tmpqoes3mno: /tmp/tmpqoes3mno.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n  // Write your code here.\n\tstd::vector<long> sorted;\n\tint n = nums.size();\n\tfor (int i = n; i > 0; i--) {\n\t\tauto it = std::find(nums.begin(), nums.end(), i);\n\t\tstd::reverse(nums.begin(), it + 1);\n\t\tstd::reverse(nums.begin(), nums.begin() + i);\n\t}\n\treturn nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124262,
      "stdout": "",
      "stderr": "tmp9m1jhcu8: /tmp/tmp9m1jhcu8.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    // Write your code here.\n    int n = nums.size();\n    for(int i = 0; i < n; i++){\n        int max_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.end() - i));\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.end() - i);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124262,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted;\n    for(int i=0;i<nums.size();i++){\n        sorted.push_back(i+1);\n    }\n    std::vector<long> result;\n    while(nums!=sorted){\n        int max_index=0;\n        for(int i=0;i<nums.size();i++){\n            if(nums[i]>nums[max_index]){\n                max_index=i;\n            }\n        }\n        std::reverse(nums.begin(),nums.begin()+max_index+1);\n        result.push_back(max_index+1);\n        std::reverse(nums.begin(),nums.begin()+nums.size());\n        result.push_back(nums.size());\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124277,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if(max_index != n - 1 - i) {\n            if(max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(n - i);\n            std::reverse(nums.begin(), nums.begin() + n - i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124256,
      "stdout": "",
      "stderr": "tmptshcplvh: /tmp/tmptshcplvh.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    // Write your code here.\n    std::vector<long> result;\n    int size = nums.size();\n    for(int i=size-1;i>=0;i--){\n        int max_index = std::distance(nums.begin(),std::max_element(nums.begin(),nums.begin()+i+1));\n        if(max_index!=i){\n            if(max_index!=0){\n                result.push_back(max_index+1);\n                std::reverse(nums.begin(),nums.begin()+max_index+1);\n            }\n            result.push_back(i+1);\n            std::reverse(nums.begin(),nums.begin()+i+1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124262,
      "stdout": "",
      "stderr": "tmp8f4s5goo: /tmp/tmp8f4s5goo.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int size = nums.size();\n    for (int i = 0; i < size; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if (max_index == size - 1 - i) {\n            continue;\n        }\n        if (max_index != 0) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        result.push_back(size - i);\n        std::reverse(nums.begin(), nums.begin() + size - i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124264,
      "stdout": "",
      "stderr": "tmp9t1x3vli: /tmp/tmp9t1x3vli.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for (int i = n - 1; i > 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124264,
      "stdout": "",
      "stderr": "tmpoyf5cnmp: /tmp/tmpoyf5cnmp.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for (int i = n; i > 1; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i) - nums.begin();\n        if (max_index != i - 1) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i);\n            std::reverse(nums.begin(), nums.begin() + i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124256,
      "stdout": "",
      "stderr": "tmp4s_6ly56: /tmp/tmp4s_6ly56.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if (max_index == n - i - 1) {\n            continue;\n        }\n        if (max_index != 0) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        result.push_back(n - i);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124264,
      "stdout": "",
      "stderr": "tmpoi9a04or: /tmp/tmpoi9a04or.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        result.push_back(max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n        result.push_back(n - i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124260,
      "stdout": "",
      "stderr": "tmps6534_tm: /tmp/tmps6534_tm.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "tmpni9_0ia_: /tmp/tmpni9_0ia_.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted_nums;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.begin() + i + 1));\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + i + 1);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for(int i=0;i<nums.size();i++){\n        int max_index=std::max_element(nums.begin(),nums.end()-i)-nums.begin();\n        if(max_index==nums.size()-i-1)\n            continue;\n        if(max_index!=0){\n            result.push_back(max_index+1);\n            std::reverse(nums.begin(),nums.begin()+max_index+1);\n        }\n        result.push_back(nums.size()-i);\n        std::reverse(nums.begin(),nums.end()-i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124264,
      "stdout": "",
      "stderr": "tmptkzef9mc: /tmp/tmptkzef9mc.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for (int i = n; i > 1; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i) - nums.begin();\n        if (max_index != i - 1) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(i);\n            std::reverse(nums.begin(), nums.begin() + i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124264,
      "stdout": "",
      "stderr": "tmp8yqt6b_2: /tmp/tmp8yqt6b_2.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted_nums = nums;\n    std::sort(sorted_nums.begin(), sorted_nums.end());\n    std::vector<long> result;\n    for (int i = 0; i < nums.size(); i++) {\n        int index = std::find(nums.begin(), nums.end(), sorted_nums[i]) - nums.begin();\n        if (index == 0) {\n            continue;\n        } else if (index == nums.size() - 1) {\n            result.push_back(nums.size());\n            std::reverse(nums.begin(), nums.end());\n        } else {\n            result.push_back(index + 1);\n            std::reverse(nums.begin(), nums.begin() + index + 1);\n            result.push_back(nums.size() - i);\n            std::reverse(nums.begin(), nums.end() - i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124264,
      "stdout": "",
      "stderr": "tmpkx3hgg1x: /tmp/tmpkx3hgg1x.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for(int i = nums.size() - 1; i > 0; i--) {\n        int max_index = 0;\n        for(int j = 0; j <= i; j++) {\n            if(nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if(max_index != i) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124264,
      "stdout": "",
      "stderr": "tmptrxq9mmz: /tmp/tmptrxq9mmz.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = i;\n        for (int j = 0; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124264,
      "stdout": "",
      "stderr": "tmpazirxvkc: /tmp/tmpazirxvkc.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted;\n    while(nums.size() > 0) {\n        long max_index = 0;\n        for(long i = 0; i < nums.size(); i++) {\n            if(nums[i] > nums[max_index]) {\n                max_index = i;\n            }\n        }\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.end());\n        sorted.push_back(nums[0]);\n        nums.erase(nums.begin());\n    }\n    return sorted;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124264,
      "stdout": "",
      "stderr": "tmp5imzuxbz: /tmp/tmp5imzuxbz.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for(int i = nums.size()-1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin()+i+1) - nums.begin();\n        if(max_index != i) {\n            if(max_index != 0) {\n                result.push_back(max_index+1);\n                std::reverse(nums.begin(), nums.begin()+max_index+1);\n            }\n            result.push_back(i+1);\n            std::reverse(nums.begin(), nums.begin()+i+1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124264,
      "stdout": "",
      "stderr": "tmpxgb32awl: /tmp/tmpxgb32awl.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "tmpxzrl5vg_: /tmp/tmpxzrl5vg_.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if (max_index != n - i - 1) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(n - i);\n            std::reverse(nums.begin(), nums.begin() + n - i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509861,
      "stdout": "",
      "stderr": "tmpn7tjfut4: /tmp/tmpn7tjfut4.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = i;\n        for (int j = 0; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index != i) {\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    // Write your code here.\n    for(int i=nums.size()-1;i>=0;i--){\n        int max_index=i;\n        for(int j=i-1;j>=0;j--){\n            if(nums[j]>nums[max_index]){\n                max_index=j;\n            }\n        }\n        if(max_index!=i){\n            std::reverse(nums.begin(),nums.begin()+max_index+1);\n            std::reverse(nums.begin(),nums.begin()+i+1);\n        }\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = i;\n        for (int j = 0; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index != i) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "tmp40051cqp: /tmp/tmp40051cqp.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    // Write your code here\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124264,
      "stdout": "",
      "stderr": "tmpab91ead0: /tmp/tmpab91ead0.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted_nums;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.begin() + i + 1));\n        if (max_index != i) {\n            if (max_index != 0) {\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for(int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = i;\n        for(int j = 0; j <= i; j++) {\n            if(nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if(max_index != i) {\n            result.push_back(max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124260,
      "stdout": "",
      "stderr": "tmpmvl8tr67: /tmp/tmpmvl8tr67.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "tmpxzrl5vg_: /tmp/tmpxzrl5vg_.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if (max_index == n - 1 - i) {\n            continue;\n        }\n        if (max_index != 0) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        result.push_back(n - i);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124264,
      "stdout": "",
      "stderr": "tmpeme9kvo9: /tmp/tmpeme9kvo9.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted_nums;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.end()));\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.end());\n        sorted_nums.push_back(max_index + 1);\n        sorted_nums.push_back(n - i);\n    }\n    return sorted_nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124264,
      "stdout": "",
      "stderr": "tmpljqp27c_: /tmp/tmpljqp27c_.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "tmpxzrl5vg_: /tmp/tmpxzrl5vg_.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted_nums;\n    int size = nums.size();\n    for (int i = 0; i < size; i++) {\n        int max_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.end()));\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.end());\n        sorted_nums.push_back(max_index + 1);\n        sorted_nums.push_back(size - i);\n    }\n    return sorted_nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124264,
      "stdout": "",
      "stderr": "tmp9nafg14y: /tmp/tmp9nafg14y.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    for(int i=0;i<nums.size();i++){\n        int max_index=0;\n        for(int j=0;j<nums.size()-i;j++){\n            if(nums[j]>nums[max_index]){\n                max_index=j;\n            }\n        }\n        if(max_index!=nums.size()-i-1){\n            std::reverse(nums.begin(),nums.begin()+max_index+1);\n            std::reverse(nums.begin(),nums.begin()+nums.size()-i);\n        }\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end() - i) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.end() - i);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n  std::vector<long> sorted_nums;\n  for (long i = nums.size() - 1; i >= 0; i--) {\n    auto it = std::max_element(nums.begin(), nums.begin() + i + 1);\n    if (it != nums.begin() + i) {\n      std::reverse(nums.begin(), it + 1);\n      std::reverse(nums.begin(), nums.begin() + i + 1);\n    }\n  }\n  return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = 0; i < nums.size(); i++) {\n        int max_index = std::max_element(nums.begin(), nums.end() - i) - nums.begin();\n        if (max_index != nums.size() - i - 1) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(nums.size() - i);\n            std::reverse(nums.begin(), nums.end() - i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124266,
      "stdout": "",
      "stderr": "tmpgsg5vva_: /tmp/tmpgsg5vva_.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    // Write your code here.\n    std::vector<long> result;\n    int size = nums.size();\n    for(int i = size; i > 0; i--){\n        int max_index = std::max_element(nums.begin(), nums.begin() + i) - nums.begin();\n        if(max_index != i - 1){\n            if(max_index != 0){\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i);\n            std::reverse(nums.begin(), nums.begin() + i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124266,
      "stdout": "",
      "stderr": "tmpug747mva: /tmp/tmpug747mva.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1665509860,
      "stdout": "",
      "stderr": "tmp_i30kvv4: /tmp/tmp_i30kvv4.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n  std::vector<long> result;\n  for (int i = nums.size() - 1; i >= 0; i--) {\n    int max_index = i;\n    for (int j = 0; j <= i; j++) {\n      if (nums[j] > nums[max_index]) {\n        max_index = j;\n      }\n    }\n    if (max_index != i) {\n      if (max_index != 0) {\n        result.push_back(max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n      }\n      result.push_back(i + 1);\n      std::reverse(nums.begin(), nums.begin() + i + 1);\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124266,
      "stdout": "",
      "stderr": "tmpywn40qza: /tmp/tmpywn40qza.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    // Write your code here.\n    for(int i=nums.size()-1;i>=0;i--){\n        int max_index = i;\n        for(int j=0;j<=i;j++){\n            if(nums[j]>nums[max_index]){\n                max_index = j;\n            }\n        }\n        reverse(nums.begin(),nums.begin()+max_index+1);\n        reverse(nums.begin(),nums.begin()+i+1);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124266,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted_nums;\n    std::vector<long>::iterator it;\n    long max;\n    long max_index;\n    long temp;\n    while(nums.size() > 0) {\n        max = *std::max_element(nums.begin(), nums.end());\n        it = std::find(nums.begin(), nums.end(), max);\n        max_index = std::distance(nums.begin(), it);\n        sorted_nums.push_back(max);\n        nums.erase(nums.begin() + max_index);\n    }\n    return sorted_nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124266,
      "stdout": "",
      "stderr": "tmp1px41fwb: /tmp/tmp1px41fwb.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = 0;\n        for (int j = 0; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + i + 1);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124266,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for(int i=0; i<n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if(max_index == n-1-i) {\n            continue;\n        }\n        if(max_index != 0) {\n            result.push_back(max_index+1);\n            std::reverse(nums.begin(), nums.begin()+max_index+1);\n        }\n        result.push_back(n-i);\n        std::reverse(nums.begin(), nums.begin()+n-i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "tmpyjx2lhkf: /tmp/tmpyjx2lhkf.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    // Write your code here.\n    std::vector<long> result;\n    for(int i = nums.size() - 1; i >= 0; i--){\n        int max_index = 0;\n        for(int j = 0; j <= i; j++){\n            if(nums[j] > nums[max_index]){\n                max_index = j;\n            }\n        }\n        if(max_index != i){\n            if(max_index != 0){\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124266,
      "stdout": "",
      "stderr": "tmp6rvc23ho: /tmp/tmp6rvc23ho.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.begin() + i + 1));\n        if (max_index != i) {\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n            result.push_back(max_index + 1);\n            result.push_back(i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124266,
      "stdout": "",
      "stderr": "tmpcuvmk_kn: /tmp/tmpcuvmk_kn.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted_nums;\n    for (int i = 0; i < nums.size(); i++) {\n        // Find the index of the largest element in the unsorted part of the array\n        int max_index = 0;\n        for (int j = 0; j < nums.size() - i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        // Flip the largest element to the front\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        // Flip the largest element to the back\n        std::reverse(nums.begin(), nums.begin() + nums.size() - i);\n        sorted_nums.push_back(nums[nums.size() - i - 1]);\n    }\n    return sorted_nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124266,
      "stdout": "",
      "stderr": "tmpsylr69m5: /tmp/tmpsylr69m5.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    std::vector<long>::iterator it;\n    long max_index, max_value;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        max_value = *std::max_element(nums.begin(), nums.begin() + i + 1);\n        max_index = std::distance(nums.begin(), std::find(nums.begin(), nums.begin() + i + 1, max_value));\n        if (max_index != i) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124266,
      "stdout": "",
      "stderr": "tmpm6s72_61: /tmp/tmpm6s72_61.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    // Write your code here.\n    std::vector<long> result;\n    int n=nums.size();\n    for(int i=n-1;i>=0;i--){\n        int max_index=std::max_element(nums.begin(),nums.begin()+i+1)-nums.begin();\n        if(max_index!=i){\n            if(max_index!=0){\n                result.push_back(max_index+1);\n                std::reverse(nums.begin(),nums.begin()+max_index+1);\n            }\n            result.push_back(i+1);\n            std::reverse(nums.begin(),nums.begin()+i+1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124266,
      "stdout": "",
      "stderr": "tmproc2p9om: /tmp/tmproc2p9om.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted_nums;\n    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.end()));\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n        sorted_nums.push_back(max_index + 1);\n        sorted_nums.push_back(n - i);\n    }\n    return sorted_nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124266,
      "stdout": "",
      "stderr": "tmpbitos6yp: /tmp/tmpbitos6yp.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    for(int i=nums.size()-1;i>=0;i--){\n        int max_index=i;\n        for(int j=0;j<=i;j++){\n            if(nums[j]>nums[max_index]){\n                max_index=j;\n            }\n        }\n        if(max_index!=i){\n            std::reverse(nums.begin(),nums.begin()+max_index+1);\n            std::reverse(nums.begin(),nums.begin()+i+1);\n        }\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124266,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted_nums;\n    std::vector<long>::iterator it;\n    std::vector<long>::iterator it2;\n    std::vector<long>::iterator it3;\n    std::vector<long>::iterator it4;\n    std::vector<long>::iterator it5;\n    std::vector<long>::iterator it6;\n    std::vector<long>::iterator it7;\n    std::vector<long>::iterator it8;\n    std::vector<long>::iterator it9;\n    std::vector<long>::iterator it10;\n    std::vector<long>::iterator it11;\n    std::vector<long>::iterator it12;\n    std::vector<long>::iterator it13;\n    std::vector<long>::iterator it14;\n    std::vector<long>::iterator it15;\n    std::vector<long>::iterator it16;\n    std::vector<long>::iterator it17;\n    std::vector<long>::iterator it18;\n    std::vector<long>::iterator it19;\n    std::vector<long>::iterator it20;\n    std::vector<long>::iterator it21;\n    std::vector<long>::iterator it22;\n    std::vector<long>::iterator it23;\n    std::vector<long>::iterator it24;\n    std::vector<long>::iterator it25;\n    std::vector<long>::iterator it26;\n    std::vector<long>::iterator it27;\n    std::vector<long>::iterator it28;\n    std::vector<long>::iterator it29;\n    std::vector<long>::iterator it30;\n    std::vector<long>::iterator it31;\n    std::vector<long>::iterator it32;\n    std::vector<long>::iterator it33;\n    std::vector<long>::iterator it34;\n    std::vector<long>::iterator it35;\n    std::vector<long>::iterator it36;\n    std::vector<long>::iterator it37;\n    std::vector<long>::iterator it38;\n    std::vector<\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124266,
      "stdout": "",
      "stderr": "/tmp/tmpntazomt3.cpp: In function \u2018std::vector<long int> pancake_sort(std::vector<long int>)\u2019:\n/tmp/tmpntazomt3.cpp:44:16: error: template argument 1 is invalid\n   44 |     std::vector<\n      |                ^\n/tmp/tmpntazomt3.cpp:44:16: error: template argument 2 is invalid\n/tmp/tmpntazomt3.cpp:45:1: error: expected unqualified-id before \u2018}\u2019 token\n   45 | }\n      | ^\n/tmp/tmpntazomt3.cpp:45:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int size = nums.size();\n    for (int i = 0; i < size; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if (max_index != size - 1) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(size - i);\n            std::reverse(nums.begin(), nums.end() - i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "tmpjtcbvom5: /tmp/tmpjtcbvom5.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted_nums;\n    for (int i = 0; i < nums.size(); i++) {\n        sorted_nums.push_back(i+1);\n    }\n    std::vector<long> flips;\n    for (int i = 0; i < nums.size(); i++) {\n        for (int j = 0; j < nums.size(); j++) {\n            if (nums[j] == sorted_nums[i]) {\n                if (j != 0) {\n                    std::reverse(nums.begin(), nums.begin() + j + 1);\n                    flips.push_back(j+1);\n                }\n                std::reverse(nums.begin(), nums.begin() + i + 1);\n                flips.push_back(i+1);\n                break;\n            }\n        }\n    }\n    return flips;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124266,
      "stdout": "",
      "stderr": "tmpuz3q5v3b: /tmp/tmpuz3q5v3b.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n  std::vector<long> result;\n  int size = nums.size();\n  for (int i = 0; i < size; i++) {\n    int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n    if (max_index != size - i - 1) {\n      if (max_index != 0) {\n        result.push_back(max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n      }\n      result.push_back(size - i);\n      std::reverse(nums.begin(), nums.begin() + size - i);\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124266,
      "stdout": "",
      "stderr": "tmpqzl01dxv: /tmp/tmpqzl01dxv.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for(int i = nums.size()-1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if(max_index != i) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124266,
      "stdout": "",
      "stderr": "tmpz4kzuxi9: /tmp/tmpz4kzuxi9.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    for (int i = 0; i < nums.size(); i++) {\n        int max_index = i;\n        for (int j = i + 1; j < nums.size(); j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index != i) {\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124266,
      "stdout": "",
      "stderr": "tmpk74gtvv8: /tmp/tmpk74gtvv8.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    // Write your code here.\n    std::vector<long> result;\n    int n = nums.size();\n    for(int i = 0; i < n; i++){\n        int max_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.end()));\n        if(max_index != n-1){\n            if(max_index != 0){\n                result.push_back(max_index+1);\n                std::reverse(nums.begin(), nums.begin()+max_index+1);\n            }\n            result.push_back(n-i);\n            std::reverse(nums.begin(), nums.begin()+n-i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124266,
      "stdout": "",
      "stderr": "tmpcgfe9i1h: /tmp/tmpcgfe9i1h.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted;\n    for (int i = 0; i < nums.size(); i++) {\n        sorted.push_back(i + 1);\n    }\n    for (int i = 0; i < nums.size(); i++) {\n        int index = std::find(nums.begin(), nums.end(), sorted[i]) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + index + 1);\n        std::reverse(nums.begin(), nums.begin() + i + 1);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124266,
      "stdout": "",
      "stderr": "tmp0xokw1hc: /tmp/tmp0xokw1hc.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        result.push_back(max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n        result.push_back(n - i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124260,
      "stdout": "",
      "stderr": "tmps6534_tm: /tmp/tmps6534_tm.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        auto it = std::max_element(nums.begin(), nums.begin() + i + 1);\n        if (it != nums.begin() + i) {\n            result.push_back(it - nums.begin() + 1);\n            std::reverse(nums.begin(), it + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "tmppu_28zjo: /tmp/tmppu_28zjo.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n    std::vector<long> sorted_nums;\n    for (int i = 0; i < nums.size(); i++) {\n        sorted_nums.push_back(nums[i]);\n    }\n    std::sort(sorted_nums.begin(), sorted_nums.end());\n    std::vector<long> result;\n    while (nums != sorted_nums) {\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums[i] == sorted_nums[i]) {\n                continue;\n            }\n            int index = std::find(nums.begin(), nums.end(), sorted_nums[i]) - nums.begin();\n            result.push_back(index + 1);\n            std::reverse(nums.begin(), nums.begin() + index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "tmpfjf852yg: /tmp/tmpfjf852yg.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}