{
  "name": "mbpp_160_find_solution",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nstd::optional<long> find_solution(long a, long b, long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_160_find_solution.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = find_solution;\n    assert(candidate((2), (3), (7)) == std::make_tuple(2, 1));\n    assert(candidate((4), (2), (7)) == std::nullopt);\n    assert(candidate((1), (13), (17)) == std::make_tuple(4, 1));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    if (n % gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / b;\n    while (a * x + b * y != n) {\n        if (a * x + b * y < n) {\n            x++;\n        } else {\n            y--;\n        }\n    }\n    return std::make_tuple(x, y);",
    "    if (a == 0 && b == 0 && n == 0) {\n        return std::nullopt;\n    }\n    if (a == 0 && b == 0 && n != 0) {\n        return std::nullopt;\n    }\n    if (a == 0 && b != 0) {\n        if (n % b == 0) {\n            return std::make_tuple(0, n / b);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0 && a != 0) {\n        if (n % a == 0) {\n            return std::make_tuple(n / a, 0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long x = 0;\n    long y = 0;\n    long gcd = std::__gcd(a, b);\n    if (n % gcd != 0) {\n        return std::nullopt;\n    }\n    long a1 = a / gcd;\n    long b1 = b / gcd;\n    long n1 = n / gcd;\n    long x1 = 0;\n    long y1 = 0;\n    long x2 = 1;\n    long y2 = 0;\n    while (a1 != 0) {\n        long q = b1 / a1;\n        long r = b1 % a1;\n        long x = x2 - q * x1;\n        long y = y2 - q * y1;\n        b1 = a1;\n        a1 = r;\n        x2 = x1;\n        x1 = x;\n        y2 = y1;\n        y1 = y;\n    }\n    if (b1 == 1) {\n        x = x2 * n1;\n        y = y2 * n1;\n        return std::make_tuple(x, y);\n    }\n    return std::nullopt;",
    "    if (n % std::gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / b;\n    while (a * x + b * y != n) {\n        if (a * x + b * y < n) {\n            x++;\n        } else {\n            y--;\n        }\n    }\n    return std::make_tuple(x, y);",
    "    if (n % std::gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = std::gcd(a, b);\n    long a1 = a / d, b1 = b / d, n1 = n / d;\n    long r1 = 1, r2 = 0, r = a1;\n    long q = b1 / r;\n    long s1 = 0, s2 = 1, s = b1;\n    while (r != 0) {\n        long t = s - q * r;\n        s = r;\n        r = t;\n        t = s1 - q * r1;\n        s1 = r1;\n        r1 = t;\n        t = s2 - q * r2;\n        s2 = r2;\n        r2 = t;\n        q = s / r;\n    }\n    x = n1 * s1 / s;\n    y = n1 * s2 / s;\n    return std::make_pair(x, y);",
    "    if (n % std::__gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = std::__gcd(a, b);\n    long x1 = 1, y1 = 0, x2 = 0, y2 = 1;\n    while (a % d != 0 || b % d != 0) {\n        long q = a / d;\n        long r = a % d;\n        long x = x2 - q * x1;\n        long y = y2 - q * y1;\n        a = d;\n        b = r;\n        d = std::__gcd(a, b);\n        x2 = x1;\n        x1 = x;\n        y2 = y1;\n        y1 = y;\n    }\n    x = x2 * (n / d);\n    y = y2 * (n / d);\n    return std::make_optional(x);",
    "    if (n % gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = gcd(a, b);\n    x = n / d * b / a;\n    y = (n - a * x) / b;\n    return std::make_tuple(x, y);",
    "    if (n % gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / b;\n    while (x * a + y * b != n) {\n        if (x * a + y * b < n) {\n            x++;\n        } else {\n            y--;\n        }\n    }\n    return std::make_tuple(x, y);",
    "    if (n % __gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = __gcd(a, b);\n    x = n / d * (b / d);\n    y = n / d * (a / d);\n    return std::make_tuple(x, y);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return {0, 0};\n        } else {\n            return {};\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return {0, n / b};\n        } else {\n            return {};\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return {n / a, 0};\n        } else {\n            return {};\n        }\n    }\n    long g = std::gcd(a, b);\n    if (n % g != 0) {\n        return {};\n    }\n    long x, y;\n    std::tie(x, y) = find_solution(b / g, a / g, n / g);\n    return {y, x - y * (a / b)};",
    "    if (n % gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / b;\n    while (a * x + b * y != n) {\n        if (a * x + b * y > n) {\n            y--;\n        } else {\n            x++;\n        }\n    }\n    return std::make_tuple(x, y);",
    "    if (a == 0 && b == 0) {\n        return n == 0 ? std::optional<long>(0) : std::nullopt;\n    }\n    if (a == 0) {\n        return n % b == 0 ? std::optional<long>(n / b) : std::nullopt;\n    }\n    if (b == 0) {\n        return n % a == 0 ? std::optional<long>(n / a) : std::nullopt;\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    a /= d;\n    b /= d;\n    n /= d;\n    long x, y;\n    std::tie(x, y) = find_solution(b, a % b, n);\n    return std::optional<long>(x - (a / b) * y);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    a /= g;\n    b /= g;\n    n /= g;\n    long x = 0, y = n / b;\n    while (x * a + y * b < n) {\n        ++x;\n        --y;\n    }\n    while (x * a + y * b > n) {\n        --x;\n        ++y;\n    }\n    if (x * a + y * b == n) {\n        return std::make_optional(x);\n    } else {\n        return std::nullopt;\n    }",
    "    if (n % gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = 0;\n    long d = gcd(a, b);\n    x = n / d * b / a;\n    y = (n - a * x) / b;\n    return std::make_tuple(x, y);",
    "    if (a == 0 && b == 0) {\n        return std::nullopt;\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        }\n        return std::nullopt;\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        }\n        return std::nullopt;\n    }\n    if (n % gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = gcd(a, b);\n    long a1 = a / d, b1 = b / d, n1 = n / d;\n    extended_euclid(a1, b1, x, y);\n    x *= n1;\n    y *= n1;\n    return std::make_optional(x);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (n % gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x, y;\n    long d = extended_gcd(a, b, x, y);\n    return std::make_optional(x * (n / d));",
    "    if (n % gcd(a, b) != 0) {\n        return {};\n    }\n    long x = 0, y = 0;\n    long d = gcd(a, b);\n    x = n / d * b / a;\n    y = (n - a * x) / b;\n    return {x, y};",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    long x0 = 0, y0 = 1;\n    long x1 = 1, y1 = 0;\n    while (a % b != 0) {\n        long q = a / b;\n        long r = a % b;\n        long x2 = x0 - q * x1;\n        long y2 = y0 - q * y1;\n        x0 = x1;\n        y0 = y1;\n        x1 = x2;\n        y1 = y2;\n        a = b;\n        b = r;\n    }\n    long x = x1 * (n / d);\n    long y = y1 * (n / d);\n    return std::make_optional(x);",
    "    if (a == 0) {\n        return n == b ? std::make_optional(0) : std::nullopt;\n    }\n    auto x = find_solution(b % a, a, n);\n    if (!x) {\n        return std::nullopt;\n    }\n    return std::make_optional(b / a * x.value() - b / a * (b / a) * x.value() + x.value());",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return {};\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(n / b);\n        } else {\n            return {};\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return {};\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return {};\n    }\n    long x = 0;\n    long y = n / g;\n    while (y * a > n) {\n        y--;\n    }\n    while (y * a < n) {\n        y++;\n    }\n    if (y * a != n) {\n        return {};\n    }\n    x = (n - b * y) / a;\n    return std::make_optional(x);",
    "    if (n % std::gcd(a, b) != 0) {\n        return {};\n    }\n    long x = 0, y = 0;\n    long d = std::gcd(a, b);\n    x = n / d * (b / d);\n    y = n / d * (a / d);\n    return {x, y};",
    "    if (a == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    auto x = find_solution(b % a, a, n % a);\n    if (!x) {\n        return std::nullopt;\n    }\n    return std::make_optional(b / a * x.value() - n / a);",
    "    if (n % std::gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = std::gcd(a, b);\n    x = n / d * (b / d);\n    y = n / d * (a / d);\n    return std::make_tuple(x, y);",
    "  if (a == 0 && b == 0) {\n    return std::nullopt;\n  }\n  if (a == 0) {\n    return n / b;\n  }\n  if (b == 0) {\n    return n / a;\n  }\n  long g = std::gcd(a, b);\n  if (n % g != 0) {\n    return std::nullopt;\n  }\n  a /= g;\n  b /= g;\n  n /= g;\n  long x = 0;\n  long y = n / b;\n  while (x * a + y * b < n) {\n    x++;\n    y--;\n  }\n  return std::make_tuple(x, y);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long p = n / g;\n    long q = 0;\n    while (p % a != 0) {\n        q += b / g;\n        p += n;\n    }\n    return std::make_optional(p / a - q * (b / g));",
    "    if (a == 0 && b == 0) {\n        return n == 0 ? std::optional<long>{0} : std::nullopt;\n    }\n    if (a == 0) {\n        return n % b == 0 ? std::optional<long>{n / b} : std::nullopt;\n    }\n    if (b == 0) {\n        return n % a == 0 ? std::optional<long>{n / a} : std::nullopt;\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    std::tie(x, y) = find_solution(b / d, a / d, n / d);\n    return std::optional<long>{x * (a / d) + y * (b / d)};",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long a1 = a / d, b1 = b / d, n1 = n / d;\n    std::tie(x, y) = find_solution(b1, a1 % b1, n1);\n    return std::make_optional(b1 * x + (a1 % b1) * y);",
    "    if (a == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long x = n / a;\n    long y = (n - a * x) / b;\n    if (a * x + b * y == n) {\n        return std::make_optional(x);\n    } else {\n        return std::nullopt;\n    }",
    "    if (a == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        }\n        return std::nullopt;\n    }\n    long x = n / a;\n    long y = (n - a * x) / b;\n    if (a * x + b * y == n) {\n        return std::make_optional(x);\n    }\n    return std::nullopt;",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long gcd = std::__gcd(a, b);\n    if (n % gcd != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = std::__gcd(a, b);\n    long a1 = a / d;\n    long b1 = b / d;\n    long n1 = n / d;\n    extended_euclid(a1, b1, x, y);\n    return std::make_optional(x * n1);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long gcd = std::__gcd(a, b);\n    if (n % gcd != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / b;\n    while (a * x + b * y != n) {\n        if (a * x + b * y < n) {\n            x += b / gcd;\n        } else {\n            y -= a / gcd;\n        }\n    }\n    return std::make_optional(x);",
    "    if (n % __gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / b;\n    long g = __gcd(a, b);\n    while (x < n / a) {\n        if ((n - a * x) % b == 0) {\n            return std::make_tuple(x, (n - a * x) / b);\n        }\n        x += b / g;\n        y -= a / g;\n    }\n    return std::nullopt;",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x0, y0;\n    std::tie(x0, y0) = find_solution(b / g, a / g, n / g).value();\n    return std::make_optional(std::make_pair(y0, x0 - y0 * (a / b)));",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long gcd = std::__gcd(a, b);\n    if (n % gcd != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / b;\n    while (a * x + b * y != n) {\n        if (a * x + b * y < n) {\n            x += b / gcd;\n        } else {\n            y -= a / gcd;\n        }\n    }\n    return std::make_optional(x);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        }\n        return std::nullopt;\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        }\n        return std::nullopt;\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        }\n        return std::nullopt;\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    a /= g;\n    b /= g;\n    n /= g;\n    long x, y;\n    std::tie(x, y) = find_solution(b, a % b, n).value();\n    return std::make_optional(y - (a / b) * x);",
    "    if (n % std::__gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = std::__gcd(a, b);\n    x = n / d * b / a;\n    y = (n - a * x) / b;\n    return std::make_tuple(x, y);",
    "    long x = 0, y = 0;\n    if (n % gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long d = gcd(a, b);\n    x = (n / d) * (b / d);\n    y = (n / d) * (a / d);\n    return std::make_optional(x);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return {0, 0};\n        } else {\n            return {};\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return {0, n / b};\n        } else {\n            return {};\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return {n / a, 0};\n        } else {\n            return {};\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return {};\n    }\n    a /= g;\n    b /= g;\n    n /= g;\n    long x, y;\n    std::tie(x, y) = find_solution(b, a % b, n).value();\n    return {y, x - y * (a / b)};",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / d;\n    while (y * a > n) {\n        y--;\n    }\n    while (y * a < n) {\n        y++;\n    }\n    if (y * a != n) {\n        return std::nullopt;\n    }\n    x = (n - b * y) / a;\n    return std::make_optional(x);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return {0, 0};\n        } else {\n            return {};\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return {0, n / b};\n        } else {\n            return {};\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return {n / a, 0};\n        } else {\n            return {};\n        }\n    }\n    long g = std::gcd(a, b);\n    if (n % g != 0) {\n        return {};\n    }\n    long x = 0;\n    long y = n / g;\n    while (y * a > n) {\n        y--;\n    }\n    while (y * a < n) {\n        y++;\n    }\n    if (y * a != n) {\n        return {};\n    }\n    x = (n - b * y) / a;\n    return {x, y};",
    "    if (a == 0 && b == 0) {\n        return std::nullopt;\n    }\n    if (a == 0) {\n        return n / b;\n    }\n    if (b == 0) {\n        return n / a;\n    }\n    if (n % (a * b) == 0) {\n        return n / (a * b);\n    }\n    return std::nullopt;",
    "  if (a == 0 && b == 0) {\n    return std::nullopt;\n  }\n  if (a == 0) {\n    if (n % b == 0) {\n      return std::make_optional(0);\n    } else {\n      return std::nullopt;\n    }\n  }\n  if (b == 0) {\n    if (n % a == 0) {\n      return std::make_optional(n / a);\n    } else {\n      return std::nullopt;\n    }\n  }\n  if (n % std::__gcd(a, b) != 0) {\n    return std::nullopt;\n  }\n  long x = 0;\n  long y = n / b;\n  while (a * x + b * y != n) {\n    if (a * x + b * y < n) {\n      x++;\n    } else {\n      y--;\n    }\n  }\n  return std::make_optional(x);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(n / b);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long a1 = a / g;\n    long b1 = b / g;\n    long n1 = n / g;\n    std::optional<long> x = find_solution(b1, a1 % b1, n1);\n    if (x) {\n        return std::make_optional(x.value() * a1);\n    } else {\n        return std::nullopt;\n    }",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    std::optional<long> x = find_solution(b / d, a / d, n / d);\n    if (x) {\n        return std::make_optional(x.value() * b / d);\n    } else {\n        return std::nullopt;\n    }",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / g;\n    while (y * a > n) {\n        y--;\n    }\n    while (y * a < n) {\n        y++;\n    }\n    if (y * a != n) {\n        return std::nullopt;\n    }\n    x = (n - b * y) / a;\n    return std::make_optional(x);",
    "    if (a == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long x = n / a;\n    long y = (n - a * x) / b;\n    if (a * x + b * y == n) {\n        return std::make_optional(x);\n    } else {\n        return std::nullopt;\n    }",
    "    if (a == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    auto x = find_solution(b % a, a, n % a);\n    if (!x.has_value()) {\n        return std::nullopt;\n    }\n    return std::make_optional(x.value() - (b / a) * (n / a));",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        }\n        return std::nullopt;\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        }\n        return std::nullopt;\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        }\n        return std::nullopt;\n    }\n    long g = std::gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long a1 = a / g;\n    long b1 = b / g;\n    long n1 = n / g;\n    std::optional<long> x = find_solution(b1, a1 % b1, n1);\n    if (x.has_value()) {\n        return std::make_optional(x.value() * a1 + (n1 - x.value() * b1) / a1);\n    }\n    return std::nullopt;",
    "    if (a == 0 && b == 0) {\n        return std::nullopt;\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long x = 0;\n    long y = n / b;\n    while (a * x + b * y != n) {\n        if (y < 0) {\n            return std::nullopt;\n        }\n        x += 1;\n        y = (n - a * x) / b;\n    }\n    return std::make_optional(x);",
    "    // ax + by = n\n    // ax = n - by\n    // x = (n - by) / a\n    // x = (n - by) / a\n    // x = (n - by) / a\n    // x = (n - by) / a\n    // x = (n - by) / a\n    // x = (n - by) / a\n    // x = (n - by) / a\n    // x = (n - by) / a\n    // x = (n - by) / a\n    // x = (n - by) / a\n    // x = (n - by) / a\n    // x = (n - by) / a\n    // x = (n - by) / a\n    // x = (n - by) / a\n    // x = (n - by) / a\n    // x = (n - by) / a\n    // x = (n - by) / a\n    // x = (n - by) / a\n    // x = (n - by) / a\n    // x = (n - by) / a\n    // x = (n - by) / a\n    // x = (n - by) / a\n    // x = (n - by) / a\n    // x = (n - by) / a\n    // x = (n - by) / a\n    // x = (n - by) / a\n    // x = (n - by) / a\n    // x = (n - by) / a\n    // x = (n - by) / a\n    // x = (n - by) / a\n    // x = (n - by) / a\n    // x = (n - by) / a\n    // x = (n - by) / a\n    // x = (n - by) / a\n    // x = (n - by) / a\n    // x = (n - by) / a\n    // x = (n - by) / a\n    // x = (n - by) / a\n    // x = (n - by) / a\n    // x = (n - by) / a\n    // x = (n - by) / a\n    // x",
    "    if (a == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long x = n / a;\n    long y = (n - a * x) / b;\n    if (a * x + b * y == n) {\n        return std::make_optional(x);\n    } else {\n        return std::nullopt;\n    }",
    "    if (n % std::gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = std::gcd(a, b);\n    x = n / d * (b / d);\n    y = n / d * (a / d);\n    return std::make_tuple(x, y);",
    "    if (a == 0 && b == 0) {\n        return n == 0 ? std::optional<long>(0) : std::nullopt;\n    }\n    if (a == 0) {\n        return n % b == 0 ? std::optional<long>(n / b) : std::nullopt;\n    }\n    if (b == 0) {\n        return n % a == 0 ? std::optional<long>(n / a) : std::nullopt;\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    std::tie(x, y) = find_solution(b / g, a / g, n / g).value();\n    return std::optional<long>((x * (b / g) + y * (a / g)));",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return {0, 0};\n        } else {\n            return {};\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return {0, n / b};\n        } else {\n            return {};\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return {n / a, 0};\n        } else {\n            return {};\n        }\n    }\n    long g = std::gcd(a, b);\n    if (n % g != 0) {\n        return {};\n    }\n    long x = 0, y = 0;\n    long d = n / g;\n    std::tie(x, y) = find_solution(b / g, a / g, d);\n    return {y, x - y * (a / b)};",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    return std::make_optional(n / g);",
    "    if (a == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long x = n / a;\n    long y = (n - a * x) / b;\n    if (a * x + b * y == n) {\n        return std::make_optional(x);\n    } else {\n        return std::nullopt;\n    }",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / b;\n    long r = a % b;\n    while (r > 0) {\n        long q = a / b;\n        long t = x - q * y;\n        x = y;\n        y = t;\n        a = b;\n        b = r;\n        r = a % b;\n    }\n    return std::make_optional(x * (n / g));",
    "    if (n % std::__gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / b;\n    long g = std::__gcd(a, b);\n    while (a * x + b * y != n) {\n        if (a * x + b * y > n) {\n            y--;\n        } else {\n            x++;\n        }\n    }\n    return std::make_tuple(x, y);",
    "    if (a == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    auto x = find_solution(b % a, a, n % a);\n    if (!x) {\n        return std::nullopt;\n    }\n    return std::make_optional(b / a * x.value() - n / a);",
    "    if (a == 0 && b == 0) {\n        return std::nullopt;\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_tuple(0, n / b);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_tuple(n / a, 0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long x = 0;\n    long y = 0;\n    long gcd = std::__gcd(a, b);\n    if (n % gcd != 0) {\n        return std::nullopt;\n    }\n    a /= gcd;\n    b /= gcd;\n    n /= gcd;\n    while (a * x <= n) {\n        if ((n - a * x) % b == 0) {\n            y = (n - a * x) / b;\n            return std::make_tuple(x, y);\n        }\n        x++;\n    }\n    return std::nullopt;",
    "    if (a == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        }\n        return std::nullopt;\n    }\n    auto x = find_solution(b % a, a, n % a);\n    if (!x) {\n        return std::nullopt;\n    }\n    return std::make_optional(b / a * x.value() - n / a);",
    "    if (n % std::gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / b;\n    while (a * x + b * y != n) {\n        if (a * x + b * y > n) {\n            y--;\n        } else {\n            x++;\n        }\n    }\n    return std::make_optional(x);",
    "  if (a == 0 && b == 0) {\n    if (n == 0) {\n      return {0, 0};\n    } else {\n      return {};\n    }\n  }\n  if (a == 0) {\n    if (n % b == 0) {\n      return {0, n / b};\n    } else {\n      return {};\n    }\n  }\n  if (b == 0) {\n    if (n % a == 0) {\n      return {n / a, 0};\n    } else {\n      return {};\n    }\n  }\n  long x, y;\n  long g = std::__gcd(a, b);\n  if (n % g != 0) {\n    return {};\n  }\n  a /= g;\n  b /= g;\n  n /= g;\n  std::tie(x, y) = find_solution(b, a % b, n);\n  return {y, x - (a / b) * y};",
    "    long x = 1, y = 0;\n    long x1 = 0, y1 = 1;\n    long q, r, m, n1;\n    while (a != 0) {\n        q = b / a;\n        r = b % a;\n        m = x - q * x1;\n        n1 = y - q * y1;\n        x = x1;\n        y = y1;\n        x1 = m;\n        y1 = n1;\n        b = a;\n        a = r;\n    }\n    if (b == 1) {\n        return std::make_optional(x * n);\n    }\n    return std::nullopt;",
    "    if (n % gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = gcd(a, b);\n    x = n / d * b / a;\n    y = (n - a * x) / b;\n    return std::make_tuple(x, y);",
    "    if (n % std::gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / b;\n    while (x * a + y * b != n) {\n        if (x * a + y * b < n) {\n            x++;\n        } else {\n            y--;\n        }\n    }\n    return std::make_tuple(x, y);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = n / g;\n    while (y * a > n) {\n        y--;\n    }\n    x = (n - y * a) / b;\n    return std::make_optional(x);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return {0, 0};\n        } else {\n            return {};\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return {0, n / b};\n        } else {\n            return {};\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return {n / a, 0};\n        } else {\n            return {};\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return {};\n    }\n    a /= g;\n    b /= g;\n    n /= g;\n    long x = 0, y = n;\n    while (y >= 0) {\n        long t = a * x + b * y;\n        if (t == n) {\n            return {x, y};\n        }\n        if (t < n) {\n            x += 1;\n        } else {\n            y -= 1;\n        }\n    }\n    return {};",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long a1 = a / g;\n    long b1 = b / g;\n    long n1 = n / g;\n    long x, y;\n    std::tie(x, y) = find_solution(b1, a1 % b1, n1).value();\n    return std::make_optional(b1 * x + (a1 % b1) * y);",
    "    if (n % gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / b;\n    while (a * x + b * y != n) {\n        if (a * x + b * y > n) {\n            y--;\n        } else {\n            x++;\n        }\n    }\n    return std::make_tuple(x, y);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    a /= g;\n    b /= g;\n    n /= g;\n    long x = 0, y = 0;\n    long d = 1;\n    while (d <= n) {\n        d *= 2;\n    }\n    d /= 2;\n    while (d > 0) {\n        if (x + d <= n) {\n            x += d;\n            y += a * d / b;\n        }\n        d /= 2;\n    }\n    return std::make_optional(x);",
    "    if (a == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    auto x = find_solution(b % a, a, n % a);\n    if (!x) {\n        return std::nullopt;\n    }\n    return std::make_optional(b / a * x.value() - n / a);",
    "    if (a == 0 && b == 0) {\n        return n == 0 ? std::make_optional(0) : std::nullopt;\n    }\n    if (a == 0) {\n        return n % b == 0 ? std::make_optional(n / b) : std::nullopt;\n    }\n    if (b == 0) {\n        return n % a == 0 ? std::make_optional(n / a) : std::nullopt;\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    std::tie(x, y) = find_solution(b / d, a / d, n / d).value();\n    return std::make_optional(std::make_tuple(y, x - y * (a / b)));",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long gcd = std::__gcd(a, b);\n    if (n % gcd != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / b;\n    while (a * x + b * y != n) {\n        if (a * x + b * y > n) {\n            y--;\n        } else {\n            x++;\n        }\n    }\n    return std::make_optional(x);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::optional<long>{0};\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::optional<long>{0, n / b};\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::optional<long>{n / a, 0};\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x0 = 0, y0 = 0;\n    long x1 = 1, y1 = 0;\n    long x2 = 0, y2 = 1;\n    long q = 0, r = 0;\n    while (b != 0) {\n        q = a / b;\n        r = a % b;\n        x0 = x2;\n        y0 = y2;\n        x2 = x1 - q * x2;\n        y2 = y1 - q * y2;\n        x1 = x0;\n        y1 = y0;\n        a = b;\n        b = r;\n    }\n    return std::optional<long>{x1 * (n / g), y1 * (n / g)};",
    "    if (n % std::__gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long g = std::__gcd(a, b);\n    a /= g;\n    b /= g;\n    n /= g;\n    long x1 = 1, y1 = 0;\n    long x2 = 0, y2 = 1;\n    while (b != 0) {\n        long q = a / b;\n        long r = a % b;\n        long x = x1 - q * x2;\n        long y = y1 - q * y2;\n        a = b;\n        b = r;\n        x1 = x2;\n        x2 = x;\n        y1 = y2;\n        y2 = y;\n    }\n    x = x1 * n;\n    y = y1 * n;\n    return std::make_optional(x);",
    "    if (a == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    auto x = find_solution(b % a, a, n);\n    if (x) {\n        return std::make_optional(b / a * x.value() - b / a * (b / a) * x.value() + x.value());\n    } else {\n        return std::nullopt;\n    }",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long a1 = a / g;\n    long b1 = b / g;\n    long n1 = n / g;\n    long x, y;\n    std::tie(x, y) = find_solution(b1, a1 % b1, n1).value();\n    return std::make_optional(b1 * x + (a1 % b1) * y);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / b;\n    while (x * a + y * b != n) {\n        if (x * a + y * b > n) {\n            y--;\n        } else {\n            x++;\n        }\n    }\n    return std::make_optional(x);",
    "    if (a == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long x = n / a;\n    long y = (n - a * x) / b;\n    if (a * x + b * y == n) {\n        return std::make_optional(x);\n    } else {\n        return std::nullopt;\n    }",
    "    if (a == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    auto x = find_solution(b % a, a, n % a);\n    if (!x) {\n        return std::nullopt;\n    }\n    return std::make_optional(b / a * x.value() - n / a);",
    "    long x = 0;\n    long y = n / b;\n    while (a * x + b * y != n) {\n        if (a * x + b * y > n) {\n            y--;\n        } else {\n            x++;\n        }\n        if (y < 0) {\n            return std::nullopt;\n        }\n    }\n    return std::make_optional(x);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long a1 = a / g;\n    long b1 = b / g;\n    long n1 = n / g;\n    long x, y;\n    std::tie(x, y) = find_solution(b1, a1 % b1, n1).value();\n    return std::make_optional(b1 * x + (a1 % b1) * y);",
    "    if (n % std::__gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = std::__gcd(a, b);\n    x = n / d * (b / d);\n    y = n / d * (a / d);\n    return std::make_tuple(x, y);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(n / b);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (n % gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x, y;\n    long g = gcdExtended(a, b, &x, &y);\n    x = x * (n / g);\n    y = y * (n / g);\n    return std::make_optional(x);",
    "    if (n % gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / b;\n    long d = gcd(a, b);\n    while (y * b < n) {\n        y++;\n    }\n    x = (n - y * b) / a;\n    return std::make_tuple(x, y);",
    "    if (n % gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = gcd(a, b);\n    x = n / d * (b / d);\n    y = n / d * (a / d);\n    return std::make_tuple(x, y);",
    "    if (a == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    auto x = find_solution(b % a, a, n);\n    if (!x) {\n        return std::nullopt;\n    }\n    return std::make_optional(b / a * x.value() - b / a * (b / a) * x.value() + n / a);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / b;\n    while (y * a > n) {\n        y--;\n    }\n    while (y * a < n) {\n        y++;\n    }\n    if (y * a != n) {\n        return std::nullopt;\n    }\n    return std::make_optional(y);",
    "    if (a == 0 && b == 0) {\n        return n == 0 ? std::optional<long>{0} : std::nullopt;\n    }\n    if (a == 0) {\n        return n % b == 0 ? std::optional<long>{n / b} : std::nullopt;\n    }\n    if (b == 0) {\n        return n % a == 0 ? std::optional<long>{n / a} : std::nullopt;\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    long x0 = 0, y0 = 0;\n    std::tie(x0, y0) = find_solution(b / d, a / d, n / d).value();\n    long x = y0, y = x0 - y0 * (a / b);\n    return std::optional<long>{x};",
    "    if (a == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    auto x = find_solution(b % a, a, n % a);\n    if (!x) {\n        return std::nullopt;\n    }\n    return std::make_optional(b / a * x.value() - n / a);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(n / b);\n        } else {\n            return std::nullopt;\n        }\n    }\n\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n\n    long x = 0;\n    long y = n / b;\n    while (y >= 0) {\n        if ((n - b * y) % a == 0) {\n            x = (n - b * y) / a;\n            return std::make_optional(x);\n        }\n        y--;\n    }\n\n    return std::nullopt;",
    "    if (n % std::gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / b;\n    long g = std::gcd(a, b);\n    while (true) {\n        long r = n - y * b;\n        if (r % a == 0) {\n            x = r / a;\n            break;\n        }\n        y -= g / b;\n    }\n    return std::make_optional(x);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(n / b);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long p = a / g;\n    long q = b / g;\n    long r = n / g;\n    std::optional<long> x = find_solution(q, -p, r);\n    if (x) {\n        return std::make_optional(x.value() * q);\n    } else {\n        return std::nullopt;\n    }",
    "    if (a == 0 && b == 0) {\n        return std::nullopt;\n    } else if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    } else if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    } else {\n        long g = std::gcd(a, b);\n        if (n % g != 0) {\n            return std::nullopt;\n        }\n        long x = 0;\n        long y = n / g;\n        while (x * a + y * b != n) {\n            if (x * a + y * b > n) {\n                y--;\n            } else {\n                x++;\n            }\n        }\n        return std::make_optional(x);\n    }",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / d;\n    while (y > 0) {\n        long t = x + (a / d);\n        if (t * b > n) {\n            break;\n        }\n        x = t;\n        y = (n - x * b) / a;\n    }\n    return std::make_optional(x);",
    "    if (n % std::gcd(a, b) != 0) {\n        return {};\n    }\n    long x = 0;\n    long y = n / b;\n    while (x * a + y * b != n) {\n        if (x * a + y * b < n) {\n            x += 1;\n        } else {\n            y -= 1;\n        }\n    }\n    return {x, y};",
    "    if (a == 0 && b == 0) {\n        return n == 0 ? std::optional<long>{0} : std::nullopt;\n    }\n    if (a == 0) {\n        return n % b == 0 ? std::optional<long>{n / b} : std::nullopt;\n    }\n    if (b == 0) {\n        return n % a == 0 ? std::optional<long>{n / a} : std::nullopt;\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    std::tie(x, y) = find_solution(b / g, a / g, n / g);\n    x = -x;\n    return std::optional<long>{x};",
    "    if (a == 0 && b == 0) {\n        return n == 0 ? std::optional<long>{0} : std::nullopt;\n    }\n    if (a == 0) {\n        return n % b == 0 ? std::optional<long>{n / b} : std::nullopt;\n    }\n    if (b == 0) {\n        return n % a == 0 ? std::optional<long>{n / a} : std::nullopt;\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    a /= d;\n    b /= d;\n    n /= d;\n    long x, y;\n    std::tie(x, y) = find_solution(b, a % b, n).value();\n    return std::optional<long>{x - (a / b) * y};",
    "    if (a == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    auto x = find_solution(b % a, a, n % a);\n    if (!x) {\n        return std::nullopt;\n    }\n    return std::make_optional(b / a * x.value() - n / a);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x = n / g * b / a;\n    long y = (n - a * x) / b;\n    return std::make_optional(x);",
    "  if (a == 0) {\n    if (n == 0) {\n      return std::make_optional(0);\n    } else {\n      return std::nullopt;\n    }\n  }\n  auto x = find_solution(b % a, a, n % a);\n  if (!x) {\n    return std::nullopt;\n  }\n  return std::make_optional(b / a * x.value() - n / a);",
    "    long x = 0;\n    long y = 0;\n    long d = 0;\n    long x1 = 1;\n    long x2 = 0;\n    long y1 = 0;\n    long y2 = 1;\n    long q = 0;\n    long r = 0;\n    while (a % b) {\n        q = a / b;\n        r = a % b;\n        x = x2 - q * x1;\n        y = y2 - q * y1;\n        x2 = x1;\n        x1 = x;\n        y2 = y1;\n        y1 = y;\n        a = b;\n        b = r;\n    }\n    d = b;\n    x = x2;\n    y = y2;\n    if (n % d) {\n        return {};\n    }\n    return {x * (n / d), y * (n / d)};",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = g;\n    while (d <= n) {\n        if ((n - d) % a == 0) {\n            x = (n - d) / a;\n            y = d / b;\n            break;\n        }\n        d += g;\n    }\n    if (x == 0 && y == 0) {\n        return std::nullopt;\n    }\n    return std::make_optional(x);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    long x0 = 0, y0 = 0;\n    long x1 = 1, y1 = 0;\n    long x2 = 0, y2 = 1;\n    while (b != 0) {\n        long q = a / b;\n        long r = a % b;\n        long x3 = x0 - q * x1;\n        long y3 = y0 - q * y1;\n        long x4 = x1 - q * x2;\n        long y4 = y1 - q * y2;\n        x0 = x1;\n        x1 = x2;\n        x2 = x3;\n        y0 = y1;\n        y1 = y2;\n        y2 = y3;\n        a = b;\n        b = r;\n    }\n    long x = x0;\n    long y = y0;\n    long k = n / d;\n    return std::make_optional(x * k);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long p = a / g;\n    long q = b / g;\n    long m = n / g;\n    long x, y;\n    std::tie(x, y) = find_solution(q, p, m);\n    return std::make_optional(q * x + p * y);",
    "    if (a == 0 && b == 0) {\n        return n == 0 ? std::optional<long>{0} : std::nullopt;\n    }\n    if (a == 0) {\n        return n % b == 0 ? std::optional<long>{n / b} : std::nullopt;\n    }\n    if (b == 0) {\n        return n % a == 0 ? std::optional<long>{n / a} : std::nullopt;\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    a /= d;\n    b /= d;\n    n /= d;\n    long x, y;\n    std::tie(x, y) = find_solution(b, a % b, n).value();\n    return std::optional<long>{x - (a / b) * y};",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / g;\n    while (y * a > n) {\n        y--;\n    }\n    while (y * a < n) {\n        y++;\n    }\n    if (y * a != n) {\n        return std::nullopt;\n    }\n    x = (n - b * y) / a;\n    return std::make_optional(x);",
    "    if (a == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    auto x = find_solution(b % a, a, n % a);\n    if (!x) {\n        return std::nullopt;\n    }\n    return std::make_optional(b / a * x.value() - n / a);",
    "    if (n % std::gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = std::gcd(a, b);\n    long a1 = a / d;\n    long b1 = b / d;\n    long n1 = n / d;\n    long r1 = 1, r2 = 0, r3 = a1;\n    long t1 = 0, t2 = 1, t3 = b1;\n    long q = 0;\n    while (t3 != 1) {\n        q = r3 / t3;\n        long r = r1 - q * t1;\n        long s = r2 - q * t2;\n        long t = r3 - q * t3;\n        r1 = t1;\n        r2 = t2;\n        r3 = t3;\n        t1 = r;\n        t2 = s;\n        t3 = t;\n    }\n    x = (n1 * t2) / b1;\n    y = (n1 * t1) / a1;\n    return std::make_tuple(x, y);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        }\n        return std::nullopt;\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(n / b);\n        }\n        return std::nullopt;\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        }\n        return std::nullopt;\n    }\n    long g = std::gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    a /= g;\n    b /= g;\n    n /= g;\n    long x = 0, y = 0;\n    long d = 1;\n    while (d <= n) {\n        d *= 2;\n    }\n    d /= 2;\n    while (d > 0) {\n        if (x + d <= n) {\n            x += d;\n            y += d * a / b;\n        }\n        d /= 2;\n    }\n    return std::make_optional(x);",
    "    if (a == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        }\n        return std::nullopt;\n    }\n    auto x = find_solution(b % a, a, n % a);\n    if (!x) {\n        return std::nullopt;\n    }\n    return std::make_optional(b / a * x.value() - n / a);",
    "    if(a == 0 && b == 0) {\n        return std::nullopt;\n    }\n    if(a == 0) {\n        return n / b;\n    }\n    if(b == 0) {\n        return n / a;\n    }\n    long x = 0;\n    long y = 0;\n    long gcd = std::__gcd(a, b);\n    if(n % gcd != 0) {\n        return std::nullopt;\n    }\n    long a1 = a / gcd;\n    long b1 = b / gcd;\n    long n1 = n / gcd;\n    long x1 = 0;\n    long y1 = 0;\n    long x2 = 1;\n    long y2 = 0;\n    long x3 = 0;\n    long y3 = 1;\n    while(true) {\n        if(a1 * x2 + b1 * y2 == n1) {\n            x = x2;\n            y = y2;\n            break;\n        }\n        long q = a1 / b1;\n        x3 = x2 - q * x3;\n        y3 = y2 - q * y3;\n        a1 = b1;\n        b1 = a1 % b1;\n        x2 = x3;\n        y2 = y3;\n    }\n    return std::make_pair(x, y);",
    "  if (a == 0 && b == 0) {\n    return std::nullopt;\n  }\n  if (a == 0) {\n    return n / b;\n  }\n  if (b == 0) {\n    return n / a;\n  }\n  if (n % (a * b) != 0) {\n    return std::nullopt;\n  }\n  long x = 0;\n  long y = n / b;\n  while (a * x + b * y != n) {\n    if (a * x + b * y > n) {\n      y--;\n    } else {\n      x++;\n    }\n  }\n  return std::make_tuple(x, y);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(std::make_tuple(0, 0));\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(std::make_tuple(0, n / b));\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(std::make_tuple(n / a, 0));\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = std::gcd(a, b);\n    x = n / d * b / a;\n    y = (n - a * x) / b;\n    return std::make_optional(std::make_tuple(x, y));",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    long x0 = 0;\n    long y0 = n / b;\n    long x1 = b / d;\n    long y1 = -a / d;\n    long x = x0 + (n / d) * x1;\n    long y = y0 + (n / d) * y1;\n    return std::make_optional(x);",
    "    if (a == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    auto x = find_solution(b % a, a, n % a);\n    if (!x) {\n        return std::nullopt;\n    }\n    return std::make_optional(b / a * x.value() - n / a);",
    "    if (a == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    auto x = find_solution(b % a, a, n);\n    if (!x) {\n        return std::nullopt;\n    }\n    return std::make_optional(b / a * x.value() - b / a * (b / a) * x.value() + n / a);",
    "    assert(a > 0 && b > 0 && n > 0);\n    long x = 0;\n    long y = n / b;\n    while (a * x + b * y != n) {\n        if (a * x + b * y > n) {\n            y--;\n        } else {\n            x++;\n        }\n        if (x > n / a || y < 0) {\n            return std::nullopt;\n        }\n    }\n    return std::make_tuple(x, y);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long p = a / g;\n    long q = b / g;\n    long r = n / g;\n    long x, y;\n    std::tie(x, y) = find_solution(q, p % q, r % q).value();\n    return std::make_optional(x * (b / g) + y * (a / g));",
    "    if (n % gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0, d = gcd(a, b);\n    x = n / d * b / a;\n    y = n / d - a / b * x;\n    return std::make_tuple(x, y);",
    "    if (n % std::gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / b;\n    while (a * x + b * y != n) {\n        if (a * x + b * y > n) {\n            y--;\n        } else {\n            x++;\n        }\n    }\n    return {x, y};",
    "    if (n % gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / b;\n    while (a * x + b * y != n) {\n        if (a * x + b * y < n) {\n            x++;\n        } else {\n            y--;\n        }\n    }\n    return std::make_tuple(x, y);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_tuple(0, 0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_tuple(0, n / b);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_tuple(n / a, 0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    a /= g;\n    b /= g;\n    n /= g;\n    long x, y;\n    std::tie(x, y) = find_solution(b, a % b, n).value();\n    return std::make_tuple(y, x - (a / b) * y);",
    "    long x = 0;\n    long y = n / b;\n    while (a * x + b * y != n) {\n        if (a * x + b * y > n) {\n            y--;\n        } else {\n            x++;\n        }\n    }\n    return std::make_tuple(x, y);",
    "  if (n % gcd(a, b) != 0) {\n    return std::nullopt;\n  }\n  long x = 0;\n  long y = n / b;\n  while (x * a + y * b != n) {\n    if (x * a + y * b < n) {\n      x++;\n    } else {\n      y--;\n    }\n  }\n  return std::make_pair(x, y);",
    "    if (n % std::gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / b;\n    while (x * a + y * b != n) {\n        if (x * a + y * b > n) {\n            y--;\n        } else {\n            x++;\n        }\n    }\n    return std::make_optional(x);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        }\n        return std::nullopt;\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        }\n        return std::nullopt;\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        }\n        return std::nullopt;\n    }\n    long g = std::gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    a /= g;\n    b /= g;\n    n /= g;\n    long x = 0;\n    long y = n;\n    while (y >= 0) {\n        if (a * x + b * y == n) {\n            return std::make_optional(x);\n        }\n        x++;\n        y--;\n    }\n    return std::nullopt;",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    long x0 = 0, y0 = 0;\n    long x1 = 1, y1 = 0;\n    long x2 = 0, y2 = 1;\n    while (b != 0) {\n        long q = a / b;\n        long r = a % b;\n        long x3 = x0 - q * x1;\n        long y3 = y0 - q * y1;\n        x0 = x1;\n        y0 = y1;\n        x1 = x2;\n        y1 = y2;\n        x2 = x3;\n        y2 = y3;\n        a = b;\n        b = r;\n    }\n    return std::make_optional(x2 * (n / d));",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(n / b);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = 0;\n    long d = n / g;\n    std::tie(x, y) = find_solution(b / g, a / g, d);\n    x = -x;\n    return std::make_optional(std::make_tuple(x, y));",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = n / g;\n    std::tie(x, y) = find_solution(b / g, a / g, d);\n    x = -x;\n    return std::make_optional(x);",
    "    if (a == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        }\n        return std::nullopt;\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        }\n        return std::nullopt;\n    }\n    auto x = find_solution(b, a % b, n);\n    if (x.has_value()) {\n        return std::make_optional(x.value() * a / b);\n    }\n    return std::nullopt;",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long a1 = a / g;\n    long b1 = b / g;\n    long n1 = n / g;\n    long x, y;\n    std::tie(x, y) = find_solution(b1, a1 % b1, n1).value();\n    return std::make_optional(y - (a1 / b1) * x);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = n / g;\n    std::tie(x, y) = find_solution(b / g, a / g, d);\n    return std::make_optional(x * (a / g) + y * (b / g));",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(n / b);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    long x0 = 0;\n    long y0 = n / d;\n    long x1 = 1;\n    long y1 = (n - a * x1) / b;\n    while (y1 * a != n - x1 * b) {\n        long x2 = x0 - x1;\n        long y2 = y0 - y1;\n        x0 = x1;\n        y0 = y1;\n        x1 = x2;\n        y1 = y2;\n    }\n    return std::make_optional(x1);",
    "    if (a == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long x = n / a;\n    long y = (n - a * x) / b;\n    if (a * x + b * y == n) {\n        return std::make_optional(x);\n    } else {\n        return std::nullopt;\n    }",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = std::__gcd(a, b);\n    a /= d;\n    b /= d;\n    n /= d;\n    long u1 = 1, u2 = 0, u3 = a;\n    long v1 = 0, v2 = 1, v3 = b;\n    while (v3 != 0) {\n        long q = u3 / v3;\n        long t1 = u1 - v1 * q;\n        long t2 = u2 - v2 * q;\n        long t3 = u3 - v3 * q;\n        u1 = v1;\n        u2 = v2;\n        u3 = v3;\n        v1 = t1;\n        v2 = t2;\n        v3 = t3;\n    }\n    x = u1 * n;\n    y = u2 * n;\n    return std::make_optional(x);",
    "    if (n % gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = gcd(a, b);\n    x = n / d * b / a;\n    y = (n - a * x) / b;\n    return std::make_tuple(x, y);",
    "    if (a == 0) {\n        if (n == 0) {\n            return std::optional<long>{0};\n        } else {\n            return std::nullopt;\n        }\n    }\n    auto x = find_solution(b % a, a, n % a);\n    if (!x) {\n        return std::nullopt;\n    }\n    return std::optional<long>{(n - b * x.value()) / a};",
    "    long x = 0;\n    long y = n/b;\n    while (a*x + b*y != n) {\n        if (a*x + b*y > n) {\n            y--;\n        } else {\n            x++;\n        }\n        if (x > n/a || y < 0) {\n            return std::nullopt;\n        }\n    }\n    return std::make_tuple(x, y);",
    "    if (n % std::gcd(a, b) != 0) {\n        return {};\n    }\n    long x = 0, y = 0, d = std::gcd(a, b);\n    while (d != 0) {\n        long t = b / d;\n        b -= t * d;\n        x -= t * y;\n        std::swap(a, b);\n        std::swap(x, y);\n        d = std::gcd(a, b);\n    }\n    return {x * n / a, y * n / a};",
    "    long x = 0;\n    long y = n / b;\n    while (a * x + b * y != n) {\n        if (a * x + b * y > n) {\n            y--;\n        } else {\n            x++;\n        }\n        if (y < 0) {\n            return std::nullopt;\n        }\n    }\n    return std::make_tuple(x, y);",
    "    if(a == 0 && b == 0) {\n        if(n == 0) {\n            return std::make_optional(0);\n        }\n        else {\n            return std::nullopt;\n        }\n    }\n    if(a == 0) {\n        if(n % b == 0) {\n            return std::make_optional(0);\n        }\n        else {\n            return std::nullopt;\n        }\n    }\n    if(b == 0) {\n        if(n % a == 0) {\n            return std::make_optional(n / a);\n        }\n        else {\n            return std::nullopt;\n        }\n    }\n    if(n % gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = gcd(a, b);\n    x = n / d * mod_inverse(a / d, b / d);\n    y = (n - a * x) / b;\n    return std::make_optional(x);",
    "  if (a == 0) {\n    if (n == 0) {\n      return std::make_optional(0);\n    } else {\n      return std::nullopt;\n    }\n  }\n  long x = n / a;\n  long y = (n - a * x) / b;\n  if (a * x + b * y == n) {\n    return std::make_optional(x);\n  } else {\n    return std::nullopt;\n  }",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long a1 = a / d, b1 = b / d, n1 = n / d;\n    std::tie(x, y) = find_solution(b1, a1 % b1, n1);\n    return std::make_optional(b1 * x + (a1 % b1) * y);",
    "    if (n % gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / b;\n    while (x * a + y * b != n) {\n        x++;\n        y = (n - x * a) / b;\n    }\n    return std::make_tuple(x, y);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::optional<long>{0};\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::optional<long>{0};\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::optional<long>{n / a};\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    return std::optional<long>{(n / g) * std::__gcd(a, b)};",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long p = n / g;\n    long q = 0;\n    while (p % a != 0) {\n        q++;\n        p += b;\n    }\n    return std::make_optional(p / a);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = std::__gcd(a, b);\n    a /= d;\n    b /= d;\n    n /= d;\n    std::tie(x, y) = find_solution(b, a % b, n % a).value();\n    x -= (a / b) * y;\n    return std::make_optional(x);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    long x0 = 0, y0 = 1;\n    long x1 = 1, y1 = 0;\n    while (a % b != 0) {\n        long q = a / b;\n        long r = a % b;\n        long x2 = x0 - q * x1;\n        long y2 = y0 - q * y1;\n        x0 = x1;\n        y0 = y1;\n        x1 = x2;\n        y1 = y2;\n        a = b;\n        b = r;\n    }\n    long x = x1 * (n / d);\n    long y = y1 * (n / d);\n    return std::make_optional(x);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long p = n / g;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n    long x = 0;\n    long y = 0;\n    while (a % 2 == 0 && b % 2 == 0) {\n        a /= 2;\n        b /= 2;\n        ++r;\n    }\n    d = a;\n    e = b;\n    while (d != 0) {\n        while (d % 2 == 0) {\n            d /= 2;\n            if (e % 2 == 1) {\n                s += 1;\n            } else {\n                ++q;\n            }\n        }\n        while (e % 2 == 0) {\n            e /= 2;\n            if (d % 2 == 1) {\n                s += 1;\n            } else {\n                ++q;\n            }\n        }\n        f = (d - e) / 2;\n        if (f > 0) {\n            s += 1;\n            d = f;\n        } else {\n            f = (e - d) / 2;\n            if (f > 0) {\n                q += 1;\n                e = f;\n            } else {\n                break;\n            }\n        }\n    }\n    if (r",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(n / b);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long a1 = a / g;\n    long b1 = b / g;\n    long n1 = n / g;\n    std::optional<long> x = find_solution(b1, a1 % b1, n1);\n    if (x) {\n        return std::make_optional(x.value() * a1);\n    } else {\n        return std::nullopt;\n    }",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    std::tie(x, y) = find_solution(b / g, a / g, n / g).value();\n    return std::make_optional(std::make_pair(y, x - y * (a / b)));",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long p = a / g;\n    long q = b / g;\n    long r = n / g;\n    // solve px + qy = r\n    // x = r/p - qy/p\n    // y = (r - px)/q\n    // y = (r - p(r/p - qy/p))/q\n    // y = (r - r + qy)/q\n    // y = qy/q\n    // y = y\n    // x = r/p - qy/p\n    // x = r/p - q(r/p - qy/p)/p\n    // x = r/p - r/p + qy/p^2\n    // x = qy/p^2\n    // x = y/p\n    // y = r/q - px/q\n    // x = (r - qy)/p\n    // x = r/p - qy/p\n    // x = r/p - q(r/p - qy/p)/p\n    // x = r/p - r/p + qy/p^2\n    // x = qy/p^2\n    // x = y/p\n    // y = r/q - px/q\n    // y = r/q - p(r/p - qy/p)/q\n    // y = r",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / b;\n    while (y * a > n) {\n        y--;\n    }\n    while (y * a < n) {\n        y++;\n    }\n    if (y * a != n) {\n        return std::nullopt;\n    }\n    x = (n - y * b) / a;\n    return std::make_optional(x);",
    "    if (a == 0 && b == 0) {\n        return n == 0 ? std::optional<long>{0} : std::nullopt;\n    }\n    if (a == 0) {\n        return n % b == 0 ? std::optional<long>{0} : std::nullopt;\n    }\n    if (b == 0) {\n        return n % a == 0 ? std::optional<long>{n / a} : std::nullopt;\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    long x0 = 0, y0 = 0;\n    std::tie(x0, y0) = find_solution(b / d, a / d, n / d).value();\n    return std::optional<long>{x0 * (a / d) + y0 * (b / d)};",
    "    if (a == 0 && b == 0) {\n        return n == 0 ? std::make_optional(0) : std::nullopt;\n    }\n    if (a == 0) {\n        return n % b == 0 ? std::make_optional(n / b) : std::nullopt;\n    }\n    if (b == 0) {\n        return n % a == 0 ? std::make_optional(n / a) : std::nullopt;\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    std::tie(x, y) = find_solution(b / d, a / d, n / d).value();\n    return std::make_optional(std::make_tuple(y, x - y * (a / b)));",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = std::__gcd(a, b);\n    long a1 = a / d;\n    long b1 = b / d;\n    long n1 = n / d;\n    extended_euclid(a1, b1, x, y);\n    x *= n1;\n    y *= n1;\n    return std::make_optional(x);",
    "    if (n % __gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = __gcd(a, b);\n    x = n / d * (b / d);\n    y = n / d * (a / d);\n    return std::make_tuple(x, y);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    std::tie(x, y) = find_solution(b / g, a / g, n / g);\n    x = -x;\n    return std::make_optional(x);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    long x0 = 0, y0 = 0;\n    std::tie(x0, y0) = find_solution(b / d, a / d, n / d).value();\n    return std::make_optional(std::make_tuple(y0, x0 - y0 * (a / b)));",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::optional<long>{0};\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::optional<long>{0, n / b};\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::optional<long>{n / a, 0};\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = n / g;\n    std::tie(x, y) = find_solution(b / g, a / g, d);\n    return std::optional<long>{b / g * x, a / g * y};",
    "    if (n % gcd(a, b) != 0) {\n        return {};\n    }\n    long x = 0;\n    long y = n / b;\n    while (x * a + y * b != n) {\n        if (x * a + y * b < n) {\n            x++;\n        } else {\n            y--;\n        }\n    }\n    return {x, y};",
    "    if (a == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long x = n / a;\n    long y = (n - a * x) / b;\n    if (a * x + b * y == n) {\n        return std::make_optional(x);\n    } else {\n        return std::nullopt;\n    }",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(n / b);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    a /= g;\n    b /= g;\n    n /= g;\n    long x = 0, y = 0;\n    long x1 = 1, y1 = 0;\n    long x2 = 0, y2 = 1;\n    while (b != 0) {\n        long q = a / b;\n        long r = a % b;\n        x = x2 - q * x1;\n        y = y2 - q * y1;\n        a = b;\n        b = r;\n        x2 = x1;\n        x1 = x;\n        y2 = y1;\n        y1 = y;\n    }\n    if (n % a != 0) {\n        return std::nullopt;\n    }\n    x = n / a * x2;\n    y = n / a * y2;\n    return std::make_optional(x);",
    "    if (a == 0 && b == 0) {\n        return std::nullopt;\n    }\n    if (a == 0) {\n        return n / b;\n    }\n    if (b == 0) {\n        return n / a;\n    }\n    long x = 0;\n    long y = n / b;\n    while (a * x + b * y != n) {\n        if (y == 0) {\n            return std::nullopt;\n        }\n        x = n / a - b / a * y;\n        y = (n - a * x) / b;\n    }\n    return std::make_pair(x, y);",
    "    if (a == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    auto x = find_solution(b % a, a, n);\n    if (!x) {\n        return std::nullopt;\n    }\n    return std::make_optional(b / a * x.value() - b / a * (b / a) * x.value() + n / a);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long gcd = std::__gcd(a, b);\n    if (n % gcd != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = std::__gcd(a, b, x, y);\n    x *= n / d;\n    y *= n / d;\n    return std::make_optional(x);",
    "    if (n % std::gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = std::gcd(a, b);\n    x = n / d * b / a;\n    y = (n - a * x) / b;\n    return std::make_tuple(x, y);",
    "  if (a == 0) {\n    if (n == 0) {\n      return std::make_optional(0);\n    }\n    return std::nullopt;\n  }\n  auto x = find_solution(b % a, a, n % a);\n  if (!x) {\n    return std::nullopt;\n  }\n  return std::make_optional(b / a * x.value() - n / a);",
    "    if (a == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    auto x = find_solution(b % a, a, n % a);\n    if (!x) {\n        return std::nullopt;\n    }\n    return std::make_optional(b / a * x.value() - n / a);",
    "    if (a == 0) {\n        if (n == 0) {\n            return {0, 0};\n        } else {\n            return {};\n        }\n    }\n    auto x = find_solution(b % a, a, n);\n    if (!x) {\n        return {};\n    }\n    return {x->second - b / a * x->first, x->first};",
    "  if (a == 0 && b == 0) {\n    if (n == 0) {\n      return std::make_optional(0);\n    } else {\n      return std::nullopt;\n    }\n  }\n  if (a == 0) {\n    if (n % b == 0) {\n      return std::make_optional(n / b);\n    } else {\n      return std::nullopt;\n    }\n  }\n  if (b == 0) {\n    if (n % a == 0) {\n      return std::make_optional(n / a);\n    } else {\n      return std::nullopt;\n    }\n  }\n  long d = std::gcd(a, b);\n  if (n % d != 0) {\n    return std::nullopt;\n  }\n  long x0 = 0, y0 = 1;\n  long x1 = 1, y1 = 0;\n  long x = 0, y = 0;\n  while (a % b != 0) {\n    long q = a / b;\n    long r = a % b;\n    x = x0 - q * x1;\n    y = y0 - q * y1;\n    x0 = x1;\n    x1 = x;\n    y0 = y1;\n    y1 = y;\n    a = b;\n    b = r;\n  }\n  x = (n / d) * x1;\n  y = (n / d) * y1;\n  return std::make_optional(x);",
    "    if (a == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        }\n        return std::nullopt;\n    }\n    long x = n / a;\n    long y = (n - a * x) / b;\n    if (a * x + b * y == n) {\n        return std::make_optional(x);\n    }\n    return std::nullopt;",
    "    if (a == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long x = n / a;\n    long y = (n - a * x) / b;\n    if (a * x + b * y == n) {\n        return std::make_optional(x);\n    } else {\n        return std::nullopt;\n    }",
    "    if (n % gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / b;\n    while (x * a + y * b != n) {\n        if (x * a + y * b > n) {\n            y--;\n        } else {\n            x++;\n        }\n    }\n    return std::make_optional(x);",
    "    if (n % gcd(a, b) != 0) {\n        return {};\n    }\n    long x = 0;\n    long y = n / b;\n    long g = gcd(a, b);\n    while (x < n / a) {\n        if ((n - a * x) % b == 0) {\n            return {x, (n - a * x) / b};\n        }\n        x += b / g;\n        y -= a / g;\n    }\n    return {};",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(n / b);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x0 = 0, y0 = 0;\n    long x1 = 1, y1 = 0;\n    long x2 = 0, y2 = 1;\n    long q = 0;\n    while (a % b != 0) {\n        q = a / b;\n        long r = a % b;\n        long x = x2 - q * x1;\n        long y = y2 - q * y1;\n        a = b;\n        b = r;\n        x2 = x1;\n        x1 = x;\n        y2 = y1;\n        y1 = y;\n    }\n    x0 = x1 * (n / g);\n    y0 = y1 * (n / g);\n    return std::make_optional(x0);",
    "    if (a == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    auto x = find_solution(b % a, a, n % a);\n    if (!x) {\n        return std::nullopt;\n    }\n    return std::make_optional(b / a * x.value() - n / a);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long gcd = std::gcd(a, b);\n    if (n % gcd != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = std::gcd(a, b, x, y);\n    x *= n / d;\n    y *= n / d;\n    return std::make_optional(x);",
    "    if (a == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    auto x = find_solution(b % a, a, n % a);\n    if (!x) {\n        return std::nullopt;\n    }\n    return std::make_optional(b / a * x.value() - n / a);",
    "    if (n % std::gcd(a, b) != 0) {\n        return {};\n    }\n    long x = 0;\n    long y = n / b;\n    while (x * a + y * b != n) {\n        if (x * a + y * b < n) {\n            x += 1;\n        } else {\n            y -= 1;\n        }\n    }\n    return {x, y};",
    "    long x = 0;\n    long y = 0;\n    long d = 0;\n    long x1 = 0;\n    long y1 = 0;\n    long x2 = 0;\n    long y2 = 0;\n    long q = 0;\n    long r = 0;\n    if (n == 0) {\n        return std::make_tuple(x, y);\n    }\n    x2 = 1;\n    x1 = 0;\n    y2 = 0;\n    y1 = 1;\n    while (n > 0) {\n        q = a / b;\n        r = a - q * b;\n        x = x2 - q * x1;\n        y = y2 - q * y1;\n        a = b;\n        b = r;\n        x2 = x1;\n        x1 = x;\n        y2 = y1;\n        y1 = y;\n        n = n - 1;\n    }\n    return std::make_tuple(x2, y2);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long p = n / g;\n    long q = 0;\n    long r = 0;\n    long s = 1;\n    long c = a / g;\n    long d = b / g;\n    long u = 0;\n    long v = 1;\n    while (c != 0) {\n        long q = d / c;\n        long t = c;\n        c = d % c;\n        d = t;\n        t = u;\n        u = p - q * u;\n        p = t;\n        t = v;\n        v = q * v - r;\n        r = t;\n    }\n    if (d != 1) {\n        return std::nullopt;\n    }\n    return std::make_optional(p * p);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long d = std::gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    long x0, y0;\n    std::tie(x0, y0) = find_solution(b / d, a / d, n / d).value();\n    return std::make_optional(x0 * (b / d) + y0 * (a / d));",
    "    if (n % gcd(a, b) != 0)\n        return std::nullopt;\n    long x = 0, y = 0;\n    long d = gcd(a, b);\n    x = n / d * b / a;\n    y = (n - a * x) / b;\n    return std::make_tuple(x, y);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / g;\n    while (y * a > n) {\n        y--;\n    }\n    while (y * a < n) {\n        y++;\n    }\n    if (y * a != n) {\n        return std::nullopt;\n    }\n    x = (n - y * b) / a;\n    return std::make_optional(x);",
    "    if (a == 0 && b == 0) {\n        if (n == 0)\n            return std::make_optional(0);\n        else\n            return std::nullopt;\n    }\n    if (a == 0) {\n        if (n % b == 0)\n            return std::make_optional(0);\n        else\n            return std::nullopt;\n    }\n    if (b == 0) {\n        if (n % a == 0)\n            return std::make_optional(n / a);\n        else\n            return std::nullopt;\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0)\n        return std::nullopt;\n    long x0, y0;\n    std::tie(x0, y0) = find_solution(b / d, a / d, n / d).value();\n    return std::make_optional(x0 * (b / d) + y0 * (a / d));",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long a1 = a / g;\n    long b1 = b / g;\n    long n1 = n / g;\n    long x, y;\n    std::tie(x, y) = find_solution(b1, a1 % b1, n1).value();\n    return std::make_optional(y - (a1 / b1) * x);",
    "    if (a == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    auto x = find_solution(b % a, a, n % a);\n    if (!x) {\n        return std::nullopt;\n    }\n    return std::make_optional(b / a * x.value() - n / a);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    a /= g;\n    b /= g;\n    n /= g;\n    long x, y;\n    std::tie(x, y) = find_solution(b, a % b, n).value();\n    return std::make_optional(y - (a / b) * x);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(n / b);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = n / g;\n    std::tie(x, y) = find_solution(b / g, a / g, d);\n    return std::make_optional(std::make_pair(y, x - y * (a / b)));",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(n / b);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x0 = 0;\n    long y0 = n / b;\n    long x1 = b / g;\n    long y1 = -a / g;\n    long x = x0 + (n / g) * x1;\n    long y = y0 + (n / g) * y1;\n    return std::make_optional(x);",
    "    if (n % __gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long g = gcdExtended(a, b, &x, &y);\n    x *= n / g;\n    y *= n / g;\n    return std::make_tuple(x, y);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    a /= g;\n    b /= g;\n    n /= g;\n    long x, y;\n    std::tie(x, y) = find_solution(b, a % b, n).value();\n    return std::make_optional(y - (a / b) * x);",
    "    long x = 0;\n    long y = 0;\n    long gcd = std::gcd(a, b);\n    if (n % gcd != 0) {\n        return std::nullopt;\n    }\n    long x1 = 1;\n    long y1 = 0;\n    long x2 = 0;\n    long y2 = 1;\n    while (a != 0) {\n        long q = b / a;\n        long r = b % a;\n        long x = x2 - q * x1;\n        long y = y2 - q * y1;\n        b = a;\n        a = r;\n        x2 = x1;\n        x1 = x;\n        y2 = y1;\n        y1 = y;\n    }\n    x = x2 * (n / gcd);\n    y = y2 * (n / gcd);\n    return std::make_tuple(x, y);",
    "    if (a == 0 && b == 0) {\n        return std::nullopt;\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long p = n / g;\n    long q = g;\n    long x1 = 1;\n    long y1 = 0;\n    long x2 = 0;\n    long y2 = 1;\n    while (q != 0) {\n        long r = p % q;\n        long c = p / q;\n        long x = x1 - c * x2;\n        long y = y1 - c * y2;\n        p = q;\n        q = r;\n        x1 = x2;\n        x2 = x;\n        y1 = y2;\n        y2 = y;\n    }\n    return std::make_optional(x1 * (n / g));",
    "    if (a == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    auto x = find_solution(b % a, a, n % a);\n    if (!x) {\n        return std::nullopt;\n    }\n    return std::make_optional(b / a * x.value() - n / a);",
    "    if (a == 0 && b == 0) {\n        return std::nullopt;\n    }\n    if (a == 0) {\n        return n / b;\n    }\n    if (b == 0) {\n        return n / a;\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long x1 = 1, y1 = 0, x2 = 0, y2 = 1;\n    while (a != 0) {\n        long q = b / a;\n        long r = b % a;\n        long x3 = x1 - q * x2;\n        long y3 = y1 - q * y2;\n        x = x3;\n        y = y3;\n        b = a;\n        a = r;\n        x1 = x2;\n        x2 = x3;\n        y1 = y2;\n        y2 = y3;\n    }\n    return std::make_optional(x * (n / d));",
    "    if (n % gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / b;\n    while (x * a + y * b != n) {\n        if (x * a + y * b < n) {\n            x++;\n        } else {\n            y--;\n        }\n    }\n    return std::make_tuple(x, y);",
    "    if (n % std::gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = std::gcd(a, b);\n    x = n / d * (b / d);\n    y = n / d * (a / d);\n    return std::make_optional(x);"
  ]
}