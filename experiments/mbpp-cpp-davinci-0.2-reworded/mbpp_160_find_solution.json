{
  "name": "mbpp_160_find_solution",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nstd::optional<long> find_solution(long a, long b, long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_160_find_solution.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = find_solution;\n    assert(candidate((2), (3), (7)) == std::make_tuple(2, 1));\n    assert(candidate((4), (2), (7)) == std::nullopt);\n    assert(candidate((1), (13), (17)) == std::make_tuple(4, 1));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    if (n % gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / b;\n    while (a * x + b * y != n) {\n        if (a * x + b * y < n) {\n            x++;\n        } else {\n            y--;\n        }\n    }\n    return std::make_tuple(x, y);",
    "    if (a == 0 && b == 0 && n == 0) {\n        return std::nullopt;\n    }\n    if (a == 0 && b == 0 && n != 0) {\n        return std::nullopt;\n    }\n    if (a == 0 && b != 0) {\n        if (n % b == 0) {\n            return std::make_tuple(0, n / b);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0 && a != 0) {\n        if (n % a == 0) {\n            return std::make_tuple(n / a, 0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long x = 0;\n    long y = 0;\n    long gcd = std::__gcd(a, b);\n    if (n % gcd != 0) {\n        return std::nullopt;\n    }\n    long a1 = a / gcd;\n    long b1 = b / gcd;\n    long n1 = n / gcd;\n    long x1 = 0;\n    long y1 = 0;\n    long x2 = 1;\n    long y2 = 0;\n    while (a1 != 0) {\n        long q = b1 / a1;\n        long r = b1 % a1;\n        long x = x2 - q * x1;\n        long y = y2 - q * y1;\n        b1 = a1;\n        a1 = r;\n        x2 = x1;\n        x1 = x;\n        y2 = y1;\n        y1 = y;\n    }\n    if (b1 == 1) {\n        x = x2 * n1;\n        y = y2 * n1;\n        return std::make_tuple(x, y);\n    }\n    return std::nullopt;",
    "    if (n % std::gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / b;\n    while (a * x + b * y != n) {\n        if (a * x + b * y < n) {\n            x++;\n        } else {\n            y--;\n        }\n    }\n    return std::make_tuple(x, y);",
    "    if (n % std::gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = std::gcd(a, b);\n    long a1 = a / d, b1 = b / d, n1 = n / d;\n    long r1 = 1, r2 = 0, r = a1;\n    long q = b1 / r;\n    long s1 = 0, s2 = 1, s = b1;\n    while (r != 0) {\n        long t = s - q * r;\n        s = r;\n        r = t;\n        t = s1 - q * r1;\n        s1 = r1;\n        r1 = t;\n        t = s2 - q * r2;\n        s2 = r2;\n        r2 = t;\n        q = s / r;\n    }\n    x = n1 * s1 / s;\n    y = n1 * s2 / s;\n    return std::make_pair(x, y);",
    "    if (n % std::__gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = std::__gcd(a, b);\n    long x1 = 1, y1 = 0, x2 = 0, y2 = 1;\n    while (a % d != 0 || b % d != 0) {\n        long q = a / d;\n        long r = a % d;\n        long x = x2 - q * x1;\n        long y = y2 - q * y1;\n        a = d;\n        b = r;\n        d = std::__gcd(a, b);\n        x2 = x1;\n        x1 = x;\n        y2 = y1;\n        y1 = y;\n    }\n    x = x2 * (n / d);\n    y = y2 * (n / d);\n    return std::make_optional(x);",
    "    if (n % gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = gcd(a, b);\n    x = n / d * b / a;\n    y = (n - a * x) / b;\n    return std::make_tuple(x, y);",
    "    if (n % gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / b;\n    while (x * a + y * b != n) {\n        if (x * a + y * b < n) {\n            x++;\n        } else {\n            y--;\n        }\n    }\n    return std::make_tuple(x, y);",
    "    if (n % __gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = __gcd(a, b);\n    x = n / d * (b / d);\n    y = n / d * (a / d);\n    return std::make_tuple(x, y);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return {0, 0};\n        } else {\n            return {};\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return {0, n / b};\n        } else {\n            return {};\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return {n / a, 0};\n        } else {\n            return {};\n        }\n    }\n    long g = std::gcd(a, b);\n    if (n % g != 0) {\n        return {};\n    }\n    long x, y;\n    std::tie(x, y) = find_solution(b / g, a / g, n / g);\n    return {y, x - y * (a / b)};",
    "    if (n % gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / b;\n    while (a * x + b * y != n) {\n        if (a * x + b * y > n) {\n            y--;\n        } else {\n            x++;\n        }\n    }\n    return std::make_tuple(x, y);",
    "    if (a == 0 && b == 0) {\n        return n == 0 ? std::optional<long>(0) : std::nullopt;\n    }\n    if (a == 0) {\n        return n % b == 0 ? std::optional<long>(n / b) : std::nullopt;\n    }\n    if (b == 0) {\n        return n % a == 0 ? std::optional<long>(n / a) : std::nullopt;\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    a /= d;\n    b /= d;\n    n /= d;\n    long x, y;\n    std::tie(x, y) = find_solution(b, a % b, n);\n    return std::optional<long>(x - (a / b) * y);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    a /= g;\n    b /= g;\n    n /= g;\n    long x = 0, y = n / b;\n    while (x * a + y * b < n) {\n        ++x;\n        --y;\n    }\n    while (x * a + y * b > n) {\n        --x;\n        ++y;\n    }\n    if (x * a + y * b == n) {\n        return std::make_optional(x);\n    } else {\n        return std::nullopt;\n    }",
    "    if (n % gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = 0;\n    long d = gcd(a, b);\n    x = n / d * b / a;\n    y = (n - a * x) / b;\n    return std::make_tuple(x, y);",
    "    if (a == 0 && b == 0) {\n        return std::nullopt;\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        }\n        return std::nullopt;\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        }\n        return std::nullopt;\n    }\n    if (n % gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = gcd(a, b);\n    long a1 = a / d, b1 = b / d, n1 = n / d;\n    extended_euclid(a1, b1, x, y);\n    x *= n1;\n    y *= n1;\n    return std::make_optional(x);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (n % gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x, y;\n    long d = extended_gcd(a, b, x, y);\n    return std::make_optional(x * (n / d));",
    "    if (n % gcd(a, b) != 0) {\n        return {};\n    }\n    long x = 0, y = 0;\n    long d = gcd(a, b);\n    x = n / d * b / a;\n    y = (n - a * x) / b;\n    return {x, y};",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    long x0 = 0, y0 = 1;\n    long x1 = 1, y1 = 0;\n    while (a % b != 0) {\n        long q = a / b;\n        long r = a % b;\n        long x2 = x0 - q * x1;\n        long y2 = y0 - q * y1;\n        x0 = x1;\n        y0 = y1;\n        x1 = x2;\n        y1 = y2;\n        a = b;\n        b = r;\n    }\n    long x = x1 * (n / d);\n    long y = y1 * (n / d);\n    return std::make_optional(x);",
    "    if (a == 0) {\n        return n == b ? std::make_optional(0) : std::nullopt;\n    }\n    auto x = find_solution(b % a, a, n);\n    if (!x) {\n        return std::nullopt;\n    }\n    return std::make_optional(b / a * x.value() - b / a * (b / a) * x.value() + x.value());",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return {};\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(n / b);\n        } else {\n            return {};\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return {};\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return {};\n    }\n    long x = 0;\n    long y = n / g;\n    while (y * a > n) {\n        y--;\n    }\n    while (y * a < n) {\n        y++;\n    }\n    if (y * a != n) {\n        return {};\n    }\n    x = (n - b * y) / a;\n    return std::make_optional(x);",
    "    if (n % std::gcd(a, b) != 0) {\n        return {};\n    }\n    long x = 0, y = 0;\n    long d = std::gcd(a, b);\n    x = n / d * (b / d);\n    y = n / d * (a / d);\n    return {x, y};"
  ]
}