{
  "name": "mbpp_102_snake_to_camel",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_102_snake_to_camel.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            i++;\n            result += toupper(word[i]);\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6_vztpn2: /tmp/tmp6_vztpn2.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpziop5d8h: /tmp/tmpziop5d8h.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp14_ulxwt: /tmp/tmp14_ulxwt.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpziop5d8h: /tmp/tmpziop5d8h.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for(int i = 0; i < word.length(); i++) {\n        if(word[i] == '_') {\n            result += toupper(word[i+1]);\n            i++;\n        }\n        else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp0hrjre3y: /tmp/tmp0hrjre3y.cpp:19: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpziop5d8h: /tmp/tmpziop5d8h.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for(int i=0;i<word.length();i++) {\n        if(word[i] == '_') {\n            result += toupper(word[i+1]);\n            i++;\n        }\n        else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp6ch5o31v: /tmp/tmp6ch5o31v.cpp:19: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpziop5d8h: /tmp/tmpziop5d8h.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for(int i = 0; i < word.length(); i++) {\n        if(word[i] == '_') {\n            result += toupper(word[i+1]);\n            i++;\n        }\n        else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp0hrjre3y: /tmp/tmp0hrjre3y.cpp:19: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp14_ulxwt: /tmp/tmp14_ulxwt.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpziop5d8h: /tmp/tmpziop5d8h.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n\tstd::string result;\n\tfor (int i = 0; i < word.length(); i++) {\n\t\tif (word[i] == '_') {\n\t\t\tword[i + 1] = toupper(word[i + 1]);\n\t\t}\n\t\telse {\n\t\t\tresult += word[i];\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpn6y96kfu: /tmp/tmpn6y96kfu.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n\tstd::string result;\n\tfor (int i = 0; i < word.length(); i++) {\n\t\tif (word[i] == '_') {\n\t\t\tresult += toupper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse {\n\t\t\tresult += word[i];\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp3_khpzrt: /tmp/tmp3_khpzrt.cpp:19: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for(int i=0;i<word.length();i++) {\n        if(word[i]=='_') {\n            result+=toupper(word[i+1]);\n            i++;\n        }\n        else {\n            result+=word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp69n_v2z4: /tmp/tmp69n_v2z4.cpp:19: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp14_ulxwt: /tmp/tmp14_ulxwt.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for(int i = 0; i < word.length(); i++) {\n        if(word[i] == '_') {\n            result += toupper(word[i+1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpu1l0g5et: /tmp/tmpu1l0g5et.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp14_ulxwt: /tmp/tmp14_ulxwt.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for(int i = 0; i < word.length(); i++) {\n        if(word[i] == '_') {\n            result += toupper(word[i+1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpu1l0g5et: /tmp/tmpu1l0g5et.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpqjphfpgb: /tmp/tmpqjphfpgb.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpqjphfpgb: /tmp/tmpqjphfpgb.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp14_ulxwt: /tmp/tmp14_ulxwt.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i += 1;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1666123234,
      "stdout": "",
      "stderr": "tmplupplge6: /tmp/tmplupplge6.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpqjphfpgb: /tmp/tmpqjphfpgb.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp14_ulxwt: /tmp/tmp14_ulxwt.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for(int i = 0; i < word.length(); i++) {\n        if(word[i] == '_') {\n            result += toupper(word[i+1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpu1l0g5et: /tmp/tmpu1l0g5et.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpqjphfpgb: /tmp/tmpqjphfpgb.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n  std::string result;\n  for(int i = 0; i < word.length(); i++) {\n    if(word[i] == '_') {\n      result += toupper(word[i+1]);\n      i++;\n    }\n    else {\n      result += word[i];\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1666123234,
      "stdout": "",
      "stderr": "tmp7qra57g5: /tmp/tmp7qra57g5.cpp:19: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpziop5d8h: /tmp/tmpziop5d8h.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp14_ulxwt: /tmp/tmp14_ulxwt.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        }\n        else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1666123234,
      "stdout": "",
      "stderr": "tmp0iw96pgy: /tmp/tmp0iw96pgy.cpp:19: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpziop5d8h: /tmp/tmpziop5d8h.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpziop5d8h: /tmp/tmpziop5d8h.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i+1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1666123234,
      "stdout": "",
      "stderr": "tmpu0gb6uzr: /tmp/tmpu0gb6uzr.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp14_ulxwt: /tmp/tmp14_ulxwt.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp14_ulxwt: /tmp/tmp14_ulxwt.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for(int i = 0; i < word.length(); i++) {\n        if(word[i] == '_') {\n            result += toupper(word[i+1]);\n            i++;\n        }\n        else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp0hrjre3y: /tmp/tmp0hrjre3y.cpp:19: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp14_ulxwt: /tmp/tmp14_ulxwt.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        }\n        else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1666123234,
      "stdout": "",
      "stderr": "tmpc6e5ng6k: /tmp/tmpc6e5ng6k.cpp:19: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp14_ulxwt: /tmp/tmp14_ulxwt.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpziop5d8h: /tmp/tmpziop5d8h.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp14_ulxwt: /tmp/tmp14_ulxwt.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpqjphfpgb: /tmp/tmpqjphfpgb.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n  std::string result;\n  for (int i = 0; i < word.size(); i++) {\n    if (word[i] == '_') {\n      result += toupper(word[i + 1]);\n      i++;\n    } else {\n      result += word[i];\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1666123234,
      "stdout": "",
      "stderr": "tmpa2_nc332: /tmp/tmpa2_nc332.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp14_ulxwt: /tmp/tmp14_ulxwt.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpqjphfpgb: /tmp/tmpqjphfpgb.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for(int i = 0; i < word.size(); i++) {\n        if(word[i] == '_') {\n            result += toupper(word[i+1]);\n            i++;\n        }\n        else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1666123234,
      "stdout": "",
      "stderr": "tmppemond_e: /tmp/tmppemond_e.cpp:19: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n\tstd::string result = \"\";\n\tfor (int i = 0; i < word.length(); i++) {\n\t\tif (word[i] == '_') {\n\t\t\tresult += toupper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse {\n\t\t\tresult += word[i];\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1666123234,
      "stdout": "",
      "stderr": "tmp3kkc1bl4: /tmp/tmp3kkc1bl4.cpp:19: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpziop5d8h: /tmp/tmpziop5d8h.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpziop5d8h: /tmp/tmpziop5d8h.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for(int i = 0; i < word.size(); i++) {\n        if(word[i] == '_') {\n            result += toupper(word[i+1]);\n            i++;\n        }\n        else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1666123234,
      "stdout": "",
      "stderr": "tmppemond_e: /tmp/tmppemond_e.cpp:19: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpziop5d8h: /tmp/tmpziop5d8h.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for(int i=0;i<word.length();i++) {\n        if(word[i]=='_') {\n            result += toupper(word[i+1]);\n            i++;\n        }\n        else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1666123234,
      "stdout": "",
      "stderr": "tmpcr3pn6io: /tmp/tmpcr3pn6io.cpp:19: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpziop5d8h: /tmp/tmpziop5d8h.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpqjphfpgb: /tmp/tmpqjphfpgb.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpziop5d8h: /tmp/tmpziop5d8h.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n  std::string result = \"\";\n  for (int i = 0; i < word.size(); i++) {\n    if (word[i] == '_') {\n      result += toupper(word[i + 1]);\n      i++;\n    } else {\n      result += word[i];\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1666123234,
      "stdout": "",
      "stderr": "tmpf1c1yo8g: /tmp/tmpf1c1yo8g.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpziop5d8h: /tmp/tmpziop5d8h.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for(int i = 0; i < word.length(); i++) {\n        if(word[i] == '_') {\n            result += toupper(word[i+1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpu1l0g5et: /tmp/tmpu1l0g5et.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for(int i=0;i<word.length();i++) {\n        if(word[i]=='_') {\n            result.push_back(toupper(word[i+1]));\n            i++;\n        } else {\n            result.push_back(word[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1666123234,
      "stdout": "",
      "stderr": "tmps3ozr6ci: /tmp/tmps3ozr6ci.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpqjphfpgb: /tmp/tmpqjphfpgb.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpqjphfpgb: /tmp/tmpqjphfpgb.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for(int i = 0; i < word.length(); i++) {\n        if(word[i] == '_') {\n            result.push_back(toupper(word[i+1]));\n            i++;\n        }\n        else {\n            result.push_back(word[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1666123234,
      "stdout": "",
      "stderr": "tmprbs4gj8u: /tmp/tmprbs4gj8u.cpp:19: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpqjphfpgb: /tmp/tmpqjphfpgb.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpqjphfpgb: /tmp/tmpqjphfpgb.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpqjphfpgb: /tmp/tmpqjphfpgb.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp14_ulxwt: /tmp/tmp14_ulxwt.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for(int i = 0; i < word.length(); i++) {\n        if(word[i] == '_') {\n            result += toupper(word[i+1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1666123234,
      "stdout": "",
      "stderr": "tmpt49q1pts: /tmp/tmpt49q1pts.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp14_ulxwt: /tmp/tmp14_ulxwt.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpziop5d8h: /tmp/tmpziop5d8h.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpqjphfpgb: /tmp/tmpqjphfpgb.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp14_ulxwt: /tmp/tmp14_ulxwt.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpziop5d8h: /tmp/tmpziop5d8h.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    bool flag = false;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            flag = true;\n        } else {\n            if (flag) {\n                result += toupper(word[i]);\n                flag = false;\n            } else {\n                result += word[i];\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1666123234,
      "stdout": "",
      "stderr": "tmpue4ru4n3: /tmp/tmpue4ru4n3.cpp:23: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string camel_word;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            camel_word += toupper(word[i + 1]);\n            i++;\n        } else {\n            camel_word += word[i];\n        }\n    }\n    return camel_word;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1666123234,
      "stdout": "",
      "stderr": "tmp3pakml1p: /tmp/tmp3pakml1p.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpqjphfpgb: /tmp/tmpqjphfpgb.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp14_ulxwt: /tmp/tmp14_ulxwt.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string camel_word = \"\";\n    for(int i = 0; i < word.length(); i++) {\n        if(word[i] == '_') {\n            camel_word += toupper(word[i+1]);\n            i++;\n        }\n        else {\n            camel_word += word[i];\n        }\n    }\n    return camel_word;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1666123234,
      "stdout": "",
      "stderr": "tmpuqaslm43: /tmp/tmpuqaslm43.cpp:19: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpziop5d8h: /tmp/tmpziop5d8h.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp14_ulxwt: /tmp/tmp14_ulxwt.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp14_ulxwt: /tmp/tmp14_ulxwt.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for(int i = 0; i < word.length(); i++) {\n        if(word[i] == '_') {\n            result += toupper(word[i+1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1666123234,
      "stdout": "",
      "stderr": "tmpt49q1pts: /tmp/tmpt49q1pts.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp14_ulxwt: /tmp/tmp14_ulxwt.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpqjphfpgb: /tmp/tmpqjphfpgb.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for(int i = 0; i < word.length(); i++) {\n        if(word[i] == '_') {\n            result += toupper(word[i+1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1666123234,
      "stdout": "",
      "stderr": "tmpt49q1pts: /tmp/tmpt49q1pts.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpqjphfpgb: /tmp/tmpqjphfpgb.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string camel_word = \"\";\n    for(int i = 0; i < word.size(); i++) {\n        if(word[i] == '_') {\n            camel_word += toupper(word[i+1]);\n            i++;\n        } else {\n            camel_word += word[i];\n        }\n    }\n    return camel_word;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1666123234,
      "stdout": "",
      "stderr": "tmpg8xgb4vx: /tmp/tmpg8xgb4vx.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n\tstd::string result;\n\tfor (int i = 0; i < word.length(); i++) {\n\t\tif (word[i] == '_') {\n\t\t\tresult += toupper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse {\n\t\t\tresult += word[i];\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp3_khpzrt: /tmp/tmp3_khpzrt.cpp:19: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp14_ulxwt: /tmp/tmp14_ulxwt.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for(int i = 0; i < word.length(); i++) {\n        if(word[i] == '_') {\n            result += toupper(word[i+1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpu1l0g5et: /tmp/tmpu1l0g5et.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpqjphfpgb: /tmp/tmpqjphfpgb.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for(int i=0; i<word.size(); i++) {\n        if(word[i] == '_') {\n            result += toupper(word[i+1]);\n            i++;\n        }\n        else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1666123234,
      "stdout": "",
      "stderr": "tmp1b09a8ap: /tmp/tmp1b09a8ap.cpp:19: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for(int i = 0; i < word.length(); i++) {\n        if(word[i] == '_') {\n            result += toupper(word[i+1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpu1l0g5et: /tmp/tmpu1l0g5et.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp14_ulxwt: /tmp/tmp14_ulxwt.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpziop5d8h: /tmp/tmpziop5d8h.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp14_ulxwt: /tmp/tmp14_ulxwt.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp14_ulxwt: /tmp/tmp14_ulxwt.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpziop5d8h: /tmp/tmpziop5d8h.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpqjphfpgb: /tmp/tmpqjphfpgb.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpziop5d8h: /tmp/tmpziop5d8h.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for(int i = 0; i < word.length(); i++) {\n        if(word[i] == '_') {\n            result += toupper(word[i+1]);\n            i++;\n        }\n        else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp0hrjre3y: /tmp/tmp0hrjre3y.cpp:19: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpziop5d8h: /tmp/tmpziop5d8h.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for (int i = 0; i < word.size(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1666123234,
      "stdout": "",
      "stderr": "tmppii366fu: /tmp/tmppii366fu.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpqjphfpgb: /tmp/tmpqjphfpgb.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for(int i = 0; i < word.size(); i++) {\n        if(word[i] == '_') {\n            result += toupper(word[i+1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1666123234,
      "stdout": "",
      "stderr": "tmpurgujse9: /tmp/tmpurgujse9.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp14_ulxwt: /tmp/tmp14_ulxwt.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n  std::string result = \"\";\n  for (int i = 0; i < word.length(); i++) {\n    if (word[i] == '_') {\n      result += toupper(word[i + 1]);\n      i++;\n    } else {\n      result += word[i];\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1666123234,
      "stdout": "",
      "stderr": "tmpl01gb2vw: /tmp/tmpl01gb2vw.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        }\n        else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1666123234,
      "stdout": "",
      "stderr": "tmpzwezpjgm: /tmp/tmpzwezpjgm.cpp:19: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for(int i = 0; i < word.length(); i++) {\n        if(word[i] == '_') {\n            result += toupper(word[i+1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1666123234,
      "stdout": "",
      "stderr": "tmpt49q1pts: /tmp/tmpt49q1pts.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string output;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            output += toupper(word[i + 1]);\n            i++;\n        } else {\n            output += word[i];\n        }\n    }\n    return output;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1666123234,
      "stdout": "",
      "stderr": "tmpyo3ftnfx: /tmp/tmpyo3ftnfx.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp14_ulxwt: /tmp/tmp14_ulxwt.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for(int i = 0; i < word.length(); i++) {\n        if(word[i] == '_') {\n            result += toupper(word[i+1]);\n            i++;\n        }\n        else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "tmpkrj2vug_: /tmp/tmpkrj2vug_.cpp:19: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp14_ulxwt: /tmp/tmp14_ulxwt.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpziop5d8h: /tmp/tmpziop5d8h.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp14_ulxwt: /tmp/tmp14_ulxwt.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp14_ulxwt: /tmp/tmp14_ulxwt.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpziop5d8h: /tmp/tmpziop5d8h.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp14_ulxwt: /tmp/tmp14_ulxwt.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpziop5d8h: /tmp/tmpziop5d8h.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for(int i = 0; i < word.size(); i++) {\n        if(word[i] == '_') {\n            result += toupper(word[i+1]);\n            i++;\n        }\n        else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "tmp4imledug: /tmp/tmp4imledug.cpp:19: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        }\n        else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1666123234,
      "stdout": "",
      "stderr": "tmp0iw96pgy: /tmp/tmp0iw96pgy.cpp:19: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpziop5d8h: /tmp/tmpziop5d8h.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        }\n        else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1666123234,
      "stdout": "",
      "stderr": "tmpc6e5ng6k: /tmp/tmpc6e5ng6k.cpp:19: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for(int i=0;i<word.length();i++) {\n        if(word[i]=='_') {\n            result+=toupper(word[i+1]);\n            i++;\n        }\n        else {\n            result+=word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp69n_v2z4: /tmp/tmp69n_v2z4.cpp:19: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp14_ulxwt: /tmp/tmp14_ulxwt.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpziop5d8h: /tmp/tmpziop5d8h.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpqjphfpgb: /tmp/tmpqjphfpgb.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpziop5d8h: /tmp/tmpziop5d8h.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpqjphfpgb: /tmp/tmpqjphfpgb.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n  std::string result;\n  for (int i = 0; i < word.length(); i++) {\n    if (word[i] == '_') {\n      result += toupper(word[i + 1]);\n      i++;\n    } else {\n      result += word[i];\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "tmpwco6o5fi: /tmp/tmpwco6o5fi.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for(int i = 0; i < word.length(); i++) {\n        if(word[i] == '_') {\n            result += toupper(word[i+1]);\n            i++;\n        }\n        else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "tmpkrj2vug_: /tmp/tmpkrj2vug_.cpp:19: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i+1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1666123234,
      "stdout": "",
      "stderr": "tmpu0gb6uzr: /tmp/tmpu0gb6uzr.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpziop5d8h: /tmp/tmpziop5d8h.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpqjphfpgb: /tmp/tmpqjphfpgb.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp14_ulxwt: /tmp/tmp14_ulxwt.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for(int i=0; i<word.length(); i++) {\n        if(word[i] == '_') {\n            result += toupper(word[i+1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "tmp0tx9mzko: /tmp/tmp0tx9mzko.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for(int i = 0; i < word.length(); i++) {\n        if(word[i] == '_') {\n            result += toupper(word[i+1]);\n            i++;\n        }\n        else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp0hrjre3y: /tmp/tmp0hrjre3y.cpp:19: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp14_ulxwt: /tmp/tmp14_ulxwt.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp14_ulxwt: /tmp/tmp14_ulxwt.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpqjphfpgb: /tmp/tmpqjphfpgb.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpziop5d8h: /tmp/tmpziop5d8h.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpqjphfpgb: /tmp/tmpqjphfpgb.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp14_ulxwt: /tmp/tmp14_ulxwt.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for (int i = 0; i < word.length(); ++i) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "tmp_6cst3q5: /tmp/tmp_6cst3q5.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp14_ulxwt: /tmp/tmp14_ulxwt.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for(int i = 0; i < word.size(); i++) {\n        if(word[i] == '_') {\n            result += toupper(word[i+1]);\n            i++;\n        }\n        else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "tmp4imledug: /tmp/tmp4imledug.cpp:19: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp14_ulxwt: /tmp/tmp14_ulxwt.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpziop5d8h: /tmp/tmpziop5d8h.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpqjphfpgb: /tmp/tmpqjphfpgb.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpziop5d8h: /tmp/tmpziop5d8h.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp14_ulxwt: /tmp/tmp14_ulxwt.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        }\n        else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1666123234,
      "stdout": "",
      "stderr": "tmpzwezpjgm: /tmp/tmpzwezpjgm.cpp:19: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp14_ulxwt: /tmp/tmp14_ulxwt.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        }\n        else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1666123234,
      "stdout": "",
      "stderr": "tmpzwezpjgm: /tmp/tmpzwezpjgm.cpp:19: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp14_ulxwt: /tmp/tmp14_ulxwt.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpziop5d8h: /tmp/tmpziop5d8h.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for(int i = 0; i < word.length(); i++) {\n        if(word[i] == '_') {\n            result += toupper(word[i+1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpu1l0g5et: /tmp/tmpu1l0g5et.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp14_ulxwt: /tmp/tmp14_ulxwt.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for(int i = 0; i < word.length(); i++) {\n        if(word[i] == '_') {\n            result += toupper(word[i+1]);\n            i++;\n        }\n        else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp0hrjre3y: /tmp/tmp0hrjre3y.cpp:19: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp14_ulxwt: /tmp/tmp14_ulxwt.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp14_ulxwt: /tmp/tmp14_ulxwt.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for(int i = 0; i < word.length(); i++) {\n        if(word[i] == '_') {\n            result += toupper(word[i+1]);\n            i++;\n        }\n        else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "tmpkrj2vug_: /tmp/tmpkrj2vug_.cpp:19: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpqjphfpgb: /tmp/tmpqjphfpgb.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp14_ulxwt: /tmp/tmp14_ulxwt.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp14_ulxwt: /tmp/tmp14_ulxwt.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for(int i=0;i<word.length();i++) {\n        if(word[i]=='_') {\n            result+=toupper(word[i+1]);\n            i++;\n        }\n        else {\n            result+=word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp69n_v2z4: /tmp/tmp69n_v2z4.cpp:19: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpqjphfpgb: /tmp/tmpqjphfpgb.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp14_ulxwt: /tmp/tmp14_ulxwt.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp14_ulxwt: /tmp/tmp14_ulxwt.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpqjphfpgb: /tmp/tmpqjphfpgb.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp14_ulxwt: /tmp/tmp14_ulxwt.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i+1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1666123234,
      "stdout": "",
      "stderr": "tmpu0gb6uzr: /tmp/tmpu0gb6uzr.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpqjphfpgb: /tmp/tmpqjphfpgb.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpziop5d8h: /tmp/tmpziop5d8h.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp14_ulxwt: /tmp/tmp14_ulxwt.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpqjphfpgb: /tmp/tmpqjphfpgb.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp14_ulxwt: /tmp/tmp14_ulxwt.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpqjphfpgb: /tmp/tmpqjphfpgb.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpqjphfpgb: /tmp/tmpqjphfpgb.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for(int i = 0; i < word.size(); i++) {\n        if(word[i] == '_') {\n            result += toupper(word[i+1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1666123234,
      "stdout": "",
      "stderr": "tmpurgujse9: /tmp/tmpurgujse9.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n\tstd::string result;\n\tfor (int i = 0; i < word.length(); i++) {\n\t\tif (word[i] == '_') {\n\t\t\ti++;\n\t\t\tresult += toupper(word[i]);\n\t\t}\n\t\telse {\n\t\t\tresult += word[i];\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "tmpvc_hdu5w: /tmp/tmpvc_hdu5w.cpp:19: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpziop5d8h: /tmp/tmpziop5d8h.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n\tstd::string result;\n\tfor(int i=0;i<word.size();i++) {\n\t\tif(word[i]=='_') {\n\t\t\tresult+=toupper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse {\n\t\t\tresult+=word[i];\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "tmp5he16gme: /tmp/tmp5he16gme.cpp:19: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpziop5d8h: /tmp/tmpziop5d8h.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for (int i = 0; i < word.size(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1666123234,
      "stdout": "",
      "stderr": "tmppii366fu: /tmp/tmppii366fu.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for(int i=0;i<word.length();i++) {\n        if(word[i]=='_') {\n            result += toupper(word[i+1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "tmpp8q0jve1: /tmp/tmpp8q0jve1.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpziop5d8h: /tmp/tmpziop5d8h.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for(int i = 0; i < word.length(); i++) {\n        if(word[i] == '_') {\n            result += toupper(word[i+1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1666123234,
      "stdout": "",
      "stderr": "tmpt49q1pts: /tmp/tmpt49q1pts.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpqjphfpgb: /tmp/tmpqjphfpgb.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for(int i = 0; i < word.length(); i++) {\n        if(word[i] == '_') {\n            result += toupper(word[i+1]);\n            i++;\n        }\n        else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp0hrjre3y: /tmp/tmp0hrjre3y.cpp:19: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmp14_ulxwt: /tmp/tmp14_ulxwt.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpziop5d8h: /tmp/tmpziop5d8h.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for (int i = 0; i < word.size(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1666123234,
      "stdout": "",
      "stderr": "tmppii366fu: /tmp/tmppii366fu.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    int i = 0;\n    while(i < word.length()) {\n        if(word[i] == '_') {\n            result += toupper(word[i+1]);\n            i += 2;\n        } else {\n            result += word[i];\n            i++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "tmpwdsl5d92: /tmp/tmpwdsl5d92.cpp:20: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpqjphfpgb: /tmp/tmpqjphfpgb.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for (int i = 0; i < word.size(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1666123234,
      "stdout": "",
      "stderr": "tmppii366fu: /tmp/tmppii366fu.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpqjphfpgb: /tmp/tmpqjphfpgb.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for(int i = 0; i < word.size(); i++) {\n        if(word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1666123235,
      "stdout": "",
      "stderr": "tmpcq6ilu27: /tmp/tmpcq6ilu27.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpziop5d8h: /tmp/tmpziop5d8h.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpziop5d8h: /tmp/tmpziop5d8h.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "tmpqjphfpgb: /tmp/tmpqjphfpgb.cpp:18: int main(): Assertion `candidate((\"python_program\")) == (\"PythonProgram\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}