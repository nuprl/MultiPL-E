name: HumanEval_48_is_palindrome
language: ts
prompt: "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
  \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n\
  // true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text:\
  \ string): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\"\
  ),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
  aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
  xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
  xywzx\"),false);\n}\n\ntest();"
completions: ["    let i = 0,\n        j = text.length - 1;\n    while (i < j) {\n\
    \        if (text[i] !== text[j]) {\n            return false;\n        }\n  \
    \      i++;\n        j--;\n    }\n    return true;\n}\n", "    if (text.length\
    \ === 0) {\n        return true;\n    }\n\n    let i = 0;\n    let j = text.length\
    \ - 1;\n\n    while (i < j) {\n        if (text[i] !== text[j]) {\n          \
    \  return false;\n        }\n\n        i++;\n        j--;\n    }\n\n    return\
    \ true;\n}\n", "    let i = 0;\n    let j = text.length - 1;\n    while (i < j)\
    \ {\n        if (text[i] !== text[j]) {\n            return false;\n        }\n\
    \        i++;\n        j--;\n    }\n    return true;\n}\n", "    if (text ===\
    \ \"\") {\n        return true;\n    }\n    let i = 0;\n    let j = text.length\
    \ - 1;\n    while (i < j) {\n        if (text[i] !== text[j]) {\n            return\
    \ false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\n",
  "    let i = 0;\n    let j = text.length - 1;\n    while (i < j) {\n        if (text[i]\
    \ !== text[j]) {\n            return false;\n        }\n        i++;\n       \
    \ j--;\n    }\n    return true;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
