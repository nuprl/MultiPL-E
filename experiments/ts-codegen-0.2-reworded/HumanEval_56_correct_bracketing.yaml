name: HumanEval_56_correct_bracketing
language: ts
prompt: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
  \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
  )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
  <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
  \ string): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
  <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
  <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
  ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
  ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
  <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
  <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"\
  <><><<><>><>>><>\"),false);\n}\n\ntest();"
completions: ["  let opening_brackets = 0\n  let closing_brackets = 0\n  for (let\
    \ i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n      opening_brackets++\n\
    \    } else if (brackets[i] === '>') {\n      closing_brackets++\n    }\n  }\n\
    \  return opening_brackets === closing_brackets\n}\n", "  let opening_bracket\
    \ = 0\n  let closing_bracket = 0\n  for (let i = 0; i < brackets.length; i++)\
    \ {\n    if (brackets[i] === '<') {\n      opening_bracket += 1\n    } else if\
    \ (brackets[i] === '>') {\n      closing_bracket += 1\n    }\n  }\n  return opening_bracket\
    \ === closing_bracket\n}\n", "  let opening_bracket = 0\n  let closing_bracket\
    \ = 0\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ '<') {\n      opening_bracket++\n    } else if (brackets[i] === '>') {\n   \
    \   closing_bracket++\n    }\n  }\n  return opening_bracket === closing_bracket\n\
    }\n", "  let opening_brackets = 0;\n  let closing_brackets = 0;\n  for (let i\
    \ = 0; i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n      opening_brackets++;\n\
    \    } else if (brackets[i] === '>') {\n      closing_brackets++;\n    }\n  }\n\
    \  return opening_brackets === closing_brackets;\n}\n", "  let opening_bracket\
    \ = 0\n  let closing_bracket = 0\n  for (let i = 0; i < brackets.length; i++)\
    \ {\n    if (brackets[i] === \"<\") {\n      opening_bracket += 1\n    } else\
    \ if (brackets[i] === \">\") {\n      closing_bracket += 1\n    }\n  }\n  return\
    \ opening_bracket === closing_bracket\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
