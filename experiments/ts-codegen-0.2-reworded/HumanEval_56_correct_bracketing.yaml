name: HumanEval_56_correct_bracketing
language: ts
prompt: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
  \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
  )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
  <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
  \ string): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
  <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
  <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
  ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
  ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
  <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
  <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"\
  <><><<><>><>>><>\"),false);\n}\n\ntest();"
completions: ["  let opening_brackets = 0\n  let closing_brackets = 0\n  for (let\
    \ i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n      opening_brackets++\n\
    \    } else if (brackets[i] === '>') {\n      closing_brackets++\n    }\n  }\n\
    \  return opening_brackets === closing_brackets\n}\n", "  let opening_bracket\
    \ = 0\n  let closing_bracket = 0\n  for (let i = 0; i < brackets.length; i++)\
    \ {\n    if (brackets[i] === '<') {\n      opening_bracket += 1\n    } else if\
    \ (brackets[i] === '>') {\n      closing_bracket += 1\n    }\n  }\n  return opening_bracket\
    \ === closing_bracket\n}\n", "  let opening_bracket = 0\n  let closing_bracket\
    \ = 0\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ '<') {\n      opening_bracket++\n    } else if (brackets[i] === '>') {\n   \
    \   closing_bracket++\n    }\n  }\n  return opening_bracket === closing_bracket\n\
    }\n", "  let opening_brackets = 0;\n  let closing_brackets = 0;\n  for (let i\
    \ = 0; i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n      opening_brackets++;\n\
    \    } else if (brackets[i] === '>') {\n      closing_brackets++;\n    }\n  }\n\
    \  return opening_brackets === closing_brackets;\n}\n", "  let opening_bracket\
    \ = 0\n  let closing_bracket = 0\n  for (let i = 0; i < brackets.length; i++)\
    \ {\n    if (brackets[i] === \"<\") {\n      opening_bracket += 1\n    } else\
    \ if (brackets[i] === \">\") {\n      closing_bracket += 1\n    }\n  }\n  return\
    \ opening_bracket === closing_bracket\n}\n", "  let opening_bracket_count = 0\n\
    \  let closing_bracket_count = 0\n  let opening_bracket_index = -1\n  let closing_bracket_index\
    \ = -1\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ '<') {\n      opening_bracket_count++\n      opening_bracket_index = i\n   \
    \ } else if (brackets[i] === '>') {\n      closing_bracket_count++\n      closing_bracket_index\
    \ = i\n    }\n  }\n  return opening_bracket_count === closing_bracket_count\n\
    }\n", "  let opening_bracket = 0\n  let closing_bracket = 0\n  for (let i = 0;\
    \ i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n      opening_bracket++\n\
    \    } else if (brackets[i] === '>') {\n      closing_bracket++\n    }\n  }\n\
    \  return opening_bracket === closing_bracket\n}\n", "  let opening_bracket =\
    \ 0\n  let closing_bracket = 0\n  for (let i = 0; i < brackets.length; i++) {\n\
    \    if (brackets[i] === \"<\") {\n      opening_bracket++\n    } else if (brackets[i]\
    \ === \">\") {\n      closing_bracket++\n    }\n  }\n  return opening_bracket\
    \ === closing_bracket\n}\n", "  let opening_bracket_count = 0\n  let closing_bracket_count\
    \ = 0\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ \"<\") {\n      opening_bracket_count++\n    } else if (brackets[i] === \">\"\
    ) {\n      closing_bracket_count++\n    }\n  }\n  return opening_bracket_count\
    \ === closing_bracket_count\n}\n", "  let opening_brackets = 0\n  let closing_brackets\
    \ = 0\n\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ '<') {\n      opening_brackets++\n    } else if (brackets[i] === '>') {\n  \
    \    closing_brackets++\n    }\n  }\n\n  return opening_brackets === closing_brackets\n\
    }\n", "  let opening_bracket = 0\n  let closing_bracket = 0\n  let opening_bracket_count\
    \ = 0\n  let closing_bracket_count = 0\n  for (let i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] === '<') {\n      opening_bracket += 1\n      opening_bracket_count\
    \ += 1\n    } else if (brackets[i] === '>') {\n      closing_bracket += 1\n  \
    \    closing_bracket_count += 1\n    }\n  }\n  return opening_bracket === closing_bracket\n\
    }\n", "  let opening_bracket = 0\n  let closing_bracket = 0\n  let opening_bracket_stack\
    \ = []\n  let closing_bracket_stack = []\n  for (let i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] === '<') {\n      opening_bracket += 1\n      opening_bracket_stack.push(i)\n\
    \    } else if (brackets[i] === '>') {\n      closing_bracket += 1\n      closing_bracket_stack.push(i)\n\
    \    }\n  }\n  if (opening_bracket !== closing_bracket) {\n    return false\n\
    \  }\n  for (let i = 0; i < opening_bracket_stack.length; i++) {\n    if (opening_bracket_stack[i]\
    \ > closing_bracket_stack[i]) {\n      return false\n    }\n  }\n  return true\n\
    }\n", "  let stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if\
    \ (brackets[i] === '<') {\n      stack.push('<');\n    } else if (brackets[i]\
    \ === '>') {\n      if (stack.length === 0) {\n        return false;\n      }\
    \ else if (stack.pop() !== '<') {\n        return false;\n      }\n    }\n  }\n\
    \  return stack.length === 0;\n}\n", "  let opening_bracket_count = 0\n  let closing_bracket_count\
    \ = 0\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ '<') {\n      opening_bracket_count++\n    } else if (brackets[i] === '>') {\n\
    \      closing_bracket_count++\n    }\n  }\n  return opening_bracket_count ===\
    \ closing_bracket_count\n}\n", "  let opening_bracket = 0\n  let closing_bracket\
    \ = 0\n  let opening_bracket_count = 0\n  let closing_bracket_count = 0\n  let\
    \ opening_bracket_stack = []\n  let closing_bracket_stack = []\n  for (let i =\
    \ 0; i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n      opening_bracket_count++\n\
    \      opening_bracket = i\n      opening_bracket_stack.push(opening_bracket)\n\
    \    } else if (brackets[i] === '>') {\n      closing_bracket_count++\n      closing_bracket\
    \ = i\n      closing_bracket_stack.push(closing_bracket)\n    }\n  }\n  if (opening_bracket_count\
    \ !== closing_bracket_count) {\n    return false\n  }\n  for (let i = 0; i < opening_bracket_stack.length;\
    \ i++) {\n    if (opening_bracket_stack[i] !== closing_bracket_stack[i]) {\n \
    \     return false\n    }\n  }\n  return true\n}\n", "  let opening_bracket =\
    \ 0\n  let closing_bracket = 0\n  for (let i = 0; i < brackets.length; i++) {\n\
    \    if (brackets[i] === \"<\") {\n      opening_bracket += 1\n    } else if (brackets[i]\
    \ === \">\") {\n      closing_bracket += 1\n    }\n  }\n  return opening_bracket\
    \ === closing_bracket\n}\n", "  let opening_bracket = 0\n  let closing_bracket\
    \ = 0\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ '<') {\n      opening_bracket++\n    } else if (brackets[i] === '>') {\n   \
    \   closing_bracket++\n    }\n  }\n  return opening_bracket === closing_bracket\n\
    }\n", "  let opening_bracket = 0\n  let closing_bracket = 0\n  for (let i = 0;\
    \ i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n      opening_bracket++\n\
    \    } else if (brackets[i] === '>') {\n      closing_bracket++\n    }\n  }\n\
    \  return opening_bracket === closing_bracket\n}\n", "  let opening_brackets =\
    \ 0\n  let closing_brackets = 0\n  for (let i = 0; i < brackets.length; i++) {\n\
    \    if (brackets[i] === \"<\") {\n      opening_brackets += 1\n    } else if\
    \ (brackets[i] === \">\") {\n      closing_brackets += 1\n    }\n  }\n  return\
    \ opening_brackets === closing_brackets\n}\n", "  let opening_bracket_count =\
    \ 0\n  let closing_bracket_count = 0\n  let opening_bracket_index = -1\n  let\
    \ closing_bracket_index = -1\n  for (let i = 0; i < brackets.length; i++) {\n\
    \    if (brackets[i] === '<') {\n      opening_bracket_count++\n      opening_bracket_index\
    \ = i\n    } else if (brackets[i] === '>') {\n      closing_bracket_count++\n\
    \      closing_bracket_index = i\n    }\n  }\n  return opening_bracket_count ===\
    \ closing_bracket_count\n}\n", "  let opening_brackets = 0\n  let closing_brackets\
    \ = 0\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ '<') {\n      opening_brackets++\n    } else if (brackets[i] === '>') {\n  \
    \    closing_brackets++\n    }\n  }\n  return opening_brackets === closing_brackets\n\
    }\n", "  let opening_bracket = 0\n  let closing_bracket = 0\n  let bracket_stack\
    \ = []\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ '<') {\n      opening_bracket += 1\n    } else if (brackets[i] === '>') {\n\
    \      closing_bracket += 1\n    } else {\n      bracket_stack.push(brackets[i])\n\
    \    }\n  }\n  if (opening_bracket !== closing_bracket) {\n    return false\n\
    \  }\n  if (bracket_stack.length > 0) {\n    return false\n  }\n  return true\n\
    }\n", "  let opening_bracket = 0\n  let closing_bracket = 0\n  for (let i = 0;\
    \ i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n      opening_bracket++\n\
    \    } else if (brackets[i] === '>') {\n      closing_bracket++\n    }\n  }\n\
    \  return opening_bracket === closing_bracket\n}\n", "  let opening_bracket =\
    \ 0\n  let closing_bracket = 0\n  let opening_bracket_count = 0\n  let closing_bracket_count\
    \ = 0\n  let opening_bracket_index = 0\n  let closing_bracket_index = 0\n  let\
    \ opening_bracket_stack = []\n  let closing_bracket_stack = []\n  let bracket_stack\
    \ = []\n  let bracket_stack_index = 0\n  let bracket_stack_length = 0\n  let bracket_stack_length_max\
    \ = 0\n  let bracket_stack_length_min = 0\n  let bracket_stack_length_max_index\
    \ = 0\n  let bracket_stack_length_min_index = 0\n  let bracket_stack_length_max_index_min_index\
    \ = 0\n  let bracket_stack_length_min_index_max_index = 0\n  let bracket_stack_length_max_index_min_index_max_index\
    \ = 0\n  let bracket_stack_length_min_index_max_index_min_index_max_index = 0\n\
    \  let bracket_stack_length_min_index_max_index_min_index_max_index_min_index\
    \ = 0\n  let bracket_stack_length_min_index_max_index_min_index_max_index_min_index_max_index\
    \ = 0\n  let bracket_stack_length_min_index_max_index_min_index_max_index_min_index_max_index_min_index\
    \ = 0\n  let bracket_stack_length_min_index_max_index_min_index_max_index_min_index_max_index_min_index_max_index\
    \ = 0\n  let bracket_stack_length_min_index_max_index_min_index_max_index_min_index_max_index_min_index_max_index_min_index\
    \ = 0\n  let bracket_stack_length_min_index_max_index_min_index_max_index_min_index_max_index_min_index_max_index_min_index_max_index\
    \ = 0\n  let bracket_stack_length_min_index_max_index_min_index_max_index_", " \
    \ let opening_brackets = 0\n  let closing_brackets = 0\n  for (let i = 0; i <\
    \ brackets.length; i++) {\n    if (brackets[i] === '<') {\n      opening_brackets++\n\
    \    } else if (brackets[i] === '>') {\n      closing_brackets++\n    }\n  }\n\
    \  return opening_brackets === closing_brackets\n}\n", "  let opening_bracket\
    \ = 0\n  let closing_bracket = 0\n  for (let i = 0; i < brackets.length; i++)\
    \ {\n    if (brackets[i] === '<') {\n      opening_bracket++\n    } else if (brackets[i]\
    \ === '>') {\n      closing_bracket++\n    }\n  }\n  return opening_bracket ===\
    \ closing_bracket\n}\n", "  let opening_brackets = 0;\n  let closing_brackets\
    \ = 0;\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ '<') {\n      opening_brackets++;\n    } else if (brackets[i] === '>') {\n \
    \     closing_brackets++;\n    }\n  }\n  return opening_brackets === closing_brackets;\n\
    }\n", "  let opening_bracket_count = 0\n  let closing_bracket_count = 0\n\n  for\
    \ (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n  \
    \    opening_bracket_count++\n    } else if (brackets[i] === '>') {\n      closing_bracket_count++\n\
    \    }\n  }\n\n  return opening_bracket_count === closing_bracket_count\n}\n",
  "  let opening_bracket = 0\n  let closing_bracket = 0\n  let opening_bracket_count\
    \ = 0\n  let closing_bracket_count = 0\n  let opening_bracket_stack = []\n  let\
    \ closing_bracket_stack = []\n  for (let i = 0; i < brackets.length; i++) {\n\
    \    if (brackets[i] === '<') {\n      opening_bracket_count++\n      opening_bracket\
    \ = i\n      opening_bracket_stack.push(opening_bracket)\n    } else if (brackets[i]\
    \ === '>') {\n      closing_bracket_count++\n      closing_bracket = i\n     \
    \ closing_bracket_stack.push(closing_bracket)\n    }\n  }\n  if (opening_bracket_count\
    \ !== closing_bracket_count) {\n    return false\n  }\n  for (let i = 0; i < opening_bracket_stack.length;\
    \ i++) {\n    if (opening_bracket_stack[i] !== closing_bracket_stack[i]) {\n \
    \     return false\n    }\n  }\n  return true\n}\n", "  let stack = [];\n  for\
    \ (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n  \
    \    stack.push(i);\n    } else if (brackets[i] === '>') {\n      if (stack.length\
    \ === 0) {\n        return false;\n      }\n      let j = stack.pop();\n     \
    \ if (i !== j) {\n        return false;\n      }\n    }\n  }\n  return stack.length\
    \ === 0;\n}\n", "  let opening_brackets = 0\n  let closing_brackets = 0\n  for\
    \ (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n  \
    \    opening_brackets++\n    } else if (brackets[i] === '>') {\n      closing_brackets++\n\
    \    }\n  }\n  return opening_brackets === closing_brackets\n}\n", "  let opening_bracket\
    \ = 0\n  let closing_bracket = 0\n  let opening_bracket_count = 0\n  let closing_bracket_count\
    \ = 0\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ '<') {\n      opening_bracket_count++\n      opening_bracket++\n    } else if\
    \ (brackets[i] === '>') {\n      closing_bracket_count++\n      closing_bracket++\n\
    \    }\n  }\n  return opening_bracket === closing_bracket\n}\n", "  let opening_bracket_count\
    \ = 0\n  let closing_bracket_count = 0\n  for (let i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] === '<') {\n      opening_bracket_count++\n    }\
    \ else if (brackets[i] === '>') {\n      closing_bracket_count++\n    }\n  }\n\
    \  return opening_bracket_count === closing_bracket_count\n}\n", "  let opening_brackets\
    \ = 0\n  let closing_brackets = 0\n  for (let i = 0; i < brackets.length; i++)\
    \ {\n    if (brackets[i] === '<') {\n      opening_brackets++\n    } else if (brackets[i]\
    \ === '>') {\n      closing_brackets++\n    }\n  }\n  return opening_brackets\
    \ === closing_brackets\n}\n", "  let opening_brackets = 0\n  let closing_brackets\
    \ = 0\n\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ '<') {\n      opening_brackets++\n    } else if (brackets[i] === '>') {\n  \
    \    closing_brackets++\n    }\n  }\n\n  return opening_brackets === closing_brackets\n\
    }\n", "  let opening_bracket_count = 0\n  let closing_bracket_count = 0\n  for\
    \ (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n  \
    \    opening_bracket_count++\n    } else if (brackets[i] === '>') {\n      closing_bracket_count++\n\
    \    }\n  }\n  return opening_bracket_count === closing_bracket_count\n}\n", " \
    \ let opening_bracket = 0\n  let closing_bracket = 0\n  for (let i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] === '<') {\n      opening_bracket++\n    } else\
    \ if (brackets[i] === '>') {\n      closing_bracket++\n    }\n  }\n  return opening_bracket\
    \ === closing_bracket\n}\n", "  let opening_bracket = 0\n  let closing_bracket\
    \ = 0\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ '<') {\n      opening_bracket++\n    } else if (brackets[i] === '>') {\n   \
    \   closing_bracket++\n    }\n  }\n  return opening_bracket === closing_bracket\n\
    }\n", "  let opening_bracket_count = 0\n  let closing_bracket_count = 0\n\n  for\
    \ (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n  \
    \    opening_bracket_count++\n    } else if (brackets[i] === '>') {\n      closing_bracket_count++\n\
    \    }\n  }\n\n  return opening_bracket_count === closing_bracket_count\n}\n",
  "  let opening_brackets = 0\n  let closing_brackets = 0\n  for (let i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] === '<') {\n      opening_brackets++\n    } else\
    \ if (brackets[i] === '>') {\n      closing_brackets++\n    }\n  }\n  return opening_brackets\
    \ === closing_brackets\n}\n", "  let opening_bracket_count = 0\n  let closing_bracket_count\
    \ = 0\n\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ '<') {\n      opening_bracket_count++\n    } else if (brackets[i] === '>') {\n\
    \      closing_bracket_count++\n    }\n  }\n\n  return opening_bracket_count ===\
    \ closing_bracket_count\n}\n", "  let opening_bracket = 0\n  let closing_bracket\
    \ = 0\n  let opening_bracket_count = 0\n  let closing_bracket_count = 0\n  for\
    \ (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n  \
    \    opening_bracket_count++\n    } else if (brackets[i] === '>') {\n      closing_bracket_count++\n\
    \    }\n  }\n  if (opening_bracket_count !== closing_bracket_count) {\n    return\
    \ false\n  }\n  opening_bracket = 0\n  closing_bracket = 0\n  for (let i = 0;\
    \ i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n      opening_bracket++\n\
    \    } else if (brackets[i] === '>') {\n      closing_bracket++\n    }\n  }\n\
    \  if (opening_bracket !== closing_bracket) {\n    return false\n  }\n  return\
    \ true\n}\n", "  let opening_brackets = 0\n  let closing_brackets = 0\n  for (let\
    \ i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n      opening_brackets\
    \ += 1\n    } else if (brackets[i] === '>') {\n      closing_brackets += 1\n \
    \   }\n  }\n  return opening_brackets === closing_brackets\n}\n", "  let opening_brackets\
    \ = 0\n  let closing_brackets = 0\n  for (let i = 0; i < brackets.length; i++)\
    \ {\n    if (brackets[i] === \"<\") {\n      opening_brackets++\n    } else if\
    \ (brackets[i] === \">\") {\n      closing_brackets++\n    }\n  }\n  return opening_brackets\
    \ === closing_brackets\n}\n", "  let opening_bracket_count = 0\n  let closing_bracket_count\
    \ = 0\n  let opening_bracket_index = -1\n  let closing_bracket_index = -1\n  for\
    \ (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n  \
    \    opening_bracket_count++\n      opening_bracket_index = i\n    } else if (brackets[i]\
    \ === '>') {\n      closing_bracket_count++\n      closing_bracket_index = i\n\
    \    }\n  }\n  return opening_bracket_count === closing_bracket_count\n}\n", " \
    \ let opening_bracket_count = 0\n  let closing_bracket_count = 0\n  for (let i\
    \ = 0; i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n      opening_bracket_count++\n\
    \    } else if (brackets[i] === '>') {\n      closing_bracket_count++\n    }\n\
    \  }\n  return opening_bracket_count === closing_bracket_count\n}\n", "  let opening_bracket\
    \ = 0\n  let closing_bracket = 0\n  for (let i = 0; i < brackets.length; i++)\
    \ {\n    if (brackets[i] === '<') {\n      opening_bracket += 1\n    } else if\
    \ (brackets[i] === '>') {\n      closing_bracket += 1\n    }\n  }\n  return opening_bracket\
    \ === closing_bracket\n}\n", "  let opening_bracket_count = 0\n  let closing_bracket_count\
    \ = 0\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ '<') {\n      opening_bracket_count++\n    } else if (brackets[i] === '>') {\n\
    \      closing_bracket_count++\n    }\n  }\n  return opening_bracket_count ===\
    \ closing_bracket_count\n}\n", "  let opening_bracket_count = 0\n  let closing_bracket_count\
    \ = 0\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ '<') {\n      opening_bracket_count++\n    } else if (brackets[i] === '>') {\n\
    \      closing_bracket_count++\n    }\n  }\n  return opening_bracket_count ===\
    \ closing_bracket_count\n}\n", "  let opening_bracket_count = 0\n  let closing_bracket_count\
    \ = 0\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ \"<\") {\n      opening_bracket_count++\n    } else if (brackets[i] === \">\"\
    ) {\n      closing_bracket_count++\n    }\n  }\n  return opening_bracket_count\
    \ === closing_bracket_count\n}\n", "  let opening_bracket = 0\n  let closing_bracket\
    \ = 0\n  let opening_bracket_count = 0\n  let closing_bracket_count = 0\n  for\
    \ (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n  \
    \    opening_bracket_count++\n      opening_bracket++\n    } else if (brackets[i]\
    \ === '>') {\n      closing_bracket_count++\n      closing_bracket++\n    }\n\
    \  }\n  return opening_bracket === closing_bracket\n}\n", "  let opening_brackets\
    \ = 0\n  let closing_brackets = 0\n  for (let i = 0; i < brackets.length; i++)\
    \ {\n    if (brackets[i] === \"<\") {\n      opening_brackets++\n    } else if\
    \ (brackets[i] === \">\") {\n      closing_brackets++\n    }\n  }\n  return opening_brackets\
    \ === closing_brackets\n}\n", "  let opening_brackets = 0\n  let closing_brackets\
    \ = 0\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ '<') {\n      opening_brackets++\n    } else if (brackets[i] === '>') {\n  \
    \    closing_brackets++\n    }\n  }\n  return opening_brackets === closing_brackets\n\
    }\n", "  let opening_bracket = 0\n  let closing_bracket = 0\n  for (let i = 0;\
    \ i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n      opening_bracket++\n\
    \    } else if (brackets[i] === '>') {\n      closing_bracket++\n    }\n  }\n\
    \  return opening_bracket === closing_bracket\n}\n", "  let opening_bracket_count\
    \ = 0\n  let closing_bracket_count = 0\n  for (let i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] === \"<\") {\n      opening_bracket_count++\n  \
    \  } else if (brackets[i] === \">\") {\n      closing_bracket_count++\n    }\n\
    \  }\n  return opening_bracket_count === closing_bracket_count\n}\n", "  let opening_bracket_count\
    \ = 0\n  let closing_bracket_count = 0\n  for (let i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] === '<') {\n      opening_bracket_count++\n    }\
    \ else if (brackets[i] === '>') {\n      closing_bracket_count++\n    }\n  }\n\
    \  return opening_bracket_count === closing_bracket_count\n}\n", "  let opening_bracket\
    \ = 0\n  let closing_bracket = 0\n  for (let i = 0; i < brackets.length; i++)\
    \ {\n    if (brackets[i] === '<') {\n      opening_bracket++\n    } else if (brackets[i]\
    \ === '>') {\n      closing_bracket++\n    }\n  }\n  return opening_bracket ===\
    \ closing_bracket\n}\n", "  let opening_brackets = 0\n  let closing_brackets =\
    \ 0\n\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ '<') {\n      opening_brackets++\n    } else if (brackets[i] === '>') {\n  \
    \    closing_brackets++\n    }\n  }\n\n  return opening_brackets === closing_brackets\n\
    }\n", "  let opening_bracket = 0\n  let closing_bracket = 0\n  for (let i = 0;\
    \ i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n      opening_bracket\
    \ += 1\n    } else if (brackets[i] === '>') {\n      closing_bracket += 1\n  \
    \  }\n  }\n  return opening_bracket === closing_bracket\n}\n", "  let opening_bracket_count\
    \ = 0\n  let closing_bracket_count = 0\n  for (let i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] === \"<\") {\n      opening_bracket_count++\n  \
    \  } else if (brackets[i] === \">\") {\n      closing_bracket_count++\n    }\n\
    \  }\n  return opening_bracket_count === closing_bracket_count\n}\n", "  let opening_brackets\
    \ = 0\n  let closing_brackets = 0\n  for (let i = 0; i < brackets.length; i++)\
    \ {\n    if (brackets[i] === \"<\") {\n      opening_brackets++\n    } else if\
    \ (brackets[i] === \">\") {\n      closing_brackets++\n    }\n  }\n  return opening_brackets\
    \ === closing_brackets\n}\n", "  let opening_brackets = 0\n  let closing_brackets\
    \ = 0\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ '<') {\n      opening_brackets++\n    } else if (brackets[i] === '>') {\n  \
    \    closing_brackets++\n    }\n  }\n  return opening_brackets === closing_brackets\n\
    }\n", "  let opening_bracket_count = 0\n  let closing_bracket_count = 0\n  let\
    \ opening_bracket_index = 0\n  let closing_bracket_index = 0\n\n  for (let i =\
    \ 0; i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n      opening_bracket_count++\n\
    \      opening_bracket_index = i\n    } else if (brackets[i] === '>') {\n    \
    \  closing_bracket_count++\n      closing_bracket_index = i\n    }\n  }\n\n  if\
    \ (opening_bracket_count !== closing_bracket_count) {\n    return false\n  }\n\
    \n  if (opening_bracket_count === 0) {\n    return true\n  }\n\n  if (opening_bracket_index\
    \ > closing_bracket_index) {\n    return false\n  }\n\n  let opening_bracket_string\
    \ = brackets.substring(opening_bracket_index, opening_bracket_index + 1)\n  let\
    \ closing_bracket_string = brackets.substring(closing_bracket_index, closing_bracket_index\
    \ + 1)\n\n  if (opening_bracket_string !== closing_bracket_string) {\n    return\
    \ false\n  }\n\n  return true\n}\n", "  let opening_bracket_count = 0\n  let closing_bracket_count\
    \ = 0\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ '<') {\n      opening_bracket_count++\n    } else if (brackets[i] === '>') {\n\
    \      closing_bracket_count++\n    }\n  }\n  return opening_bracket_count ===\
    \ closing_bracket_count\n}\n", "  let opening_bracket = 0\n  let closing_bracket\
    \ = 0\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ '<') {\n      opening_bracket++\n    } else if (brackets[i] === '>') {\n   \
    \   closing_bracket++\n    }\n  }\n  return opening_bracket === closing_bracket\n\
    }\n", "  let opening_bracket = 0\n  let closing_bracket = 0\n  for (let i = 0;\
    \ i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n      opening_bracket\
    \ += 1\n    } else if (brackets[i] === '>') {\n      closing_bracket += 1\n  \
    \  }\n  }\n  return opening_bracket === closing_bracket\n}\n", "  let opening_brackets\
    \ = 0\n  let closing_brackets = 0\n  for (let i = 0; i < brackets.length; i++)\
    \ {\n    if (brackets[i] === '<') {\n      opening_brackets++\n    } else if (brackets[i]\
    \ === '>') {\n      closing_brackets++\n    }\n  }\n  return opening_brackets\
    \ === closing_brackets\n}\n", "  let opening_bracket = 0\n  let closing_bracket\
    \ = 0\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ '<') {\n      opening_bracket += 1\n    } else if (brackets[i] === '>') {\n\
    \      closing_bracket += 1\n    }\n  }\n  return opening_bracket === closing_bracket\n\
    }\n", "  let opening_bracket = 0\n  let closing_bracket = 0\n  for (let i = 0;\
    \ i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      opening_bracket++\n\
    \    } else if (brackets[i] === \">\") {\n      closing_bracket++\n    }\n  }\n\
    \  return opening_bracket === closing_bracket\n}\n", "  let opening_brackets =\
    \ 0\n  let closing_brackets = 0\n  let opening_bracket = -1\n  let closing_bracket\
    \ = -1\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ '<') {\n      opening_brackets += 1\n      opening_bracket = i\n    } else if\
    \ (brackets[i] === '>') {\n      closing_brackets += 1\n      closing_bracket\
    \ = i\n    }\n  }\n  return opening_brackets === closing_brackets\n}\n", "  let\
    \ opening_brackets = 0\n  let closing_brackets = 0\n  for (let i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] === '<') {\n      opening_brackets++\n    } else\
    \ if (brackets[i] === '>') {\n      closing_brackets++\n    }\n  }\n  return opening_brackets\
    \ === closing_brackets\n}\n", "  let stack = [];\n  for (let i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] === '<') {\n      stack.push(i);\n    } else if\
    \ (brackets[i] === '>') {\n      if (stack.length === 0) {\n        return false;\n\
    \      } else {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length\
    \ === 0;\n}\n", "  let opening_brackets = 0\n  let closing_brackets = 0\n  let\
    \ i = 0\n  while (i < brackets.length) {\n    if (brackets[i] === \"<\") {\n \
    \     opening_brackets += 1\n    } else if (brackets[i] === \">\") {\n      closing_brackets\
    \ += 1\n    }\n    i += 1\n  }\n  return opening_brackets === closing_brackets\n\
    }\n", "  let opening_bracket_count = 0\n  let closing_bracket_count = 0\n  for\
    \ (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n  \
    \    opening_bracket_count++\n    } else if (brackets[i] === '>') {\n      closing_bracket_count++\n\
    \    }\n  }\n  return opening_bracket_count === closing_bracket_count\n}\n", " \
    \ let opening_bracket = 0\n  let closing_bracket = 0\n  let opening_bracket_count\
    \ = 0\n  let closing_bracket_count = 0\n  for (let i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] === '<') {\n      opening_bracket_count++\n    \
    \  opening_bracket++\n    } else if (brackets[i] === '>') {\n      closing_bracket_count++\n\
    \      closing_bracket++\n    }\n  }\n  return opening_bracket === closing_bracket\n\
    }\n", "  let opening_bracket = 0\n  let closing_bracket = 0\n  let opening_bracket_index\
    \ = 0\n  let closing_bracket_index = 0\n  let opening_bracket_count = 0\n  let\
    \ closing_bracket_count = 0\n  let opening_bracket_stack = []\n  let closing_bracket_stack\
    \ = []\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ '<') {\n      opening_bracket_count++\n      opening_bracket_stack.push(i)\n\
    \    } else if (brackets[i] === '>') {\n      closing_bracket_count++\n      closing_bracket_stack.push(i)\n\
    \    }\n  }\n  opening_bracket = opening_bracket_stack.pop()\n  closing_bracket\
    \ = closing_bracket_stack.pop()\n  opening_bracket_index = opening_bracket_stack.pop()\n\
    \  closing_bracket_index = closing_bracket_stack.pop()\n  if (opening_bracket_count\
    \ !== closing_bracket_count) {\n    return false\n  }\n  for (let i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] === '<') {\n      if (i === opening_bracket_index)\
    \ {\n        opening_bracket_count--\n      } else if (i === closing_bracket_index)\
    \ {\n        closing_bracket_count--\n      } else if (i > opening_bracket_index\
    \ && i < closing_bracket_index) {\n        opening_bracket_count--\n        closing_bracket_count--\n\
    \      }\n    } else if (brackets[i] === '>') {\n      if (i === opening_bracket_index)\
    \ {\n        opening_bracket_count--\n      } else if (i === closing_bracket_index)\
    \ {\n        closing_bracket_count--\n      } else if (i > opening_bracket_index\
    \ && i < closing_bracket_index) {\n        opening_bracket_count--\n        closing_",
  "  let opening = 0\n  let closing = 0\n  for (let i = 0; i < brackets.length; i++)\
    \ {\n    if (brackets[i] === \"<\") {\n      opening++\n    } else if (brackets[i]\
    \ === \">\") {\n      closing++\n    }\n  }\n  return opening === closing\n}\n",
  "  let opening_brackets = 0\n  let closing_brackets = 0\n  for (let i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] === '<') {\n      opening_brackets += 1\n    } else\
    \ if (brackets[i] === '>') {\n      closing_brackets += 1\n    }\n  }\n  return\
    \ opening_brackets === closing_brackets\n}\n", "  let opening_bracket_count =\
    \ 0\n  let closing_bracket_count = 0\n  for (let i = 0; i < brackets.length; i++)\
    \ {\n    if (brackets[i] === \"<\") {\n      opening_bracket_count++\n    } else\
    \ if (brackets[i] === \">\") {\n      closing_bracket_count++\n    }\n  }\n  return\
    \ opening_bracket_count === closing_bracket_count\n}\n", "  let opening_brackets\
    \ = 0\n  let closing_brackets = 0\n  for (let i = 0; i < brackets.length; i++)\
    \ {\n    if (brackets[i] === '<') {\n      opening_brackets++\n    } else if (brackets[i]\
    \ === '>') {\n      closing_brackets++\n    }\n  }\n  return opening_brackets\
    \ === closing_brackets\n}\n", "  let opening_bracket_count = 0\n  let closing_bracket_count\
    \ = 0\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ '<') {\n      opening_bracket_count++\n    } else if (brackets[i] === '>') {\n\
    \      closing_bracket_count++\n    }\n  }\n  return opening_bracket_count ===\
    \ closing_bracket_count\n}\n", "  let opening_bracket = 0\n  let closing_bracket\
    \ = 0\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ '<') {\n      opening_bracket++\n    } else if (brackets[i] === '>') {\n   \
    \   closing_bracket++\n    }\n  }\n  return opening_bracket === closing_bracket\n\
    }\n", "  let opening_bracket = 0\n  let closing_bracket = 0\n  let opening_bracket_count\
    \ = 0\n  let closing_bracket_count = 0\n  for (let i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] === \"<\") {\n      opening_bracket_count++\n  \
    \  } else if (brackets[i] === \">\") {\n      closing_bracket_count++\n    }\n\
    \  }\n  opening_bracket = opening_bracket_count\n  closing_bracket = closing_bracket_count\n\
    \  if (opening_bracket === closing_bracket) {\n    return true\n  } else {\n \
    \   return false\n  }\n}\n", "  let opening_brackets = 0\n  let closing_brackets\
    \ = 0\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ '<') {\n      opening_brackets++\n    } else if (brackets[i] === '>') {\n  \
    \    closing_brackets++\n    }\n  }\n  return opening_brackets === closing_brackets\n\
    }\n", "  let opening_bracket_count = 0\n  let closing_bracket_count = 0\n  for\
    \ (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n  \
    \    opening_bracket_count++\n    } else if (brackets[i] === '>') {\n      closing_bracket_count++\n\
    \    }\n  }\n  return opening_bracket_count === closing_bracket_count\n}\n", " \
    \ let opening_brackets = 0\n  let closing_brackets = 0\n  for (let i = 0; i <\
    \ brackets.length; i++) {\n    if (brackets[i] === '<') {\n      opening_brackets\
    \ += 1\n    } else if (brackets[i] === '>') {\n      closing_brackets += 1\n \
    \   }\n  }\n  return opening_brackets === closing_brackets\n}\n", "  let opening_bracket_count\
    \ = 0\n  let closing_bracket_count = 0\n  let opening_bracket_index = 0\n  let\
    \ closing_bracket_index = 0\n\n  for (let i = 0; i < brackets.length; i++) {\n\
    \    if (brackets[i] === '<') {\n      opening_bracket_count += 1\n      opening_bracket_index\
    \ = i\n    } else if (brackets[i] === '>') {\n      closing_bracket_count += 1\n\
    \      closing_bracket_index = i\n    }\n  }\n\n  if (opening_bracket_count !==\
    \ closing_bracket_count) {\n    return false\n  }\n\n  if (opening_bracket_count\
    \ === 0) {\n    return true\n  }\n\n  let opening_bracket_char = brackets[opening_bracket_index]\n\
    \  let closing_bracket_char = brackets[closing_bracket_index]\n\n  if (opening_bracket_char\
    \ === '<' && closing_bracket_char === '>') {\n    return true\n  }\n\n  if (opening_bracket_char\
    \ === '<' && closing_bracket_char === '<') {\n    return true\n  }\n\n  if (opening_bracket_char\
    \ === '>' && closing_bracket_char === '>') {\n    return true\n  }\n\n  return\
    \ false\n}\n", "  let opening_bracket_count = 0\n  let closing_bracket_count =\
    \ 0\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '<')\
    \ {\n      opening_bracket_count++\n    } else if (brackets[i] === '>') {\n  \
    \    closing_bracket_count++\n    }\n  }\n  return opening_bracket_count === closing_bracket_count\n\
    }\n", "  let opening_bracket_count = 0\n  let closing_bracket_count = 0\n  for\
    \ (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n  \
    \    opening_bracket_count++\n    } else if (brackets[i] === '>') {\n      closing_bracket_count++\n\
    \    }\n  }\n  return opening_bracket_count === closing_bracket_count\n}\n", " \
    \ let stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i]\
    \ === '<') {\n      stack.push(i);\n    } else if (brackets[i] === '>') {\n  \
    \    if (stack.length === 0) {\n        return false;\n      }\n      let j =\
    \ stack.pop();\n      if (i !== j) {\n        return false;\n      }\n    }\n\
    \  }\n  return stack.length === 0;\n}\n", "  let opening_bracket = 0\n  let closing_bracket\
    \ = 0\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ '<') {\n      opening_bracket += 1\n    } else if (brackets[i] === '>') {\n\
    \      closing_bracket += 1\n    }\n  }\n  return opening_bracket === closing_bracket\n\
    }\n", "  let opening_bracket = 0\n  let closing_bracket = 0\n  for (let i = 0;\
    \ i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n      opening_bracket\
    \ += 1\n    } else if (brackets[i] === '>') {\n      closing_bracket += 1\n  \
    \  }\n  }\n  return opening_bracket === closing_bracket\n}\n", "  let stack =\
    \ [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ '<') {\n      stack.push(i);\n    } else if (brackets[i] === '>') {\n      if\
    \ (stack.length === 0) {\n        return false;\n      }\n      let j = stack.pop();\n\
    \      if (j !== i - 1) {\n        return false;\n      }\n    }\n  }\n  return\
    \ stack.length === 0;\n}\n", "  let opening_bracket_count = 0\n  let closing_bracket_count\
    \ = 0\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ '<') {\n      opening_bracket_count++\n    } else if (brackets[i] === '>') {\n\
    \      closing_bracket_count++\n    }\n  }\n  return opening_bracket_count ===\
    \ closing_bracket_count\n}\n", "  let stack = [];\n  for (let i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] === '<') {\n      stack.push(i);\n    } else if\
    \ (brackets[i] === '>') {\n      if (stack.length === 0) {\n        return false;\n\
    \      }\n      let j = stack.pop();\n      if (i !== j) {\n        return false;\n\
    \      }\n    }\n  }\n  return stack.length === 0;\n}\n", "  let opening_bracket\
    \ = 0\n  let closing_bracket = 0\n  let bracket_stack = []\n  for (let i = 0;\
    \ i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n      opening_bracket\
    \ += 1\n    } else if (brackets[i] === '>') {\n      closing_bracket += 1\n  \
    \  } else {\n      bracket_stack.push(brackets[i])\n    }\n  }\n  if (opening_bracket\
    \ === closing_bracket) {\n    return true\n  } else {\n    return false\n  }\n\
    }\n", "  let opening_bracket_count = 0\n  let closing_bracket_count = 0\n  let\
    \ opening_bracket_index = -1\n  let closing_bracket_index = -1\n  for (let i =\
    \ 0; i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n      opening_bracket_count\
    \ += 1\n      opening_bracket_index = i\n    } else if (brackets[i] === '>') {\n\
    \      closing_bracket_count += 1\n      closing_bracket_index = i\n    }\n  }\n\
    \  return opening_bracket_count === closing_bracket_count\n}\n", "  let opening_bracket_count\
    \ = 0\n  let closing_bracket_count = 0\n\n  for (let i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] === \"<\") {\n      opening_bracket_count++\n  \
    \  } else if (brackets[i] === \">\") {\n      closing_bracket_count++\n    }\n\
    \  }\n\n  return opening_bracket_count === closing_bracket_count\n}\n", "  let\
    \ opening_bracket = 0\n  let closing_bracket = 0\n  let opening_bracket_count\
    \ = 0\n  let closing_bracket_count = 0\n  for (let i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] === '<') {\n      opening_bracket_count++\n    }\
    \ else if (brackets[i] === '>') {\n      closing_bracket_count++\n    }\n  }\n\
    \  if (opening_bracket_count !== closing_bracket_count) {\n    return false\n\
    \  }\n  opening_bracket = 0\n  closing_bracket = 0\n  for (let i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] === '<') {\n      opening_bracket++\n    } else\
    \ if (brackets[i] === '>') {\n      closing_bracket++\n    }\n  }\n  if (opening_bracket\
    \ !== closing_bracket) {\n    return false\n  }\n  return true\n}\n", "  let opening_bracket_count\
    \ = 0\n  let closing_bracket_count = 0\n  for (let i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] === '<') {\n      opening_bracket_count++\n    }\
    \ else if (brackets[i] === '>') {\n      closing_bracket_count++\n    }\n  }\n\
    \  return opening_bracket_count === closing_bracket_count\n}\n", "  let opening_brackets\
    \ = 0\n  let closing_brackets = 0\n  let opening_bracket = 0\n  let closing_bracket\
    \ = 0\n  let opening_bracket_index = 0\n  let closing_bracket_index = 0\n  let\
    \ i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let\
    \ o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let\
    \ u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let\
    \ bracket_count = 0\n  let bracket_index = 0\n  let bracket_stack = []\n  let\
    \ bracket_stack_length = 0\n  let bracket_stack_index = 0\n  let bracket_stack_top\
    \ = 0\n  let bracket_stack_top_index = 0\n  let bracket_stack_top_value = 0\n\
    \  let bracket_stack_top_value_index = 0\n  let bracket_stack_top_value_value\
    \ = 0\n  let bracket_stack_top_value_value_index = 0\n  let bracket_stack_top_value_value_value\
    \ = 0\n  let bracket_stack_top_value_value_value_index = 0\n  let bracket_stack_top_value_value_value_value\
    \ = 0\n  let bracket_stack_top_value_value_value_value_index = 0\n  let bracket_stack_top_value_value_value_value_value\
    \ = 0\n  let bracket_stack_top_value_value_value_value_value_index = 0\n  let\
    \ bracket_stack_top_value_value_value_value_value_value = 0\n  let bracket_stack_top_value_value_value_value_value_value_index\
    \ = 0\n  let bracket_stack_top_value_value_value_value_value_value_value = 0\n\
    \  let bracket_stack_top_value_value_value_value_value_value_value_index = 0\n\
    \  let bracket_stack_top_value_value_value_", "  let opening_brackets = 0\n  let\
    \ closing_brackets = 0\n  for (let i = 0; i < brackets.length; i++) {\n    if\
    \ (brackets[i] === '<') {\n      opening_brackets += 1\n    } else if (brackets[i]\
    \ === '>') {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets\
    \ === closing_brackets\n}\n", "  let opening_bracket_count = 0\n  let closing_bracket_count\
    \ = 0\n\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ '<') {\n      opening_bracket_count++\n    } else if (brackets[i] === '>') {\n\
    \      closing_bracket_count++\n    }\n  }\n\n  return opening_bracket_count ===\
    \ closing_bracket_count\n}\n", "  let opening_bracket_count = 0\n  let closing_bracket_count\
    \ = 0\n\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ \"<\") {\n      opening_bracket_count++\n    } else if (brackets[i] === \">\"\
    ) {\n      closing_bracket_count++\n    }\n  }\n\n  return opening_bracket_count\
    \ === closing_bracket_count\n}\n", "  let opening_bracket_count = 0\n  let closing_bracket_count\
    \ = 0\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ '<') {\n      opening_bracket_count++\n    } else if (brackets[i] === '>') {\n\
    \      closing_bracket_count++\n    }\n  }\n  return opening_bracket_count ===\
    \ closing_bracket_count\n}\n", "  let stack = [];\n  for (let i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] === '<') {\n      stack.push(i);\n    } else if\
    \ (brackets[i] === '>') {\n      if (stack.length === 0) {\n        return false;\n\
    \      }\n      let j = stack.pop();\n      if (j !== i - 1) {\n        return\
    \ false;\n      }\n    }\n  }\n  return stack.length === 0;\n}\n", "  let opening_bracket\
    \ = 0\n  let closing_bracket = 0\n  for (let i = 0; i < brackets.length; i++)\
    \ {\n    if (brackets[i] === '<') {\n      opening_bracket += 1\n    } else if\
    \ (brackets[i] === '>') {\n      closing_bracket += 1\n    }\n  }\n  return opening_bracket\
    \ === closing_bracket\n}\n", "  let opening_bracket = 0\n  let closing_bracket\
    \ = 0\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ '<') {\n      opening_bracket++\n    } else if (brackets[i] === '>') {\n   \
    \   closing_bracket++\n    }\n  }\n  return opening_bracket === closing_bracket\n\
    }\n", "  let opening_bracket_count = 0\n  let closing_bracket_count = 0\n\n  for\
    \ (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n  \
    \    opening_bracket_count++\n    } else if (brackets[i] === '>') {\n      closing_bracket_count++\n\
    \    }\n  }\n\n  return opening_bracket_count === closing_bracket_count\n}\n",
  "  let opening_bracket = 0\n  let closing_bracket = 0\n  for (let i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] === '<') {\n      opening_bracket++\n    } else\
    \ if (brackets[i] === '>') {\n      closing_bracket++\n    }\n  }\n  return opening_bracket\
    \ === closing_bracket\n}\n", "  let opening_bracket_count = 0\n  let closing_bracket_count\
    \ = 0\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ '<') {\n      opening_bracket_count++\n    } else if (brackets[i] === '>') {\n\
    \      closing_bracket_count++\n    }\n  }\n  return opening_bracket_count ===\
    \ closing_bracket_count\n}\n", "  let opening_bracket_count = 0\n  let closing_bracket_count\
    \ = 0\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ '<') {\n      opening_bracket_count++\n    } else if (brackets[i] === '>') {\n\
    \      closing_bracket_count++\n    }\n  }\n  return opening_bracket_count ===\
    \ closing_bracket_count\n}\n", "  let opening_bracket = 0\n  let closing_bracket\
    \ = 0\n  let opening_bracket_stack = []\n  let closing_bracket_stack = []\n\n\
    \  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n\
    \      opening_bracket += 1\n      opening_bracket_stack.push(i)\n    } else if\
    \ (brackets[i] === '>') {\n      closing_bracket += 1\n      closing_bracket_stack.push(i)\n\
    \    }\n  }\n\n  if (opening_bracket !== closing_bracket) {\n    return false\n\
    \  }\n\n  for (let i = 0; i < opening_bracket_stack.length; i++) {\n    if (opening_bracket_stack[i]\
    \ < closing_bracket_stack[i]) {\n      return false\n    }\n  }\n\n  return true\n\
    }\n", "  let opening_brackets = 0\n  let closing_brackets = 0\n  for (let i =\
    \ 0; i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n      opening_brackets\
    \ += 1\n    } else if (brackets[i] === '>') {\n      closing_brackets += 1\n \
    \   }\n  }\n  return opening_brackets === closing_brackets\n}\n", "  let opening_bracket_count\
    \ = 0\n  let closing_bracket_count = 0\n  for (let i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] === '<') {\n      opening_bracket_count++\n    }\
    \ else if (brackets[i] === '>') {\n      closing_bracket_count++\n    }\n  }\n\
    \  return opening_bracket_count === closing_bracket_count\n}\n", "  let opening_bracket\
    \ = 0\n  let closing_bracket = 0\n  let opening_bracket_stack = []\n  let closing_bracket_stack\
    \ = []\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ '<') {\n      opening_bracket += 1\n      opening_bracket_stack.push(i)\n  \
    \  } else if (brackets[i] === '>') {\n      closing_bracket += 1\n      closing_bracket_stack.push(i)\n\
    \    }\n  }\n  if (opening_bracket !== closing_bracket) {\n    return false\n\
    \  }\n  for (let i = 0; i < opening_bracket_stack.length; i++) {\n    if (opening_bracket_stack[i]\
    \ > closing_bracket_stack[i]) {\n      return false\n    }\n  }\n  return true\n\
    }\n", "  let opening_bracket = 0\n  let closing_bracket = 0\n\n  for (let i =\
    \ 0; i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n      opening_bracket\
    \ += 1\n    } else if (brackets[i] === '>') {\n      closing_bracket += 1\n  \
    \  }\n  }\n\n  return opening_bracket === closing_bracket\n}\n", "  let opening_bracket\
    \ = 0\n  let closing_bracket = 0\n  for (let i = 0; i < brackets.length; i++)\
    \ {\n    if (brackets[i] === '<') {\n      opening_bracket += 1\n    } else if\
    \ (brackets[i] === '>') {\n      closing_bracket += 1\n    }\n  }\n  return opening_bracket\
    \ === closing_bracket\n}\n", "  let opening_bracket = 0\n  let closing_bracket\
    \ = 0\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ '<') {\n      opening_bracket++\n    } else if (brackets[i] === '>') {\n   \
    \   closing_bracket++\n    }\n  }\n  return opening_bracket === closing_bracket\n\
    }\n", "  let opening_brackets = 0\n  let closing_brackets = 0\n  for (let i =\
    \ 0; i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n      opening_brackets++\n\
    \    } else if (brackets[i] === '>') {\n      closing_brackets++\n    }\n  }\n\
    \  return opening_brackets === closing_brackets\n}\n", "  let opening_brackets\
    \ = 0\n  let closing_brackets = 0\n  for (let i = 0; i < brackets.length; i++)\
    \ {\n    if (brackets[i] === '<') {\n      opening_brackets++\n    } else if (brackets[i]\
    \ === '>') {\n      closing_brackets++\n    }\n  }\n  return opening_brackets\
    \ === closing_brackets\n}\n", "  let opening_bracket = 0\n  let closing_bracket\
    \ = 0\n\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ '<') {\n      opening_bracket++\n    } else if (brackets[i] === '>') {\n   \
    \   closing_bracket++\n    }\n  }\n\n  return opening_bracket === closing_bracket\n\
    }\n", "  let opening_bracket_count = 0\n  let closing_bracket_count = 0\n  for\
    \ (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n\
    \      opening_bracket_count++\n    } else if (brackets[i] === \">\") {\n    \
    \  closing_bracket_count++\n    }\n  }\n  return opening_bracket_count === closing_bracket_count\n\
    }\n", "  let opening_bracket_count = 0\n  let closing_bracket_count = 0\n  for\
    \ (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n\
    \      opening_bracket_count++\n    } else if (brackets[i] === \">\") {\n    \
    \  closing_bracket_count++\n    }\n  }\n  return opening_bracket_count === closing_bracket_count\n\
    }\n", "  let opening_brackets = 0\n  let closing_brackets = 0\n  let opening_bracket\
    \ = false\n  let closing_bracket = false\n  for (let i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] === '<') {\n      opening_brackets += 1\n      opening_bracket\
    \ = true\n    } else if (brackets[i] === '>') {\n      closing_brackets += 1\n\
    \      closing_bracket = true\n    }\n    if (opening_bracket && !closing_bracket)\
    \ {\n      return false\n    }\n    if (closing_bracket && !opening_bracket) {\n\
    \      return false\n    }\n  }\n  return opening_brackets === closing_brackets\n\
    }\n", "  let opening_bracket = 0\n  let closing_bracket = 0\n  for (let i = 0;\
    \ i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n      opening_bracket++\n\
    \    } else if (brackets[i] === '>') {\n      closing_bracket++\n    }\n  }\n\
    \  return opening_bracket === closing_bracket\n}\n", "  let opening_bracket_count\
    \ = 0\n  let closing_bracket_count = 0\n  for (let i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] === '<') {\n      opening_bracket_count++\n    }\
    \ else if (brackets[i] === '>') {\n      closing_bracket_count++\n    }\n  }\n\
    \  return opening_bracket_count === closing_bracket_count\n}\n", "  let opening_brackets\
    \ = 0\n  let closing_brackets = 0\n\n  for (let i = 0; i < brackets.length; i++)\
    \ {\n    if (brackets[i] === '<') {\n      opening_brackets += 1\n    } else if\
    \ (brackets[i] === '>') {\n      closing_brackets += 1\n    }\n  }\n\n  return\
    \ opening_brackets === closing_brackets\n}\n", "  let opening_bracket_count =\
    \ 0\n  let closing_bracket_count = 0\n  for (let i = 0; i < brackets.length; i++)\
    \ {\n    if (brackets[i] === '<') {\n      opening_bracket_count++\n    } else\
    \ if (brackets[i] === '>') {\n      closing_bracket_count++\n    }\n  }\n  return\
    \ opening_bracket_count === closing_bracket_count\n}\n", "  let opening_bracket_count\
    \ = 0\n  let closing_bracket_count = 0\n  let opening_bracket_index = 0\n  let\
    \ closing_bracket_index = 0\n  let opening_bracket_stack = []\n  let closing_bracket_stack\
    \ = []\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ '<') {\n      opening_bracket_count += 1\n      opening_bracket_stack.push(i)\n\
    \    } else if (brackets[i] === '>') {\n      closing_bracket_count += 1\n   \
    \   closing_bracket_stack.push(i)\n    }\n  }\n  if (opening_bracket_count !==\
    \ closing_bracket_count) {\n    return false\n  }\n  opening_bracket_index = opening_bracket_stack.pop()\n\
    \  closing_bracket_index = closing_bracket_stack.pop()\n  while (opening_bracket_index\
    \ !== -1 || closing_bracket_index !== -1) {\n    if (opening_bracket_index !==\
    \ -1) {\n      if (closing_bracket_index !== -1) {\n        if (opening_bracket_index\
    \ < closing_bracket_index) {\n          opening_bracket_index = opening_bracket_stack.pop()\n\
    \          closing_bracket_index = closing_bracket_stack.pop()\n        } else\
    \ {\n          return false\n        }\n      } else {\n        opening_bracket_index\
    \ = opening_bracket_stack.pop()\n      }\n    } else {\n      if (closing_bracket_index\
    \ !== -1) {\n        return false\n      } else {\n        closing_bracket_index\
    \ = closing_bracket_stack.pop()\n      }\n    }\n  }\n  return true\n}\n", " \
    \ let opening_brackets = 0\n  let closing_brackets = 0\n  for (let i = 0; i <\
    \ brackets.length; i++) {\n    if (brackets[i] === '<') {\n      opening_brackets\
    \ += 1\n    } else if (brackets[i] === '>') {\n      closing_brackets += 1\n \
    \   }\n  }\n  return opening_brackets === closing_brackets\n}\n", "  let opening_brackets\
    \ = 0\n  let closing_brackets = 0\n  for (let i = 0; i < brackets.length; i++)\
    \ {\n    if (brackets[i] === '<') {\n      opening_brackets++\n    } else if (brackets[i]\
    \ === '>') {\n      closing_brackets++\n    }\n  }\n  return opening_brackets\
    \ === closing_brackets\n}\n", "  let opening_bracket_count = 0\n  let closing_bracket_count\
    \ = 0\n\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ \"<\") {\n      opening_bracket_count++\n    } else if (brackets[i] === \">\"\
    ) {\n      closing_bracket_count++\n    }\n  }\n\n  return opening_bracket_count\
    \ === closing_bracket_count\n}\n", "  let opening_bracket_count = 0\n  let closing_bracket_count\
    \ = 0\n  let opening_bracket_index = -1\n  let closing_bracket_index = -1\n  for\
    \ (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n  \
    \    opening_bracket_count += 1\n      opening_bracket_index = i\n    } else if\
    \ (brackets[i] === '>') {\n      closing_bracket_count += 1\n      closing_bracket_index\
    \ = i\n    }\n  }\n  return opening_bracket_count === closing_bracket_count\n\
    }\n", "  let opening_bracket_count = 0\n  let closing_bracket_count = 0\n  let\
    \ opening_bracket_index = 0\n  let closing_bracket_index = 0\n  let opening_bracket_index_stack\
    \ = []\n  let closing_bracket_index_stack = []\n  for (let i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] === '<') {\n      opening_bracket_count += 1\n \
    \     opening_bracket_index = i\n      opening_bracket_index_stack.push(opening_bracket_index)\n\
    \    } else if (brackets[i] === '>') {\n      closing_bracket_count += 1\n   \
    \   closing_bracket_index = i\n      closing_bracket_index_stack.push(closing_bracket_index)\n\
    \    }\n  }\n  if (opening_bracket_count !== closing_bracket_count) {\n    return\
    \ false\n  }\n  for (let i = 0; i < opening_bracket_index_stack.length; i++) {\n\
    \    if (opening_bracket_index_stack[i] !== closing_bracket_index_stack[i]) {\n\
    \      return false\n    }\n  }\n  return true\n}\n", "  let opening_bracket =\
    \ 0\n  let closing_bracket = 0\n  for (let i = 0; i < brackets.length; i++) {\n\
    \    if (brackets[i] === '<') {\n      opening_bracket += 1\n    } else if (brackets[i]\
    \ === '>') {\n      closing_bracket += 1\n    }\n  }\n  return opening_bracket\
    \ === closing_bracket\n}\n", "  let stack = [];\n  for (let i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] === '<') {\n      stack.push(i);\n    } else if\
    \ (brackets[i] === '>') {\n      if (stack.length === 0) {\n        return false;\n\
    \      }\n      let j = stack.pop();\n      if (j !== i - 1) {\n        return\
    \ false;\n      }\n    }\n  }\n  return stack.length === 0;\n}\n", "  let opening_bracket\
    \ = 0\n  let closing_bracket = 0\n  for (let i = 0; i < brackets.length; i++)\
    \ {\n    if (brackets[i] === '<') {\n      opening_bracket += 1\n    } else if\
    \ (brackets[i] === '>') {\n      closing_bracket += 1\n    }\n  }\n  return opening_bracket\
    \ === closing_bracket\n}\n", "  let opening_bracket_count = 0\n  let closing_bracket_count\
    \ = 0\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ '<') {\n      opening_bracket_count++\n    } else if (brackets[i] === '>') {\n\
    \      closing_bracket_count++\n    }\n  }\n  return opening_bracket_count ===\
    \ closing_bracket_count\n}\n", "  let opening_bracket_count = 0\n  let closing_bracket_count\
    \ = 0\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ '<') {\n      opening_bracket_count++\n    } else if (brackets[i] === '>') {\n\
    \      closing_bracket_count++\n    }\n  }\n  return opening_bracket_count ===\
    \ closing_bracket_count\n}\n", "  let opening_brackets = 0\n  let closing_brackets\
    \ = 0\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ '<') {\n      opening_brackets++\n    } else if (brackets[i] === '>') {\n  \
    \    closing_brackets++\n    }\n  }\n  return opening_brackets === closing_brackets\n\
    }\n", "  let opening_brackets = 0\n  let closing_brackets = 0\n  for (let i =\
    \ 0; i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n      opening_brackets++\n\
    \    } else if (brackets[i] === '>') {\n      closing_brackets++\n    }\n  }\n\
    \  return opening_brackets === closing_brackets\n}\n", "  let opening_bracket\
    \ = 0\n  let closing_bracket = 0\n  for (let i = 0; i < brackets.length; i++)\
    \ {\n    if (brackets[i] === '<') {\n      opening_bracket++\n    } else if (brackets[i]\
    \ === '>') {\n      closing_bracket++\n    }\n  }\n  return opening_bracket ===\
    \ closing_bracket\n}\n", "  let stack = [];\n  for (let i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] === '<') {\n      stack.push(i);\n    } else if\
    \ (brackets[i] === '>') {\n      if (stack.length === 0) {\n        return false;\n\
    \      }\n      let j = stack.pop();\n      if (i !== j) {\n        return false;\n\
    \      }\n    }\n  }\n  return stack.length === 0;\n}\n", "  let opening_brackets\
    \ = 0\n  let closing_brackets = 0\n  for (let i = 0; i < brackets.length; i++)\
    \ {\n    if (brackets[i] === '<') {\n      opening_brackets += 1\n    } else if\
    \ (brackets[i] === '>') {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets\
    \ === closing_brackets\n}\n", "  let opening = 0;\n  let closing = 0;\n  for (let\
    \ i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n     \
    \ opening++;\n    } else if (brackets[i] === \">\") {\n      closing++;\n    }\n\
    \  }\n  return opening === closing;\n}\n", "  let opening_bracket_count = 0\n\
    \  let closing_bracket_count = 0\n  for (let i = 0; i < brackets.length; i++)\
    \ {\n    if (brackets[i] === '<') {\n      opening_bracket_count++\n    } else\
    \ if (brackets[i] === '>') {\n      closing_bracket_count++\n    }\n  }\n  return\
    \ opening_bracket_count === closing_bracket_count\n}\n", "  let opening_bracket_count\
    \ = 0\n  let closing_bracket_count = 0\n  let opening_bracket_index = -1\n  let\
    \ closing_bracket_index = -1\n  for (let i = 0; i < brackets.length; i++) {\n\
    \    if (brackets[i] === '<') {\n      opening_bracket_count += 1\n      opening_bracket_index\
    \ = i\n    } else if (brackets[i] === '>') {\n      closing_bracket_count += 1\n\
    \      closing_bracket_index = i\n    }\n  }\n  return opening_bracket_count ===\
    \ closing_bracket_count\n}\n", "  let opening_brackets = 0\n  let closing_brackets\
    \ = 0\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ '<') {\n      opening_brackets += 1\n    } else if (brackets[i] === '>') {\n\
    \      closing_brackets += 1\n    }\n  }\n  return opening_brackets === closing_brackets\n\
    }\n", "  let opening_bracket_count = 0\n  let closing_bracket_count = 0\n  for\
    \ (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n  \
    \    opening_bracket_count++\n    } else if (brackets[i] === '>') {\n      closing_bracket_count++\n\
    \    }\n  }\n  return opening_bracket_count === closing_bracket_count\n}\n", " \
    \ let opening_bracket = 0\n  let closing_bracket = 0\n  for (let i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] === \"<\") {\n      opening_bracket++\n    } else\
    \ if (brackets[i] === \">\") {\n      closing_bracket++\n    }\n  }\n  return\
    \ opening_bracket === closing_bracket\n}\n", "  let opening_brackets = 0\n  let\
    \ closing_brackets = 0\n  for (let i = 0; i < brackets.length; i++) {\n    if\
    \ (brackets[i] === '<') {\n      opening_brackets++\n    } else if (brackets[i]\
    \ === '>') {\n      closing_brackets++\n    }\n  }\n  return opening_brackets\
    \ === closing_brackets\n}\n", "  let opening_brackets = 0\n  let closing_brackets\
    \ = 0\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ '<') {\n      opening_brackets += 1\n    } else if (brackets[i] === '>') {\n\
    \      closing_brackets += 1\n    }\n  }\n  return opening_brackets === closing_brackets\n\
    }\n", "  let opening_bracket = 0\n  let closing_bracket = 0\n  let opening_bracket_index\
    \ = 0\n  let closing_bracket_index = 0\n  for (let i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] === '<') {\n      opening_bracket += 1\n      opening_bracket_index\
    \ = i\n    } else if (brackets[i] === '>') {\n      closing_bracket += 1\n   \
    \   closing_bracket_index = i\n    }\n  }\n  if (opening_bracket !== closing_bracket)\
    \ {\n    return false\n  }\n  let opening_bracket_count = 0\n  let closing_bracket_count\
    \ = 0\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ '<') {\n      opening_bracket_count += 1\n    } else if (brackets[i] === '>')\
    \ {\n      closing_bracket_count += 1\n    }\n  }\n  if (opening_bracket_count\
    \ !== closing_bracket_count) {\n    return false\n  }\n  let opening_bracket_stack\
    \ = []\n  let closing_bracket_stack = []\n  for (let i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] === '<') {\n      opening_bracket_stack.push(i)\n\
    \    } else if (brackets[i] === '>') {\n      closing_bracket_stack.push(i)\n\
    \    }\n  }\n  if (opening_bracket_stack.length !== closing_bracket_stack.length)\
    \ {\n    return false\n  }\n  for (let i = 0; i < opening_bracket_stack.length;\
    \ i++) {\n    if (opening_bracket_stack[i] !== closing_bracket_stack[i]) {\n \
    \     return false\n    }\n  }\n  return true\n}\n", "  let opening_bracket_count\
    \ = 0\n  let closing_bracket_count = 0\n  let opening_bracket_index = -1\n  let\
    \ closing_bracket_index = -1\n  for (let i = 0; i < brackets.length; i++) {\n\
    \    if (brackets[i] === '<') {\n      opening_bracket_count++\n      opening_bracket_index\
    \ = i\n    } else if (brackets[i] === '>') {\n      closing_bracket_count++\n\
    \      closing_bracket_index = i\n    }\n  }\n  return opening_bracket_count ===\
    \ closing_bracket_count\n}\n", "  let opening_brackets = 0\n  let closing_brackets\
    \ = 0\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ '<') {\n      opening_brackets++\n    } else if (brackets[i] === '>') {\n  \
    \    closing_brackets++\n    }\n  }\n  return opening_brackets === closing_brackets\n\
    }\n", "  let opening_bracket_count = 0\n  let closing_bracket_count = 0\n  for\
    \ (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n\
    \      opening_bracket_count++\n    } else if (brackets[i] === \">\") {\n    \
    \  closing_bracket_count++\n    }\n  }\n  return opening_bracket_count === closing_bracket_count\n\
    }\n", "  let opening_bracket = 0\n  let closing_bracket = 0\n  for (let i = 0;\
    \ i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n      opening_bracket++\n\
    \    } else if (brackets[i] === '>') {\n      closing_bracket++\n    }\n  }\n\
    \  return opening_bracket === closing_bracket\n}\n", "  let opening_bracket_count\
    \ = 0\n  let closing_bracket_count = 0\n  let opening_bracket_index = 0\n  let\
    \ closing_bracket_index = 0\n  for (let i = 0; i < brackets.length; i++) {\n \
    \   if (brackets[i] === '<') {\n      opening_bracket_count++\n      opening_bracket_index\
    \ = i\n    }\n    if (brackets[i] === '>') {\n      closing_bracket_count++\n\
    \      closing_bracket_index = i\n    }\n  }\n  return opening_bracket_count ===\
    \ closing_bracket_count\n}\n", "  let opening_brackets = 0\n  let closing_brackets\
    \ = 0\n\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ '<') {\n      opening_brackets++\n    } else if (brackets[i] === '>') {\n  \
    \    closing_brackets++\n    }\n  }\n\n  return opening_brackets === closing_brackets\n\
    }\n", "  let opening_bracket_count = 0\n  let closing_bracket_count = 0\n  for\
    \ (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n  \
    \    opening_bracket_count++\n    } else if (brackets[i] === '>') {\n      closing_bracket_count++\n\
    \    }\n  }\n  return opening_bracket_count === closing_bracket_count\n}\n", " \
    \ let opening_bracket = 0\n  let closing_bracket = 0\n  for (let i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] === '<') {\n      opening_bracket++\n    } else\
    \ if (brackets[i] === '>') {\n      closing_bracket++\n    }\n  }\n  return opening_bracket\
    \ === closing_bracket\n}\n", "  let opening_bracket = 0\n  let closing_bracket\
    \ = 0\n  let opening_bracket_count = 0\n  let closing_bracket_count = 0\n  for\
    \ (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n  \
    \    opening_bracket_count++\n      opening_bracket++\n    } else if (brackets[i]\
    \ === '>') {\n      closing_bracket_count++\n      closing_bracket++\n    }\n\
    \  }\n  if (opening_bracket_count !== closing_bracket_count) {\n    return false\n\
    \  }\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '<')\
    \ {\n      if (opening_bracket === 0) {\n        return false\n      }\n     \
    \ opening_bracket--\n    } else if (brackets[i] === '>') {\n      if (closing_bracket\
    \ === 0) {\n        return false\n      }\n      closing_bracket--\n    }\n  }\n\
    \  return opening_bracket === 0 && closing_bracket === 0\n}\n", "  let opening_bracket\
    \ = 0\n  let closing_bracket = 0\n  let opening_bracket_count = 0\n  let closing_bracket_count\
    \ = 0\n  let opening_bracket_stack = []\n  let closing_bracket_stack = []\n\n\
    \  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n\
    \      opening_bracket_count++\n      opening_bracket = i\n      opening_bracket_stack.push(opening_bracket)\n\
    \    } else if (brackets[i] === '>') {\n      closing_bracket_count++\n      closing_bracket\
    \ = i\n      closing_bracket_stack.push(closing_bracket)\n    }\n  }\n\n  if (opening_bracket_count\
    \ !== closing_bracket_count) {\n    return false\n  }\n\n  for (let i = 0; i <\
    \ opening_bracket_stack.length; i++) {\n    if (opening_bracket_stack[i] !== closing_bracket_stack[i])\
    \ {\n      return false\n    }\n  }\n\n  return true\n}\n", "  let opening_bracket_count\
    \ = 0\n  let closing_bracket_count = 0\n  let opening_bracket_index = 0\n  let\
    \ closing_bracket_index = 0\n  let opening_bracket_index_stack = []\n  let closing_bracket_index_stack\
    \ = []\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ '<') {\n      opening_bracket_count += 1\n      opening_bracket_index = i\n\
    \      opening_bracket_index_stack.push(opening_bracket_index)\n    } else if\
    \ (brackets[i] === '>') {\n      closing_bracket_count += 1\n      closing_bracket_index\
    \ = i\n      closing_bracket_index_stack.push(closing_bracket_index)\n    }\n\
    \  }\n  if (opening_bracket_count !== closing_bracket_count) {\n    return false\n\
    \  }\n  for (let i = 0; i < opening_bracket_index_stack.length; i++) {\n    if\
    \ (opening_bracket_index_stack[i] !== closing_bracket_index_stack[i]) {\n    \
    \  return false\n    }\n  }\n  return true\n}\n", "  let opening_brackets = 0\n\
    \  let closing_brackets = 0\n  for (let i = 0; i < brackets.length; i++) {\n \
    \   if (brackets[i] === '<') {\n      opening_brackets++\n    } else if (brackets[i]\
    \ === '>') {\n      closing_brackets++\n    }\n  }\n  return opening_brackets\
    \ === closing_brackets\n}\n", "  let opening_brackets = 0\n  let closing_brackets\
    \ = 0\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ '<') {\n      opening_brackets++\n    } else if (brackets[i] === '>') {\n  \
    \    closing_brackets++\n    }\n  }\n  return opening_brackets === closing_brackets\n\
    }\n", "  let opening_brackets = 0\n  let closing_brackets = 0\n  for (let i =\
    \ 0; i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n      opening_brackets\
    \ += 1\n    } else if (brackets[i] === '>') {\n      closing_brackets += 1\n \
    \   }\n  }\n  return opening_brackets === closing_brackets\n}\n", "  let opening_bracket\
    \ = 0\n  let closing_bracket = 0\n  let opening_bracket_count = 0\n  let closing_bracket_count\
    \ = 0\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ '<') {\n      opening_bracket_count++\n    } else if (brackets[i] === '>') {\n\
    \      closing_bracket_count++\n    }\n  }\n  if (opening_bracket_count !== closing_bracket_count)\
    \ {\n    return false\n  }\n  for (let i = 0; i < brackets.length; i++) {\n  \
    \  if (brackets[i] === '<') {\n      opening_bracket++\n    } else if (brackets[i]\
    \ === '>') {\n      closing_bracket++\n    }\n  }\n  return opening_bracket ===\
    \ closing_bracket\n}\n", "  let opening_bracket_count = 0\n  let closing_bracket_count\
    \ = 0\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ \"<\") {\n      opening_bracket_count++\n    } else if (brackets[i] === \">\"\
    ) {\n      closing_bracket_count++\n    }\n  }\n  return opening_bracket_count\
    \ === closing_bracket_count\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
