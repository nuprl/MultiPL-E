name: HumanEval_156_int_to_mini_roman
language: ts
prompt: "//Given a positive integer, obtain its roman numeral equivalent as a string,\n\
  // and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n\
  // >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\
  \n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number:\
  \ number): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"\
  xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"\
  ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"\
  d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"\
  iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"\
  xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"\
  dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"\
  cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();"
completions: ["  let result = ''\n  let num = number\n  let i = 0\n  let j = 0\n \
    \ let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n\
    \  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n\
    \  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n\
    \  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n\
    \  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n\
    \  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n\
    \  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n\
    \  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n\
    \  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n\
    \  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n\
    \  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n\
    \  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n\
    \  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n\
    \  let k = 0\n  let l = 0\n  let m = 0\n  let", "  const roman_numeral_map = {\n\
    \    1: 'i',\n    5: 'v',\n    10: 'x',\n    50: 'l',\n    100: 'c',\n    500:\
    \ 'd',\n    1000: 'm',\n  };\n  let roman_numeral = '';\n  while (number > 0)\
    \ {\n    const roman_numeral_part = roman_numeral_map[number % 10];\n    roman_numeral\
    \ = roman_numeral_part + roman_numeral;\n    number = Math.floor(number / 10);\n\
    \  }\n  return roman_numeral.toLowerCase();\n}\n", "    let roman_numeral = '';\n\
    \    let roman_numeral_array = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x',\
    \ 'ix', 'v', 'iv', 'i'];\n    let number_array = number.toString().split('');\n\
    \    let i = 0;\n    while (number_array.length > 0) {\n        if (number_array.length\
    \ > 1) {\n            roman_numeral += roman_numeral_array[number_array[0] - 1]\
    \ + number_array[1];\n            number_array.splice(0, 2);\n        } else {\n\
    \            roman_numeral += roman_numeral_array[number_array[0] - 1];\n    \
    \        number_array.splice(0, 1);\n        }\n    }\n    return roman_numeral.toLowerCase();\n\
    }\n", "  let result = ''\n  let num = number\n  let roman_num = []\n  let roman_num_len\
    \ = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let roman_num_len_max = 0\n  let\
    \ roman_num_len_min = 0\n  let roman_num_len_min_max = 0\n  let roman_num_len_min_min\
    \ = 0\n  let roman_num_len_min_max_min = 0\n  let roman_num_len_min_min_max =\
    \ 0\n  let roman_num_len_min_min_max_min = 0\n  let roman_num_len_min_min_max_min_max\
    \ = 0\n  let roman_num_len_min_min_max_min_max_min = 0\n  let roman_num_len_min_min_max_min_max_min_max\
    \ = 0\n  let roman_num_len_min_min_max_min_max_min_max_min = 0\n  let roman_num_len_min_min_max_min_max_min_max_min_max\
    \ = 0\n  let roman_num_len_min_min_max_min_max_min_max_min_max_min = 0\n  let\
    \ roman_num_len_min_min_max_min_max_min_max_min_max_min_max = 0\n  let roman_num_len_min_min_max_min_max_min_max_min_max_min_max_min\
    \ = 0\n  let roman_num_len_min_min_max_min_max_min_max_min_max_min_max_min_max\
    \ = 0\n  let roman_num_len_min_min_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = 0\n  let roman_num_len_min_min_max_min_max_min_max_min_max_min_max_min_max_min_max\
    \ = 0\n  let roman_num_len_min_min", "    let result = '';\n    let num = number;\n\
    \    let roman_map = {\n        'I': 'x',\n        'V': 'v',\n        'X': 'l',\n\
    \        'L': 'c',\n        'C': 'd',\n        'D': 'm',\n        'M': '',\n \
    \   };\n    while (num > 0) {\n        let roman = roman_map[num % 10];\n    \
    \    result = roman + result;\n        num = Math.floor(num / 10);\n    }\n  \
    \  return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
