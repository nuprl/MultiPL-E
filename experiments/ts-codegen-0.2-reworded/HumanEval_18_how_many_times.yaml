name: HumanEval_18_how_many_times
language: ts
prompt: "//Find how many times a given substring can be found in the original string.\
  \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
  aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string:\
  \ string, substring: string): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\"\
  , \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
  cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n\
  }\n\ntest();"
completions: ["  let count = 0\n  for (let i = 0; i < string.length - substring.length\
    \ + 1; i++) {\n    if (string.substr(i, substring.length) === substring) {\n \
    \     count++\n    }\n  }\n  return count\n}\n", "  let count = 0\n  let index\
    \ = 0\n  while (index < string.length) {\n    if (string.substr(index, substring.length)\
    \ === substring) {\n      count++\n      index += substring.length\n    } else\
    \ {\n      index++\n    }\n  }\n  return count\n}\n", "  let count = 0\n  let\
    \ index = 0\n  while (index < string.length) {\n    if (string[index] === substring[0])\
    \ {\n      count += 1\n      index += 1\n      while (index < string.length &&\
    \ substring.length > 0 && string[index] === substring[0]) {\n        count +=\
    \ 1\n        index += 1\n        substring = substring.substr(1)\n      }\n  \
    \  } else {\n      index += 1\n    }\n  }\n  return count\n}\n", "  let count\
    \ = 0\n  let index = 0\n  while (index < string.length) {\n    if (string.substr(index,\
    \ substring.length) === substring) {\n      count += 1\n      index += substring.length\n\
    \    } else {\n      index += 1\n    }\n  }\n  return count\n}\n", "  let count\
    \ = 0\n  let i = 0\n  let j = 0\n  while (i < string.length && j < substring.length)\
    \ {\n    if (string[i] === substring[j]) {\n      count++\n      i++\n      j++\n\
    \    } else {\n      i++\n      j = 0\n    }\n  }\n  return count\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
