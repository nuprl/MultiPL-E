name: HumanEval_143_words_in_sentence
language: ts
prompt: "//You are given a string representing a sentence,\n// the sentence contains\
  \ some words separated by a space,\n// and you have to return a string that contains\
  \ the words from the original sentence,\n// whose lengths are prime numbers,\n//\
  \ the order of the words in the new string should be the same as the original one.\n\
  // Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example\
  \ 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n\
  // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence:\
  \ string): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = words_in_sentence;\n  assert.deepEqual(candidate(\"\
  This is a test\"),\"is\");\n  assert.deepEqual(candidate(\"lets go for swimming\"\
  ),\"go for\");\n  assert.deepEqual(candidate(\"there is no place available here\"\
  ),\"there is no place\");\n  assert.deepEqual(candidate(\"Hi I am Hussein\"),\"\
  Hi am Hussein\");\n  assert.deepEqual(candidate(\"go for it\"),\"go for it\");\n\
  \  assert.deepEqual(candidate(\"here\"),\"\");\n  assert.deepEqual(candidate(\"\
  here is\"),\"is\");\n}\n\ntest();"
completions: ["    let words = sentence.split(\" \");\n    let result = \"\";\n  \
    \  for (let i = 0; i < words.length; i++) {\n        if (isPrime(words[i].length))\
    \ {\n            result += words[i];\n        }\n    }\n    return result;\n}\n\
    \nfunction isPrime(num: number): boolean {\n    if (num < 2) {\n        return\
    \ false;\n    }\n    for (let i = 2; i <= Math.sqrt(num); i++) {\n        if (num\
    \ % i === 0) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n", "    let words = sentence.split(\" \");\n    let result = \"\";\n    for\
    \ (let i = 0; i < words.length; i++) {\n        if (isPrime(words[i].length))\
    \ {\n            result += words[i];\n        }\n    }\n    return result;\n}\n\
    \nfunction isPrime(num: number): boolean {\n    if (num < 2) {\n        return\
    \ false;\n    }\n    for (let i = 2; i <= Math.sqrt(num); i++) {\n        if (num\
    \ % i === 0) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n", "    let words = sentence.split(' ');\n    let result = '';\n    for (let\
    \ i = 0; i < words.length; i++) {\n        if (isPrime(words[i].length)) {\n \
    \           result += words[i];\n        }\n    }\n    return result;\n}\n\nfunction\
    \ isPrime(num: number): boolean {\n    if (num < 2) {\n        return false;\n\
    \    }\n    for (let i = 2; i <= Math.sqrt(num); i++) {\n        if (num % i ===\
    \ 0) {\n            return false;\n        }\n    }\n    return true;\n}\n", " \
    \   let words = sentence.split(' ');\n    let result = [];\n    for (let i = 0;\
    \ i < words.length; i++) {\n        let word = words[i];\n        let prime =\
    \ isPrime(word.length);\n        if (prime) {\n            result.push(word);\n\
    \        }\n    }\n    return result.join(' ');\n}\n\nfunction isPrime(n: number):\
    \ boolean {\n    if (n < 2) {\n        return false;\n    }\n    for (let i =\
    \ 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n", "    let words = sentence.split('\
    \ ');\n    let result = [];\n    for (let i = 0; i < words.length; i++) {\n  \
    \      if (isPrime(words[i].length)) {\n            result.push(words[i]);\n \
    \       }\n    }\n    return result.join(' ');\n}\n\nfunction isPrime(num: number):\
    \ boolean {\n    if (num < 2) {\n        return false;\n    }\n    for (let i\
    \ = 2; i <= Math.sqrt(num); i++) {\n        if (num % i === 0) {\n           \
    \ return false;\n        }\n    }\n    return true;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
