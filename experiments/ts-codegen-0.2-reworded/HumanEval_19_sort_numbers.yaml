name: HumanEval_19_sort_numbers
language: ts
prompt: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
  // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
  \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to\
  \ largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction\
  \ sort_numbers(numbers: string): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\
  \");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
  three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five zero\
  \ four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
  six five four three two one zero\"),\"zero one two three four five six\");\n}\n\n\
  test();"
completions: ["  const numbers_array = numbers.split(' ')\n  const sorted_numbers\
    \ = []\n  for (let i = 0; i < numbers_array.length; i++) {\n    const number =\
    \ numbers_array[i]\n    if (number === 'zero' || number === 'one' || number ===\
    \ 'two' || number === 'three' || number === 'four' || number === 'five' || number\
    \ === 'six' || number === 'seven' || number === 'eight' || number === 'nine')\
    \ {\n      sorted_numbers.push(number)\n    }\n  }\n  sorted_numbers.sort((a,\
    \ b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return\
    \ 1\n    } else {\n      return 0\n    }\n  })\n  return sorted_numbers.join('\
    \ ')\n}\n", "  let numbers_array = numbers.split(\" \");\n  let sorted_numbers\
    \ = [];\n  for (let i = 0; i < numbers_array.length; i++) {\n    let number =\
    \ parseInt(numbers_array[i]);\n    if (isNaN(number)) {\n      sorted_numbers.push(numbers_array[i]);\n\
    \    } else {\n      sorted_numbers.push(number);\n    }\n  }\n  sorted_numbers.sort((a,\
    \ b) => a - b);\n  return sorted_numbers.join(\" \");\n}\n", "  let numbers_array\
    \ = numbers.split(' ')\n  let sorted_numbers = []\n  let sorted_numbers_array\
    \ = []\n  let sorted_numbers_string = ''\n\n  for (let i = 0; i < numbers_array.length;\
    \ i++) {\n    let number = numbers_array[i]\n    let number_int = parseInt(number)\n\
    \    if (number_int < 10) {\n      sorted_numbers.push(number)\n    }\n  }\n\n\
    \  sorted_numbers.sort((a, b) => {\n    return a - b\n  })\n\n  for (let i = 0;\
    \ i < sorted_numbers.length; i++) {\n    let number = sorted_numbers[i]\n    let\
    \ number_int = parseInt(number)\n    if (number_int < 10) {\n      sorted_numbers_array.push(number)\n\
    \    }\n  }\n\n  for (let i = 0; i < sorted_numbers_array.length; i++) {\n   \
    \ let number = sorted_numbers_array[i]\n    let number_int = parseInt(number)\n\
    \    if (number_int < 10) {\n      sorted_numbers_string += number\n    }\n  }\n\
    \n  return sorted_numbers_string\n}\n", "  const split = numbers.split(' ');\n\
    \  const sorted = split.sort((a, b) => {\n    const a_num = parseInt(a);\n   \
    \ const b_num = parseInt(b);\n    return a_num - b_num;\n  });\n  return sorted.join('\
    \ ');\n}\n", "  const numbers_array = numbers.split(\" \")\n  const sorted_numbers\
    \ = []\n  for (let i = 0; i < numbers_array.length; i++) {\n    const number =\
    \ numbers_array[i]\n    if (number === \"zero\") {\n      sorted_numbers.push(number)\n\
    \    } else if (number === \"one\") {\n      sorted_numbers.push(number)\n   \
    \ } else if (number === \"two\") {\n      sorted_numbers.push(number)\n    } else\
    \ if (number === \"three\") {\n      sorted_numbers.push(number)\n    } else if\
    \ (number === \"four\") {\n      sorted_numbers.push(number)\n    } else if (number\
    \ === \"five\") {\n      sorted_numbers.push(number)\n    } else if (number ===\
    \ \"six\") {\n      sorted_numbers.push(number)\n    } else if (number === \"\
    seven\") {\n      sorted_numbers.push(number)\n    } else if (number === \"eight\"\
    ) {\n      sorted_numbers.push(number)\n    } else if (number === \"nine\") {\n\
    \      sorted_numbers.push(number)\n    }\n  }\n  return sorted_numbers.join(\"\
    \ \")\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
