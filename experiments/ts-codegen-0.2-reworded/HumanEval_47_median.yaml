name: HumanEval_47_median
language: ts
prompt: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n\
  // 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]):\
  \ number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4,\
  \ 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
  \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1,\
  \ 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
completions: ["    let n = l.length;\n    let m = n / 2;\n    let i = 0;\n    let\
    \ j = n - 1;\n    let k = 0;\n    let temp;\n    if (n % 2 === 0) {\n        temp\
    \ = l[m];\n        while (i < m) {\n            if (l[i] < temp) {\n         \
    \       temp = l[i];\n                k = i;\n            }\n            i++;\n\
    \        }\n        while (j > k) {\n            if (l[j] > temp) {\n        \
    \        temp = l[j];\n                k = j;\n            }\n            j--;\n\
    \        }\n        return temp;\n    } else {\n        return l[m];\n    }\n\
    }\n", "    let n = l.length;\n    if (n === 0) {\n        return NaN;\n    }\n\
    \    let m = Math.floor(n / 2);\n    let left = [];\n    let right = [];\n   \
    \ for (let i = 0; i < n; i++) {\n        if (i < m) {\n            left.push(l[i]);\n\
    \        } else {\n            right.push(l[i]);\n        }\n    }\n    left =\
    \ left.sort();\n    right = right.sort();\n    if (left[0] === right[0]) {\n \
    \       return left[0];\n    } else {\n        return (left[0] + right[0]) / 2;\n\
    \    }\n}\n", "    let sorted = l.sort();\n    let middle = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 === 0) {\n        return (sorted[middle] +\
    \ sorted[middle - 1]) / 2;\n    } else {\n        return sorted[middle];\n   \
    \ }\n}\n", "    let n = l.length;\n    if (n === 0) {\n        return NaN;\n \
    \   }\n    let m = Math.floor(n / 2);\n    let i = 0;\n    let j = n - 1;\n  \
    \  let k = 0;\n    let t = 0;\n    while (i < m && j >= m) {\n        t = l[i];\n\
    \        l[i] = l[j];\n        l[j] = t;\n        i++;\n        j--;\n       \
    \ k++;\n    }\n    if (j >= m) {\n        while (j >= m) {\n            t = l[j];\n\
    \            l[j] = l[m];\n            l[m] = t;\n            j--;\n         \
    \   m--;\n        }\n    } else {\n        while (i < m) {\n            t = l[i];\n\
    \            l[i] = l[m];\n            l[m] = t;\n            i++;\n         \
    \   m--;\n        }\n    }\n    return l[m];\n}", "    let sorted = l.sort();\n\
    \    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 1)\
    \ {\n        return sorted[mid];\n    } else {\n        return (sorted[mid - 1]\
    \ + sorted[mid]) / 2;\n    }\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
