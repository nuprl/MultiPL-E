name: HumanEval_47_median
language: ts
prompt: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n\
  // 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]):\
  \ number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4,\
  \ 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
  \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1,\
  \ 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
completions: ["    let n = l.length;\n    let m = n / 2;\n    let i = 0;\n    let\
    \ j = n - 1;\n    let k = 0;\n    let temp;\n    if (n % 2 === 0) {\n        temp\
    \ = l[m];\n        while (i < m) {\n            if (l[i] < temp) {\n         \
    \       temp = l[i];\n                k = i;\n            }\n            i++;\n\
    \        }\n        while (j > k) {\n            if (l[j] > temp) {\n        \
    \        temp = l[j];\n                k = j;\n            }\n            j--;\n\
    \        }\n        return temp;\n    } else {\n        return l[m];\n    }\n\
    }\n", "    let n = l.length;\n    if (n === 0) {\n        return NaN;\n    }\n\
    \    let m = Math.floor(n / 2);\n    let left = [];\n    let right = [];\n   \
    \ for (let i = 0; i < n; i++) {\n        if (i < m) {\n            left.push(l[i]);\n\
    \        } else {\n            right.push(l[i]);\n        }\n    }\n    left =\
    \ left.sort();\n    right = right.sort();\n    if (left[0] === right[0]) {\n \
    \       return left[0];\n    } else {\n        return (left[0] + right[0]) / 2;\n\
    \    }\n}\n", "    let sorted = l.sort();\n    let middle = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 === 0) {\n        return (sorted[middle] +\
    \ sorted[middle - 1]) / 2;\n    } else {\n        return sorted[middle];\n   \
    \ }\n}\n", "    let n = l.length;\n    if (n === 0) {\n        return NaN;\n \
    \   }\n    let m = Math.floor(n / 2);\n    let i = 0;\n    let j = n - 1;\n  \
    \  let k = 0;\n    let t = 0;\n    while (i < m && j >= m) {\n        t = l[i];\n\
    \        l[i] = l[j];\n        l[j] = t;\n        i++;\n        j--;\n       \
    \ k++;\n    }\n    if (j >= m) {\n        while (j >= m) {\n            t = l[j];\n\
    \            l[j] = l[m];\n            l[m] = t;\n            j--;\n         \
    \   m--;\n        }\n    } else {\n        while (i < m) {\n            t = l[i];\n\
    \            l[i] = l[m];\n            l[m] = t;\n            i++;\n         \
    \   m--;\n        }\n    }\n    return l[m];\n}", "    let sorted = l.sort();\n\
    \    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 1)\
    \ {\n        return sorted[mid];\n    } else {\n        return (sorted[mid - 1]\
    \ + sorted[mid]) / 2;\n    }\n}\n", "    let sorted = l.sort();\n    let middle\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n     \
    \   return (sorted[middle] + sorted[middle - 1]) / 2;\n    }\n    return sorted[middle];\n\
    }\n", "    let sorted = l.sort();\n    let middle = Math.floor(sorted.length /\
    \ 2);\n    if (sorted.length % 2 === 0) {\n        return (sorted[middle] + sorted[middle\
    \ - 1]) / 2;\n    }\n    return sorted[middle];\n}\n", "    let sorted = l.sort();\n\
    \    let middle = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 ===\
    \ 0) {\n        return (sorted[middle] + sorted[middle - 1]) / 2;\n    }\n   \
    \ return sorted[middle];\n}\n", "    let sorted = l.sort();\n    let middle =\
    \ Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n       \
    \ return (sorted[middle] + sorted[middle - 1]) / 2;\n    }\n    return sorted[middle];\n\
    }\n", "    let sorted = l.sort();\n    let middle = Math.floor(sorted.length /\
    \ 2);\n    if (sorted.length % 2 === 1) {\n        return sorted[middle];\n  \
    \  } else {\n        return (sorted[middle - 1] + sorted[middle]) / 2;\n    }\n\
    }\n", "    let sorted = l.sort();\n    let middle = Math.floor(sorted.length /\
    \ 2);\n    if (sorted.length % 2 === 0) {\n        return (sorted[middle] + sorted[middle\
    \ - 1]) / 2;\n    }\n    return sorted[middle];\n}\n", "    let arr = l.sort();\n\
    \    let n = arr.length;\n    let mid = Math.floor(n / 2);\n    if (n % 2 ===\
    \ 0) {\n        return (arr[mid] + arr[mid - 1]) / 2;\n    }\n    return arr[mid];\n\
    }\n", "    let arr = l.sort();\n    let n = arr.length;\n    if (n % 2 === 0)\
    \ {\n        return (arr[n / 2] + arr[n / 2 - 1]) / 2;\n    } else {\n       \
    \ return arr[n / 2];\n    }\n}\n", "    let arr = l.sort();\n    let n = arr.length;\n\
    \    if (n % 2 === 0) {\n        return (arr[n / 2] + arr[n / 2 - 1]) / 2;\n \
    \   } else {\n        return arr[n / 2];\n    }\n}\n", "    let sorted = l.sort();\n\
    \    let middle = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 ===\
    \ 1) {\n        return sorted[middle];\n    } else {\n        return (sorted[middle]\
    \ + sorted[middle - 1]) / 2;\n    }\n}\n", "    let n = l.length;\n    let m =\
    \ Math.floor(n / 2);\n    let s = 0;\n    for (let i = 0; i < n; i++) {\n    \
    \    s += l[i];\n    }\n    return s / n;\n}\n", "    let sorted = l.sort();\n\
    \    let middle = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 ===\
    \ 1) {\n        return sorted[middle];\n    } else {\n        return (sorted[middle]\
    \ + sorted[middle - 1]) / 2;\n    }\n}\n", "    let n = l.length;\n    if (n ===\
    \ 0) {\n        return NaN;\n    }\n    let m = Math.floor(n / 2);\n    let a\
    \ = l[m - 1];\n    let b = l[m];\n    if (n % 2 === 0) {\n        return (a +\
    \ b) / 2;\n    }\n    return a;\n}\n", "    let sorted = l.sort();\n    let middle\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n     \
    \   return (sorted[middle] + sorted[middle - 1]) / 2;\n    }\n    return sorted[middle];\n\
    }\n", "    let sorted = l.sort();\n    let middle = Math.floor(sorted.length /\
    \ 2);\n    if (sorted.length % 2 === 0) {\n        return (sorted[middle] + sorted[middle\
    \ - 1]) / 2;\n    } else {\n        return sorted[middle];\n    }\n}\n", "   \
    \ let n = l.length;\n    let m = Math.floor(n / 2);\n    let i = 0;\n    let j\
    \ = n - 1;\n    let k = 0;\n    let temp;\n    let median;\n    if (n % 2 ===\
    \ 0) {\n        median = (l[m] + l[m - 1]) / 2;\n    } else {\n        median\
    \ = l[m];\n    }\n    while (i < j) {\n        while (l[i] < median && i < j)\
    \ {\n            i++;\n        }\n        while (l[j] > median && i < j) {\n \
    \           j--;\n        }\n        if (i < j) {\n            temp = l[i];\n\
    \            l[i] = l[j];\n            l[j] = temp;\n        }\n    }\n    return\
    \ median;\n}\n", "    let sorted = l.sort();\n    let middle = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 === 1) {\n        return sorted[middle];\n\
    \    }\n    return (sorted[middle - 1] + sorted[middle]) / 2;\n}\n", "    let\
    \ sorted = l.sort();\n    let middle = Math.floor(sorted.length / 2);\n    if\
    \ (sorted.length % 2 === 1) {\n        return sorted[middle];\n    } else {\n\
    \        return (sorted[middle] + sorted[middle - 1]) / 2;\n    }\n}\n", "   \
    \ let arr = l.sort();\n    let mid = Math.floor(arr.length / 2);\n    if (arr.length\
    \ % 2 === 1) {\n        return arr[mid];\n    } else {\n        return (arr[mid\
    \ - 1] + arr[mid]) / 2;\n    }\n}\n", "    let sorted = l.sort();\n    let middle\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n     \
    \   return (sorted[middle] + sorted[middle - 1]) / 2;\n    }\n    return sorted[middle];\n\
    }\n", "    let sorted = l.sort();\n    let middle = Math.floor(sorted.length /\
    \ 2);\n    if (sorted.length % 2 === 0) {\n        return (sorted[middle] + sorted[middle\
    \ - 1]) / 2;\n    }\n    return sorted[middle];\n}\n", "  let arr = l.sort();\n\
    \  let mid = Math.floor(arr.length / 2);\n  if (arr.length % 2 === 0) {\n    return\
    \ (arr[mid] + arr[mid - 1]) / 2;\n  }\n  return arr[mid];\n}\n", "    let sorted\
    \ = l.sort();\n    let middle = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[middle] + sorted[middle - 1]) / 2;\n  \
    \  }\n    return sorted[middle];\n}\n", "    let arr = l.sort();\n    let n =\
    \ arr.length;\n    if (n % 2 === 0) {\n        return (arr[n / 2] + arr[n / 2\
    \ - 1]) / 2;\n    } else {\n        return arr[n / 2];\n    }\n}\n", "    let\
    \ n = l.length;\n    if (n === 0) {\n        return NaN;\n    }\n    let m = Math.floor(n\
    \ / 2);\n    let left = [];\n    let right = [];\n    for (let i = 0; i < n; i++)\
    \ {\n        if (i < m) {\n            left.push(l[i]);\n        } else {\n  \
    \          right.push(l[i]);\n        }\n    }\n    left = left.sort(function(a,\
    \ b) {\n        return a - b;\n    });\n    right = right.sort(function(a, b)\
    \ {\n        return a - b;\n    });\n    if (left[0] === right[0]) {\n       \
    \ return left[0];\n    } else {\n        return (left[m] + right[m]) / 2;\n  \
    \  }\n}\n", "    let sorted = l.sort();\n    let middle = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 === 1) {\n        return sorted[middle];\n\
    \    } else {\n        return (sorted[middle] + sorted[middle - 1]) / 2;\n   \
    \ }\n}\n", "    let n = l.length;\n    if (n === 0) {\n        return NaN;\n \
    \   }\n    let m = Math.floor(n / 2);\n    let a = l[m - 1];\n    let b = l[m];\n\
    \    if (a === b) {\n        return a;\n    }\n    if (a > b) {\n        a = b;\n\
    \        b = l[m];\n    }\n    return (a + b) / 2;\n}\n", "    let arr = l.sort((a,\
    \ b) => a - b);\n    let n = arr.length;\n    let half = Math.floor(n / 2);\n\
    \    if (n % 2 === 1) {\n        return arr[half];\n    } else {\n        return\
    \ (arr[half - 1] + arr[half]) / 2;\n    }\n}\n", "    let sorted = l.sort();\n\
    \    let middle = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 ===\
    \ 0) {\n        return (sorted[middle] + sorted[middle - 1]) / 2;\n    }\n   \
    \ return sorted[middle];\n}\n", "    let n = l.length;\n    if (n === 0) {\n \
    \       return NaN;\n    }\n    let m = Math.floor(n / 2);\n    let a = l[m -\
    \ 1];\n    let b = l[m];\n    if (n % 2 === 1) {\n        return a;\n    }\n \
    \   return (a + b) / 2;\n}\n", "  let sorted = l.sort();\n  let middle = Math.floor(sorted.length\
    \ / 2);\n  if (sorted.length % 2 === 1) {\n    return sorted[middle];\n  } else\
    \ {\n    return (sorted[middle - 1] + sorted[middle]) / 2;\n  }\n}\n", "  if (l.length\
    \ === 0) {\n    return NaN;\n  }\n  let arr = l.sort();\n  let middle = Math.floor(arr.length\
    \ / 2);\n  if (arr.length % 2 === 0) {\n    return (arr[middle] + arr[middle -\
    \ 1]) / 2;\n  }\n  return arr[middle];\n}\n", "    let sorted = l.sort();\n  \
    \  let middle = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 ===\
    \ 1) {\n        return sorted[middle];\n    } else {\n        return (sorted[middle\
    \ - 1] + sorted[middle]) / 2;\n    }\n}\n", "    let sorted = l.sort();\n    let\
    \ middle = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 1) {\n\
    \        return sorted[middle];\n    } else {\n        return (sorted[middle -\
    \ 1] + sorted[middle]) / 2;\n    }\n}\n", "    let n = l.length;\n    let m =\
    \ n / 2;\n    let i = 0;\n    let j = n - 1;\n    let k = 0;\n    let x = 0;\n\
    \    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n\
    \    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n\
    \    let i1 = 0;\n    let i2 = 0;\n    let i3 = 0;\n    let i4 = 0;\n    let i5\
    \ = 0;\n    let i6 = 0;\n    let i7 = 0;\n    let i8 = 0;\n    let i9 = 0;\n \
    \   let i10 = 0;\n    let i11 = 0;\n    let i12 = 0;\n    let i13 = 0;\n    let\
    \ i14 = 0;\n    let i15 = 0;\n    let i16 = 0;\n    let i17 = 0;\n    let i18\
    \ = 0;\n    let i19 = 0;\n    let i20 = 0;\n    let i21 = 0;\n    let i22 = 0;\n\
    \    let i23 = 0;\n    let i24 = 0;\n    let i25 = 0;\n    let i26 = 0;\n    let\
    \ i27 = 0;\n    let i28 = 0;\n    let i29 = 0;\n    let i30 = 0;\n    let i31\
    \ = 0;\n    let i32 = 0;\n    let i33 = 0;\n    let i34 = 0;\n    let i35 = 0;\n\
    \    let i36 = 0;\n    let i37 = 0;\n    let i38 = 0;\n    let i39 = 0;\n    let\
    \ i40 = 0;\n    let i41 = 0;\n    let i42 = 0;\n    let i43 = 0;\n    let i44\
    \ = 0;\n    let i45 = 0;\n    let i46 = 0;\n    let i47 = 0;\n    let i48 = 0;\n\
    \    let i49 = 0;\n    let", "    let n = l.length;\n    let m = n / 2;\n    let\
    \ i = 0;\n    let j = n - 1;\n    let k = 0;\n    let temp;\n    let mid;\n  \
    \  let l1 = [];\n    let l2 = [];\n    while (i < m) {\n        l1.push(l[i]);\n\
    \        i++;\n    }\n    while (j > i) {\n        l2.push(l[j]);\n        j--;\n\
    \    }\n    if (n % 2 === 0) {\n        mid = (l1[m - 1] + l2[m - 1]) / 2;\n \
    \       return mid;\n    } else {\n        mid = l1[m - 1];\n        return mid;\n\
    \    }\n}\n", "    let sorted = l.sort();\n    let middle = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 === 1) {\n        return sorted[middle];\n\
    \    } else {\n        return (sorted[middle] + sorted[middle - 1]) / 2;\n   \
    \ }\n}\n", "    let n = l.length;\n    if (n === 0) return NaN;\n    let m = Math.floor(n\
    \ / 2);\n    if (n % 2 === 0) return (l[m - 1] + l[m]) / 2;\n    return l[m];\n\
    }\n", "    let sorted = l.sort();\n    let middle = Math.floor(sorted.length /\
    \ 2);\n    if (sorted.length % 2 === 1) {\n        return sorted[middle];\n  \
    \  } else {\n        return (sorted[middle - 1] + sorted[middle]) / 2;\n    }\n\
    }\n", "    let sorted = l.sort();\n    let middle = Math.floor(sorted.length /\
    \ 2);\n    if (sorted.length % 2 === 0) {\n        return (sorted[middle] + sorted[middle\
    \ - 1]) / 2;\n    }\n    return sorted[middle];\n}\n", "    let sorted = l.sort();\n\
    \    let middle = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 ===\
    \ 1) {\n        return sorted[middle];\n    } else {\n        return (sorted[middle]\
    \ + sorted[middle - 1]) / 2;\n    }\n}\n", "    let sorted = l.sort();\n    let\
    \ middle = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n\
    \        return (sorted[middle] + sorted[middle - 1]) / 2;\n    }\n    return\
    \ sorted[middle];\n}\n", "    let n = l.length;\n    if (n === 0) {\n        return\
    \ NaN;\n    }\n    let m = Math.floor(n / 2);\n    let i = 0;\n    let j = n -\
    \ 1;\n    let k = 0;\n    while (i <= j) {\n        k = i + j;\n        if (k\
    \ === m) {\n            return l[k];\n        }\n        if (l[i] < l[j]) {\n\
    \            if (l[k] < l[i]) {\n                j = k;\n            } else {\n\
    \                i = k;\n            }\n        } else {\n            if (l[k]\
    \ < l[j]) {\n                i = k;\n            } else {\n                j =\
    \ k;\n            }\n        }\n    }\n    return (l[i] + l[j]) / 2;\n}\n", " \
    \   let sorted = l.sort();\n    let middle = Math.floor(sorted.length / 2);\n\
    \    if (sorted.length % 2 === 1) {\n        return sorted[middle];\n    } else\
    \ {\n        return (sorted[middle - 1] + sorted[middle]) / 2;\n    }\n}\n", " \
    \   let sorted = l.sort();\n    let middle = Math.floor(sorted.length / 2);\n\
    \    if (sorted.length % 2 === 1) {\n        return sorted[middle];\n    } else\
    \ {\n        return (sorted[middle - 1] + sorted[middle]) / 2;\n    }\n}\n", " \
    \ if (l.length === 0) {\n    return NaN;\n  }\n\n  let sorted = l.sort();\n  let\
    \ middle = Math.floor(sorted.length / 2);\n  if (sorted.length % 2 === 1) {\n\
    \    return sorted[middle];\n  } else {\n    return (sorted[middle] + sorted[middle\
    \ - 1]) / 2;\n  }\n}\n", "    let sorted = l.sort();\n    let middle = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 === 1) {\n        return sorted[middle];\n\
    \    } else {\n        return (sorted[middle] + sorted[middle - 1]) / 2;\n   \
    \ }\n}\n", "    let sorted = l.sort();\n    let middle = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 === 1) {\n        return sorted[middle];\n\
    \    } else {\n        return (sorted[middle - 1] + sorted[middle]) / 2;\n   \
    \ }\n}\n", "    let sorted = l.sort();\n    let middle = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 === 1) {\n        return sorted[middle];\n\
    \    } else {\n        return (sorted[middle - 1] + sorted[middle]) / 2;\n   \
    \ }\n}\n", "    let sorted = l.sort();\n    let middle = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 === 1) {\n        return sorted[middle];\n\
    \    } else {\n        return (sorted[middle] + sorted[middle - 1]) / 2;\n   \
    \ }\n}\n", "    let sorted = l.sort();\n    let middle = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 === 0) {\n        return (sorted[middle] +\
    \ sorted[middle - 1]) / 2;\n    }\n    return sorted[middle];\n}\n", "    let\
    \ n = l.length;\n    if (n === 0) {\n        return NaN;\n    }\n    let m = Math.floor(n\
    \ / 2);\n    let i = 0;\n    let j = n - 1;\n    let k = 0;\n    while (i < m)\
    \ {\n        k = (i + j) / 2;\n        if (l[k] > l[j]) {\n            i = k +\
    \ 1;\n        } else {\n            j = k;\n        }\n    }\n    if (n % 2 ===\
    \ 0) {\n        return (l[i] + l[j]) / 2;\n    }\n    return l[i];\n}\n", "  \
    \  let sorted = l.sort();\n    let middle = Math.floor(sorted.length / 2);\n \
    \   if (sorted.length % 2 === 1) {\n        return sorted[middle];\n    } else\
    \ {\n        return (sorted[middle] + sorted[middle - 1]) / 2;\n    }\n}\n", " \
    \   let arr = l.sort((a, b) => a - b);\n    let n = arr.length;\n    let m = Math.floor(n\
    \ / 2);\n    if (n % 2 === 0) {\n        return (arr[m] + arr[m - 1]) / 2;\n \
    \   } else {\n        return arr[m];\n    }\n}\n", "    let sorted = l.sort();\n\
    \    let middle = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 ===\
    \ 1) {\n        return sorted[middle];\n    }\n    else {\n        return (sorted[middle]\
    \ + sorted[middle - 1]) / 2;\n    }\n}\n", "    let sorted = l.sort();\n    let\
    \ middle = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n\
    \        return (sorted[middle] + sorted[middle - 1]) / 2;\n    }\n    return\
    \ sorted[middle];\n}\n", "    let sorted = l.sort();\n    let middle = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 === 0) {\n        return (sorted[middle] +\
    \ sorted[middle - 1]) / 2;\n    }\n    return sorted[middle];\n}\n", "    let\
    \ n = l.length;\n    let m = Math.floor(n / 2);\n    let i = 0;\n    let j = n\
    \ - 1;\n    let k = 0;\n    let temp;\n    let pivot = l[m];\n    while (i < j)\
    \ {\n        while (l[i] < pivot) {\n            i++;\n        }\n        while\
    \ (l[j] > pivot) {\n            j--;\n        }\n        if (i < j) {\n      \
    \      temp = l[i];\n            l[i] = l[j];\n            l[j] = temp;\n    \
    \    }\n    }\n    if (n % 2 === 0) {\n        return (l[m] + l[m - 1]) / 2;\n\
    \    } else {\n        return l[m];\n    }\n}\n", "    let n = l.length;\n   \
    \ let m = n / 2;\n    let i = 0;\n    let j = n - 1;\n    let k = 0;\n    let\
    \ temp;\n    if (n % 2 === 0) {\n        temp = l[m];\n        while (i < m) {\n\
    \            if (l[i] < temp) {\n                temp = l[i];\n              \
    \  k = i;\n            }\n            i++;\n        }\n        while (j > k) {\n\
    \            if (l[j] > temp) {\n                temp = l[j];\n              \
    \  k = j;\n            }\n            j--;\n        }\n        return temp;\n\
    \    } else {\n        temp = l[m];\n        while (i < m) {\n            if (l[i]\
    \ < temp) {\n                temp = l[i];\n                k = i;\n          \
    \  }\n            i++;\n        }\n        return temp;\n    }\n}\n", "    let\
    \ arr = l.sort();\n    let n = arr.length;\n    let mid = Math.floor(n / 2);\n\
    \    if (n % 2 === 0) {\n        return (arr[mid] + arr[mid - 1]) / 2;\n    }\
    \ else {\n        return arr[mid];\n    }\n}\n", "    let n = l.length;\n    if\
    \ (n === 0) {\n        return NaN;\n    }\n    let m = Math.floor(n / 2);\n  \
    \  let i = 0;\n    let j = n - 1;\n    let k = 0;\n    let temp;\n    while (i\
    \ < m) {\n        if (l[i] < l[j]) {\n            temp = l[i];\n            l[i]\
    \ = l[j];\n            l[j] = temp;\n            k = i;\n            i++;\n  \
    \      } else {\n            j--;\n        }\n    }\n    if (n % 2 === 1) {\n\
    \        return l[k];\n    } else {\n        return (l[k] + l[j]) / 2.0;\n   \
    \ }\n}\n", "    let sorted = l.sort();\n    let middle = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 === 0) {\n        return (sorted[middle] +\
    \ sorted[middle - 1]) / 2;\n    }\n    return sorted[middle];\n}\n", "    let\
    \ sorted = l.sort();\n    let middle = Math.floor(sorted.length / 2);\n    if\
    \ (sorted.length % 2 === 0) {\n        return (sorted[middle] + sorted[middle\
    \ - 1]) / 2;\n    }\n    return sorted[middle];\n}\n", "    let arr = l.sort();\n\
    \    let n = arr.length;\n    let m = Math.floor(n / 2);\n    if (n % 2 === 1)\
    \ {\n        return arr[m];\n    } else {\n        return (arr[m] + arr[m - 1])\
    \ / 2;\n    }\n}\n", "    let arr = l.sort();\n    let mid = Math.floor(arr.length\
    \ / 2);\n    if (arr.length % 2 === 0) {\n        return (arr[mid] + arr[mid -\
    \ 1]) / 2;\n    }\n    return arr[mid];\n}\n", "    let sorted = l.sort();\n \
    \   let middle = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 ===\
    \ 0) {\n        return (sorted[middle] + sorted[middle - 1]) / 2;\n    }\n   \
    \ return sorted[middle];\n}\n", "    let n = l.length;\n    if (n === 0) {\n \
    \       throw new Error(\"The list is empty\");\n    }\n    let m = Math.floor(n\
    \ / 2);\n    let a = l[m - 1];\n    let b = l[m];\n    if (n % 2 === 0) {\n  \
    \      return (a + b) / 2;\n    }\n    return a;\n}\n", "    let sorted = l.sort();\n\
    \    let middle = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 ===\
    \ 1) {\n        return sorted[middle];\n    }\n    return (sorted[middle] + sorted[middle\
    \ - 1]) / 2;\n}\n", "    let sorted = l.sort();\n    let middle = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 === 0) {\n        return (sorted[middle] +\
    \ sorted[middle - 1]) / 2;\n    }\n    return sorted[middle];\n}\n", "    let\
    \ sorted = l.sort();\n    let middle = Math.floor(sorted.length / 2);\n    if\
    \ (sorted.length % 2 === 0) {\n        return (sorted[middle] + sorted[middle\
    \ - 1]) / 2;\n    }\n    return sorted[middle];\n}\n", "    let sorted = l.sort();\n\
    \    let middle = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 ===\
    \ 1) {\n        return sorted[middle];\n    } else {\n        return (sorted[middle]\
    \ + sorted[middle - 1]) / 2;\n    }\n}\n", "    let sorted = l.sort();\n    let\
    \ middle = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n\
    \        return (sorted[middle] + sorted[middle - 1]) / 2;\n    }\n    return\
    \ sorted[middle];\n}\n", "    let n = l.length;\n    let m = Math.floor(n / 2);\n\
    \    let a = l[m - 1];\n    let b = l[m];\n    if (n % 2 === 0) {\n        return\
    \ (a + b) / 2;\n    } else {\n        return a;\n    }\n}\n", "    let arr = l.sort();\n\
    \    let mid = Math.floor(arr.length / 2);\n    if (arr.length % 2 === 0) {\n\
    \        return (arr[mid] + arr[mid - 1]) / 2;\n    }\n    return arr[mid];\n\
    }\n", "    let n = l.length;\n    if (n === 0) {\n        throw new Error(\"The\
    \ array is empty\");\n    }\n    let m = Math.floor(n / 2);\n    let i = 0;\n\
    \    let j = n - 1;\n    let k = 0;\n    let temp;\n    while (i <= j) {\n   \
    \     k = i + j;\n        if (k === m) {\n            return l[k];\n        }\n\
    \        if (l[i] < l[j]) {\n            temp = l[i];\n            l[i] = l[k];\n\
    \            l[k] = temp;\n            i++;\n        } else {\n            temp\
    \ = l[j];\n            l[j] = l[k];\n            l[k] = temp;\n            j--;\n\
    \        }\n    }\n    return l[m];\n}\n", "    let arr = l.sort();\n    let mid\
    \ = Math.floor(arr.length / 2);\n    if (arr.length % 2 === 0) {\n        return\
    \ (arr[mid] + arr[mid - 1]) / 2;\n    }\n    return arr[mid];\n}\n", "    let\
    \ sorted = l.sort();\n    let middle = Math.floor(sorted.length / 2);\n    if\
    \ (sorted.length % 2 === 1) {\n        return sorted[middle];\n    } else {\n\
    \        return (sorted[middle - 1] + sorted[middle]) / 2;\n    }\n}\n", "   \
    \ let n = l.length;\n    if (n === 0) {\n        return NaN;\n    }\n    let m\
    \ = Math.floor(n / 2);\n    let i = 0;\n    let j = n - 1;\n    let k = 0;\n \
    \   while (i < m && j >= i) {\n        k = (i + j) / 2;\n        if (l[i] > l[j])\
    \ {\n            i = k + 1;\n        } else {\n            j = k;\n        }\n\
    \    }\n    if (j === i) {\n        return l[i];\n    } else {\n        return\
    \ (l[i] + l[j]) / 2;\n    }\n}\n", "    let sorted = l.sort();\n    let middle\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n     \
    \   return (sorted[middle] + sorted[middle - 1]) / 2;\n    }\n    return sorted[middle];\n\
    }\n", "    let sorted = l.sort();\n    let middle = Math.floor(sorted.length /\
    \ 2);\n    if (sorted.length % 2 === 1) {\n        return sorted[middle];\n  \
    \  }\n    else {\n        return (sorted[middle - 1] + sorted[middle]) / 2;\n\
    \    }\n}\n", "    let sorted = l.sort();\n    let middle = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 === 0) {\n        return (sorted[middle] +\
    \ sorted[middle - 1]) / 2;\n    } else {\n        return sorted[middle];\n   \
    \ }\n}\n", "    let n = l.length;\n    if (n === 0) {\n        return NaN;\n \
    \   }\n    let m = Math.floor(n / 2);\n    let i = 0;\n    let j = n - 1;\n  \
    \  let k = 0;\n    let temp;\n    while (i < m) {\n        k = i;\n        while\
    \ (j >= i) {\n            if (l[k] > l[j]) {\n                temp = l[k];\n \
    \               l[k] = l[j];\n                l[j] = temp;\n            }\n  \
    \          j--;\n        }\n        i++;\n    }\n    if (n % 2 === 1) {\n    \
    \    return l[k];\n    }\n    return (l[k] + l[k + 1]) / 2.0;\n}\n", "    let\
    \ arr = l.sort();\n    let mid = Math.floor(arr.length / 2);\n    if (arr.length\
    \ % 2 === 0) {\n        return (arr[mid] + arr[mid - 1]) / 2;\n    }\n    return\
    \ arr[mid];\n}\n", "  let sorted = l.sort();\n  let middle = Math.floor(sorted.length\
    \ / 2);\n  if (sorted.length % 2 === 0) {\n    return (sorted[middle] + sorted[middle\
    \ - 1]) / 2;\n  }\n  return sorted[middle];\n}\n", "    let n = l.length;\n  \
    \  let m = Math.floor(n / 2);\n    let s = 0;\n    for (let i = 0; i < n; i++)\
    \ {\n        s += l[i];\n    }\n    return s / n;\n}\n", "    let arr = l.sort((a,\
    \ b) => a - b);\n    let mid = Math.floor(arr.length / 2);\n    if (arr.length\
    \ % 2 === 0) {\n        return (arr[mid] + arr[mid - 1]) / 2;\n    }\n    return\
    \ arr[mid];\n}\n", "    let sorted = l.sort();\n    let middle = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 === 1) {\n        return sorted[middle];\n\
    \    }\n    else {\n        return (sorted[middle] + sorted[middle - 1]) / 2;\n\
    \    }\n}\n", "    let sorted = l.sort();\n    let middle = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 === 0) {\n        return (sorted[middle] +\
    \ sorted[middle - 1]) / 2;\n    }\n    return sorted[middle];\n}\n", "  let sorted\
    \ = l.sort();\n  let middle = Math.floor(sorted.length / 2);\n  if (sorted.length\
    \ % 2 === 0) {\n    return (sorted[middle] + sorted[middle - 1]) / 2;\n  }\n \
    \ return sorted[middle];\n}\n", "    let sorted = l.sort();\n    let middle =\
    \ Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 1) {\n       \
    \ return sorted[middle];\n    }\n    return (sorted[middle] + sorted[middle -\
    \ 1]) / 2;\n}\n", "    let sorted = l.sort();\n    let middle = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 === 0) {\n        return (sorted[middle] +\
    \ sorted[middle - 1]) / 2;\n    }\n    return sorted[middle];\n}\n", "    let\
    \ arr = l.sort();\n    let n = arr.length;\n    let mid = Math.floor(n / 2);\n\
    \    if (n % 2 === 1) {\n        return arr[mid];\n    } else {\n        return\
    \ (arr[mid - 1] + arr[mid]) / 2;\n    }\n}\n", "    let arr = l.sort();\n    let\
    \ n = arr.length;\n    let mid = Math.floor(n / 2);\n    if (n % 2 === 0) {\n\
    \        return (arr[mid] + arr[mid - 1]) / 2;\n    } else {\n        return arr[mid];\n\
    \    }\n}\n", "    let sorted = l.sort();\n    let middle = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 === 0) {\n        return (sorted[middle] +\
    \ sorted[middle - 1]) / 2;\n    }\n    return sorted[middle];\n}\n", "    let\
    \ arr = l.sort();\n    let n = arr.length;\n    let mid = Math.floor(n / 2);\n\
    \    if (n % 2 === 0) {\n        return (arr[mid] + arr[mid - 1]) / 2;\n    }\
    \ else {\n        return arr[mid];\n    }\n}\n", "    let sorted = l.sort();\n\
    \    let middle = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 ===\
    \ 0) {\n        return (sorted[middle] + sorted[middle - 1]) / 2;\n    }\n   \
    \ return sorted[middle];\n}\n", "    let arr = l.sort();\n    let mid = Math.floor(arr.length\
    \ / 2);\n    if (arr.length % 2 === 0) {\n        return (arr[mid] + arr[mid -\
    \ 1]) / 2;\n    }\n    return arr[mid];\n}\n", "    let n = l.length;\n    if\
    \ (n === 0) {\n        return NaN;\n    }\n    let m = Math.floor(n / 2);\n  \
    \  if (n % 2 === 1) {\n        return l[m];\n    }\n    let a = l[m - 1];\n  \
    \  let b = l[m];\n    return (a + b) / 2;\n}\n", "    let arr = l.sort();\n  \
    \  let n = arr.length;\n    let mid = Math.floor(n / 2);\n    if (n % 2 === 0)\
    \ {\n        return (arr[mid] + arr[mid - 1]) / 2;\n    }\n    return arr[mid];\n\
    }\n", "    let sorted = l.sort();\n    let middle = Math.floor(sorted.length /\
    \ 2);\n    if (sorted.length % 2 === 0) {\n        return (sorted[middle] + sorted[middle\
    \ - 1]) / 2;\n    }\n    return sorted[middle];\n}\n", "    let sorted = l.sort();\n\
    \    let middle = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 ===\
    \ 0) {\n        return (sorted[middle] + sorted[middle - 1]) / 2;\n    }\n   \
    \ return sorted[middle];\n}\n", "  if (l.length === 0) {\n    throw new Error('Array\
    \ is empty');\n  }\n  let sorted = l.sort();\n  let middle = Math.floor(sorted.length\
    \ / 2);\n  if (sorted.length % 2 === 1) {\n    return sorted[middle];\n  }\n \
    \ return (sorted[middle - 1] + sorted[middle]) / 2;\n}\n", "  let n = l.length;\n\
    \  if (n === 0) {\n    return NaN;\n  }\n  let m = Math.floor(n / 2);\n  let i\
    \ = 0;\n  let j = n - 1;\n  let k = 0;\n  let x = 0;\n  while (i < m && j >= m)\
    \ {\n    x = l[i] + l[j];\n    if (x > 0) {\n      i++;\n    } else if (x < 0)\
    \ {\n      j--;\n    } else {\n      i++;\n      j--;\n    }\n  }\n  if (i ===\
    \ m) {\n    k = l[m];\n  } else if (j === m) {\n    k = l[m];\n  } else {\n  \
    \  k = (l[i] + l[j]) / 2;\n  }\n  return k;\n}\n", "    let sorted = l.sort();\n\
    \    let middle = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 ===\
    \ 1) {\n        return sorted[middle];\n    } else {\n        return (sorted[middle\
    \ - 1] + sorted[middle]) / 2;\n    }\n}\n", "    let arr = l.sort();\n    let\
    \ mid = Math.floor(arr.length / 2);\n    if (arr.length % 2 === 0) {\n       \
    \ return (arr[mid] + arr[mid - 1]) / 2;\n    }\n    return arr[mid];\n}\n", " \
    \   let arr = l.sort();\n    let mid = Math.floor(arr.length / 2);\n    if (arr.length\
    \ % 2 === 0) {\n        return (arr[mid] + arr[mid - 1]) / 2;\n    } else {\n\
    \        return arr[mid];\n    }\n}\n", "    let arr = l.sort((a, b) => a - b);\n\
    \    let n = arr.length;\n    if (n % 2 === 1) {\n        return arr[n / 2];\n\
    \    } else {\n        let m = n / 2;\n        return (arr[m - 1] + arr[m]) /\
    \ 2;\n    }\n}\n", "    let sorted = l.sort();\n    let middle = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 === 0) {\n        return (sorted[middle] +\
    \ sorted[middle - 1]) / 2;\n    } else {\n        return sorted[middle];\n   \
    \ }\n}\n", "    let n = l.length;\n    let m = n % 2;\n    let i = Math.floor(n\
    \ / 2);\n    let j = 0;\n    let k = 0;\n    let a = [];\n    let b = [];\n  \
    \  let c = [];\n    let d = [];\n    let e = [];\n    let f = [];\n    let g =\
    \ [];\n    let h = [];\n    let i1 = [];\n    let j1 = [];\n    let k1 = [];\n\
    \    let l1 = [];\n    let m1 = [];\n    let n1 = [];\n    let o1 = [];\n    let\
    \ p1 = [];\n    let q1 = [];\n    let r1 = [];\n    let s1 = [];\n    let t1 =\
    \ [];\n    let u1 = [];\n    let v1 = [];\n    let w1 = [];\n    let x1 = [];\n\
    \    let y1 = [];\n    let z1 = [];\n    let A1 = [];\n    let B1 = [];\n    let\
    \ C1 = [];\n    let D1 = [];\n    let E1 = [];\n    let F1 = [];\n    let G1 =\
    \ [];\n    let H1 = [];\n    let I1 = [];\n    let J1 = [];\n    let K1 = [];\n\
    \    let L1 = [];\n    let M1 = [];\n    let N1 = [];\n    let O1 = [];\n    let\
    \ P1 = [];\n    let Q1 = [];\n    let R1 = [];\n    let S1 = [];\n    let T1 =\
    \ [];\n    let U1 = [];\n    let V1 = [];\n    let W1 = [];\n    let X1 = [];\n\
    \    let Y1 = [];\n    let Z1 = [];\n    let AA1 = [];\n    let BB1 = [];\n  \
    \  let CC1 = [];\n    let DD1 = [];\n    let EE1 = [];\n    let FF1 = [];\n  \
    \  let GG1 = [];\n    let HH1 = [];\n    let II1 = [];\n    let JJ1 = [];\n  \
    \  let KK1 = [];\n    let LL1 = [];\n    let MM1 = [];\n    let NN1 = [];\n  \
    \  let OO1 = [];\n    let PP", "  let sorted = l.sort();\n  let middle = Math.floor(sorted.length\
    \ / 2);\n  if (sorted.length % 2 === 0) {\n    return (sorted[middle] + sorted[middle\
    \ - 1]) / 2;\n  }\n  return sorted[middle];\n}\n", "    let sorted = l.sort();\n\
    \    let middle = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 ===\
    \ 0) {\n        return (sorted[middle] + sorted[middle - 1]) / 2;\n    }\n   \
    \ return sorted[middle];\n}\n", "    let sorted = l.sort();\n    let middle =\
    \ Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 1) {\n       \
    \ return sorted[middle];\n    }\n    return (sorted[middle - 1] + sorted[middle])\
    \ / 2;\n}\n", "    let arr = l.sort();\n    let n = arr.length;\n    let mid =\
    \ Math.floor(n / 2);\n    if (n % 2 === 0) {\n        return (arr[mid] + arr[mid\
    \ - 1]) / 2;\n    }\n    return arr[mid];\n}\n", "    let arr = l.sort();\n  \
    \  let mid = Math.floor(arr.length / 2);\n    if (arr.length % 2 === 0) {\n  \
    \      return (arr[mid] + arr[mid - 1]) / 2;\n    }\n    return arr[mid];\n}\n",
  "    let sorted = l.sort();\n    let middle = Math.floor(sorted.length / 2);\n \
    \   if (sorted.length % 2 === 0) {\n        return (sorted[middle] + sorted[middle\
    \ - 1]) / 2;\n    }\n    return sorted[middle];\n}\n", "    let n = l.length;\n\
    \    if (n === 0) {\n        throw new Error(\"Median of an empty array is not\
    \ defined\");\n    }\n    if (n === 1) {\n        return l[0];\n    }\n    let\
    \ m = Math.floor(n / 2);\n    let i = 0;\n    let j = n - 1;\n    let k = 0;\n\
    \    while (i <= j) {\n        k = i + j;\n        if (l[i] < l[j]) {\n      \
    \      i++;\n        } else if (l[i] > l[j]) {\n            j--;\n        } else\
    \ {\n            i++;\n            j--;\n        }\n    }\n    if (k === 0) {\n\
    \        return l[0];\n    }\n    if (k === n - 1) {\n        return l[n - 1];\n\
    \    }\n    return (l[k] + l[k - 1]) / 2;\n}\n", "    let sorted = l.sort();\n\
    \    let middle = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 ===\
    \ 1) {\n        return sorted[middle];\n    } else {\n        return (sorted[middle\
    \ - 1] + sorted[middle]) / 2;\n    }\n}\n", "    let arr = l.sort();\n    let\
    \ mid = Math.floor(arr.length / 2);\n    if (arr.length % 2 === 0) {\n       \
    \ return (arr[mid] + arr[mid - 1]) / 2;\n    } else {\n        return arr[mid];\n\
    \    }\n}\n", "    let sorted = l.sort();\n    let middle = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 === 1) {\n        return sorted[middle];\n\
    \    } else {\n        return (sorted[middle - 1] + sorted[middle]) / 2;\n   \
    \ }\n}\n", "    let sorted = l.sort();\n    let mid = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 === 0) {\n        return (sorted[mid] + sorted[mid\
    \ - 1]) / 2;\n    }\n    return sorted[mid];\n}\n", "    let sorted = l.sort();\n\
    \    let middle = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 ===\
    \ 0) {\n        return (sorted[middle] + sorted[middle - 1]) / 2;\n    }\n   \
    \ return sorted[middle];\n}\n", "    let n = l.length;\n    if (n === 0) {\n \
    \       throw new Error(\"Array is empty\");\n    }\n    if (n === 1) {\n    \
    \    return l[0];\n    }\n    let m = Math.floor(n / 2);\n    let a = l[m - 1];\n\
    \    let b = l[m];\n    if (a < b) {\n        return a;\n    }\n    return b;\n\
    }\n", "    let arr = l.sort();\n    let n = arr.length;\n    if (n % 2 === 0)\
    \ {\n        return (arr[n / 2] + arr[n / 2 - 1]) / 2;\n    } else {\n       \
    \ return arr[n / 2];\n    }\n}\n", "    let sorted = l.sort();\n    let middle\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 1) {\n     \
    \   return sorted[middle];\n    }\n    else {\n        return (sorted[middle -\
    \ 1] + sorted[middle]) / 2;\n    }\n}\n", "    let sorted = l.sort();\n    let\
    \ middle = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n\
    \        return (sorted[middle] + sorted[middle - 1]) / 2;\n    } else {\n   \
    \     return sorted[middle];\n    }\n}\n", "    let sorted = l.sort();\n    let\
    \ middle = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n\
    \        return (sorted[middle] + sorted[middle - 1]) / 2;\n    }\n    return\
    \ sorted[middle];\n}\n", "    let sorted = l.sort();\n    let middle = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 === 0) {\n        return (sorted[middle] +\
    \ sorted[middle - 1]) / 2;\n    }\n    return sorted[middle];\n}\n", "    let\
    \ sorted = l.sort();\n    let middle = Math.floor(sorted.length / 2);\n    if\
    \ (sorted.length % 2 === 1) {\n        return sorted[middle];\n    } else {\n\
    \        return (sorted[middle - 1] + sorted[middle]) / 2;\n    }\n}\n", "   \
    \ let sorted = l.sort();\n    let middle = Math.floor(sorted.length / 2);\n  \
    \  if (sorted.length % 2 === 1) {\n        return sorted[middle];\n    } else\
    \ {\n        return (sorted[middle - 1] + sorted[middle]) / 2;\n    }\n}\n", " \
    \   let sorted = l.sort();\n    let middle = Math.floor(sorted.length / 2);\n\
    \    if (sorted.length % 2 === 0) {\n        return (sorted[middle] + sorted[middle\
    \ - 1]) / 2;\n    }\n    return sorted[middle];\n}\n", "    let arr = l.sort();\n\
    \    let n = arr.length;\n    if (n % 2 === 0) {\n        return (arr[n / 2] +\
    \ arr[n / 2 - 1]) / 2;\n    } else {\n        return arr[n / 2];\n    }\n}\n",
  "    let n = l.length;\n    let m = Math.floor(n / 2);\n    let i = 0;\n    let\
    \ j = n - 1;\n    let k = 0;\n    let temp;\n    let pivot;\n    let pivotIndex;\n\
    \    if (n % 2 === 0) {\n        pivot = l[m];\n        pivotIndex = m;\n    \
    \    for (i = m + 1; i < n; i++) {\n            if (l[i] > pivot) {\n        \
    \        pivot = l[i];\n                pivotIndex = i;\n            }\n     \
    \   }\n        temp = l[pivotIndex];\n        l[pivotIndex] = l[m];\n        l[m]\
    \ = temp;\n    } else {\n        pivot = l[Math.floor(n / 2)];\n        pivotIndex\
    \ = Math.floor(n / 2);\n        for (i = Math.floor(n / 2) + 1; i < n; i++) {\n\
    \            if (l[i] > pivot) {\n                pivot = l[i];\n            \
    \    pivotIndex = i;\n            }\n        }\n        temp = l[pivotIndex];\n\
    \        l[pivotIndex] = l[Math.floor(n / 2)];\n        l[Math.floor(n / 2)] =\
    \ temp;\n    }\n    return pivot;\n}", "    let arr = l.sort();\n    let n = arr.length;\n\
    \    if (n % 2 === 1) {\n        return arr[n / 2];\n    } else {\n        return\
    \ (arr[n / 2] + arr[n / 2 - 1]) / 2;\n    }\n}\n", "    let n = l.length;\n  \
    \  if (n === 0) {\n        return NaN;\n    }\n    let m = Math.floor(n / 2);\n\
    \    let i = 0;\n    let j = n - 1;\n    let k = 0;\n    let x = 0;\n    while\
    \ (i < m) {\n        x = l[i];\n        while (l[j] > x) {\n            j--;\n\
    \        }\n        l[k] = l[j];\n        k++;\n        j--;\n        i++;\n \
    \   }\n    if (n % 2 === 1) {\n        return l[m];\n    }\n    return (l[m] +\
    \ l[m - 1]) / 2;\n}\n", "    let sorted = l.sort();\n    let middle = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 === 0) {\n        return (sorted[middle] +\
    \ sorted[middle - 1]) / 2;\n    } else {\n        return sorted[middle];\n   \
    \ }\n}\n", "    let n = l.length;\n    if (n === 0) {\n        throw new Error('median\
    \ of empty array');\n    }\n    let m = Math.floor(n / 2);\n    let i = 0;\n \
    \   let j = n - 1;\n    let k = 0;\n    let temp;\n    while (i <= j) {\n    \
    \    k = i + j;\n        if (k === m) {\n            return l[k];\n        }\n\
    \        if (l[i] > l[j]) {\n            temp = l[i];\n            l[i] = l[j];\n\
    \            l[j] = temp;\n        }\n        i++;\n        j--;\n    }\n    return\
    \ (l[i] + l[j]) / 2;\n}\n", "    let sorted = l.sort();\n    let middle = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 === 0) {\n        return (sorted[middle] +\
    \ sorted[middle - 1]) / 2;\n    }\n    return sorted[middle];\n}\n", "    let\
    \ sorted = l.sort();\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 1) {\n        return sorted[mid];\n    } else {\n        return (sorted[mid\
    \ - 1] + sorted[mid]) / 2;\n    }\n}\n", "    let sorted = l.sort();\n    let\
    \ middle = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 1) {\n\
    \        return sorted[middle];\n    } else {\n        return (sorted[middle -\
    \ 1] + sorted[middle]) / 2;\n    }\n}\n", "    let n = l.length;\n    let m =\
    \ n % 2;\n    let i = Math.floor(n / 2);\n    let j = 0;\n    let k = 0;\n   \
    \ let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n\
    \    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i1 = 0;\n    let i2 =\
    \ 0;\n    let i3 = 0;\n    let i4 = 0;\n    let i5 = 0;\n    let i6 = 0;\n   \
    \ let i7 = 0;\n    let i8 = 0;\n    let i9 = 0;\n    let i10 = 0;\n    let i11\
    \ = 0;\n    let i12 = 0;\n    let i13 = 0;\n    let i14 = 0;\n    let i15 = 0;\n\
    \    let i16 = 0;\n    let i17 = 0;\n    let i18 = 0;\n    let i19 = 0;\n    let\
    \ i20 = 0;\n    let i21 = 0;\n    let i22 = 0;\n    let i23 = 0;\n    let i24\
    \ = 0;\n    let i25 = 0;\n    let i26 = 0;\n    let i27 = 0;\n    let i28 = 0;\n\
    \    let i29 = 0;\n    let i30 = 0;\n    let i31 = 0;\n    let i32 = 0;\n    let\
    \ i33 = 0;\n    let i34 = 0;\n    let i35 = 0;\n    let i36 = 0;\n    let i37\
    \ = 0;\n    let i38 = 0;\n    let i39 = 0;\n    let i40 = 0;\n    let i41 = 0;\n\
    \    let i42 = 0;\n    let i43 = 0;\n    let i44 = 0;\n    let i45 = 0;\n    let\
    \ i46 = 0;\n    let i47 = 0;\n    let i48 = 0;\n    let i49 = 0;\n    let i50\
    \ = 0;\n    let i51 = 0;\n    let i", "    let sorted = l.sort();\n    let middle\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n     \
    \   return (sorted[middle] + sorted[middle - 1]) / 2;\n    } else {\n        return\
    \ sorted[middle];\n    }\n}\n", "    let arr = l.sort((a, b) => a - b);\n    let\
    \ mid = Math.floor(arr.length / 2);\n    if (arr.length % 2 === 0) {\n       \
    \ return (arr[mid] + arr[mid - 1]) / 2;\n    }\n    return arr[mid];\n}\n", " \
    \   let sorted = l.sort();\n    let middle = Math.floor(sorted.length / 2);\n\
    \    if (sorted.length % 2 === 0) {\n        return (sorted[middle] + sorted[middle\
    \ - 1]) / 2;\n    } else {\n        return sorted[middle];\n    }\n}\n", "   \
    \ let sorted = l.sort();\n    let middle = Math.floor(sorted.length / 2);\n  \
    \  if (sorted.length % 2 === 1) {\n        return sorted[middle];\n    } else\
    \ {\n        return (sorted[middle - 1] + sorted[middle]) / 2;\n    }\n}\n", " \
    \   let sorted = l.sort();\n    let middle = Math.floor(sorted.length / 2);\n\
    \    if (sorted.length % 2 === 0) {\n        return (sorted[middle] + sorted[middle\
    \ - 1]) / 2;\n    }\n    return sorted[middle];\n}\n", "    let sorted = l.sort();\n\
    \    let middle = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 ===\
    \ 1) {\n        return sorted[middle];\n    } else {\n        return (sorted[middle\
    \ - 1] + sorted[middle]) / 2;\n    }\n}\n", "    let sorted = l.sort();\n    let\
    \ middle = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n\
    \        return (sorted[middle] + sorted[middle - 1]) / 2;\n    }\n    return\
    \ sorted[middle];\n}\n", "    let sorted = l.sort();\n    let middle = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 === 0) {\n        return (sorted[middle] +\
    \ sorted[middle - 1]) / 2;\n    } else {\n        return sorted[middle];\n   \
    \ }\n}\n", "    let sorted = l.sort();\n    let middle = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 === 0) {\n        return (sorted[middle] +\
    \ sorted[middle - 1]) / 2;\n    }\n    return sorted[middle];\n}\n", "    let\
    \ sorted = l.sort();\n    let middle = Math.floor(sorted.length / 2);\n    if\
    \ (sorted.length % 2 === 1) {\n        return sorted[middle];\n    } else {\n\
    \        return (sorted[middle] + sorted[middle - 1]) / 2;\n    }\n}\n", "   \
    \ let sorted = l.sort();\n    let middle = Math.floor(sorted.length / 2);\n  \
    \  if (sorted.length % 2 === 0) {\n        return (sorted[middle] + sorted[middle\
    \ - 1]) / 2;\n    }\n    return sorted[middle];\n}\n", "    let sorted = l.sort();\n\
    \    let middle = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 ===\
    \ 1) {\n        return sorted[middle];\n    }\n    else {\n        return (sorted[middle]\
    \ + sorted[middle - 1]) / 2;\n    }\n}\n", "  if (l.length === 0) {\n    return\
    \ NaN;\n  }\n  let sorted = l.sort();\n  let middle = Math.floor(sorted.length\
    \ / 2);\n  if (sorted.length % 2 === 1) {\n    return sorted[middle];\n  }\n \
    \ return (sorted[middle] + sorted[middle - 1]) / 2;\n}\n", "    let n = l.length;\n\
    \    if (n === 0) {\n        return NaN;\n    }\n    let m = Math.floor(n / 2);\n\
    \    if (n % 2 === 1) {\n        return l[m];\n    }\n    let a = l[m - 1];\n\
    \    let b = l[m];\n    return (a + b) / 2;\n}\n", "    let n = l.length;\n  \
    \  if (n === 0) return NaN;\n    if (n === 1) return l[0];\n    let m = Math.floor(n\
    \ / 2);\n    let i = 0;\n    let j = n - 1;\n    let k = 0;\n    while (i <= j)\
    \ {\n        k = i + j;\n        if (l[i] < l[j]) {\n            i++;\n      \
    \  } else if (l[i] > l[j]) {\n            j--;\n        } else {\n           \
    \ i++;\n            j--;\n        }\n    }\n    if (k === 0) return l[0];\n  \
    \  if (k === n - 1) return l[n - 1];\n    return l[k];\n}\n", "    let sorted\
    \ = l.sort();\n    let middle = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 1) {\n        return sorted[middle];\n    } else {\n        return (sorted[middle\
    \ - 1] + sorted[middle]) / 2;\n    }\n}\n", "    let n = l.length;\n    if (n\
    \ === 0) {\n        throw new Error(\"Median of an empty array is not defined\"\
    );\n    }\n    if (n === 1) {\n        return l[0];\n    }\n    let l1 = l.sort((a,\
    \ b) => a - b);\n    let l2 = l.sort((a, b) => b - a);\n    if (l1[n / 2] ===\
    \ l2[n / 2]) {\n        return l1[n / 2];\n    }\n    return (l1[n / 2] + l2[n\
    \ / 2]) / 2;\n}\n", "    let n = l.length;\n    let m = n / 2;\n    let i = 0;\n\
    \    let j = n - 1;\n    let k = 0;\n    let temp;\n    if (n % 2 === 0) {\n \
    \       temp = l[m];\n        while (i < m) {\n            if (l[i] < temp) {\n\
    \                temp = l[i];\n                k = i;\n            }\n       \
    \     i++;\n        }\n        while (j > k) {\n            if (l[j] > temp) {\n\
    \                temp = l[j];\n                k = j;\n            }\n       \
    \     j--;\n        }\n        return temp;\n    } else {\n        return l[m];\n\
    \    }\n}\n", "    let n = l.length;\n    let m = n % 2;\n    let i = Math.floor(n\
    \ / 2);\n    let j = 0;\n    let k = 0;\n    let a = 0;\n    let b = 0;\n    let\
    \ c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n   \
    \ let h = 0;\n    let i1 = 0;\n    let i2 = 0;\n    let i3 = 0;\n    let i4 =\
    \ 0;\n    let i5 = 0;\n    let i6 = 0;\n    let i7 = 0;\n    let i8 = 0;\n   \
    \ let i9 = 0;\n    let i10 = 0;\n    let i11 = 0;\n    let i12 = 0;\n    let i13\
    \ = 0;\n    let i14 = 0;\n    let i15 = 0;\n    let i16 = 0;\n    let i17 = 0;\n\
    \    let i18 = 0;\n    let i19 = 0;\n    let i20 = 0;\n    let i21 = 0;\n    let\
    \ i22 = 0;\n    let i23 = 0;\n    let i24 = 0;\n    let i25 = 0;\n    let i26\
    \ = 0;\n    let i27 = 0;\n    let i28 = 0;\n    let i29 = 0;\n    let i30 = 0;\n\
    \    let i31 = 0;\n    let i32 = 0;\n    let i33 = 0;\n    let i34 = 0;\n    let\
    \ i35 = 0;\n    let i36 = 0;\n    let i37 = 0;\n    let i38 = 0;\n    let i39\
    \ = 0;\n    let i40 = 0;\n    let i41 = 0;\n    let i42 = 0;\n    let i43 = 0;\n\
    \    let i44 = 0;\n    let i45 = 0;\n    let i46 = 0;\n    let i47 = 0;\n    let\
    \ i48 = 0;\n    let i49 = 0;\n    let i50 = 0;\n    let i51 = 0;\n    let i",
  "    let sorted = l.sort();\n    let middle = Math.floor(sorted.length / 2);\n \
    \   if (sorted.length % 2 === 0) {\n        return (sorted[middle] + sorted[middle\
    \ - 1]) / 2;\n    }\n    return sorted[middle];\n}\n", "    let arr = l.sort();\n\
    \    let mid = Math.floor(arr.length / 2);\n    if (arr.length % 2 === 0) {\n\
    \        return (arr[mid] + arr[mid - 1]) / 2;\n    }\n    return arr[mid];\n\
    }\n", "    let arr = l.sort();\n    let n = arr.length;\n    if (n % 2 === 1)\
    \ {\n        return arr[n / 2];\n    } else {\n        let m = n / 2;\n      \
    \  return (arr[m - 1] + arr[m]) / 2;\n    }\n}\n", "    let sorted = l.sort();\n\
    \    let middle = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 ===\
    \ 0) {\n        return (sorted[middle] + sorted[middle - 1]) / 2;\n    }\n   \
    \ return sorted[middle];\n}\n", "    let sorted = l.sort();\n    let middle =\
    \ Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n       \
    \ return (sorted[middle] + sorted[middle - 1]) / 2;\n    }\n    return sorted[middle];\n\
    }\n", "    let sorted = l.sort();\n    let middle = Math.floor(sorted.length /\
    \ 2);\n    if (sorted.length % 2 === 1) {\n        return sorted[middle];\n  \
    \  } else {\n        return (sorted[middle] + sorted[middle - 1]) / 2;\n    }\n\
    }\n", "    let sorted = l.sort();\n    let middle = Math.floor(sorted.length /\
    \ 2);\n    if (sorted.length % 2 === 0) {\n        return (sorted[middle] + sorted[middle\
    \ - 1]) / 2;\n    }\n    return sorted[middle];\n}\n", "    let arr = l.sort((a,\
    \ b) => a - b);\n    let n = arr.length;\n    let mid = Math.floor(n / 2);\n \
    \   if (n % 2 === 0) {\n        return (arr[mid] + arr[mid - 1]) / 2;\n    }\n\
    \    return arr[mid];\n}\n", "    let n = l.length;\n    if (n === 0) {\n    \
    \    return NaN;\n    }\n    let m = Math.floor(n / 2);\n    let a = l[m - 1];\n\
    \    let b = l[m];\n    if (a === b) {\n        return a;\n    }\n    if (a >\
    \ b) {\n        a = b;\n        b = l[m];\n    }\n    return (a + b) / 2;\n}",
  "    let n = l.length;\n    if (n === 0) {\n        return NaN;\n    }\n    let\
    \ m = Math.floor(n / 2);\n    if (n % 2 === 1) {\n        return l[m];\n    }\n\
    \    let a = l[m - 1];\n    let b = l[m];\n    return (a + b) / 2;\n}\n", "  \
    \  let sorted = l.sort();\n    let middle = Math.floor(sorted.length / 2);\n \
    \   if (sorted.length % 2 === 0) {\n        return (sorted[middle] + sorted[middle\
    \ - 1]) / 2;\n    }\n    return sorted[middle];\n}\n", "    let sorted = l.sort();\n\
    \    let middle = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 ===\
    \ 1) {\n        return sorted[middle];\n    } else {\n        return (sorted[middle\
    \ - 1] + sorted[middle]) / 2;\n    }\n}\n", "    let arr = l.sort();\n    let\
    \ n = arr.length;\n    let mid = Math.floor(n / 2);\n    if (n % 2 === 0) {\n\
    \        return (arr[mid] + arr[mid - 1]) / 2;\n    }\n    return arr[mid];\n\
    }\n", "    let n = l.length;\n    if (n === 0) return NaN;\n    let m = Math.floor(n\
    \ / 2);\n    let a = l[m - 1];\n    let b = l[m];\n    if (n % 2 === 1) return\
    \ a;\n    return (a + b) / 2;\n}\n", "    let sorted = l.sort();\n    let middle\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 1) {\n     \
    \   return sorted[middle];\n    } else {\n        return (sorted[middle - 1] +\
    \ sorted[middle]) / 2;\n    }\n}\n", "    let n = l.length;\n    if (n === 0)\
    \ {\n        throw new Error(\"The list is empty\");\n    }\n    let arr = l.sort();\n\
    \    if (n % 2 === 0) {\n        return (arr[n / 2] + arr[n / 2 - 1]) / 2;\n \
    \   }\n    return arr[n / 2];\n}\n", "    let arr = l.sort();\n    let n = arr.length;\n\
    \    let mid = Math.floor(n / 2);\n    if (n % 2 === 0) {\n        return (arr[mid]\
    \ + arr[mid - 1]) / 2;\n    }\n    return arr[mid];\n}\n", "    let sorted = l.sort();\n\
    \    let middle = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 ===\
    \ 0) {\n        return (sorted[middle] + sorted[middle - 1]) / 2;\n    }\n   \
    \ return sorted[middle];\n}\n", "    let sorted = l.sort();\n    let middle =\
    \ Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 1) {\n       \
    \ return sorted[middle];\n    } else {\n        return (sorted[middle - 1] + sorted[middle])\
    \ / 2;\n    }\n}\n", "    let sorted = l.sort();\n    let middle = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 === 0) {\n        return (sorted[middle] +\
    \ sorted[middle - 1]) / 2;\n    } else {\n        return sorted[middle];\n   \
    \ }\n}\n", "    let n = l.length;\n    if (n === 0) {\n        return NaN;\n \
    \   }\n    let m = Math.floor(n / 2);\n    let i = 0;\n    let j = n - 1;\n  \
    \  let k = 0;\n    let x = 0;\n    while (i < m && j >= m) {\n        x = l[i]\
    \ + l[j];\n        if (x > 0) {\n            k = i;\n            i++;\n      \
    \  } else if (x < 0) {\n            k = j;\n            j--;\n        } else {\n\
    \            i++;\n            j--;\n        }\n    }\n    if (i === m) {\n  \
    \      return l[k];\n    } else if (j === m) {\n        return l[k];\n    } else\
    \ {\n        return (l[i] + l[j]) / 2;\n    }\n}\n", "    let arr = l.sort();\n\
    \    let mid = Math.floor(arr.length / 2);\n    if (arr.length % 2 === 0) {\n\
    \        return (arr[mid] + arr[mid - 1]) / 2;\n    }\n    return arr[mid];\n\
    }\n", "    let n = l.length;\n    if (n === 0) {\n        return NaN;\n    }\n\
    \    let m = Math.floor(n / 2);\n    let i = 0;\n    let j = n - 1;\n    let k\
    \ = 0;\n    let temp;\n    while (i <= j) {\n        if (l[i] < l[j]) {\n    \
    \        temp = l[i];\n            l[i] = l[j];\n            l[j] = temp;\n  \
    \          k = i;\n            i++;\n        } else if (l[i] > l[j]) {\n     \
    \       temp = l[j];\n            l[j] = l[i];\n            l[i] = temp;\n   \
    \         k = j;\n            j--;\n        } else {\n            i++;\n     \
    \       j--;\n        }\n    }\n    if (n % 2 === 1) {\n        return l[k];\n\
    \    } else {\n        return (l[k] + l[k + 1]) / 2.0;\n    }\n}", "    let sorted\
    \ = l.sort();\n    let middle = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[middle] + sorted[middle - 1]) / 2;\n  \
    \  }\n    return sorted[middle];\n}\n", "    let n = l.length;\n    if (n ===\
    \ 0) {\n        throw new Error(\"Median of empty array\");\n    }\n    let m\
    \ = Math.floor(n / 2);\n    let i = 0;\n    let j = n - 1;\n    let k = 0;\n \
    \   let x = 0;\n    while (i <= j) {\n        if (l[i] < l[j]) {\n           \
    \ x = l[i];\n            i++;\n        } else if (l[i] > l[j]) {\n           \
    \ x = l[j];\n            j--;\n        } else {\n            i++;\n          \
    \  j--;\n        }\n        k++;\n    }\n    if (k % 2 === 1) {\n        return\
    \ x;\n    } else {\n        return (x + l[i]) / 2;\n    }\n}\n", "    let n =\
    \ l.length;\n    if (n === 0) {\n        return NaN;\n    }\n    let m = Math.floor(n\
    \ / 2);\n    let i = 0;\n    let j = n - 1;\n    let k = 0;\n    let x = 0;\n\
    \    while (i < m && j >= m) {\n        x = l[i] + l[j];\n        if (x > 0) {\n\
    \            j--;\n        } else {\n            i++;\n        }\n    }\n    if\
    \ (j - i + 1 === m) {\n        return l[i];\n    } else if (j - i + 1 < m) {\n\
    \        return (l[i] + l[j]) / 2;\n    } else {\n        return l[m];\n    }\n\
    }\n", "    let sorted = l.sort();\n    let middle = Math.floor(sorted.length /\
    \ 2);\n    if (sorted.length % 2 === 1) {\n        return sorted[middle];\n  \
    \  } else {\n        return (sorted[middle] + sorted[middle - 1]) / 2;\n    }\n\
    }\n", "    let sorted = l.sort();\n    let middle = Math.floor(sorted.length /\
    \ 2);\n    if (sorted.length % 2 === 1) {\n        return sorted[middle];\n  \
    \  } else {\n        return (sorted[middle - 1] + sorted[middle]) / 2;\n    }\n\
    }\n", "    let n = l.length;\n    if (n === 0) {\n        return NaN;\n    }\n\
    \    let m = Math.floor(n / 2);\n    if (n % 2 === 1) {\n        return l[m];\n\
    \    }\n    let i = 0;\n    let j = n - 1;\n    while (i < m && j >= m) {\n  \
    \      let t = l[i];\n        l[i] = l[j];\n        l[j] = t;\n        i++;\n\
    \        j--;\n    }\n    return (l[m] + l[m - 1]) / 2;\n}\n", "    let sorted\
    \ = l.sort();\n    let middle = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 1) {\n        return sorted[middle];\n    } else {\n        return (sorted[middle\
    \ - 1] + sorted[middle]) / 2;\n    }\n}\n", "    let arr = l.sort();\n    let\
    \ mid = Math.floor(arr.length / 2);\n    if (arr.length % 2 === 1) {\n       \
    \ return arr[mid];\n    } else {\n        return (arr[mid] + arr[mid - 1]) / 2;\n\
    \    }\n}\n", "    let sorted = l.sort();\n    let middle = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 === 0) {\n        return (sorted[middle] +\
    \ sorted[middle - 1]) / 2;\n    }\n    return sorted[middle];\n}\n", "    let\
    \ n = l.length;\n    if (n === 0) {\n        throw new Error(\"median() expects\
    \ at least one element\");\n    }\n    let m = Math.floor(n / 2);\n    let i =\
    \ 0;\n    let j = n - 1;\n    let k = 0;\n    let t = 0;\n    let x = 0;\n   \
    \ let y = 0;\n    let z = 0;\n    while (i <= j) {\n        k = i + j;\n     \
    \   if (k === n - 1) {\n            k = 0;\n        }\n        if (k === i) {\n\
    \            x = l[i];\n            y = l[j];\n            z = l[k];\n       \
    \ } else if (k === j) {\n            x = l[i];\n            y = l[j];\n      \
    \      z = l[k];\n        } else {\n            x = l[i];\n            y = l[j];\n\
    \            z = l[k];\n        }\n        t = x + y + z;\n        if (t === 0)\
    \ {\n            return 0;\n        }\n        if (t > 0) {\n            if (x\
    \ > y && x > z) {\n                i++;\n            } else if (y > z) {\n   \
    \             j--;\n            } else {\n                k++;\n            }\n\
    \        } else {\n            if (x < y && x < z) {\n                i++;\n \
    \           } else if (y < z) {\n                j--;\n            } else {\n\
    \                k++;\n            }\n        }\n    }\n    return t / 2;\n}\n",
  "    let sorted = l.sort();\n    let middle = Math.floor(sorted.length / 2);\n \
    \   if (sorted.length % 2 === 1) {\n        return sorted[middle];\n    }\n  \
    \  return (sorted[middle - 1] + sorted[middle]) / 2;\n}\n", "    let sorted =\
    \ l.sort();\n    let middle = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 1) {\n        return sorted[middle];\n    } else {\n        return (sorted[middle\
    \ - 1] + sorted[middle]) / 2;\n    }\n}\n", "    let sorted = l.sort();\n    let\
    \ middle = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 1) {\n\
    \        return sorted[middle];\n    } else {\n        return (sorted[middle -\
    \ 1] + sorted[middle]) / 2;\n    }\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
