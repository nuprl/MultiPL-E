name: HumanEval_128_prod_signs
language: ts
prompt: "//You are given an array arr of integers and you need to return\n// sum of\
  \ magnitudes of integers multiplied by product of all signs\n// of each number in\
  \ the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n\
  // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
  // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]): number\
  \ | undefined {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2,\
  \ -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
  \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
  \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
  \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
  \ 1, 1, 0]),0);\n}\n\ntest();"
completions: ["  if (arr.length === 0) {\n    return undefined;\n  }\n\n  let sign\
    \ = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]\
    \ > 0) {\n      sum += arr[i];\n    } else if (arr[i] < 0) {\n      sum -= arr[i];\n\
    \    } else {\n      sum += arr[i];\n    }\n    sign *= arr[i];\n  }\n\n  return\
    \ sign * sum;\n}\n\nmodule.exports = prod_signs;\n", "  if (arr.length === 0)\
    \ {\n    return undefined;\n  }\n\n  let sign = 1;\n  let sum = 0;\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n\
    \    } else if (arr[i] < 0) {\n      sum -= arr[i];\n    }\n    sign *= arr[i];\n\
    \  }\n\n  return sign * sum;\n}\n\nmodule.exports = prod_signs;\n", "  if (arr.length\
    \ === 0) {\n    return undefined;\n  }\n  let result = 1;\n  for (let i = 0; i\
    \ < arr.length; i++) {\n    result *= (arr[i] > 0 ? 1 : -1);\n  }\n  return result;\n\
    }\n", "  let sign = 1\n  let prod = 1\n  for (let i = 0; i < arr.length; i++)\
    \ {\n    if (arr[i] > 0) {\n      prod *= arr[i]\n    } else if (arr[i] < 0) {\n\
    \      prod *= arr[i]\n      sign *= -1\n    }\n  }\n  return sign * prod\n}\n",
  "  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 0)\
    \ {\n      return undefined;\n    }\n    prod *= arr[i] > 0 ? 1 : -1;\n  }\n \
    \ return prod;\n}\n", "  if (arr.length === 0) {\n    return undefined;\n  }\n\
    \n  let sign = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n\
    \    if (arr[i] > 0) {\n      sum += arr[i] * sign;\n    } else if (arr[i] < 0)\
    \ {\n      sum -= arr[i] * sign;\n    }\n    sign *= arr[i];\n  }\n\n  return\
    \ sum;\n}\n\nexport { prod_signs };\n", "  if (arr.length === 0) {\n    return\
    \ undefined;\n  }\n\n  let result = 1;\n  for (let i = 0; i < arr.length; i++)\
    \ {\n    result *= arr[i] > 0 ? 1 : -1;\n  }\n\n  return result;\n}\n\nexport\
    \ { prod_signs };\n", "  let sign = 1;\n  let prod = 1;\n  for (let i = 0; i <\
    \ arr.length; i++) {\n    if (arr[i] === 0) {\n      return undefined;\n    }\n\
    \    if (arr[i] > 0) {\n      sign = 1;\n    } else if (arr[i] < 0) {\n      sign\
    \ = -1;\n    }\n    prod *= sign;\n  }\n  return prod;\n}\n", "  if (arr.length\
    \ === 0) {\n    return undefined;\n  }\n\n  let sign = 1;\n  let result = 0;\n\
    \  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 0) {\n      continue;\n\
    \    }\n\n    if (arr[i] > 0) {\n      sign = 1;\n    } else if (arr[i] < 0) {\n\
    \      sign = -1;\n    }\n\n    result += sign * Math.abs(arr[i]);\n  }\n\n  return\
    \ result;\n}\n\nmodule.exports = prod_signs;\n", "  if (arr.length === 0) {\n\
    \    return undefined;\n  }\n\n  let sign = 1;\n  let prod = 1;\n  for (let i\
    \ = 0; i < arr.length; i++) {\n    if (arr[i] === 0) {\n      continue;\n    }\n\
    \n    if (arr[i] > 0) {\n      sign = 1;\n    } else if (arr[i] < 0) {\n     \
    \ sign = -1;\n    }\n\n    prod *= sign;\n  }\n\n  return prod;\n}\n\nexport {\
    \ prod_signs };\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
