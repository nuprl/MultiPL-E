{
  "name": "HumanEval_125_split_words",
  "language": "ts",
  "prompt": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = txt.split(/\\s+/);\n    let res = [];\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            res.push(arr[i]);\n        }\n    }\n    for (let i = 0; i < res.length; i++) {\n        let count = 0;\n        for (let j = 0; j < res[i].length; j++) {\n            if (res[i][j] >= 'a' && res[i][j] <= 'z') {\n                count++;\n            }\n        }\n        if (count % 2 === 1) {\n            count = count - 1;\n        }\n        res[i] = count;\n    }\n    return res;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmp1qbtmwj5.js:37:12)\n    at Object.<anonymous> (/tmp/tmp1qbtmwj5.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 4 ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = txt.split(/\\s+/);\n    let res = [];\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            res.push(arr[i]);\n        }\n    }\n    return res;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmp9f1h92ap.js:26:12)\n    at Object.<anonymous> (/tmp/tmp9f1h92ap.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = txt.split(/\\s+/);\n    let count = 0;\n    let res = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            res.push(arr[i]);\n        }\n    }\n    for (let i = 0; i < res.length; i++) {\n        let count = 0;\n        for (let j = 0; j < res[i].length; j++) {\n            if (res[i][j] >= 'a' && res[i][j] <= 'z') {\n                count++;\n            }\n        }\n        if (count % 2 === 1) {\n            count = count + 1;\n        }\n        if (count > 0) {\n            res[i] = count;\n        }\n    }\n    return res;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  6\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpsrtborof.js:39:12)\n    at Object.<anonymous> (/tmp/tmpsrtborof.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 6 ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = txt.split(/\\s+/);\n    let count = 0;\n    let res = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            res.push(arr[i]);\n            count += arr[i].length;\n        }\n    }\n    let count_lower = 0;\n    let count_upper = 0;\n    let count_lower_odd = 0;\n    let count_upper_odd = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            let c = arr[i].charCodeAt(0);\n            if (c >= 65 && c <= 90) {\n                count_lower += arr[i].length;\n            } else if (c >= 97 && c <= 122) {\n                count_upper += arr[i].length;\n            } else if (c >= 48 && c <= 57) {\n                count_lower_odd += arr[i].length;\n            } else if (c >= 65 && c <= 90) {\n                count_upper_odd += arr[i].length;\n            }\n        }\n    }\n    return res.length === 0 ? count : res;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmp1asy6kjo.js:48:12)\n    at Object.<anonymous> (/tmp/tmp1asy6kjo.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = txt.split(/\\s+/);\n    let arr2 = [];\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            arr2.push(arr[i]);\n            count += arr[i].length;\n        }\n    }\n    let count2 = 0;\n    for (let i = 0; i < arr2.length; i++) {\n        if (arr2[i].length > 0) {\n            count2 += arr2[i].length;\n        }\n    }\n    let count3 = 0;\n    for (let i = 0; i < arr2.length; i++) {\n        if (arr2[i].length > 0) {\n            count3 += arr2[i].length;\n        }\n    }\n    let count4 = 0;\n    for (let i = 0; i < arr2.length; i++) {\n        if (arr2[i].length > 0) {\n            count4 += arr2[i].length;\n        }\n    }\n    return arr2;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmp_7241np6.js:45:12)\n    at Object.<anonymous> (/tmp/tmp_7241np6.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = [];\n    let count = 0;\n    let i = 0;\n    let j = 0;\n    let count_comma = 0;\n    let count_letter = 0;\n    let count_letter_odd = 0;\n    let count_letter_even = 0;\n    let count_letter_odd_comma = 0;\n    let count_letter_even_comma = 0;\n    let count_letter_odd_comma_comma = 0;\n    let count_letter_even_comma_comma = 0;\n    let count_letter_odd_comma_comma_comma = 0;\n    let count_letter_even_comma_comma_comma = 0;\n    let count_letter_odd_comma_comma_comma_comma = 0;\n    let count_letter_even_comma_comma_comma_comma = 0;\n    let count_letter_odd_comma_comma_comma_comma_comma = 0;\n    let count_letter_even_comma_comma_comma_comma_comma = 0;\n    let count_letter_odd_comma_comma_comma_comma_comma_comma = 0;\n    let count_letter_even_comma_comma_comma_comma_comma_comma = 0;\n    let count_letter_odd_comma_comma_comma_comma_comma_comma_comma = 0;\n    let count_letter_even_comma_comma_comma_comma_comma_comma_comma = 0;\n    let count_letter_odd_comma_comma_comma_comma_comma_comma_comma_comma = 0;\n    let count_letter_even_comma_comma_comma_comma_comma_comma_comma_comma = 0;\n    let count_letter_odd_comma_comma_comma_comma_comma_comma_comma_comma_comma = 0;\n    let count_letter_even_comma_comma_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "../../../../../../tmp/tmpd20a6xdp.ts(54,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = [];\n    let arr2 = [];\n    let arr3 = [];\n    let arr4 = [];\n    let arr5 = [];\n    let arr6 = [];\n    let arr7 = [];\n    let arr8 = [];\n    let arr9 = [];\n    let arr10 = [];\n    let arr11 = [];\n    let arr12 = [];\n    let arr13 = [];\n    let arr14 = [];\n    let arr15 = [];\n    let arr16 = [];\n    let arr17 = [];\n    let arr18 = [];\n    let arr19 = [];\n    let arr20 = [];\n    let arr21 = [];\n    let arr22 = [];\n    let arr23 = [];\n    let arr24 = [];\n    let arr25 = [];\n    let arr26 = [];\n    let arr27 = [];\n    let arr28 = [];\n    let arr29 = [];\n    let arr30 = [];\n    let arr31 = [];\n    let arr32 = [];\n    let arr33 = [];\n    let arr34 = [];\n    let arr35 = [];\n    let arr36 = [];\n    let arr37 = [];\n    let arr38 = [];\n    let arr39 = [];\n    let arr40 = [];\n    let arr41 = [];\n    let arr42 = [];\n    let arr43 = [];\n    let arr44 = [];\n    let arr45 = [];\n    let arr46 = [];\n    let arr47 = [];\n    let arr48 = [];\n    let arr49 = [];\n    let arr50 = [];\n    let arr51 = [];\n    let arr52 = [];\n    let arr53 = [];\n    let arr54 = [];\n    let arr55 = [];\n    let arr56 = [];\n    let arr57 = [];\n    let arr58 = [];\n    let arr59 = [];\n    let arr60 = [];\n    let arr61 = [];\n    let arr62 = [];\n    let arr63 = [];\n    let arr64 = [];\n    let arr65 = [];\n    let arr66 = [];\n    let arr67 = [];\n    let arr68 = [];\n    let arr69 = [];\n    let arr70 = [];\n    let arr71 = [];\n    let arr72 = [];\n    let arr73 = [];\n    let\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "../../../../../../tmp/tmpo93cd4ui.ts(86,9): error TS1005: ',' expected.\n../../../../../../tmp/tmpo93cd4ui.ts(102,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n  return txt.split(/\\s+/);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpzy4one0w.js:18:12)\n    at Object.<anonymous> (/tmp/tmpzy4one0w.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    return txt.split(/\\s+/);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmprflk7f4i.js:18:12)\n    at Object.<anonymous> (/tmp/tmprflk7f4i.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = txt.split(/\\s+/);\n    let count = 0;\n    let res = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            res.push(arr[i]);\n            count += arr[i].length;\n        }\n    }\n    let count2 = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            count2 += arr[i].length;\n        }\n    }\n    if (count2 % 2 === 0) {\n        return res;\n    }\n    let count3 = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            count3 += arr[i].length;\n        }\n    }\n    let count4 = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            count4 += arr[i].length;\n        }\n    }\n    if (count4 % 2 === 0) {\n        return res;\n    }\n    let count5 = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            count5 += arr[i].length;\n        }\n    }\n    if (count5 % 2 === 0) {\n        return res;\n    }\n    let count6 = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            count6 += arr[i].length;\n        }\n    }\n    if (count6 % 2 === 0) {\n        return res;\n    }\n    let count7 = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            count7 += arr[i].length;\n        }\n    }\n    if (count7 % 2 === 0)\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "../../../../../../tmp/tmpz8qztnob.ts(86,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = [];\n    let count = 0;\n    let i = 0;\n    let len = txt.length;\n    let ch = '';\n    while (i < len) {\n        ch = txt[i];\n        if (ch === ' ') {\n            if (arr.length > 0) {\n                arr.push(ch);\n            }\n        } else if (ch === ',') {\n            arr.push(ch);\n        } else if (ch === '.') {\n            arr.push(ch);\n        } else if (ch === '!') {\n            arr.push(ch);\n        } else if (ch === '?') {\n            arr.push(ch);\n        } else if (ch === '-') {\n            arr.push(ch);\n        } else if (ch === '_') {\n            arr.push(ch);\n        } else if (ch === '(') {\n            arr.push(ch);\n        } else if (ch === ')') {\n            arr.push(ch);\n        } else if (ch === '{') {\n            arr.push(ch);\n        } else if (ch === '}') {\n            arr.push(ch);\n        } else if (ch === ':') {\n            arr.push(ch);\n        } else if (ch === ';') {\n            arr.push(ch);\n        } else if (ch === '#') {\n            arr.push(ch);\n        } else if (ch === '$') {\n            arr.push(ch);\n        } else if (ch === '%') {\n            arr.push(ch);\n        } else if (ch === '@') {\n            arr.push(ch);\n        } else if (ch === '^') {\n            arr.push(ch);\n        } else if (ch === '&') {\n            arr.push(ch);\n        } else if (ch === '*') {\n            arr.push(ch);\n        } else if (ch === '+') {\n            arr.push(ch);\n        } else if (ch === '=') {\n            arr.push(ch);\n        } else if (\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "../../../../../../tmp/tmpe0d8h48s.ts(66,9): error TS1005: ')' expected.\n../../../../../../tmp/tmpe0d8h48s.ts(82,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n  let words = txt.split(/\\s+/);\n  let count = 0;\n  let result = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > 0) {\n      result.push(words[i]);\n      count += words[i].length;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpfsyzytlg.js:27:12)\n    at Object.<anonymous> (/tmp/tmpfsyzytlg.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    return txt.split(/\\s+/);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmprflk7f4i.js:18:12)\n    at Object.<anonymous> (/tmp/tmprflk7f4i.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = [];\n    let count = 0;\n    let i = 0;\n    let len = txt.length;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293097,
      "stdout": "../../../../../../tmp/tmpv_cm5498.ts(101,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let words = txt.split(/\\s+/);\n    let count = 0;\n    let count2 = 0;\n    let result = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > 0) {\n            result.push(words[i]);\n            count++;\n        }\n    }\n    for (let i = 0; i < result.length; i++) {\n        if (result[i].length > 0) {\n            count2++;\n        }\n    }\n    if (count2 % 2 === 1) {\n        return result;\n    }\n    let count3 = 0;\n    for (let i = 0; i < result.length; i++) {\n        if (result[i].length > 0) {\n            count3++;\n        }\n    }\n    let count4 = 0;\n    for (let i = 0; i < result.length; i++) {\n        if (result[i].length > 0) {\n            count4++;\n        }\n    }\n    if (count4 % 2 === 1) {\n        return result;\n    }\n    let count5 = 0;\n    for (let i = 0; i < result.length; i++) {\n        if (result[i].length > 0) {\n            count5++;\n        }\n    }\n    if (count5 % 2 === 1) {\n        return result;\n    }\n    let count6 = 0;\n    for (let i = 0; i < result.length; i++) {\n        if (result[i].length > 0) {\n            count6++;\n        }\n    }\n    if (count6 % 2 === 1) {\n        return result;\n    }\n    let count7 = 0;\n    for (let i = 0; i < result.length; i++) {\n        if (result[i].length > 0) {\n            count7++;\n        }\n    }\n    if (count7 % 2 === 1) {\n        return result;\n    }\n    let count8 = 0;\n    for (let i = 0; i < result.length; i++) {\n        if (result[i\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "../../../../../../tmp/tmp2eyilz4g.ts(75,1): error TS1005: ']' expected.\n../../../../../../tmp/tmp2eyilz4g.ts(91,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n  return txt.split(/\\s+/);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpzy4one0w.js:18:12)\n    at Object.<anonymous> (/tmp/tmpzy4one0w.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let words = txt.split(/\\s+/);\n    let lowerCase = [];\n    let oddLetters = [];\n    let count = 0;\n    for (let word of words) {\n        if (word.length > 0) {\n            let lower = word.toLowerCase();\n            lowerCase.push(lower);\n            let count = 0;\n            for (let i = 0; i < lower.length; i++) {\n                if (lower[i] === lower[i].toUpperCase()) {\n                    count++;\n                }\n            }\n            if (count % 2 === 1) {\n                oddLetters.push(word);\n            }\n        }\n    }\n    return oddLetters.length === 0 ? lowerCase : oddLetters;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpsypxybbi.js:36:12)\n    at Object.<anonymous> (/tmp/tmpsypxybbi.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    return txt.split(/\\s+/);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmp5i7lnsyi.js:18:12)\n    at Object.<anonymous> (/tmp/tmp5i7lnsyi.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let words = txt.split(/\\s+/);\n    let lowerCase = [];\n    let upperCase = [];\n    let num = 0;\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length === 1) {\n            if (words[i].toLowerCase() === words[i]) {\n                lowerCase.push(words[i]);\n            } else {\n                upperCase.push(words[i]);\n            }\n        } else {\n            num += words[i].length;\n        }\n    }\n    return lowerCase.concat(upperCase).concat(num);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  11\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmp18muzjy6.js:34:12)\n    at Object.<anonymous> (/tmp/tmp18muzjy6.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 11 ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = [];\n    let i = 0;\n    let j = 0;\n    let count = 0;\n    let count2 = 0;\n    let count3 = 0;\n    let count4 = 0;\n    let count5 = 0;\n    let count6 = 0;\n    let count7 = 0;\n    let count8 = 0;\n    let count9 = 0;\n    let count10 = 0;\n    let count11 = 0;\n    let count12 = 0;\n    let count13 = 0;\n    let count14 = 0;\n    let count15 = 0;\n    let count16 = 0;\n    let count17 = 0;\n    let count18 = 0;\n    let count19 = 0;\n    let count20 = 0;\n    let count21 = 0;\n    let count22 = 0;\n    let count23 = 0;\n    let count24 = 0;\n    let count25 = 0;\n    let count26 = 0;\n    let count27 = 0;\n    let count28 = 0;\n    let count29 = 0;\n    let count30 = 0;\n    let count31 = 0;\n    let count32 = 0;\n    let count33 = 0;\n    let count34 = 0;\n    let count35 = 0;\n    let count36 = 0;\n    let count37 = 0;\n    let count38 = 0;\n    let count39 = 0;\n    let count40 = 0;\n    let count41 = 0;\n    let count42 = 0;\n    let count43 = 0;\n    let count44 = 0;\n    let count45 = 0;\n    let count46 = 0;\n    let count47 = 0;\n    let count48 = 0;\n    let count49 = 0;\n    let count50 = 0;\n    let count51 = 0;\n    let count52 = 0;\n    let count53 = 0;\n    let count54 = 0;\n    let count55 = 0;\n    let count56 = 0;\n    let count57 = 0;\n    let count58 = 0;\n    let count59 = 0;\n    let count60 = 0;\n    let count61 = 0;\n    let count62 =\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "../../../../../../tmp/tmpv0z1rlr9.ts(77,9): error TS1005: ',' expected.\n../../../../../../tmp/tmpv0z1rlr9.ts(93,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let words = txt.split(/\\s+/);\n    let count = 0;\n    let letters = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n        let lower = word.toLowerCase();\n        let count = 0;\n        for (let j = 0; j < word.length; j++) {\n            let letter = word[j];\n            if (letter === ',') {\n                count++;\n            }\n            else if (letter === ' ') {\n                count = 0;\n            }\n            else {\n                count++;\n            }\n        }\n        if (count % 2 === 1) {\n            letters.push(lower);\n        }\n    }\n    return letters;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hello'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpcy2cs13j.js:40:12)\n    at Object.<anonymous> (/tmp/tmpcy2cs13j.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hello' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = [];\n    let count = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "../../../../../../tmp/tmpr_ndbdk4.ts(86,9): error TS1005: ',' expected.\n../../../../../../tmp/tmpr_ndbdk4.ts(102,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = [];\n    let count = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "../../../../../../tmp/tmpr_ndbdk4.ts(86,9): error TS1005: ',' expected.\n../../../../../../tmp/tmpr_ndbdk4.ts(102,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n  return txt.split(/\\s+/);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpzy4one0w.js:18:12)\n    at Object.<anonymous> (/tmp/tmpzy4one0w.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = [];\n    let i = 0;\n    let j = 0;\n    let count = 0;\n    let count2 = 0;\n    let count3 = 0;\n    let count4 = 0;\n    let count5 = 0;\n    let count6 = 0;\n    let count7 = 0;\n    let count8 = 0;\n    let count9 = 0;\n    let count10 = 0;\n    let count11 = 0;\n    let count12 = 0;\n    let count13 = 0;\n    let count14 = 0;\n    let count15 = 0;\n    let count16 = 0;\n    let count17 = 0;\n    let count18 = 0;\n    let count19 = 0;\n    let count20 = 0;\n    let count21 = 0;\n    let count22 = 0;\n    let count23 = 0;\n    let count24 = 0;\n    let count25 = 0;\n    let count26 = 0;\n    let count27 = 0;\n    let count28 = 0;\n    let count29 = 0;\n    let count30 = 0;\n    let count31 = 0;\n    let count32 = 0;\n    let count33 = 0;\n    let count34 = 0;\n    let count35 = 0;\n    let count36 = 0;\n    let count37 = 0;\n    let count38 = 0;\n    let count39 = 0;\n    let count40 = 0;\n    let count41 = 0;\n    let count42 = 0;\n    let count43 = 0;\n    let count44 = 0;\n    let count45 = 0;\n    let count46 = 0;\n    let count47 = 0;\n    let count48 = 0;\n    let count49 = 0;\n    let count50 = 0;\n    let count51 = 0;\n    let count52 = 0;\n    let count53 = 0;\n    let count54 = 0;\n    let count55 = 0;\n    let count56 = 0;\n    let count57 = 0;\n    let count58 = 0;\n    let count59 = 0;\n    let count60 = 0;\n    let count61 = 0;\n    let count62 =\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "../../../../../../tmp/tmpv0z1rlr9.ts(77,9): error TS1005: ',' expected.\n../../../../../../tmp/tmpv0z1rlr9.ts(93,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    return txt.split(/\\s+/);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmprflk7f4i.js:18:12)\n    at Object.<anonymous> (/tmp/tmprflk7f4i.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n  // split on whitespace\n  const words = txt.split(/\\s+/);\n  // split on commas\n  const commas = txt.split(/,+/);\n  // split on lower case letters\n  const lower = txt.split(/[a-z]+/);\n  // count the number of lower case letters with odd order\n  const odd = lower.filter(x => x.length % 2 === 1).length;\n  // return the words, commas, lower case letters, and odd count\n  return [...words, ...commas, ...lower, odd];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "../../../../../../tmp/tmpkicvhmni.ts(21,3): error TS2322: Type '(string | number)[]' is not assignable to type 'number | string[]'.\n  Type '(string | number)[]' is not assignable to type 'string[]'.\n    Type 'string | number' is not assignable to type 'string'.\n      Type 'number' is not assignable to type 'string'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = [];\n    let count = 0;\n    let i = 0;\n    let len = txt.length;\n    let ch;\n    while (i < len) {\n        ch = txt[i];\n        if (ch === ' ') {\n            if (arr.length > 0) {\n                arr.push(txt.substring(0, i));\n                count = 0;\n            }\n            i++;\n        } else if (ch === ',') {\n            if (arr.length > 0) {\n                arr.push(txt.substring(0, i));\n                count = 0;\n            }\n            i++;\n        } else if (ch === '.') {\n            if (arr.length > 0) {\n                arr.push(txt.substring(0, i));\n                count = 0;\n            }\n            i++;\n        } else if (ch === '!') {\n            if (arr.length > 0) {\n                arr.push(txt.substring(0, i));\n                count = 0;\n            }\n            i++;\n        } else if (ch === '?') {\n            if (arr.length > 0) {\n                arr.push(txt.substring(0, i));\n                count = 0;\n            }\n            i++;\n        } else if (ch === ';') {\n            if (arr.length > 0) {\n                arr.push(txt.substring(0, i));\n                count = 0;\n            }\n            i++;\n        } else if (ch === ':') {\n            if (arr.length > 0) {\n                arr.push(txt.substring(0, i));\n                count = 0;\n            }\n            i++;\n        } else if (ch === '\\n') {\n            if (arr.length > 0) {\n                arr.push(txt.substring(0, i));\n                count = 0;\n            }\n            i++;\n        } else if (ch === '\\r') {\n            if (arr.length > 0) {\n                arr.push(txt.substring(0, i));\n                count = 0;\n            }\n            i++;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "../../../../../../tmp/tmpfqr31sim.ts(90,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let words = txt.split(/\\s+/);\n    let lowercase = [];\n    let lowercase_odd = [];\n    let lowercase_even = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n        let lowercase_count = 0;\n        let lowercase_odd_count = 0;\n        let lowercase_even_count = 0;\n        for (let j = 0; j < word.length; j++) {\n            let letter = word[j];\n            if (letter === ',') {\n                lowercase_count++;\n                lowercase_odd_count++;\n                lowercase_even_count++;\n            } else if (letter === ' ') {\n                lowercase_count++;\n                lowercase_odd_count++;\n                lowercase_even_count++;\n            } else {\n                lowercase_odd_count++;\n                lowercase_even_count++;\n            }\n        }\n        if (lowercase_count % 2 === 0) {\n            lowercase_even.push(word);\n        } else {\n            lowercase_odd.push(word);\n        }\n    }\n    return lowercase_odd.concat(lowercase_even);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpxrxiazg1.js:51:12)\n    at Object.<anonymous> (/tmp/tmpxrxiazg1.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = [];\n    let count = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "../../../../../../tmp/tmpr_ndbdk4.ts(86,9): error TS1005: ',' expected.\n../../../../../../tmp/tmpr_ndbdk4.ts(102,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n  return txt.split(/\\s+/);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpzy4one0w.js:18:12)\n    at Object.<anonymous> (/tmp/tmpzy4one0w.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = [];\n    let count = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "../../../../../../tmp/tmpr_ndbdk4.ts(86,9): error TS1005: ',' expected.\n../../../../../../tmp/tmpr_ndbdk4.ts(102,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    return txt.split(/\\s+/);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmp5i7lnsyi.js:18:12)\n    at Object.<anonymous> (/tmp/tmp5i7lnsyi.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = [];\n    let count = 0;\n    let count2 = 0;\n    let count3 = 0;\n    let count4 = 0;\n    let count5 = 0;\n    let count6 = 0;\n    let count7 = 0;\n    let count8 = 0;\n    let count9 = 0;\n    let count10 = 0;\n    let count11 = 0;\n    let count12 = 0;\n    let count13 = 0;\n    let count14 = 0;\n    let count15 = 0;\n    let count16 = 0;\n    let count17 = 0;\n    let count18 = 0;\n    let count19 = 0;\n    let count20 = 0;\n    let count21 = 0;\n    let count22 = 0;\n    let count23 = 0;\n    let count24 = 0;\n    let count25 = 0;\n    let count26 = 0;\n    let count27 = 0;\n    let count28 = 0;\n    let count29 = 0;\n    let count30 = 0;\n    let count31 = 0;\n    let count32 = 0;\n    let count33 = 0;\n    let count34 = 0;\n    let count35 = 0;\n    let count36 = 0;\n    let count37 = 0;\n    let count38 = 0;\n    let count39 = 0;\n    let count40 = 0;\n    let count41 = 0;\n    let count42 = 0;\n    let count43 = 0;\n    let count44 = 0;\n    let count45 = 0;\n    let count46 = 0;\n    let count47 = 0;\n    let count48 = 0;\n    let count49 = 0;\n    let count50 = 0;\n    let count51 = 0;\n    let count52 = 0;\n    let count53 = 0;\n    let count54 = 0;\n    let count55 = 0;\n    let count56 = 0;\n    let count57 = 0;\n    let count58 = 0;\n    let count59 = 0;\n    let count60 = 0;\n    let count61 = 0;\n    let count62 = 0;\n    let count63 = 0;\n    let count\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293100,
      "stdout": "../../../../../../tmp/tmpwd1qi8hk.ts(93,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let words = txt.split(/\\s+/);\n    let count = 0;\n    let result = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > 0) {\n            result.push(words[i]);\n            count += words[i].length;\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmp055w9rnd.js:27:12)\n    at Object.<anonymous> (/tmp/tmp055w9rnd.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n  let arr = txt.split(/\\s+/);\n  let res = [];\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i].length > 0) {\n      res.push(arr[i]);\n    }\n  }\n  return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpn2w501oq.js:26:12)\n    at Object.<anonymous> (/tmp/tmpn2w501oq.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let res = [];\n    let res2 = [];\n    let count = 0;\n    let count2 = 0;\n    let count3 = 0;\n    let count4 = 0;\n    let count5 = 0;\n    let count6 = 0;\n    let count7 = 0;\n    let count8 = 0;\n    let count9 = 0;\n    let count10 = 0;\n    let count11 = 0;\n    let count12 = 0;\n    let count13 = 0;\n    let count14 = 0;\n    let count15 = 0;\n    let count16 = 0;\n    let count17 = 0;\n    let count18 = 0;\n    let count19 = 0;\n    let count20 = 0;\n    let count21 = 0;\n    let count22 = 0;\n    let count23 = 0;\n    let count24 = 0;\n    let count25 = 0;\n    let count26 = 0;\n    let count27 = 0;\n    let count28 = 0;\n    let count29 = 0;\n    let count30 = 0;\n    let count31 = 0;\n    let count32 = 0;\n    let count33 = 0;\n    let count34 = 0;\n    let count35 = 0;\n    let count36 = 0;\n    let count37 = 0;\n    let count38 = 0;\n    let count39 = 0;\n    let count40 = 0;\n    let count41 = 0;\n    let count42 = 0;\n    let count43 = 0;\n    let count44 = 0;\n    let count45 = 0;\n    let count46 = 0;\n    let count47 = 0;\n    let count48 = 0;\n    let count49 = 0;\n    let count50 = 0;\n    let count51 = 0;\n    let count52 = 0;\n    let count53 = 0;\n    let count54 = 0;\n    let count55 = 0;\n    let count56 = 0;\n    let count57 = 0;\n    let count58 = 0;\n    let count59 = 0;\n    let count60 = 0;\n    let count61 = 0;\n    let count62 = 0;\n    let count63\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293100,
      "stdout": "../../../../../../tmp/tmprkys4tx0.ts(93,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let words = txt.split(/\\s+/);\n    let count = 0;\n    let result = [];\n    for (let word of words) {\n        if (word.length > 0) {\n            result.push(word);\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmp14pvke7p.js:26:12)\n    at Object.<anonymous> (/tmp/tmp14pvke7p.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = txt.split(/\\s+/);\n    let arr2 = [];\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            arr2.push(arr[i]);\n        }\n    }\n    return arr2;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmp4cnhokgb.js:26:12)\n    at Object.<anonymous> (/tmp/tmp4cnhokgb.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n  return txt.split(/\\s+/);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpzy4one0w.js:18:12)\n    at Object.<anonymous> (/tmp/tmpzy4one0w.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let words = txt.split(/\\s+/);\n    let lowerCase = [];\n    let lowerCaseCount = 0;\n    let upperCase = [];\n    let upperCaseCount = 0;\n    let lowerCaseCountOdd = 0;\n    let upperCaseCountOdd = 0;\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].toLowerCase() === words[i]) {\n            lowerCase.push(words[i]);\n            lowerCaseCount++;\n        } else {\n            upperCase.push(words[i]);\n            upperCaseCount++;\n        }\n        if (lowerCaseCount % 2 === 1) {\n            lowerCaseCountOdd++;\n        }\n        if (upperCaseCount % 2 === 1) {\n            upperCaseCountOdd++;\n        }\n    }\n    if (lowerCaseCountOdd === 0) {\n        if (lowerCaseCount === 0) {\n            return upperCase.length;\n        } else {\n            return [...upperCase, ...lowerCase];\n        }\n    } else {\n        if (lowerCaseCount === 0) {\n            return lowerCase.length;\n        } else {\n            return [...lowerCase, ...upperCase];\n        }\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'world!',\n  'Hello'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpey8btq8s.js:55:12)\n    at Object.<anonymous> (/tmp/tmpey8btq8s.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'world!', 'Hello' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    return txt.split(/\\s+/);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmprflk7f4i.js:18:12)\n    at Object.<anonymous> (/tmp/tmprflk7f4i.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let words = txt.split(/\\s+/);\n    let result = [];\n    let count = 0;\n    let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    for (let word of words) {\n        let count = 0;\n        for (let letter of word) {\n            if (letter === ',') {\n                count++;\n            }\n        }\n        if (count % 2 === 1) {\n            result.push(word);\n        }\n    }\n    return result.length === 0 ? alphabet.charCodeAt(0) : result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n97\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmph47hk8eb.js:32:12)\n    at Object.<anonymous> (/tmp/tmph47hk8eb.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 97,\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let words = txt.split(/\\s+/);\n    let count = 0;\n    let result = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > 0) {\n            result.push(words[i]);\n            count += words[i].length;\n        }\n    }\n    let count2 = 0;\n    for (let i = 0; i < result.length; i++) {\n        if (result[i].length > 0) {\n            count2 += result[i].length;\n        }\n    }\n    return result.length > 0 ? result : count2;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmphdvq8zoe.js:33:12)\n    at Object.<anonymous> (/tmp/tmphdvq8zoe.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = [];\n    let count = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "../../../../../../tmp/tmpr_ndbdk4.ts(86,9): error TS1005: ',' expected.\n../../../../../../tmp/tmpr_ndbdk4.ts(102,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = [];\n    let count = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "../../../../../../tmp/tmpr_ndbdk4.ts(86,9): error TS1005: ',' expected.\n../../../../../../tmp/tmpr_ndbdk4.ts(102,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = txt.split(/\\s+/);\n    let count = 0;\n    let count2 = 0;\n    let count3 = 0;\n    let count4 = 0;\n    let count5 = 0;\n    let count6 = 0;\n    let count7 = 0;\n    let count8 = 0;\n    let count9 = 0;\n    let count10 = 0;\n    let count11 = 0;\n    let count12 = 0;\n    let count13 = 0;\n    let count14 = 0;\n    let count15 = 0;\n    let count16 = 0;\n    let count17 = 0;\n    let count18 = 0;\n    let count19 = 0;\n    let count20 = 0;\n    let count21 = 0;\n    let count22 = 0;\n    let count23 = 0;\n    let count24 = 0;\n    let count25 = 0;\n    let count26 = 0;\n    let count27 = 0;\n    let count28 = 0;\n    let count29 = 0;\n    let count30 = 0;\n    let count31 = 0;\n    let count32 = 0;\n    let count33 = 0;\n    let count34 = 0;\n    let count35 = 0;\n    let count36 = 0;\n    let count37 = 0;\n    let count38 = 0;\n    let count39 = 0;\n    let count40 = 0;\n    let count41 = 0;\n    let count42 = 0;\n    let count43 = 0;\n    let count44 = 0;\n    let count45 = 0;\n    let count46 = 0;\n    let count47 = 0;\n    let count48 = 0;\n    let count49 = 0;\n    let count50 = 0;\n    let count51 = 0;\n    let count52 = 0;\n    let count53 = 0;\n    let count54 = 0;\n    let count55 = 0;\n    let count56 = 0;\n    let count57 = 0;\n    let count58 = 0;\n    let count59 = 0;\n    let count60 = 0;\n    let count61 = 0;\n    let count62 = 0;\n    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293100,
      "stdout": "../../../../../../tmp/tmpgvuatjh1.ts(92,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = txt.split(/\\s+/);\n    let count = 0;\n    let res = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            res.push(arr[i]);\n            count += arr[i].length;\n        }\n    }\n    let count_lower = 0;\n    let count_upper = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            if (arr[i].toLowerCase() === arr[i]) {\n                count_lower += arr[i].length;\n            } else {\n                count_upper += arr[i].length;\n            }\n        }\n    }\n    if (count_lower % 2 === 1) {\n        return res;\n    } else if (count_upper % 2 === 1) {\n        return res;\n    } else {\n        return count;\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n12\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmp3vfsf4x5.js:47:12)\n    at Object.<anonymous> (/tmp/tmp3vfsf4x5.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 12,\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n  // split on whitespace\n  let words = txt.split(/\\s+/);\n  // split on commas\n  let commas = txt.split(/,+/);\n  // split on lower case letters\n  let letters = txt.split(/[a-z]+/);\n  // return the number of lower case letters with odd order in the alphabet\n  return [...words, ...commas, ...letters].filter(x => x).length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpnp0ee2so.js:24:12)\n    at Object.<anonymous> (/tmp/tmpnp0ee2so.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = txt.split(/\\s+/);\n    let arr2 = [];\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] !== \"\") {\n            arr2.push(arr[i]);\n        }\n    }\n    for (let i = 0; i < arr2.length; i++) {\n        if (arr2[i] === \"\") {\n            count++;\n        }\n    }\n    let arr3 = [];\n    for (let i = 0; i < arr2.length; i++) {\n        if (arr2[i] !== \"\") {\n            arr3.push(arr2[i]);\n        }\n    }\n    return arr3;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmp6lvkjzef.js:37:12)\n    at Object.<anonymous> (/tmp/tmp6lvkjzef.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let words = txt.split(/\\s+/);\n    let count = 0;\n    let result = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > 0) {\n            result.push(words[i]);\n            count += words[i].length;\n        }\n    }\n    let count_lower = 0;\n    let count_upper = 0;\n    let count_other = 0;\n    for (let i = 0; i < result.length; i++) {\n        if (result[i].length > 0) {\n            let ch = result[i].charCodeAt(0);\n            if (ch >= 65 && ch <= 90) {\n                count_lower += result[i].length;\n            } else if (ch >= 97 && ch <= 122) {\n                count_upper += result[i].length;\n            } else {\n                count_other += result[i].length;\n            }\n        }\n    }\n    return result.length === 0 ? [0, 0, 0] : [result, count, count_lower, count_upper, count_other];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293101,
      "stdout": "../../../../../../tmp/tmpth78204k.ts(36,5): error TS2322: Type '(number | any[])[]' is not assignable to type 'number | string[]'.\n  Type '(number | any[])[]' is not assignable to type 'string[]'.\n    Type 'number | any[]' is not assignable to type 'string'.\n      Type 'number' is not assignable to type 'string'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = [];\n    let count = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let aa = 0;\n    let ab = 0;\n    let ac = 0;\n    let ad = 0;\n    let ae = 0;\n    let af = 0;\n    let ag = 0;\n    let ah = 0;\n    let ai = 0;\n    let aj = 0;\n    let ak = 0;\n    let al = 0;\n    let am = 0;\n    let an = 0;\n    let ao = 0;\n    let ap = 0;\n    let aq = 0;\n    let ar = 0;\n    let as = 0;\n    let at = 0;\n    let au = 0;\n    let av = 0;\n    let aw = 0;\n    let ax = 0;\n    let ay = 0;\n    let az = 0;\n    let ba\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293100,
      "stdout": "../../../../../../tmp/tmp31v94vfk.ts(101,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let words = txt.split(/\\s+/);\n    let lowerCase = [];\n    let lowerCaseCount = 0;\n    let upperCase = [];\n    let upperCaseCount = 0;\n    let number = [];\n    let numberCount = 0;\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].toLowerCase() === words[i]) {\n            lowerCase.push(words[i]);\n            lowerCaseCount++;\n        } else if (words[i].toUpperCase() === words[i]) {\n            upperCase.push(words[i]);\n            upperCaseCount++;\n        } else if (words[i].match(/^[0-9]+$/)) {\n            number.push(words[i]);\n            numberCount++;\n        }\n    }\n    if (lowerCaseCount === 0 && upperCaseCount === 0 && numberCount === 0) {\n        return words.length;\n    } else if (lowerCaseCount === 0 && upperCaseCount === 0 && numberCount > 0) {\n        return numberCount;\n    } else if (lowerCaseCount > 0 && upperCaseCount === 0 && numberCount === 0) {\n        return lowerCaseCount;\n    } else if (lowerCaseCount === 0 && upperCaseCount > 0 && numberCount === 0) {\n        return upperCaseCount;\n    } else if (lowerCaseCount === 0 && upperCaseCount === 0 && numberCount === 0) {\n        return lowerCaseCount;\n    } else if (lowerCaseCount > 0 && upperCaseCount > 0 && numberCount === 0) {\n        return lowerCaseCount + upperCaseCount;\n    } else if (lowerCaseCount === 0 && upperCaseCount === 0 && numberCount > 0) {\n        return numberCount;\n    } else if (lowerCaseCount === 0 && upperCaseCount === 0 && numberCount > 0) {\n        return lowerCaseCount + numberCount;\n    } else if (lowerCaseCount > 0 && upperCaseCount > 0 && numberCount === 0) {\n        return lowerCaseCount + upperCaseCount;\n    } else if (lowerCaseCount > 0 && upperCaseCount === 0 && numberCount > 0) {\n        return lowerCaseCount\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293101,
      "stdout": "../../../../../../tmp/tmpq80dr67z.ts(67,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let words = txt.split(/\\s+/);\n    let count = 0;\n    let result = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > 0) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpyprl7hec.js:26:12)\n    at Object.<anonymous> (/tmp/tmpyprl7hec.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = txt.split(/\\s+/);\n    let count = 0;\n    let result = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            result.push(arr[i]);\n            count += arr[i].length;\n        }\n    }\n    if (count % 2 === 1) {\n        for (let i = 0; i < result.length; i++) {\n            result[i] = result[i].toLowerCase();\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hello',\n  'world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmp5ldfpx4v.js:31:12)\n    at Object.<anonymous> (/tmp/tmp5ldfpx4v.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hello', 'world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let words = txt.split(/\\s+/);\n    let lowerCase = [];\n    let num = 0;\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > 0) {\n            if (words[i].toLowerCase() === words[i]) {\n                lowerCase.push(words[i]);\n            } else {\n                num += words[i].length - 1;\n            }\n        }\n    }\n    return lowerCase.length === 0 ? num : lowerCase;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmp1b6ghs0q.js:30:12)\n    at Object.<anonymous> (/tmp/tmp1b6ghs0q.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let words = txt.split(/\\s+/);\n    let result = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > 0) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpbuj4wqq5.js:25:12)\n    at Object.<anonymous> (/tmp/tmpbuj4wqq5.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = [];\n    let arr2 = [];\n    let arr3 = [];\n    let arr4 = [];\n    let arr5 = [];\n    let arr6 = [];\n    let arr7 = [];\n    let arr8 = [];\n    let arr9 = [];\n    let arr10 = [];\n    let arr11 = [];\n    let arr12 = [];\n    let arr13 = [];\n    let arr14 = [];\n    let arr15 = [];\n    let arr16 = [];\n    let arr17 = [];\n    let arr18 = [];\n    let arr19 = [];\n    let arr20 = [];\n    let arr21 = [];\n    let arr22 = [];\n    let arr23 = [];\n    let arr24 = [];\n    let arr25 = [];\n    let arr26 = [];\n    let arr27 = [];\n    let arr28 = [];\n    let arr29 = [];\n    let arr30 = [];\n    let arr31 = [];\n    let arr32 = [];\n    let arr33 = [];\n    let arr34 = [];\n    let arr35 = [];\n    let arr36 = [];\n    let arr37 = [];\n    let arr38 = [];\n    let arr39 = [];\n    let arr40 = [];\n    let arr41 = [];\n    let arr42 = [];\n    let arr43 = [];\n    let arr44 = [];\n    let arr45 = [];\n    let arr46 = [];\n    let arr47 = [];\n    let arr48 = [];\n    let arr49 = [];\n    let arr50 = [];\n    let arr51 = [];\n    let arr52 = [];\n    let arr53 = [];\n    let arr54 = [];\n    let arr55 = [];\n    let arr56 = [];\n    let arr57 = [];\n    let arr58 = [];\n    let arr59 = [];\n    let arr60 = [];\n    let arr61 = [];\n    let arr62 = [];\n    let arr63 = [];\n    let arr64 = [];\n    let arr65 = [];\n    let arr66 = [];\n    let arr67 = [];\n    let arr68 = [];\n    let arr69 = [];\n    let arr70 = [];\n    let arr71 = [];\n    let arr72 = [];\n    let arr73 = [];\n    let\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "../../../../../../tmp/tmpo93cd4ui.ts(86,9): error TS1005: ',' expected.\n../../../../../../tmp/tmpo93cd4ui.ts(102,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = txt.split(/\\s+/);\n    let res = [];\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            res.push(arr[i]);\n        }\n        else {\n            count += arr[i].length;\n        }\n    }\n    return res;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpt2bz4dfy.js:29:12)\n    at Object.<anonymous> (/tmp/tmpt2bz4dfy.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = [];\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293101,
      "stdout": "../../../../../../tmp/tmp5gx2bogy.ts(86,9): error TS1005: ',' expected.\n../../../../../../tmp/tmp5gx2bogy.ts(102,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let words = txt.split(/\\s+/);\n    let result = [];\n    let count = 0;\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n        let count = 0;\n        for (let j = 0; j < word.length; j++) {\n            if (alphabet.indexOf(word[j]) > -1) {\n                count++;\n            }\n        }\n        if (count % 2 === 1) {\n            result.push(word);\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpkcwxui_h.js:33:12)\n    at Object.<anonymous> (/tmp/tmpkcwxui_h.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = [];\n    let arr2 = [];\n    let arr3 = [];\n    let arr4 = [];\n    let arr5 = [];\n    let arr6 = [];\n    let arr7 = [];\n    let arr8 = [];\n    let arr9 = [];\n    let arr10 = [];\n    let arr11 = [];\n    let arr12 = [];\n    let arr13 = [];\n    let arr14 = [];\n    let arr15 = [];\n    let arr16 = [];\n    let arr17 = [];\n    let arr18 = [];\n    let arr19 = [];\n    let arr20 = [];\n    let arr21 = [];\n    let arr22 = [];\n    let arr23 = [];\n    let arr24 = [];\n    let arr25 = [];\n    let arr26 = [];\n    let arr27 = [];\n    let arr28 = [];\n    let arr29 = [];\n    let arr30 = [];\n    let arr31 = [];\n    let arr32 = [];\n    let arr33 = [];\n    let arr34 = [];\n    let arr35 = [];\n    let arr36 = [];\n    let arr37 = [];\n    let arr38 = [];\n    let arr39 = [];\n    let arr40 = [];\n    let arr41 = [];\n    let arr42 = [];\n    let arr43 = [];\n    let arr44 = [];\n    let arr45 = [];\n    let arr46 = [];\n    let arr47 = [];\n    let arr48 = [];\n    let arr49 = [];\n    let arr50 = [];\n    let arr51 = [];\n    let arr52 = [];\n    let arr53 = [];\n    let arr54 = [];\n    let arr55 = [];\n    let arr56 = [];\n    let arr57 = [];\n    let arr58 = [];\n    let arr59 = [];\n    let arr60 = [];\n    let arr61 = [];\n    let arr62 = [];\n    let arr63 = [];\n    let arr64 = [];\n    let arr65 = [];\n    let arr66 = [];\n    let arr67 = [];\n    let arr68 = [];\n    let arr69 = [];\n    let arr70 = [];\n    let arr71 = [];\n    let arr72 = [];\n    let arr73 = [];\n    let\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "../../../../../../tmp/tmpo93cd4ui.ts(86,9): error TS1005: ',' expected.\n../../../../../../tmp/tmpo93cd4ui.ts(102,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n  return txt.split(/\\s+/);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpzy4one0w.js:18:12)\n    at Object.<anonymous> (/tmp/tmpzy4one0w.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n  let words = txt.split(/\\s+/);\n  let lower = [];\n  let upper = [];\n  let count = 0;\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length === 1) {\n      count++;\n      if (words[i].toLowerCase() === words[i]) {\n        lower.push(words[i]);\n      } else {\n        upper.push(words[i]);\n      }\n    }\n  }\n  return lower.concat(upper).sort().map(w => w.toLowerCase());\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293102,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmp53y1_p_n.js:32:12)\n    at Object.<anonymous> (/tmp/tmp53y1_p_n.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n  let arr = txt.split(/\\s+/);\n  let res = [];\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] !== \"\") {\n      res.push(arr[i]);\n    }\n  }\n  for (let i = 0; i < res.length; i++) {\n    if (res[i] === \"\") {\n      count++;\n    }\n  }\n  let count2 = 0;\n  for (let i = 0; i < res.length; i++) {\n    if (res[i] === \"\") {\n      count2++;\n    }\n  }\n  if (count2 === 0) {\n    return count;\n  }\n  return res;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpc34r2y5z.js:39:12)\n    at Object.<anonymous> (/tmp/tmpc34r2y5z.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = txt.split(/\\s+/);\n    let arr2 = [];\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] !== \"\") {\n            arr2.push(arr[i]);\n        }\n    }\n    for (let i = 0; i < arr2.length; i++) {\n        if (arr2[i] === \"\") {\n            arr2.splice(i, 1);\n            i--;\n        }\n    }\n    for (let i = 0; i < arr2.length; i++) {\n        if (arr2[i] === \"\") {\n            arr2.splice(i, 1);\n            i--;\n        }\n    }\n    for (let i = 0; i < arr2.length; i++) {\n        if (arr2[i] === \"\") {\n            arr2.splice(i, 1);\n            i--;\n        }\n    }\n    for (let i = 0; i < arr2.length; i++) {\n        if (arr2[i] === \"\") {\n            arr2.splice(i, 1);\n            i--;\n        }\n    }\n    for (let i = 0; i < arr2.length; i++) {\n        if (arr2[i] === \"\") {\n            arr2.splice(i, 1);\n            i--;\n        }\n    }\n    for (let i = 0; i < arr2.length; i++) {\n        if (arr2[i] === \"\") {\n            arr2.splice(i, 1);\n            i--;\n        }\n    }\n    for (let i = 0; i < arr2.length; i++) {\n        if (arr2[i] === \"\") {\n            arr2.splice(i, 1);\n            i--;\n        }\n    }\n    for (let i = 0; i < arr2.length; i++) {\n        if (arr2[i] === \"\") {\n            arr2.splice(i, 1);\n            i--;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293103,
      "stdout": "../../../../../../tmp/tmpg38_m14v.ts(83,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = [];\n    let i = 0;\n    let j = 0;\n    let count = 0;\n    let count2 = 0;\n    let count3 = 0;\n    let count4 = 0;\n    let count5 = 0;\n    let count6 = 0;\n    let count7 = 0;\n    let count8 = 0;\n    let count9 = 0;\n    let count10 = 0;\n    let count11 = 0;\n    let count12 = 0;\n    let count13 = 0;\n    let count14 = 0;\n    let count15 = 0;\n    let count16 = 0;\n    let count17 = 0;\n    let count18 = 0;\n    let count19 = 0;\n    let count20 = 0;\n    let count21 = 0;\n    let count22 = 0;\n    let count23 = 0;\n    let count24 = 0;\n    let count25 = 0;\n    let count26 = 0;\n    let count27 = 0;\n    let count28 = 0;\n    let count29 = 0;\n    let count30 = 0;\n    let count31 = 0;\n    let count32 = 0;\n    let count33 = 0;\n    let count34 = 0;\n    let count35 = 0;\n    let count36 = 0;\n    let count37 = 0;\n    let count38 = 0;\n    let count39 = 0;\n    let count40 = 0;\n    let count41 = 0;\n    let count42 = 0;\n    let count43 = 0;\n    let count44 = 0;\n    let count45 = 0;\n    let count46 = 0;\n    let count47 = 0;\n    let count48 = 0;\n    let count49 = 0;\n    let count50 = 0;\n    let count51 = 0;\n    let count52 = 0;\n    let count53 = 0;\n    let count54 = 0;\n    let count55 = 0;\n    let count56 = 0;\n    let count57 = 0;\n    let count58 = 0;\n    let count59 = 0;\n    let count60 = 0;\n    let count61 = 0;\n    let count62 =\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "../../../../../../tmp/tmpv0z1rlr9.ts(77,9): error TS1005: ',' expected.\n../../../../../../tmp/tmpv0z1rlr9.ts(93,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n  // const split = txt.split(/\\s+/);\n  // return split.filter(x => x.length > 0);\n  const split = txt.split(/\\s+/);\n  return split.filter(x => x.length > 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmp9pexptn_.js:21:12)\n    at Object.<anonymous> (/tmp/tmp9pexptn_.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n  return txt.split(/\\s+/);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpzy4one0w.js:18:12)\n    at Object.<anonymous> (/tmp/tmpzy4one0w.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let words = txt.split(/\\s+/);\n    let num = 0;\n    let arr = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > 0) {\n            arr.push(words[i]);\n        }\n    }\n    for (let i = 0; i < arr.length; i++) {\n        let word = arr[i];\n        let count = 0;\n        for (let j = 0; j < word.length; j++) {\n            if (word[j].toLowerCase() === word[j]) {\n                count++;\n            }\n        }\n        if (count % 2 === 1) {\n            num++;\n        }\n    }\n    return num;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpv1u6arav.js:37:12)\n    at Object.<anonymous> (/tmp/tmpv1u6arav.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = txt.split(/\\s+/);\n    let arr2 = [];\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            arr2.push(arr[i]);\n        }\n    }\n    for (let i = 0; i < arr2.length; i++) {\n        if (arr2[i].length > 0) {\n            count += arr2[i].length;\n        }\n    }\n    let arr3 = [];\n    for (let i = 0; i < arr2.length; i++) {\n        if (arr2[i].length > 0) {\n            arr3.push(arr2[i]);\n        }\n    }\n    let arr4 = [];\n    for (let i = 0; i < arr3.length; i++) {\n        if (arr3[i].length > 0) {\n            arr4.push(arr3[i]);\n        }\n    }\n    return arr4;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpjqwojkps.js:43:12)\n    at Object.<anonymous> (/tmp/tmpjqwojkps.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    return txt.split(/\\s+/);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmprflk7f4i.js:18:12)\n    at Object.<anonymous> (/tmp/tmprflk7f4i.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = [];\n    let arr2 = [];\n    let arr3 = [];\n    let arr4 = [];\n    let arr5 = [];\n    let arr6 = [];\n    let arr7 = [];\n    let arr8 = [];\n    let arr9 = [];\n    let arr10 = [];\n    let arr11 = [];\n    let arr12 = [];\n    let arr13 = [];\n    let arr14 = [];\n    let arr15 = [];\n    let arr16 = [];\n    let arr17 = [];\n    let arr18 = [];\n    let arr19 = [];\n    let arr20 = [];\n    let arr21 = [];\n    let arr22 = [];\n    let arr23 = [];\n    let arr24 = [];\n    let arr25 = [];\n    let arr26 = [];\n    let arr27 = [];\n    let arr28 = [];\n    let arr29 = [];\n    let arr30 = [];\n    let arr31 = [];\n    let arr32 = [];\n    let arr33 = [];\n    let arr34 = [];\n    let arr35 = [];\n    let arr36 = [];\n    let arr37 = [];\n    let arr38 = [];\n    let arr39 = [];\n    let arr40 = [];\n    let arr41 = [];\n    let arr42 = [];\n    let arr43 = [];\n    let arr44 = [];\n    let arr45 = [];\n    let arr46 = [];\n    let arr47 = [];\n    let arr48 = [];\n    let arr49 = [];\n    let arr50 = [];\n    let arr51 = [];\n    let arr52 = [];\n    let arr53 = [];\n    let arr54 = [];\n    let arr55 = [];\n    let arr56 = [];\n    let arr57 = [];\n    let arr58 = [];\n    let arr59 = [];\n    let arr60 = [];\n    let arr61 = [];\n    let arr62 = [];\n    let arr63 = [];\n    let arr64 = [];\n    let arr65 = [];\n    let arr66 = [];\n    let arr67 = [];\n    let arr68 = [];\n    let arr69 = [];\n    let arr70 = [];\n    let arr71 = [];\n    let arr72 = [];\n    let arr73 = [];\n    let\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "../../../../../../tmp/tmpo93cd4ui.ts(86,9): error TS1005: ',' expected.\n../../../../../../tmp/tmpo93cd4ui.ts(102,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = [];\n    let count = 0;\n    let count2 = 0;\n    let count3 = 0;\n    let count4 = 0;\n    let count5 = 0;\n    let count6 = 0;\n    let count7 = 0;\n    let count8 = 0;\n    let count9 = 0;\n    let count10 = 0;\n    let count11 = 0;\n    let count12 = 0;\n    let count13 = 0;\n    let count14 = 0;\n    let count15 = 0;\n    let count16 = 0;\n    let count17 = 0;\n    let count18 = 0;\n    let count19 = 0;\n    let count20 = 0;\n    let count21 = 0;\n    let count22 = 0;\n    let count23 = 0;\n    let count24 = 0;\n    let count25 = 0;\n    let count26 = 0;\n    let count27 = 0;\n    let count28 = 0;\n    let count29 = 0;\n    let count30 = 0;\n    let count31 = 0;\n    let count32 = 0;\n    let count33 = 0;\n    let count34 = 0;\n    let count35 = 0;\n    let count36 = 0;\n    let count37 = 0;\n    let count38 = 0;\n    let count39 = 0;\n    let count40 = 0;\n    let count41 = 0;\n    let count42 = 0;\n    let count43 = 0;\n    let count44 = 0;\n    let count45 = 0;\n    let count46 = 0;\n    let count47 = 0;\n    let count48 = 0;\n    let count49 = 0;\n    let count50 = 0;\n    let count51 = 0;\n    let count52 = 0;\n    let count53 = 0;\n    let count54 = 0;\n    let count55 = 0;\n    let count56 = 0;\n    let count57 = 0;\n    let count58 = 0;\n    let count59 = 0;\n    let count60 = 0;\n    let count61 = 0;\n    let count62 = 0;\n    let count63 = 0;\n    let count\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293100,
      "stdout": "../../../../../../tmp/tmpwd1qi8hk.ts(93,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = txt.split(/\\s+/);\n    let count = 0;\n    let res = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            res.push(arr[i]);\n        }\n    }\n    return res;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293104,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmp73tmxb0n.js:26:12)\n    at Object.<anonymous> (/tmp/tmp73tmxb0n.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = txt.split(/\\s+/);\n    let res = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            res.push(arr[i]);\n        }\n    }\n    return res;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293104,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpbb08hh8u.js:25:12)\n    at Object.<anonymous> (/tmp/tmpbb08hh8u.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = txt.split(/\\s+/);\n    let res = [];\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            res.push(arr[i]);\n        }\n    }\n    return res;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmp9f1h92ap.js:26:12)\n    at Object.<anonymous> (/tmp/tmp9f1h92ap.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n  return txt.split(/\\s+/);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpzy4one0w.js:18:12)\n    at Object.<anonymous> (/tmp/tmpzy4one0w.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let words = txt.split(/\\s+/);\n    let res = [];\n    let count = 0;\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > 0) {\n            res.push(words[i]);\n        }\n    }\n    for (let i = 0; i < res.length; i++) {\n        let c = res[i].length;\n        if (c > 0) {\n            count += c;\n        }\n    }\n    return res.length > 0 ? res : count;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpmif7qzsu.js:32:12)\n    at Object.<anonymous> (/tmp/tmpmif7qzsu.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = txt.split(/\\s+/);\n    let res = [];\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            res.push(arr[i]);\n            count += arr[i].length;\n        }\n    }\n    let res2 = [];\n    let count2 = 0;\n    for (let i = 0; i < res.length; i++) {\n        if (res[i].length > 0) {\n            res2.push(res[i]);\n            count2 += res[i].length;\n        }\n    }\n    let res3 = [];\n    let count3 = 0;\n    for (let i = 0; i < res2.length; i++) {\n        if (res2[i].length > 0) {\n            res3.push(res2[i]);\n            count3 += res2[i].length;\n        }\n    }\n    let res4 = [];\n    let count4 = 0;\n    for (let i = 0; i < res3.length; i++) {\n        if (res3[i].length > 0) {\n            res4.push(res3[i]);\n            count4 += res3[i].length;\n        }\n    }\n    let res5 = [];\n    let count5 = 0;\n    for (let i = 0; i < res4.length; i++) {\n        if (res4[i].length > 0) {\n            res5.push(res4[i]);\n            count5 += res4[i].length;\n        }\n    }\n    let res6 = [];\n    let count6 = 0;\n    for (let i = 0; i < res5.length; i++) {\n        if (res5[i].length > 0) {\n            res6.push(res5[i]);\n            count6 += res5[i].length;\n        }\n    }\n    let res7 = [];\n    let count7 = 0;\n    for (let i = 0; i < res6.length; i++) {\n        if (res6[\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293103,
      "stdout": "../../../../../../tmp/tmpy5i0amiq.ts(65,9): error TS1005: ']' expected.\n../../../../../../tmp/tmpy5i0amiq.ts(81,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = [];\n    let i = 0;\n    let j = 0;\n    let count = 0;\n    let count2 = 0;\n    let count3 = 0;\n    let count4 = 0;\n    let count5 = 0;\n    let count6 = 0;\n    let count7 = 0;\n    let count8 = 0;\n    let count9 = 0;\n    let count10 = 0;\n    let count11 = 0;\n    let count12 = 0;\n    let count13 = 0;\n    let count14 = 0;\n    let count15 = 0;\n    let count16 = 0;\n    let count17 = 0;\n    let count18 = 0;\n    let count19 = 0;\n    let count20 = 0;\n    let count21 = 0;\n    let count22 = 0;\n    let count23 = 0;\n    let count24 = 0;\n    let count25 = 0;\n    let count26 = 0;\n    let count27 = 0;\n    let count28 = 0;\n    let count29 = 0;\n    let count30 = 0;\n    let count31 = 0;\n    let count32 = 0;\n    let count33 = 0;\n    let count34 = 0;\n    let count35 = 0;\n    let count36 = 0;\n    let count37 = 0;\n    let count38 = 0;\n    let count39 = 0;\n    let count40 = 0;\n    let count41 = 0;\n    let count42 = 0;\n    let count43 = 0;\n    let count44 = 0;\n    let count45 = 0;\n    let count46 = 0;\n    let count47 = 0;\n    let count48 = 0;\n    let count49 = 0;\n    let count50 = 0;\n    let count51 = 0;\n    let count52 = 0;\n    let count53 = 0;\n    let count54 = 0;\n    let count55 = 0;\n    let count56 = 0;\n    let count57 = 0;\n    let count58 = 0;\n    let count59 = 0;\n    let count60 = 0;\n    let count61 = 0;\n    let count62 =\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "../../../../../../tmp/tmpv0z1rlr9.ts(77,9): error TS1005: ',' expected.\n../../../../../../tmp/tmpv0z1rlr9.ts(93,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let words = txt.split(/\\s+/);\n    let lower = [];\n    let upper = [];\n    let num = 0;\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length === 1) {\n            num++;\n            if (words[i].toLowerCase() === words[i]) {\n                lower.push(words[i]);\n            } else {\n                upper.push(words[i]);\n            }\n        }\n    }\n    return lower.concat(upper).concat(num);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293104,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpxmhv3p8t.js:32:12)\n    at Object.<anonymous> (/tmp/tmpxmhv3p8t.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = [];\n    let i = 0;\n    let j = 0;\n    let count = 0;\n    let count2 = 0;\n    let count3 = 0;\n    let count4 = 0;\n    let count5 = 0;\n    let count6 = 0;\n    let count7 = 0;\n    let count8 = 0;\n    let count9 = 0;\n    let count10 = 0;\n    let count11 = 0;\n    let count12 = 0;\n    let count13 = 0;\n    let count14 = 0;\n    let count15 = 0;\n    let count16 = 0;\n    let count17 = 0;\n    let count18 = 0;\n    let count19 = 0;\n    let count20 = 0;\n    let count21 = 0;\n    let count22 = 0;\n    let count23 = 0;\n    let count24 = 0;\n    let count25 = 0;\n    let count26 = 0;\n    let count27 = 0;\n    let count28 = 0;\n    let count29 = 0;\n    let count30 = 0;\n    let count31 = 0;\n    let count32 = 0;\n    let count33 = 0;\n    let count34 = 0;\n    let count35 = 0;\n    let count36 = 0;\n    let count37 = 0;\n    let count38 = 0;\n    let count39 = 0;\n    let count40 = 0;\n    let count41 = 0;\n    let count42 = 0;\n    let count43 = 0;\n    let count44 = 0;\n    let count45 = 0;\n    let count46 = 0;\n    let count47 = 0;\n    let count48 = 0;\n    let count49 = 0;\n    let count50 = 0;\n    let count51 = 0;\n    let count52 = 0;\n    let count53 = 0;\n    let count54 = 0;\n    let count55 = 0;\n    let count56 = 0;\n    let count57 = 0;\n    let count58 = 0;\n    let count59 = 0;\n    let count60 = 0;\n    let count61 = 0;\n    let count62 =\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "../../../../../../tmp/tmpv0z1rlr9.ts(77,9): error TS1005: ',' expected.\n../../../../../../tmp/tmpv0z1rlr9.ts(93,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = txt.split(/\\s+/);\n    let arr2 = [];\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            arr2.push(arr[i]);\n        }\n    }\n    for (let i = 0; i < arr2.length; i++) {\n        if (arr2[i].length > 0) {\n            count += arr2[i].length;\n        }\n    }\n    let arr3 = [];\n    for (let i = 0; i < arr2.length; i++) {\n        if (arr2[i].length > 0) {\n            arr3.push(arr2[i]);\n        }\n    }\n    return arr3;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmprphzi5_8.js:37:12)\n    at Object.<anonymous> (/tmp/tmprphzi5_8.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = txt.split(/\\s+/);\n    let count = 0;\n    let res = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            res.push(arr[i]);\n            count += arr[i].length;\n        }\n    }\n    let count2 = 0;\n    let res2 = [];\n    for (let i = 0; i < res.length; i++) {\n        if (res[i].length > 0) {\n            res2.push(res[i]);\n            count2 += res[i].length;\n        }\n    }\n    if (count2 > 0) {\n        return res2;\n    }\n    let count3 = 0;\n    let res3 = [];\n    for (let i = 0; i < res.length; i++) {\n        if (res[i].length > 0) {\n            res3.push(res[i]);\n            count3 += res[i].length;\n        }\n    }\n    if (count3 > 0) {\n        return res3;\n    }\n    let count4 = 0;\n    let res4 = [];\n    for (let i = 0; i < res.length; i++) {\n        if (res[i].length > 0) {\n            res4.push(res[i]);\n            count4 += res[i].length;\n        }\n    }\n    if (count4 > 0) {\n        return res4;\n    }\n    let count5 = 0;\n    let res5 = [];\n    for (let i = 0; i < res.length; i++) {\n        if (res[i].length > 0) {\n            res5.push(res[i]);\n            count5 += res[i].length;\n        }\n    }\n    if (count5 > 0) {\n        return res5;\n    }\n    let count6 = 0;\n    let res6 = [];\n    for (let i = 0; i < res.length; i++) {\n        if (res[i].length > 0) {\n            res6.push(res[\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293103,
      "stdout": "../../../../../../tmp/tmpra9t5vc8.ts(70,9): error TS1005: ']' expected.\n../../../../../../tmp/tmpra9t5vc8.ts(86,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = [];\n    let count = 0;\n    let count2 = 0;\n    let count3 = 0;\n    let count4 = 0;\n    let count5 = 0;\n    let count6 = 0;\n    let count7 = 0;\n    let count8 = 0;\n    let count9 = 0;\n    let count10 = 0;\n    let count11 = 0;\n    let count12 = 0;\n    let count13 = 0;\n    let count14 = 0;\n    let count15 = 0;\n    let count16 = 0;\n    let count17 = 0;\n    let count18 = 0;\n    let count19 = 0;\n    let count20 = 0;\n    let count21 = 0;\n    let count22 = 0;\n    let count23 = 0;\n    let count24 = 0;\n    let count25 = 0;\n    let count26 = 0;\n    let count27 = 0;\n    let count28 = 0;\n    let count29 = 0;\n    let count30 = 0;\n    let count31 = 0;\n    let count32 = 0;\n    let count33 = 0;\n    let count34 = 0;\n    let count35 = 0;\n    let count36 = 0;\n    let count37 = 0;\n    let count38 = 0;\n    let count39 = 0;\n    let count40 = 0;\n    let count41 = 0;\n    let count42 = 0;\n    let count43 = 0;\n    let count44 = 0;\n    let count45 = 0;\n    let count46 = 0;\n    let count47 = 0;\n    let count48 = 0;\n    let count49 = 0;\n    let count50 = 0;\n    let count51 = 0;\n    let count52 = 0;\n    let count53 = 0;\n    let count54 = 0;\n    let count55 = 0;\n    let count56 = 0;\n    let count57 = 0;\n    let count58 = 0;\n    let count59 = 0;\n    let count60 = 0;\n    let count61 = 0;\n    let count62 = 0;\n    let count63 = 0;\n    let count\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293100,
      "stdout": "../../../../../../tmp/tmpwd1qi8hk.ts(93,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = [];\n    let count = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "../../../../../../tmp/tmpr_ndbdk4.ts(86,9): error TS1005: ',' expected.\n../../../../../../tmp/tmpr_ndbdk4.ts(102,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = txt.split(/\\s+/);\n    let result = [];\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            result.push(arr[i]);\n            count += arr[i].length;\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293104,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmppd4c1l7e.js:27:12)\n    at Object.<anonymous> (/tmp/tmppd4c1l7e.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = txt.split(/\\s+/);\n    let arr2 = [];\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] !== \"\") {\n            arr2.push(arr[i]);\n        }\n    }\n    for (let i = 0; i < arr2.length; i++) {\n        if (arr2[i] !== \"\") {\n            count += arr2[i].length;\n        }\n    }\n    let result = [];\n    for (let i = 0; i < arr2.length; i++) {\n        if (arr2[i] !== \"\") {\n            result.push(arr2[i]);\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293104,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmp96hsg6uf.js:37:12)\n    at Object.<anonymous> (/tmp/tmp96hsg6uf.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let words = txt.split(/\\s+/);\n    let lower = [];\n    let upper = [];\n    let count = 0;\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].match(/^[a-z]$/i)) {\n            count++;\n            if (count % 2 === 0) {\n                lower.push(words[i]);\n            } else {\n                upper.push(words[i]);\n            }\n        }\n    }\n    return lower.concat(upper);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293104,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpqkh_xbgw.js:32:12)\n    at Object.<anonymous> (/tmp/tmpqkh_xbgw.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let words = txt.split(/\\s+/);\n    let lowerCase = [];\n    let lowerCaseCount = 0;\n    let upperCase = [];\n    let upperCaseCount = 0;\n    let num = [];\n    let numCount = 0;\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n        if (word.length > 0) {\n            if (word.match(/[a-z]/)) {\n                lowerCase.push(word);\n                lowerCaseCount++;\n            } else if (word.match(/[A-Z]/)) {\n                upperCase.push(word);\n                upperCaseCount++;\n            } else if (word.match(/[0-9]/)) {\n                num.push(word);\n                numCount++;\n            }\n        }\n    }\n    if (lowerCaseCount > 0) {\n        return lowerCase;\n    } else if (upperCaseCount > 0) {\n        return upperCase;\n    } else if (numCount > 0) {\n        return num;\n    } else {\n        return words.length;\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293104,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpfmehtgu4.js:53:12)\n    at Object.<anonymous> (/tmp/tmpfmehtgu4.js:61:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = txt.split(/\\s+/);\n    let res = [];\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            res.push(arr[i]);\n            count += arr[i].length;\n        }\n    }\n    let count2 = 0;\n    for (let i = 0; i < res.length; i++) {\n        if (res[i].length > 0) {\n            count2 += res[i].length;\n        }\n    }\n    if (count2 % 2 === 0) {\n        return res.map(x => x.toLowerCase());\n    }\n    return count2;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293104,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n11\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpshc47l9c.js:35:12)\n    at Object.<anonymous> (/tmp/tmpshc47l9c.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 11,\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = txt.split(/\\s+/);\n    let res = [];\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            res.push(arr[i]);\n        }\n    }\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            count += arr[i].length;\n        }\n    }\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            count += arr[i].length;\n        }\n    }\n    return res;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293104,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmps74f223b.js:36:12)\n    at Object.<anonymous> (/tmp/tmps74f223b.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let words = txt.split(/\\s+/);\n    let lowerCaseLetters = [];\n    let upperCaseLetters = [];\n    let numbers = [];\n    let result = [];\n    for (let word of words) {\n        let lowerCaseLettersCount = 0;\n        let upperCaseLettersCount = 0;\n        let numbersCount = 0;\n        for (let letter of word) {\n            if (letter === letter.toLowerCase()) {\n                lowerCaseLettersCount++;\n            } else if (letter === letter.toUpperCase()) {\n                upperCaseLettersCount++;\n            } else {\n                numbersCount++;\n            }\n        }\n        if (lowerCaseLettersCount % 2 === 1) {\n            lowerCaseLetters.push(word);\n        } else if (upperCaseLettersCount % 2 === 1) {\n            upperCaseLetters.push(word);\n        } else {\n            numbers.push(word);\n        }\n    }\n    if (lowerCaseLetters.length > 0) {\n        result = result.concat(lowerCaseLetters);\n    }\n    if (upperCaseLetters.length > 0) {\n        result = result.concat(upperCaseLetters);\n    }\n    if (numbers.length > 0) {\n        result = result.concat(numbers);\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293104,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpq1o7m2o_.js:57:12)\n    at Object.<anonymous> (/tmp/tmpq1o7m2o_.js:65:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = [];\n    let count = 0;\n    let count2 = 0;\n    let count3 = 0;\n    let count4 = 0;\n    let count5 = 0;\n    let count6 = 0;\n    let count7 = 0;\n    let count8 = 0;\n    let count9 = 0;\n    let count10 = 0;\n    let count11 = 0;\n    let count12 = 0;\n    let count13 = 0;\n    let count14 = 0;\n    let count15 = 0;\n    let count16 = 0;\n    let count17 = 0;\n    let count18 = 0;\n    let count19 = 0;\n    let count20 = 0;\n    let count21 = 0;\n    let count22 = 0;\n    let count23 = 0;\n    let count24 = 0;\n    let count25 = 0;\n    let count26 = 0;\n    let count27 = 0;\n    let count28 = 0;\n    let count29 = 0;\n    let count30 = 0;\n    let count31 = 0;\n    let count32 = 0;\n    let count33 = 0;\n    let count34 = 0;\n    let count35 = 0;\n    let count36 = 0;\n    let count37 = 0;\n    let count38 = 0;\n    let count39 = 0;\n    let count40 = 0;\n    let count41 = 0;\n    let count42 = 0;\n    let count43 = 0;\n    let count44 = 0;\n    let count45 = 0;\n    let count46 = 0;\n    let count47 = 0;\n    let count48 = 0;\n    let count49 = 0;\n    let count50 = 0;\n    let count51 = 0;\n    let count52 = 0;\n    let count53 = 0;\n    let count54 = 0;\n    let count55 = 0;\n    let count56 = 0;\n    let count57 = 0;\n    let count58 = 0;\n    let count59 = 0;\n    let count60 = 0;\n    let count61 = 0;\n    let count62 = 0;\n    let count63 = 0;\n    let count\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293100,
      "stdout": "../../../../../../tmp/tmpwd1qi8hk.ts(93,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = txt.split(/\\s+/);\n    let count = 0;\n    let res = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            res.push(arr[i]);\n            count += arr[i].length;\n        }\n    }\n    let count_lower = 0;\n    let res_lower = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            let arr_lower = arr[i].toLowerCase();\n            for (let j = 0; j < arr_lower.length; j++) {\n                if (arr_lower[j] > arr_lower[j + 1]) {\n                    count_lower += 1;\n                }\n            }\n            res_lower.push(arr[i]);\n        }\n    }\n    return [...res, ...res_lower, count, count_lower];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293104,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello',\n  'world!',\n  'Hello',\n  'world!',\n  11,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpsl7s8mbq.js:39:12)\n    at Object.<anonymous> (/tmp/tmpsl7s8mbq.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello', 'world!', 'Hello', 'world!', 11, 5 ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = txt.split(/\\s+/);\n    let res = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            res.push(arr[i]);\n        }\n    }\n    return res;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293104,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpbb08hh8u.js:25:12)\n    at Object.<anonymous> (/tmp/tmpbb08hh8u.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = txt.split(/\\s+/);\n    let count = 0;\n    let result = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            result.push(arr[i]);\n            count++;\n        }\n    }\n    if (count === 0) {\n        count = count_lower_case_letters(txt);\n        if (count % 2 === 1) {\n            result.push(count);\n        }\n    }\n    return result;\n}\n\nfunction count_lower_case_letters(txt: string): number {\n    let count = 0;\n    for (let i = 0; i < txt.length; i++) {\n        if (txt[i].toLowerCase() === txt[i]) {\n            count++;\n        }\n    }\n    return count;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293104,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpoyye7euy.js:42:12)\n    at Object.<anonymous> (/tmp/tmpoyye7euy.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    return txt.split(/\\s+/);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmp5i7lnsyi.js:18:12)\n    at Object.<anonymous> (/tmp/tmp5i7lnsyi.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    return txt.split(/\\s+/);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmprflk7f4i.js:18:12)\n    at Object.<anonymous> (/tmp/tmprflk7f4i.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    return txt.split(/\\s+/);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmprflk7f4i.js:18:12)\n    at Object.<anonymous> (/tmp/tmprflk7f4i.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = [];\n    let count = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "../../../../../../tmp/tmpr_ndbdk4.ts(86,9): error TS1005: ',' expected.\n../../../../../../tmp/tmpr_ndbdk4.ts(102,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = txt.split(/\\s+/);\n    let count = 0;\n    let result = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] !== \"\") {\n            result.push(arr[i]);\n        }\n    }\n    for (let i = 0; i < result.length; i++) {\n        let count = 0;\n        for (let j = 0; j < result[i].length; j++) {\n            if (result[i][j] === result[i][j].toLowerCase()) {\n                count++;\n            }\n        }\n        if (count % 2 === 1) {\n            count = count + 1;\n        }\n        if (count > 0) {\n            result[i] = count;\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293104,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  6\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpalkfpc62.js:39:12)\n    at Object.<anonymous> (/tmp/tmpalkfpc62.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 6 ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let words = txt.split(/\\s+/);\n    let count = 0;\n    let result = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n        if (word.length > 0) {\n            result.push(word);\n            count += word.length;\n        }\n    }\n    let count_letters = 0;\n    let result_letters = [];\n    for (let i = 0; i < 26; i++) {\n        let letter = String.fromCharCode(i + 97);\n        let count_letter = 0;\n        for (let j = 0; j < result.length; j++) {\n            let word = result[j];\n            if (word.indexOf(letter) > -1) {\n                count_letter += word.length;\n            }\n        }\n        if (count_letter % 2 === 1) {\n            count_letters += count_letter;\n        }\n    }\n    return result_letters.length === 0 ? count_letters : result_letters;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n27\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmp06h9_qj4.js:42:12)\n    at Object.<anonymous> (/tmp/tmp06h9_qj4.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 27,\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let words = txt.split(/\\s+/);\n    let result = [];\n    let count = 0;\n    for (let word of words) {\n        if (word.length > 0) {\n            result.push(word);\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmp4b0gbop9.js:26:12)\n    at Object.<anonymous> (/tmp/tmp4b0gbop9.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = txt.split(/\\s+/);\n    let count = 0;\n    let res = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] !== \"\") {\n            res.push(arr[i]);\n        }\n    }\n    for (let i = 0; i < res.length; i++) {\n        if (res[i] === \"\") {\n            count++;\n        }\n    }\n    let count2 = 0;\n    let res2 = [];\n    for (let i = 0; i < res.length; i++) {\n        if (res[i] !== \"\") {\n            res2.push(res[i]);\n        }\n    }\n    for (let i = 0; i < res2.length; i++) {\n        if (res2[i] === \"\") {\n            count2++;\n        }\n    }\n    if (count === 0) {\n        return count2;\n    }\n    return res2;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293106,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmp8vn56fhn.js:45:12)\n    at Object.<anonymous> (/tmp/tmp8vn56fhn.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let words = txt.split(/\\s+/);\n    let count = 0;\n    let count_odd = 0;\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > 1) {\n            count++;\n        }\n        if (words[i].length > 1) {\n            count_odd++;\n        }\n    }\n    return count === 0 ? count_odd : count;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293106,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpn64hp7gd.js:28:12)\n    at Object.<anonymous> (/tmp/tmpn64hp7gd.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let words = txt.split(/\\s+/);\n    let count = 0;\n    let result = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > 0) {\n            result.push(words[i]);\n            count += words[i].length;\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmp055w9rnd.js:27:12)\n    at Object.<anonymous> (/tmp/tmp055w9rnd.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = [];\n    let count = 0;\n    let i = 0;\n    let len = txt.length;\n    let word = '';\n    while (i < len) {\n        if (txt[i] === ' ') {\n            if (word !== '') {\n                arr.push(word);\n                word = '';\n            }\n        } else if (txt[i] === ',') {\n            if (word !== '') {\n                arr.push(word);\n                word = '';\n            }\n        } else {\n            word += txt[i];\n        }\n        i++;\n    }\n    if (word !== '') {\n        arr.push(word);\n    }\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 1) {\n            count++;\n        }\n    }\n    let result = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 1) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293106,
      "stdout": "../../../../../../tmp/tmpbgt4ytlc.ts(13,9): error TS2451: Cannot redeclare block-scoped variable 'count'.\n../../../../../../tmp/tmpbgt4ytlc.ts(36,9): error TS2451: Cannot redeclare block-scoped variable 'count'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n  // split on whitespace\n  const words = txt.split(/\\s+/);\n  // split on commas\n  const commas = txt.split(/,+/);\n  // split on lower-case letters\n  const lower = txt.split(/[a-z]+/);\n  // return the number of lower-case letters with odd order in the alphabet\n  return lower.length - lower.filter(x => x.length % 2 === 1).length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293106,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpz6hsy2lk.js:24:12)\n    at Object.<anonymous> (/tmp/tmpz6hsy2lk.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    return txt.split(/\\s+/);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmp5i7lnsyi.js:18:12)\n    at Object.<anonymous> (/tmp/tmp5i7lnsyi.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let words = txt.split(/\\s+/);\n    let lower_case_odd_order = [];\n    let lower_case_even_order = [];\n    let upper_case_odd_order = [];\n    let upper_case_even_order = [];\n    let num_lower_case_odd_order = 0;\n    let num_lower_case_even_order = 0;\n    let num_upper_case_odd_order = 0;\n    let num_upper_case_even_order = 0;\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n        if (word.length > 1) {\n            if (word.charAt(0).toLowerCase() === word.charAt(0)) {\n                if (word.charAt(1).toLowerCase() === word.charAt(1)) {\n                    lower_case_odd_order.push(word);\n                    num_lower_case_odd_order++;\n                } else {\n                    lower_case_even_order.push(word);\n                    num_lower_case_even_order++;\n                }\n            } else {\n                if (word.charAt(1).toLowerCase() === word.charAt(1)) {\n                    upper_case_odd_order.push(word);\n                    num_upper_case_odd_order++;\n                } else {\n                    upper_case_even_order.push(word);\n                    num_upper_case_even_order++;\n                }\n            }\n        }\n    }\n    if (num_lower_case_odd_order === 0) {\n        return num_lower_case_even_order;\n    } else if (num_lower_case_even_order === 0) {\n        return num_lower_case_odd_order;\n    } else if (num_upper_case_odd_order === 0) {\n        return num_upper_case_even_order;\n    } else if (num_upper_case_even_order === 0) {\n        return num_upper_case_odd_order;\n    } else {\n        return [...lower_case_odd_order, ...\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293106,
      "stdout": "../../../../../../tmp/tmpsell90s0.ts(53,9): error TS1005: ',' expected.\n../../../../../../tmp/tmpsell90s0.ts(69,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n  let arr = txt.split(/\\s+/);\n  let count = 0;\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i].length > 0) {\n      count++;\n      result.push(arr[i]);\n    }\n  }\n  let count2 = 0;\n  let result2 = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i].length > 0) {\n      count2++;\n      result2.push(arr[i]);\n    }\n  }\n  if (count2 > 0) {\n    return result2;\n  } else {\n    return result;\n  }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293106,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpoi_2ft58.js:40:12)\n    at Object.<anonymous> (/tmp/tmpoi_2ft58.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = txt.split(/\\s+/);\n    let res = [];\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            res.push(arr[i]);\n        }\n    }\n    return res;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmp9f1h92ap.js:26:12)\n    at Object.<anonymous> (/tmp/tmp9f1h92ap.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n  let arr = txt.split(/\\s+/);\n  let res = [];\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === \"\") continue;\n    res.push(arr[i]);\n  }\n  for (let i = 0; i < res.length; i++) {\n    let c = res[i].charCodeAt(0);\n    if (c >= 65 && c <= 90) {\n      count += 1;\n    }\n    if (c >= 97 && c <= 122) {\n      count += 1;\n    }\n  }\n  return res.length === 0 ? count : res;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293106,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpf5dpjn1f.js:35:12)\n    at Object.<anonymous> (/tmp/tmpf5dpjn1f.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = [];\n    let count = 0;\n    let count2 = 0;\n    let count3 = 0;\n    let count4 = 0;\n    let count5 = 0;\n    let count6 = 0;\n    let count7 = 0;\n    let count8 = 0;\n    let count9 = 0;\n    let count10 = 0;\n    let count11 = 0;\n    let count12 = 0;\n    let count13 = 0;\n    let count14 = 0;\n    let count15 = 0;\n    let count16 = 0;\n    let count17 = 0;\n    let count18 = 0;\n    let count19 = 0;\n    let count20 = 0;\n    let count21 = 0;\n    let count22 = 0;\n    let count23 = 0;\n    let count24 = 0;\n    let count25 = 0;\n    let count26 = 0;\n    let count27 = 0;\n    let count28 = 0;\n    let count29 = 0;\n    let count30 = 0;\n    let count31 = 0;\n    let count32 = 0;\n    let count33 = 0;\n    let count34 = 0;\n    let count35 = 0;\n    let count36 = 0;\n    let count37 = 0;\n    let count38 = 0;\n    let count39 = 0;\n    let count40 = 0;\n    let count41 = 0;\n    let count42 = 0;\n    let count43 = 0;\n    let count44 = 0;\n    let count45 = 0;\n    let count46 = 0;\n    let count47 = 0;\n    let count48 = 0;\n    let count49 = 0;\n    let count50 = 0;\n    let count51 = 0;\n    let count52 = 0;\n    let count53 = 0;\n    let count54 = 0;\n    let count55 = 0;\n    let count56 = 0;\n    let count57 = 0;\n    let count58 = 0;\n    let count59 = 0;\n    let count60 = 0;\n    let count61 = 0;\n    let count62 = 0;\n    let count63 = 0;\n    let count\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293100,
      "stdout": "../../../../../../tmp/tmpwd1qi8hk.ts(93,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let words = txt.split(/\\s+/);\n    let count = 0;\n    let result = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n        if (word.length > 0) {\n            result.push(word);\n            count += word.length;\n        }\n    }\n    let count_lower = 0;\n    let count_upper = 0;\n    let count_lower_odd = 0;\n    let count_upper_odd = 0;\n    for (let i = 0; i < result.length; i++) {\n        let word = result[i];\n        if (word.length > 0) {\n            count_lower += word.length;\n            count_upper += word.length;\n            count_lower_odd += word.length;\n            count_upper_odd += word.length;\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293106,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmp2n2d3f1s.js:41:12)\n    at Object.<anonymous> (/tmp/tmp2n2d3f1s.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = txt.split(/\\s+/);\n    let res = [];\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            res.push(arr[i]);\n            count += arr[i].length;\n        }\n    }\n    let count_lower = 0;\n    let count_upper = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            let ch = arr[i].charCodeAt(0);\n            if (ch >= 65 && ch <= 90) {\n                count_lower += 1;\n            } else if (ch >= 97 && ch <= 122) {\n                count_upper += 1;\n            }\n        }\n    }\n    if (count_lower % 2 === 1) {\n        return res;\n    } else if (count_upper % 2 === 1) {\n        return res;\n    } else {\n        return count;\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293106,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpua_c_6c0.js:48:12)\n    at Object.<anonymous> (/tmp/tmpua_c_6c0.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n  let arr = txt.split(/\\s+/);\n  let arr2 = [];\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] !== \"\") {\n      arr2.push(arr[i]);\n    }\n  }\n  for (let i = 0; i < arr2.length; i++) {\n    let count2 = 0;\n    for (let j = 0; j < arr2[i].length; j++) {\n      if (arr2[i][j] === arr2[i][j].toLowerCase()) {\n        count2++;\n      }\n    }\n    if (count2 % 2 === 1) {\n      count++;\n    }\n  }\n  return count;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293106,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpswk8fa0p.js:36:12)\n    at Object.<anonymous> (/tmp/tmpswk8fa0p.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n  // const txt = \"Hello,world!\"\n  // const txt = \"Hello world!\"\n  // const txt = \"abcdef\"\n  // const txt = \"Hello,world!\"\n  // const txt = \"Hello,world!\"\n  // const txt = \"Hello,world!\"\n  // const txt = \"Hello,world!\"\n  // const txt = \"Hello,world!\"\n  // const txt = \"Hello,world!\"\n  // const txt = \"Hello,world!\"\n  // const txt = \"Hello,world!\"\n  // const txt = \"Hello,world!\"\n  // const txt = \"Hello,world!\"\n  // const txt = \"Hello,world!\"\n  // const txt = \"Hello,world!\"\n  // const txt = \"Hello,world!\"\n  // const txt = \"Hello,world!\"\n  // const txt = \"Hello,world!\"\n  // const txt = \"Hello,world!\"\n  // const txt = \"Hello,world!\"\n  // const txt = \"Hello,world!\"\n  // const txt = \"Hello,world!\"\n  // const txt = \"Hello,world!\"\n  // const txt = \"Hello,world!\"\n  // const txt = \"Hello,world!\"\n  // const txt = \"Hello,world!\"\n  // const txt = \"Hello,world!\"\n  // const txt = \"Hello,world!\"\n  // const txt = \"Hello,world!\"\n  // const txt = \"Hello,world!\"\n  // const txt = \"Hello,world!\"\n  // const txt = \"Hello,world!\"\n  // const txt = \"Hello,world!\"\n  // const txt = \"Hello,world!\"\n  // const txt = \"Hello,world!\"\n  // const txt = \"Hello,world!\"\n  // const txt = \"Hello,world!\"\n  // const txt = \"Hello,world!\"\n  // const txt = \"Hello,world!\"\n  // const txt = \"Hello,world!\"\n  // const txt = \"Hello,world!\"\n  // const txt = \"Hello,world!\"\n  // const txt = \"Hello,world\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293106,
      "stdout": "../../../../../../tmp/tmp9p6l8yup.ts(71,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let words = txt.split(/\\s+/);\n    let count = 0;\n    let result = [];\n    for (let word of words) {\n        if (word.length > 0) {\n            result.push(word);\n            count += word.length;\n        }\n    }\n    let letters = [];\n    for (let i = 0; i < 26; i++) {\n        let letter = String.fromCharCode(i);\n        let count = 0;\n        for (let word of words) {\n            if (word.includes(letter)) {\n                count++;\n            }\n        }\n        if (count % 2 === 1) {\n            letters.push(letter);\n        }\n    }\n    return result.concat(letters);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293106,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpjqtowm0x.js:40:12)\n    at Object.<anonymous> (/tmp/tmpjqtowm0x.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = txt.split(/\\s+/);\n    let res = [];\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            res.push(arr[i]);\n        }\n    }\n    for (let i = 0; i < res.length; i++) {\n        if (res[i].length > 0) {\n            count += res[i].length;\n        }\n    }\n    let count2 = 0;\n    for (let i = 0; i < res.length; i++) {\n        if (res[i].length > 0) {\n            count2 += res[i].length;\n        }\n    }\n    return count2;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293106,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n11\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpz17oxuvc.js:36:12)\n    at Object.<anonymous> (/tmp/tmpz17oxuvc.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 11,\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let words = txt.split(/\\s+/);\n    let lowercase = [];\n    let lowercase_odd = [];\n    let lowercase_even = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n        let lowercase_count = 0;\n        for (let j = 0; j < word.length; j++) {\n            let letter = word[j];\n            if (letter === ',') {\n                lowercase_odd.push(lowercase_count);\n                lowercase_count = 0;\n            } else if (letter === '.') {\n                lowercase_even.push(lowercase_count);\n                lowercase_count = 0;\n            } else {\n                lowercase_count++;\n            }\n        }\n        lowercase.push(lowercase_count);\n    }\n    let lowercase_odd_count = 0;\n    for (let i = 0; i < lowercase.length; i++) {\n        let count = lowercase[i];\n        if (count % 2 === 1) {\n            lowercase_odd_count += count;\n        }\n    }\n    let lowercase_even_count = 0;\n    for (let i = 0; i < lowercase.length; i++) {\n        let count = lowercase[i];\n        if (count % 2 === 0) {\n            lowercase_even_count += count;\n        }\n    }\n    return [...words, lowercase_odd_count, lowercase_even_count];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293106,
      "stdout": "../../../../../../tmp/tmptkav95fr.ts(47,5): error TS2322: Type '(string | number)[]' is not assignable to type 'number | string[]'.\n  Type '(string | number)[]' is not assignable to type 'string[]'.\n    Type 'string | number' is not assignable to type 'string'.\n      Type 'number' is not assignable to type 'string'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = txt.split(/\\s+/);\n    let res = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            res.push(arr[i]);\n        }\n    }\n    return res;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293104,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpbb08hh8u.js:25:12)\n    at Object.<anonymous> (/tmp/tmpbb08hh8u.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = txt.split(/\\s+/);\n    let arr2 = [];\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] !== \"\") {\n            arr2.push(arr[i]);\n        }\n    }\n    for (let i = 0; i < arr2.length; i++) {\n        if (arr2[i] !== \"\") {\n            count += arr2[i].length;\n        }\n    }\n    return arr2;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293106,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpic7depw9.js:31:12)\n    at Object.<anonymous> (/tmp/tmpic7depw9.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n  return txt.split(/\\s+/);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpzy4one0w.js:18:12)\n    at Object.<anonymous> (/tmp/tmpzy4one0w.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n  return txt.split(/\\s+/);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpzy4one0w.js:18:12)\n    at Object.<anonymous> (/tmp/tmpzy4one0w.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n  let arr = [];\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293106,
      "stdout": "../../../../../../tmp/tmpyzbitgda.ts(86,9): error TS1005: ',' expected.\n../../../../../../tmp/tmpyzbitgda.ts(102,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let words = txt.split(/\\s+/);\n    let count = 0;\n    let res = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > 0) {\n            res.push(words[i]);\n        }\n    }\n    return res;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293107,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpa3e70on4.js:26:12)\n    at Object.<anonymous> (/tmp/tmpa3e70on4.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = txt.split(/\\s+/);\n    let res = [];\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            res.push(arr[i]);\n        }\n    }\n    for (let i = 0; i < res.length; i++) {\n        if (res[i].length > 0) {\n            count += res[i].length;\n        }\n    }\n    let count2 = 0;\n    for (let i = 0; i < res.length; i++) {\n        if (res[i].length > 0) {\n            count2 += res[i].length;\n        }\n    }\n    if (count2 % 2 === 1) {\n        return res;\n    } else {\n        return count;\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293107,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n12\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpbr58sprc.js:42:12)\n    at Object.<anonymous> (/tmp/tmpbr58sprc.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 12,\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let words = txt.split(/\\s+/);\n    let lowerCase = [];\n    let upperCase = [];\n    let num = 0;\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > 0) {\n            if (words[i].toLowerCase() === words[i]) {\n                lowerCase.push(words[i]);\n            } else {\n                upperCase.push(words[i]);\n            }\n        }\n    }\n    if (lowerCase.length > 0) {\n        num = lowerCase.reduce((a, b) => a + b.length, 0);\n    }\n    if (upperCase.length > 0) {\n        num = upperCase.reduce((a, b) => a + b.length, 0);\n    }\n    return num;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293107,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpsql837zd.js:37:12)\n    at Object.<anonymous> (/tmp/tmpsql837zd.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = [];\n    let arr2 = [];\n    let arr3 = [];\n    let arr4 = [];\n    let arr5 = [];\n    let arr6 = [];\n    let arr7 = [];\n    let arr8 = [];\n    let arr9 = [];\n    let arr10 = [];\n    let arr11 = [];\n    let arr12 = [];\n    let arr13 = [];\n    let arr14 = [];\n    let arr15 = [];\n    let arr16 = [];\n    let arr17 = [];\n    let arr18 = [];\n    let arr19 = [];\n    let arr20 = [];\n    let arr21 = [];\n    let arr22 = [];\n    let arr23 = [];\n    let arr24 = [];\n    let arr25 = [];\n    let arr26 = [];\n    let arr27 = [];\n    let arr28 = [];\n    let arr29 = [];\n    let arr30 = [];\n    let arr31 = [];\n    let arr32 = [];\n    let arr33 = [];\n    let arr34 = [];\n    let arr35 = [];\n    let arr36 = [];\n    let arr37 = [];\n    let arr38 = [];\n    let arr39 = [];\n    let arr40 = [];\n    let arr41 = [];\n    let arr42 = [];\n    let arr43 = [];\n    let arr44 = [];\n    let arr45 = [];\n    let arr46 = [];\n    let arr47 = [];\n    let arr48 = [];\n    let arr49 = [];\n    let arr50 = [];\n    let arr51 = [];\n    let arr52 = [];\n    let arr53 = [];\n    let arr54 = [];\n    let arr55 = [];\n    let arr56 = [];\n    let arr57 = [];\n    let arr58 = [];\n    let arr59 = [];\n    let arr60 = [];\n    let arr61 = [];\n    let arr62 = [];\n    let arr63 = [];\n    let arr64 = [];\n    let arr65 = [];\n    let arr66 = [];\n    let arr67 = [];\n    let arr68 = [];\n    let arr69 = [];\n    let arr70 = [];\n    let arr71 = [];\n    let arr72 = [];\n    let arr73 = [];\n    let\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "../../../../../../tmp/tmpo93cd4ui.ts(86,9): error TS1005: ',' expected.\n../../../../../../tmp/tmpo93cd4ui.ts(102,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n  return txt.split(/\\s+/);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpzy4one0w.js:18:12)\n    at Object.<anonymous> (/tmp/tmpzy4one0w.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = txt.split(/\\s+/);\n    let res = [];\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            res.push(arr[i]);\n        }\n    }\n    for (let i = 0; i < res.length; i++) {\n        if (res[i].length > 0) {\n            count += res[i].length;\n        }\n    }\n    let res2 = [];\n    for (let i = 0; i < res.length; i++) {\n        if (res[i].length > 0) {\n            let count2 = 0;\n            for (let j = 0; j < res[i].length; j++) {\n                if (res[i][j].toLowerCase() === res[i][j]) {\n                    count2 += 1;\n                }\n            }\n            if (count2 % 2 === 1) {\n                res2.push(res[i]);\n            }\n        }\n    }\n    return res2;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293107,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpnz1zk187.js:44:12)\n    at Object.<anonymous> (/tmp/tmpnz1zk187.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = [];\n    let count = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "../../../../../../tmp/tmpr_ndbdk4.ts(86,9): error TS1005: ',' expected.\n../../../../../../tmp/tmpr_ndbdk4.ts(102,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n  return txt.split(/\\s+/);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpzy4one0w.js:18:12)\n    at Object.<anonymous> (/tmp/tmpzy4one0w.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    return txt.split(/\\s+/);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmprflk7f4i.js:18:12)\n    at Object.<anonymous> (/tmp/tmprflk7f4i.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = txt.split(/\\s+/);\n    let res = [];\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            res.push(arr[i]);\n        }\n    }\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            count += arr[i].length;\n        }\n    }\n    let res2 = [];\n    for (let i = 0; i < res.length; i++) {\n        if (res[i].length > 0) {\n            res2.push(res[i]);\n        }\n    }\n    let res3 = [];\n    for (let i = 0; i < res2.length; i++) {\n        if (res2[i].length > 0) {\n            res3.push(res2[i]);\n        }\n    }\n    let res4 = [];\n    for (let i = 0; i < res3.length; i++) {\n        if (res3[i].length > 0) {\n            res4.push(res3[i]);\n        }\n    }\n    let res5 = [];\n    for (let i = 0; i < res4.length; i++) {\n        if (res4[i].length > 0) {\n            res5.push(res4[i]);\n        }\n    }\n    return res5;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293107,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmppr0iayso.js:55:12)\n    at Object.<anonymous> (/tmp/tmppr0iayso.js:63:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = [];\n    let count = 0;\n    let count2 = 0;\n    let count3 = 0;\n    let count4 = 0;\n    let count5 = 0;\n    let count6 = 0;\n    let count7 = 0;\n    let count8 = 0;\n    let count9 = 0;\n    let count10 = 0;\n    let count11 = 0;\n    let count12 = 0;\n    let count13 = 0;\n    let count14 = 0;\n    let count15 = 0;\n    let count16 = 0;\n    let count17 = 0;\n    let count18 = 0;\n    let count19 = 0;\n    let count20 = 0;\n    let count21 = 0;\n    let count22 = 0;\n    let count23 = 0;\n    let count24 = 0;\n    let count25 = 0;\n    let count26 = 0;\n    let count27 = 0;\n    let count28 = 0;\n    let count29 = 0;\n    let count30 = 0;\n    let count31 = 0;\n    let count32 = 0;\n    let count33 = 0;\n    let count34 = 0;\n    let count35 = 0;\n    let count36 = 0;\n    let count37 = 0;\n    let count38 = 0;\n    let count39 = 0;\n    let count40 = 0;\n    let count41 = 0;\n    let count42 = 0;\n    let count43 = 0;\n    let count44 = 0;\n    let count45 = 0;\n    let count46 = 0;\n    let count47 = 0;\n    let count48 = 0;\n    let count49 = 0;\n    let count50 = 0;\n    let count51 = 0;\n    let count52 = 0;\n    let count53 = 0;\n    let count54 = 0;\n    let count55 = 0;\n    let count56 = 0;\n    let count57 = 0;\n    let count58 = 0;\n    let count59 = 0;\n    let count60 = 0;\n    let count61 = 0;\n    let count62 = 0;\n    let count63 = 0;\n    let count\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293100,
      "stdout": "../../../../../../tmp/tmpwd1qi8hk.ts(93,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = [];\n    let count = 0;\n    let count2 = 0;\n    let count3 = 0;\n    let count4 = 0;\n    let count5 = 0;\n    let count6 = 0;\n    let count7 = 0;\n    let count8 = 0;\n    let count9 = 0;\n    let count10 = 0;\n    let count11 = 0;\n    let count12 = 0;\n    let count13 = 0;\n    let count14 = 0;\n    let count15 = 0;\n    let count16 = 0;\n    let count17 = 0;\n    let count18 = 0;\n    let count19 = 0;\n    let count20 = 0;\n    let count21 = 0;\n    let count22 = 0;\n    let count23 = 0;\n    let count24 = 0;\n    let count25 = 0;\n    let count26 = 0;\n    let count27 = 0;\n    let count28 = 0;\n    let count29 = 0;\n    let count30 = 0;\n    let count31 = 0;\n    let count32 = 0;\n    let count33 = 0;\n    let count34 = 0;\n    let count35 = 0;\n    let count36 = 0;\n    let count37 = 0;\n    let count38 = 0;\n    let count39 = 0;\n    let count40 = 0;\n    let count41 = 0;\n    let count42 = 0;\n    let count43 = 0;\n    let count44 = 0;\n    let count45 = 0;\n    let count46 = 0;\n    let count47 = 0;\n    let count48 = 0;\n    let count49 = 0;\n    let count50 = 0;\n    let count51 = 0;\n    let count52 = 0;\n    let count53 = 0;\n    let count54 = 0;\n    let count55 = 0;\n    let count56 = 0;\n    let count57 = 0;\n    let count58 = 0;\n    let count59 = 0;\n    let count60 = 0;\n    let count61 = 0;\n    let count62 = 0;\n    let count63 = 0;\n    let count\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293100,
      "stdout": "../../../../../../tmp/tmpwd1qi8hk.ts(93,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    return txt.split(/\\s+/);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmprflk7f4i.js:18:12)\n    at Object.<anonymous> (/tmp/tmprflk7f4i.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = txt.split(/\\s+/);\n    let arr2 = [];\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === \"\") {\n            continue;\n        }\n        arr2.push(arr[i]);\n    }\n    for (let i = 0; i < arr2.length; i++) {\n        if (arr2[i] === \"\") {\n            continue;\n        }\n        if (arr2[i].length === 1) {\n            count += arr2[i].toLowerCase().charCodeAt(0) - 97;\n        }\n    }\n    return arr2;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293108,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmp20o497_u.js:35:12)\n    at Object.<anonymous> (/tmp/tmp20o497_u.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = [];\n    let arr2 = [];\n    let count = 0;\n    let count2 = 0;\n    let count3 = 0;\n    let count4 = 0;\n    let count5 = 0;\n    let count6 = 0;\n    let count7 = 0;\n    let count8 = 0;\n    let count9 = 0;\n    let count10 = 0;\n    let count11 = 0;\n    let count12 = 0;\n    let count13 = 0;\n    let count14 = 0;\n    let count15 = 0;\n    let count16 = 0;\n    let count17 = 0;\n    let count18 = 0;\n    let count19 = 0;\n    let count20 = 0;\n    let count21 = 0;\n    let count22 = 0;\n    let count23 = 0;\n    let count24 = 0;\n    let count25 = 0;\n    let count26 = 0;\n    let count27 = 0;\n    let count28 = 0;\n    let count29 = 0;\n    let count30 = 0;\n    let count31 = 0;\n    let count32 = 0;\n    let count33 = 0;\n    let count34 = 0;\n    let count35 = 0;\n    let count36 = 0;\n    let count37 = 0;\n    let count38 = 0;\n    let count39 = 0;\n    let count40 = 0;\n    let count41 = 0;\n    let count42 = 0;\n    let count43 = 0;\n    let count44 = 0;\n    let count45 = 0;\n    let count46 = 0;\n    let count47 = 0;\n    let count48 = 0;\n    let count49 = 0;\n    let count50 = 0;\n    let count51 = 0;\n    let count52 = 0;\n    let count53 = 0;\n    let count54 = 0;\n    let count55 = 0;\n    let count56 = 0;\n    let count57 = 0;\n    let count58 = 0;\n    let count59 = 0;\n    let count60 = 0;\n    let count61 = 0;\n    let count62 = 0;\n    let count63\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293108,
      "stdout": "../../../../../../tmp/tmpd5o6yna7.ts(93,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let words = txt.split(/\\s+/);\n    let lowercase = [];\n    let lowercase_odd = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n        let lower = word.toLowerCase();\n        lowercase.push(lower);\n        if (lower.charAt(0) === lower.charAt(0).toUpperCase()) {\n            lowercase_odd.push(lower);\n        }\n    }\n    return lowercase_odd.length > 0 ? lowercase_odd : lowercase;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293108,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hello',\n  'world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpglpnlt2a.js:28:12)\n    at Object.<anonymous> (/tmp/tmpglpnlt2a.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hello', 'world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n  // return txt.split(/\\s+/g);\n  return txt.split(/\\s+/g);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmp04r06k11.js:19:12)\n    at Object.<anonymous> (/tmp/tmp04r06k11.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = txt.split(/\\s+/);\n    let res = [];\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            res.push(arr[i]);\n        }\n    }\n    for (let i = 0; i < res.length; i++) {\n        let c = res[i].length;\n        if (c > 0) {\n            count += c;\n        }\n    }\n    return res.length > 0 ? res : count;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293108,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpc87gp2wd.js:32:12)\n    at Object.<anonymous> (/tmp/tmpc87gp2wd.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = txt.split(/\\s+/);\n    let res = [];\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            res.push(arr[i]);\n        }\n    }\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            count += arr[i].length;\n        }\n    }\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            count += arr[i].length;\n        }\n    }\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            count += arr[i].length;\n        }\n    }\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            count += arr[i].length;\n        }\n    }\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            count += arr[i].length;\n        }\n    }\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            count += arr[i].length;\n        }\n    }\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            count += arr[i].length;\n        }\n    }\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            count += arr[i].length;\n        }\n    }\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            count += arr[i].length;\n        }\n    }\n    for (let i = 0; i < arr.length\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293109,
      "stdout": "../../../../../../tmp/tmpwgjkiufs.ts(66,1): error TS1005: ';' expected.\n../../../../../../tmp/tmpwgjkiufs.ts(66,9): error TS1005: ')' expected.\n../../../../../../tmp/tmpwgjkiufs.ts(82,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = txt.split(/\\s+/);\n    let count = 0;\n    let result = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            result.push(arr[i]);\n            count += arr[i].length;\n        }\n    }\n    let count_letters = 0;\n    let count_letters_odd = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let letters = arr[i].split('').map(c => c.charCodeAt(0) - 'a'.charCodeAt(0));\n        count_letters += letters.length;\n        for (let j = 0; j < letters.length; j++) {\n            if (letters[j] % 2 === 1) {\n                count_letters_odd++;\n            }\n        }\n    }\n    return result.length === 1 ? result[0] : result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Hello,world!'\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmplxshugy_.js:38:12)\n    at Object.<anonymous> (/tmp/tmplxshugy_.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Hello,world!',\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = txt.split(/\\s+/);\n    let count = 0;\n    let result = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === \"\") {\n            continue;\n        }\n        let count = 0;\n        let arr2 = arr[i].split(/[,]/);\n        for (let j = 0; j < arr2.length; j++) {\n            if (arr2[j] === \"\") {\n                continue;\n            }\n            let count2 = 0;\n            let arr3 = arr2[j].split(/[a-z]/);\n            for (let k = 0; k < arr3.length; k++) {\n                if (arr3[k] === \"\") {\n                    continue;\n                }\n                count2 += arr3[k].charCodeAt(0) - 97;\n            }\n            count += count2;\n        }\n        result.push(arr[i]);\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpr6qbzac3.js:43:12)\n    at Object.<anonymous> (/tmp/tmpr6qbzac3.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = txt.split(/\\s+/);\n    let count = 0;\n    let res = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            count++;\n            if (arr[i].length > 1) {\n                res.push(arr[i]);\n            }\n        }\n    }\n    if (count === 0) {\n        return arr.length;\n    }\n    return res;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpo05kwkh8.js:32:12)\n    at Object.<anonymous> (/tmp/tmpo05kwkh8.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = [];\n    let count = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "../../../../../../tmp/tmpr_ndbdk4.ts(86,9): error TS1005: ',' expected.\n../../../../../../tmp/tmpr_ndbdk4.ts(102,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = [];\n    let count = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "../../../../../../tmp/tmpr_ndbdk4.ts(86,9): error TS1005: ',' expected.\n../../../../../../tmp/tmpr_ndbdk4.ts(102,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = [];\n    let count = 0;\n    let count2 = 0;\n    let count3 = 0;\n    let count4 = 0;\n    let count5 = 0;\n    let count6 = 0;\n    let count7 = 0;\n    let count8 = 0;\n    let count9 = 0;\n    let count10 = 0;\n    let count11 = 0;\n    let count12 = 0;\n    let count13 = 0;\n    let count14 = 0;\n    let count15 = 0;\n    let count16 = 0;\n    let count17 = 0;\n    let count18 = 0;\n    let count19 = 0;\n    let count20 = 0;\n    let count21 = 0;\n    let count22 = 0;\n    let count23 = 0;\n    let count24 = 0;\n    let count25 = 0;\n    let count26 = 0;\n    let count27 = 0;\n    let count28 = 0;\n    let count29 = 0;\n    let count30 = 0;\n    let count31 = 0;\n    let count32 = 0;\n    let count33 = 0;\n    let count34 = 0;\n    let count35 = 0;\n    let count36 = 0;\n    let count37 = 0;\n    let count38 = 0;\n    let count39 = 0;\n    let count40 = 0;\n    let count41 = 0;\n    let count42 = 0;\n    let count43 = 0;\n    let count44 = 0;\n    let count45 = 0;\n    let count46 = 0;\n    let count47 = 0;\n    let count48 = 0;\n    let count49 = 0;\n    let count50 = 0;\n    let count51 = 0;\n    let count52 = 0;\n    let count53 = 0;\n    let count54 = 0;\n    let count55 = 0;\n    let count56 = 0;\n    let count57 = 0;\n    let count58 = 0;\n    let count59 = 0;\n    let count60 = 0;\n    let count61 = 0;\n    let count62 = 0;\n    let count63 = 0;\n    let count\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293100,
      "stdout": "../../../../../../tmp/tmpwd1qi8hk.ts(93,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = txt.split(/\\s+/);\n    let arr2 = [];\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] !== \"\") {\n            arr2.push(arr[i]);\n        }\n    }\n    for (let i = 0; i < arr2.length; i++) {\n        if (arr2[i] !== \"\") {\n            count += arr2[i].length;\n        }\n    }\n    let arr3 = [];\n    for (let i = 0; i < arr2.length; i++) {\n        if (arr2[i] !== \"\") {\n            arr3.push(arr2[i]);\n        }\n    }\n    return arr3;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpz_cki7y3.js:37:12)\n    at Object.<anonymous> (/tmp/tmpz_cki7y3.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = txt.split(/\\s+/);\n    let arr2 = [];\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            arr2.push(arr[i]);\n        }\n    }\n    for (let i = 0; i < arr2.length; i++) {\n        let count2 = 0;\n        for (let j = 0; j < arr2[i].length; j++) {\n            if (arr2[i][j].toLowerCase() === arr2[i][j]) {\n                count2 += 1;\n            }\n        }\n        if (count2 % 2 === 1) {\n            count += 1;\n        }\n    }\n    return count === 0 ? arr2.length : count;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpe7v3rj9d.js:36:12)\n    at Object.<anonymous> (/tmp/tmpe7v3rj9d.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n  return txt.split(/\\s+/);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpzy4one0w.js:18:12)\n    at Object.<anonymous> (/tmp/tmpzy4one0w.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let words = txt.split(/\\s+/);\n    let count = 0;\n    let result = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n        if (word.length > 0) {\n            result.push(word);\n            count += word.length;\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpz6w97v6n.js:28:12)\n    at Object.<anonymous> (/tmp/tmpz6w97v6n.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = txt.split(/\\s+/);\n    let result = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpb_j3a7dt.js:25:12)\n    at Object.<anonymous> (/tmp/tmpb_j3a7dt.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let words = txt.split(/\\s+/);\n    let count = 0;\n    let result = [];\n    for (let word of words) {\n        if (word.length > 0) {\n            result.push(word);\n            count += word.length;\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmp7648ucuy.js:27:12)\n    at Object.<anonymous> (/tmp/tmp7648ucuy.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = [];\n    let count = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "../../../../../../tmp/tmpr_ndbdk4.ts(86,9): error TS1005: ',' expected.\n../../../../../../tmp/tmpr_ndbdk4.ts(102,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = [];\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293101,
      "stdout": "../../../../../../tmp/tmp5gx2bogy.ts(86,9): error TS1005: ',' expected.\n../../../../../../tmp/tmp5gx2bogy.ts(102,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = [];\n    let count = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "../../../../../../tmp/tmpr_ndbdk4.ts(86,9): error TS1005: ',' expected.\n../../../../../../tmp/tmpr_ndbdk4.ts(102,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = [];\n    let count = 0;\n    let count2 = 0;\n    let count3 = 0;\n    let count4 = 0;\n    let count5 = 0;\n    let count6 = 0;\n    let count7 = 0;\n    let count8 = 0;\n    let count9 = 0;\n    let count10 = 0;\n    let count11 = 0;\n    let count12 = 0;\n    let count13 = 0;\n    let count14 = 0;\n    let count15 = 0;\n    let count16 = 0;\n    let count17 = 0;\n    let count18 = 0;\n    let count19 = 0;\n    let count20 = 0;\n    let count21 = 0;\n    let count22 = 0;\n    let count23 = 0;\n    let count24 = 0;\n    let count25 = 0;\n    let count26 = 0;\n    let count27 = 0;\n    let count28 = 0;\n    let count29 = 0;\n    let count30 = 0;\n    let count31 = 0;\n    let count32 = 0;\n    let count33 = 0;\n    let count34 = 0;\n    let count35 = 0;\n    let count36 = 0;\n    let count37 = 0;\n    let count38 = 0;\n    let count39 = 0;\n    let count40 = 0;\n    let count41 = 0;\n    let count42 = 0;\n    let count43 = 0;\n    let count44 = 0;\n    let count45 = 0;\n    let count46 = 0;\n    let count47 = 0;\n    let count48 = 0;\n    let count49 = 0;\n    let count50 = 0;\n    let count51 = 0;\n    let count52 = 0;\n    let count53 = 0;\n    let count54 = 0;\n    let count55 = 0;\n    let count56 = 0;\n    let count57 = 0;\n    let count58 = 0;\n    let count59 = 0;\n    let count60 = 0;\n    let count61 = 0;\n    let count62 = 0;\n    let count63 = 0;\n    let count\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293100,
      "stdout": "../../../../../../tmp/tmpwd1qi8hk.ts(93,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    return txt.split(/\\s+/);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmprflk7f4i.js:18:12)\n    at Object.<anonymous> (/tmp/tmprflk7f4i.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = txt.split(/\\s+/);\n    let res = [];\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            res.push(arr[i]);\n        }\n    }\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            count += arr[i].length;\n        }\n    }\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            count += arr[i].length;\n        }\n    }\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            count += arr[i].length;\n        }\n    }\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            count += arr[i].length;\n        }\n    }\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            count += arr[i].length;\n        }\n    }\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            count += arr[i].length;\n        }\n    }\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            count += arr[i].length;\n        }\n    }\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            count += arr[i].length;\n        }\n    }\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            count += arr[i].length;\n        }\n    }\n    for (let i = 0; i < arr.length\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293109,
      "stdout": "../../../../../../tmp/tmpwgjkiufs.ts(66,1): error TS1005: ';' expected.\n../../../../../../tmp/tmpwgjkiufs.ts(66,9): error TS1005: ')' expected.\n../../../../../../tmp/tmpwgjkiufs.ts(82,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = [];\n    let count = 0;\n    let count2 = 0;\n    let count3 = 0;\n    let count4 = 0;\n    let count5 = 0;\n    let count6 = 0;\n    let count7 = 0;\n    let count8 = 0;\n    let count9 = 0;\n    let count10 = 0;\n    let count11 = 0;\n    let count12 = 0;\n    let count13 = 0;\n    let count14 = 0;\n    let count15 = 0;\n    let count16 = 0;\n    let count17 = 0;\n    let count18 = 0;\n    let count19 = 0;\n    let count20 = 0;\n    let count21 = 0;\n    let count22 = 0;\n    let count23 = 0;\n    let count24 = 0;\n    let count25 = 0;\n    let count26 = 0;\n    let count27 = 0;\n    let count28 = 0;\n    let count29 = 0;\n    let count30 = 0;\n    let count31 = 0;\n    let count32 = 0;\n    let count33 = 0;\n    let count34 = 0;\n    let count35 = 0;\n    let count36 = 0;\n    let count37 = 0;\n    let count38 = 0;\n    let count39 = 0;\n    let count40 = 0;\n    let count41 = 0;\n    let count42 = 0;\n    let count43 = 0;\n    let count44 = 0;\n    let count45 = 0;\n    let count46 = 0;\n    let count47 = 0;\n    let count48 = 0;\n    let count49 = 0;\n    let count50 = 0;\n    let count51 = 0;\n    let count52 = 0;\n    let count53 = 0;\n    let count54 = 0;\n    let count55 = 0;\n    let count56 = 0;\n    let count57 = 0;\n    let count58 = 0;\n    let count59 = 0;\n    let count60 = 0;\n    let count61 = 0;\n    let count62 = 0;\n    let count63 = 0;\n    let count\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293100,
      "stdout": "../../../../../../tmp/tmpwd1qi8hk.ts(93,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let words = txt.split(/\\s+/);\n    let count = 0;\n    let result = [];\n    for (let word of words) {\n        if (word.length > 0) {\n            result.push(word);\n            count += word.length;\n        }\n    }\n    let letters = [];\n    for (let i = 0; i < 26; i++) {\n        let letter = String.fromCharCode(i + 97);\n        let count = 0;\n        for (let word of words) {\n            if (word.includes(letter)) {\n                count++;\n            }\n        }\n        if (count % 2 === 1) {\n            letters.push(letter);\n        }\n    }\n    return result.concat(letters);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello',\n  'world!',\n  'd',\n  'e',\n  'r',\n  'w'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpu5cmc92i.js:39:12)\n    at Object.<anonymous> (/tmp/tmpu5cmc92i.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello', 'world!', 'd', 'e', 'r', 'w' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = txt.split(/\\s+/);\n    let res = [];\n    for (let i = 0; i < arr.length; i++) {\n        let arr2 = arr[i].split(/[,\\s]/);\n        for (let j = 0; j < arr2.length; j++) {\n            let arr3 = arr2[j].split(/[a-z]/);\n            for (let k = 0; k < arr3.length; k++) {\n                if (arr3[k].length % 2 === 1) {\n                    res.push(arr3[k]);\n                }\n            }\n        }\n    }\n    return res;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'H',\n  '!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmps5fpipx6.js:30:12)\n    at Object.<anonymous> (/tmp/tmps5fpipx6.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'H', '!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n  return txt.split(/\\s+/);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpzy4one0w.js:18:12)\n    at Object.<anonymous> (/tmp/tmpzy4one0w.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = txt.split(/\\s+/);\n    let arr2 = [];\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] !== \"\") {\n            arr2.push(arr[i]);\n        }\n    }\n    for (let i = 0; i < arr2.length; i++) {\n        if (arr2[i] !== \"\") {\n            arr2[i] = arr2[i].toLowerCase();\n            count += arr2[i].split(/[a-z]/).length;\n        }\n    }\n    return arr2.length === 0 ? count : arr2;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hello',\n  'world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpvv56y3py.js:31:12)\n    at Object.<anonymous> (/tmp/tmpvv56y3py.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hello', 'world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = [];\n    let count = 0;\n    let count2 = 0;\n    let count3 = 0;\n    let count4 = 0;\n    let count5 = 0;\n    let count6 = 0;\n    let count7 = 0;\n    let count8 = 0;\n    let count9 = 0;\n    let count10 = 0;\n    let count11 = 0;\n    let count12 = 0;\n    let count13 = 0;\n    let count14 = 0;\n    let count15 = 0;\n    let count16 = 0;\n    let count17 = 0;\n    let count18 = 0;\n    let count19 = 0;\n    let count20 = 0;\n    let count21 = 0;\n    let count22 = 0;\n    let count23 = 0;\n    let count24 = 0;\n    let count25 = 0;\n    let count26 = 0;\n    let count27 = 0;\n    let count28 = 0;\n    let count29 = 0;\n    let count30 = 0;\n    let count31 = 0;\n    let count32 = 0;\n    let count33 = 0;\n    let count34 = 0;\n    let count35 = 0;\n    let count36 = 0;\n    let count37 = 0;\n    let count38 = 0;\n    let count39 = 0;\n    let count40 = 0;\n    let count41 = 0;\n    let count42 = 0;\n    let count43 = 0;\n    let count44 = 0;\n    let count45 = 0;\n    let count46 = 0;\n    let count47 = 0;\n    let count48 = 0;\n    let count49 = 0;\n    let count50 = 0;\n    let count51 = 0;\n    let count52 = 0;\n    let count53 = 0;\n    let count54 = 0;\n    let count55 = 0;\n    let count56 = 0;\n    let count57 = 0;\n    let count58 = 0;\n    let count59 = 0;\n    let count60 = 0;\n    let count61 = 0;\n    let count62 = 0;\n    let count63 = 0;\n    let count\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293100,
      "stdout": "../../../../../../tmp/tmpwd1qi8hk.ts(93,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = [];\n    let count = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "../../../../../../tmp/tmpr_ndbdk4.ts(86,9): error TS1005: ',' expected.\n../../../../../../tmp/tmpr_ndbdk4.ts(102,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = [];\n    let count = 0;\n    let count2 = 0;\n    let count3 = 0;\n    let count4 = 0;\n    let count5 = 0;\n    let count6 = 0;\n    let count7 = 0;\n    let count8 = 0;\n    let count9 = 0;\n    let count10 = 0;\n    let count11 = 0;\n    let count12 = 0;\n    let count13 = 0;\n    let count14 = 0;\n    let count15 = 0;\n    let count16 = 0;\n    let count17 = 0;\n    let count18 = 0;\n    let count19 = 0;\n    let count20 = 0;\n    let count21 = 0;\n    let count22 = 0;\n    let count23 = 0;\n    let count24 = 0;\n    let count25 = 0;\n    let count26 = 0;\n    let count27 = 0;\n    let count28 = 0;\n    let count29 = 0;\n    let count30 = 0;\n    let count31 = 0;\n    let count32 = 0;\n    let count33 = 0;\n    let count34 = 0;\n    let count35 = 0;\n    let count36 = 0;\n    let count37 = 0;\n    let count38 = 0;\n    let count39 = 0;\n    let count40 = 0;\n    let count41 = 0;\n    let count42 = 0;\n    let count43 = 0;\n    let count44 = 0;\n    let count45 = 0;\n    let count46 = 0;\n    let count47 = 0;\n    let count48 = 0;\n    let count49 = 0;\n    let count50 = 0;\n    let count51 = 0;\n    let count52 = 0;\n    let count53 = 0;\n    let count54 = 0;\n    let count55 = 0;\n    let count56 = 0;\n    let count57 = 0;\n    let count58 = 0;\n    let count59 = 0;\n    let count60 = 0;\n    let count61 = 0;\n    let count62 = 0;\n    let count63 = 0;\n    let count\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293100,
      "stdout": "../../../../../../tmp/tmpwd1qi8hk.ts(93,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let words = txt.split(/\\s+/);\n    let lowercase = [];\n    let lowercase_odd = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n        let lower = word.toLowerCase();\n        let odd = lower.charCodeAt(0) - lower.charCodeAt(0) % 2;\n        if (odd) {\n            lowercase_odd.push(word);\n        } else {\n            lowercase.push(word);\n        }\n    }\n    return lowercase_odd.length > 0 ? lowercase_odd : lowercase;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmphoxeo0an.js:32:12)\n    at Object.<anonymous> (/tmp/tmphoxeo0an.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = txt.split(/\\s+/);\n    let res = [];\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            res.push(arr[i]);\n            count += arr[i].length;\n        }\n    }\n    let count2 = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            count2 += arr[i].length;\n        }\n    }\n    if (count2 % 2 === 1) {\n        return res;\n    }\n    let count3 = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            count3 += arr[i].length;\n        }\n    }\n    if (count3 % 2 === 1) {\n        return res;\n    }\n    let count4 = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            count4 += arr[i].length;\n        }\n    }\n    if (count4 % 2 === 1) {\n        return res;\n    }\n    let count5 = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            count5 += arr[i].length;\n        }\n    }\n    if (count5 % 2 === 1) {\n        return res;\n    }\n    let count6 = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            count6 += arr[i].length;\n        }\n    }\n    if (count6 % 2 === 1) {\n        return res;\n    }\n    let count7 = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            count7 += arr[i\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293109,
      "stdout": "../../../../../../tmp/tmp2ghz8rz_.ts(70,1): error TS1005: ']' expected.\n../../../../../../tmp/tmp2ghz8rz_.ts(86,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let words = txt.split(/\\s+/);\n    let count = 0;\n    let letters = [];\n    for (let word of words) {\n        let lower = word.toLowerCase();\n        let count = 0;\n        for (let letter of lower) {\n            if (letter === letter.toLowerCase()) {\n                count++;\n            }\n        }\n        if (count % 2 === 1) {\n            letters.push(word);\n        }\n    }\n    return letters;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmp9q78_509.js:32:12)\n    at Object.<anonymous> (/tmp/tmp9q78_509.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let words = txt.split(/\\s+/);\n    let lowerCaseLetters = [];\n    let upperCaseLetters = [];\n    let numbers = [];\n    let result = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n        if (word.match(/^[a-z]$/)) {\n            lowerCaseLetters.push(word);\n        } else if (word.match(/^[A-Z]$/)) {\n            upperCaseLetters.push(word);\n        } else if (word.match(/^[0-9]$/)) {\n            numbers.push(word);\n        }\n    }\n    for (let i = 0; i < lowerCaseLetters.length; i++) {\n        let word = lowerCaseLetters[i];\n        if (word.length % 2 === 1) {\n            result.push(word);\n        }\n    }\n    for (let i = 0; i < upperCaseLetters.length; i++) {\n        let word = upperCaseLetters[i];\n        if (word.length % 2 === 1) {\n            result.push(word);\n        }\n    }\n    for (let i = 0; i < numbers.length; i++) {\n        let word = numbers[i];\n        if (word.length % 2 === 1) {\n            result.push(word);\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpb3dbs5u_.js:52:12)\n    at Object.<anonymous> (/tmp/tmpb3dbs5u_.js:61:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = txt.split(/\\s+/);\n    let res = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            res.push(arr[i]);\n        }\n    }\n    let count = 0;\n    for (let i = 0; i < res.length; i++) {\n        if (res[i].length > 0) {\n            count += res[i].length;\n        }\n    }\n    let count2 = 0;\n    for (let i = 0; i < res.length; i++) {\n        if (res[i].length > 0) {\n            count2 += res[i].toLowerCase().split('').reduce((a, b) => a * b, 1);\n        }\n    }\n    return count2;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpx80g10qq.js:36:12)\n    at Object.<anonymous> (/tmp/tmpx80g10qq.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let words = txt.split(/\\s+/);\n    let count = 0;\n    let result = [];\n    for (let word of words) {\n        if (word.length > 0) {\n            result.push(word);\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmp14pvke7p.js:26:12)\n    at Object.<anonymous> (/tmp/tmp14pvke7p.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n  return txt.split(/\\s+/);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpzy4one0w.js:18:12)\n    at Object.<anonymous> (/tmp/tmpzy4one0w.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = [];\n    let count = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "../../../../../../tmp/tmpr_ndbdk4.ts(86,9): error TS1005: ',' expected.\n../../../../../../tmp/tmpr_ndbdk4.ts(102,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = txt.split(/\\s+/);\n    let count = 0;\n    let result = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            result.push(arr[i]);\n            count += arr[i].length;\n        }\n    }\n    let count_letters = 0;\n    let letters = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i = 0; i < letters.length; i++) {\n        let letter = letters[i];\n        let count_letter = 0;\n        for (let j = 0; j < arr.length; j++) {\n            if (arr[j].toLowerCase() === letter) {\n                count_letter++;\n            }\n        }\n        if (count_letter % 2 === 1) {\n            count_letters++;\n        }\n    }\n    return count_letters === count ? result : count_letters;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293110,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpxa3ium0u.js:40:12)\n    at Object.<anonymous> (/tmp/tmpxa3ium0u.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = txt.split(/\\s+/);\n    let res = [];\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            res.push(arr[i]);\n        }\n    }\n    for (let i = 0; i < res.length; i++) {\n        let cnt = 0;\n        for (let j = 0; j < res[i].length; j++) {\n            if (res[i][j] >= 'a' && res[i][j] <= 'z') {\n                cnt += (res[i][j] - 'a') * (res[i][j] - 'a');\n            }\n        }\n        if (cnt % 2 === 1) {\n            count++;\n        }\n    }\n    return count === 0 ? res.length : count;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293110,
      "stdout": "../../../../../../tmp/tmp_aj0whx1.ts(24,37): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../../../tmp/tmp_aj0whx1.ts(24,57): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    return txt.split(/\\s+/);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmprflk7f4i.js:18:12)\n    at Object.<anonymous> (/tmp/tmprflk7f4i.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n  // return txt.split(/\\s+/g);\n  return txt.split(/\\s+/g);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmp04r06k11.js:19:12)\n    at Object.<anonymous> (/tmp/tmp04r06k11.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let words = txt.split(/\\s+/);\n    let lowercase = [];\n    let lowercase_odd = [];\n    let lowercase_even = [];\n    let count = 0;\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n        if (word.length > 0) {\n            let lower = word.toLowerCase();\n            if (lower.length % 2 === 0) {\n                lowercase_even.push(lower);\n            } else {\n                lowercase_odd.push(lower);\n            }\n            count += lower.length;\n        }\n    }\n    return lowercase_odd.concat(lowercase_even).concat(words);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293110,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hello',\n  'world!',\n  'Hello',\n  'world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpz0h9dilt.js:35:12)\n    at Object.<anonymous> (/tmp/tmpz0h9dilt.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hello', 'world!', 'Hello', 'world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = [];\n    let count = 0;\n    let count2 = 0;\n    let count3 = 0;\n    let count4 = 0;\n    let count5 = 0;\n    let count6 = 0;\n    let count7 = 0;\n    let count8 = 0;\n    let count9 = 0;\n    let count10 = 0;\n    let count11 = 0;\n    let count12 = 0;\n    let count13 = 0;\n    let count14 = 0;\n    let count15 = 0;\n    let count16 = 0;\n    let count17 = 0;\n    let count18 = 0;\n    let count19 = 0;\n    let count20 = 0;\n    let count21 = 0;\n    let count22 = 0;\n    let count23 = 0;\n    let count24 = 0;\n    let count25 = 0;\n    let count26 = 0;\n    let count27 = 0;\n    let count28 = 0;\n    let count29 = 0;\n    let count30 = 0;\n    let count31 = 0;\n    let count32 = 0;\n    let count33 = 0;\n    let count34 = 0;\n    let count35 = 0;\n    let count36 = 0;\n    let count37 = 0;\n    let count38 = 0;\n    let count39 = 0;\n    let count40 = 0;\n    let count41 = 0;\n    let count42 = 0;\n    let count43 = 0;\n    let count44 = 0;\n    let count45 = 0;\n    let count46 = 0;\n    let count47 = 0;\n    let count48 = 0;\n    let count49 = 0;\n    let count50 = 0;\n    let count51 = 0;\n    let count52 = 0;\n    let count53 = 0;\n    let count54 = 0;\n    let count55 = 0;\n    let count56 = 0;\n    let count57 = 0;\n    let count58 = 0;\n    let count59 = 0;\n    let count60 = 0;\n    let count61 = 0;\n    let count62 = 0;\n    let count63 = 0;\n    let count\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293100,
      "stdout": "../../../../../../tmp/tmpwd1qi8hk.ts(93,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let words = txt.split(/\\s+/);\n    let count = 0;\n    let result = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > 0) {\n            result.push(words[i]);\n            count += words[i].length;\n        }\n    }\n    if (count % 2 === 1) {\n        let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        let count = 0;\n        for (let i = 0; i < result.length; i++) {\n            let word = result[i];\n            for (let j = 0; j < word.length; j++) {\n                let letter = word[j];\n                count += alphabet.indexOf(letter);\n            }\n        }\n        return count;\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293110,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n105\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpn5naspur.js:38:12)\n    at Object.<anonymous> (/tmp/tmpn5naspur.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 105,\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    return txt.split(/\\s+/);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmprflk7f4i.js:18:12)\n    at Object.<anonymous> (/tmp/tmprflk7f4i.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    return txt.split(/\\s+/);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmprflk7f4i.js:18:12)\n    at Object.<anonymous> (/tmp/tmprflk7f4i.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let words = txt.split(/\\s+/);\n    let count = 0;\n    let result = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > 0) {\n            result.push(words[i]);\n            count += words[i].length;\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmp055w9rnd.js:27:12)\n    at Object.<anonymous> (/tmp/tmp055w9rnd.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = txt.split(/\\s+/);\n    let res = [];\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] !== \"\") {\n            res.push(arr[i]);\n        }\n    }\n    for (let i = 0; i < res.length; i++) {\n        if (res[i] === \"\") {\n            count++;\n        }\n    }\n    let count2 = 0;\n    for (let i = 0; i < res.length; i++) {\n        if (res[i] === \"\") {\n            count2++;\n        }\n    }\n    if (count2 === 0) {\n        return res.length;\n    }\n    let count3 = 0;\n    for (let i = 0; i < res.length; i++) {\n        if (res[i] === \"\") {\n            count3++;\n        }\n    }\n    if (count3 === 1) {\n        return res.length;\n    }\n    let count4 = 0;\n    for (let i = 0; i < res.length; i++) {\n        if (res[i] === \"\") {\n            count4++;\n        }\n    }\n    if (count4 === 2) {\n        return res.length;\n    }\n    let count5 = 0;\n    for (let i = 0; i < res.length; i++) {\n        if (res[i] === \"\") {\n            count5++;\n        }\n    }\n    if (count5 === 3) {\n        return res.length;\n    }\n    let count6 = 0;\n    for (let i = 0; i < res.length; i++) {\n        if (res[i] === \"\") {\n            count6++;\n        }\n    }\n    if (count6 === 4) {\n        return res.length;\n    }\n    let count7 = 0;\n    for (let i = 0; i < res.length; i++) {\n        if (res[i] === \"\") {\n            count7++;\n        }\n    }\n    if\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293110,
      "stdout": "../../../../../../tmp/tmpsxg6g47i.ts(77,1): error TS1005: '(' expected.\n../../../../../../tmp/tmpsxg6g47i.ts(77,9): error TS1005: ')' expected.\n../../../../../../tmp/tmpsxg6g47i.ts(93,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = txt.split(/\\s+/);\n    let res = [];\n    for (let i = 0; i < arr.length; i++) {\n        let arr2 = arr[i].split(/[,]/);\n        for (let j = 0; j < arr2.length; j++) {\n            let arr3 = arr2[j].split(/[a-z]/);\n            for (let k = 0; k < arr3.length; k++) {\n                if (arr3[k].length % 2 === 1) {\n                    res.push(arr3[k]);\n                }\n            }\n        }\n    }\n    return res;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293110,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'H',\n  '!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpomjq0g_7.js:30:12)\n    at Object.<anonymous> (/tmp/tmpomjq0g_7.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'H', '!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > 0) {\n      result.push(words[i]);\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293111,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpa5565uje.js:25:12)\n    at Object.<anonymous> (/tmp/tmpa5565uje.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = [];\n    let count = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "../../../../../../tmp/tmpr_ndbdk4.ts(86,9): error TS1005: ',' expected.\n../../../../../../tmp/tmpr_ndbdk4.ts(102,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n  return txt.split(/\\s+/);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpzy4one0w.js:18:12)\n    at Object.<anonymous> (/tmp/tmpzy4one0w.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let words = txt.split(/\\s+/);\n    let lowerCase = [];\n    let lowerCaseOdd = [];\n    for (let word of words) {\n        let lowerCaseWord = word.toLowerCase();\n        let lowerCaseWordLength = lowerCaseWord.length;\n        let lowerCaseWordLengthOdd = lowerCaseWordLength % 2;\n        if (lowerCaseWordLengthOdd === 1) {\n            lowerCaseOdd.push(lowerCaseWord);\n        } else {\n            lowerCase.push(lowerCaseWord);\n        }\n    }\n    return lowerCase.concat(lowerCaseOdd);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293111,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'world!',\n  'hello'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpklpl3w0s.js:31:12)\n    at Object.<anonymous> (/tmp/tmpklpl3w0s.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'world!', 'hello' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = txt.split(/\\s+/);\n    let arr2 = [];\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 0) {\n            arr2.push(arr[i]);\n        }\n    }\n    for (let i = 0; i < arr2.length; i++) {\n        let count2 = 0;\n        for (let j = 0; j < arr2[i].length; j++) {\n            if (arr2[i][j] >= 'a' && arr2[i][j] <= 'z') {\n                count2 += arr2[i][j] - 'a';\n            }\n        }\n        if (count2 % 2 === 1) {\n            count++;\n        }\n    }\n    return count === 0 ? arr2.length : count;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293110,
      "stdout": "../../../../../../tmp/tmpo_8dr8ip.ts(24,40): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = [];\n    let count = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293098,
      "stdout": "../../../../../../tmp/tmpr_ndbdk4.ts(86,9): error TS1005: ',' expected.\n../../../../../../tmp/tmpr_ndbdk4.ts(102,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let arr = txt.split(/\\s+/);\n    let arr2 = [];\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] !== \"\") {\n            arr2.push(arr[i]);\n        }\n    }\n    for (let i = 0; i < arr2.length; i++) {\n        if (arr2[i] !== \"\") {\n            count += arr2[i].length;\n        }\n    }\n    let arr3 = [];\n    for (let i = 0; i < arr2.length; i++) {\n        if (arr2[i] !== \"\") {\n            arr3.push(arr2[i]);\n        }\n    }\n    return arr3;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Hello,world!'\n]\n\nshould loosely deep-equal\n\n[\n  'Hello',\n  'world!'\n]\n    at test (/tmp/tmpz_cki7y3.js:37:12)\n    at Object.<anonymous> (/tmp/tmpz_cki7y3.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    }
  ]
}