name: HumanEval_122_add_elements
language: ts
prompt: "//Given a non-empty array of integers arr and an integer k, return\n// the\
  \ sum of the elements with at most two digits from the first k elements of arr.\n\
  // Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n\
  // Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction\
  \ add_elements(arr: number[], k: number): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1, -2,\
  \ -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111, 121,\
  \ 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7,\
  \ 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9],\
  \ 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
completions: ["    let sum = 0;\n    for (let i = 0; i < k; i++) {\n        sum +=\
    \ arr[i] * Math.pow(10, i);\n    }\n    return sum;\n}\n", "    let sum = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        let digit = arr[i] % 10;\n       \
    \ sum += digit;\n        arr[i] = arr[i] / 10;\n    }\n    for (let i = k; i <\
    \ arr.length; i++) {\n        let digit = arr[i] % 10;\n        sum += digit;\n\
    \        arr[i] = arr[i] / 10;\n    }\n    return sum;\n}\n", "    let sum = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        sum += arr[i];\n    }\n    for (let\
    \ i = k; i < arr.length; i++) {\n        sum += Math.floor(arr[i] / 10) * 10;\n\
    \        sum += arr[i] % 10;\n    }\n    return sum;\n}\n", "    let sum = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        sum += arr[i] / 10;\n        sum +=\
    \ arr[i] % 10;\n    }\n    return sum;\n}\n", "  let sum = 0\n  for (let i = 0;\
    \ i < k; i++) {\n    sum += arr[i]\n  }\n  for (let i = k; i < arr.length; i++)\
    \ {\n    if (arr[i] > 9) {\n      sum += arr[i] - 9\n    } else {\n      sum +=\
    \ arr[i]\n    }\n  }\n  return sum\n}\n", "    let sum = 0;\n    for (let i =\
    \ 0; i < k; i++) {\n        let sum_i = 0;\n        for (let j = i; j < arr.length;\
    \ j++) {\n            let digit = arr[j] % 10;\n            sum_i += digit;\n\
    \            if (sum_i > 9) {\n                sum += Math.pow(10, j - i);\n \
    \               sum_i = digit;\n            }\n        }\n        sum += sum_i;\n\
    \    }\n    return sum;\n}\n", "    let sum = 0;\n    for (let i = 0; i < k; i++)\
    \ {\n        let digit = arr[i] % 10;\n        sum += digit;\n        if (i <\
    \ k - 1) {\n            digit = arr[i + 1] % 10;\n            sum += digit;\n\
    \        }\n    }\n    return sum;\n}\n", "    let sum = 0;\n    for (let i =\
    \ 0; i < k; i++) {\n        sum += arr[i] * Math.pow(10, i);\n    }\n    return\
    \ sum;\n}\n", "    let sum = 0;\n    let i = 0;\n    while (i < k) {\n       \
    \ let digit = arr[i];\n        if (digit > 9) {\n            sum += digit - 10;\n\
    \        } else {\n            sum += digit;\n        }\n        i++;\n    }\n\
    \    return sum;\n}\n", "    let sum = 0;\n    for (let i = 0; i < k; i++) {\n\
    \        let num = arr[i];\n        let sum_of_digits = num % 10;\n        sum\
    \ += sum_of_digits;\n        num = Math.floor(num / 10);\n        sum_of_digits\
    \ = num % 10;\n        sum += sum_of_digits;\n    }\n    return sum;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
