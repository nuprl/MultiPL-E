name: HumanEval_118_get_closest_vowel
language: ts
prompt: "//You are given a word. Your task is to find the closest vowel that stands\
  \ between \n// two consonants from the right side of the word (case sensitive).\n\
  // Vowels in the beginning and ending doesn't count. Return empty string if you\
  \ didn't\n// find any vowel met the above condition. \n// You may assume that the\
  \ given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
  yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
  quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word:\
  \ string): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
  yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
  easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
  ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
  most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
  ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
  anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
  Above\"),\"o\");\n}\n\ntest();"
completions: ["    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants\
    \ = [];\n    let i = 0;\n    while (i < word.length) {\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            consonants.push(word[i]);\n        } else {\n       \
    \     consonants.push(word[i]);\n            i++;\n        }\n    }\n    let closest_vowel\
    \ = \"\";\n    for (let j = 0; j < consonants.length; j++) {\n        for (let\
    \ k = j + 1; k < consonants.length; k++) {\n            if (vowels.indexOf(consonants[k])\
    \ !== -1) {\n                closest_vowel = consonants[k];\n                break;\n\
    \            }\n        }\n        if (closest_vowel !== \"\") {\n           \
    \ break;\n        }\n    }\n    return closest_vowel;\n}\n", "    let vowels =\
    \ \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let vowels_count = 0;\n    let consonants_count = 0;\n    let result =\
    \ \"\";\n    for (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            vowels_count++;\n            if (vowels_count > 1) {\n\
    \                result = word[i];\n                break;\n            }\n  \
    \      }\n        else if (consonants.indexOf(word[i]) !== -1) {\n           \
    \ consonants_count++;\n            if (consonants_count > 1) {\n             \
    \   result = word[i];\n                break;\n            }\n        }\n    }\n\
    \    return result;\n}\n", "    let vowels = \"aeiouAEIOU\";\n    let consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    let vowels_count = 0;\n\
    \    let consonants_count = 0;\n    let i = word.length - 1;\n    let j = word.length\
    \ - 1;\n    let result = \"\";\n    while (i >= 0 && j >= 0) {\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            vowels_count++;\n            if (vowels_count === 2)\
    \ {\n                result = word[i];\n                break;\n            }\n\
    \        } else if (consonants.indexOf(word[i]) !== -1) {\n            consonants_count++;\n\
    \            if (consonants_count === 2) {\n                result = word[i];\n\
    \                break;\n            }\n        }\n        i--;\n        j--;\n\
    \    }\n    return result;\n}\n", "    let vowels = \"aeiouAEIOU\";\n    let consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    let i = word.length -\
    \ 1;\n    let j = word.length - 1;\n    let result = \"\";\n    while (i >= 0\
    \ && j >= 0) {\n        if (vowels.indexOf(word[i]) > -1) {\n            result\
    \ = word[i];\n            break;\n        } else if (consonants.indexOf(word[i])\
    \ > -1) {\n            i--;\n        } else if (consonants.indexOf(word[j]) >\
    \ -1) {\n            j--;\n        } else {\n            i--;\n            j--;\n\
    \        }\n    }\n    return result;\n}\n", "    let vowels = \"aeiouAEIOU\"\
    ;\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    let\
    \ consonant_index = consonants.indexOf(word[0]);\n    let vowel_index = vowels.indexOf(word[0]);\n\
    \    let result = \"\";\n    for (let i = 1; i < word.length; i++) {\n       \
    \ if (vowels.indexOf(word[i]) !== -1) {\n            if (vowel_index === -1) {\n\
    \                vowel_index = i;\n            } else {\n                if (vowel_index\
    \ > consonant_index) {\n                    result = word[i];\n              \
    \      break;\n                } else {\n                    vowel_index = i;\n\
    \                }\n            }\n        } else if (consonants.indexOf(word[i])\
    \ !== -1) {\n            if (vowel_index === -1) {\n                consonant_index\
    \ = i;\n            } else {\n                if (vowel_index > consonant_index)\
    \ {\n                    result = word[i];\n                    break;\n     \
    \           } else {\n                    consonant_index = i;\n             \
    \   }\n            }\n        }\n    }\n    return result;\n}\n", "    let vowels\
    \ = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let result = \"\";\n    let i = word.length - 1;\n    while (i >= 0) {\n\
    \        if (vowels.indexOf(word[i]) !== -1) {\n            result = word[i];\n\
    \            break;\n        }\n        if (consonants.indexOf(word[i]) !== -1)\
    \ {\n            i--;\n        } else {\n            break;\n        }\n    }\n\
    \    return result;\n}\n", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ];\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"\
    x\", \"y\", \"z\"];\n    let consonant_index = consonants.indexOf(word[0]);\n\
    \    let vowel_index = vowels.indexOf(word[word.length - 1]);\n    let result\
    \ = \"\";\n    if (vowel_index > consonant_index) {\n        result = vowels[vowel_index\
    \ - consonant_index - 1];\n    }\n    return result;\n}\n", "    let vowels =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [];\n    let result\
    \ = \"\";\n    for (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            result = word[i];\n            break;\n        } else\
    \ if (consonants.indexOf(word[i]) === -1) {\n            consonants.push(word[i]);\n\
    \        }\n    }\n    return result;\n}\n", "    let vowels = [\"a\", \"e\",\
    \ \"i\", \"o\", \"u\"];\n    let consonants = [];\n    let consonant = \"\";\n\
    \    let vowel = \"\";\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let\
    \ l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n   \
    \ let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n\
    \    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n\
    \    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n\
    \    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n\
    \    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n\
    \    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n\
    \    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n\
    \    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n\
    \    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n\
    \    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n\
    \    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n\
    \    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;", "    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [];\n    let result\
    \ = \"\";\n    for (let i = 0; i < word.length; i++) {\n        if (vowels.indexOf(word[i])\
    \ > -1) {\n            result = word[i];\n            break;\n        } else if\
    \ (vowels.indexOf(word[i].toLowerCase()) > -1) {\n            result = word[i];\n\
    \            break;\n        } else if (vowels.indexOf(word[i].toUpperCase())\
    \ > -1) {\n            result = word[i];\n            break;\n        } else if\
    \ (consonants.indexOf(word[i]) === -1) {\n            consonants.push(word[i]);\n\
    \        }\n    }\n    return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
