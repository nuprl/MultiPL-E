{
  "name": "HumanEval_6_parse_nested_parens",
  "language": "ts",
  "prompt": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_length = 0;\n    let paren_count_stack_max = 0;\n    let paren_count_stack_max_index = 0;\n    let paren_count_stack_max_length = 0;\n    let paren_count_stack_max_max = 0;\n    let paren_count_stack_max_max_index = 0;\n    let paren_count_stack_max_max_length = 0;\n    let paren_count_stack_max_max_max = 0;\n    let paren_count_stack_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_length = 0;\n    let paren_count_stack_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_length = 0;\n    let paren_count_stack_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_length = 0;\n    let paren_count_stack_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_length = 0;\n    let paren_count_stack_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_length\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292584,
      "stdout": "../../../../../../tmp/tmp3c7zuy9q.ts(45,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let current_level = 0;\n    let max_level = 0;\n    let max_level_index = 0;\n    let current_index = 0;\n    let next_index = 0;\n    let next_char = '';\n    let current_char = '';\n    let paren_count = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_top = 0;\n    let paren_count_stack_top_index = 0;\n    let paren_count_stack_top_char = '';\n    let paren_count_stack_top_char_index = 0;\n    let paren_count_stack_top_char_count = 0;\n    let paren_count_stack_top_char_count_index = 0;\n    let paren_count_stack_top_char_count_count = 0;\n    let paren_count_stack_top_char_count_count_index = 0;\n    let paren_count_stack_top_char_count_count_count = 0;\n    let paren_count_stack_top_char_count_count_count_index = 0;\n    let paren_count_stack_top_char_count_count_count_count = 0;\n    let paren_count_stack_top_char_count_count_count_count_index = 0;\n    let paren_count_stack_top_char_count_count_count_count_count = 0;\n    let paren_count_stack_top_char_count_count_count_count_count_index = 0;\n    let paren_count_stack_top_char_count_count_count_count_count_count = 0;\n    let paren_count_stack_top_char_count_count_count_count_count_count_index = 0;\n    let paren_count_stack_top_char_count_count_count_count_count_count_count = 0;\n    let paren_count_stack_top_char_count_count_count_count_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292583,
      "stdout": "../../../../../../tmp/tmpvz4jo8ad.ts(47,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_top = 0;\n    let paren_count_stack_top_index = 0;\n    let paren_count_stack_top_top = 0;\n    let paren_count_stack_top_top_index = 0;\n    let paren_count_stack_top_top_top = 0;\n    let paren_count_stack_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top_top_top = 0;\n    let paren_count_stack_top_top\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292584,
      "stdout": "../../../../../../tmp/tmp43hy9zl0.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack: number[] = [];\n    let paren_count: number = 0;\n    let paren_count_stack: number[] = [];\n    let paren_count_stack_index: number = 0;\n    let paren_count_stack_max: number = 0;\n    let paren_count_stack_max_index: number = 0;\n    let paren_count_stack_max_max: number = 0;\n    let paren_count_stack_max_max_index: number = 0;\n    let paren_count_stack_max_max_max: number = 0;\n    let paren_count_stack_max_max_max_index: number = 0;\n    let paren_count_stack_max_max_max_max: number = 0;\n    let paren_count_stack_max_max_max_max_index: number = 0;\n    let paren_count_stack_max_max_max_max_max: number = 0;\n    let paren_count_stack_max_max_max_max_max_index: number = 0;\n    let paren_count_stack_max_max_max_max_max_max: number = 0;\n    let paren_count_stack_max_max_max_max_max_max_index: number = 0;\n    let paren_count_stack_max_max_max_max_max_max_max: number = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_index: number = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max: number = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_index: number = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max: number = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_index: number = 0;\n    let paren_count_stack\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292583,
      "stdout": "../../../../../../tmp/tmpupcfl4pu.ts(41,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  let paren_stack = [];\n  let max_nesting = 0;\n  let current_nesting = 0;\n  let current_index = 0;\n  let current_char = paren_string[current_index];\n  while (current_index < paren_string.length) {\n    if (current_char === '(') {\n      paren_stack.push(current_index);\n      current_nesting++;\n    } else if (current_char === ')') {\n      if (paren_stack.length > 0) {\n        current_index = paren_stack.pop();\n        current_nesting--;\n      } else {\n        throw new Error(\"Invalid input\");\n      }\n    }\n    current_index++;\n    current_char = paren_string[current_index];\n    if (current_nesting > max_nesting) {\n      max_nesting = current_nesting;\n    }\n  }\n  return max_nesting;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292584,
      "stdout": "../../../../../../tmp/tmpnq8iiydo.ts(30,3): error TS2322: Type 'number' is not assignable to type 'number[]'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let max_nesting = 0;\n    let current_nesting = 0;\n    let current_paren = 0;\n    let current_paren_string = \"\";\n    let current_paren_string_length = 0;\n    let current_paren_string_index = 0;\n    let current_paren_string_index_end = 0;\n    let current_paren_string_index_start = 0;\n    let current_paren_string_length_end = 0;\n    let current_paren_string_length_start = 0;\n    let current_paren_string_length_start_end = 0;\n    let current_paren_string_length_start_start = 0;\n    let current_paren_string_length_start_start_end = 0;\n    let current_paren_string_length_start_start_start = 0;\n    let current_paren_string_length_start_start_start_end = 0;\n    let current_paren_string_length_start_start_start_start = 0;\n    let current_paren_string_length_start_start_start_start_end = 0;\n    let current_paren_string_length_start_start_start_start_start = 0;\n    let current_paren_string_length_start_start_start_start_start_end = 0;\n    let current_paren_string_length_start_start_start_start_start_start = 0;\n    let current_paren_string_length_start_start_start_start_start_start_end = 0;\n    let current_paren_string_length_start_start_start_start_start_start_start = 0;\n    let current_paren_string_length_start_start_start_start_start_start_start_end = 0;\n    let current_paren_string_length_start_start_start_start_start_start_start_start = 0;\n    let current_paren_string_length_start_start_start_start_start_start_start_start_end = 0;\n    let current_paren_string_length_start_start_start_start_start_start_start_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292584,
      "stdout": "../../../../../../tmp/tmp4_7lnjg6.ts(45,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_max = 0;\n    let paren_count_stack_max_index = 0;\n    let paren_count_stack_max_index_stack = [];\n    let paren_count_stack_max_index_stack_index = 0;\n    let paren_count_stack_max_index_stack_max = 0;\n    let paren_count_stack_max_index_stack_max_index = 0;\n    let paren_count_stack_max_index_stack_max_index_stack = [];\n    let paren_count_stack_max_index_stack_max_index_stack_index = 0;\n    let paren_count_stack_max_index_stack_max_index_stack_max = 0;\n    let paren_count_stack_max_index_stack_max_index_stack_max_index = 0;\n    let paren_count_stack_max_index_stack_max_index_stack_max_index_stack = [];\n    let paren_count_stack_max_index_stack_max_index_stack_max_index_stack_index = 0;\n    let paren_count_stack_max_index_stack_max_index_stack_max_index_stack_max = 0;\n    let paren_count_stack_max_index_stack_max_index_stack_max_index_stack_max_index = 0;\n    let paren_count_stack_max_index_stack_max_index_stack_max_index_stack_max_index_stack = [];\n    let paren_count_stack_max_index_stack_max_index_stack_max_index_stack_max_index_stack_index = 0;\n    let paren_count_stack_max_index_stack_max_index_stack_max_index_stack_max_index_stack_max = 0;\n    let paren_count_stack\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292583,
      "stdout": "../../../../../../tmp/tmp6in38oup.ts(41,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_top = 0;\n    let paren_count_stack_top_index = 0;\n    let paren_count_stack_top_top = 0;\n    let paren_count_stack_top_top_index = 0;\n    let paren_count_stack_top_top_top = 0;\n    let paren_count_stack_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_top_top\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292583,
      "stdout": "../../../../../../tmp/tmpq658_0w4.ts(42,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  let paren_stack = [];\n  let paren_count = 0;\n  let paren_level = 0;\n  let paren_count_in_level = 0;\n  let paren_level_in_stack = 0;\n  let paren_count_in_paren_level = 0;\n  let paren_level_in_paren_stack = 0;\n  let paren_count_in_paren_level = 0;\n  let paren_level_in_paren_count = 0;\n  let paren_count_in_paren_level = 0;\n  let paren_level_in_paren_count = 0;\n  let paren_count_in_paren_level_in_stack = 0;\n  let paren_level_in_paren_count_in_stack = 0;\n  let paren_count_in_paren_level_in_stack = 0;\n  let paren_level_in_paren_count_in_stack = 0;\n  let paren_count_in_paren_level_in_stack = 0;\n  let paren_level_in_paren_count_in_stack = 0;\n  let paren_count_in_paren_level_in_stack = 0;\n  let paren_level_in_paren_count_in_stack = 0;\n  let paren_count_in_paren_level_in_stack = 0;\n  let paren_level_in_paren_count_in_stack = 0;\n  let paren_count_in_paren_level_in_stack = 0;\n  let paren_level_in_paren_count_in_stack = 0;\n  let paren_count_in_paren_level_in_stack = 0;\n  let paren_level_in_paren_count_in_stack = 0;\n  let paren_count_in_paren_level_in_stack = 0;\n  let paren_level_in_paren_count_in_stack = 0;\n  let paren_count_in_paren_level_in_stack = 0;\n  let paren_level_in_paren_count_in_stack = 0;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292584,
      "stdout": "../../../../../../tmp/tmpru_u1yth.ts(47,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_index = 0;\n    let paren_string_length = paren_string.length;\n    let paren_string_index = 0;\n    let paren_string_char = '';\n    let paren_string_char_index = 0;\n    let paren_string_char_count = 0;\n    let paren_string_char_count_max = 0;\n    let paren_string_char_count_min = 0;\n    let paren_string_char_count_sum = 0;\n    let paren_string_char_count_avg = 0;\n    let paren_string_char_count_stddev = 0;\n    let paren_string_char_count_stddev_avg = 0;\n    let paren_string_char_count_stddev_stddev = 0;\n    let paren_string_char_count_stddev_stddev_avg = 0;\n    let paren_string_char_count_stddev_stddev_stddev = 0;\n    let paren_string_char_count_stddev_stddev_stddev_avg = 0;\n    let paren_string_char_count_stddev_stddev_stddev_stddev = 0;\n    let paren_string_char_count_stddev_stddev_stddev_stddev_avg = 0;\n    let paren_string_char_count_stddev_stddev_stddev_stddev_stddev = 0;\n    let paren_string_char_count_stddev_stddev_stddev_stddev_stddev_avg = 0;\n    let paren_string_char_count_stddev_stddev_stddev_stddev_stddev_stddev = 0;\n    let paren_string_char_count_stddev_stddev_stddev_stddev\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292583,
      "stdout": "../../../../../../tmp/tmp5ugj0cnq.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_max = 0;\n    let paren_count_stack_max_index = 0;\n    let paren_count_stack_max_max = 0;\n    let paren_count_stack_max_max_index = 0;\n    let paren_count_stack_max_max_max = 0;\n    let paren_count_stack_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292584,
      "stdout": "../../../../../../tmp/tmpcei3lprb.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let max_nesting = 0;\n    let current_level = 0;\n    let current_paren = 0;\n    let current_paren_count = 0;\n    let current_paren_count_max = 0;\n    let current_paren_count_min = 0;\n    let current_paren_count_max_min = 0;\n    let current_paren_count_max_min_max = 0;\n    let current_paren_count_max_min_max_min = 0;\n    let current_paren_count_max_min_max_min_max = 0;\n    let current_paren_count_max_min_max_min_max_min = 0;\n    let current_paren_count_max_min_max_min_max_min_max = 0;\n    let current_paren_count_max_min_max_min_max_min_max_min = 0;\n    let current_paren_count_max_min_max_min_max_min_max_min_max = 0;\n    let current_paren_count_max_min_max_min_max_min_max_min_max_min = 0;\n    let current_paren_count_max_min_max_min_max_min_max_min_max_min_max = 0;\n    let current_paren_count_max_min_max_min_max_min_max_min_max_min_max_min = 0;\n    let current_paren_count_max_min_max_min_max_min_max_min_max_min_max_min_max = 0;\n    let current_paren_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min = 0;\n    let current_paren_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max = 0;\n    let current_paren_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min = 0;\n    let current\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292583,
      "stdout": "../../../../../../tmp/tmpoqgxbtbw.ts(41,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack: number[] = [];\n    let paren_count: number = 0;\n    let paren_count_stack: number[] = [];\n    let paren_count_stack_index: number = 0;\n    let paren_count_stack_top: number = 0;\n    let paren_count_stack_top_index: number = 0;\n    let paren_count_stack_top_top: number = 0;\n    let paren_count_stack_top_top_index: number = 0;\n    let paren_count_stack_top_top_top: number = 0;\n    let paren_count_stack_top_top_top_index: number = 0;\n    let paren_count_stack_top_top_top_top: number = 0;\n    let paren_count_stack_top_top_top_top_index: number = 0;\n    let paren_count_stack_top_top_top_top_top: number = 0;\n    let paren_count_stack_top_top_top_top_top_index: number = 0;\n    let paren_count_stack_top_top_top_top_top_top: number = 0;\n    let paren_count_stack_top_top_top_top_top_top_index: number = 0;\n    let paren_count_stack_top_top_top_top_top_top_top: number = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_index: number = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top: number = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top_index: number = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top_top: number = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top_top_index: number = 0;\n    let paren_count_stack\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292584,
      "stdout": "../../../../../../tmp/tmpxj7mgr65.ts(41,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let result: number[] = [];\n    let stack: number[] = [];\n    let paren_count: number = 0;\n    let paren_level: number = 0;\n    let paren_stack: number[] = [];\n    let paren_stack_count: number = 0;\n    let paren_stack_level: number = 0;\n    let paren_stack_count_stack: number[] = [];\n    let paren_stack_level_stack: number[] = [];\n    let paren_stack_count_stack_level: number[] = [];\n    let paren_stack_level_stack_count: number[] = [];\n    let paren_stack_count_stack_level_stack: number[] = [];\n    let paren_stack_level_stack_count_stack: number[] = [];\n    let paren_stack_count_stack_level_stack_count: number[] = [];\n    let paren_stack_level_stack_count_stack_count: number[] = [];\n    let paren_stack_count_stack_level_stack_count_stack: number[] = [];\n    let paren_stack_level_stack_count_stack_count_stack: number[] = [];\n    let paren_stack_count_stack_level_stack_count_stack_count: number[] = [];\n    let paren_stack_level_stack_count_stack_count_stack_count: number[] = [];\n    let paren_stack_count_stack_level_stack_count_stack_count_stack: number[] = [];\n    let paren_stack_level_stack_count_stack_count_stack_count_stack_count: number[] = [];\n    let paren_stack_count_stack_level_stack_count_stack_count_stack_count_stack: number[] = [];\n    let paren_stack_level_stack_count_stack_count_stack_count_stack_count_stack_count: number[] = [];\n    let paren_stack_count_stack_level_stack_count_stack_count_stack_count_stack_count_stack: number[] = [];\n    let paren_stack_level_stack_count_stack_count_stack\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292584,
      "stdout": "../../../../../../tmp/tmpp6mzh2cm.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let max_nesting = 0;\n    let current_level = 0;\n    let current_paren = 0;\n    let current_paren_count = 0;\n    let current_paren_string = \"\";\n    let current_paren_string_count = 0;\n    let current_paren_string_index = 0;\n    let current_paren_string_length = 0;\n    let current_paren_string_length_count = 0;\n    let current_paren_string_length_index = 0;\n    let current_paren_string_length_length = 0;\n    let current_paren_string_length_length_count = 0;\n    let current_paren_string_length_length_index = 0;\n    let current_paren_string_length_length_length = 0;\n    let current_paren_string_length_length_length_count = 0;\n    let current_paren_string_length_length_length_index = 0;\n    let current_paren_string_length_length_length_length = 0;\n    let current_paren_string_length_length_length_length_count = 0;\n    let current_paren_string_length_length_length_length_index = 0;\n    let current_paren_string_length_length_length_length_length = 0;\n    let current_paren_string_length_length_length_length_length_count = 0;\n    let current_paren_string_length_length_length_length_length_index = 0;\n    let current_paren_string_length_length_length_length_length_length = 0;\n    let current_paren_string_length_length_length_length_length_length_count = 0;\n    let current_paren_string_length_length_length_length_length_length_index = 0;\n    let current_paren_string_length_length_length_length_length_length_length = 0;\n    let current_paren_string_length_length_length_length_length_length_length_count = 0;\n    let current_paren_string_length_length_length_length_length\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292584,
      "stdout": "../../../../../../tmp/tmpc9qns96b.ts(48,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let result = [];\n    let stack = [];\n    let max_depth = 0;\n    let current_depth = 0;\n    let current_char = \"\";\n    let current_char_index = 0;\n    let paren_count = 0;\n    let paren_count_index = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_length = 0;\n    let paren_count_stack_length_index = 0;\n    let paren_count_stack_length_length = 0;\n    let paren_count_stack_length_length_index = 0;\n    let paren_count_stack_length_length_length = 0;\n    let paren_count_stack_length_length_length_index = 0;\n    let paren_count_stack_length_length_length_length = 0;\n    let paren_count_stack_length_length_length_length_index = 0;\n    let paren_count_stack_length_length_length_length_length = 0;\n    let paren_count_stack_length_length_length_length_length_index = 0;\n    let paren_count_stack_length_length_length_length_length_length = 0;\n    let paren_count_stack_length_length_length_length_length_length_index = 0;\n    let paren_count_stack_length_length_length_length_length_length_length = 0;\n    let paren_count_stack_length_length_length_length_length_length_length_index = 0;\n    let paren_count_stack_length_length_length_length_length_length_length_length = 0;\n    let paren_count_stack_length_length_length_length_length_length_length_length_index = 0;\n    let paren_count_stack_length_length_length_length_length_length_length_length_length = 0;\n    let paren_count_stack_length_length_length_length_length_length_length_length_length_index = 0;\n    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292583,
      "stdout": "../../../../../../tmp/tmpa9yehp7x.ts(47,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let max_nesting = 0;\n    for (let i = 0; i < paren_string.length; i++) {\n        if (paren_string[i] === '(') {\n            paren_stack.push(paren_count);\n            paren_count++;\n        } else if (paren_string[i] === ')') {\n            paren_count--;\n            if (paren_count < 0) {\n                throw new Error(\"Invalid parentheses string\");\n            }\n            if (paren_stack.length > 0 && paren_stack.pop() !== paren_count) {\n                throw new Error(\"Invalid parentheses string\");\n            }\n        }\n        if (paren_count > max_nesting) {\n            max_nesting = paren_count;\n        }\n    }\n    if (paren_stack.length > 0) {\n        throw new Error(\"Invalid parentheses string\");\n    }\n    return max_nesting;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292584,
      "stdout": "../../../../../../tmp/tmp_unntgkc.ts(30,5): error TS2322: Type 'number' is not assignable to type 'number[]'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_max = 0;\n    let paren_count_stack_max_index = 0;\n    let paren_count_stack_max_max = 0;\n    let paren_count_stack_max_max_index = 0;\n    let paren_count_stack_max_max_max = 0;\n    let paren_count_stack_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292584,
      "stdout": "../../../../../../tmp/tmpcei3lprb.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_top = 0;\n    let paren_count_stack_top_index = 0;\n    let paren_count_stack_top_top = 0;\n    let paren_count_stack_top_top_index = 0;\n    let paren_count_stack_top_top_top = 0;\n    let paren_count_stack_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_top_top\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292583,
      "stdout": "../../../../../../tmp/tmpq658_0w4.ts(42,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_top = 0;\n    let paren_count_stack_top_index = 0;\n    let paren_count_stack_top_top = 0;\n    let paren_count_stack_top_top_index = 0;\n    let paren_count_stack_top_top_top = 0;\n    let paren_count_stack_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_top_top\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292583,
      "stdout": "../../../../../../tmp/tmpq658_0w4.ts(42,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_max = 0;\n    let paren_count_stack_max_index = 0;\n    let paren_count_stack_max_max = 0;\n    let paren_count_stack_max_max_index = 0;\n    let paren_count_stack_max_max_max = 0;\n    let paren_count_stack_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292584,
      "stdout": "../../../../../../tmp/tmpcei3lprb.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_max = 0;\n    let paren_count_stack_max_index = 0;\n    let paren_count_stack_max_max = 0;\n    let paren_count_stack_max_max_index = 0;\n    let paren_count_stack_max_max_max = 0;\n    let paren_count_stack_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292584,
      "stdout": "../../../../../../tmp/tmpcei3lprb.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_length = 0;\n    let paren_count_stack_max = 0;\n    let paren_count_stack_min = 0;\n    let paren_count_stack_max_index = 0;\n    let paren_count_stack_min_index = 0;\n    let paren_count_stack_max_length = 0;\n    let paren_count_stack_min_length = 0;\n    let paren_count_stack_max_length_index = 0;\n    let paren_count_stack_min_length_index = 0;\n    let paren_count_stack_max_length_length = 0;\n    let paren_count_stack_min_length_length = 0;\n    let paren_count_stack_max_length_length_index = 0;\n    let paren_count_stack_min_length_length_index = 0;\n    let paren_count_stack_max_length_length_length = 0;\n    let paren_count_stack_min_length_length_length = 0;\n    let paren_count_stack_max_length_length_length_index = 0;\n    let paren_count_stack_min_length_length_length_index = 0;\n    let paren_count_stack_max_length_length_length_length = 0;\n    let paren_count_stack_min_length_length_length_length = 0;\n    let paren_count_stack_max_length_length_length_length_index = 0;\n    let paren_count_stack_min_length_length_length_length_index = 0;\n    let paren_count_stack_max_length_length_length_length_length = 0;\n    let paren_count_stack_min_length_length_length_length_length = 0;\n    let paren_count_stack_max_length_length_length\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292584,
      "stdout": "../../../../../../tmp/tmpjjwl8vu4.ts(47,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_top = 0;\n    let paren_count_stack_top_index = 0;\n    let paren_count_stack_top_value = 0;\n    let paren_count_stack_top_value_index = 0;\n    let paren_count_stack_top_value_value = 0;\n    let paren_count_stack_top_value_value_index = 0;\n    let paren_count_stack_top_value_value_value = 0;\n    let paren_count_stack_top_value_value_value_index = 0;\n    let paren_count_stack_top_value_value_value_value = 0;\n    let paren_count_stack_top_value_value_value_value_index = 0;\n    let paren_count_stack_top_value_value_value_value_value = 0;\n    let paren_count_stack_top_value_value_value_value_value_index = 0;\n    let paren_count_stack_top_value_value_value_value_value_value = 0;\n    let paren_count_stack_top_value_value_value_value_value_value_index = 0;\n    let paren_count_stack_top_value_value_value_value_value_value_value = 0;\n    let paren_count_stack_top_value_value_value_value_value_value_value_index = 0;\n    let paren_count_stack_top_value_value_value_value_value_value_value_value = 0;\n    let paren_count_stack_top_value_value_value_value_value_value_value_value_index = 0;\n    let paren_count_stack_top_value_value_value_value_value_value_value_value_value = 0;\n    let paren_count_stack_top_value\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292584,
      "stdout": "../../../../../../tmp/tmpylvjsphf.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let result = [];\n    let stack = [];\n    let paren_count = 0;\n    let paren_index = 0;\n    let paren_char = \"\";\n    let paren_char_count = 0;\n    let paren_char_index = 0;\n    let paren_char_count_stack = [];\n    let paren_char_index_stack = [];\n    let paren_char_stack = [];\n    let paren_char_stack_index = 0;\n    let paren_char_stack_count = 0;\n    let paren_char_stack_count_stack = [];\n    let paren_char_stack_index_stack = [];\n    let paren_char_stack_count_stack_index = 0;\n    let paren_char_stack_count_stack_index_stack = [];\n    let paren_char_stack_index_stack_index = 0;\n    let paren_char_stack_index_stack_index_stack = [];\n    let paren_char_stack_index_stack_index_stack_index = 0;\n    let paren_char_stack_index_stack_index_stack_index_stack = [];\n    let paren_char_stack_index_stack_index_stack_index_stack_index = 0;\n    let paren_char_stack_index_stack_index_stack_index_stack_index_stack = [];\n    let paren_char_stack_index_stack_index_stack_index_stack_index_stack_index = 0;\n    let paren_char_stack_index_stack_index_stack_index_stack_index_stack_index_stack = [];\n    let paren_char_stack_index_stack_index_stack_index_stack_index_stack_index_stack_index = 0;\n    let paren_char_stack_index_stack_index_stack_index_stack_index_stack_index_stack_index = 0;\n    let paren_char_stack_index_stack_index_stack_index_stack_index_stack_index_stack_index = 0;\n    let paren_char_stack_index_stack_index_stack\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292583,
      "stdout": "../../../../../../tmp/tmpa0cr8kls.ts(46,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let max_nesting = 0;\n    let current_nesting = 0;\n    let current_index = 0;\n    let current_char = paren_string[current_index];\n    while (current_index < paren_string.length) {\n        if (current_char === \"(\") {\n            paren_stack.push(current_index);\n            current_nesting++;\n        } else if (current_char === \")\") {\n            if (current_nesting === 0) {\n                throw new Error(\"Invalid input\");\n            }\n            current_nesting--;\n            if (current_nesting === 0) {\n                current_index = paren_stack.pop();\n                max_nesting = Math.max(max_nesting, current_nesting);\n            }\n        }\n        current_index++;\n        current_char = paren_string[current_index];\n    }\n    return max_nesting;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292583,
      "stdout": "../../../../../../tmp/tmp_ma8x20z.ts(29,5): error TS2322: Type 'number' is not assignable to type 'number[]'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_size = 0;\n    let paren_count_stack_max = 0;\n    let paren_count_stack_min = 0;\n    let paren_count_stack_max_index = 0;\n    let paren_count_stack_min_index = 0;\n    let paren_count_stack_size_max = 0;\n    let paren_count_stack_size_min = 0;\n    let paren_count_stack_size_max_index = 0;\n    let paren_count_stack_size_min_index = 0;\n    let paren_count_stack_size_max_index_min = 0;\n    let paren_count_stack_size_min_index_max = 0;\n    let paren_count_stack_size_max_index_min_max = 0;\n    let paren_count_stack_size_min_index_max_min = 0;\n    let paren_count_stack_size_max_index_min_max_min = 0;\n    let paren_count_stack_size_min_index_max_min_max = 0;\n    let paren_count_stack_size_max_index_min_max_min_max = 0;\n    let paren_count_stack_size_min_index_max_min_max_min_max = 0;\n    let paren_count_stack_size_max_index_min_max_min_max_min_max = 0;\n    let paren_count_stack_size_min_index_max_min_max_min_max_min_max = 0;\n    let paren_count_stack_size_max_index_min_max_min_max_min_max_min_max = 0;\n    let paren_count_stack_size_min_index_max_min_max_min_max_min_max_min_max = 0\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292584,
      "stdout": "../../../../../../tmp/tmpz4recy3v.ts(44,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let current_level = 0;\n    let max_level = 0;\n    let current_paren_count = 0;\n    let paren_count = 0;\n    let paren_index = 0;\n    let paren_count_in_string = 0;\n    let paren_count_in_paren_string = 0;\n    let paren_count_in_paren_stack = 0;\n    let paren_count_in_paren_stack_in_string = 0;\n    let paren_count_in_paren_stack_in_paren_string = 0;\n    let paren_count_in_paren_stack_in_paren_stack = 0;\n    let paren_count_in_paren_stack_in_paren_stack_in_string = 0;\n    let paren_count_in_paren_stack_in_paren_stack_in_paren_string = 0;\n    let paren_count_in_paren_stack_in_paren_stack_in_paren_stack = 0;\n    let paren_count_in_paren_stack_in_paren_stack_in_paren_stack_in_string = 0;\n    let paren_count_in_paren_stack_in_paren_stack_in_paren_stack_in_paren_string = 0;\n    let paren_count_in_paren_stack_in_paren_stack_in_paren_stack_in_paren_string = 0;\n    let paren_count_in_paren_stack_in_paren_stack_in_paren_stack_in_paren_string = 0;\n    let paren_count_in_paren_stack_in_paren_stack_in_paren_stack_in_paren_string = 0;\n    let paren_count_in_paren_stack_in_paren_stack_in_paren_stack_in_paren_string = 0;\n    let paren_count_in_paren_stack_in_paren_stack_in_paren_stack_in_paren_string = 0;\n    let paren_count_in_paren_stack_in_paren_stack_in_paren_stack_in\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292584,
      "stdout": "../../../../../../tmp/tmprc1jodrt.ts(41,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_count_stack = [];\n    let max_nesting = 0;\n    let max_nesting_stack = [];\n    let current_nesting = 0;\n    let current_nesting_stack = [];\n    let current_paren_count = 0;\n    let current_paren_count_stack = [];\n    let current_paren_count_stack_index = 0;\n    let current_paren_count_stack_index_stack = [];\n    let current_paren_count_stack_index_stack_index = 0;\n    let current_paren_count_stack_index_stack_index_stack = [];\n    let current_paren_count_stack_index_stack_index_stack_index = 0;\n    let current_paren_count_stack_index_stack_index_stack_index_stack = [];\n    let current_paren_count_stack_index_stack_index_stack_index_stack_index = 0;\n    let current_paren_count_stack_index_stack_index_stack_index_stack_index_stack = [];\n    let current_paren_count_stack_index_stack_index_stack_index_stack_index_stack_index = 0;\n    let current_paren_count_stack_index_stack_index_stack_index_stack_index_stack_index = 0;\n    let current_paren_count_stack_index_stack_index_stack_index_stack_index_stack_index = 0;\n    let current_paren_count_stack_index_stack_index_stack_index_stack_index_stack_index = 0;\n    let current_paren_count_stack_index_stack_index_stack_index_stack_index_stack_index = 0;\n    let current_paren_count_stack_index_stack_index_stack_index_stack_index_stack_index = 0;\n    let current_paren_count_stack_index_stack_index_stack_index_stack_index_stack_index = 0;\n    let current_paren_count_stack_index_stack_index_stack_index_stack_index_stack_index =\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292586,
      "stdout": "../../../../../../tmp/tmpgv1ius42.ts(32,9): error TS1005: ',' expected.\n../../../../../../tmp/tmpgv1ius42.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let result = [];\n    let stack = [];\n    let parens = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let level = 0;\n    while (i < paren_string.length) {\n        if (paren_string[i] === '(') {\n            stack.push(i);\n            parens++;\n        } else if (paren_string[i] === ')') {\n            if (stack.length === 0) {\n                throw new Error(\"Invalid parentheses\");\n            }\n            stack.pop();\n            parens--;\n        }\n        i++;\n    }\n    if (stack.length > 0) {\n        throw new Error(\"Invalid parentheses\");\n    }\n    for (i = 0; i < paren_string.length; i++) {\n        if (paren_string[i] === '(') {\n            level++;\n        } else if (paren_string[i] === ')') {\n            level--;\n        }\n        if (level === 0) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292586,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  6,\n  12,\n  13,\n  15,\n  16,\n  26\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp3hui1jjw.js:47:12)\n    at Object.<anonymous> (/tmp/tmp3hui1jjw.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n     5,  6, 12, 13,\n    15, 16, 26\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let max_nesting = 0;\n    let current_nesting = 0;\n    let current_level = 0;\n    let current_paren = 0;\n    let current_paren_string = \"\";\n    let current_paren_count = 0;\n    let current_paren_count_string = \"\";\n    let current_paren_count_string_length = 0;\n    let current_paren_count_string_index = 0;\n    let current_paren_count_string_index_end = 0;\n    let current_paren_count_string_index_start = 0;\n    let current_paren_count_string_index_start_end = 0;\n    let current_paren_count_string_index_start_end_end = 0;\n    let current_paren_count_string_index_start_end_end_end = 0;\n    let current_paren_count_string_index_start_end_end_end_end = 0;\n    let current_paren_count_string_index_start_end_end_end_end_end = 0;\n    let current_paren_count_string_index_start_end_end_end_end_end_end = 0;\n    let current_paren_count_string_index_start_end_end_end_end_end_end_end = 0;\n    let current_paren_count_string_index_start_end_end_end_end_end_end_end_end = 0;\n    let current_paren_count_string_index_start_end_end_end_end_end_end_end_end_end = 0;\n    let current_paren_count_string_index_start_end_end_end_end_end_end_end_end_end_end = 0;\n    let current_paren_count_string_index_start_end_end_end_end_end_end_end_end_end_end_end = 0;\n    let current_paren_count_string_index_start_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n    let current_paren_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292586,
      "stdout": "../../../../../../tmp/tmprr9j1cif.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let max_nesting = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_max = 0;\n    let paren_count_stack_max_index = 0;\n    let paren_count_stack_max_max = 0;\n    let paren_count_stack_max_max_index = 0;\n    let paren_count_stack_max_max_max = 0;\n    let paren_count_stack_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292586,
      "stdout": "../../../../../../tmp/tmpuf5n1z43.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let result: number[] = [];\n    let stack: number[] = [];\n    let paren_count: number = 0;\n    let paren_index: number = 0;\n    let paren_depth: number = 0;\n    let paren_depth_count: number = 0;\n    let paren_depth_index: number = 0;\n    let paren_depth_depth: number = 0;\n    let paren_depth_depth_count: number = 0;\n    let paren_depth_depth_index: number = 0;\n    let paren_depth_depth_depth: number = 0;\n    let paren_depth_depth_depth_count: number = 0;\n    let paren_depth_depth_depth_index: number = 0;\n    let paren_depth_depth_depth_depth: number = 0;\n    let paren_depth_depth_depth_depth_count: number = 0;\n    let paren_depth_depth_depth_depth_index: number = 0;\n    let paren_depth_depth_depth_depth_depth: number = 0;\n    let paren_depth_depth_depth_depth_depth_count: number = 0;\n    let paren_depth_depth_depth_depth_depth_index: number = 0;\n    let paren_depth_depth_depth_depth_depth_depth: number = 0;\n    let paren_depth_depth_depth_depth_depth_depth_count: number = 0;\n    let paren_depth_depth_depth_depth_depth_depth_index: number = 0;\n    let paren_depth_depth_depth_depth_depth_depth_depth: number = 0;\n    let paren_depth_depth_depth_depth_depth_depth_depth_count: number = 0;\n    let paren_depth_depth_depth_depth_depth_depth_depth_index: number = 0;\n    let paren_depth_depth_depth_depth_depth_depth_depth_depth: number = 0;\n    let paren_depth_depth_depth_depth_depth_depth_depth_depth_count: number = 0;\n    let paren_depth_depth_depth\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292586,
      "stdout": "../../../../../../tmp/tmpaguiqs19.ts(46,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let max_nesting = 0;\n    let current_nesting = 0;\n    let current_paren_count = 0;\n    let current_paren_string = \"\";\n    let current_paren_stack = [];\n    let current_paren_stack_count = 0;\n    let current_paren_stack_string = \"\";\n    let current_paren_stack_string_count = 0;\n    let current_paren_stack_string_count_max = 0;\n    let current_paren_stack_string_count_min = 0;\n    let current_paren_stack_string_count_min_max = 0;\n    let current_paren_stack_string_count_min_max_count = 0;\n    let current_paren_stack_string_count_min_max_count_max = 0;\n    let current_paren_stack_string_count_min_max_count_min = 0;\n    let current_paren_stack_string_count_min_max_count_min_max = 0;\n    let current_paren_stack_string_count_min_max_count_min_max_count = 0;\n    let current_paren_stack_string_count_min_max_count_min_max_count_max = 0;\n    let current_paren_stack_string_count_min_max_count_min_max_count_min_max = 0;\n    let current_paren_stack_string_count_min_max_count_min_max_count_min_max_count = 0;\n    let current_paren_stack_string_count_min_max_count_min_max_count_min_max_count_max = 0;\n    let current_paren_stack_string_count_min_max_count_min_max_count_min_max_count_min_max = 0;\n    let current_paren_stack_string_count_min_max_count_min_max_count_min_max_count_min_max_count = 0;\n    let current_paren_stack_string_count_min_max_count_min_max_count_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292586,
      "stdout": "../../../../../../tmp/tmpkviztpgq.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let current_level = 0;\n    let max_level = 0;\n    let paren_count = 0;\n    let paren_count_in_level = 0;\n    let paren_count_in_level_stack = [];\n    let paren_count_in_level_stack_top = 0;\n    let paren_count_in_level_stack_top_index = 0;\n    let paren_count_in_level_stack_top_value = 0;\n    let paren_count_in_level_stack_top_value_index = 0;\n    let paren_count_in_level_stack_top_value_value = 0;\n    let paren_count_in_level_stack_top_value_value_index = 0;\n    let paren_count_in_level_stack_top_value_value_value = 0;\n    let paren_count_in_level_stack_top_value_value_value_index = 0;\n    let paren_count_in_level_stack_top_value_value_value_value = 0;\n    let paren_count_in_level_stack_top_value_value_value_value_index = 0;\n    let paren_count_in_level_stack_top_value_value_value_value_value = 0;\n    let paren_count_in_level_stack_top_value_value_value_value_value_index = 0;\n    let paren_count_in_level_stack_top_value_value_value_value_value_value = 0;\n    let paren_count_in_level_stack_top_value_value_value_value_value_value_index = 0;\n    let paren_count_in_level_stack_top_value_value_value_value_value_value_value = 0;\n    let paren_count_in_level_stack_top_value_value_value_value_value_value_value_index = 0;\n    let paren_count_in_level_stack_top_value_value_value_value_value_value_value_value\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292586,
      "stdout": "../../../../../../tmp/tmph04ev6xu.ts(41,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let result: number[] = [];\n    let stack: number[] = [];\n    let level: number = 0;\n    let i: number = 0;\n    let j: number = 0;\n    let paren_count: number = 0;\n    let paren_count_stack: number[] = [];\n    let paren_count_stack_index: number = 0;\n    let paren_count_stack_length: number = 0;\n    let paren_count_stack_length_index: number = 0;\n    let paren_count_stack_length_length: number = 0;\n    let paren_count_stack_length_length_index: number = 0;\n    let paren_count_stack_length_length_length: number = 0;\n    let paren_count_stack_length_length_length_index: number = 0;\n    let paren_count_stack_length_length_length_length: number = 0;\n    let paren_count_stack_length_length_length_length_index: number = 0;\n    let paren_count_stack_length_length_length_length_length: number = 0;\n    let paren_count_stack_length_length_length_length_length_index: number = 0;\n    let paren_count_stack_length_length_length_length_length_length: number = 0;\n    let paren_count_stack_length_length_length_length_length_length_index: number = 0;\n    let paren_count_stack_length_length_length_length_length_length_length: number = 0;\n    let paren_count_stack_length_length_length_length_length_length_length_index: number = 0;\n    let paren_count_stack_length_length_length_length_length_length_length_length: number = 0;\n    let paren_count_stack_length_length_length_length_length_length_length_length_index: number = 0;\n    let paren_count_stack_length_length_length_length_length_length_length_length_length: number = 0;\n    let paren_count_stack_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292586,
      "stdout": "../../../../../../tmp/tmpm76dvcbm.ts(44,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_length = 0;\n    let paren_count_stack_max = 0;\n    let paren_count_stack_min = 0;\n    let paren_count_stack_max_index = 0;\n    let paren_count_stack_min_index = 0;\n    let paren_count_stack_max_length = 0;\n    let paren_count_stack_min_length = 0;\n    let paren_count_stack_max_length_index = 0;\n    let paren_count_stack_min_length_index = 0;\n    let paren_count_stack_max_length_length = 0;\n    let paren_count_stack_min_length_length = 0;\n    let paren_count_stack_max_length_length_index = 0;\n    let paren_count_stack_min_length_length_index = 0;\n    let paren_count_stack_max_length_length_length = 0;\n    let paren_count_stack_min_length_length_length = 0;\n    let paren_count_stack_max_length_length_length_index = 0;\n    let paren_count_stack_min_length_length_length_index = 0;\n    let paren_count_stack_max_length_length_length_length = 0;\n    let paren_count_stack_min_length_length_length_length = 0;\n    let paren_count_stack_max_length_length_length_length_index = 0;\n    let paren_count_stack_min_length_length_length_length_index = 0;\n    let paren_count_stack_max_length_length_length_length_length = 0;\n    let paren_count_stack_min_length_length_length_length_length = 0;\n    let paren_count_stack_max_length_length_length_length_length_index = 0;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292586,
      "stdout": "../../../../../../tmp/tmp0csw8_eb.ts(47,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_in_level = 0;\n    let paren_count_in_next_level = 0;\n    let paren_count_in_next_next_level = 0;\n    let paren_count_in_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_next_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_next_next_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_next_next_next_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_next_next_next_next_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_next_next_next_next_next_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292586,
      "stdout": "../../../../../../tmp/tmpbytjyq_z.ts(38,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let result = [];\n    let stack = [];\n    let current_level = 0;\n    let current_index = 0;\n    let current_paren_count = 0;\n    let current_paren_count_in_string = 0;\n    let current_paren_count_in_string_index = 0;\n    let current_paren_count_in_string_index_in_string = 0;\n    let current_paren_count_in_string_index_in_string_index = 0;\n    let current_paren_count_in_string_index_in_string_index_in_string = 0;\n    let current_paren_count_in_string_index_in_string_index_in_string_index = 0;\n    let current_paren_count_in_string_index_in_string_index_in_string_index_in_string = 0;\n    let current_paren_count_in_string_index_in_string_index_in_string_index_in_string_index = 0;\n    let current_paren_count_in_string_index_in_string_index_in_string_index_in_string_index_in_string = 0;\n    let current_paren_count_in_string_index_in_string_index_in_string_index_in_string_index_in_string_index = 0;\n    let current_paren_count_in_string_index_in_string_index_in_string_index_in_string_index_in_string_index_in_string = 0;\n    let current_paren_count_in_string_index_in_string_index_in_string_index_in_string_index_in_string_index_in_string_index = 0;\n    let current_paren_count_in_string_index_in_string_index_in_string_index_in_string_index_in_string_index_in_string_index = 0;\n    let current_paren_count_in_string_index_in_string_index_in_string_index_in_string_index_in_string_index_in_string_index_in_string = 0;\n    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292586,
      "stdout": "../../../../../../tmp/tmp9y584aqq.ts(38,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let result = [];\n    let stack = [];\n    let current_level = 0;\n    let current_paren = 0;\n    let current_paren_count = 0;\n    let current_paren_count_max = 0;\n    let current_paren_count_min = 0;\n    let current_paren_count_max_min = 0;\n    let current_paren_count_min_max = 0;\n    let current_paren_count_min_max_max = 0;\n    let current_paren_count_min_max_min = 0;\n    let current_paren_count_min_max_min_max = 0;\n    let current_paren_count_min_max_min_min = 0;\n    let current_paren_count_min_max_min_min_min = 0;\n    let current_paren_count_min_max_min_min_min_min = 0;\n    let current_paren_count_min_max_min_min_min_min_min = 0;\n    let current_paren_count_min_max_min_min_min_min_min_min = 0;\n    let current_paren_count_min_max_min_min_min_min_min_min_min = 0;\n    let current_paren_count_min_max_min_min_min_min_min_min_min_min = 0;\n    let current_paren_count_min_max_min_min_min_min_min_min_min_min_min = 0;\n    let current_paren_count_min_max_min_min_min_min_min_min_min_min_min_min = 0;\n    let current_paren_count_min_max_min_min_min_min_min_min_min_min_min_min_min = 0;\n    let current_paren_count_min_max_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n    let current_paren_count_min_max_min_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n    let\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292586,
      "stdout": "../../../../../../tmp/tmp15v1sev1.ts(32,9): error TS1005: ',' expected.\n../../../../../../tmp/tmp15v1sev1.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack: number[] = [];\n    let paren_count: number = 0;\n    let paren_count_stack: number[] = [];\n    let paren_count_stack_index: number = 0;\n    let paren_count_stack_top: number = 0;\n    let paren_count_stack_top_index: number = 0;\n    let paren_count_stack_top_top: number = 0;\n    let paren_count_stack_top_top_index: number = 0;\n    let paren_count_stack_top_top_top: number = 0;\n    let paren_count_stack_top_top_top_index: number = 0;\n    let paren_count_stack_top_top_top_top: number = 0;\n    let paren_count_stack_top_top_top_top_index: number = 0;\n    let paren_count_stack_top_top_top_top_top: number = 0;\n    let paren_count_stack_top_top_top_top_top_index: number = 0;\n    let paren_count_stack_top_top_top_top_top_top: number = 0;\n    let paren_count_stack_top_top_top_top_top_top_index: number = 0;\n    let paren_count_stack_top_top_top_top_top_top_top: number = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_index: number = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top: number = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top_index: number = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top_top: number = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top_top_index: number = 0;\n    let paren_count_stack\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292584,
      "stdout": "../../../../../../tmp/tmpxj7mgr65.ts(41,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  let paren_stack = [];\n  let paren_count = 0;\n  let paren_level = 0;\n  let paren_count_stack = [];\n  let paren_count_stack_index = 0;\n  let paren_count_stack_max = 0;\n  let paren_count_stack_max_index = 0;\n  let paren_count_stack_max_max = 0;\n  let paren_count_stack_max_max_index = 0;\n  let paren_count_stack_max_max_max = 0;\n  let paren_count_stack_max_max_max_index = 0;\n  let paren_count_stack_max_max_max_max = 0;\n  let paren_count_stack_max_max_max_max_index = 0;\n  let paren_count_stack_max_max_max_max_max = 0;\n  let paren_count_stack_max_max_max_max_max_index = 0;\n  let paren_count_stack_max_max_max_max_max_max = 0;\n  let paren_count_stack_max_max_max_max_max_max_index = 0;\n  let paren_count_stack_max_max_max_max_max_max_max = 0;\n  let paren_count_stack_max_max_max_max_max_max_max_index = 0;\n  let paren_count_stack_max_max_max_max_max_max_max_max = 0;\n  let paren_count_stack_max_max_max_max_max_max_max_max_index = 0;\n  let paren_count_stack_max_max_max_max_max_max_max_max_max = 0;\n  let paren_count_stack_max_max_max_max_max_max_max_max_max_index = 0;\n  let paren_count_stack_max_max_max_max_max_max_max_max_max_max = 0;\n  let paren_count_stack_max_max\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292586,
      "stdout": "../../../../../../tmp/tmpht5eqlss.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let max_nesting = 0;\n    let current_nesting = 0;\n    let current_index = 0;\n    let paren_count = 0;\n    let paren_count_in_string = 0;\n    let paren_count_in_string_index = 0;\n    let paren_count_in_string_count = 0;\n    let paren_count_in_string_count_index = 0;\n    let paren_count_in_string_count_count = 0;\n    let paren_count_in_string_count_count_index = 0;\n    let paren_count_in_string_count_count_count = 0;\n    let paren_count_in_string_count_count_count_index = 0;\n    let paren_count_in_string_count_count_count_count = 0;\n    let paren_count_in_string_count_count_count_count_index = 0;\n    let paren_count_in_string_count_count_count_count_count = 0;\n    let paren_count_in_string_count_count_count_count_count_index = 0;\n    let paren_count_in_string_count_count_count_count_count_count = 0;\n    let paren_count_in_string_count_count_count_count_count_count_index = 0;\n    let paren_count_in_string_count_count_count_count_count_count_count = 0;\n    let paren_count_in_string_count_count_count_count_count_count_count_index = 0;\n    let paren_count_in_string_count_count_count_count_count_count_count_count = 0;\n    let paren_count_in_string_count_count_count_count_count_count_count_count_index = 0;\n    let paren_count_in_string_count_count_count_count_count_count_count_count_count = 0;\n    let paren_count_in_string_count_count_count_count\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292586,
      "stdout": "../../../../../../tmp/tmpyiwx_zzx.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let max_depth = 0;\n    let current_depth = 0;\n    let current_paren_string = \"\";\n    let current_paren_stack = [];\n    let current_paren_stack_length = 0;\n    let current_paren_stack_max_depth = 0;\n    let current_paren_stack_max_depth_index = 0;\n    let current_paren_stack_max_depth_value = 0;\n    let current_paren_stack_max_depth_value_index = 0;\n    let current_paren_stack_max_depth_value_value = 0;\n    let current_paren_stack_max_depth_value_value_index = 0;\n    let current_paren_stack_max_depth_value_value_value = 0;\n    let current_paren_stack_max_depth_value_value_value_index = 0;\n    let current_paren_stack_max_depth_value_value_value_value = 0;\n    let current_paren_stack_max_depth_value_value_value_value_index = 0;\n    let current_paren_stack_max_depth_value_value_value_value_value = 0;\n    let current_paren_stack_max_depth_value_value_value_value_value_index = 0;\n    let current_paren_stack_max_depth_value_value_value_value_value_value = 0;\n    let current_paren_stack_max_depth_value_value_value_value_value_value_index = 0;\n    let current_paren_stack_max_depth_value_value_value_value_value_value_value = 0;\n    let current_paren_stack_max_depth_value_value_value_value_value_value_value_index = 0;\n    let current_paren_stack_max_depth_value_value_value_value_value_value_value_value = 0;\n    let current_paren_stack_max_depth_value_value_value_value_value_value_value_value_index = 0;\n    let current_paren_stack_max_depth_value_value_value_value\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292586,
      "stdout": "../../../../../../tmp/tmpo99njtni.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let current_level = 0;\n    let max_level = 0;\n    let current_paren = 0;\n    let paren_count = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_max = 0;\n    let paren_count_stack_max_index = 0;\n    let paren_count_stack_max_max = 0;\n    let paren_count_stack_max_max_index = 0;\n    let paren_count_stack_max_max_max = 0;\n    let paren_count_stack_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292586,
      "stdout": "../../../../../../tmp/tmp98pzoa2p.ts(44,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let result = [];\n    let stack = [];\n    let level = 0;\n    let paren_count = 0;\n    let paren_count_in_level = 0;\n    let paren_count_in_stack = 0;\n    let paren_count_in_paren_count = 0;\n    let paren_count_in_paren_count_in_level = 0;\n    let paren_count_in_paren_count_in_stack = 0;\n    let paren_count_in_paren_count_in_paren_count = 0;\n    let paren_count_in_paren_count_in_paren_count_in_level = 0;\n    let paren_count_in_paren_count_in_paren_count_in_stack = 0;\n    let paren_count_in_paren_count_in_paren_count_in_paren_count = 0;\n    let paren_count_in_paren_count_in_paren_count_in_paren_count_in_level = 0;\n    let paren_count_in_paren_count_in_paren_count_in_paren_count_in_stack = 0;\n    let paren_count_in_paren_count_in_paren_count_in_paren_count_in_paren_count = 0;\n    let paren_count_in_paren_count_in_paren_count_in_paren_count_in_paren_count_in_level = 0;\n    let paren_count_in_paren_count_in_paren_count_in_paren_count_in_paren_count_in_stack = 0;\n    let paren_count_in_paren_count_in_paren_count_in_paren_count_in_paren_count_in_paren_count = 0;\n    let paren_count_in_paren_count_in_paren_count_in_paren_count_in_paren_count_in_paren_count_in_level = 0;\n    let paren_count_in_paren_count_in_paren_count_in_paren_count_in_paren_count_in_paren_count_in_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292586,
      "stdout": "../../../../../../tmp/tmpy8u2alsl.ts(39,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_top = 0;\n    let paren_count_stack_top_index = 0;\n    let paren_count_stack_top_top = 0;\n    let paren_count_stack_top_top_index = 0;\n    let paren_count_stack_top_top_top = 0;\n    let paren_count_stack_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top_top_top = 0;\n    let paren_count_stack_top_top\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292584,
      "stdout": "../../../../../../tmp/tmp43hy9zl0.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_top = 0;\n    let paren_count_stack_top_index = 0;\n    let paren_count_stack_top_value = 0;\n    let paren_count_stack_top_value_index = 0;\n    let paren_count_stack_top_value_value = 0;\n    let paren_count_stack_top_value_value_index = 0;\n    let paren_count_stack_top_value_value_value = 0;\n    let paren_count_stack_top_value_value_value_index = 0;\n    let paren_count_stack_top_value_value_value_value = 0;\n    let paren_count_stack_top_value_value_value_value_index = 0;\n    let paren_count_stack_top_value_value_value_value_value = 0;\n    let paren_count_stack_top_value_value_value_value_value_index = 0;\n    let paren_count_stack_top_value_value_value_value_value_value = 0;\n    let paren_count_stack_top_value_value_value_value_value_value_index = 0;\n    let paren_count_stack_top_value_value_value_value_value_value_value = 0;\n    let paren_count_stack_top_value_value_value_value_value_value_value_index = 0;\n    let paren_count_stack_top_value_value_value_value_value_value_value_value = 0;\n    let paren_count_stack_top_value_value_value_value_value_value_value_value_index = 0;\n    let paren_count_stack_top_value_value_value_value_value_value_value_value_value = 0;\n    let paren_count_stack_top_value\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292584,
      "stdout": "../../../../../../tmp/tmpylvjsphf.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let current_level = 0;\n    let max_level = 0;\n    let max_index = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292586,
      "stdout": "../../../../../../tmp/tmp09acvf5l.ts(91,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let result = [];\n    let stack = [];\n    let current_level = 0;\n    let current_paren = 0;\n    let paren_count = 0;\n    let paren_string = paren_string.split(\" \");\n    for (let i = 0; i < paren_string.length; i++) {\n        if (paren_string[i] === \"(\") {\n            stack.push(i);\n            current_level++;\n            current_paren++;\n            paren_count++;\n        } else if (paren_string[i] === \")\") {\n            if (stack.length > 0) {\n                stack.pop();\n                current_level--;\n                current_paren--;\n                paren_count--;\n            }\n        }\n        if (current_level === 0 && paren_count === 0) {\n            result.push(current_paren);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292586,
      "stdout": "../../../../../../tmp/tmpw9g8ldq6.ts(6,30): error TS2300: Duplicate identifier 'paren_string'.\n../../../../../../tmp/tmpw9g8ldq6.ts(12,9): error TS2300: Duplicate identifier 'paren_string'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_top = 0;\n    let paren_count_stack_top_index = 0;\n    let paren_count_stack_top_top = 0;\n    let paren_count_stack_top_top_index = 0;\n    let paren_count_stack_top_top_top = 0;\n    let paren_count_stack_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_top_top\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292583,
      "stdout": "../../../../../../tmp/tmpq658_0w4.ts(42,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_max = 0;\n    let paren_count_stack_max_index = 0;\n    let paren_count_stack_max_value = 0;\n    let paren_count_stack_max_value_index = 0;\n    let paren_count_stack_max_value_value = 0;\n    let paren_count_stack_max_value_value_index = 0;\n    let paren_count_stack_max_value_value_value = 0;\n    let paren_count_stack_max_value_value_value_index = 0;\n    let paren_count_stack_max_value_value_value_value = 0;\n    let paren_count_stack_max_value_value_value_value_index = 0;\n    let paren_count_stack_max_value_value_value_value_value = 0;\n    let paren_count_stack_max_value_value_value_value_value_index = 0;\n    let paren_count_stack_max_value_value_value_value_value_value = 0;\n    let paren_count_stack_max_value_value_value_value_value_value_index = 0;\n    let paren_count_stack_max_value_value_value_value_value_value_value = 0;\n    let paren_count_stack_max_value_value_value_value_value_value_value_index = 0;\n    let paren_count_stack_max_value_value_value_value_value_value_value_value = 0;\n    let paren_count_stack_max_value_value_value_value_value_value_value_value_index = 0;\n    let paren_count_stack_max_value_value_value_value_value_value_value_value_value = 0;\n    let paren_count_stack_max_value\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292586,
      "stdout": "../../../../../../tmp/tmpfwh3qy5h.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_in_level = 0;\n    let paren_count_in_parent = 0;\n    let paren_count_in_parent_level = 0;\n    let paren_count_in_parent_parent = 0;\n    let paren_count_in_parent_parent_level = 0;\n    let paren_count_in_parent_parent_parent = 0;\n    let paren_count_in_parent_parent_parent_level = 0;\n    let paren_count_in_parent_parent_parent_parent = 0;\n    let paren_count_in_parent_parent_parent_parent_level = 0;\n    let paren_count_in_parent_parent_parent_parent_parent = 0;\n    let paren_count_in_parent_parent_parent_parent_parent_level = 0;\n    let paren_count_in_parent_parent_parent_parent_parent_parent = 0;\n    let paren_count_in_parent_parent_parent_parent_parent_parent_level = 0;\n    let paren_count_in_parent_parent_parent_parent_parent_parent_parent = 0;\n    let paren_count_in_parent_parent_parent_parent_parent_parent_parent_level = 0;\n    let paren_count_in_parent_parent_parent_parent_parent_parent_parent_parent = 0;\n    let paren_count_in_parent_parent_parent_parent_parent_parent_parent_parent_level = 0;\n    let paren_count_in_parent_parent_parent_parent_parent_parent_parent_parent_parent = 0;\n    let paren_count_in_parent_parent_parent_parent_parent_parent_parent_parent_parent_level = 0;\n    let paren_count_in_parent_parent_parent_parent_parent_parent_parent_parent_parent_parent = 0;\n    let paren_count_in_parent_parent_parent_parent_parent_parent_parent_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292586,
      "stdout": "../../../../../../tmp/tmpk2una1pu.ts(42,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_length = 0;\n    let paren_count_stack_max = 0;\n    let paren_count_stack_min = 0;\n    let paren_count_stack_max_index = 0;\n    let paren_count_stack_min_index = 0;\n    let paren_count_stack_min_length = 0;\n    let paren_count_stack_min_length_index = 0;\n    let paren_count_stack_min_length_length = 0;\n    let paren_count_stack_min_length_length_index = 0;\n    let paren_count_stack_min_length_length_length = 0;\n    let paren_count_stack_min_length_length_length_index = 0;\n    let paren_count_stack_min_length_length_length_length = 0;\n    let paren_count_stack_min_length_length_length_length_index = 0;\n    let paren_count_stack_min_length_length_length_length_length = 0;\n    let paren_count_stack_min_length_length_length_length_length_index = 0;\n    let paren_count_stack_min_length_length_length_length_length_length = 0;\n    let paren_count_stack_min_length_length_length_length_length_length_index = 0;\n    let paren_count_stack_min_length_length_length_length_length_length_length = 0;\n    let paren_count_stack_min_length_length_length_length_length_length_length_index = 0;\n    let paren_count_stack_min_length_length_length_length_length_length_length_length = 0;\n    let paren_count_stack_min_length_length_length_length_length_length_length_length_index = 0;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292586,
      "stdout": "../../../../../../tmp/tmprny9hd4j.ts(45,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_max = 0;\n    let paren_count_stack_max_index = 0;\n    let paren_count_stack_max_max = 0;\n    let paren_count_stack_max_max_index = 0;\n    let paren_count_stack_max_max_max = 0;\n    let paren_count_stack_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292584,
      "stdout": "../../../../../../tmp/tmpcei3lprb.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let max_nesting = 0;\n    let current_nesting = 0;\n    let current_paren = 0;\n    let current_paren_count = 0;\n    let current_paren_string = \"\";\n    let current_paren_string_count = 0;\n    let current_paren_string_index = 0;\n    let current_paren_string_length = 0;\n    let current_paren_string_length_count = 0;\n    let current_paren_string_length_index = 0;\n    let current_paren_string_length_length = 0;\n    let current_paren_string_length_length_count = 0;\n    let current_paren_string_length_length_index = 0;\n    let current_paren_string_length_length_length = 0;\n    let current_paren_string_length_length_length_count = 0;\n    let current_paren_string_length_length_length_index = 0;\n    let current_paren_string_length_length_length_length = 0;\n    let current_paren_string_length_length_length_length_count = 0;\n    let current_paren_string_length_length_length_length_index = 0;\n    let current_paren_string_length_length_length_length_length = 0;\n    let current_paren_string_length_length_length_length_length_count = 0;\n    let current_paren_string_length_length_length_length_length_index = 0;\n    let current_paren_string_length_length_length_length_length_length = 0;\n    let current_paren_string_length_length_length_length_length_length_count = 0;\n    let current_paren_string_length_length_length_length_length_length_index = 0;\n    let current_paren_string_length_length_length_length_length_length_length = 0;\n    let current_paren_string_length_length_length_length_length_length_length_count = 0;\n    let current_paren_string_length_length_length_length_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292586,
      "stdout": "../../../../../../tmp/tmpco26b4s2.ts(48,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_in_level = 0;\n    let paren_string_length = paren_string.length;\n    let paren_string_index = 0;\n    let paren_string_index_in_level = 0;\n    let paren_string_index_in_level_end = 0;\n    let paren_string_index_in_level_start = 0;\n    let paren_string_index_in_level_start_end = 0;\n    let paren_string_index_in_level_start_start = 0;\n    let paren_string_index_in_level_start_start_end = 0;\n    let paren_string_index_in_level_start_start_start = 0;\n    let paren_string_index_in_level_start_start_start_end = 0;\n    let paren_string_index_in_level_start_start_start_start = 0;\n    let paren_string_index_in_level_start_start_start_start_end = 0;\n    let paren_string_index_in_level_start_start_start_start_start = 0;\n    let paren_string_index_in_level_start_start_start_start_start_end = 0;\n    let paren_string_index_in_level_start_start_start_start_start_start = 0;\n    let paren_string_index_in_level_start_start_start_start_start_start_end = 0;\n    let paren_string_index_in_level_start_start_start_start_start_start_start = 0;\n    let paren_string_index_in_level_start_start_start_start_start_start_start_end = 0;\n    let paren_string_index_in_level_start_start_start_start_start_start_start_start = 0;\n    let paren_string_index_in_level_start_start_start_start_start_start\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292588,
      "stdout": "../../../../../../tmp/tmp4_4smf1o.ts(42,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let result = [];\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_count_in_paren = 0;\n    let paren_count_in_paren_in_paren = 0;\n    let paren_count_in_paren_in_paren_in_paren = 0;\n    let paren_count_in_paren_in_paren_in_paren_in_paren = 0;\n    let paren_count_in_paren_in_paren_in_paren_in_paren_in_paren = 0;\n    let paren_count_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren = 0;\n    let paren_count_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren = 0;\n    let paren_count_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren = 0;\n    let paren_count_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren = 0;\n    let paren_count_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren = 0;\n    let paren_count_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren = 0;\n    let paren_count_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren = 0;\n    let paren_count_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292588,
      "stdout": "../../../../../../tmp/tmp2guhttov.ts(34,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let current_level = 0;\n    let max_level = 0;\n    let current_paren_level = 0;\n    let current_paren_count = 0;\n    let current_paren_string = \"\";\n    let current_paren_string_count = 0;\n    let current_paren_string_index = 0;\n    let current_paren_string_length = 0;\n    let current_paren_string_char = \"\";\n    let current_paren_string_char_count = 0;\n    let current_paren_string_char_index = 0;\n    let current_paren_string_char_length = 0;\n    let current_paren_string_char_index_end = 0;\n    let current_paren_string_char_count_end = 0;\n    let current_paren_string_char_length_end = 0;\n    let current_paren_string_char_index_start = 0;\n    let current_paren_string_char_count_start = 0;\n    let current_paren_string_char_length_start = 0;\n    let current_paren_string_char_index_end_start = 0;\n    let current_paren_string_char_count_end_start = 0;\n    let current_paren_string_char_length_end_start = 0;\n    let current_paren_string_char_index_end_end = 0;\n    let current_paren_string_char_count_end_end = 0;\n    let current_paren_string_char_length_end_end = 0;\n    let current_paren_string_char_index_start_end = 0;\n    let current_paren_string_char_count_start_end = 0;\n    let current_paren_string_char_length_start_end = 0;\n    let current_paren_string_char_index_end_start_end = 0;\n    let current_paren_string_char_count_end_start_end = 0;\n    let current_paren_string_char_length_end_start_end = 0;\n    let current_paren_string_char_index_end_start_start = 0\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292588,
      "stdout": "../../../../../../tmp/tmp68lufn17.ts(50,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_index = 0;\n    let paren_length = paren_string.length;\n    let paren_char = paren_string[paren_index];\n    let paren_char_count = 0;\n    let paren_char_index = 0;\n    let paren_char_length = paren_char.length;\n    let paren_char_char = paren_char[paren_char_index];\n    let paren_char_char_count = 0;\n    let paren_char_char_index = 0;\n    let paren_char_char_length = paren_char_char.length;\n    let paren_char_char_char = paren_char_char[paren_char_char_index];\n    while (paren_index < paren_length) {\n        if (paren_char_char_char === '(') {\n            paren_char_char_char_count++;\n            if (paren_char_char_char_count === 1) {\n                paren_char_char_index++;\n                paren_char_char_length = paren_char_char.length;\n                paren_char_char_char = paren_char_char[paren_char_char_index];\n            }\n        } else if (paren_char_char_char === ')') {\n            paren_char_char_char_count--;\n            if (paren_char_char_char_count === 0) {\n                paren_char_char_index++;\n                paren_char_char_length = paren_char_char.length;\n                paren_char_char_char = paren_char_char[paren_char_char_index];\n            }\n        }\n        if (paren_char_char_char === '(') {\n            paren_char_char_char_count++;\n            if (paren_char_char_char_count === 1) {\n                paren_char_char_index++;\n                paren_char_char_length = paren_char_char.length;\n                paren_char_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292589,
      "stdout": "../../../../../../tmp/tmp3lq2is5g.ts(54,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_in_level = 0;\n    let paren_level_in_stack = 0;\n    let paren_level_in_string = 0;\n    let paren_count_in_string = 0;\n    let paren_count_in_paren_level = 0;\n    let paren_count_in_paren_level_in_string = 0;\n    let paren_count_in_paren_level_in_stack = 0;\n    let paren_count_in_paren_level_in_paren_level = 0;\n    let paren_count_in_paren_level_in_paren_level_in_string = 0;\n    let paren_count_in_paren_level_in_paren_level_in_stack = 0;\n    let paren_count_in_paren_level_in_paren_level_in_paren_level = 0;\n    let paren_count_in_paren_level_in_paren_level_in_paren_level_in_string = 0;\n    let paren_count_in_paren_level_in_paren_level_in_paren_level_in_stack = 0;\n    let paren_count_in_paren_level_in_paren_level_in_paren_level_in_paren_level = 0;\n    let paren_count_in_paren_level_in_paren_level_in_paren_level_in_paren_level_in_string = 0;\n    let paren_count_in_paren_level_in_paren_level_in_paren_level_in_paren_level_in_stack = 0;\n    let paren_count_in_paren_level_in_paren_level_in_paren_level_in_paren_level_in_paren_level = 0;\n    let paren_count_in_paren_level_in_paren_level_in_paren_level_in_paren_level_in_paren_level_in_string = 0;\n    let paren_count_in_paren_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292589,
      "stdout": "../../../../../../tmp/tmp78fu50v6.ts(40,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let max_nesting = 0;\n    let current_nesting = 0;\n    let current_paren = 0;\n    let current_char = 0;\n    let current_char_is_open = false;\n    let current_char_is_close = false;\n    let current_char_is_open_paren = false;\n    let current_char_is_close_paren = false;\n    let current_char_is_open_paren_close_paren = false;\n    let current_char_is_open_paren_open_paren = false;\n    let current_char_is_open_paren_open_paren_close_paren = false;\n    let current_char_is_open_paren_open_paren_open_paren = false;\n    let current_char_is_open_paren_open_paren_open_paren_close_paren = false;\n    let current_char_is_open_paren_open_paren_open_paren_open_paren_close_paren = false;\n    let current_char_is_open_paren_open_paren_open_paren_open_paren_open_paren_close_paren = false;\n    let current_char_is_open_paren_open_paren_open_paren_open_paren_open_paren_open_paren_close_paren = false;\n    let current_char_is_open_paren_open_paren_open_paren_open_paren_open_paren_open_paren_open_paren_close_paren = false;\n    let current_char_is_open_paren_open_paren_open_paren_open_paren_open_paren_open_paren_open_paren_open_paren_close_paren = false;\n    for (let i = 0; i < paren_string.length; i++) {\n        let current_char = paren_string[i];\n        if (current_char === \"(\") {\n            current_char_is_open = true;\n            current_char_is_close = false;\n            current_char_is_open_paren = false;\n            current_char_is_close_paren = false;\n            current_char_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292589,
      "stdout": "../../../../../../tmp/tmp34mgcfh6.ts(45,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let current_level = 0;\n    let max_level = 0;\n    let current_paren_level = 0;\n    let current_paren_string = \"\";\n    let current_paren_string_length = 0;\n    let current_paren_string_index = 0;\n    let current_paren_string_index_end = 0;\n    let current_paren_string_index_start = 0;\n    let current_paren_string_index_start_end = 0;\n    let current_paren_string_index_start_end_end = 0;\n    let current_paren_string_index_start_end_end_end = 0;\n    let current_paren_string_index_start_end_end_end_end = 0;\n    let current_paren_string_index_start_end_end_end_end_end = 0;\n    let current_paren_string_index_start_end_end_end_end_end_end = 0;\n    let current_paren_string_index_start_end_end_end_end_end_end_end = 0;\n    let current_paren_string_index_start_end_end_end_end_end_end_end_end = 0;\n    let current_paren_string_index_start_end_end_end_end_end_end_end_end_end = 0;\n    let current_paren_string_index_start_end_end_end_end_end_end_end_end_end_end = 0;\n    let current_paren_string_index_start_end_end_end_end_end_end_end_end_end_end_end = 0;\n    let current_paren_string_index_start_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n    let current_paren_string_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n    let current_paren_string_index_start_end_end_end_end_end_end_end_end_end_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292589,
      "stdout": "../../../../../../tmp/tmp0avzjjak.ts(41,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_start = 0;\n    let paren_end = 0;\n    let paren_count_start = 0;\n    let paren_count_end = 0;\n    let paren_count_start_end = 0;\n    let paren_count_end_start = 0;\n    let paren_count_end_start_end = 0;\n    let paren_count_start_end_end = 0;\n    let paren_count_end_start_end_end = 0;\n    let paren_count_end_start_end_end_start = 0;\n    let paren_count_end_start_end_end_start_end = 0;\n    let paren_count_end_start_end_end_start_end_end = 0;\n    let paren_count_end_start_end_end_start_end_end_start = 0;\n    let paren_count_end_start_end_end_start_end_end_start_end = 0;\n    let paren_count_end_start_end_end_start_end_end_start_end_start = 0;\n    let paren_count_end_start_end_end_start_end_end_start_end_start_end = 0;\n    let paren_count_end_start_end_end_start_end_end_start_end_start_end_start = 0;\n    let paren_count_end_start_end_end_start_end_end_start_end_start_end_start_end = 0;\n    let paren_count_end_start_end_end_start_end_end_start_end_start_end_start_end_start = 0;\n    let paren_count_end_start_end_end_start_end_end_start_end_start_end_start_end_start_end = 0;\n    let paren_count_end_start_end_end_start_end_end_start_end_start_end_start_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292589,
      "stdout": "../../../../../../tmp/tmpphvwsnei.ts(42,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let current_level = 0;\n    let max_level = 0;\n    let max_level_index = 0;\n    let current_index = 0;\n    let paren_count = 0;\n    let paren_count_in_level = 0;\n    let paren_count_in_level_index = 0;\n    let paren_count_in_level_in_stack = 0;\n    let paren_count_in_level_in_stack_index = 0;\n    let paren_count_in_level_in_stack_in_stack = 0;\n    let paren_count_in_level_in_stack_in_stack_index = 0;\n    let paren_count_in_level_in_stack_in_stack_in_stack = 0;\n    let paren_count_in_level_in_stack_in_stack_in_stack_index = 0;\n    let paren_count_in_level_in_stack_in_stack_in_stack_in_stack = 0;\n    let paren_count_in_level_in_stack_in_stack_in_stack_in_stack_index = 0;\n    let paren_count_in_level_in_stack_in_stack_in_stack_in_stack_in_stack = 0;\n    let paren_count_in_level_in_stack_in_stack_in_stack_in_stack_in_stack_index = 0;\n    let paren_count_in_level_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack = 0;\n    let paren_count_in_level_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack_index = 0;\n    let paren_count_in_level_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack = 0;\n    let paren_count_in_level_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292589,
      "stdout": "../../../../../../tmp/tmp5_6yyks8.ts(40,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_max = 0;\n    let paren_count_stack_max_index = 0;\n    let paren_count_stack_max_max = 0;\n    let paren_count_stack_max_max_index = 0;\n    let paren_count_stack_max_max_max = 0;\n    let paren_count_stack_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292584,
      "stdout": "../../../../../../tmp/tmpcei3lprb.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let max_nesting = 0;\n    let current_nesting = 0;\n    let current_paren_count = 0;\n    let current_paren_string = \"\";\n    let current_paren_stack = [];\n    let current_paren_stack_count = 0;\n    let current_paren_stack_string = \"\";\n    let current_paren_stack_string_count = 0;\n    let current_paren_stack_string_string = \"\";\n    let current_paren_stack_string_string_count = 0;\n    let current_paren_stack_string_string_string = \"\";\n    let current_paren_stack_string_string_string_count = 0;\n    let current_paren_stack_string_string_string_string = \"\";\n    let current_paren_stack_string_string_string_string_count = 0;\n    let current_paren_stack_string_string_string_string_string = \"\";\n    let current_paren_stack_string_string_string_string_string_count = 0;\n    let current_paren_stack_string_string_string_string_string_string = \"\";\n    let current_paren_stack_string_string_string_string_string_string_count = 0;\n    let current_paren_stack_string_string_string_string_string_string_string = \"\";\n    let current_paren_stack_string_string_string_string_string_string_string_count = 0;\n    let current_paren_stack_string_string_string_string_string_string_string_string = \"\";\n    let current_paren_stack_string_string_string_string_string_string_string_string_count = 0;\n    let current_paren_stack_string_string_string_string_string_string_string_string_string = \"\";\n    let current_paren_stack_string_string_string_string_string_string_string_string_string_count = 0;\n    let current_paren_stack_string_string_string_string_string_string_string_string_string_string = \"\";\n    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292589,
      "stdout": "../../../../../../tmp/tmps97ldgpi.ts(46,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let max_nesting = 0;\n    let current_nesting = 0;\n    let current_index = 0;\n    let current_char = paren_string[current_index];\n    while (current_index < paren_string.length) {\n        if (current_char === '(') {\n            paren_stack.push(current_char);\n            current_nesting++;\n        } else if (current_char === ')') {\n            if (paren_stack.length === 0) {\n                throw new Error(\"Unexpected closing parenthesis\");\n            }\n            paren_stack.pop();\n            current_nesting--;\n        } else if (current_char === ' ') {\n            if (paren_stack.length === 0) {\n                throw new Error(\"Unexpected space\");\n            }\n            if (current_nesting === 0) {\n                max_nesting = Math.max(max_nesting, current_nesting);\n            }\n            current_nesting = 0;\n        }\n        current_index++;\n        current_char = paren_string[current_index];\n    }\n    if (paren_stack.length > 0) {\n        throw new Error(\"Unexpected closing parenthesis\");\n    }\n    return [max_nesting, current_nesting];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292589,
      "stdout": "",
      "stderr": "/tmp/tmpkms27b_3.js:26\n                throw new Error(\"Unexpected space\");\n                ^\n\nError: Unexpected space\n    at parse_nested_parens (/tmp/tmpkms27b_3.js:26:23)\n    at test (/tmp/tmpkms27b_3.js:44:22)\n    at Object.<anonymous> (/tmp/tmpkms27b_3.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let max_nesting = 0;\n    let current_nesting = 0;\n    let current_paren = 0;\n    let current_char = 0;\n    let current_paren_count = 0;\n    let current_paren_count_max = 0;\n    let current_paren_count_min = 0;\n    let current_paren_count_max_min = 0;\n    let current_paren_count_min_max = 0;\n    let current_paren_count_min_max_min = 0;\n    let current_paren_count_min_max_min_max = 0;\n    let current_paren_count_min_max_min_max_min = 0;\n    let current_paren_count_min_max_min_max_min_max = 0;\n    let current_paren_count_min_max_min_max_min_max_min = 0;\n    let current_paren_count_min_max_min_max_min_max_min_max = 0;\n    let current_paren_count_min_max_min_max_min_max_min_max_min = 0;\n    let current_paren_count_min_max_min_max_min_max_min_max_min_max = 0;\n    let current_paren_count_min_max_min_max_min_max_min_max_min_max_min = 0;\n    let current_paren_count_min_max_min_max_min_max_min_max_min_max_min_max = 0;\n    let current_paren_count_min_max_min_max_min_max_min_max_min_max_min_max_min = 0;\n    let current_paren_count_min_max_min_max_min_max_min_max_min_max_min_max_min_max = 0;\n    let current_paren_count_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min = 0;\n    let current_paren_count_min_max_min_max_min_max_min\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292589,
      "stdout": "../../../../../../tmp/tmpy25_u1f1.ts(42,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  let paren_stack = [];\n  let paren_count = 0;\n  let paren_level = 0;\n  let paren_index = 0;\n  let paren_count_max = 0;\n  let paren_count_min = 0;\n  let paren_level_max = 0;\n  let paren_level_min = 0;\n  let paren_index_max = 0;\n  let paren_index_min = 0;\n  let paren_count_max_index = 0;\n  let paren_count_min_index = 0;\n  let paren_level_max_index = 0;\n  let paren_level_min_index = 0;\n  let paren_index_max_index = 0;\n  let paren_index_min_index = 0;\n  let paren_count_max_index_index = 0;\n  let paren_count_min_index_index = 0;\n  let paren_level_max_index_index = 0;\n  let paren_level_min_index_index = 0;\n  let paren_index_max_index_index = 0;\n  let paren_index_min_index_index = 0;\n  let paren_count_max_index_index_index = 0;\n  let paren_count_min_index_index_index = 0;\n  let paren_level_max_index_index_index = 0;\n  let paren_level_min_index_index_index = 0;\n  let paren_index_max_index_index_index = 0;\n  let paren_index_min_index_index_index = 0;\n  let paren_count_max_index_index_index_index = 0;\n  let paren_count_min_index_index_index_index = 0;\n  let paren_level_max_index_index_index_index = 0;\n  let paren_level_min_index_index_index_index = 0;\n  let paren_index_max_index_index_index_index = 0;\n  let paren_index_min_index_index_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292589,
      "stdout": "../../../../../../tmp/tmp2se3ea1t.ts(52,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_start = 0;\n    let paren_end = 0;\n    let paren_count_stack = [];\n    let paren_level_stack = [];\n    let paren_start_stack = [];\n    let paren_end_stack = [];\n    let paren_count_stack_stack = [];\n    let paren_level_stack_stack = [];\n    let paren_start_stack_stack = [];\n    let paren_end_stack_stack = [];\n    let paren_count_stack_stack_stack = [];\n    let paren_level_stack_stack_stack = [];\n    let paren_start_stack_stack_stack = [];\n    let paren_end_stack_stack_stack = [];\n    let paren_count_stack_stack_stack_stack = [];\n    let paren_level_stack_stack_stack_stack = [];\n    let paren_start_stack_stack_stack_stack = [];\n    let paren_end_stack_stack_stack_stack = [];\n    let paren_count_stack_stack_stack_stack_stack = [];\n    let paren_level_stack_stack_stack_stack_stack = [];\n    let paren_start_stack_stack_stack_stack_stack = [];\n    let paren_end_stack_stack_stack_stack_stack = [];\n    let paren_count_stack_stack_stack_stack_stack = [];\n    let paren_level_stack_stack_stack_stack_stack = [];\n    let paren_start_stack_stack_stack_stack_stack = [];\n    let paren_end_stack_stack_stack_stack_stack = [];\n    let paren_count_stack_stack_stack_stack_stack = [];\n    let paren_level_stack_stack_stack_stack_stack = [];\n    let paren_start_stack_stack_stack_stack_stack = [];\n    let paren_end_stack_stack_stack_stack_stack = [];\n    let paren_count_stack_stack_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292589,
      "stdout": "../../../../../../tmp/tmp6dvpwyvi.ts(52,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  let result = [];\n  let paren_stack = [];\n  let paren_count = 0;\n  let paren_index = 0;\n  let paren_char = \"\";\n  let paren_level = 0;\n  let paren_count_in_level = 0;\n  let paren_stack_in_level = [];\n  let paren_stack_in_level_index = 0;\n  let paren_stack_in_level_count = 0;\n  let paren_stack_in_level_count_in_level = 0;\n  let paren_stack_in_level_count_in_level_index = 0;\n  let paren_stack_in_level_count_in_level_count = 0;\n  let paren_stack_in_level_count_in_level_count_index = 0;\n  let paren_stack_in_level_count_in_level_count_count = 0;\n  let paren_stack_in_level_count_in_level_count_count_index = 0;\n  let paren_stack_in_level_count_in_level_count_count_count = 0;\n  let paren_stack_in_level_count_in_level_count_count_count_index = 0;\n  let paren_stack_in_level_count_in_level_count_count_count_count = 0;\n  let paren_stack_in_level_count_in_level_count_count_count_count_index = 0;\n  let paren_stack_in_level_count_in_level_count_count_count_count_count = 0;\n  let paren_stack_in_level_count_in_level_count_count_count_count_count_index = 0;\n  let paren_stack_in_level_count_in_level_count_count_count_count_count_count = 0;\n  let paren_stack_in_level_count_in_level_count_count_count_count_count_count_index = 0;\n  let paren_stack_in_level_count_in_level_count_count\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292589,
      "stdout": "../../../../../../tmp/tmpt1bpq3z9.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let max_nesting = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_max = 0;\n    let paren_count_stack_max_index = 0;\n    let paren_count_stack_max_max = 0;\n    let paren_count_stack_max_max_index = 0;\n    let paren_count_stack_max_max_max = 0;\n    let paren_count_stack_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292586,
      "stdout": "../../../../../../tmp/tmpuf5n1z43.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let current_level = 0;\n    let max_level = 0;\n    let current_paren = 0;\n    let paren_count = 0;\n    let paren_count_in_level = 0;\n    let paren_count_in_level_stack = [];\n    let paren_count_in_level_stack_top = 0;\n    let paren_count_in_level_stack_top_in_level = 0;\n    let paren_count_in_level_stack_top_in_level_stack = [];\n    let paren_count_in_level_stack_top_in_level_stack_top = 0;\n    let paren_count_in_level_stack_top_in_level_stack_top_in_level = 0;\n    let paren_count_in_level_stack_top_in_level_stack_top_in_level_stack = [];\n    let paren_count_in_level_stack_top_in_level_stack_top_in_level_stack_top = 0;\n    let paren_count_in_level_stack_top_in_level_stack_top_in_level_stack_top_in_level = 0;\n    let paren_count_in_level_stack_top_in_level_stack_top_in_level_stack_top_in_level_stack = [];\n    let paren_count_in_level_stack_top_in_level_stack_top_in_level_stack_top_in_level_stack_top = 0;\n    let paren_count_in_level_stack_top_in_level_stack_top_in_level_stack_top_in_level_stack_top_in_level = 0;\n    let paren_count_in_level_stack_top_in_level_stack_top_in_level_stack_top_in_level_stack_top_in_level_stack = [];\n    let paren_count_in_level_stack_top_in_level_stack_top_in_level_stack_top_in_level_stack_top_in_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292589,
      "stdout": "../../../../../../tmp/tmpuwleyp18.ts(38,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let current_level = 0;\n    let max_level = 0;\n    let paren_count = 0;\n    let paren_index = 0;\n    let paren_count_in_level = 0;\n    let paren_count_in_level_in_stack = 0;\n    let paren_count_in_level_in_stack_in_stack = 0;\n    let paren_count_in_level_in_stack_in_stack_in_stack = 0;\n    let paren_count_in_level_in_stack_in_stack_in_stack_in_stack = 0;\n    let paren_count_in_level_in_stack_in_stack_in_stack_in_stack_in_stack = 0;\n    let paren_count_in_level_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack = 0;\n    let paren_count_in_level_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack = 0;\n    let paren_count_in_level_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack = 0;\n    let paren_count_in_level_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack = 0;\n    let paren_count_in_level_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack = 0;\n    let paren_count_in_level_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack = 0;\n    let paren_count_in_level_in_stack_in_stack_in_stack_in_stack_in_stack_in_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292589,
      "stdout": "../../../../../../tmp/tmpvintw0qu.ts(36,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_index = 0;\n    let paren_count_max = 0;\n    let paren_count_min = 0;\n    let paren_count_max_index = 0;\n    let paren_count_min_index = 0;\n    let paren_count_max_level = 0;\n    let paren_count_min_level = 0;\n    let paren_count_max_level_index = 0;\n    let paren_count_min_level_index = 0;\n    let paren_count_max_level_count = 0;\n    let paren_count_min_level_count = 0;\n    let paren_count_max_level_count_index = 0;\n    let paren_count_min_level_count_index = 0;\n    let paren_count_max_level_count_count = 0;\n    let paren_count_min_level_count_count = 0;\n    let paren_count_max_level_count_count_index = 0;\n    let paren_count_min_level_count_count_index = 0;\n    let paren_count_max_level_count_count_count = 0;\n    let paren_count_min_level_count_count_count = 0;\n    let paren_count_max_level_count_count_count_index = 0;\n    let paren_count_min_level_count_count_count_index = 0;\n    let paren_count_max_level_count_count_count_count = 0;\n    let paren_count_min_level_count_count_count_count = 0;\n    let paren_count_max_level_count_count_count_count_index = 0;\n    let paren_count_min_level_count_count_count_count_index = 0;\n    let paren_count_max_level_count_count_count_count_count = 0;\n    let paren_count_min_level_count_count_count_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292589,
      "stdout": "../../../../../../tmp/tmp79ysy9sk.ts(48,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_depth = 0;\n    let paren_count_stack = [];\n    let paren_depth_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_depth_stack_index = 0;\n    let paren_count_stack_index_max = 0;\n    let paren_depth_stack_index_max = 0;\n    let paren_count_stack_max = 0;\n    let paren_depth_stack_max = 0;\n    let paren_count_stack_index_min = 0;\n    let paren_depth_stack_index_min = 0;\n    let paren_count_stack_min = 0;\n    let paren_depth_stack_min = 0;\n    let paren_count_stack_min_max = 0;\n    let paren_depth_stack_min_max = 0;\n    let paren_count_stack_min_max_index = 0;\n    let paren_depth_stack_min_max_index = 0;\n    let paren_count_stack_min_max_index_max = 0;\n    let paren_depth_stack_min_max_index_max = 0;\n    let paren_count_stack_min_max_index_min = 0;\n    let paren_depth_stack_min_max_index_min = 0;\n    let paren_count_stack_min_max_index_min_max = 0;\n    let paren_depth_stack_min_max_index_min_max = 0;\n    let paren_count_stack_min_max_index_min_max_index = 0;\n    let paren_depth_stack_min_max_index_min_max_index = 0;\n    let paren_count_stack_min_max_index_min_max_index_max = 0;\n    let paren_depth_stack_min_max_index_min_max_index_max = 0;\n    let paren_count_stack_min_max_index_min_max_index_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292589,
      "stdout": "../../../../../../tmp/tmpqzoxroxf.ts(48,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_in_level = 0;\n    let paren_count_in_next_level = 0;\n    let paren_count_in_next_next_level = 0;\n    let paren_count_in_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_next_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_next_next_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_next_next_next_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_next_next_next_next_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_next_next_next_next_next_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292586,
      "stdout": "../../../../../../tmp/tmpbytjyq_z.ts(38,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_max = 0;\n    let paren_count_stack_max_index = 0;\n    let paren_count_stack_max_max = 0;\n    let paren_count_stack_max_max_index = 0;\n    let paren_count_stack_max_max_max = 0;\n    let paren_count_stack_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292584,
      "stdout": "../../../../../../tmp/tmpcei3lprb.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let result = [];\n    let stack = [];\n    let current_level = 0;\n    let current_paren_level = 0;\n    let current_paren_count = 0;\n    let current_paren_string = \"\";\n    let current_paren_string_count = 0;\n    let current_paren_string_start = 0;\n    let current_paren_string_end = 0;\n    let current_paren_string_length = 0;\n    let current_paren_string_length_count = 0;\n    let current_paren_string_length_start = 0;\n    let current_paren_string_length_end = 0;\n    let current_paren_string_length_length = 0;\n    let current_paren_string_length_length_count = 0;\n    let current_paren_string_length_length_start = 0;\n    let current_paren_string_length_length_end = 0;\n    let current_paren_string_length_length_length = 0;\n    let current_paren_string_length_length_length_count = 0;\n    let current_paren_string_length_length_length_start = 0;\n    let current_paren_string_length_length_length_end = 0;\n    let current_paren_string_length_length_length_length = 0;\n    let current_paren_string_length_length_length_length_count = 0;\n    let current_paren_string_length_length_length_length_start = 0;\n    let current_paren_string_length_length_length_length_end = 0;\n    let current_paren_string_length_length_length_length_length = 0;\n    let current_paren_string_length_length_length_length_length_count = 0;\n    let current_paren_string_length_length_length_length_length_start = 0;\n    let current_paren_string_length_length_length_length_length_end = 0;\n    let current_paren_string_length_length_length_length_length_length = 0;\n    let current_paren_string_length_length_length_length_length_length_count = 0;\n    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292589,
      "stdout": "../../../../../../tmp/tmpxqe9v006.ts(50,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_in_level = 0;\n    let paren_level_in_stack = 0;\n    let paren_count_in_paren_level = 0;\n    let paren_count_in_paren_level_in_stack = 0;\n    let paren_count_in_paren_level_in_stack_in_level = 0;\n    let paren_count_in_paren_level_in_stack_in_level_in_stack = 0;\n    let paren_count_in_paren_level_in_stack_in_level_in_stack_in_level = 0;\n    let paren_count_in_paren_level_in_stack_in_level_in_stack_in_level_in_stack = 0;\n    let paren_count_in_paren_level_in_stack_in_level_in_stack_in_level_in_stack_in_level = 0;\n    let paren_count_in_paren_level_in_stack_in_level_in_stack_in_level_in_stack_in_level_in_stack = 0;\n    let paren_count_in_paren_level_in_stack_in_level_in_stack_in_level_in_stack_in_level_in_stack_in_level = 0;\n    let paren_count_in_paren_level_in_stack_in_level_in_stack_in_level_in_stack_in_level_in_stack_in_level = 0;\n    let paren_count_in_paren_level_in_stack_in_level_in_stack_in_level_in_stack_in_level_in_stack_in_level = 0;\n    let paren_count_in_paren_level_in_stack_in_level_in_stack_in_level_in_stack_in_level_in_stack_in_level = 0;\n    let paren_count_in_paren_level_in_stack_in_level_in_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292589,
      "stdout": "../../../../../../tmp/tmp11nraooh.ts(36,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let max_nesting = 0;\n    let current_nesting = 0;\n    let current_paren = 0;\n    let current_char = 0;\n    let paren_count = 0;\n    let paren_start = 0;\n    let paren_end = 0;\n    let paren_length = 0;\n    let paren_string_length = paren_string.length;\n    let paren_string_index = 0;\n    let paren_string_char = 0;\n    let paren_string_char_index = 0;\n    let paren_string_char_count = 0;\n    let paren_string_char_count_index = 0;\n    let paren_string_char_count_count = 0;\n    let paren_string_char_count_count_index = 0;\n    let paren_string_char_count_count_count = 0;\n    let paren_string_char_count_count_count_index = 0;\n    let paren_string_char_count_count_count_count = 0;\n    let paren_string_char_count_count_count_count_index = 0;\n    let paren_string_char_count_count_count_count_count = 0;\n    let paren_string_char_count_count_count_count_count_index = 0;\n    let paren_string_char_count_count_count_count_count_count = 0;\n    let paren_string_char_count_count_count_count_count_count_index = 0;\n    let paren_string_char_count_count_count_count_count_count_count = 0;\n    let paren_string_char_count_count_count_count_count_count_count_index = 0;\n    let paren_string_char_count_count_count_count_count_count_count_count = 0;\n    let paren_string_char_count_count_count_count_count_count_count_count_index = 0;\n    let paren_string_char_count_count_count_count_count\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292589,
      "stdout": "../../../../../../tmp/tmpgxsvcaio.ts(48,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_max = 0;\n    let paren_count_stack_max_index = 0;\n    let paren_count_stack_max_max = 0;\n    let paren_count_stack_max_max_index = 0;\n    let paren_count_stack_max_max_max = 0;\n    let paren_count_stack_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292584,
      "stdout": "../../../../../../tmp/tmpcei3lprb.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_stack = [];\n    let paren_level_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_level_stack_index = 0;\n    let paren_count_stack_top = 0;\n    let paren_level_stack_top = 0;\n    let paren_count_stack_top_index = 0;\n    let paren_level_stack_top_index = 0;\n    let paren_count_stack_top_top = 0;\n    let paren_level_stack_top_top = 0;\n    let paren_count_stack_top_top_index = 0;\n    let paren_level_stack_top_top_index = 0;\n    let paren_count_stack_top_top_top = 0;\n    let paren_level_stack_top_top_top = 0;\n    let paren_count_stack_top_top_top_index = 0;\n    let paren_level_stack_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top = 0;\n    let paren_level_stack_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_index = 0;\n    let paren_level_stack_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top = 0;\n    let paren_level_stack_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_index = 0;\n    let paren_level_stack_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top = 0;\n    let paren_level_stack_top_top_top_top_top_top_index = 0;\n    let p\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292589,
      "stdout": "../../../../../../tmp/tmppeha2l42.ts(48,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let result = [];\n    let stack = [];\n    let current_level = 0;\n    let paren_count = 0;\n    let paren_index = 0;\n    let paren_length = paren_string.length;\n    let paren_char = paren_string[paren_index];\n    let paren_char_count = 1;\n    let paren_char_index = 0;\n    let paren_char_length = paren_char.length;\n    while (paren_index < paren_length) {\n        if (paren_char === '(') {\n            stack.push(paren_char);\n            current_level += 1;\n            paren_char_count += 1;\n            paren_char_index += 1;\n        } else if (paren_char === ')') {\n            if (stack.length > 0) {\n                stack.pop();\n                current_level -= 1;\n                paren_char_count -= 1;\n                paren_char_index += 1;\n            } else {\n                throw new Error(\"Invalid parentheses string\");\n            }\n        } else if (paren_char === ' ') {\n            if (stack.length > 0) {\n                paren_count += 1;\n                paren_char_count += 1;\n                paren_char_index += 1;\n            } else {\n                throw new Error(\"Invalid parentheses string\");\n            }\n        } else {\n            throw new Error(\"Invalid parentheses string\");\n        }\n        if (paren_char_count === paren_char_length) {\n            paren_index += 1;\n            paren_char_count = 0;\n            paren_char_index = 0;\n            paren_char = paren_string[paren_index];\n        }\n        if (current_level === 0) {\n            result.push(paren_count);\n            paren_count = 0;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292596,
      "stdout": "",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 169220804\n#\n#\n#\n#FailureMessage Object: 0x7fff13f00e60\n 1: 0x2b210fd88727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b211091d28e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2b2110257f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2b21103e99f0  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2b21103f1390  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2b21105db7db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2b210ff3a7f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "exit_code": -5,
      "status": "Exception"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let max_nesting = 0;\n    let current_nesting = 0;\n    let current_paren = 0;\n    let current_char = 0;\n    let current_paren_string = '';\n    let current_paren_string_length = 0;\n    let current_paren_string_index = 0;\n    let current_paren_string_length_index = 0;\n    let current_paren_string_length_index_end = 0;\n    let current_paren_string_length_index_start = 0;\n    let current_paren_string_length_index_start_end = 0;\n    let current_paren_string_length_index_start_end_end = 0;\n    let current_paren_string_length_index_start_end_end_end = 0;\n    let current_paren_string_length_index_start_end_end_end_end = 0;\n    let current_paren_string_length_index_start_end_end_end_end_end = 0;\n    let current_paren_string_length_index_start_end_end_end_end_end_end = 0;\n    let current_paren_string_length_index_start_end_end_end_end_end_end_end = 0;\n    let current_paren_string_length_index_start_end_end_end_end_end_end_end_end = 0;\n    let current_paren_string_length_index_start_end_end_end_end_end_end_end_end_end = 0;\n    let current_paren_string_length_index_start_end_end_end_end_end_end_end_end_end_end = 0;\n    let current_paren_string_length_index_start_end_end_end_end_end_end_end_end_end_end_end = 0;\n    let current_paren_string_length_index_start_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n    let current_paren_string_length_index_start_end_end_end\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "../../../../../../tmp/tmp9mznthzl.ts(42,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_max = 0;\n    let paren_count_stack_max_index = 0;\n    let paren_count_stack_max_max = 0;\n    let paren_count_stack_max_max_index = 0;\n    let paren_count_stack_max_max_max = 0;\n    let paren_count_stack_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292584,
      "stdout": "../../../../../../tmp/tmpcei3lprb.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_top = 0;\n    let paren_count_stack_top_index = 0;\n    let paren_count_stack_top_top = 0;\n    let paren_count_stack_top_top_index = 0;\n    let paren_count_stack_top_top_top = 0;\n    let paren_count_stack_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_top_top\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292583,
      "stdout": "../../../../../../tmp/tmpq658_0w4.ts(42,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let max_nesting = 0;\n    let i = 0;\n    while (i < paren_string.length) {\n        if (paren_string[i] === '(') {\n            paren_stack.push(paren_count);\n            paren_count++;\n        } else if (paren_string[i] === ')') {\n            paren_count--;\n            if (paren_stack.length > 0) {\n                max_nesting = Math.max(max_nesting, paren_stack.pop());\n            }\n        }\n        i++;\n    }\n    return max_nesting;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "../../../../../../tmp/tmpqo0jdzdm.ts(23,5): error TS2322: Type 'number' is not assignable to type 'number[]'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const result = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    if (paren_group === \"\") {\n      continue;\n    }\n    const paren_count = paren_group.split(\"\").length - 1;\n    result.push(paren_count);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  5,\n  1,\n  9\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpv57gnm8y.js:22:12)\n    at Object.<anonymous> (/tmp/tmpv57gnm8y.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 5, 1, 9 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let max_nesting = 0;\n    let current_nesting = 0;\n    let current_paren = 0;\n    let current_paren_count = 0;\n    let current_paren_string = \"\";\n    let current_paren_string_count = 0;\n    let current_paren_string_index = 0;\n    let current_paren_string_length = 0;\n    let current_paren_string_length_count = 0;\n    let current_paren_string_length_index = 0;\n    let current_paren_string_length_length = 0;\n    let current_paren_string_length_length_count = 0;\n    let current_paren_string_length_length_index = 0;\n    let current_paren_string_length_length_length = 0;\n    let current_paren_string_length_length_length_count = 0;\n    let current_paren_string_length_length_length_index = 0;\n    let current_paren_string_length_length_length_length = 0;\n    let current_paren_string_length_length_length_length_count = 0;\n    let current_paren_string_length_length_length_length_index = 0;\n    let current_paren_string_length_length_length_length_length = 0;\n    let current_paren_string_length_length_length_length_length_count = 0;\n    let current_paren_string_length_length_length_length_length_index = 0;\n    let current_paren_string_length_length_length_length_length_length = 0;\n    let current_paren_string_length_length_length_length_length_length_count = 0;\n    let current_paren_string_length_length_length_length_length_length_index = 0;\n    let current_paren_string_length_length_length_length_length_length_length = 0;\n    let current_paren_string_length_length_length_length_length_length_length_count = 0;\n    let current_paren_string_length_length_length_length_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292586,
      "stdout": "../../../../../../tmp/tmpco26b4s2.ts(48,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let max_nesting = 0;\n    let current_level = 0;\n    let current_paren = 0;\n    let current_paren_string = \"\";\n    let current_paren_count = 0;\n    let current_paren_string_count = 0;\n    let current_paren_string_index = 0;\n    let current_paren_string_length = 0;\n    let current_paren_string_length_index = 0;\n    let current_paren_string_length_length = 0;\n    let current_paren_string_length_length_index = 0;\n    let current_paren_string_length_length_length = 0;\n    let current_paren_string_length_length_length_index = 0;\n    let current_paren_string_length_length_length_length = 0;\n    let current_paren_string_length_length_length_length_index = 0;\n    let current_paren_string_length_length_length_length_length = 0;\n    let current_paren_string_length_length_length_length_length_index = 0;\n    let current_paren_string_length_length_length_length_length_length = 0;\n    let current_paren_string_length_length_length_length_length_length_index = 0;\n    let current_paren_string_length_length_length_length_length_length_length = 0;\n    let current_paren_string_length_length_length_length_length_length_length_index = 0;\n    let current_paren_string_length_length_length_length_length_length_length_length = 0;\n    let current_paren_string_length_length_length_length_length_length_length_length_index = 0;\n    let current_paren_string_length_length_length_length_length_length_length_length_length = 0;\n    let current_paren_string_length_length_length_length_length_length_length_length_length_index = 0;\n    let current_paren_string_length_length_length_length_length_length_length_length_length_length = 0;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "../../../../../../tmp/tmpan9lsil9.ts(46,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_index = 0;\n    let paren_string_length = paren_string.length;\n    let paren_string_index = 0;\n    let paren_string_char;\n    let paren_string_char_index;\n    let paren_string_char_count;\n    let paren_string_char_count_index;\n    let paren_string_char_count_count;\n    let paren_string_char_count_count_index;\n    let paren_string_char_count_count_count;\n    let paren_string_char_count_count_count_index;\n    let paren_string_char_count_count_count_count;\n    let paren_string_char_count_count_count_count_index;\n    let paren_string_char_count_count_count_count_count;\n    let paren_string_char_count_count_count_count_count_index;\n    let paren_string_char_count_count_count_count_count_count;\n    let paren_string_char_count_count_count_count_count_count_index;\n    let paren_string_char_count_count_count_count_count_count_count;\n    let paren_string_char_count_count_count_count_count_count_count_index;\n    let paren_string_char_count_count_count_count_count_count_count_count;\n    let paren_string_char_count_count_count_count_count_count_count_count_index;\n    let paren_string_char_count_count_count_count_count_count_count_count_count;\n    let paren_string_char_count_count_count_count_count_count_count_count_count_index;\n    let paren_string_char_count_count_count_count_count_count_count_count_count_count;\n    let paren_string_char_count_count_count\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "../../../../../../tmp/tmpi63411hj.ts(46,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_depth = 0;\n    let paren_start = 0;\n    let paren_end = 0;\n    let paren_count_stack = [];\n    let paren_depth_stack = [];\n    let paren_start_stack = [];\n    let paren_end_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_depth_stack_index = 0;\n    let paren_start_stack_index = 0;\n    let paren_end_stack_index = 0;\n    let paren_count_stack_length = 0;\n    let paren_depth_stack_length = 0;\n    let paren_start_stack_length = 0;\n    let paren_end_stack_length = 0;\n    let paren_count_stack_index_max = 0;\n    let paren_depth_stack_index_max = 0;\n    let paren_start_stack_index_max = 0;\n    let paren_end_stack_index_max = 0;\n    let paren_count_stack_length_max = 0;\n    let paren_depth_stack_length_max = 0;\n    let paren_start_stack_length_max = 0;\n    let paren_end_stack_length_max = 0;\n    let paren_count_stack_index_min = 0;\n    let paren_depth_stack_index_min = 0;\n    let paren_start_stack_index_min = 0;\n    let paren_end_stack_index_min = 0;\n    let paren_count_stack_length_min = 0;\n    let paren_depth_stack_length_min = 0;\n    let paren_start_stack_length_min = 0;\n    let paren_end_stack_length_min = 0;\n    let paren_count_stack_index_min_max = 0;\n    let paren_depth_stack_index_min_max = 0;\n    let paren_start_stack_index_min_max =\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "../../../../../../tmp/tmp6jc1a6oa.ts(43,9): error TS1005: ',' expected.\n../../../../../../tmp/tmp6jc1a6oa.ts(54,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_depth = 0;\n    let paren_index = 0;\n    let paren_char = '';\n    let paren_char_index = 0;\n    let paren_char_count = 0;\n    let paren_char_count_max = 0;\n    let paren_char_count_min = 0;\n    let paren_char_count_diff = 0;\n    let paren_char_count_diff_max = 0;\n    let paren_char_count_diff_min = 0;\n    let paren_char_count_diff_diff = 0;\n    let paren_char_count_diff_diff_max = 0;\n    let paren_char_count_diff_diff_min = 0;\n    let paren_char_count_diff_diff_diff = 0;\n    let paren_char_count_diff_diff_diff_max = 0;\n    let paren_char_count_diff_diff_diff_min = 0;\n    let paren_char_count_diff_diff_diff_diff = 0;\n    let paren_char_count_diff_diff_diff_diff_max = 0;\n    let paren_char_count_diff_diff_diff_diff_min = 0;\n    let paren_char_count_diff_diff_diff_diff_diff = 0;\n    let paren_char_count_diff_diff_diff_diff_diff_max = 0;\n    let paren_char_count_diff_diff_diff_diff_diff_min = 0;\n    let paren_char_count_diff_diff_diff_diff_diff_diff = 0;\n    let paren_char_count_diff_diff_diff_diff_diff_diff_max = 0;\n    let paren_char_count_diff_diff_diff_diff_diff_diff_min = 0;\n    let paren_char_count_diff_diff_diff_diff_diff_diff_diff = 0;\n    let paren_char_count_diff_diff_diff_diff_diff_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "../../../../../../tmp/tmpt963pdlh.ts(47,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let result = [];\n    let stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_index = 0;\n    let paren_string_length = paren_string.length;\n    let paren_string_index = 0;\n    let paren_string_char = '';\n    let paren_string_char_index = 0;\n    let paren_string_char_length = 0;\n    let paren_string_char_length_index = 0;\n    let paren_string_char_length_length = 0;\n    let paren_string_char_length_length_index = 0;\n    let paren_string_char_length_length_length = 0;\n    let paren_string_char_length_length_length_index = 0;\n    let paren_string_char_length_length_length_length = 0;\n    let paren_string_char_length_length_length_length_index = 0;\n    let paren_string_char_length_length_length_length_length = 0;\n    let paren_string_char_length_length_length_length_length_index = 0;\n    let paren_string_char_length_length_length_length_length_length = 0;\n    let paren_string_char_length_length_length_length_length_length_index = 0;\n    let paren_string_char_length_length_length_length_length_length_length = 0;\n    let paren_string_char_length_length_length_length_length_length_length_index = 0;\n    let paren_string_char_length_length_length_length_length_length_length_length = 0;\n    let paren_string_char_length_length_length_length_length_length_length_length_index = 0;\n    let paren_string_char_length_length_length_length_length_length_length_length_length = 0;\n    let paren_string_char_length_length_length_length_length_length_length_length_length_index = 0;\n    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292592,
      "stdout": "../../../../../../tmp/tmp3a8s2kmb.ts(46,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let result = [];\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_max = 0;\n    let paren_count_stack_max_index = 0;\n    let paren_count_stack_max_max = 0;\n    let paren_count_stack_max_max_index = 0;\n    let paren_count_stack_max_max_max = 0;\n    let paren_count_stack_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "../../../../../../tmp/tmpvzrt31nx.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let current_level = 0;\n    let max_level = 0;\n    let current_index = 0;\n    let paren_count = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_max = 0;\n    let paren_count_stack_max_index = 0;\n    let paren_count_stack_max_value = 0;\n    let paren_count_stack_max_value_index = 0;\n    let paren_count_stack_max_value_value = 0;\n    let paren_count_stack_max_value_value_index = 0;\n    let paren_count_stack_max_value_value_value = 0;\n    let paren_count_stack_max_value_value_value_index = 0;\n    let paren_count_stack_max_value_value_value_value = 0;\n    let paren_count_stack_max_value_value_value_value_index = 0;\n    let paren_count_stack_max_value_value_value_value_value = 0;\n    let paren_count_stack_max_value_value_value_value_value_index = 0;\n    let paren_count_stack_max_value_value_value_value_value_value = 0;\n    let paren_count_stack_max_value_value_value_value_value_value_index = 0;\n    let paren_count_stack_max_value_value_value_value_value_value_value = 0;\n    let paren_count_stack_max_value_value_value_value_value_value_value_index = 0;\n    let paren_count_stack_max_value_value_value_value_value_value_value_value = 0;\n    let paren_count_stack_max_value_value_value_value_value_value_value_value_index = 0;\n    let paren_count_stack_max_value_value_value_value_value_value_value_value_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292591,
      "stdout": "../../../../../../tmp/tmpj_n5g5j8.ts(44,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let max_nesting = 0;\n    let max_nesting_index = 0;\n    let current_nesting = 0;\n    let current_nesting_index = 0;\n    let current_char = '';\n    let current_char_index = 0;\n    let current_paren_count = 0;\n    let current_paren_index = 0;\n    let current_paren_stack = [];\n    let current_paren_stack_index = 0;\n    let current_paren_stack_count = 0;\n    let current_paren_stack_count_index = 0;\n    let current_paren_stack_count_count = 0;\n    let current_paren_stack_count_count_index = 0;\n    let current_paren_stack_count_count_count = 0;\n    let current_paren_stack_count_count_count_index = 0;\n    let current_paren_stack_count_count_count_count = 0;\n    let current_paren_stack_count_count_count_count_index = 0;\n    let current_paren_stack_count_count_count_count_count = 0;\n    let current_paren_stack_count_count_count_count_count_index = 0;\n    let current_paren_stack_count_count_count_count_count_count = 0;\n    let current_paren_stack_count_count_count_count_count_count_index = 0;\n    let current_paren_stack_count_count_count_count_count_count_count = 0;\n    let current_paren_stack_count_count_count_count_count_count_count_index = 0;\n    let current_paren_stack_count_count_count_count_count_count_count_count = 0;\n    let current_paren_stack_count_count_count_count_count_count_count_count_index = 0;\n    let current_paren_stack_count_count_count_count_count_count_count_count_count = 0;\n    let current_paren_stack_count_count_count_count_count_count\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292592,
      "stdout": "../../../../../../tmp/tmp14zrdkio.ts(48,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_max = 0;\n    let paren_count_stack_max_index = 0;\n    let paren_count_stack_max_max = 0;\n    let paren_count_stack_max_max_index = 0;\n    let paren_count_stack_max_max_max = 0;\n    let paren_count_stack_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292584,
      "stdout": "../../../../../../tmp/tmpcei3lprb.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let result = [];\n    let stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_stack = [];\n    let paren_stack_count = 0;\n    let paren_stack_level = 0;\n    let paren_stack_index = 0;\n    let paren_stack_index_count = 0;\n    let paren_stack_index_level = 0;\n    let paren_stack_index_index = 0;\n    let paren_stack_index_index_count = 0;\n    let paren_stack_index_index_level = 0;\n    let paren_stack_index_index_index = 0;\n    let paren_stack_index_index_index_count = 0;\n    let paren_stack_index_index_index_level = 0;\n    let paren_stack_index_index_index_index = 0;\n    let paren_stack_index_index_index_index_count = 0;\n    let paren_stack_index_index_index_index_level = 0;\n    let paren_stack_index_index_index_index_index = 0;\n    let paren_stack_index_index_index_index_index_count = 0;\n    let paren_stack_index_index_index_index_index_level = 0;\n    let paren_stack_index_index_index_index_index_index = 0;\n    let paren_stack_index_index_index_index_index_index_count = 0;\n    let paren_stack_index_index_index_index_index_index_level = 0;\n    let paren_stack_index_index_index_index_index_index_index = 0;\n    let paren_stack_index_index_index_index_index_index_index_count = 0;\n    let paren_stack_index_index_index_index_index_index_index_level = 0;\n    let paren_stack_index_index_index_index_index_index_index_index = 0;\n    let paren_stack_index_index_index_index_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292592,
      "stdout": "../../../../../../tmp/tmpve2rr5vm.ts(48,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let result = [];\n    let stack = [];\n    let max_depth = 0;\n    let current_depth = 0;\n    let current_char = \"\";\n    let current_char_index = 0;\n    let current_paren_index = 0;\n    let current_paren_count = 0;\n    let current_paren_count_index = 0;\n    let current_paren_count_count = 0;\n    let current_paren_count_count_index = 0;\n    let current_paren_count_count_count = 0;\n    let current_paren_count_count_count_index = 0;\n    let current_paren_count_count_count_count = 0;\n    let current_paren_count_count_count_count_index = 0;\n    let current_paren_count_count_count_count_count = 0;\n    let current_paren_count_count_count_count_count_index = 0;\n    let current_paren_count_count_count_count_count_count = 0;\n    let current_paren_count_count_count_count_count_count_index = 0;\n    let current_paren_count_count_count_count_count_count_count = 0;\n    let current_paren_count_count_count_count_count_count_count_index = 0;\n    let current_paren_count_count_count_count_count_count_count_count = 0;\n    let current_paren_count_count_count_count_count_count_count_count_index = 0;\n    let current_paren_count_count_count_count_count_count_count_count_count = 0;\n    let current_paren_count_count_count_count_count_count_count_count_count_index = 0;\n    let current_paren_count_count_count_count_count_count_count_count_count_count = 0;\n    let current_paren_count_count_count_count_count_count_count_count_count_count_index = 0;\n    let current_paren_count_count_count_count_count_count_count_count_count_count_count = 0;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292592,
      "stdout": "../../../../../../tmp/tmpx68sejjw.ts(47,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_top = 0;\n    let paren_count_stack_top_index = 0;\n    let paren_count_stack_top_top = 0;\n    let paren_count_stack_top_top_index = 0;\n    let paren_count_stack_top_top_top = 0;\n    let paren_count_stack_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_top_top\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292583,
      "stdout": "../../../../../../tmp/tmpq658_0w4.ts(42,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let max_nesting = 0;\n    let current_level = 0;\n    let current_paren = 0;\n    let paren_count = 0;\n    let paren_count_in_paren = 0;\n    let paren_count_in_paren_in_paren = 0;\n    let paren_count_in_paren_in_paren_in_paren = 0;\n    let paren_count_in_paren_in_paren_in_paren_in_paren = 0;\n    let paren_count_in_paren_in_paren_in_paren_in_paren_in_paren = 0;\n    let paren_count_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren = 0;\n    let paren_count_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren = 0;\n    let paren_count_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren = 0;\n    let paren_count_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren = 0;\n    let paren_count_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren = 0;\n    let paren_count_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren = 0;\n    let paren_count_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren = 0;\n    let paren_count_in_paren_in_paren_in_paren_in_paren_in_paren_in_paren_in_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292592,
      "stdout": "../../../../../../tmp/tmp0rti5dza.ts(36,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_size = 0;\n    let paren_count_stack_size_index = 0;\n    let paren_count_stack_size_size = 0;\n    let paren_count_stack_size_size_index = 0;\n    let paren_count_stack_size_size_size = 0;\n    let paren_count_stack_size_size_size_index = 0;\n    let paren_count_stack_size_size_size_size = 0;\n    let paren_count_stack_size_size_size_size_index = 0;\n    let paren_count_stack_size_size_size_size_size = 0;\n    let paren_count_stack_size_size_size_size_size_index = 0;\n    let paren_count_stack_size_size_size_size_size_size = 0;\n    let paren_count_stack_size_size_size_size_size_size_index = 0;\n    let paren_count_stack_size_size_size_size_size_size_size = 0;\n    let paren_count_stack_size_size_size_size_size_size_size_index = 0;\n    let paren_count_stack_size_size_size_size_size_size_size_size = 0;\n    let paren_count_stack_size_size_size_size_size_size_size_size_index = 0;\n    let paren_count_stack_size_size_size_size_size_size_size_size_size = 0;\n    let paren_count_stack_size_size_size_size_size_size_size_size_size_index = 0;\n    let paren_count_stack_size_size_size_size_size_size_size_size_size_size = 0;\n    let paren_count_stack_size_size_size_size_size_size_size\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292592,
      "stdout": "../../../../../../tmp/tmpphob3kky.ts(42,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let result = [];\n    let stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_in_level = 0;\n    let paren_level_in_count = 0;\n    let paren_level_in_count_in_level = 0;\n    let paren_level_in_count_in_level_in_level = 0;\n    let paren_level_in_count_in_level_in_level_in_level = 0;\n    let paren_level_in_count_in_level_in_level_in_level_in_level = 0;\n    let paren_level_in_count_in_level_in_level_in_level_in_level_in_level = 0;\n    let paren_level_in_count_in_level_in_level_in_level_in_level_in_level_in_level = 0;\n    let paren_level_in_count_in_level_in_level_in_level_in_level_in_level_in_level_in_level = 0;\n    let paren_level_in_count_in_level_in_level_in_level_in_level_in_level_in_level_in_level_in_level = 0;\n    let paren_level_in_count_in_level_in_level_in_level_in_level_in_level_in_level_in_level_in_level_in_level = 0;\n    let paren_level_in_count_in_level_in_level_in_level_in_level_in_level_in_level_in_level_in_level_in_level_in_level = 0;\n    let paren_level_in_count_in_level_in_level_in_level_in_level_in_level_in_level_in_level_in_level_in_level_in_level_in_level = 0;\n    let paren_level_in_count_in_level_in_level_in_level_in_level_in_level_in_level\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292592,
      "stdout": "../../../../../../tmp/tmpfxe2o4gj.ts(36,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_max = 0;\n    let paren_count_stack_max_index = 0;\n    let paren_count_stack_max_max = 0;\n    let paren_count_stack_max_max_index = 0;\n    let paren_count_stack_max_max_max = 0;\n    let paren_count_stack_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292584,
      "stdout": "../../../../../../tmp/tmpcei3lprb.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let result = [];\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_in_level = 0;\n    let paren_level_in_stack = 0;\n    let paren_count_in_stack = 0;\n    let paren_count_in_paren_stack = 0;\n    let paren_count_in_paren_level = 0;\n    let paren_count_in_paren_stack = 0;\n    let paren_count_in_paren_level = 0;\n    let paren_count_in_paren_count = 0;\n    let paren_count_in_paren_level_in_stack = 0;\n    let paren_count_in_paren_level_in_paren_stack = 0;\n    let paren_count_in_paren_level_in_paren_count = 0;\n    let paren_count_in_paren_level_in_paren_level = 0;\n    let paren_count_in_paren_level_in_paren_level_in_stack = 0;\n    let paren_count_in_paren_level_in_paren_level_in_paren_stack = 0;\n    let paren_count_in_paren_level_in_paren_level_in_paren_count = 0;\n    let paren_count_in_paren_level_in_paren_level_in_paren_level = 0;\n    let paren_count_in_paren_level_in_paren_level_in_paren_level_in_stack = 0;\n    let paren_count_in_paren_level_in_paren_level_in_paren_level_in_paren_stack = 0;\n    let paren_count_in_paren_level_in_paren_level_in_paren_level_in_paren_count = 0;\n    let paren_count_in_paren_level_in_paren_level_in_paren_level_in_paren_level = 0;\n    let paren_count_in_paren_level_in_paren_level_in_paren_level_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292592,
      "stdout": "../../../../../../tmp/tmp7dwwl59z.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_in_level = 0;\n    let paren_level_in_count = 0;\n    let paren_level_in_count_in_level = 0;\n    let paren_level_in_count_in_level_in_level = 0;\n    let paren_level_in_count_in_level_in_level_in_level = 0;\n    let paren_level_in_count_in_level_in_level_in_level_in_level = 0;\n    let paren_level_in_count_in_level_in_level_in_level_in_level_in_level = 0;\n    let paren_level_in_count_in_level_in_level_in_level_in_level_in_level_in_level = 0;\n    let paren_level_in_count_in_level_in_level_in_level_in_level_in_level_in_level_in_level = 0;\n    let paren_level_in_count_in_level_in_level_in_level_in_level_in_level_in_level_in_level_in_level = 0;\n    let paren_level_in_count_in_level_in_level_in_level_in_level_in_level_in_level_in_level_in_level_in_level = 0;\n    let paren_level_in_count_in_level_in_level_in_level_in_level_in_level_in_level_in_level_in_level_in_level_in_level = 0;\n    let paren_level_in_count_in_level_in_level_in_level_in_level_in_level_in_level_in_level_in_level_in_level_in_level_in_level = 0;\n    let paren_level_in_count_in_level_in_level_in_level_in_level_in_level_in_level_in_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292592,
      "stdout": "../../../../../../tmp/tmpvfv64rgf.ts(35,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_index = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_length = 0;\n    let paren_count_stack_max = 0;\n    let paren_count_stack_max_index = 0;\n    let paren_count_stack_max_length = 0;\n    let paren_count_stack_max_max = 0;\n    let paren_count_stack_max_max_index = 0;\n    let paren_count_stack_max_max_length = 0;\n    let paren_count_stack_max_max_max = 0;\n    let paren_count_stack_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_length = 0;\n    let paren_count_stack_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_length = 0;\n    let paren_count_stack_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_length = 0;\n    let paren_count_stack_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_length = 0;\n    let paren_count_stack_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292592,
      "stdout": "../../../../../../tmp/tmp8orxujn3.ts(46,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_depth = 0;\n    let paren_index = 0;\n    let paren_count_max = 0;\n    let paren_depth_max = 0;\n    let paren_index_max = 0;\n    let paren_count_max_index = 0;\n    let paren_depth_max_index = 0;\n    let paren_index_max_index = 0;\n    let paren_count_max_index_max = 0;\n    let paren_depth_max_index_max = 0;\n    let paren_index_max_index_max = 0;\n    let paren_count_max_index_max_index = 0;\n    let paren_depth_max_index_max_index = 0;\n    let paren_index_max_index_max_index = 0;\n    let paren_count_max_index_max_index_max = 0;\n    let paren_depth_max_index_max_index_max = 0;\n    let paren_index_max_index_max_index_max = 0;\n    let paren_count_max_index_max_index_max_index = 0;\n    let paren_depth_max_index_max_index_max_index = 0;\n    let paren_index_max_index_max_index_max_index = 0;\n    let paren_count_max_index_max_index_max_index_max = 0;\n    let paren_depth_max_index_max_index_max_index_max = 0;\n    let paren_index_max_index_max_index_max_index_max = 0;\n    let paren_count_max_index_max_index_max_index_max_index = 0;\n    let paren_depth_max_index_max_index_max_index_max_index = 0;\n    let paren_index_max_index_max_index_max_index_max_index = 0;\n    let paren_count_max_index_max_index_max_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292592,
      "stdout": "../../../../../../tmp/tmp793meg1c.ts(47,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_in_level = 0;\n    let paren_level_in_stack = 0;\n    let paren_count_in_stack = 0;\n    let paren_level_in_paren_stack = 0;\n    let paren_count_in_paren_stack = 0;\n    let paren_level_in_paren_stack = 0;\n    let paren_count_in_paren_level = 0;\n    let paren_level_in_paren_level = 0;\n    let paren_count_in_paren_level = 0;\n    let paren_level_in_paren_level = 0;\n    let paren_count_in_paren_level = 0;\n    let paren_level_in_paren_level = 0;\n    let paren_count_in_paren_level = 0;\n    let paren_level_in_paren_level = 0;\n    let paren_count_in_paren_level = 0;\n    let paren_level_in_paren_level = 0;\n    let paren_count_in_paren_level = 0;\n    let paren_level_in_paren_level = 0;\n    let paren_count_in_paren_level = 0;\n    let paren_level_in_paren_level = 0;\n    let paren_count_in_paren_level = 0;\n    let paren_level_in_paren_level = 0;\n    let paren_count_in_paren_level = 0;\n    let paren_level_in_paren_level = 0;\n    let paren_count_in_paren_level = 0;\n    let paren_level_in_paren_level = 0;\n    let paren_count_in_paren_level = 0;\n    let paren_level_in_paren_level = 0;\n    let paren_count_in_paren_level = 0;\n    let paren_level_in_paren_level = 0;\n    let paren_count_in_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292592,
      "stdout": "../../../../../../tmp/tmpbc6s90l0.ts(52,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let current_level = 0;\n    let max_level = 0;\n    let max_level_index = 0;\n    let paren_count = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292592,
      "stdout": "../../../../../../tmp/tmprq1fpkvm.ts(79,9): error TS1005: ',' expected.\n../../../../../../tmp/tmprq1fpkvm.ts(90,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_top = 0;\n    let paren_count_stack_top_index = 0;\n    let paren_count_stack_top_top = 0;\n    let paren_count_stack_top_top_index = 0;\n    let paren_count_stack_top_top_top = 0;\n    let paren_count_stack_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_top_top\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292583,
      "stdout": "../../../../../../tmp/tmpq658_0w4.ts(42,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_max = 0;\n    let paren_count_stack_max_index = 0;\n    let paren_count_stack_max_max = 0;\n    let paren_count_stack_max_max_index = 0;\n    let paren_count_stack_max_max_max = 0;\n    let paren_count_stack_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292584,
      "stdout": "../../../../../../tmp/tmpcei3lprb.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let max_nesting = 0;\n    let paren_count = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_max = 0;\n    let paren_count_stack_max_index = 0;\n    let paren_count_stack_max_length = 0;\n    let paren_count_stack_max_length_index = 0;\n    let paren_count_stack_max_length_length = 0;\n    let paren_count_stack_max_length_length_index = 0;\n    let paren_count_stack_max_length_length_length = 0;\n    let paren_count_stack_max_length_length_length_index = 0;\n    let paren_count_stack_max_length_length_length_length = 0;\n    let paren_count_stack_max_length_length_length_length_index = 0;\n    let paren_count_stack_max_length_length_length_length_length = 0;\n    let paren_count_stack_max_length_length_length_length_length_index = 0;\n    let paren_count_stack_max_length_length_length_length_length_length = 0;\n    let paren_count_stack_max_length_length_length_length_length_length_index = 0;\n    let paren_count_stack_max_length_length_length_length_length_length_length = 0;\n    let paren_count_stack_max_length_length_length_length_length_length_length_index = 0;\n    let paren_count_stack_max_length_length_length_length_length_length_length_length = 0;\n    let paren_count_stack_max_length_length_length_length_length_length_length_length_index = 0;\n    let paren_count_stack_max_length_length_length_length_length_length_length_length_length = 0;\n    let paren_count_stack_max_length\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292593,
      "stdout": "../../../../../../tmp/tmptfz0kk5j.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let current_level = 0;\n    let max_level = 0;\n    let max_index = 0;\n    let current_index = 0;\n    let current_char = \"\";\n    let current_char_index = 0;\n    let next_char_index = 0;\n    let next_char = \"\";\n    let next_char_index = 0;\n    let next_char_next_index = 0;\n    let next_char_next = \"\";\n    let next_char_next_index = 0;\n    let next_char_next_next_index = 0;\n    let next_char_next_next = \"\";\n    let next_char_next_next_next_index = 0;\n    let next_char_next_next_next = \"\";\n    let next_char_next_next_next_next_index = 0;\n    let next_char_next_next_next_next = \"\";\n    let next_char_next_next_next_next_next_index = 0;\n    let next_char_next_next_next_next_next = \"\";\n    let next_char_next_next_next_next_next_next_index = 0;\n    let next_char_next_next_next_next_next_next = \"\";\n    let next_char_next_next_next_next_next_next_next_index = 0;\n    let next_char_next_next_next_next_next_next_next = \"\";\n    let next_char_next_next_next_next_next_next_next_next_index = 0;\n    let next_char_next_next_next_next_next_next_next_next = \"\";\n    let next_char_next_next_next_next_next_next_next_next_next_index = 0;\n    let next_char_next_next_next_next_next_next_next_next_next = \"\";\n    let next_char_next_next_next_next_next_next_next_next_next_next_index = 0;\n    let next_char_next_next_next_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292593,
      "stdout": "../../../../../../tmp/tmpei0lljo_.ts(49,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let current_level = 0;\n    let max_level = 0;\n    let paren_count = 0;\n    let paren_count_in_level = 0;\n    let paren_count_in_next_level = 0;\n    let paren_count_in_next_next_level = 0;\n    let paren_count_in_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_next_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_next_next_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_next_next_next_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_next_next_next_next_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_next_next_next_next_next_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_level = 0;\n    let paren_count_in_next_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292594,
      "stdout": "../../../../../../tmp/tmpnx76q2js.ts(39,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_max = 0;\n    let paren_count_stack_max_index = 0;\n    let paren_count_stack_max_max = 0;\n    let paren_count_stack_max_max_index = 0;\n    let paren_count_stack_max_max_max = 0;\n    let paren_count_stack_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292584,
      "stdout": "../../../../../../tmp/tmpcei3lprb.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_max = 0;\n    let paren_count_stack_max_index = 0;\n    let paren_count_stack_max_max = 0;\n    let paren_count_stack_max_max_index = 0;\n    let paren_count_stack_max_max_max = 0;\n    let paren_count_stack_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292584,
      "stdout": "../../../../../../tmp/tmpcei3lprb.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let result = [];\n    let stack = [];\n    let current_level = 0;\n    let current_group = 0;\n    let current_paren = 0;\n    let current_paren_count = 0;\n    let current_paren_level = 0;\n    let current_paren_count_level = 0;\n    let current_paren_count_level_stack = [];\n    let current_paren_count_level_stack_index = 0;\n    let current_paren_count_level_stack_length = 0;\n    let current_paren_count_level_stack_length_stack = [];\n    let current_paren_count_level_stack_length_stack_index = 0;\n    let current_paren_count_level_stack_length_stack_length = 0;\n    let current_paren_count_level_stack_length_stack_length_stack = [];\n    let current_paren_count_level_stack_length_stack_length_stack_index = 0;\n    let current_paren_count_level_stack_length_stack_length_stack_length = 0;\n    let current_paren_count_level_stack_length_stack_length_stack_length_stack = [];\n    let current_paren_count_level_stack_length_stack_length_stack_length_stack_index = 0;\n    let current_paren_count_level_stack_length_stack_length_stack_length_stack_length = 0;\n    let current_paren_count_level_stack_length_stack_length_stack_length_stack_length_stack = [];\n    let current_paren_count_level_stack_length_stack_length_stack_length_stack_length_stack_index = 0;\n    let current_paren_count_level_stack_length_stack_length_stack_length_stack_length_stack_length = 0;\n    let current_paren_count_level_stack_length_stack_length_stack_length_stack_length_stack_length_stack = [];\n    let current_paren_count_level_stack_length_stack_length_stack_length_stack_length_stack_length_stack_index = 0;\n    let current_paren_count\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292594,
      "stdout": "../../../../../../tmp/tmp1btlw2yd.ts(44,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let result = [];\n    let stack = [];\n    let level = 0;\n    let paren_count = 0;\n    let paren_index = 0;\n    let paren_length = paren_string.length;\n    let paren_char = paren_string[paren_index];\n    let paren_char_length = paren_char.length;\n    let paren_char_index = 0;\n    let paren_char_char = paren_char[paren_char_index];\n    let paren_char_char_length = paren_char_char.length;\n    let paren_char_char_index = 0;\n    let paren_char_char_char = paren_char_char[paren_char_char_index];\n    let paren_char_char_char_length = paren_char_char_char.length;\n    let paren_char_char_char_index = 0;\n    let paren_char_char_char_char = paren_char_char_char[paren_char_char_char_index];\n    let paren_char_char_char_char_length = paren_char_char_char_char.length;\n    let paren_char_char_char_char_index = 0;\n    let paren_char_char_char_char_char = paren_char_char_char_char[paren_char_char_char_char_index];\n    let paren_char_char_char_char_char_length = paren_char_char_char_char_char.length;\n    let paren_char_char_char_char_char_index = 0;\n    let paren_char_char_char_char_char_char = paren_char_char_char_char_char[paren_char_char_char_char_char_index];\n    let paren_char_char_char_char_char_char_length = paren_char_char_char_char_char_char.length;\n    let paren_char_char_char_char_char_char_index = 0;\n    let paren_char_char_char_char\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292594,
      "stdout": "../../../../../../tmp/tmpkun5p1jw.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_max = 0;\n    let paren_count_stack_max_index = 0;\n    let paren_count_stack_max_max = 0;\n    let paren_count_stack_max_max_index = 0;\n    let paren_count_stack_max_max_max = 0;\n    let paren_count_stack_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292584,
      "stdout": "../../../../../../tmp/tmpcei3lprb.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_max = 0;\n    let paren_count_stack_max_index = 0;\n    let paren_count_stack_max_max = 0;\n    let paren_count_stack_max_max_index = 0;\n    let paren_count_stack_max_max_max = 0;\n    let paren_count_stack_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292584,
      "stdout": "../../../../../../tmp/tmpcei3lprb.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_max = 0;\n    let paren_count_stack_max_index = 0;\n    let paren_count_stack_max_value = 0;\n    let paren_count_stack_max_value_index = 0;\n    let paren_count_stack_max_value_value = 0;\n    let paren_count_stack_max_value_value_index = 0;\n    let paren_count_stack_max_value_value_value = 0;\n    let paren_count_stack_max_value_value_value_index = 0;\n    let paren_count_stack_max_value_value_value_value = 0;\n    let paren_count_stack_max_value_value_value_value_index = 0;\n    let paren_count_stack_max_value_value_value_value_value = 0;\n    let paren_count_stack_max_value_value_value_value_value_index = 0;\n    let paren_count_stack_max_value_value_value_value_value_value = 0;\n    let paren_count_stack_max_value_value_value_value_value_value_index = 0;\n    let paren_count_stack_max_value_value_value_value_value_value_value = 0;\n    let paren_count_stack_max_value_value_value_value_value_value_value_index = 0;\n    let paren_count_stack_max_value_value_value_value_value_value_value_value = 0;\n    let paren_count_stack_max_value_value_value_value_value_value_value_value_index = 0;\n    let paren_count_stack_max_value_value_value_value_value_value_value_value_value = 0;\n    let paren_count_stack_max_value\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292586,
      "stdout": "../../../../../../tmp/tmpfwh3qy5h.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let max_nesting = 0;\n    let current_level = 0;\n    let paren_count = 0;\n    let paren_string_length = paren_string.length;\n    let i = 0;\n    while (i < paren_string_length) {\n        if (paren_string[i] === '(') {\n            paren_stack.push(i);\n            paren_count++;\n        } else if (paren_string[i] === ')') {\n            if (paren_count === 0) {\n                throw new Error(\"Invalid parentheses string\");\n            }\n            paren_count--;\n            if (paren_count === 0) {\n                current_level++;\n                if (current_level > max_nesting) {\n                    max_nesting = current_level;\n                }\n            }\n            i = paren_stack.pop();\n        }\n        i++;\n    }\n    if (paren_count !== 0) {\n        throw new Error(\"Invalid parentheses string\");\n    }\n    return max_nesting;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292594,
      "stdout": "../../../../../../tmp/tmprsvf1ngy.ts(35,5): error TS2322: Type 'number' is not assignable to type 'number[]'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let result = [];\n    let stack = [];\n    let current_level = 0;\n    let current_paren_level = 0;\n    let current_paren_count = 0;\n    let current_paren_string = \"\";\n    let current_paren_string_length = 0;\n    let current_paren_string_index = 0;\n    let current_paren_string_length_index = 0;\n    let current_paren_string_index_end = 0;\n    let current_paren_string_length_index_end = 0;\n    let current_paren_string_index_start = 0;\n    let current_paren_string_length_index_start = 0;\n    let current_paren_string_index_start_end = 0;\n    let current_paren_string_length_index_start_end = 0;\n    let current_paren_string_index_start_end_end = 0;\n    let current_paren_string_length_index_start_end_end = 0;\n    let current_paren_string_index_start_end_end_end = 0;\n    let current_paren_string_length_index_start_end_end_end = 0;\n    let current_paren_string_index_start_end_end_end_end = 0;\n    let current_paren_string_length_index_start_end_end_end_end = 0;\n    let current_paren_string_index_start_end_end_end_end_end = 0;\n    let current_paren_string_length_index_start_end_end_end_end_end = 0;\n    let current_paren_string_index_start_end_end_end_end_end_end = 0;\n    let current_paren_string_length_index_start_end_end_end_end_end_end = 0;\n    let current_paren_string_index_start_end_end_end_end_end_end_end = 0;\n    let current_paren_string_length_index_start_end_end_end_end_end_end_end = 0;\n    let current_paren_string_index_start_end_end_end\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292594,
      "stdout": "../../../../../../tmp/tmp4pynwzfy.ts(46,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_in_level = 0;\n    let paren_count_in_next_level = 0;\n    let paren_count_in_next_next_level = 0;\n    let paren_count_in_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_next_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_next_next_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_next_next_next_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_next_next_next_next_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_next_next_next_next_next_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292586,
      "stdout": "../../../../../../tmp/tmpbytjyq_z.ts(38,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let max_nesting = 0;\n    let current_nesting = 0;\n    let current_paren = 0;\n    let current_paren_string = \"\";\n    let current_paren_count = 0;\n    let current_paren_string_count = 0;\n    let current_paren_string_count_end = 0;\n    let current_paren_string_count_start = 0;\n    let current_paren_string_count_start_end = 0;\n    let current_paren_string_count_start_start = 0;\n    let current_paren_string_count_start_start_end = 0;\n    let current_paren_string_count_start_start_start = 0;\n    let current_paren_string_count_start_start_start_end = 0;\n    let current_paren_string_count_start_start_start_start = 0;\n    let current_paren_string_count_start_start_start_start_end = 0;\n    let current_paren_string_count_start_start_start_start_start = 0;\n    let current_paren_string_count_start_start_start_start_start_end = 0;\n    let current_paren_string_count_start_start_start_start_start_start = 0;\n    let current_paren_string_count_start_start_start_start_start_start_end = 0;\n    let current_paren_string_count_start_start_start_start_start_start_start = 0;\n    let current_paren_string_count_start_start_start_start_start_start_start_end = 0;\n    let current_paren_string_count_start_start_start_start_start_start_start_start = 0;\n    let current_paren_string_count_start_start_start_start_start_start_start_start_end = 0;\n    let current_paren_string_count_start_start_start_start_start_start_start_start_start = 0;\n    let current_paren_string_count_start_start_start_start_start_start_start_start\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292594,
      "stdout": "../../../../../../tmp/tmp3a6tx9yk.ts(44,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let result = [];\n    let stack = [];\n    let level = 0;\n    let paren_count = 0;\n    let paren_index = 0;\n    let paren_length = paren_string.length;\n    let paren_char = paren_string[paren_index];\n    let paren_char_length = paren_char.length;\n    let paren_char_index = 0;\n    let paren_char_char = paren_char[paren_char_index];\n    while (paren_index < paren_length) {\n        if (paren_char_index < paren_char_length) {\n            if (paren_char_char === '(') {\n                stack.push(paren_char_index);\n                paren_count += 1;\n            } else if (paren_char_char === ')') {\n                if (stack.length > 0) {\n                    stack.pop();\n                    paren_count -= 1;\n                }\n            }\n            paren_char_index += 1;\n        } else {\n            if (stack.length > 0) {\n                stack.pop();\n                paren_count -= 1;\n            }\n            paren_char_index = 0;\n        }\n        if (paren_count === 0) {\n            result.push(level);\n            level = 0;\n        } else {\n            level += 1;\n        }\n        paren_index += 1;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n  1,\n  1,\n  1,\n  1,\n  1,\n  1,\n  1,\n  1,\n  1,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmplyqapn77.js:52:12)\n    at Object.<anonymous> (/tmp/tmplyqapn77.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1, 1, 1, 1, 1, 1,\n    1, 1, 1, 1, 1, 1,\n    1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_index = 0;\n    let paren_string_length = paren_string.length;\n    let paren_string_index = 0;\n    let paren_string_index_prev = 0;\n    let paren_string_index_next = 0;\n    let paren_string_index_next_prev = 0;\n    let paren_string_index_next_next = 0;\n    let paren_string_index_next_next_prev = 0;\n    let paren_string_index_next_next_next = 0;\n    let paren_string_index_next_next_next_prev = 0;\n    let paren_string_index_next_next_next_next = 0;\n    let paren_string_index_next_next_next_next_prev = 0;\n    let paren_string_index_next_next_next_next_next = 0;\n    let paren_string_index_next_next_next_next_next_prev = 0;\n    let paren_string_index_next_next_next_next_next_next = 0;\n    let paren_string_index_next_next_next_next_next_next_prev = 0;\n    let paren_string_index_next_next_next_next_next_next_next = 0;\n    let paren_string_index_next_next_next_next_next_next_next_prev = 0;\n    let paren_string_index_next_next_next_next_next_next_next_next = 0;\n    let paren_string_index_next_next_next_next_next_next_next_next_prev = 0;\n    let paren_string_index_next_next_next_next_next_next_next_next_next = 0;\n    let paren_string_index_next_next_next_next_next_next_next_next_next_prev = 0;\n    let paren_string_index_next_next_next_next\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292594,
      "stdout": "../../../../../../tmp/tmpoh4mtsgl.ts(44,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let result = [];\n    let stack = [];\n    let max_depth = 0;\n    let current_depth = 0;\n    let current_char = \"\";\n    let current_char_index = 0;\n    let current_paren_index = 0;\n    let current_paren_count = 0;\n    let current_paren_count_index = 0;\n    let current_paren_count_count = 0;\n    let current_paren_count_count_index = 0;\n    let current_paren_count_count_count = 0;\n    let current_paren_count_count_count_index = 0;\n    let current_paren_count_count_count_count = 0;\n    let current_paren_count_count_count_count_index = 0;\n    let current_paren_count_count_count_count_count = 0;\n    let current_paren_count_count_count_count_count_index = 0;\n    let current_paren_count_count_count_count_count_count = 0;\n    let current_paren_count_count_count_count_count_count_index = 0;\n    let current_paren_count_count_count_count_count_count_count = 0;\n    let current_paren_count_count_count_count_count_count_count_index = 0;\n    let current_paren_count_count_count_count_count_count_count_count = 0;\n    let current_paren_count_count_count_count_count_count_count_count_index = 0;\n    let current_paren_count_count_count_count_count_count_count_count_count = 0;\n    let current_paren_count_count_count_count_count_count_count_count_count_index = 0;\n    let current_paren_count_count_count_count_count_count_count_count_count_count = 0;\n    let current_paren_count_count_count_count_count_count_count_count_count_count_index = 0;\n    let current_paren_count_count_count_count_count_count_count_count_count_count_count = 0;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292592,
      "stdout": "../../../../../../tmp/tmpx68sejjw.ts(47,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_max = 0;\n    let paren_count_stack_max_index = 0;\n    let paren_count_stack_max_value = 0;\n    let paren_count_stack_max_value_index = 0;\n    let paren_count_stack_max_value_value = 0;\n    let paren_count_stack_max_value_value_index = 0;\n    let paren_count_stack_max_value_value_value = 0;\n    let paren_count_stack_max_value_value_value_index = 0;\n    let paren_count_stack_max_value_value_value_value = 0;\n    let paren_count_stack_max_value_value_value_value_index = 0;\n    let paren_count_stack_max_value_value_value_value_value = 0;\n    let paren_count_stack_max_value_value_value_value_value_index = 0;\n    let paren_count_stack_max_value_value_value_value_value_value = 0;\n    let paren_count_stack_max_value_value_value_value_value_value_index = 0;\n    let paren_count_stack_max_value_value_value_value_value_value_value = 0;\n    let paren_count_stack_max_value_value_value_value_value_value_value_index = 0;\n    let paren_count_stack_max_value_value_value_value_value_value_value_value = 0;\n    let paren_count_stack_max_value_value_value_value_value_value_value_value_index = 0;\n    let paren_count_stack_max_value_value_value_value_value_value_value_value_value = 0;\n    let paren_count_stack_max_value\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292586,
      "stdout": "../../../../../../tmp/tmpfwh3qy5h.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  let paren_stack = [];\n  let paren_count = 0;\n  let paren_level = 0;\n  let paren_count_stack = [];\n  let paren_count_stack_index = 0;\n  let paren_count_stack_length = 0;\n  let paren_count_stack_max = 0;\n  let paren_count_stack_max_index = 0;\n  let paren_count_stack_max_length = 0;\n  let paren_count_stack_max_length_index = 0;\n  let paren_count_stack_max_length_length = 0;\n  let paren_count_stack_max_length_length_index = 0;\n  let paren_count_stack_max_length_length_length = 0;\n  let paren_count_stack_max_length_length_length_index = 0;\n  let paren_count_stack_max_length_length_length_length = 0;\n  let paren_count_stack_max_length_length_length_length_index = 0;\n  let paren_count_stack_max_length_length_length_length_length = 0;\n  let paren_count_stack_max_length_length_length_length_length_index = 0;\n  let paren_count_stack_max_length_length_length_length_length_length = 0;\n  let paren_count_stack_max_length_length_length_length_length_length_index = 0;\n  let paren_count_stack_max_length_length_length_length_length_length_length = 0;\n  let paren_count_stack_max_length_length_length_length_length_length_length_index = 0;\n  let paren_count_stack_max_length_length_length_length_length_length_length_length = 0;\n  let paren_count_stack_max_length_length_length_length_length_length_length_length_index = 0;\n  let paren_count_stack_max_length_length_length_length_length_length_length_length_length = 0\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292594,
      "stdout": "../../../../../../tmp/tmpd_wa7eth.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let max_nesting = 0;\n    let current_level = 0;\n    let current_paren = 0;\n    let current_paren_count = 0;\n    let paren_count = 0;\n    let paren_string_length = paren_string.length;\n    for (let i = 0; i < paren_string_length; i++) {\n        if (paren_string[i] === '(') {\n            paren_stack.push(i);\n            current_paren_count++;\n            current_level++;\n            if (current_level > max_nesting) {\n                max_nesting = current_level;\n            }\n        } else if (paren_string[i] === ')') {\n            current_paren_count--;\n            if (current_paren_count === 0) {\n                current_level--;\n                paren_stack.pop();\n                paren_count++;\n            }\n        }\n    }\n    return [max_nesting, paren_count];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  9,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmprwah7fpk.js:37:12)\n    at Object.<anonymous> (/tmp/tmprwah7fpk.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 9, 4 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let current_level = 0;\n    let max_level = 0;\n    let current_paren_count = 0;\n    let current_paren_string = \"\";\n    let current_paren_count_string = \"\";\n    let current_paren_count_string_length = 0;\n    let current_paren_count_string_index = 0;\n    let current_paren_count_string_index_end = 0;\n    let current_paren_count_string_index_start = 0;\n    let current_paren_count_string_index_start_end = 0;\n    let current_paren_count_string_index_start_end_end = 0;\n    let current_paren_count_string_index_start_end_end_end = 0;\n    let current_paren_count_string_index_start_end_end_end_end = 0;\n    let current_paren_count_string_index_start_end_end_end_end_end = 0;\n    let current_paren_count_string_index_start_end_end_end_end_end_end = 0;\n    let current_paren_count_string_index_start_end_end_end_end_end_end_end = 0;\n    let current_paren_count_string_index_start_end_end_end_end_end_end_end_end = 0;\n    let current_paren_count_string_index_start_end_end_end_end_end_end_end_end_end = 0;\n    let current_paren_count_string_index_start_end_end_end_end_end_end_end_end_end_end = 0;\n    let current_paren_count_string_index_start_end_end_end_end_end_end_end_end_end_end_end = 0;\n    let current_paren_count_string_index_start_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n    let current_paren_count_string_index_start_end_end_end_end_end_end_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292594,
      "stdout": "../../../../../../tmp/tmplmjh6sw_.ts(41,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_top = 0;\n    let paren_count_stack_top_index = 0;\n    let paren_count_stack_top_top = 0;\n    let paren_count_stack_top_top_index = 0;\n    let paren_count_stack_top_top_top = 0;\n    let paren_count_stack_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_top_top\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292583,
      "stdout": "../../../../../../tmp/tmpq658_0w4.ts(42,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_count_stack = [];\n    let max_nesting = 0;\n    let max_nesting_stack = [];\n    let current_nesting = 0;\n    let current_nesting_stack = [];\n    let current_paren_count = 0;\n    let current_paren_count_stack = [];\n    let current_paren_stack = [];\n    let current_paren_stack_stack = [];\n    let current_paren_stack_count = 0;\n    let current_paren_stack_count_stack = [];\n    let current_paren_stack_count_stack_stack = [];\n    let current_paren_stack_count_stack_count = 0;\n    let current_paren_stack_count_stack_count_stack = [];\n    let current_paren_stack_count_stack_count_stack_count = 0;\n    let current_paren_stack_count_stack_count_stack_count_stack = [];\n    let current_paren_stack_count_stack_count_stack_count_stack_count = 0;\n    let current_paren_stack_count_stack_count_stack_count_stack_count_stack = [];\n    let current_paren_stack_count_stack_count_stack_count_stack_count_stack_count = 0;\n    let current_paren_stack_count_stack_count_stack_count_stack_count_stack_count_stack = [];\n    let current_paren_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count = 0;\n    let current_paren_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack = [];\n    let current_paren_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count = 0;\n    let current_paren_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack = [];\n    let current_paren_stack_count_stack_count_stack_count_stack_count_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292594,
      "stdout": "../../../../../../tmp/tmp9n0fg0np.ts(45,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_max = 0;\n    let paren_count_stack_max_index = 0;\n    let paren_count_stack_max_max = 0;\n    let paren_count_stack_max_max_index = 0;\n    let paren_count_stack_max_max_max = 0;\n    let paren_count_stack_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292584,
      "stdout": "../../../../../../tmp/tmpcei3lprb.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let max_depth = 0;\n    let current_depth = 0;\n    let current_index = 0;\n    let current_paren_string = \"\";\n    let current_paren_string_length = 0;\n    let current_paren_string_index = 0;\n    let current_paren_string_length_index = 0;\n    let current_paren_string_length_index_end = 0;\n    let current_paren_string_length_index_start = 0;\n    let current_paren_string_length_index_start_end = 0;\n    let current_paren_string_length_index_start_start = 0;\n    let current_paren_string_length_index_start_start_end = 0;\n    let current_paren_string_length_index_start_start_start = 0;\n    let current_paren_string_length_index_start_start_start_end = 0;\n    let current_paren_string_length_index_start_start_start_start = 0;\n    let current_paren_string_length_index_start_start_start_start_end = 0;\n    let current_paren_string_length_index_start_start_start_start_start = 0;\n    let current_paren_string_length_index_start_start_start_start_start_end = 0;\n    let current_paren_string_length_index_start_start_start_start_start_start = 0;\n    let current_paren_string_length_index_start_start_start_start_start_start_end = 0;\n    let current_paren_string_length_index_start_start_start_start_start_start_start = 0;\n    let current_paren_string_length_index_start_start_start_start_start_start_start_end = 0;\n    let current_paren_string_length_index_start_start_start_start_start_start_start_start = 0;\n    let current_paren_string_length_index_start_start_start_start_start_start_start_start_end = 0;\n    let current_paren_string\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292595,
      "stdout": "../../../../../../tmp/tmpyvuzqyhu.ts(44,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let current_level = 0;\n    let max_level = 0;\n    let paren_count = 0;\n    let paren_index = 0;\n    let paren_count_in_level = 0;\n    let paren_count_in_level_stack = [];\n    let paren_count_in_level_stack_index = 0;\n    let paren_count_in_level_stack_stack = [];\n    let paren_count_in_level_stack_stack_index = 0;\n    let paren_count_in_level_stack_stack_stack = [];\n    let paren_count_in_level_stack_stack_stack_index = 0;\n    let paren_count_in_level_stack_stack_stack_stack = [];\n    let paren_count_in_level_stack_stack_stack_stack_index = 0;\n    let paren_count_in_level_stack_stack_stack_stack_stack = [];\n    let paren_count_in_level_stack_stack_stack_stack_stack_index = 0;\n    let paren_count_in_level_stack_stack_stack_stack_stack_stack = [];\n    let paren_count_in_level_stack_stack_stack_stack_stack_stack_index = 0;\n    let paren_count_in_level_stack_stack_stack_stack_stack_stack_stack = [];\n    let paren_count_in_level_stack_stack_stack_stack_stack_stack_stack_index = 0;\n    let paren_count_in_level_stack_stack_stack_stack_stack_stack_stack_stack = [];\n    let paren_count_in_level_stack_stack_stack_stack_stack_stack_stack_stack_index = 0;\n    let paren_count_in_level_stack_stack_stack_stack_stack_stack_stack_stack_stack = [];\n    let paren_count_in_level_stack_stack_stack_stack_stack_stack_stack_stack_stack_index = 0;\n    let paren_count_in_level\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292594,
      "stdout": "../../../../../../tmp/tmp_m2_hgv8.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_max = 0;\n    let paren_count_stack_max_index = 0;\n    let paren_count_stack_max_max = 0;\n    let paren_count_stack_max_max_index = 0;\n    let paren_count_stack_max_max_max = 0;\n    let paren_count_stack_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292584,
      "stdout": "../../../../../../tmp/tmpcei3lprb.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_start = 0;\n    let paren_end = 0;\n    let paren_count_start = 0;\n    let paren_count_end = 0;\n    let paren_count_start_end = 0;\n    let paren_count_start_end_start = 0;\n    let paren_count_start_end_end = 0;\n    let paren_count_start_end_start_end = 0;\n    let paren_count_start_end_end_start = 0;\n    let paren_count_start_end_end_end = 0;\n    let paren_count_start_end_start_end_start = 0;\n    let paren_count_start_end_end_start_end_end = 0;\n    let paren_count_start_end_start_end_start_end = 0;\n    let paren_count_start_end_end_start_end_end = 0;\n    let paren_count_start_end_start_end_start_end_start = 0;\n    let paren_count_start_end_end_start_end_end_start = 0;\n    let paren_count_start_end_start_end_start_end_end = 0;\n    let paren_count_start_end_start_end_start_end_start_end = 0;\n    let paren_count_start_end_start_end_start_end_end_start = 0;\n    let paren_count_start_end_start_end_start_end_end_end = 0;\n    let paren_count_start_end_start_end_start_end_start_end = 0;\n    let paren_count_start_end_start_end_start_end_end_start = 0;\n    let paren_count_start_end_start_end_start_end_end_end = 0;\n    let paren_count_start_end_start_end_start_end_start_end = 0;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292595,
      "stdout": "../../../../../../tmp/tmpmrpz0cwe.ts(45,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let result = [];\n    let stack = [];\n    let paren_count = 0;\n    let paren_index = 0;\n    let paren_depth = 0;\n    let paren_char = \"\";\n    let paren_char_count = 0;\n    let paren_char_index = 0;\n    let paren_char_depth = 0;\n    let paren_char_stack = [];\n    let paren_char_stack_index = 0;\n    let paren_char_stack_count = 0;\n    let paren_char_stack_depth = 0;\n    let paren_char_stack_char = \"\";\n    let paren_char_stack_char_count = 0;\n    let paren_char_stack_char_index = 0;\n    let paren_char_stack_char_depth = 0;\n    let paren_char_stack_char_stack = [];\n    let paren_char_stack_char_stack_index = 0;\n    let paren_char_stack_char_stack_count = 0;\n    let paren_char_stack_char_stack_depth = 0;\n    let paren_char_stack_char_stack_char = \"\";\n    let paren_char_stack_char_stack_char_count = 0;\n    let paren_char_stack_char_stack_char_index = 0;\n    let paren_char_stack_char_stack_char_depth = 0;\n    let paren_char_stack_char_stack_char_stack = [];\n    let paren_char_stack_char_stack_char_stack_index = 0;\n    let paren_char_stack_char_stack_char_stack_count = 0;\n    let paren_char_stack_char_stack_char_stack_depth = 0;\n    let paren_char_stack_char_stack_char_stack_char = \"\";\n    let paren_char_stack_char_stack_char_stack_char_count = 0;\n    let paren_char_stack_char_stack_char_stack_char_index = 0;\n    let paren_char_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292594,
      "stdout": "../../../../../../tmp/tmp8k3a7902.ts(51,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_max = 0;\n    let paren_count_stack_max_index = 0;\n    let paren_count_stack_max_value = 0;\n    let paren_count_stack_max_value_index = 0;\n    let paren_count_stack_max_value_value = 0;\n    let paren_count_stack_max_value_value_index = 0;\n    let paren_count_stack_max_value_value_value = 0;\n    let paren_count_stack_max_value_value_value_index = 0;\n    let paren_count_stack_max_value_value_value_value = 0;\n    let paren_count_stack_max_value_value_value_value_index = 0;\n    let paren_count_stack_max_value_value_value_value_value = 0;\n    let paren_count_stack_max_value_value_value_value_value_index = 0;\n    let paren_count_stack_max_value_value_value_value_value_value = 0;\n    let paren_count_stack_max_value_value_value_value_value_value_index = 0;\n    let paren_count_stack_max_value_value_value_value_value_value_value = 0;\n    let paren_count_stack_max_value_value_value_value_value_value_value_index = 0;\n    let paren_count_stack_max_value_value_value_value_value_value_value_value = 0;\n    let paren_count_stack_max_value_value_value_value_value_value_value_value_index = 0;\n    let paren_count_stack_max_value_value_value_value_value_value_value_value_value = 0;\n    let paren_count_stack_max_value\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292586,
      "stdout": "../../../../../../tmp/tmpfwh3qy5h.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let max_nesting = 0;\n    let current_nesting = 0;\n    let current_paren = 0;\n    let current_paren_count = 0;\n    let current_paren_string = \"\";\n    let current_paren_string_count = 0;\n    let current_paren_string_index = 0;\n    let current_paren_string_length = 0;\n    let current_paren_string_length_count = 0;\n    let current_paren_string_length_index = 0;\n    let current_paren_string_length_length = 0;\n    let current_paren_string_length_length_count = 0;\n    let current_paren_string_length_length_index = 0;\n    let current_paren_string_length_length_length = 0;\n    let current_paren_string_length_length_length_count = 0;\n    let current_paren_string_length_length_length_index = 0;\n    let current_paren_string_length_length_length_length = 0;\n    let current_paren_string_length_length_length_length_count = 0;\n    let current_paren_string_length_length_length_length_index = 0;\n    let current_paren_string_length_length_length_length_length = 0;\n    let current_paren_string_length_length_length_length_length_count = 0;\n    let current_paren_string_length_length_length_length_length_index = 0;\n    let current_paren_string_length_length_length_length_length_length = 0;\n    let current_paren_string_length_length_length_length_length_length_count = 0;\n    let current_paren_string_length_length_length_length_length_length_index = 0;\n    let current_paren_string_length_length_length_length_length_length_length = 0;\n    let current_paren_string_length_length_length_length_length_length_length_count = 0;\n    let current_paren_string_length_length_length_length_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292586,
      "stdout": "../../../../../../tmp/tmpco26b4s2.ts(48,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let result = [];\n    let stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_stack = [];\n    let paren_stack_count = 0;\n    let paren_stack_level = 0;\n    let paren_stack_index = 0;\n    let paren_stack_string = \"\";\n    let paren_stack_string_count = 0;\n    let paren_stack_string_index = 0;\n    let paren_stack_string_string = \"\";\n    let paren_stack_string_string_count = 0;\n    let paren_stack_string_string_index = 0;\n    let paren_stack_string_string_string = \"\";\n    let paren_stack_string_string_string_count = 0;\n    let paren_stack_string_string_string_index = 0;\n    let paren_stack_string_string_string_string = \"\";\n    let paren_stack_string_string_string_string_count = 0;\n    let paren_stack_string_string_string_string_index = 0;\n    let paren_stack_string_string_string_string_string = \"\";\n    let paren_stack_string_string_string_string_string_count = 0;\n    let paren_stack_string_string_string_string_string_index = 0;\n    let paren_stack_string_string_string_string_string_string = \"\";\n    let paren_stack_string_string_string_string_string_string_count = 0;\n    let paren_stack_string_string_string_string_string_string_index = 0;\n    let paren_stack_string_string_string_string_string_string_string = \"\";\n    let paren_stack_string_string_string_string_string_string_string_count = 0;\n    let paren_stack_string_string_string_string_string_string_string_index = 0;\n    let paren_stack_string_string_string_string_string_string_string_string = \"\";\n    let p\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292594,
      "stdout": "../../../../../../tmp/tmp5yyadrwj.ts(49,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_length = 0;\n    let paren_count_stack_max = 0;\n    let paren_count_stack_max_index = 0;\n    let paren_count_stack_max_length = 0;\n    let paren_count_stack_max_max = 0;\n    let paren_count_stack_max_max_index = 0;\n    let paren_count_stack_max_max_length = 0;\n    let paren_count_stack_max_max_max = 0;\n    let paren_count_stack_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_length = 0;\n    let paren_count_stack_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_length = 0;\n    let paren_count_stack_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_length = 0;\n    let paren_count_stack_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_length = 0;\n    let paren_count_stack_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_length\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292584,
      "stdout": "../../../../../../tmp/tmp3c7zuy9q.ts(45,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let max_nesting = 0;\n    let paren_count = 0;\n    let paren_index = 0;\n    let paren_length = paren_string.length;\n    let paren_char = paren_string[paren_index];\n    while (paren_index < paren_length) {\n        if (paren_char === '(') {\n            paren_stack.push(paren_count);\n            paren_count++;\n        } else if (paren_char === ')') {\n            paren_count--;\n            if (paren_stack.length === 0) {\n                throw new Error(\"Invalid parentheses\");\n            }\n            paren_count = paren_stack.pop();\n        }\n        paren_index++;\n        paren_char = paren_string[paren_index];\n    }\n    if (paren_stack.length > 0) {\n        throw new Error(\"Invalid parentheses\");\n    }\n    return paren_count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292595,
      "stdout": "../../../../../../tmp/tmpthihs9tv.ts(30,5): error TS2322: Type 'number' is not assignable to type 'number[]'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let max_nesting = 0;\n    let current_nesting = 0;\n    let paren_count = 0;\n    let paren_index = 0;\n    let paren_char = '';\n    let paren_char_count = 0;\n    let paren_char_index = 0;\n    let paren_char_count_max = 0;\n    let paren_char_count_min = 0;\n    let paren_char_count_diff = 0;\n    let paren_char_count_diff_max = 0;\n    let paren_char_count_diff_min = 0;\n    let paren_char_count_diff_diff = 0;\n    let paren_char_count_diff_diff_max = 0;\n    let paren_char_count_diff_diff_min = 0;\n    let paren_char_count_diff_diff_diff = 0;\n    let paren_char_count_diff_diff_diff_max = 0;\n    let paren_char_count_diff_diff_diff_min = 0;\n    let paren_char_count_diff_diff_diff_diff = 0;\n    let paren_char_count_diff_diff_diff_diff_max = 0;\n    let paren_char_count_diff_diff_diff_diff_min = 0;\n    let paren_char_count_diff_diff_diff_diff_diff = 0;\n    let paren_char_count_diff_diff_diff_diff_diff_max = 0;\n    let paren_char_count_diff_diff_diff_diff_diff_min = 0;\n    let paren_char_count_diff_diff_diff_diff_diff_diff = 0;\n    let paren_char_count_diff_diff_diff_diff_diff_diff_max = 0;\n    let paren_char_count_diff_diff_diff_diff_diff_diff_min = 0;\n    let paren_char_count_diff_diff_diff_diff_diff_diff_diff = 0;\n    let paren_char_count_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292595,
      "stdout": "../../../../../../tmp/tmped_t79lr.ts(48,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_in_level = 0;\n    let paren_level_in_count = 0;\n    let paren_level_in_count_in_level = 0;\n    let paren_level_in_count_in_level_in_count = 0;\n    let paren_level_in_count_in_level_in_count_in_level = 0;\n    let paren_level_in_count_in_level_in_count_in_level_in_count = 0;\n    let paren_level_in_count_in_level_in_count_in_level_in_count_in_level = 0;\n    let paren_level_in_count_in_level_in_count_in_level_in_count_in_level_in_count = 0;\n    let paren_level_in_count_in_level_in_count_in_level_in_count_in_level_in_count_in_level = 0;\n    let paren_level_in_count_in_level_in_count_in_level_in_count_in_level_in_count_in_level_in_count = 0;\n    let paren_level_in_count_in_level_in_count_in_level_in_count_in_level_in_count_in_level_in_count_in_level = 0;\n    let paren_level_in_count_in_level_in_count_in_level_in_count_in_level_in_count_in_level_in_count_in_level_in_count = 0;\n    let paren_level_in_count_in_level_in_count_in_level_in_count_in_level_in_count_in_level_in_count_in_level_in_count_in_level = 0;\n    let paren_level_in_count_in_level_in_count_in_level_in_count_in_level_in_count_in_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292595,
      "stdout": "../../../../../../tmp/tmppkc6e1v3.ts(35,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let result = [];\n    let current_level = 0;\n    let current_group = 0;\n    let current_paren = 0;\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_string_length = paren_string.length;\n    for (let i = 0; i < paren_string_length; i++) {\n        if (paren_string[i] === '(') {\n            current_group++;\n            current_paren++;\n        } else if (paren_string[i] === ')') {\n            current_group--;\n            current_paren--;\n        } else if (paren_string[i] === ' ') {\n            if (current_level === 0) {\n                result.push(current_paren);\n            } else {\n                current_level--;\n            }\n        } else {\n            current_level++;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292596,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpciamnhfj.js:40:12)\n    at Object.<anonymous> (/tmp/tmpciamnhfj.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_max = 0;\n    let paren_count_stack_max_index = 0;\n    let paren_count_stack_max_value = 0;\n    let paren_count_stack_max_value_index = 0;\n    let paren_count_stack_max_value_value = 0;\n    let paren_count_stack_max_value_value_index = 0;\n    let paren_count_stack_max_value_value_value = 0;\n    let paren_count_stack_max_value_value_value_index = 0;\n    let paren_count_stack_max_value_value_value_value = 0;\n    let paren_count_stack_max_value_value_value_value_index = 0;\n    let paren_count_stack_max_value_value_value_value_value = 0;\n    let paren_count_stack_max_value_value_value_value_value_index = 0;\n    let paren_count_stack_max_value_value_value_value_value_value = 0;\n    let paren_count_stack_max_value_value_value_value_value_value_index = 0;\n    let paren_count_stack_max_value_value_value_value_value_value_value = 0;\n    let paren_count_stack_max_value_value_value_value_value_value_value_index = 0;\n    let paren_count_stack_max_value_value_value_value_value_value_value_value = 0;\n    let paren_count_stack_max_value_value_value_value_value_value_value_value_index = 0;\n    let paren_count_stack_max_value_value_value_value_value_value_value_value_value = 0;\n    let paren_count_stack_max_value\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292586,
      "stdout": "../../../../../../tmp/tmpfwh3qy5h.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_depth = 0;\n    let paren_count_stack = [];\n    let paren_depth_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_depth_stack_index = 0;\n    let paren_count_stack_top = 0;\n    let paren_depth_stack_top = 0;\n    let paren_count_stack_top_index = 0;\n    let paren_depth_stack_top_index = 0;\n    let paren_count_stack_top_top = 0;\n    let paren_depth_stack_top_top = 0;\n    let paren_count_stack_top_top_index = 0;\n    let paren_depth_stack_top_top_index = 0;\n    let paren_count_stack_top_top_top = 0;\n    let paren_depth_stack_top_top_top = 0;\n    let paren_count_stack_top_top_top_index = 0;\n    let paren_depth_stack_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top = 0;\n    let paren_depth_stack_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_index = 0;\n    let paren_depth_stack_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top = 0;\n    let paren_depth_stack_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_index = 0;\n    let paren_depth_stack_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top = 0;\n    let paren_depth_stack_top_top_top_top_top_top = 0;\n    let paren_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292596,
      "stdout": "../../../../../../tmp/tmpk5o0xjzk.ts(48,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_count_stack = [];\n    let max_nesting = 0;\n    let max_nesting_stack = [];\n    let current_nesting = 0;\n    let current_nesting_stack = [];\n    let current_paren_count = 0;\n    let current_paren_count_stack = [];\n    let current_paren_stack = [];\n    let current_paren_stack_stack = [];\n    let current_paren_string = \"\";\n    let current_paren_string_stack = [];\n    let current_paren_string_stack_stack = [];\n    let current_paren_string_stack_stack_stack = [];\n    let current_paren_string_stack_stack_stack_stack = [];\n    let current_paren_string_stack_stack_stack_stack_stack = [];\n    let current_paren_string_stack_stack_stack_stack_stack_stack = [];\n    let current_paren_string_stack_stack_stack_stack_stack_stack_stack = [];\n    let current_paren_string_stack_stack_stack_stack_stack_stack_stack_stack = [];\n    let current_paren_string_stack_stack_stack_stack_stack_stack_stack_stack = [];\n    let current_paren_string_stack_stack_stack_stack_stack_stack_stack_stack_stack = [];\n    let current_paren_string_stack_stack_stack_stack_stack_stack_stack_stack_stack = [];\n    let current_paren_string_stack_stack_stack_stack_stack_stack_stack_stack_stack = [];\n    let current_paren_string_stack_stack_stack_stack_stack_stack_stack_stack_stack = [];\n    let current_paren_string_stack_stack_stack_stack_stack_stack_stack_stack_stack = [];\n    let current_paren_string_stack_stack_stack_stack_stack_stack_stack_stack_stack = [];\n    let current_paren_string_stack_stack_stack_stack_stack_stack_stack_stack_stack = [];\n    let current_paren_string_stack_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292596,
      "stdout": "../../../../../../tmp/tmpray35xw3.ts(47,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_max = 0;\n    let paren_count_stack_max_index = 0;\n    let paren_count_stack_max_max = 0;\n    let paren_count_stack_max_max_index = 0;\n    let paren_count_stack_max_max_max = 0;\n    let paren_count_stack_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292584,
      "stdout": "../../../../../../tmp/tmpcei3lprb.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let result = [];\n    let stack = [];\n    let current_level = 0;\n    let current_paren_count = 0;\n    let current_paren_count_in_level = 0;\n    let current_paren_count_in_level_in_stack = 0;\n    let current_paren_count_in_level_in_stack_in_stack = 0;\n    let current_paren_count_in_level_in_stack_in_stack_in_stack = 0;\n    let current_paren_count_in_level_in_stack_in_stack_in_stack_in_stack = 0;\n    let current_paren_count_in_level_in_stack_in_stack_in_stack_in_stack_in_stack = 0;\n    let current_paren_count_in_level_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack = 0;\n    let current_paren_count_in_level_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack = 0;\n    let current_paren_count_in_level_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack = 0;\n    let current_paren_count_in_level_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack = 0;\n    let current_paren_count_in_level_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack = 0;\n    let current_paren_count_in_level_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack = 0;\n    let current_paren_count_in_level_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292596,
      "stdout": "../../../../../../tmp/tmpyjar8ddx.ts(35,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let max_nesting = 0;\n    let current_level = 0;\n    let current_paren_string = \"\";\n    let current_paren_string_length = 0;\n    let current_paren_string_index = 0;\n    let current_paren_string_index_end = 0;\n    let current_paren_string_index_start = 0;\n    let current_paren_string_length_end = 0;\n    let current_paren_string_length_start = 0;\n    let current_paren_string_length_start_end = 0;\n    let current_paren_string_length_start_start = 0;\n    let current_paren_string_length_start_start_end = 0;\n    let current_paren_string_length_start_start_start = 0;\n    let current_paren_string_length_start_start_start_end = 0;\n    let current_paren_string_length_start_start_start_start = 0;\n    let current_paren_string_length_start_start_start_start_end = 0;\n    let current_paren_string_length_start_start_start_start_start = 0;\n    let current_paren_string_length_start_start_start_start_start_end = 0;\n    let current_paren_string_length_start_start_start_start_start_start = 0;\n    let current_paren_string_length_start_start_start_start_start_start_end = 0;\n    let current_paren_string_length_start_start_start_start_start_start_start = 0;\n    let current_paren_string_length_start_start_start_start_start_start_start_end = 0;\n    let current_paren_string_length_start_start_start_start_start_start_start_start = 0;\n    let current_paren_string_length_start_start_start_start_start_start_start_start_end = 0;\n    let current_paren_string_length_start_start_start_start_start_start_start_start_start = 0;\n    let current\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292596,
      "stdout": "../../../../../../tmp/tmp_hyj2jhs.ts(45,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let result = [];\n    let stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_in_level = 0;\n    let paren_level_in_count = 0;\n    let paren_level_in_count_in_level = 0;\n    let paren_level_in_count_in_level_in_level = 0;\n    let paren_level_in_count_in_level_in_level_in_level = 0;\n    let paren_level_in_count_in_level_in_level_in_level_in_level = 0;\n    let paren_level_in_count_in_level_in_level_in_level_in_level_in_level = 0;\n    let paren_level_in_count_in_level_in_level_in_level_in_level_in_level_in_level = 0;\n    let paren_level_in_count_in_level_in_level_in_level_in_level_in_level_in_level_in_level = 0;\n    let paren_level_in_count_in_level_in_level_in_level_in_level_in_level_in_level_in_level_in_level = 0;\n    let paren_level_in_count_in_level_in_level_in_level_in_level_in_level_in_level_in_level_in_level_in_level = 0;\n    let paren_level_in_count_in_level_in_level_in_level_in_level_in_level_in_level_in_level_in_level_in_level_in_level = 0;\n    let paren_level_in_count_in_level_in_level_in_level_in_level_in_level_in_level_in_level_in_level_in_level_in_level_in_level = 0;\n    let paren_level_in_count_in_level_in_level_in_level_in_level_in_level_in_level\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292592,
      "stdout": "../../../../../../tmp/tmpfxe2o4gj.ts(36,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let result = [];\n    let stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_index = 0;\n    let paren_char = \"\";\n    let paren_char_count = 0;\n    let paren_char_index = 0;\n    let paren_char_count_prev = 0;\n    let paren_char_index_prev = 0;\n    let paren_char_count_next = 0;\n    let paren_char_index_next = 0;\n    let paren_char_count_next_prev = 0;\n    let paren_char_index_next_prev = 0;\n    let paren_char_count_next_next = 0;\n    let paren_char_index_next_next = 0;\n    let paren_char_count_next_next_prev = 0;\n    let paren_char_index_next_next_prev = 0;\n    let paren_char_count_next_next_next = 0;\n    let paren_char_index_next_next_next = 0;\n    let paren_char_count_next_next_next_prev = 0;\n    let paren_char_index_next_next_next_prev = 0;\n    let paren_char_count_next_next_next_next = 0;\n    let paren_char_index_next_next_next_next = 0;\n    let paren_char_count_next_next_next_next_prev = 0;\n    let paren_char_index_next_next_next_next_prev = 0;\n    let paren_char_count_next_next_next_next_next = 0;\n    let paren_char_index_next_next_next_next_next = 0;\n    let paren_char_count_next_next_next_next_next_prev = 0;\n    let paren_char_index_next_next_next_next_next_prev = 0;\n    let paren_char_count_next_next_next_next_next_next = 0;\n    let paren\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292597,
      "stdout": "../../../../../../tmp/tmp8n9b5zr5.ts(50,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_stack = [];\n    let paren_level_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_level_stack_index = 0;\n    let paren_count_stack_stack = [];\n    let paren_level_stack_stack = [];\n    let paren_count_stack_stack_index = 0;\n    let paren_level_stack_stack_index = 0;\n    let paren_count_stack_stack_stack = [];\n    let paren_level_stack_stack_stack = [];\n    let paren_count_stack_stack_stack_index = 0;\n    let paren_level_stack_stack_stack_index = 0;\n    let paren_count_stack_stack_stack_stack = [];\n    let paren_level_stack_stack_stack_stack = [];\n    let paren_count_stack_stack_stack_stack_index = 0;\n    let paren_level_stack_stack_stack_stack_index = 0;\n    let paren_count_stack_stack_stack_stack_stack = [];\n    let paren_level_stack_stack_stack_stack_stack = [];\n    let paren_count_stack_stack_stack_stack_stack_index = 0;\n    let paren_level_stack_stack_stack_stack_stack_index = 0;\n    let paren_count_stack_stack_stack_stack_stack_stack = [];\n    let paren_level_stack_stack_stack_stack_stack_stack = [];\n    let paren_count_stack_stack_stack_stack_stack_stack_index = 0;\n    let paren_level_stack_stack_stack_stack_stack_stack_index = 0;\n    let paren_count_stack_stack_stack_stack_stack_stack_stack = [];\n    let paren_level_stack_stack_stack_stack_stack_stack_stack_index = 0;\n    let paren_count_stack_stack_stack_stack\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292597,
      "stdout": "../../../../../../tmp/tmp7g4lchy5.ts(48,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let max_nesting = 0;\n    for (let i = 0; i < paren_string.length; i++) {\n        if (paren_string[i] === '(') {\n            paren_stack.push(i);\n        } else if (paren_string[i] === ')') {\n            if (paren_stack.length === 0) {\n                throw new Error(\"Invalid input\");\n            }\n            let level = paren_stack.pop();\n            if (level > max_nesting) {\n                max_nesting = level;\n            }\n        }\n    }\n    if (paren_stack.length > 0) {\n        throw new Error(\"Invalid input\");\n    }\n    return max_nesting;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292597,
      "stdout": "../../../../../../tmp/tmp9ba1tb_i.ts(25,5): error TS2322: Type 'number' is not assignable to type 'number[]'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let current_level = 0;\n    let max_level = 0;\n    let i = 0;\n    let j = 0;\n    let paren_count = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_max = 0;\n    let paren_count_stack_max_index = 0;\n    let paren_count_stack_max_max = 0;\n    let paren_count_stack_max_max_index = 0;\n    let paren_count_stack_max_max_max = 0;\n    let paren_count_stack_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292597,
      "stdout": "../../../../../../tmp/tmpyo7tovi1.ts(45,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_count_stack = [];\n    let max_nesting = 0;\n    let max_nesting_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_max = 0;\n    let paren_count_stack_max_index = 0;\n    let paren_count_stack_max_max = 0;\n    let paren_count_stack_max_max_index = 0;\n    let paren_count_stack_max_max_max = 0;\n    let paren_count_stack_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_max = 0;\n    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292597,
      "stdout": "../../../../../../tmp/tmpw62y3c5b.ts(44,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let max_nesting = 0;\n    let current_nesting = 0;\n    let current_paren_string = \"\";\n    let current_paren_index = 0;\n    let current_paren_count = 0;\n    let current_paren_char = \"\";\n    let current_paren_char_count = 0;\n    let current_paren_char_index = 0;\n    let current_paren_char_count_index = 0;\n    let current_paren_char_count_index_count = 0;\n    let current_paren_char_count_index_count_index = 0;\n    let current_paren_char_count_index_count_index_count = 0;\n    let current_paren_char_count_index_count_index_count_index = 0;\n    let current_paren_char_count_index_count_index_count_index_count = 0;\n    let current_paren_char_count_index_count_index_count_index_count_index = 0;\n    let current_paren_char_count_index_count_index_count_index_count_index_count = 0;\n    let current_paren_char_count_index_count_index_count_index_count_index_count_index = 0;\n    let current_paren_char_count_index_count_index_count_index_count_index_count_index_count = 0;\n    let current_paren_char_count_index_count_index_count_index_count_index_count_index_count_index = 0;\n    let current_paren_char_count_index_count_index_count_index_count_index_count_index_count_index = 0;\n    let current_paren_char_count_index_count_index_count_index_count_index_count_index_count_index = 0;\n    let current_paren_char_count_index_count_index_count_index_count_index_count_index_count_index = 0;\n    let current_paren_char_count_index_count_index_count_index_count_index_count_index_count_index = 0\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292597,
      "stdout": "../../../../../../tmp/tmpj_qaqpgx.ts(42,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let max_nesting = 0;\n    let current_level = 0;\n    let current_paren = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_max = 0;\n    let paren_count_stack_max_index = 0;\n    let paren_count_stack_max_max = 0;\n    let paren_count_stack_max_max_index = 0;\n    let paren_count_stack_max_max_max = 0;\n    let paren_count_stack_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292597,
      "stdout": "../../../../../../tmp/tmpw53i79tl.ts(44,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let result = [];\n    let stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_stack = [];\n    let paren_stack_count = 0;\n    let paren_stack_level = 0;\n    let paren_stack_count_max = 0;\n    let paren_stack_level_max = 0;\n    let paren_stack_count_min = 0;\n    let paren_stack_level_min = 0;\n    let paren_stack_count_min_max = 0;\n    let paren_stack_level_min_max = 0;\n    let paren_stack_count_min_max_min = 0;\n    let paren_stack_level_min_max_min = 0;\n    let paren_stack_count_min_max_min_max = 0;\n    let paren_stack_level_min_max_min_max = 0;\n    let paren_stack_count_min_max_min_max_min = 0;\n    let paren_stack_level_min_max_min_max_min = 0;\n    let paren_stack_count_min_max_min_max_min_max = 0;\n    let paren_stack_level_min_max_min_max_min_max_min = 0;\n    let paren_stack_count_min_max_min_max_min_max_min_max = 0;\n    let paren_stack_level_min_max_min_max_min_max_min_max_min = 0;\n    let paren_stack_count_min_max_min_max_min_max_min_max_min_max = 0;\n    let paren_stack_level_min_max_min_max_min_max_min_max_min_max_min = 0;\n    let paren_stack_count_min_max_min_max_min_max_min_max_min_max_min_max = 0;\n    let paren_stack_level_min_max_min_max_min_max_min_max_min_max_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292597,
      "stdout": "../../../../../../tmp/tmpnra8qol3.ts(45,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_size = 0;\n    let paren_count_stack_max = 0;\n    let paren_count_stack_min = 0;\n    let paren_count_stack_max_index = 0;\n    let paren_count_stack_min_index = 0;\n    let paren_count_stack_size_max = 0;\n    let paren_count_stack_size_min = 0;\n    let paren_count_stack_size_max_index = 0;\n    let paren_count_stack_size_min_index = 0;\n    let paren_count_stack_size_max_index_min = 0;\n    let paren_count_stack_size_min_index_max = 0;\n    let paren_count_stack_size_max_index_min_max = 0;\n    let paren_count_stack_size_min_index_max_min = 0;\n    let paren_count_stack_size_max_index_min_max_min = 0;\n    let paren_count_stack_size_min_index_max_min_max = 0;\n    let paren_count_stack_size_max_index_min_max_min_max = 0;\n    let paren_count_stack_size_min_index_max_min_max_min_max = 0;\n    let paren_count_stack_size_max_index_min_max_min_max_min_max = 0;\n    let paren_count_stack_size_min_index_max_min_max_min_max_min_max = 0;\n    let paren_count_stack_size_max_index_min_max_min_max_min_max_min_max = 0;\n    let paren_count_stack_size_min_index_max_min_max_min_max_min_max_min_max = 0\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292584,
      "stdout": "../../../../../../tmp/tmpz4recy3v.ts(44,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let max_nesting = 0;\n    let current_nesting = 0;\n    let current_index = 0;\n    let current_char = paren_string[current_index];\n    while (current_index < paren_string.length) {\n        if (current_char === \"(\") {\n            paren_stack.push(current_index);\n            current_index++;\n            current_char = paren_string[current_index];\n            current_nesting++;\n        } else if (current_char === \")\") {\n            current_index++;\n            current_char = paren_string[current_index];\n            current_nesting--;\n            if (current_nesting === 0) {\n                current_index = paren_stack.pop();\n                max_nesting = Math.max(max_nesting, current_nesting);\n            }\n        }\n        current_index++;\n        current_char = paren_string[current_index];\n    }\n    return max_nesting;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292597,
      "stdout": "../../../../../../tmp/tmpqgk034c6.ts(30,5): error TS2322: Type 'number' is not assignable to type 'number[]'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_max = 0;\n    let paren_count_stack_max_index = 0;\n    let paren_count_stack_max_max = 0;\n    let paren_count_stack_max_max_index = 0;\n    let paren_count_stack_max_max_max = 0;\n    let paren_count_stack_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292584,
      "stdout": "../../../../../../tmp/tmpcei3lprb.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let result = [];\n    let stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_stack = [];\n    let paren_stack_count = 0;\n    let paren_stack_level = 0;\n    let paren_stack_string = '';\n    let paren_stack_string_count = 0;\n    let paren_stack_string_level = 0;\n    let paren_stack_string_string = '';\n    let paren_stack_string_string_count = 0;\n    let paren_stack_string_string_level = 0;\n    let paren_stack_string_string_string = '';\n    let paren_stack_string_string_string_count = 0;\n    let paren_stack_string_string_string_level = 0;\n    let paren_stack_string_string_string_string = '';\n    let paren_stack_string_string_string_string_count = 0;\n    let paren_stack_string_string_string_string_level = 0;\n    let paren_stack_string_string_string_string_string = '';\n    let paren_stack_string_string_string_string_string_count = 0;\n    let paren_stack_string_string_string_string_string_level = 0;\n    let paren_stack_string_string_string_string_string_string = '';\n    let paren_stack_string_string_string_string_string_string_count = 0;\n    let paren_stack_string_string_string_string_string_string_level = 0;\n    let paren_stack_string_string_string_string_string_string_string = '';\n    let paren_stack_string_string_string_string_string_string_string_count = 0;\n    let paren_stack_string_string_string_string_string_string_string_level = 0;\n    let paren_stack_string_string_string_string_string_string_string_string = '';\n    let paren_stack_string_string_string_string_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292597,
      "stdout": "../../../../../../tmp/tmpx0cg8shn.ts(48,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let current_level = 0;\n    let max_level = 0;\n    let current_index = 0;\n    let paren_count = 0;\n    let paren_count_in_level = 0;\n    let paren_count_in_level_in_stack = 0;\n    let paren_count_in_level_in_stack_in_stack = 0;\n    let paren_count_in_level_in_stack_in_stack_in_stack = 0;\n    let paren_count_in_level_in_stack_in_stack_in_stack_in_stack = 0;\n    let paren_count_in_level_in_stack_in_stack_in_stack_in_stack_in_stack = 0;\n    let paren_count_in_level_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack = 0;\n    let paren_count_in_level_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack = 0;\n    let paren_count_in_level_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack = 0;\n    let paren_count_in_level_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack = 0;\n    let paren_count_in_level_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack = 0;\n    let paren_count_in_level_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack = 0;\n    let paren_count_in_level_in_stack_in_stack_in_stack_in_stack_in_stack_in_stack\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292597,
      "stdout": "../../../../../../tmp/tmppj87a2uq.ts(36,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_max = 0;\n    let paren_count_stack_max_index = 0;\n    let paren_count_stack_max_max = 0;\n    let paren_count_stack_max_max_index = 0;\n    let paren_count_stack_max_max_max = 0;\n    let paren_count_stack_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292584,
      "stdout": "../../../../../../tmp/tmpcei3lprb.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let current_level = 0;\n    let max_level = 0;\n    let paren_count = 0;\n    for (let i = 0; i < paren_string.length; i++) {\n        if (paren_string[i] === '(') {\n            paren_stack.push(i);\n            current_level++;\n        } else if (paren_string[i] === ')') {\n            if (current_level === 0) {\n                throw new Error('Invalid parentheses');\n            }\n            paren_stack.pop();\n            current_level--;\n        } else if (paren_string[i] === ' ') {\n            if (current_level === 0) {\n                throw new Error('Invalid parentheses');\n            }\n        }\n        if (current_level > max_level) {\n            max_level = current_level;\n        }\n        paren_count += current_level;\n    }\n    if (current_level !== 0) {\n        throw new Error('Invalid parentheses');\n    }\n    return max_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292597,
      "stdout": "../../../../../../tmp/tmp1uii87ng.ts(34,5): error TS2322: Type 'number' is not assignable to type 'number[]'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_start = 0;\n    let paren_end = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_length = 0;\n    let paren_count_stack_max = 0;\n    let paren_count_stack_max_index = 0;\n    let paren_count_stack_max_length = 0;\n    let paren_count_stack_max_max = 0;\n    let paren_count_stack_max_max_index = 0;\n    let paren_count_stack_max_max_length = 0;\n    let paren_count_stack_max_max_max = 0;\n    let paren_count_stack_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_length = 0;\n    let paren_count_stack_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_length = 0;\n    let paren_count_stack_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_length = 0;\n    let paren_count_stack_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_length = 0;\n    let paren_count_stack_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_index = 0;\n    let paren\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292597,
      "stdout": "../../../../../../tmp/tmp5cf57qvi.ts(47,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_max = 0;\n    let paren_count_stack_max_index = 0;\n    let paren_count_stack_max_max = 0;\n    let paren_count_stack_max_max_index = 0;\n    let paren_count_stack_max_max_max = 0;\n    let paren_count_stack_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292584,
      "stdout": "../../../../../../tmp/tmpcei3lprb.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let max_nesting = 0;\n    let current_nesting = 0;\n    let current_index = 0;\n    let current_paren_count = 0;\n    let current_paren_string = \"\";\n    let current_paren_stack = [];\n    let current_paren_stack_index = 0;\n    let current_paren_stack_count = 0;\n    let current_paren_stack_string = \"\";\n    let current_paren_stack_string_index = 0;\n    let current_paren_stack_string_count = 0;\n    let current_paren_stack_string_string = \"\";\n    let current_paren_stack_string_string_index = 0;\n    let current_paren_stack_string_string_count = 0;\n    let current_paren_stack_string_string_string = \"\";\n    let current_paren_stack_string_string_string_index = 0;\n    let current_paren_stack_string_string_string_count = 0;\n    let current_paren_stack_string_string_string_string = \"\";\n    let current_paren_stack_string_string_string_string_index = 0;\n    let current_paren_stack_string_string_string_string_count = 0;\n    let current_paren_stack_string_string_string_string_string = \"\";\n    let current_paren_stack_string_string_string_string_string_index = 0;\n    let current_paren_stack_string_string_string_string_string_count = 0;\n    let current_paren_stack_string_string_string_string_string_string = \"\";\n    let current_paren_stack_string_string_string_string_string_string_index = 0;\n    let current_paren_stack_string_string_string_string_string_string_count = 0;\n    let current_paren_stack_string_string_string_string_string_string_string = \"\";\n    let current_paren_stack_string_string_string_string_string_string_string_index = 0;\n    let current_paren_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292597,
      "stdout": "../../../../../../tmp/tmpfunlyod4.ts(49,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_top = 0;\n    let paren_count_stack_top_index = 0;\n    let paren_count_stack_top_value = 0;\n    let paren_count_stack_top_value_index = 0;\n    let paren_count_stack_top_value_value = 0;\n    let paren_count_stack_top_value_value_index = 0;\n    let paren_count_stack_top_value_value_value = 0;\n    let paren_count_stack_top_value_value_value_index = 0;\n    let paren_count_stack_top_value_value_value_value = 0;\n    let paren_count_stack_top_value_value_value_value_index = 0;\n    let paren_count_stack_top_value_value_value_value_value = 0;\n    let paren_count_stack_top_value_value_value_value_value_index = 0;\n    let paren_count_stack_top_value_value_value_value_value_value = 0;\n    let paren_count_stack_top_value_value_value_value_value_value_index = 0;\n    let paren_count_stack_top_value_value_value_value_value_value_value = 0;\n    let paren_count_stack_top_value_value_value_value_value_value_value_index = 0;\n    let paren_count_stack_top_value_value_value_value_value_value_value_value = 0;\n    let paren_count_stack_top_value_value_value_value_value_value_value_value_index = 0;\n    let paren_count_stack_top_value_value_value_value_value_value_value_value_value = 0;\n    let paren_count_stack_top_value\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292584,
      "stdout": "../../../../../../tmp/tmpylvjsphf.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let result = [];\n    let stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_index = 0;\n    let paren_string_length = paren_string.length;\n    for (let i = 0; i < paren_string_length; i++) {\n        if (paren_string[i] === '(') {\n            paren_count++;\n            stack.push(paren_count);\n            paren_level = stack.length - 1;\n        } else if (paren_string[i] === ')') {\n            paren_count--;\n            if (paren_count === 0) {\n                result.push(paren_level);\n                paren_count = stack.pop();\n                paren_level = stack.length - 1;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292597,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp84hnil4k.js:33:12)\n    at Object.<anonymous> (/tmp/tmp84hnil4k.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let result = [];\n    let stack = [];\n    let current_level = 0;\n    let current_index = 0;\n    let paren_count = 0;\n    let paren_index = 0;\n    let paren_string = paren_string.split(\" \");\n    for (let i = 0; i < paren_string.length; i++) {\n        if (paren_string[i] === \"(\") {\n            stack.push(paren_string[i]);\n            current_level++;\n            current_index = i;\n            paren_count++;\n        } else if (paren_string[i] === \")\") {\n            if (stack.length > 0) {\n                stack.pop();\n                current_level--;\n            }\n        } else if (paren_string[i] === \" \") {\n            if (stack.length > 0 && current_level === stack[stack.length - 1]) {\n                result.push(current_index - paren_count + 1);\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292597,
      "stdout": "../../../../../../tmp/tmpq03per1m.ts(6,30): error TS2300: Duplicate identifier 'paren_string'.\n../../../../../../tmp/tmpq03per1m.ts(13,9): error TS2300: Duplicate identifier 'paren_string'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_length = 0;\n    let paren_count_stack_max = 0;\n    let paren_count_stack_min = 0;\n    let paren_count_stack_max_index = 0;\n    let paren_count_stack_min_index = 0;\n    let paren_count_stack_max_length = 0;\n    let paren_count_stack_min_length = 0;\n    let paren_count_stack_max_length_index = 0;\n    let paren_count_stack_min_length_index = 0;\n    let paren_count_stack_max_index = 0;\n    let paren_count_stack_min_index = 0;\n    let paren_count_stack_max_length_index = 0;\n    let paren_count_stack_min_length_index = 0;\n    let paren_count_stack_max_length_index = 0;\n    let paren_count_stack_min_length_index = 0;\n    let paren_count_stack_max_length_index = 0;\n    let paren_count_stack_min_length_index = 0;\n    let paren_count_stack_max_length_index = 0;\n    let paren_count_stack_min_length_index = 0;\n    let paren_count_stack_max_length_index = 0;\n    let paren_count_stack_min_length_index = 0;\n    let paren_count_stack_max_length_index = 0;\n    let paren_count_stack_min_length_index = 0;\n    let paren_count_stack_max_length_index = 0;\n    let paren_count_stack_min_length_index = 0;\n    let paren_count_stack_max_length_index = 0;\n    let paren_count_stack_min_length_index\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "../../../../../../tmp/tmpm059mkp5.ts(50,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_in_level = 0;\n    let paren_count_in_next_level = 0;\n    let paren_count_in_next_next_level = 0;\n    let paren_count_in_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_next_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_next_next_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_next_next_next_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_next_next_next_next_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_next_next_next_next_next_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_level = 0;\n    let paren_count_in_next_next_next_next_next_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292586,
      "stdout": "../../../../../../tmp/tmpbytjyq_z.ts(38,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  let paren_stack = [];\n  let max_nesting = 0;\n  let current_nesting = 0;\n  let paren_count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x =\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "../../../../../../tmp/tmp62htoq45.ts(79,9): error TS1005: ',' expected.\n../../../../../../tmp/tmp62htoq45.ts(90,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_stack = [];\n    let paren_level_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_level_stack_index = 0;\n    let paren_count_stack_index_max = 0;\n    let paren_level_stack_index_max = 0;\n    let paren_count_stack_index_min = 0;\n    let paren_level_stack_index_min = 0;\n    let paren_count_stack_index_min_max = 0;\n    let paren_level_stack_index_min_max = 0;\n    let paren_count_stack_index_min_min = 0;\n    let paren_level_stack_index_min_min = 0;\n    let paren_count_stack_index_min_min_max = 0;\n    let paren_level_stack_index_min_min_max = 0;\n    let paren_count_stack_index_min_min_min = 0;\n    let paren_level_stack_index_min_min_min = 0;\n    let paren_count_stack_index_min_min_min_max = 0;\n    let paren_level_stack_index_min_min_min_max = 0;\n    let paren_count_stack_index_min_min_min_min = 0;\n    let paren_level_stack_index_min_min_min_min_max = 0;\n    let paren_count_stack_index_min_min_min_min_min = 0;\n    let paren_level_stack_index_min_min_min_min_min_max = 0;\n    let paren_count_stack_index_min_min_min_min_min_min = 0;\n    let paren_level_stack_index_min_min_min_min_min_min_max = 0;\n    let paren_count_stack_index_min_min_min_min_min_min_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "../../../../../../tmp/tmpt8eykgrl.ts(46,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let max_depth = 0;\n    for (let i = 0; i < paren_string.length; i++) {\n        if (paren_string[i] === '(') {\n            paren_stack.push(i);\n        } else if (paren_string[i] === ')') {\n            if (paren_stack.length === 0) {\n                throw new Error(\"Mismatched parentheses\");\n            }\n            let depth = paren_stack.pop();\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    if (paren_stack.length > 0) {\n        throw new Error(\"Mismatched parentheses\");\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "../../../../../../tmp/tmp6cllf0e5.ts(25,5): error TS2322: Type 'number' is not assignable to type 'number[]'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let max_nesting = 0;\n    let current_nesting = 0;\n    let current_paren = 0;\n    let current_paren_count = 0;\n    let current_paren_string = \"\";\n    let current_paren_string_count = 0;\n    let current_paren_string_index = 0;\n    let current_paren_string_length = 0;\n    let current_paren_string_char = \"\";\n    let current_paren_string_char_count = 0;\n    let current_paren_string_char_index = 0;\n    let current_paren_string_char_length = 0;\n    let current_paren_string_char_index_end = 0;\n    let current_paren_string_char_count_end = 0;\n    let current_paren_string_char_length_end = 0;\n    let current_paren_string_char_index_start = 0;\n    let current_paren_string_char_count_start = 0;\n    let current_paren_string_char_length_start = 0;\n    let current_paren_string_char_index_end_start = 0;\n    let current_paren_string_char_count_end_start = 0;\n    let current_paren_string_char_length_end_start = 0;\n    let current_paren_string_char_index_end_end = 0;\n    let current_paren_string_char_count_end_end = 0;\n    let current_paren_string_char_length_end_end = 0;\n    let current_paren_string_char_index_start_end = 0;\n    let current_paren_string_char_count_start_end = 0;\n    let current_paren_string_char_length_start_end = 0;\n    let current_paren_string_char_index_end_start_end = 0;\n    let current_paren_string_char_count_end_start_end = 0;\n    let current_paren_string_char_length_end_start_end = 0;\n    let current_paren_string_char\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "../../../../../../tmp/tmp1nvhkius.ts(51,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_top = 0;\n    let paren_count_stack_top_index = 0;\n    let paren_count_stack_top_top = 0;\n    let paren_count_stack_top_top_index = 0;\n    let paren_count_stack_top_top_top = 0;\n    let paren_count_stack_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top_top_top = 0;\n    let paren_count_stack_top_top\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292584,
      "stdout": "../../../../../../tmp/tmp43hy9zl0.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_max = 0;\n    let paren_count_stack_max_index = 0;\n    let paren_count_stack_max_index_stack = [];\n    let paren_count_stack_max_index_stack_index = 0;\n    let paren_count_stack_max_index_stack_max = 0;\n    let paren_count_stack_max_index_stack_max_index = 0;\n    let paren_count_stack_max_index_stack_max_index_stack = [];\n    let paren_count_stack_max_index_stack_max_index_stack_index = 0;\n    let paren_count_stack_max_index_stack_max_index_stack_max = 0;\n    let paren_count_stack_max_index_stack_max_index_stack_max_index = 0;\n    let paren_count_stack_max_index_stack_max_index_stack_max_index_stack = [];\n    let paren_count_stack_max_index_stack_max_index_stack_max_index_stack_index = 0;\n    let paren_count_stack_max_index_stack_max_index_stack_max_index_stack_max = 0;\n    let paren_count_stack_max_index_stack_max_index_stack_max_index_stack_max_index = 0;\n    let paren_count_stack_max_index_stack_max_index_stack_max_index_stack_max_index_stack = [];\n    let paren_count_stack_max_index_stack_max_index_stack_max_index_stack_max_index_stack_index = 0;\n    let paren_count_stack_max_index_stack_max_index_stack_max_index_stack_max_index_stack_max = 0;\n    let paren_count_stack\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292583,
      "stdout": "../../../../../../tmp/tmp6in38oup.ts(41,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_max = 0;\n    let paren_count_stack_max_index = 0;\n    let paren_count_stack_max_max = 0;\n    let paren_count_stack_max_max_index = 0;\n    let paren_count_stack_max_max_max = 0;\n    let paren_count_stack_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292584,
      "stdout": "../../../../../../tmp/tmpcei3lprb.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  let result = [];\n  let stack = [];\n  let paren_count = 0;\n  let paren_level = 0;\n  let paren_stack = [];\n  let paren_stack_count = 0;\n  let paren_stack_level = 0;\n  let paren_stack_count_max = 0;\n  let paren_stack_count_min = 0;\n  let paren_stack_level_max = 0;\n  let paren_stack_level_min = 0;\n  let paren_stack_level_count = 0;\n  let paren_stack_level_count_max = 0;\n  let paren_stack_level_count_min = 0;\n  let paren_stack_level_count_max = 0;\n  let paren_stack_level_count_min = 0;\n  let paren_stack_level_count_max = 0;\n  let paren_stack_level_count_min = 0;\n  let paren_stack_level_count_max = 0;\n  let paren_stack_level_count_min = 0;\n  let paren_stack_level_count_max = 0;\n  let paren_stack_level_count_min = 0;\n  let paren_stack_level_count_max = 0;\n  let paren_stack_level_count_min = 0;\n  let paren_stack_level_count_max = 0;\n  let paren_stack_level_count_min = 0;\n  let paren_stack_level_count_max = 0;\n  let paren_stack_level_count_min = 0;\n  let paren_stack_level_count_max = 0;\n  let paren_stack_level_count_min = 0;\n  let paren_stack_level_count_max = 0;\n  let paren_stack_level_count_min = 0;\n  let paren_stack_level_count_max = 0;\n  let paren_stack_level_count_min = 0;\n  let paren_stack_level_count_max = 0;\n  let paren_stack_level_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "../../../../../../tmp/tmp7q8m9kre.ts(54,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_length = 0;\n    let paren_count_stack_max = 0;\n    let paren_count_stack_max_index = 0;\n    let paren_count_stack_max_length = 0;\n    let paren_count_stack_max_max = 0;\n    let paren_count_stack_max_max_index = 0;\n    let paren_count_stack_max_max_length = 0;\n    let paren_count_stack_max_max_max = 0;\n    let paren_count_stack_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_length = 0;\n    let paren_count_stack_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_length = 0;\n    let paren_count_stack_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_length = 0;\n    let paren_count_stack_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_length = 0;\n    let paren_count_stack_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_length\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292584,
      "stdout": "../../../../../../tmp/tmp3c7zuy9q.ts(45,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let result = [];\n    let stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_index = 0;\n    let paren_char = '';\n    let paren_char_count = 0;\n    let paren_char_index = 0;\n    let paren_char_count_stack = [];\n    let paren_char_index_stack = [];\n    let paren_char_stack = [];\n    let paren_char_stack_index = 0;\n    let paren_char_stack_count = 0;\n    let paren_char_stack_count_stack = [];\n    let paren_char_stack_index_stack = [];\n    let paren_char_stack_count_stack_index = 0;\n    let paren_char_stack_count_stack_index_stack = [];\n    let paren_char_stack_index_stack_index = 0;\n    let paren_char_stack_index_stack_index_stack = [];\n    let paren_char_stack_index_stack_index_stack_index = 0;\n    let paren_char_stack_index_stack_index_stack_index_stack = [];\n    let paren_char_stack_index_stack_index_stack_index_stack_index = 0;\n    let paren_char_stack_index_stack_index_stack_index_stack_index_stack = [];\n    let paren_char_stack_index_stack_index_stack_index_stack_index_stack_index = 0;\n    let paren_char_stack_index_stack_index_stack_index_stack_index_stack_index_stack = [];\n    let paren_char_stack_index_stack_index_stack_index_stack_index_stack_index_stack_index = 0;\n    let paren_char_stack_index_stack_index_stack_index_stack_index_stack_index_stack_index = 0;\n    let paren_char_stack_index_stack_index_stack_index_stack_index_stack_index_stack_index = 0;\n    let paren_char\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292598,
      "stdout": "../../../../../../tmp/tmp_bt4rn3r.ts(47,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_max = 0;\n    let paren_count_stack_max_index = 0;\n    let paren_count_stack_max_max = 0;\n    let paren_count_stack_max_max_index = 0;\n    let paren_count_stack_max_max_max = 0;\n    let paren_count_stack_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292584,
      "stdout": "../../../../../../tmp/tmpcei3lprb.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let result = [];\n    let paren_stack = [];\n    let current_level = 0;\n    let current_paren = 0;\n    let paren_count = 0;\n    let paren_count_in_paren = 0;\n    let paren_count_in_paren_stack = 0;\n    let paren_count_in_paren_stack_in_paren = 0;\n    let paren_count_in_paren_stack_in_paren_stack = 0;\n    let paren_count_in_paren_stack_in_paren_stack_in_paren = 0;\n    let paren_count_in_paren_stack_in_paren_stack_in_paren_stack = 0;\n    for (let i = 0; i < paren_string.length; i++) {\n        let current_char = paren_string[i];\n        if (current_char === \"(\") {\n            paren_count++;\n            paren_count_in_paren++;\n            paren_stack.push(paren_count_in_paren);\n            current_level++;\n            current_paren++;\n        } else if (current_char === \")\") {\n            paren_count--;\n            paren_count_in_paren--;\n            paren_count_in_paren_stack--;\n            paren_count_in_paren_stack_in_paren--;\n            paren_count_in_paren_stack_in_paren_stack--;\n            paren_count_in_paren_stack_in_paren_stack_in_paren--;\n            if (paren_count === 0) {\n                result.push(current_level);\n                current_level = 0;\n                current_paren = 0;\n            }\n        } else if (current_char === \" \") {\n            if (paren_count === 0) {\n                result.push(current_level);\n                current_level = 0;\n                current_paren = 0;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292599,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  0,\n  3,\n  0,\n  1,\n  0,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpuw76r0qv.js:53:12)\n    at Object.<anonymous> (/tmp/tmpuw76r0qv.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    3, 0, 3, 0,\n    1, 0, 5\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  let paren_stack = [];\n  let current_level = 0;\n  let max_level = 0;\n  let paren_count = 0;\n  let paren_index = 0;\n  let paren_length = paren_string.length;\n  let paren_char;\n  let paren_char_index = 0;\n  let paren_char_length = 0;\n  let paren_char_count = 0;\n  let paren_char_count_index = 0;\n  let paren_char_count_length = 0;\n  let paren_char_count_length_index = 0;\n  let paren_char_count_length_length = 0;\n  let paren_char_count_length_length_index = 0;\n  let paren_char_count_length_length_length = 0;\n  let paren_char_count_length_length_length_index = 0;\n  let paren_char_count_length_length_length_length = 0;\n  let paren_char_count_length_length_length_length_index = 0;\n  let paren_char_count_length_length_length_length_length = 0;\n  let paren_char_count_length_length_length_length_length_index = 0;\n  let paren_char_count_length_length_length_length_length_length = 0;\n  let paren_char_count_length_length_length_length_length_length_index = 0;\n  let paren_char_count_length_length_length_length_length_length_length = 0;\n  let paren_char_count_length_length_length_length_length_length_length_index = 0;\n  let paren_char_count_length_length_length_length_length_length_length_length = 0;\n  let paren_char_count_length_length_length_length_length_length_length_length_index = 0;\n  let paren_char_count_length_length_length_length_length_length_length_length_length = 0;\n  let paren_char_count_length\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292599,
      "stdout": "../../../../../../tmp/tmpvg86cc3b.ts(47,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let result = [];\n    let stack = [];\n    let paren_count = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let paren_stack = [];\n    let paren_stack_count = 0;\n    let paren_stack_index = 0;\n    let paren_stack_length = 0;\n    let paren_stack_max_length = 0;\n    let paren_stack_max_index = 0;\n    let paren_stack_max_count = 0;\n    let paren_stack_max_count_index = 0;\n    let paren_stack_max_count_length = 0;\n    let paren_stack_max_count_length_index = 0;\n    let paren_stack_max_count_length_length = 0;\n    let paren_stack_max_count_length_length_index = 0;\n    let paren_stack_max_count_length_length_length = 0;\n    let paren_stack_max_count_length_length_length_index = 0;\n    let paren_stack_max_count_length_length_length_length = 0;\n    let paren_stack_max_count_length_length_length_length_index = 0;\n    let paren_stack_max_count_length_length_length_length_length = 0;\n    let paren_stack_max_count_length_length_length_length_length_index = 0;\n    let paren_stack_max_count_length_length_length_length_length_length = 0;\n    let paren_stack_max_count_length_length_length_length_length_length_index = 0;\n    let paren_stack_max_count_length_length_length_length_length_length_length = 0;\n    let paren_stack_max_count_length_length_length_length_length_length_length_index = 0;\n    let paren_stack_max_count_length_length_length_length_length_length_length_length = 0;\n    let paren_stack_max_count_length_length\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292599,
      "stdout": "../../../../../../tmp/tmphp1xo6a4.ts(48,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_count_in_level = 0;\n    let paren_level_in_count = 0;\n    let paren_count_in_level_in_count = 0;\n    let paren_level_in_count_in_count = 0;\n    let paren_count_in_level_in_count_in_count = 0;\n    let paren_level_in_count_in_count_in_count = 0;\n    let paren_count_in_level_in_count_in_count_in_count = 0;\n    let paren_level_in_count_in_count_in_count_in_count = 0;\n    let paren_count_in_level_in_count_in_count_in_count_in_count = 0;\n    let paren_level_in_count_in_count_in_count_in_count_in_count = 0;\n    let paren_count_in_level_in_count_in_count_in_count_in_count_in_count = 0;\n    let paren_level_in_count_in_count_in_count_in_count_in_count_in_count = 0;\n    let paren_count_in_level_in_count_in_count_in_count_in_count_in_count_in_count = 0;\n    let paren_level_in_count_in_count_in_count_in_count_in_count_in_count_in_count = 0;\n    let paren_count_in_level_in_count_in_count_in_count_in_count_in_count_in_count_in_count = 0;\n    let paren_level_in_count_in_count_in_count_in_count_in_count_in_count_in_count_in_count = 0;\n    let paren_count_in_level_in_count_in_count_in_count_in_count_in_count_in_count_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292599,
      "stdout": "../../../../../../tmp/tmp2ede_z86.ts(38,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let paren_stack = [];\n    let paren_count = 0;\n    let paren_depth = 0;\n    let paren_index = 0;\n    let paren_start = 0;\n    let paren_end = 0;\n    let paren_count_start = 0;\n    let paren_count_end = 0;\n    let paren_count_start_end = 0;\n    let paren_count_end_start = 0;\n    let paren_count_end_start_end = 0;\n    let paren_count_start_end_start = 0;\n    let paren_count_start_end_end = 0;\n    let paren_count_start_end_start_end = 0;\n    let paren_count_start_end_end_start = 0;\n    let paren_count_start_end_end_start_end = 0;\n    let paren_count_start_end_end_start_end_start = 0;\n    let paren_count_start_end_end_start_end_start_end = 0;\n    let paren_count_start_end_end_start_end_start_end_start = 0;\n    let paren_count_start_end_end_start_end_start_end_start_end = 0;\n    let paren_count_start_end_end_start_end_start_end_start_end_start = 0;\n    let paren_count_start_end_end_start_end_start_end_start_end_start_end = 0;\n    let paren_count_start_end_end_start_end_start_end_start_end_start_end_start = 0;\n    let paren_count_start_end_end_start_end_start_end_start_end_start_end_start_end = 0;\n    let paren_count_start_end_end_start_end_start_end_start_end_start_end_start_end_start = 0;\n    let paren_count_start_end_end_start_end_start_end_start_end_start_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292599,
      "stdout": "../../../../../../tmp/tmpcmv2hfnu.ts(44,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let result = [];\n    let stack = [];\n    let current_level = 0;\n    let current_paren = 0;\n    let paren_count = 0;\n    let paren_string = \"\";\n    let paren_string_length = paren_string.length;\n    for (let i = 0; i < paren_string_length; i++) {\n        let c = paren_string[i];\n        if (c === \"(\") {\n            paren_count++;\n            if (stack.length === 0) {\n                current_level++;\n                current_paren = 0;\n            }\n            stack.push(current_level);\n            current_paren++;\n        } else if (c === \")\") {\n            current_level = stack.pop();\n            current_paren--;\n        }\n        if (current_paren === 0) {\n            result.push(current_level);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292599,
      "stdout": "../../../../../../tmp/tmpm_8p9zn2.ts(6,30): error TS2300: Duplicate identifier 'paren_string'.\n../../../../../../tmp/tmpm_8p9zn2.ts(12,9): error TS2300: Duplicate identifier 'paren_string'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let result = [];\n    let stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let paren_index = 0;\n    let paren_string_length = paren_string.length;\n    let paren_string_index = 0;\n    while (paren_string_index < paren_string_length) {\n        if (paren_string[paren_string_index] === '(') {\n            paren_count++;\n            stack.push(paren_count);\n            paren_level = stack.length - 1;\n        } else if (paren_string[paren_string_index] === ')') {\n            paren_count--;\n            if (paren_count === 0) {\n                result.push(paren_level);\n                paren_index = paren_string_index + 1;\n                while (paren_index < paren_string_length && paren_string[paren_index] === ' ') {\n                    paren_index++;\n                }\n                paren_string_index = paren_index;\n            } else {\n                stack.pop();\n                paren_level = stack[stack.length - 1];\n            }\n        } else {\n            paren_index = paren_string_index + 1;\n            while (paren_index < paren_string_length && paren_string[paren_index] === ' ') {\n                paren_index++;\n            }\n            paren_string_index = paren_index;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
      "timestamp": 1664292601,
      "stdout": "",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffd83b9f570\n 1: 0x2b8529b99727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b852a72e28e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2b852a068f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2b852a1fa760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2b852a2020cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2b852a3ec7db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2b8529d4b7f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "exit_code": -5,
      "status": "Exception"
    }
  ]
}