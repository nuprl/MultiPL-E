name: HumanEval_107_even_odd_palindrome
language: ts
prompt: "//Given a positive integer n, return an array that has the number of even\
  \ and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
  // Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer\
  \ palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example\
  \ 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome\
  \ are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
  // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and\
  \ odd integer palindromes respectively.\nfunction even_odd_palindrome(n: number):\
  \ [number, number] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = even_odd_palindrome;\n  assert.deepEqual(candidate(123),[8,\
  \ 13]);\n  assert.deepEqual(candidate(12),[4, 6]);\n  assert.deepEqual(candidate(3),[1,\
  \ 2]);\n  assert.deepEqual(candidate(63),[6, 8]);\n  assert.deepEqual(candidate(25),[5,\
  \ 6]);\n  assert.deepEqual(candidate(19),[4, 6]);\n  assert.deepEqual(candidate(9),[4,\
  \ 5]);\n  assert.deepEqual(candidate(1),[0, 1]);\n}\n\ntest();"
completions: ["  let odd = 0\n  let even = 0\n  let i = 1\n  while (i <= n) {\n  \
    \  if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n      } else\
    \ {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n",
  "  let odd = 0\n  let even = 0\n  let i = 1\n  while (i <= n) {\n    if (isPalindrome(i))\
    \ {\n      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n\
    \      }\n    }\n    i++\n  }\n  return [even, odd]\n}\n", "  let odd = 0;\n \
    \ let even = 0;\n  let i = 1;\n  while (i <= n) {\n    if (isPalindrome(i)) {\n\
    \      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n \
    \     }\n    }\n    i++;\n  }\n  return [even, odd];\n}\n", "  let odd = 0\n \
    \ let even = 0\n  let i = 2\n  while (i <= n) {\n    if (isPalindrome(i)) {\n\
    \      if (i % 2 === 0) {\n        even++\n      } else {\n        odd++\n   \
    \   }\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nfunction isPalindrome(n:\
    \ number): boolean {\n  let i = 0\n  let j = n - 1\n  while (i < j) {\n    if\
    \ (n % 10 !== n % 10 - 1) {\n      return false\n    }\n    i++\n    j--\n  }\n\
    \  return true\n}\n\nmodule.exports = even_odd_palindrome\n", "  const odd = [];\n\
    \  const even = [];\n  let i = 1;\n  while (i <= n) {\n    if (isPalindrome(i))\
    \ {\n      if (i % 2 === 0) {\n        even.push(i);\n      } else {\n       \
    \ odd.push(i);\n      }\n    }\n    i++;\n  }\n  return [even.length, odd.length];\n\
    }\n\nfunction isPalindrome(n: number): boolean {\n  let i = 0;\n  let j = n -\
    \ 1;\n  while (i < j) {\n    if (n % 10 !== n % 10) {\n      return false;\n \
    \   }\n    n /= 10;\n    i++;\n    j--;\n  }\n  return true;\n}\n\nmodule.exports\
    \ = even_odd_palindrome;\n", "  const arr = [];\n  let i = 1;\n  while (i <= n)\
    \ {\n    const count = 0;\n    const j = i;\n    while (j <= n) {\n      if (isPalindrome(i\
    \ + j)) {\n        count++;\n      }\n      j++;\n    }\n    if (count % 2 ===\
    \ 0) {\n      arr.push(i);\n    }\n    i++;\n  }\n  return arr;\n}\n\nfunction\
    \ isPalindrome(n: number): boolean {\n  const str = n.toString();\n  let i = 0;\n\
    \  let j = str.length - 1;\n  while (i < j) {\n    if (str[i] !== str[j]) {\n\
    \      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}\n\nmodule.exports\
    \ = even_odd_palindrome;\n", "  let even = 0\n  let odd = 0\n  let i = 1\n  while\
    \ (i <= n) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++\n\
    \      } else {\n        odd++\n      }\n    }\n    i++\n  }\n  return [even,\
    \ odd]\n}\n\nfunction isPalindrome(n: number): boolean {\n  let s = String(n)\n\
    \  let i = 0\n  let j = s.length - 1\n  while (i < j) {\n    if (s[i] !== s[j])\
    \ {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n", " \
    \ let odd = 0\n  let even = 0\n  for (let i = 1; i <= n; i++) {\n    let num =\
    \ i\n    let isPalindrome = true\n    while (num) {\n      if (num % 2) {\n  \
    \      odd++\n        isPalindrome = false\n        break\n      }\n      num\
    \ = num / 2\n    }\n    if (isPalindrome) {\n      even++\n    }\n  }\n  return\
    \ [even, odd]\n}\n", "  const arr = [];\n  let i = 2;\n  while (i <= n) {\n  \
    \  const count = 0;\n    let j = i;\n    while (j <= n) {\n      if (isPalindrome(i\
    \ + j)) {\n        count++;\n      }\n      j++;\n    }\n    if (count % 2 ===\
    \ 0) {\n      arr.push(i);\n    }\n    i++;\n  }\n  return arr;\n}\n\nfunction\
    \ isPalindrome(n: number): boolean {\n  let i = 0;\n  let j = n - 1;\n  while\
    \ (i < j) {\n    if (n % 10 !== n % 10.toString().charAt(i) || n % 10 !== n %\
    \ 10.toString().charAt(j)) {\n      return false;\n    }\n    i++;\n    j--;\n\
    \  }\n  return true;\n}\n\nmodule.exports = even_odd_palindrome;\n", "  let odd\
    \ = 0, even = 0, i = 0;\n  while (i < n) {\n    if (isPalindrome(i)) {\n     \
    \ if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n\
    \    }\n    i++;\n  }\n  return [even, odd];\n}\n\nfunction isPalindrome(n: number):\
    \ boolean {\n  let i = 0, j = n - 1;\n  while (i < j) {\n    if (n % 10 !== n\
    \ % 10) {\n      return false;\n    }\n    n /= 10;\n    i++;\n    j--;\n  }\n\
    \  return true;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
