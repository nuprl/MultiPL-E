name: HumanEval_114_minSubArraySum
language: ts
prompt: "//Given an array of integers nums, find the minimum sum of any non-empty\
  \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
  // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
  \ number[]): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
  \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
  \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
  \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
  \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
  \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
  \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
  \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
completions: ["  let min = nums[0];\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < min) {\n      min = sum;\n    }\n\
    \    if (sum === 0) {\n      sum = 0;\n    }\n  }\n  return min;\n}\n", "  let\
    \ min = nums[0];\n  let sum = nums[0];\n  for (let i = 1; i < nums.length; i++)\
    \ {\n    sum = Math.min(sum + nums[i], nums[i]);\n    min = Math.min(min, sum);\n\
    \  }\n  return min;\n}\n", "  let min = nums[0];\n  let sum = 0;\n  for (let i\
    \ = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < min) {\n  \
    \    min = sum;\n    }\n    if (sum === 0) {\n      sum = 0;\n    }\n  }\n  return\
    \ min;\n}\n", "  let min = 0\n  for (let i = 0; i < nums.length; i++) {\n    let\
    \ sum = 0\n    for (let j = i; j < nums.length; j++) {\n      sum += nums[j]\n\
    \      if (sum < min) {\n        min = sum\n      }\n    }\n  }\n  return min\n\
    }\n", "  let min = nums[0];\n  let sum = nums[0];\n  for (let i = 1; i < nums.length;\
    \ i++) {\n    if (nums[i] < 0) {\n      sum = Math.min(sum, 0);\n    } else {\n\
    \      sum += nums[i];\n    }\n    min = Math.min(min, sum);\n  }\n  return min;\n\
    }\n", "  let min = nums[0];\n  let sum = nums[0];\n  for (let i = 1; i < nums.length;\
    \ i++) {\n    sum = Math.min(sum + nums[i], nums[i]);\n    min = Math.min(min,\
    \ sum);\n  }\n  return min;\n}\n", "  let min = nums[0];\n  let sum = 0;\n  for\
    \ (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < min)\
    \ {\n      min = sum;\n    }\n    if (sum === 0) {\n      sum = 0;\n    }\n  }\n\
    \  return min;\n}\n", "  let min = nums[0];\n  let sum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < min) {\n      min\
    \ = sum;\n    }\n    if (sum === 0) {\n      sum = 0;\n    }\n  }\n  return min;\n\
    }\n", "  let min = nums[0];\n  let sum = nums[0];\n  for (let i = 1; i < nums.length;\
    \ i++) {\n    sum = Math.min(sum + nums[i], nums[i]);\n    min = Math.min(min,\
    \ sum);\n  }\n  return min;\n}\n", "  let min = nums[0];\n  let sum = 0;\n  for\
    \ (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < min)\
    \ {\n      min = sum;\n    }\n    if (sum === 0) {\n      sum = 0;\n    }\n  }\n\
    \  return min;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
