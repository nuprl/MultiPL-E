name: HumanEval_153_Strongest_Extension
language: ts
prompt: "//You will be given the name of a class (a string) and an array of extensions.\n\
  // The extensions are to be used to load additional classes to the class. The\n\
  // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  // letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
  \ \n// You should find the strongest extension and return a string in this \n//\
  \ format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
  \ with the same strength, you should\n// choose the one that comes first in the\
  \ array.\n// For example, if you are given \"Slices\" as the class and an array\
  \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
  // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
  \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
  , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
  \ string, extensions: string[]): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
  Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
  Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
  );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
  , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
  K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
  __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
  YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
  );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"\
  WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\", \"91245\"\
  ]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"Bb\"]),\"Sp.671235\"\
  );\n}\n\ntest();"
completions: ["    let strength = 0;\n    let extension = extensions[0];\n    for\
    \ (let i = 0; i < extensions.length; i++) {\n        let cap = 0;\n        let\
    \ sm = 0;\n        for (let j = 0; j < extensions[i].length; j++) {\n        \
    \    if (extensions[i][j].toUpperCase() !== extensions[i][j]) {\n            \
    \    cap++;\n            }\n            if (extensions[i][j].toLowerCase() !==\
    \ extensions[i][j]) {\n                sm++;\n            }\n        }\n     \
    \   if (cap - sm > strength) {\n            strength = cap - sm;\n           \
    \ extension = extensions[i];\n        }\n    }\n    return class_name + \".\"\
    \ + extension;\n}\n", "    let strength = 0;\n    let extension = '';\n    for\
    \ (let i = 0; i < extensions.length; i++) {\n        let cap = 0;\n        let\
    \ sm = 0;\n        let ext = extensions[i];\n        for (let j = 0; j < ext.length;\
    \ j++) {\n            if (ext[j].toUpperCase() === ext[j]) {\n               \
    \ cap++;\n            }\n            else {\n                sm++;\n         \
    \   }\n        }\n        strength += cap - sm;\n        if (strength > extension.length)\
    \ {\n            extension = ext;\n        }\n    }\n    return class_name + '.'\
    \ + extension;\n}\n", "    // Write your code here\n    var max_strength = 0;\n\
    \    var max_extension = \"\";\n    for (var i = 0; i < extensions.length; i++)\
    \ {\n        var strength = 0;\n        var extension = extensions[i];\n     \
    \   var cap = extension.length;\n        var sm = extension.toLowerCase().length;\n\
    \        strength = cap - sm;\n        if (strength > max_strength) {\n      \
    \      max_strength = strength;\n            max_extension = extension;\n    \
    \    }\n    }\n    return class_name + \".\" + max_extension;\n}\n", "    var\
    \ strength = 0;\n    var extension = extensions[0];\n    for (var i = 0; i < extensions.length;\
    \ i++) {\n        var s = extensions[i];\n        var cap = 0;\n        var sm\
    \ = 0;\n        for (var j = 0; j < s.length; j++) {\n            if (s[j].toUpperCase()\
    \ === s[j]) {\n                cap++;\n            }\n            else {\n   \
    \             sm++;\n            }\n        }\n        if (cap - sm > strength)\
    \ {\n            strength = cap - sm;\n            extension = s;\n        }\n\
    \    }\n    return class_name + \".\" + extension;\n}\n", "    var strength =\
    \ 0;\n    var extension = null;\n    for (var i = 0; i < extensions.length; i++)\
    \ {\n        var extension_name = extensions[i];\n        var cap = extension_name.match(/[A-Z]/g);\n\
    \        var sm = extension_name.match(/[a-z]/g);\n        var strength_value\
    \ = cap.length - sm.length;\n        if (strength_value > strength) {\n      \
    \      strength = strength_value;\n            extension = extension_name;\n \
    \       }\n    }\n    return class_name + \".\" + extension;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
