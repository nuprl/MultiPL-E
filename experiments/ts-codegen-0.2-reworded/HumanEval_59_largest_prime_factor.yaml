name: HumanEval_59_largest_prime_factor
language: ts
prompt: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n//\
  \ 2\nfunction largest_prime_factor(n: number): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
  \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
  \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
completions: ["  let prime_factors = [];\n  let i = 2;\n  while (i * i <= n) {\n \
    \   if (n % i === 0) {\n      prime_factors.push(i);\n      n = n / i;\n    }\
    \ else {\n      i++;\n    }\n  }\n  if (n > 1) {\n    prime_factors.push(n);\n\
    \  }\n  return prime_factors.sort((a, b) => b - a)[0];\n}\n", "  let factors =\
    \ [];\n  let i = 2;\n  while (n % i === 0) {\n    factors.push(i);\n    n /= i;\n\
    \  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return Math.max(...factors);\n\
    }\n", "  let largest_factor = 1;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n\
    \    if (n % i === 0) {\n      largest_factor = i;\n      n = n / i;\n    }\n\
    \  }\n  if (n > 1) {\n    largest_factor = n;\n  }\n  return largest_factor;\n\
    }\n", "  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n\
    \  }\n  if (n === 3) {\n    return 3;\n  }\n  if (n % 2 === 0) {\n    return 2;\n\
    \  }\n  if (n % 3 === 0) {\n    return 3;\n  }\n  let i = 5;\n  while (n % i ===\
    \ 0) {\n    i += 2;\n  }\n  return i;\n}\n", "  let largest_factor = 1;\n  for\
    \ (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      largest_factor\
    \ = i;\n      n = n / i;\n    }\n  }\n  if (n > 1) {\n    largest_factor = n;\n\
    \  }\n  return largest_factor;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
