name: HumanEval_116_sort_array
language: ts
prompt: "//In this Kata, you have to sort an array of non-negative integers according\
  \ to\n// number of ones in their binary representation in ascending order.\n// For\
  \ similar number of ones, sort based on decimal value.\n// It must be implemented\
  \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
  \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
  // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2,\
  \ 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
  \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
  \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
  \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
  \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4,\
  \ 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2,\
  \ 4, 8, 16, 32]);\n}\n\ntest();"
completions: ["  return arr.sort((a, b) => {\n    const a_ones = count_ones(a);\n\
    \    const b_ones = count_ones(b);\n    if (a_ones === b_ones) {\n      return\
    \ a - b;\n    }\n    return a_ones - b_ones;\n  });\n}\n\nfunction count_ones(num:\
    \ number): number {\n  let count = 0;\n  while (num) {\n    count += num & 1;\n\
    \    num >>= 1;\n  }\n  return count;\n}\n", "  let count = 0\n  for (let i =\
    \ 0; i < arr.length; i++) {\n    let num = arr[i]\n    let binary = num.toString(2)\n\
    \    let ones = binary.split('').filter(x => x === '1').length\n    if (ones >\
    \ count) {\n      count = ones\n    }\n  }\n  let sorted = arr.sort((a, b) =>\
    \ {\n    let a_ones = a.toString(2).split('').filter(x => x === '1').length\n\
    \    let b_ones = b.toString(2).split('').filter(x => x === '1').length\n    if\
    \ (a_ones === b_ones) {\n      return a - b\n    }\n    return a_ones - b_ones\n\
    \  })\n  return sorted\n}\n", "  let sorted = arr.sort((a, b) => {\n    let a_ones\
    \ = count_ones(a);\n    let b_ones = count_ones(b);\n    if (a_ones === b_ones)\
    \ {\n      return a - b;\n    } else {\n      return a_ones - b_ones;\n    }\n\
    \  });\n  return sorted;\n}\n\nfunction count_ones(num: number): number {\n  let\
    \ count = 0;\n  while (num > 0) {\n    count += num & 1;\n    num >>= 1;\n  }\n\
    \  return count;\n}\n", "  let sorted_arr = arr.slice();\n  let sorted_arr_len\
    \ = sorted_arr.length;\n  let sorted_arr_index = 0;\n\n  while (sorted_arr_index\
    \ < sorted_arr_len) {\n    let current_index = sorted_arr_index;\n    let current_value\
    \ = sorted_arr[current_index];\n    let current_value_len = current_value.toString().length;\n\
    \    let current_value_ones = current_value.toString().match(/1/g);\n    let current_value_ones_len\
    \ = current_value_ones.length;\n    let current_value_ones_index = 0;\n\n    while\
    \ (current_value_ones_index < current_value_ones_len) {\n      let current_value_ones_index_next\
    \ = current_value_ones_index + 1;\n      let current_value_ones_index_next_len\
    \ = current_value_ones_index_next.length;\n      let current_value_ones_index_next_ones\
    \ = current_value_ones_index_next.match(/1/g);\n      let current_value_ones_index_next_ones_len\
    \ = current_value_ones_index_next_ones.length;\n      let current_value_ones_index_next_ones_index\
    \ = 0;\n\n      while (current_value_ones_index_next_ones_index < current_value_ones_index_next_ones_len)\
    \ {\n        let current_value_ones_index_next_ones_index_next = current_value_ones_index_next_ones_index\
    \ + 1;\n        let current_value_ones_index_next_ones_index_next_len = current_value_ones_index_next_ones_index_next.length;\n\
    \        let current_value_ones_index_next_ones_index_next_ones = current_value_ones_index_next_ones_index_next.match(/1/g);\n\
    \        let current_value_ones_index_next_ones_index_next_ones_len = current_value_ones_index_next_ones_index_next_ones.length;\n\
    \        let current_value_ones_index", "  let sorted_arr = arr.sort((a, b) =>\
    \ {\n    let a_ones = count_ones(a);\n    let b_ones = count_ones(b);\n    if\
    \ (a_ones === b_ones) {\n      return a - b;\n    }\n    return a_ones - b_ones;\n\
    \  });\n  return sorted_arr;\n}\n\nfunction count_ones(num: number): number {\n\
    \  let count = 0;\n  while (num > 0) {\n    num = num & (num - 1);\n    count++;\n\
    \  }\n  return count;\n}\n", "  let sorted_arr = arr.slice();\n  let sorted_arr_length\
    \ = sorted_arr.length;\n  let sorted_arr_index = 0;\n  let sorted_arr_value =\
    \ 0;\n  let sorted_arr_count = 0;\n  let sorted_arr_count_value = 0;\n  let sorted_arr_count_value_index\
    \ = 0;\n  let sorted_arr_count_value_value = 0;\n  let sorted_arr_count_value_value_index\
    \ = 0;\n  let sorted_arr_count_value_value_value = 0;\n  let sorted_arr_count_value_value_value_index\
    \ = 0;\n  let sorted_arr_count_value_value_value_value = 0;\n  let sorted_arr_count_value_value_value_value_index\
    \ = 0;\n  let sorted_arr_count_value_value_value_value_value = 0;\n  let sorted_arr_count_value_value_value_value_value_index\
    \ = 0;\n  let sorted_arr_count_value_value_value_value_value_value = 0;\n  let\
    \ sorted_arr_count_value_value_value_value_value_value_index = 0;\n  let sorted_arr_count_value_value_value_value_value_value_value\
    \ = 0;\n  let sorted_arr_count_value_value_value_value_value_value_value_index\
    \ = 0;\n  let sorted_arr_count_value_value_value_value_value_value_value_value\
    \ = 0;\n  let sorted_arr_count_value_value_value_value_value_value_value_value_index\
    \ = 0;\n  let sorted_arr_count_value_value_value_value_value_value_value_value_value\
    \ = 0;\n  let sorted_arr_count_value_value_value_value_value_value_value_value_value_index\
    \ = 0;\n  let sorted_arr_count_value_value_value_value_value_value_value_value_value_value\
    \ = 0;\n  let sorted_arr_count_value_value_value_value_value_value_value_value_value_",
  "  // Write your code here\n}\n", "  let count = 0\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    let num = arr[i]\n    let binary = num.toString(2)\n    let ones\
    \ = 0\n    for (let j = 0; j < binary.length; j++) {\n      if (binary[j] ===\
    \ '1') {\n        ones++\n      }\n    }\n    count += ones\n  }\n  let sorted\
    \ = []\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i]\n    let\
    \ binary = num.toString(2)\n    let ones = 0\n    for (let j = 0; j < binary.length;\
    \ j++) {\n      if (binary[j] === '1') {\n        ones++\n      }\n    }\n   \
    \ let decimal = parseInt(num.toString(), 2)\n    if (count === ones) {\n     \
    \ sorted.push(decimal)\n    } else {\n      sorted.push(num)\n    }\n  }\n  return\
    \ sorted\n}\n", "  let count = 0\n  for (let i = 0; i < arr.length; i++) {\n \
    \   let num = arr[i]\n    let binary = num.toString(2)\n    let ones = binary.match(/1/g)\n\
    \    count += ones.length\n  }\n  let sorted = []\n  let sorted_dec = []\n  for\
    \ (let i = 0; i < arr.length; i++) {\n    let num = arr[i]\n    let binary = num.toString(2)\n\
    \    let ones = binary.match(/1/g)\n    let dec = parseInt(binary, 2)\n    if\
    \ (count === ones.length) {\n      sorted.push(dec)\n    } else {\n      sorted_dec.push(dec)\n\
    \    }\n  }\n  sorted = sorted.sort((a, b) => a - b)\n  sorted_dec = sorted_dec.sort((a,\
    \ b) => a - b)\n  return sorted.concat(sorted_dec)\n}\n", "  return arr.sort((a,\
    \ b) => {\n    const a_ones = count_ones(a);\n    const b_ones = count_ones(b);\n\
    \    if (a_ones === b_ones) {\n      return a - b;\n    }\n    return a_ones -\
    \ b_ones;\n  });\n}\n\nfunction count_ones(num: number): number {\n  let count\
    \ = 0;\n  while (num > 0) {\n    count += num & 1;\n    num >>= 1;\n  }\n  return\
    \ count;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
