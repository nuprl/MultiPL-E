name: HumanEval_5_intersperse
language: ts
prompt: "//Insert a number 'delimeter' between every two consecutive elements of input\
  \ array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3],\
  \ 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers: number[], delimeter: number):\
  \ number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = intersperse;\n  assert.deepEqual(candidate([], 7),[]);\n\
  \  assert.deepEqual(candidate([5, 6, 3, 2], 8),[5, 8, 6, 8, 3, 8, 2]);\n  assert.deepEqual(candidate([2,\
  \ 2, 2], 2),[2, 2, 2, 2, 2]);\n}\n\ntest();"
completions: ["  return numbers.reduce((acc, num, i) => {\n    if (i % 2 === 0) {\n\
    \      acc.push(delimeter);\n    }\n    acc.push(num);\n    return acc;\n  },\
    \ []);\n}\n", "  const result = [];\n  let index = 0;\n  while (index < numbers.length)\
    \ {\n    result.push(numbers[index]);\n    index++;\n    if (index < numbers.length)\
    \ {\n      result.push(delimeter);\n    }\n  }\n  return result;\n}\n", "  const\
    \ result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n\
    \    i += 1;\n    if (i < numbers.length) {\n      result.push(delimeter);\n \
    \   }\n  }\n  return result;\n}\n", "  return numbers.reduce((acc, num, i) =>\
    \ {\n    if (i % 2 === 0) {\n      acc.push(delimeter);\n    }\n    acc.push(num);\n\
    \    return acc;\n  }, []);\n}\n", "  return numbers.reduce((acc, num, idx) =>\
    \ {\n    if (idx === 0) {\n      acc.push(num);\n    } else {\n      acc.push(delimeter);\n\
    \      acc.push(num);\n    }\n    return acc;\n  }, []);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
