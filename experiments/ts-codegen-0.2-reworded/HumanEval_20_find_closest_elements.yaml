name: HumanEval_20_find_closest_elements
language: ts
prompt: "//From a supplied array of numbers (of length at least two) select and return\
  \ two that are the closest to each\n// other and return them in order (smaller number,\
  \ larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n\
  // [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n//\
  \ [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number]\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0,\
  \ 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0,\
  \ 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0,\
  \ 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
  \ 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2,\
  \ 3.1]);\n}\n\ntest();"
completions: ["  let min_diff = Infinity;\n  let min_index = 0;\n  let max_index =\
    \ 0;\n  let min_value = numbers[0];\n  let max_value = numbers[0];\n\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    let diff = Math.abs(numbers[i] - min_value);\n\
    \    if (diff < min_diff) {\n      min_diff = diff;\n      min_index = i;\n  \
    \  }\n    let diff = Math.abs(numbers[i] - max_value);\n    if (diff < min_diff)\
    \ {\n      min_diff = diff;\n      max_index = i;\n    }\n  }\n\n  return [numbers[min_index],\
    \ numbers[max_index]];\n}\n", "  const sorted_numbers = numbers.sort((a, b) =>\
    \ a - b);\n  const first_number = sorted_numbers[0];\n  const second_number =\
    \ sorted_numbers[1];\n  const difference = Math.abs(first_number - second_number);\n\
    \  const closest_number = first_number;\n  if (difference > 0.5) {\n    closest_number\
    \ = second_number;\n  }\n  return [closest_number, second_number];\n}\n", "  \
    \  let min_diff = Infinity;\n    let min_index = 0;\n    let max_index = 0;\n\
    \    let min_value = numbers[0];\n    let max_value = numbers[0];\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        let diff = Math.abs(numbers[i] -\
    \ min_value);\n        if (diff < min_diff) {\n            min_diff = diff;\n\
    \            min_index = i;\n        }\n        let diff = Math.abs(numbers[i]\
    \ - max_value);\n        if (diff < min_diff) {\n            min_diff = diff;\n\
    \            max_index = i;\n        }\n    }\n    return [numbers[min_index],\
    \ numbers[max_index]];\n}", "    let min_diff = Infinity;\n    let min_index =\
    \ 0;\n    let max_index = 0;\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        let diff = Math.abs(numbers[i] - numbers[0]);\n        if (diff < min_diff)\
    \ {\n            min_diff = diff;\n            min_index = i;\n        }\n   \
    \     let diff2 = Math.abs(numbers[i] - numbers[1]);\n        if (diff2 < min_diff)\
    \ {\n            min_diff = diff2;\n            max_index = i;\n        }\n  \
    \  }\n    return [numbers[min_index], numbers[max_index]];\n}\n", "  let min_diff\
    \ = Infinity;\n  let min_index = 0;\n  let max_index = 0;\n  let min_value = numbers[0];\n\
    \  let max_value = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n\
    \    let diff = Math.abs(numbers[i] - min_value);\n    if (diff < min_diff) {\n\
    \      min_diff = diff;\n      min_index = i;\n    }\n    let diff = Math.abs(numbers[i]\
    \ - max_value);\n    if (diff < min_diff) {\n      min_diff = diff;\n      max_index\
    \ = i;\n    }\n    if (numbers[i] < min_value) {\n      min_value = numbers[i];\n\
    \    }\n    if (numbers[i] > max_value) {\n      max_value = numbers[i];\n   \
    \ }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
