name: HumanEval_111_histogram
language: ts
prompt: "//Given a string representing a space separated lowercase letters, return\
  \ an object\n// of the letter with the most repetition and containing the corresponding\
  \ count.\n// If several letters have the same occurrence, return all of them.\n\
  // Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n//\
  \ >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c\
  \ a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n\
  // >>> histogram(\"\")\n// {}\nfunction histogram(test: string): {[key: string]:\
  \ number} {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"\
  ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2,\
  \ \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1,\
  \ \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
  : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\":\
  \ 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
  \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
  a\": 1});\n}\n\ntest();"
completions: ["  const histogram = {};\n  for (let i = 0; i < test.length; i++) {\n\
    \    const key = test[i];\n    if (!histogram[key]) {\n      histogram[key] =\
    \ 1;\n    } else {\n      histogram[key] += 1;\n    }\n  }\n  return histogram;\n\
    }\n", "  let result = {};\n  let count = 0;\n  for (let i = 0; i < test.length;\
    \ i++) {\n    let key = test[i];\n    if (!result[key]) {\n      result[key] =\
    \ 1;\n    } else {\n      result[key] += 1;\n    }\n    count += 1;\n  }\n  return\
    \ result;\n}\n", "  let result = {};\n  let count = 0;\n  for (let i = 0; i <\
    \ test.length; i++) {\n    let key = test[i];\n    if (!result[key]) {\n     \
    \ result[key] = 1;\n    } else {\n      result[key] += 1;\n    }\n    count +=\
    \ 1;\n  }\n  return count === 0 ? result : Object.keys(result).sort((a, b) =>\
    \ result[a] - result[b])\n}\n", "  let result = {};\n  let count = 0;\n  for (let\
    \ i = 0; i < test.length; i++) {\n    let key = test[i];\n    if (result[key]\
    \ === undefined) {\n      result[key] = 1;\n    } else {\n      result[key] +=\
    \ 1;\n    }\n    count += 1;\n  }\n  if (count === 0) {\n    return {};\n  }\n\
    \  return result;\n}\n", "  const counts = {};\n  for (let i = 0; i < test.length;\
    \ i++) {\n    const key = test[i];\n    if (!counts[key]) {\n      counts[key]\
    \ = 0;\n    }\n    counts[key]++;\n  }\n  return Object.keys(counts).reduce((acc,\
    \ key) => {\n    acc[key] = counts[key];\n    return acc;\n  }, {});\n}\n", " \
    \ const result = {};\n  const letters = test.split(/\\s+/);\n  for (let i = 0;\
    \ i < letters.length; i++) {\n    const letter = letters[i];\n    if (result[letter])\
    \ {\n      result[letter] += 1;\n    } else {\n      result[letter] = 1;\n   \
    \ }\n  }\n  return result;\n}\n", "  let result = {};\n  let count = 0;\n  for\
    \ (let i = 0; i < test.length; i++) {\n    let key = test[i];\n    if (result[key]\
    \ === undefined) {\n      result[key] = 1;\n    } else {\n      result[key] +=\
    \ 1;\n    }\n    count += 1;\n  }\n  for (let key in result) {\n    if (result[key]\
    \ > count) {\n      count = result[key];\n    }\n  }\n  return result;\n}\n",
  "  let count = {};\n  let max = 0;\n  for (let i = 0; i < test.length; i++) {\n\
    \    let key = test[i];\n    if (!count[key]) {\n      count[key] = 1;\n    }\
    \ else {\n      count[key] += 1;\n    }\n    if (count[key] > max) {\n      max\
    \ = count[key];\n    }\n  }\n  return count;\n}\n", "  const counts = {};\n  test.split('\
    \ ').forEach(letter => {\n    counts[letter] = counts[letter] || 0;\n    counts[letter]++;\n\
    \  });\n  return Object.keys(counts).reduce((result, key) => {\n    result[key]\
    \ = counts[key];\n    return result;\n  }, {});\n}\n", "  let count = {};\n  for\
    \ (let i = 0; i < test.length; i++) {\n    let key = test[i];\n    if (!count[key])\
    \ {\n      count[key] = 1;\n    } else {\n      count[key]++;\n    }\n  }\n  return\
    \ count;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
