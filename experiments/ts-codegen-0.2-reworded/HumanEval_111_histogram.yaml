name: HumanEval_111_histogram
language: ts
prompt: "//Given a string representing a space separated lowercase letters, return\
  \ an object\n// of the letter with the most repetition and containing the corresponding\
  \ count.\n// If several letters have the same occurrence, return all of them.\n\
  // Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n//\
  \ >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c\
  \ a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n\
  // >>> histogram(\"\")\n// {}\nfunction histogram(test: string): {[key: string]:\
  \ number} {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"\
  ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2,\
  \ \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1,\
  \ \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
  : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\":\
  \ 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
  \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
  a\": 1});\n}\n\ntest();"
completions: ["  const histogram = {};\n  for (let i = 0; i < test.length; i++) {\n\
    \    const key = test[i];\n    if (!histogram[key]) {\n      histogram[key] =\
    \ 1;\n    } else {\n      histogram[key] += 1;\n    }\n  }\n  return histogram;\n\
    }\n", "  let result = {};\n  let count = 0;\n  for (let i = 0; i < test.length;\
    \ i++) {\n    let key = test[i];\n    if (!result[key]) {\n      result[key] =\
    \ 1;\n    } else {\n      result[key] += 1;\n    }\n    count += 1;\n  }\n  return\
    \ result;\n}\n", "  let result = {};\n  let count = 0;\n  for (let i = 0; i <\
    \ test.length; i++) {\n    let key = test[i];\n    if (!result[key]) {\n     \
    \ result[key] = 1;\n    } else {\n      result[key] += 1;\n    }\n    count +=\
    \ 1;\n  }\n  return count === 0 ? result : Object.keys(result).sort((a, b) =>\
    \ result[a] - result[b])\n}\n", "  let result = {};\n  let count = 0;\n  for (let\
    \ i = 0; i < test.length; i++) {\n    let key = test[i];\n    if (result[key]\
    \ === undefined) {\n      result[key] = 1;\n    } else {\n      result[key] +=\
    \ 1;\n    }\n    count += 1;\n  }\n  if (count === 0) {\n    return {};\n  }\n\
    \  return result;\n}\n", "  const counts = {};\n  for (let i = 0; i < test.length;\
    \ i++) {\n    const key = test[i];\n    if (!counts[key]) {\n      counts[key]\
    \ = 0;\n    }\n    counts[key]++;\n  }\n  return Object.keys(counts).reduce((acc,\
    \ key) => {\n    acc[key] = counts[key];\n    return acc;\n  }, {});\n}\n", " \
    \ const result = {};\n  const letters = test.split(/\\s+/);\n  for (let i = 0;\
    \ i < letters.length; i++) {\n    const letter = letters[i];\n    if (result[letter])\
    \ {\n      result[letter] += 1;\n    } else {\n      result[letter] = 1;\n   \
    \ }\n  }\n  return result;\n}\n", "  let result = {};\n  let count = 0;\n  for\
    \ (let i = 0; i < test.length; i++) {\n    let key = test[i];\n    if (result[key]\
    \ === undefined) {\n      result[key] = 1;\n    } else {\n      result[key] +=\
    \ 1;\n    }\n    count += 1;\n  }\n  for (let key in result) {\n    if (result[key]\
    \ > count) {\n      count = result[key];\n    }\n  }\n  return result;\n}\n",
  "  let count = {};\n  let max = 0;\n  for (let i = 0; i < test.length; i++) {\n\
    \    let key = test[i];\n    if (!count[key]) {\n      count[key] = 1;\n    }\
    \ else {\n      count[key] += 1;\n    }\n    if (count[key] > max) {\n      max\
    \ = count[key];\n    }\n  }\n  return count;\n}\n", "  const counts = {};\n  test.split('\
    \ ').forEach(letter => {\n    counts[letter] = counts[letter] || 0;\n    counts[letter]++;\n\
    \  });\n  return Object.keys(counts).reduce((result, key) => {\n    result[key]\
    \ = counts[key];\n    return result;\n  }, {});\n}\n", "  let count = {};\n  for\
    \ (let i = 0; i < test.length; i++) {\n    let key = test[i];\n    if (!count[key])\
    \ {\n      count[key] = 1;\n    } else {\n      count[key]++;\n    }\n  }\n  return\
    \ count;\n}\n", "  let result = {};\n  let count = 0;\n  for (let i = 0; i < test.length;\
    \ i++) {\n    let key = test[i];\n    if (result[key] === undefined) {\n     \
    \ result[key] = 1;\n    } else {\n      result[key] += 1;\n    }\n    count +=\
    \ 1;\n  }\n  if (count === 0) {\n    return {};\n  }\n  return result;\n}\n",
  "  let result = {};\n  let count = 0;\n  for (let i = 0; i < test.length; i++) {\n\
    \    let key = test[i];\n    if (!result[key]) {\n      result[key] = 1;\n   \
    \ } else {\n      result[key] += 1;\n    }\n    count += 1;\n  }\n  return Object.keys(result).sort((a,\
    \ b) => result[a] - result[b])\n    .reduce((acc, key) => {\n      acc[key] =\
    \ result[key];\n      return acc;\n    }, {});\n}\n", "  let result = {};\n  let\
    \ max = 0;\n  let maxKey = \"\";\n  for (let i = 0; i < test.length; i++) {\n\
    \    let key = test[i];\n    if (result[key] === undefined) {\n      result[key]\
    \ = 1;\n    } else {\n      result[key] += 1;\n    }\n    if (result[key] > max)\
    \ {\n      max = result[key];\n      maxKey = key;\n    }\n  }\n  return result;\n\
    }\n", "  let result = {};\n  let count = 0;\n  for (let i = 0; i < test.length;\
    \ i++) {\n    let key = test[i];\n    if (result[key] === undefined) {\n     \
    \ result[key] = 1;\n    } else {\n      result[key] += 1;\n    }\n    count +=\
    \ 1;\n  }\n  if (count === 0) {\n    return result;\n  }\n  let max = 0;\n  let\
    \ maxKey = \"\";\n  for (let key in result) {\n    if (result[key] > max) {\n\
    \      max = result[key];\n      maxKey = key;\n    }\n  }\n  result = {};\n \
    \ result[maxKey] = max;\n  return result;\n}\n", "  let counts = {};\n  let maxCount\
    \ = 0;\n  for (let i = 0; i < test.length; i++) {\n    let key = test[i];\n  \
    \  if (!counts[key]) {\n      counts[key] = 1;\n    } else {\n      counts[key]\
    \ += 1;\n    }\n    if (counts[key] > maxCount) {\n      maxCount = counts[key];\n\
    \    }\n  }\n  return counts;\n}\n", "  let result = {};\n  let count = 0;\n \
    \ for (let i = 0; i < test.length; i++) {\n    let key = test[i];\n    if (!result[key])\
    \ {\n      result[key] = 1;\n    } else {\n      result[key] += 1;\n    }\n  \
    \  count += 1;\n  }\n  if (count === 0) {\n    return {};\n  }\n  return result;\n\
    }\n", "  let result = {};\n  let count = 0;\n  for (let i = 0; i < test.length;\
    \ i++) {\n    let key = test[i];\n    if (!result[key]) {\n      result[key] =\
    \ 1;\n    } else {\n      result[key]++;\n    }\n    count++;\n  }\n  return result;\n\
    }\n", "  let result = {};\n  for (let i = 0; i < test.length; i++) {\n    let\
    \ key = test[i];\n    if (!result[key]) {\n      result[key] = 1;\n    } else\
    \ {\n      result[key] += 1;\n    }\n  }\n  return result;\n}\n", "  let result\
    \ = {};\n  let count = 0;\n  for (let i = 0; i < test.length; i++) {\n    let\
    \ key = test[i];\n    if (!result[key]) {\n      result[key] = 1;\n    } else\
    \ {\n      result[key] += 1;\n    }\n    count += 1;\n  }\n  return count ===\
    \ 0 ? result : Object.keys(result).sort((a, b) => result[b] - result[a])[0];\n\
    }\n", "  const counts = {};\n  for (let i = 0; i < test.length; i++) {\n    const\
    \ key = test[i];\n    if (!counts[key]) {\n      counts[key] = 1;\n    } else\
    \ {\n      counts[key] += 1;\n    }\n  }\n  return Object.keys(counts).reduce((acc,\
    \ key) => {\n    acc[key] = counts[key];\n    return acc;\n  }, {});\n}\n", " \
    \ let result = {};\n  let count = 0;\n  for (let i = 0; i < test.length; i++)\
    \ {\n    let key = test[i];\n    if (result[key] === undefined) {\n      result[key]\
    \ = 1;\n    } else {\n      result[key] += 1;\n    }\n    count += 1;\n  }\n \
    \ return count === 0 ? result : Object.keys(result).sort((a, b) => result[a] -\
    \ result[b])[0];\n}\n", "  const counts = {};\n  for (let i = 0; i < test.length;\
    \ i++) {\n    const key = test[i];\n    if (counts[key] === undefined) {\n   \
    \   counts[key] = 1;\n    } else {\n      counts[key] += 1;\n    }\n  }\n  return\
    \ Object.keys(counts).reduce((acc, key) => {\n    acc[key] = counts[key];\n  \
    \  return acc;\n  }, {});\n}\n", "  let result = {};\n  let count = 0;\n  for\
    \ (let i = 0; i < test.length; i++) {\n    let key = test[i];\n    if (result[key]\
    \ === undefined) {\n      result[key] = 1;\n    } else {\n      result[key] +=\
    \ 1;\n    }\n    count += 1;\n  }\n  if (count === 0) {\n    return {};\n  }\n\
    \  return result;\n}\n", "  const counts = {};\n  for (let i = 0; i < test.length;\
    \ i++) {\n    const key = test[i];\n    if (!counts[key]) {\n      counts[key]\
    \ = 0;\n    }\n    counts[key]++;\n  }\n  return Object.keys(counts).reduce((acc,\
    \ key) => {\n    acc[key] = counts[key];\n    return acc;\n  }, {});\n}\n", " \
    \ const result = {};\n  const letters = test.split(\" \");\n  for (let i = 0;\
    \ i < letters.length; i++) {\n    const letter = letters[i];\n    if (result[letter])\
    \ {\n      result[letter] += 1;\n    } else {\n      result[letter] = 1;\n   \
    \ }\n  }\n  return result;\n}\n", "  let count = {};\n  let max = 0;\n  for (let\
    \ i = 0; i < test.length; i++) {\n    let key = test[i];\n    if (!count[key])\
    \ {\n      count[key] = 1;\n    } else {\n      count[key]++;\n    }\n    if (count[key]\
    \ > max) {\n      max = count[key];\n    }\n  }\n  return count;\n}\n", "  const\
    \ counts = {};\n  for (let i = 0; i < test.length; i++) {\n    const key = test[i];\n\
    \    if (!counts[key]) {\n      counts[key] = 1;\n    } else {\n      counts[key]\
    \ += 1;\n    }\n  }\n  return Object.keys(counts).reduce((acc, key) => {\n   \
    \ acc[key] = counts[key];\n    return acc;\n  }, {});\n}\n", "  const counts =\
    \ {};\n  test.split(\" \").forEach((letter) => {\n    counts[letter] = counts[letter]\
    \ || 0;\n    counts[letter]++;\n  });\n  return Object.keys(counts).reduce((acc,\
    \ key) => {\n    acc[key] = counts[key];\n    return acc;\n  }, {});\n}\n", " \
    \ let result = {};\n  let count = 0;\n  for (let i = 0; i < test.length; i++)\
    \ {\n    let key = test[i];\n    if (result[key] === undefined) {\n      result[key]\
    \ = 1;\n    } else {\n      result[key] += 1;\n    }\n    count += 1;\n  }\n \
    \ for (let key in result) {\n    if (result[key] === count) {\n      return {[key]:\
    \ count};\n    }\n  }\n  return result;\n}\n", "  const counts = {};\n  for (let\
    \ i = 0; i < test.length; i++) {\n    const key = test[i];\n    if (counts[key]\
    \ === undefined) {\n      counts[key] = 1;\n    } else {\n      counts[key] +=\
    \ 1;\n    }\n  }\n  return Object.keys(counts).reduce((acc, key) => {\n    acc[key]\
    \ = counts[key];\n    return acc;\n  }, {});\n}\n", "  let count = {};\n  let\
    \ max = 0;\n  for (let i = 0; i < test.length; i++) {\n    let key = test[i];\n\
    \    if (!count[key]) {\n      count[key] = 1;\n    } else {\n      count[key]\
    \ += 1;\n    }\n    if (count[key] > max) {\n      max = count[key];\n    }\n\
    \  }\n  return count;\n}\n", "  const result = {};\n  let current = 0;\n  for\
    \ (let i = 0; i < test.length; i++) {\n    if (result[test[i]] === undefined)\
    \ {\n      result[test[i]] = 0;\n    }\n    result[test[i]] += 1;\n    current\
    \ += 1;\n    if (current === test.length) {\n      break;\n    }\n  }\n  return\
    \ result;\n}\n", "  const result = {};\n  for (let i = 0; i < test.length; i++)\
    \ {\n    const key = test[i];\n    if (!result[key]) {\n      result[key] = 1;\n\
    \    } else {\n      result[key] += 1;\n    }\n  }\n  return result;\n}\n", " \
    \ const counts = {};\n  for (let i = 0; i < test.length; i++) {\n    const key\
    \ = test[i];\n    if (counts[key] === undefined) {\n      counts[key] = 1;\n \
    \   } else {\n      counts[key] += 1;\n    }\n  }\n  return Object.keys(counts).reduce((acc,\
    \ key) => {\n    acc[key] = counts[key];\n    return acc;\n  }, {});\n}\n", " \
    \ let result = {};\n  let count = 0;\n  for (let i = 0; i < test.length; i++)\
    \ {\n    let key = test[i];\n    if (result[key] === undefined) {\n      result[key]\
    \ = 1;\n    } else {\n      result[key] += 1;\n    }\n    count += 1;\n  }\n \
    \ if (count === 0) {\n    return {};\n  }\n  for (let key in result) {\n    if\
    \ (result[key] > count / 2) {\n      count = result[key];\n    }\n  }\n  for (let\
    \ key in result) {\n    if (result[key] === count) {\n      result[key] = key;\n\
    \    }\n  }\n  return result;\n}\n", "  const counts = {};\n  let maxCount = 0;\n\
    \  for (let i = 0; i < test.length; i++) {\n    const key = test[i];\n    if (!counts[key])\
    \ {\n      counts[key] = 1;\n    } else {\n      counts[key] += 1;\n    }\n  \
    \  if (counts[key] > maxCount) {\n      maxCount = counts[key];\n    }\n  }\n\
    \  return counts;\n}\n", "  const counts = {};\n  for (let i = 0; i < test.length;\
    \ i++) {\n    const key = test[i];\n    if (counts[key]) {\n      counts[key]++;\n\
    \    } else {\n      counts[key] = 1;\n    }\n  }\n  return Object.keys(counts).reduce((acc,\
    \ key) => {\n    acc[key] = counts[key];\n    return acc;\n  }, {});\n}\n", " \
    \ const counts = {};\n  for (let i = 0; i < test.length; i++) {\n    const key\
    \ = test[i];\n    if (!counts[key]) {\n      counts[key] = 1;\n    } else {\n\
    \      counts[key] += 1;\n    }\n  }\n  return counts;\n}\n", "  let result =\
    \ {};\n  let current = 0;\n  for (let i = 0; i < test.length; i++) {\n    if (result[test[i]]\
    \ === undefined) {\n      result[test[i]] = 1;\n    } else {\n      result[test[i]]\
    \ += 1;\n    }\n    if (result[test[i]] > current) {\n      current = result[test[i]];\n\
    \    }\n  }\n  return result;\n}\n", "  let count = {};\n  let max = 0;\n  for\
    \ (let i = 0; i < test.length; i++) {\n    let key = test[i];\n    if (!count[key])\
    \ {\n      count[key] = 1;\n    } else {\n      count[key] += 1;\n    }\n    if\
    \ (count[key] > max) {\n      max = count[key];\n    }\n  }\n  return count;\n\
    }\n", "  const counts = {};\n  for (let i = 0; i < test.length; i++) {\n    const\
    \ key = test[i];\n    if (!counts[key]) {\n      counts[key] = 1;\n    } else\
    \ {\n      counts[key] += 1;\n    }\n  }\n  return Object.keys(counts).reduce((acc,\
    \ key) => {\n    acc[key] = counts[key];\n    return acc;\n  }, {});\n}\n", " \
    \ const result = {};\n  for (let i = 0; i < test.length; i++) {\n    const key\
    \ = test[i];\n    if (result[key] === undefined) {\n      result[key] = 1;\n \
    \   } else {\n      result[key] += 1;\n    }\n  }\n  return result;\n}\n", " \
    \ let result = {};\n  let count = 0;\n  for (let i = 0; i < test.length; i++)\
    \ {\n    let key = test[i];\n    if (!result[key]) {\n      result[key] = 1;\n\
    \    } else {\n      result[key] += 1;\n    }\n    count += 1;\n  }\n  return\
    \ count === 0 ? result : Object.keys(result).sort((a, b) => result[a] - result[b])\n\
    }\n", "  let result = {};\n  let count = 0;\n  for (let i = 0; i < test.length;\
    \ i++) {\n    let key = test[i];\n    if (result[key] === undefined) {\n     \
    \ result[key] = 1;\n    } else {\n      result[key] += 1;\n    }\n    count +=\
    \ 1;\n  }\n  for (let key in result) {\n    if (result[key] === count) {\n   \
    \   return {[key]: count};\n    }\n  }\n  return result;\n}\n", "  const counts\
    \ = {};\n  for (let i = 0; i < test.length; i++) {\n    const key = test[i];\n\
    \    if (!counts[key]) {\n      counts[key] = 1;\n    } else {\n      counts[key]\
    \ += 1;\n    }\n  }\n  return counts;\n}\n", "  const result = {};\n  let count\
    \ = 0;\n  for (let i = 0; i < test.length; i++) {\n    const key = test[i];\n\
    \    if (!result[key]) {\n      result[key] = 1;\n    } else {\n      result[key]\
    \ += 1;\n    }\n    count += 1;\n  }\n  return count === 0 ? result : Object.keys(result).sort((a,\
    \ b) => result[b] - result[a])\n}\n", "  const result = {};\n  let count = 0;\n\
    \  for (let i = 0; i < test.length; i++) {\n    const key = test[i];\n    if (result[key]\
    \ === undefined) {\n      result[key] = 1;\n    } else {\n      result[key] +=\
    \ 1;\n    }\n    count += 1;\n  }\n  return count === 0 ? result : Object.keys(result).sort((a,\
    \ b) => result[b] - result[a])\n}\n", "  let result = {};\n  let count = 0;\n\
    \  for (let i = 0; i < test.length; i++) {\n    let key = test[i];\n    if (!result[key])\
    \ {\n      result[key] = 1;\n    } else {\n      result[key] += 1;\n    }\n  \
    \  count += 1;\n  }\n  return count === 0 ? result : Object.keys(result).sort((a,\
    \ b) => result[b] - result[a])\n}\n", "  let result = {};\n  let count = 0;\n\
    \  for (let i = 0; i < test.length; i++) {\n    let key = test[i];\n    if (!result[key])\
    \ {\n      result[key] = 1;\n      count++;\n    } else {\n      result[key]++;\n\
    \    }\n  }\n  return count === 0 ? {} : result;\n}\n", "  let counts = {};\n\
    \  for (let i = 0; i < test.length; i++) {\n    let key = test[i];\n    if (!counts[key])\
    \ {\n      counts[key] = 0;\n    }\n    counts[key]++;\n  }\n  return Object.keys(counts).reduce((acc,\
    \ key) => {\n    acc[key] = counts[key];\n    return acc;\n  }, {});\n}\n", " \
    \ let result = {};\n  let count = 0;\n  for (let i = 0; i < test.length; i++)\
    \ {\n    let key = test[i];\n    if (!result[key]) {\n      result[key] = 1;\n\
    \    } else {\n      result[key] += 1;\n    }\n    count += 1;\n  }\n  for (let\
    \ key in result) {\n    if (result[key] > count) {\n      count = result[key];\n\
    \    }\n  }\n  return result;\n}\n", "  const histogram = {};\n  for (let i =\
    \ 0; i < test.length; i++) {\n    const key = test[i];\n    if (!histogram[key])\
    \ {\n      histogram[key] = 1;\n    } else {\n      histogram[key] += 1;\n   \
    \ }\n  }\n  return histogram;\n}\n", "  const counts = {};\n  for (let i = 0;\
    \ i < test.length; i++) {\n    const key = test[i];\n    if (counts[key] === undefined)\
    \ {\n      counts[key] = 1;\n    } else {\n      counts[key] += 1;\n    }\n  }\n\
    \  return Object.keys(counts).reduce((acc, key) => {\n    acc[key] = counts[key];\n\
    \    return acc;\n  }, {});\n}\n", "  let result = {};\n  for (let i = 0; i <\
    \ test.length; i++) {\n    let key = test[i];\n    if (!result[key]) {\n     \
    \ result[key] = 1;\n    } else {\n      result[key] += 1;\n    }\n  }\n  return\
    \ result;\n}\n", "  let count = {};\n  let max = 0;\n  for (let i = 0; i < test.length;\
    \ i++) {\n    let key = test[i];\n    if (!count[key]) {\n      count[key] = 1;\n\
    \    } else {\n      count[key] += 1;\n    }\n    if (count[key] > max) {\n  \
    \    max = count[key];\n    }\n  }\n  return count;\n}\n", "  let result = {};\n\
    \  let count = 0;\n  for (let i = 0; i < test.length; i++) {\n    let key = test[i];\n\
    \    if (!result[key]) {\n      result[key] = 1;\n      count++;\n    } else {\n\
    \      result[key]++;\n    }\n  }\n  return count === 0 ? result : Object.keys(result).sort((a,\
    \ b) => result[b] - result[a])\n}\n", "  let count = {};\n  let max = 0;\n  for\
    \ (let i = 0; i < test.length; i++) {\n    let key = test[i];\n    if (count[key]\
    \ === undefined) {\n      count[key] = 1;\n    } else {\n      count[key] += 1;\n\
    \    }\n    if (count[key] > max) {\n      max = count[key];\n    }\n  }\n  return\
    \ count;\n}\n", "  const counts = {};\n  for (let i = 0; i < test.length; i++)\
    \ {\n    const key = test[i];\n    if (!counts[key]) {\n      counts[key] = 1;\n\
    \    } else {\n      counts[key] += 1;\n    }\n  }\n  return counts;\n}\n", " \
    \ const counts = {};\n  for (let i = 0; i < test.length; i++) {\n    const key\
    \ = test[i];\n    if (counts[key] === undefined) {\n      counts[key] = 1;\n \
    \   } else {\n      counts[key] += 1;\n    }\n  }\n  return Object.keys(counts).reduce((acc,\
    \ key) => {\n    acc[key] = counts[key];\n    return acc;\n  }, {});\n}\n", " \
    \ let result = {};\n  let count = 0;\n  for (let i = 0; i < test.length; i++)\
    \ {\n    let key = test[i];\n    if (!result[key]) {\n      result[key] = 1;\n\
    \    } else {\n      result[key] += 1;\n    }\n    count += 1;\n  }\n  return\
    \ count === 0 ? result : Object.keys(result).sort((a, b) => result[a] - result[b])[0];\n\
    }\n", "  let result = {};\n  let count = 0;\n  for (let i = 0; i < test.length;\
    \ i++) {\n    let key = test[i];\n    if (result[key] === undefined) {\n     \
    \ result[key] = 1;\n    } else {\n      result[key] += 1;\n    }\n    count +=\
    \ 1;\n  }\n  if (count === 0) {\n    return {};\n  }\n  return result;\n}\n",
  "  const counts = {};\n  for (let i = 0; i < test.length; i++) {\n    const key\
    \ = test[i];\n    if (!counts[key]) {\n      counts[key] = 1;\n    } else {\n\
    \      counts[key] += 1;\n    }\n  }\n  return Object.keys(counts).reduce((acc,\
    \ key) => {\n    acc[key] = counts[key];\n    return acc;\n  }, {});\n}\n", " \
    \ let result = {};\n  let count = 0;\n  for (let i = 0; i < test.length; i++)\
    \ {\n    let key = test[i];\n    if (result[key] === undefined) {\n      result[key]\
    \ = 1;\n    } else {\n      result[key] += 1;\n    }\n    count += 1;\n  }\n \
    \ if (count === 0) {\n    return {};\n  }\n  for (let key in result) {\n    if\
    \ (result[key] > count) {\n      count = result[key];\n    }\n  }\n  return result;\n\
    }\n", "  let result = {};\n  let count = 0;\n  for (let i = 0; i < test.length;\
    \ i++) {\n    let key = test[i];\n    if (!result[key]) {\n      result[key] =\
    \ 1;\n    } else {\n      result[key] += 1;\n    }\n    count += 1;\n  }\n  return\
    \ result;\n}\n", "  const result = {};\n  const letters = test.split(/\\s+/);\n\
    \  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n\
    \    if (result[letter]) {\n      result[letter] += 1;\n    } else {\n      result[letter]\
    \ = 1;\n    }\n  }\n  return result;\n}\n", "  let result = {};\n  let count =\
    \ 0;\n  for (let i = 0; i < test.length; i++) {\n    let key = test[i];\n    if\
    \ (result[key] === undefined) {\n      result[key] = 1;\n    } else {\n      result[key]\
    \ += 1;\n    }\n    count += 1;\n  }\n  if (count === 0) {\n    return {};\n \
    \ }\n  for (let key in result) {\n    if (result[key] > count) {\n      count\
    \ = result[key];\n    }\n  }\n  for (let key in result) {\n    if (result[key]\
    \ === count) {\n      result[key] = key;\n    }\n  }\n  return result;\n}\n",
  "  let result = {};\n  let count = 0;\n  for (let i = 0; i < test.length; i++) {\n\
    \    let key = test[i];\n    if (!result[key]) {\n      result[key] = 1;\n   \
    \ } else {\n      result[key] += 1;\n    }\n    count += 1;\n  }\n  return result;\n\
    }\n", "  const counts = {};\n  for (let i = 0; i < test.length; i++) {\n    const\
    \ key = test[i];\n    if (counts[key] === undefined) {\n      counts[key] = 1;\n\
    \    } else {\n      counts[key] += 1;\n    }\n  }\n  return Object.keys(counts).reduce((acc,\
    \ key) => {\n    acc[key] = counts[key];\n    return acc;\n  }, {});\n}\n", " \
    \ const counts = {};\n  for (let i = 0; i < test.length; i++) {\n    const key\
    \ = test[i];\n    if (!counts[key]) {\n      counts[key] = 1;\n    } else {\n\
    \      counts[key] += 1;\n    }\n  }\n  return counts;\n}\n", "  const counts\
    \ = {};\n  for (let i = 0; i < test.length; i++) {\n    const key = test[i];\n\
    \    if (!counts[key]) {\n      counts[key] = 1;\n    } else {\n      counts[key]\
    \ += 1;\n    }\n  }\n  return Object.keys(counts).reduce((acc, key) => {\n   \
    \ acc[key] = counts[key];\n    return acc;\n  }, {});\n}\n", "  const counts =\
    \ {};\n  for (let i = 0; i < test.length; i++) {\n    const key = test[i];\n \
    \   if (counts[key]) {\n      counts[key]++;\n    } else {\n      counts[key]\
    \ = 1;\n    }\n  }\n  return Object.keys(counts).reduce((acc, key) => {\n    acc[key]\
    \ = counts[key];\n    return acc;\n  }, {});\n}\n", "  let counts = {};\n  for\
    \ (let i = 0; i < test.length; i++) {\n    let key = test[i];\n    if (counts[key]\
    \ === undefined) {\n      counts[key] = 1;\n    } else {\n      counts[key] +=\
    \ 1;\n    }\n  }\n  return Object.keys(counts).reduce((acc, key) => {\n    acc[key]\
    \ = counts[key];\n    return acc;\n  }, {});\n}\n", "  let result = {};\n  let\
    \ count = 0;\n  for (let i = 0; i < test.length; i++) {\n    let key = test[i];\n\
    \    if (!result[key]) {\n      result[key] = 1;\n    } else {\n      result[key]\
    \ += 1;\n    }\n    count += 1;\n  }\n  return Object.keys(result).sort((a, b)\
    \ => result[a] - result[b])\n    .reduce((acc, key) => {\n      acc[key] = result[key];\n\
    \      return acc;\n    }, {});\n}\n", "  const result = {};\n  const letters\
    \ = test.split(\" \");\n  for (let i = 0; i < letters.length; i++) {\n    const\
    \ letter = letters[i];\n    if (letter in result) {\n      result[letter] += 1;\n\
    \    } else {\n      result[letter] = 1;\n    }\n  }\n  return result;\n}\n",
  "  let result = {};\n  let count = 0;\n  for (let i = 0; i < test.length; i++) {\n\
    \    let key = test[i];\n    if (!result[key]) {\n      result[key] = 1;\n   \
    \ } else {\n      result[key] += 1;\n    }\n    count += 1;\n  }\n  return count\
    \ === 0 ? result : Object.keys(result).sort((a, b) => result[b] - result[a])[0];\n\
    }\n", "  let result = {};\n  let count = 0;\n  for (let i = 0; i < test.length;\
    \ i++) {\n    let key = test[i];\n    if (!result[key]) {\n      result[key] =\
    \ 1;\n    } else {\n      result[key] += 1;\n    }\n    count += 1;\n  }\n  if\
    \ (count === 0) {\n    return result;\n  }\n  let max = 0;\n  let maxKey = \"\"\
    ;\n  for (let key in result) {\n    if (result[key] > max) {\n      max = result[key];\n\
    \      maxKey = key;\n    }\n  }\n  return result[maxKey];\n}\n", "  let result\
    \ = {};\n  let count = 0;\n  for (let i = 0; i < test.length; i++) {\n    let\
    \ key = test[i];\n    if (!result[key]) {\n      result[key] = 1;\n    } else\
    \ {\n      result[key] += 1;\n    }\n    count += 1;\n  }\n  if (count === 0)\
    \ {\n    return {};\n  }\n  for (let key in result) {\n    result[key] /= count;\n\
    \  }\n  return result;\n}\n", "  const result = {};\n  let count = 0;\n  for (let\
    \ i = 0; i < test.length; i++) {\n    const key = test[i];\n    if (result[key]\
    \ === undefined) {\n      result[key] = 1;\n    } else {\n      result[key] +=\
    \ 1;\n    }\n    count += 1;\n  }\n  return count === 0 ? result : Object.keys(result).sort((a,\
    \ b) => result[b] - result[a])\n}\n", "  let counts = {};\n  let maxCount = 0;\n\
    \  for (let i = 0; i < test.length; i++) {\n    let key = test[i];\n    if (!counts[key])\
    \ {\n      counts[key] = 1;\n    } else {\n      counts[key] += 1;\n    }\n  \
    \  if (counts[key] > maxCount) {\n      maxCount = counts[key];\n    }\n  }\n\
    \  return counts;\n}\n", "  const result = {};\n  for (let i = 0; i < test.length;\
    \ i++) {\n    const key = test[i];\n    if (!result[key]) {\n      result[key]\
    \ = 1;\n    } else {\n      result[key] += 1;\n    }\n  }\n  return result;\n\
    }\n", "  const result = {};\n  for (let i = 0; i < test.length; i++) {\n    const\
    \ key = test[i];\n    if (!result[key]) {\n      result[key] = 1;\n    } else\
    \ {\n      result[key] += 1;\n    }\n  }\n  return result;\n}\n", "  const letters\
    \ = test.split(\" \")\n  const histogram = {}\n  for (let i = 0; i < letters.length;\
    \ i++) {\n    const letter = letters[i]\n    if (histogram[letter]) {\n      histogram[letter]++\n\
    \    } else {\n      histogram[letter] = 1\n    }\n  }\n  return histogram\n}\n",
  "  let result = {};\n  let count = 0;\n  for (let i = 0; i < test.length; i++) {\n\
    \    let key = test[i];\n    if (result[key] === undefined) {\n      result[key]\
    \ = 1;\n    } else {\n      result[key] += 1;\n    }\n    count += 1;\n  }\n \
    \ if (count === 0) {\n    return {};\n  }\n  return result;\n}\n", "  let result\
    \ = {};\n  let count = 0;\n  for (let i = 0; i < test.length; i++) {\n    let\
    \ key = test[i];\n    if (!result[key]) {\n      result[key] = 1;\n    } else\
    \ {\n      result[key] += 1;\n    }\n    count += 1;\n  }\n  for (let key in result)\
    \ {\n    if (result[key] > count) {\n      count = result[key];\n    }\n  }\n\
    \  return result;\n}\n", "  let result = {};\n  let count = 0;\n  for (let i =\
    \ 0; i < test.length; i++) {\n    let key = test[i];\n    if (!result[key]) {\n\
    \      result[key] = 1;\n    } else {\n      result[key] += 1;\n    }\n    count\
    \ += 1;\n  }\n  return count === 0 ? result : Object.keys(result).sort((a, b)\
    \ => result[a] - result[b])\n}\n", "  let result = {};\n  let count = 0;\n  for\
    \ (let i = 0; i < test.length; i++) {\n    let key = test[i];\n    if (!result[key])\
    \ {\n      result[key] = 1;\n    } else {\n      result[key] += 1;\n    }\n  \
    \  count += 1;\n  }\n  return Object.keys(result).sort((a, b) => result[a] - result[b])\n\
    \    .reduce((acc, key) => {\n      acc[key] = result[key];\n      return acc;\n\
    \    }, {});\n}\n", "  let result = {};\n  let count = 0;\n  for (let i = 0; i\
    \ < test.length; i++) {\n    let key = test[i];\n    if (!result[key]) {\n   \
    \   result[key] = 1;\n    } else {\n      result[key] += 1;\n    }\n    count\
    \ += 1;\n  }\n  if (count === 0) {\n    return result;\n  }\n  let max = 0;\n\
    \  let maxKey = \"\";\n  for (let key in result) {\n    if (result[key] > max)\
    \ {\n      max = result[key];\n      maxKey = key;\n    }\n  }\n  result[maxKey]\
    \ = count;\n  return result;\n}\n", "  const histogram = {};\n  const letters\
    \ = test.split(\" \");\n  for (let i = 0; i < letters.length; i++) {\n    const\
    \ letter = letters[i];\n    if (letter in histogram) {\n      histogram[letter]\
    \ += 1;\n    } else {\n      histogram[letter] = 1;\n    }\n  }\n  return histogram;\n\
    }\n", "  let result = {};\n  let count = 0;\n  for (let i = 0; i < test.length;\
    \ i++) {\n    let key = test[i];\n    if (!result[key]) {\n      result[key] =\
    \ 1;\n    } else {\n      result[key] += 1;\n    }\n    count += 1;\n  }\n  return\
    \ Object.keys(result).sort((a, b) => result[b] - result[a])\n    .reduce((acc,\
    \ key) => {\n      acc[key] = result[key];\n      return acc;\n    }, {});\n}\n",
  "  let result = {};\n  let count = 0;\n  for (let i = 0; i < test.length; i++) {\n\
    \    let key = test[i];\n    if (!result[key]) {\n      result[key] = 1;\n   \
    \ } else {\n      result[key] += 1;\n    }\n    count += 1;\n  }\n  return result;\n\
    }\n", "  const counts = {};\n  for (let i = 0; i < test.length; i++) {\n    const\
    \ key = test[i];\n    if (counts[key] === undefined) {\n      counts[key] = 1;\n\
    \    } else {\n      counts[key] += 1;\n    }\n  }\n  return counts;\n}\n", " \
    \ let result = {};\n  let count = 0;\n  for (let i = 0; i < test.length; i++)\
    \ {\n    let key = test[i];\n    if (!result[key]) {\n      result[key] = 1;\n\
    \    } else {\n      result[key]++;\n    }\n    count++;\n  }\n  return result;\n\
    }\n", "  let count = {};\n  let max = 0;\n  for (let i = 0; i < test.length; i++)\
    \ {\n    let key = test[i];\n    if (!count[key]) {\n      count[key] = 1;\n \
    \   } else {\n      count[key] += 1;\n    }\n    if (count[key] > max) {\n   \
    \   max = count[key];\n    }\n  }\n  return count;\n}\n", "  let result = {};\n\
    \  let count = 0;\n  for (let i = 0; i < test.length; i++) {\n    let key = test[i];\n\
    \    if (result[key] === undefined) {\n      result[key] = 1;\n    } else {\n\
    \      result[key] += 1;\n    }\n    count += 1;\n  }\n  return result;\n}\n",
  "  let result = {};\n  let count = 0;\n  for (let i = 0; i < test.length; i++) {\n\
    \    let key = test[i];\n    if (!result[key]) {\n      result[key] = 1;\n   \
    \ } else {\n      result[key]++;\n    }\n    count++;\n  }\n  if (count === 0)\
    \ {\n    return result;\n  }\n  let max = 0;\n  let maxKey = \"\";\n  for (let\
    \ key in result) {\n    if (result[key] > max) {\n      max = result[key];\n \
    \     maxKey = key;\n    }\n  }\n  return result[maxKey];\n}\n", "  let result\
    \ = {};\n  let count = 0;\n  for (let i = 0; i < test.length; i++) {\n    let\
    \ key = test[i];\n    if (!result[key]) {\n      result[key] = 1;\n    } else\
    \ {\n      result[key] += 1;\n    }\n    count += 1;\n  }\n  return count ===\
    \ 0 ? result : Object.keys(result).sort((a, b) => result[b] - result[a])\n}\n",
  "  let result = {};\n  let count = 0;\n  for (let i = 0; i < test.length; i++) {\n\
    \    let key = test[i];\n    if (result[key] === undefined) {\n      result[key]\
    \ = 1;\n    } else {\n      result[key] += 1;\n    }\n    count += 1;\n  }\n \
    \ return count === 0 ? result : Object.keys(result).sort((a, b) => result[a] -\
    \ result[b])[0];\n}\n", "  let count = {};\n  let max = 0;\n  for (let i = 0;\
    \ i < test.length; i++) {\n    let key = test[i];\n    if (count[key] === undefined)\
    \ {\n      count[key] = 1;\n    } else {\n      count[key] += 1;\n    }\n    if\
    \ (count[key] > max) {\n      max = count[key];\n    }\n  }\n  return count;\n\
    }\n", "  const counts = {};\n  for (let i = 0; i < test.length; i++) {\n    const\
    \ key = test[i];\n    if (counts[key]) {\n      counts[key]++;\n    } else {\n\
    \      counts[key] = 1;\n    }\n  }\n  return counts;\n}\n", "  const result =\
    \ {};\n  let max = 0;\n  for (let i = 0; i < test.length; i++) {\n    const key\
    \ = test[i];\n    if (result[key] === undefined) {\n      result[key] = 1;\n \
    \   } else {\n      result[key] += 1;\n    }\n    if (result[key] > max) {\n \
    \     max = result[key];\n    }\n  }\n  return result;\n}\n", "  let result =\
    \ {};\n  let count = 0;\n  for (let i = 0; i < test.length; i++) {\n    let key\
    \ = test[i];\n    if (result[key] === undefined) {\n      result[key] = 1;\n \
    \   } else {\n      result[key] += 1;\n    }\n    count += 1;\n  }\n  for (let\
    \ key in result) {\n    if (result[key] > count) {\n      count = result[key];\n\
    \    }\n  }\n  return result;\n}\n", "  let result = {};\n  let count = 0;\n \
    \ for (let i = 0; i < test.length; i++) {\n    let key = test[i];\n    if (!result[key])\
    \ {\n      result[key] = 1;\n    } else {\n      result[key] += 1;\n    }\n  \
    \  count += 1;\n  }\n  for (let key in result) {\n    if (result[key] === count)\
    \ {\n      return {[key]: count};\n    }\n  }\n  return result;\n}\n", "  let\
    \ result = {};\n  let count = 0;\n  for (let i = 0; i < test.length; i++) {\n\
    \    let key = test[i];\n    if (!result[key]) {\n      result[key] = 1;\n   \
    \ } else {\n      result[key] += 1;\n    }\n    count += 1;\n  }\n  return count\
    \ === 0 ? result : Object.keys(result).sort((a, b) => result[b] - result[a])\n\
    }\n", "  const counts = {};\n  for (let i = 0; i < test.length; i++) {\n    const\
    \ key = test[i];\n    if (counts[key] === undefined) {\n      counts[key] = 1;\n\
    \    } else {\n      counts[key] += 1;\n    }\n  }\n  return Object.keys(counts).reduce((acc,\
    \ key) => {\n    acc[key] = counts[key];\n    return acc;\n  }, {});\n}\n", " \
    \ const counts = {};\n  let max = 0;\n  for (let i = 0; i < test.length; i++)\
    \ {\n    const key = test[i];\n    if (!counts[key]) {\n      counts[key] = 1;\n\
    \    } else {\n      counts[key] += 1;\n    }\n    if (counts[key] > max) {\n\
    \      max = counts[key];\n    }\n  }\n  return counts;\n}\n", "  let result =\
    \ {};\n  let count = 0;\n  for (let i = 0; i < test.length; i++) {\n    let key\
    \ = test[i];\n    if (result[key] === undefined) {\n      result[key] = 1;\n \
    \   } else {\n      result[key] += 1;\n    }\n    count += 1;\n  }\n  if (count\
    \ === 0) {\n    return {};\n  }\n  for (let key in result) {\n    result[key]\
    \ /= count;\n  }\n  return result;\n}\n", "  let result = {};\n  let count = 0;\n\
    \  for (let i = 0; i < test.length; i++) {\n    let key = test[i];\n    if (!result[key])\
    \ {\n      result[key] = 1;\n      count++;\n    } else {\n      result[key]++;\n\
    \    }\n  }\n  return count === 0 ? result : Object.keys(result).sort((a, b) =>\
    \ result[b] - result[a])\n}\n", "  let result = {};\n  let max = 0;\n  for (let\
    \ i = 0; i < test.length; i++) {\n    let count = result[test[i]] || 0;\n    result[test[i]]\
    \ = ++count;\n    if (count > max) {\n      max = count;\n    }\n  }\n  for (let\
    \ i = 0; i < test.length; i++) {\n    let count = result[test[i]] || 0;\n    if\
    \ (count === max) {\n      result[test[i]] = ++count;\n    }\n  }\n  return result;\n\
    }\n", "  let count = {};\n  let maxCount = 0;\n  let maxKey = null;\n  for (let\
    \ key of test.split(\" \")) {\n    if (count[key] === undefined) {\n      count[key]\
    \ = 1;\n    } else {\n      count[key] += 1;\n    }\n    if (count[key] > maxCount)\
    \ {\n      maxCount = count[key];\n      maxKey = key;\n    }\n  }\n  return maxKey\
    \ === null ? {} : count;\n}\n", "  let result = {};\n  let count = 0;\n  for (let\
    \ i = 0; i < test.length; i++) {\n    let key = test[i];\n    if (result[key]\
    \ === undefined) {\n      result[key] = 1;\n    } else {\n      result[key] +=\
    \ 1;\n    }\n    count += 1;\n  }\n  if (count === 0) {\n    return {};\n  }\n\
    \  for (let key in result) {\n    if (result[key] > count / 2) {\n      count\
    \ = result[key];\n    }\n  }\n  for (let key in result) {\n    if (result[key]\
    \ === count) {\n      result[key] = key;\n    }\n  }\n  return result;\n}\n",
  "  const counts = {};\n  for (let i = 0; i < test.length; i++) {\n    const key\
    \ = test[i];\n    if (counts[key] === undefined) {\n      counts[key] = 1;\n \
    \   } else {\n      counts[key] += 1;\n    }\n  }\n  return Object.keys(counts).reduce((acc,\
    \ key) => {\n    acc[key] = counts[key];\n    return acc;\n  }, {});\n}\n", " \
    \ const counts = {};\n  for (let i = 0; i < test.length; i++) {\n    const key\
    \ = test[i];\n    if (!counts[key]) {\n      counts[key] = 0;\n    }\n    counts[key]++;\n\
    \  }\n  return Object.keys(counts).reduce((result, key) => {\n    if (counts[key]\
    \ > result[key]) {\n      result[key] = counts[key];\n    }\n    return result;\n\
    \  }, {});\n}\n", "  const counts = {};\n  for (let i = 0; i < test.length; i++)\
    \ {\n    const key = test[i];\n    if (!counts[key]) {\n      counts[key] = 1;\n\
    \    } else {\n      counts[key] += 1;\n    }\n  }\n  return Object.keys(counts).reduce((acc,\
    \ key) => {\n    acc[key] = counts[key];\n    return acc;\n  }, {});\n}\n", " \
    \ let result = {};\n  let count = 0;\n  for (let i = 0; i < test.length; i++)\
    \ {\n    let key = test[i];\n    if (!result[key]) {\n      result[key] = 1;\n\
    \    } else {\n      result[key] += 1;\n    }\n    count += 1;\n  }\n  return\
    \ count === 0 ? result : Object.keys(result).sort((a, b) => result[a] - result[b])[0];\n\
    }\n", "  let result = {};\n  let count = 0;\n  for (let i = 0; i < test.length;\
    \ i++) {\n    let key = test[i];\n    if (result[key] === undefined) {\n     \
    \ result[key] = 1;\n    } else {\n      result[key] += 1;\n    }\n    count +=\
    \ 1;\n  }\n  return count === 0 ? result : Object.keys(result).sort((a, b) =>\
    \ result[b] - result[a])\n}\n", "  let result = {};\n  let current = 0;\n  for\
    \ (let i = 0; i < test.length; i++) {\n    let key = test[i];\n    if (!result[key])\
    \ {\n      result[key] = 1;\n    } else {\n      result[key] += 1;\n    }\n  \
    \  if (result[key] > current) {\n      current = result[key];\n    }\n  }\n  return\
    \ result;\n}\n", "  let result = {};\n  let count = 0;\n  for (let i = 0; i <\
    \ test.length; i++) {\n    let key = test[i];\n    if (result[key] === undefined)\
    \ {\n      result[key] = 1;\n    } else {\n      result[key] += 1;\n    }\n  \
    \  count += 1;\n  }\n  return count === 0 ? result : Object.keys(result).sort((a,\
    \ b) => result[a] - result[b])[0];\n}\n", "  const counts = {};\n  for (let i\
    \ = 0; i < test.length; i++) {\n    const key = test[i];\n    if (!counts[key])\
    \ {\n      counts[key] = 1;\n    } else {\n      counts[key] += 1;\n    }\n  }\n\
    \  return counts;\n}\n", "  let result = {};\n  let count = 0;\n  for (let i =\
    \ 0; i < test.length; i++) {\n    let key = test[i];\n    if (result[key] ===\
    \ undefined) {\n      result[key] = 1;\n    } else {\n      result[key] += 1;\n\
    \    }\n    count += 1;\n  }\n  if (count === 0) {\n    return {};\n  }\n  return\
    \ result;\n}\n", "  const counts = {};\n  for (let i = 0; i < test.length; i++)\
    \ {\n    const key = test[i];\n    if (counts[key] === undefined) {\n      counts[key]\
    \ = 1;\n    } else {\n      counts[key] += 1;\n    }\n  }\n  return counts;\n\
    }\n", "  const histogram = {};\n  for (let i = 0; i < test.length; i++) {\n  \
    \  const key = test[i];\n    if (!histogram[key]) {\n      histogram[key] = 1;\n\
    \    } else {\n      histogram[key] += 1;\n    }\n  }\n  return histogram;\n}\n",
  "  let result = {};\n  let count = 0;\n  for (let i = 0; i < test.length; i++) {\n\
    \    let key = test[i];\n    if (!result[key]) {\n      result[key] = 1;\n   \
    \ } else {\n      result[key] += 1;\n    }\n    count += 1;\n  }\n  return Object.keys(result).sort((a,\
    \ b) => result[b] - result[a])\n    .reduce((acc, key) => {\n      acc[key] =\
    \ result[key];\n      return acc;\n    }, {});\n}\n", "  let result = {};\n  let\
    \ count = 0;\n  for (let i = 0; i < test.length; i++) {\n    let key = test[i];\n\
    \    if (!result[key]) {\n      result[key] = 1;\n    } else {\n      result[key]\
    \ += 1;\n    }\n    count += 1;\n  }\n  return count === 0 ? result : Object.keys(result).sort((a,\
    \ b) => result[b] - result[a])\n}\n", "  let result = {};\n  let max = 0;\n  for\
    \ (let i = 0; i < test.length; i++) {\n    let count = 0;\n    for (let j = i;\
    \ j < test.length; j++) {\n      if (test[i] === test[j]) {\n        count++;\n\
    \      }\n      if (count > max) {\n        max = count;\n        result = {};\n\
    \        result[test[i]] = count;\n      } else if (count === max) {\n       \
    \ result[test[i]] = count;\n      }\n    }\n  }\n  return result;\n}\n", "  let\
    \ result = {};\n  let count = 0;\n  for (let i = 0; i < test.length; i++) {\n\
    \    let key = test[i];\n    if (result[key] === undefined) {\n      result[key]\
    \ = 1;\n    } else {\n      result[key] += 1;\n    }\n    count += 1;\n  }\n \
    \ if (count === 0) {\n    return {};\n  }\n  for (let key in result) {\n    if\
    \ (result[key] > count) {\n      count = result[key];\n    }\n  }\n  return result;\n\
    }\n", "  let result = {};\n  let count = 0;\n  for (let i = 0; i < test.length;\
    \ i++) {\n    let key = test[i];\n    if (result[key] === undefined) {\n     \
    \ result[key] = 1;\n    } else {\n      result[key] += 1;\n    }\n    count +=\
    \ 1;\n  }\n  if (count === 0) {\n    return {};\n  }\n  for (let key in result)\
    \ {\n    if (result[key] > count) {\n      count = result[key];\n    }\n  }\n\
    \  for (let key in result) {\n    if (result[key] === count) {\n      result[key]\
    \ = key;\n    }\n  }\n  return result;\n}\n", "  let result = {};\n  let count\
    \ = 0;\n  for (let i = 0; i < test.length; i++) {\n    let key = test[i];\n  \
    \  if (!result[key]) {\n      result[key] = 1;\n      count++;\n    } else {\n\
    \      result[key]++;\n    }\n  }\n  return count === 0 ? result : Object.keys(result).sort((a,\
    \ b) => result[a] - result[b])[0];\n}\n", "  let count: number = 0;\n  let max:\
    \ string = \"\";\n  let result: {[key: string]: number} = {};\n  for (let i =\
    \ 0; i < test.length; i++) {\n    let key = test[i];\n    if (result[key] ===\
    \ undefined) {\n      result[key] = 1;\n    } else {\n      result[key] += 1;\n\
    \    }\n    if (result[key] > count) {\n      count = result[key];\n      max\
    \ = key;\n    }\n  }\n  return result;\n}\n", "  let result = {};\n  let count\
    \ = 0;\n  for (let i = 0; i < test.length; i++) {\n    let key = test[i];\n  \
    \  if (result[key] === undefined) {\n      result[key] = 1;\n    } else {\n  \
    \    result[key] += 1;\n    }\n    count += 1;\n  }\n  return count === 0 ? result\
    \ : Object.keys(result).sort((a, b) => result[b] - result[a])\n}\n", "  let result\
    \ = {};\n  let count = 0;\n  for (let i = 0; i < test.length; i++) {\n    let\
    \ key = test[i];\n    if (!result[key]) {\n      result[key] = 1;\n    } else\
    \ {\n      result[key] += 1;\n    }\n    count += 1;\n  }\n  return count ===\
    \ 0 ? result : Object.keys(result).sort((a, b) => result[b] - result[a])\n}\n",
  "  const counts = {};\n  test.split(\" \").forEach(letter => {\n    if (counts[letter])\
    \ {\n      counts[letter] += 1;\n    } else {\n      counts[letter] = 1;\n   \
    \ }\n  });\n  return Object.keys(counts).reduce((acc, key) => {\n    acc[key]\
    \ = counts[key];\n    return acc;\n  }, {});\n}\n", "  let result = {};\n  let\
    \ count = 0;\n  for (let i = 0; i < test.length; i++) {\n    let key = test[i];\n\
    \    if (!result[key]) {\n      result[key] = 1;\n    } else {\n      result[key]\
    \ += 1;\n    }\n    count += 1;\n  }\n  return result;\n}\n", "  const counts\
    \ = {};\n  for (let i = 0; i < test.length; i++) {\n    const key = test[i];\n\
    \    if (counts[key]) {\n      counts[key] += 1;\n    } else {\n      counts[key]\
    \ = 1;\n    }\n  }\n  return counts;\n}\n", "  let result = {};\n  let count =\
    \ 0;\n  for (let i = 0; i < test.length; i++) {\n    let key = test[i];\n    if\
    \ (!result[key]) {\n      result[key] = 1;\n      count++;\n    } else {\n   \
    \   result[key]++;\n    }\n  }\n  return count === 0 ? result : Object.keys(result).sort((a,\
    \ b) => result[a] - result[b])\n}\n", "  let count = {};\n  let max = 0;\n  let\
    \ maxKey = null;\n  for (let i = 0; i < test.length; i++) {\n    let key = test[i];\n\
    \    if (count[key] === undefined) {\n      count[key] = 1;\n    } else {\n  \
    \    count[key] += 1;\n    }\n    if (count[key] > max) {\n      max = count[key];\n\
    \      maxKey = key;\n    }\n  }\n  return count;\n}\n", "  let result = {};\n\
    \  let count = 0;\n  for (let i = 0; i < test.length; i++) {\n    let key = test[i];\n\
    \    if (result[key] === undefined) {\n      result[key] = 1;\n    } else {\n\
    \      result[key] += 1;\n    }\n    count += 1;\n  }\n  for (let key in result)\
    \ {\n    if (result[key] > count) {\n      count = result[key];\n    }\n  }\n\
    \  return result;\n}\n", "  let count = {};\n  let maxCount = 0;\n  for (let i\
    \ = 0; i < test.length; i++) {\n    let key = test[i];\n    if (count[key] ===\
    \ undefined) {\n      count[key] = 1;\n    } else {\n      count[key] += 1;\n\
    \    }\n    if (count[key] > maxCount) {\n      maxCount = count[key];\n    }\n\
    \  }\n  return count;\n}\n", "  const counts = {};\n  for (let i = 0; i < test.length;\
    \ i++) {\n    const key = test[i];\n    if (!counts[key]) {\n      counts[key]\
    \ = 1;\n    } else {\n      counts[key] += 1;\n    }\n  }\n  return Object.keys(counts).reduce((acc,\
    \ key) => {\n    acc[key] = counts[key];\n    return acc;\n  }, {});\n}\n", " \
    \ const counts = {};\n  for (let i = 0; i < test.length; i++) {\n    const key\
    \ = test[i];\n    if (counts[key] === undefined) {\n      counts[key] = 1;\n \
    \   } else {\n      counts[key] += 1;\n    }\n  }\n  return counts;\n}\n", " \
    \ const letters = test.split(\" \")\n  const histogram = {}\n  for (let i = 0;\
    \ i < letters.length; i++) {\n    const letter = letters[i]\n    if (histogram[letter])\
    \ {\n      histogram[letter]++\n    } else {\n      histogram[letter] = 1\n  \
    \  }\n  }\n  return histogram\n}\n", "  let result = {};\n  let count = 0;\n \
    \ for (let i = 0; i < test.length; i++) {\n    let key = test[i];\n    if (!result[key])\
    \ {\n      result[key] = 1;\n    } else {\n      result[key] += 1;\n    }\n  \
    \  count += 1;\n  }\n  return count === 0 ? result : Object.keys(result).sort((a,\
    \ b) => result[b] - result[a])\n}\n", "  let result = {};\n  let count = 0;\n\
    \  for (let i = 0; i < test.length; i++) {\n    let key = test[i];\n    if (result[key]\
    \ === undefined) {\n      result[key] = 1;\n    } else {\n      result[key] +=\
    \ 1;\n    }\n    count += 1;\n  }\n  for (let key in result) {\n    if (result[key]\
    \ > count) {\n      count = result[key];\n    }\n  }\n  return result;\n}\n",
  "  const counts = {};\n  for (let i = 0; i < test.length; i++) {\n    const key\
    \ = test[i];\n    if (!counts[key]) {\n      counts[key] = 1;\n    } else {\n\
    \      counts[key] += 1;\n    }\n  }\n  return Object.keys(counts).reduce((acc,\
    \ key) => {\n    acc[key] = counts[key];\n    return acc;\n  }, {});\n}\n", " \
    \ let result = {};\n  let count = 0;\n  for (let i = 0; i < test.length; i++)\
    \ {\n    let key = test[i];\n    if (result[key] === undefined) {\n      result[key]\
    \ = 1;\n    } else {\n      result[key] += 1;\n    }\n    count += 1;\n  }\n \
    \ if (count === 0) {\n    return {};\n  }\n  for (let key in result) {\n    if\
    \ (result[key] > count) {\n      count = result[key];\n    }\n  }\n  return result;\n\
    }\n", "  let result = {};\n  let count = 0;\n  for (let i = 0; i < test.length;\
    \ i++) {\n    let key = test[i];\n    if (!result[key]) {\n      result[key] =\
    \ 1;\n    } else {\n      result[key] += 1;\n    }\n    count += 1;\n  }\n  return\
    \ Object.keys(result).sort((a, b) => result[b] - result[a])\n    .reduce((a, b)\
    \ => {\n      a[b] = result[b];\n      return a;\n    }, {});\n}\n", "  let result\
    \ = {};\n  let count = 0;\n  for (let i = 0; i < test.length; i++) {\n    let\
    \ key = test[i];\n    if (!result[key]) {\n      result[key] = 1;\n    } else\
    \ {\n      result[key] += 1;\n    }\n    count += 1;\n  }\n  for (let key in result)\
    \ {\n    if (result[key] > count) {\n      count = result[key];\n    }\n  }\n\
    \  return result;\n}\n", "  const counts = {};\n  let maxCount = 0;\n  for (let\
    \ i = 0; i < test.length; i++) {\n    const key = test[i];\n    if (!counts[key])\
    \ {\n      counts[key] = 1;\n    } else {\n      counts[key]++;\n    }\n    if\
    \ (counts[key] > maxCount) {\n      maxCount = counts[key];\n    }\n  }\n  return\
    \ Object.keys(counts).reduce((acc, key) => {\n    acc[key] = counts[key];\n  \
    \  return acc;\n  }, {});\n}\n", "  const result = {};\n  const letters = test.split(\"\
    \ \");\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n\
    \    if (!result[letter]) {\n      result[letter] = 1;\n    } else {\n      result[letter]\
    \ += 1;\n    }\n  }\n  return result;\n}\n", "  const counts = {};\n  for (let\
    \ i = 0; i < test.length; i++) {\n    const key = test[i];\n    if (!counts[key])\
    \ {\n      counts[key] = 1;\n    } else {\n      counts[key] += 1;\n    }\n  }\n\
    \  return Object.keys(counts).reduce((acc, key) => {\n    acc[key] = counts[key];\n\
    \    return acc;\n  }, {});\n}\n", "  let count = {};\n  for (let i = 0; i < test.length;\
    \ i++) {\n    let key = test[i];\n    if (!count[key]) {\n      count[key] = 1;\n\
    \    } else {\n      count[key] += 1;\n    }\n  }\n  return count;\n}\n", "  let\
    \ count = {};\n  let max = 0;\n  for (let i = 0; i < test.length; i++) {\n   \
    \ let key = test[i];\n    if (!count[key]) {\n      count[key] = 1;\n    } else\
    \ {\n      count[key] += 1;\n    }\n    if (count[key] > max) {\n      max = count[key];\n\
    \    }\n  }\n  return count;\n}\n", "  let count = {};\n  let max = 0;\n  for\
    \ (let i = 0; i < test.length; i++) {\n    let key = test[i];\n    if (!count[key])\
    \ {\n      count[key] = 1;\n    } else {\n      count[key]++;\n    }\n    if (count[key]\
    \ > max) {\n      max = count[key];\n    }\n  }\n  return count;\n}\n", "  let\
    \ result = {};\n  let count = 0;\n  for (let i = 0; i < test.length; i++) {\n\
    \    let key = test[i];\n    if (result[key] === undefined) {\n      result[key]\
    \ = 1;\n    } else {\n      result[key] += 1;\n    }\n    count += 1;\n  }\n \
    \ if (count === 0) {\n    return {};\n  }\n  return result;\n}\n", "  let result\
    \ = {};\n  let count = 0;\n  for (let i = 0; i < test.length; i++) {\n    let\
    \ key = test[i];\n    if (result[key] === undefined) {\n      result[key] = 1;\n\
    \    } else {\n      result[key] += 1;\n    }\n    count += 1;\n  }\n  if (count\
    \ === 0) {\n    return {};\n  }\n  return result;\n}\n", "  const counts = {};\n\
    \  for (let i = 0; i < test.length; i++) {\n    const key = test[i];\n    if (!counts[key])\
    \ {\n      counts[key] = 1;\n    } else {\n      counts[key]++;\n    }\n  }\n\
    \  return Object.keys(counts).reduce((acc, key) => {\n    acc[key] = counts[key];\n\
    \    return acc;\n  }, {});\n}\n", "  const counts = {};\n  for (let i = 0; i\
    \ < test.length; i++) {\n    const key = test[i];\n    if (!counts[key]) {\n \
    \     counts[key] = 1;\n    } else {\n      counts[key] += 1;\n    }\n  }\n  return\
    \ Object.keys(counts).reduce((acc, key) => {\n    acc[key] = counts[key];\n  \
    \  return acc;\n  }, {});\n}\n", "  let result = {};\n  let count = 0;\n  for\
    \ (let i = 0; i < test.length; i++) {\n    let key = test[i];\n    if (!result[key])\
    \ {\n      result[key] = 0;\n    }\n    result[key] += 1;\n    count += 1;\n \
    \ }\n  return result;\n}\n", "  let result = {};\n  let current = 0;\n  for (let\
    \ i = 0; i < test.length; i++) {\n    let key = test[i];\n    if (!result[key])\
    \ {\n      result[key] = 1;\n    } else {\n      result[key] += 1;\n    }\n  \
    \  if (result[key] > current) {\n      current = result[key];\n    }\n  }\n  return\
    \ result;\n}\n", "  let result = {};\n  let count = 0;\n  for (let i = 0; i <\
    \ test.length; i++) {\n    let key = test[i];\n    if (result[key] === undefined)\
    \ {\n      result[key] = 1;\n    } else {\n      result[key] += 1;\n    }\n  \
    \  count += 1;\n  }\n  if (count === 0) {\n    return result;\n  }\n  let max\
    \ = 0;\n  let maxKey = \"\";\n  for (let key in result) {\n    if (result[key]\
    \ > max) {\n      max = result[key];\n      maxKey = key;\n    }\n  }\n  result[maxKey]\
    \ = count;\n  return result;\n}\n", "  let count = 0;\n  let max = 0;\n  let result\
    \ = {};\n  for (let i = 0; i < test.length; i++) {\n    if (test[i] in result)\
    \ {\n      count += result[test[i]];\n    } else {\n      count++;\n    }\n  \
    \  if (count > max) {\n      max = count;\n      result = {};\n    }\n    result[test[i]]\
    \ = count;\n  }\n  return result;\n}\n", "  const result = {};\n  for (let i =\
    \ 0; i < test.length; i++) {\n    const key = test[i];\n    if (result[key] ===\
    \ undefined) {\n      result[key] = 1;\n    } else {\n      result[key] += 1;\n\
    \    }\n  }\n  return result;\n}\n", "  let result = {};\n  let max = 0;\n  let\
    \ maxKey = '';\n  for (let i = 0; i < test.length; i++) {\n    let key = test[i];\n\
    \    if (!result[key]) {\n      result[key] = 1;\n    } else {\n      result[key]\
    \ += 1;\n    }\n    if (result[key] > max) {\n      max = result[key];\n     \
    \ maxKey = key;\n    }\n  }\n  return result[maxKey];\n}\n", "  const counts =\
    \ {};\n  for (let i = 0; i < test.length; i++) {\n    const key = test[i];\n \
    \   if (!counts[key]) {\n      counts[key] = 1;\n    } else {\n      counts[key]\
    \ += 1;\n    }\n  }\n  return counts;\n}\n", "  let result = {};\n  let count\
    \ = 0;\n  for (let i = 0; i < test.length; i++) {\n    let key = test[i];\n  \
    \  if (result[key] === undefined) {\n      result[key] = 1;\n    } else {\n  \
    \    result[key] += 1;\n    }\n    count += 1;\n  }\n  for (let key in result)\
    \ {\n    if (result[key] > count) {\n      count = result[key];\n    }\n  }\n\
    \  return result;\n}\n", "  let result = {};\n  let count = 0;\n  for (let i =\
    \ 0; i < test.length; i++) {\n    let key = test[i];\n    if (!result[key]) {\n\
    \      result[key] = 1;\n    } else {\n      result[key] += 1;\n    }\n    count\
    \ += 1;\n  }\n  return count === 0 ? result : Object.keys(result).sort((a, b)\
    \ => result[a] - result[b])[0];\n}\n", "  let result = {};\n  let maxCount = 0;\n\
    \  for (let i = 0; i < test.length; i++) {\n    let key = test[i];\n    let count\
    \ = result[key] || 0;\n    result[key] = count + 1;\n    if (count > maxCount)\
    \ {\n      maxCount = count;\n    }\n  }\n  return result;\n}\n", "  let result\
    \ = {};\n  let count = 0;\n  for (let i = 0; i < test.length; i++) {\n    let\
    \ key = test[i];\n    if (!result[key]) {\n      result[key] = 1;\n      count++;\n\
    \    } else {\n      result[key]++;\n    }\n  }\n  return count === 0 ? result\
    \ : Object.keys(result).sort((a, b) => result[a] - result[b])[0];\n}\n", "  const\
    \ counts = {};\n  for (let i = 0; i < test.length; i++) {\n    const key = test[i];\n\
    \    if (!counts[key]) {\n      counts[key] = 1;\n    } else {\n      counts[key]\
    \ += 1;\n    }\n  }\n  return Object.keys(counts).reduce((acc, key) => {\n   \
    \ acc[key] = counts[key];\n    return acc;\n  }, {});\n}\n", "  let result = {};\n\
    \  for (let i = 0; i < test.length; i++) {\n    let key = test[i];\n    if (!result[key])\
    \ {\n      result[key] = 1;\n    } else {\n      result[key] += 1;\n    }\n  }\n\
    \  return result;\n}\n", "  const counts = {};\n  for (let i = 0; i < test.length;\
    \ i++) {\n    const key = test[i];\n    if (counts[key] === undefined) {\n   \
    \   counts[key] = 0;\n    }\n    counts[key]++;\n  }\n  return Object.keys(counts).reduce((acc,\
    \ key) => {\n    acc[key] = counts[key];\n    return acc;\n  }, {});\n}\n", " \
    \ let count = {};\n  let max = 0;\n  for (let i = 0; i < test.length; i++) {\n\
    \    let key = test[i];\n    if (count[key] === undefined) {\n      count[key]\
    \ = 1;\n    } else {\n      count[key] += 1;\n    }\n    if (count[key] > max)\
    \ {\n      max = count[key];\n    }\n  }\n  return count;\n}\n", "  let result\
    \ = {};\n  for (let i = 0; i < test.length; i++) {\n    let key = test[i];\n \
    \   if (!result[key]) {\n      result[key] = 1;\n    } else {\n      result[key]\
    \ += 1;\n    }\n  }\n  return result;\n}\n", "  const histogram = {};\n  for (let\
    \ i = 0; i < test.length; i++) {\n    const key = test[i];\n    if (histogram[key]\
    \ === undefined) {\n      histogram[key] = 1;\n    } else {\n      histogram[key]\
    \ += 1;\n    }\n  }\n  return histogram;\n}\n", "  let result = {};\n  let count\
    \ = 0;\n  for (let i = 0; i < test.length; i++) {\n    let key = test[i];\n  \
    \  if (!result[key]) {\n      result[key] = 1;\n    } else {\n      result[key]\
    \ += 1;\n    }\n    count += 1;\n  }\n  return count === 0 ? result : Object.keys(result).sort((a,\
    \ b) => result[b] - result[a])\n}\n", "  let counts = {};\n  for (let letter of\
    \ test.split(\" \")) {\n    if (counts[letter]) {\n      counts[letter] += 1;\n\
    \    } else {\n      counts[letter] = 1;\n    }\n  }\n  return Object.keys(counts).reduce((acc,\
    \ key) => {\n    acc[key] = counts[key];\n    return acc;\n  }, {});\n}\n", " \
    \ const counts = {};\n  for (let i = 0; i < test.length; i++) {\n    const key\
    \ = test[i];\n    if (!counts[key]) {\n      counts[key] = 1;\n    } else {\n\
    \      counts[key] += 1;\n    }\n  }\n  return Object.keys(counts).reduce((acc,\
    \ key) => {\n    acc[key] = counts[key];\n    return acc;\n  }, {});\n}\n", " \
    \ const counts = {};\n  for (let i = 0; i < test.length; i++) {\n    const key\
    \ = test[i];\n    if (!counts[key]) {\n      counts[key] = 1;\n    } else {\n\
    \      counts[key] += 1;\n    }\n  }\n  return Object.keys(counts).reduce((acc,\
    \ key) => {\n    acc[key] = counts[key];\n    return acc;\n  }, {});\n}\n", " \
    \ let result = {};\n  let count = 0;\n  for (let i = 0; i < test.length; i++)\
    \ {\n    let key = test[i];\n    if (result[key] === undefined) {\n      result[key]\
    \ = 1;\n    } else {\n      result[key] += 1;\n    }\n    count += 1;\n  }\n \
    \ if (count === 0) {\n    return {};\n  }\n  for (let key in result) {\n    if\
    \ (result[key] > count) {\n      count = result[key];\n    }\n  }\n  return result;\n\
    }\n", "  const result = {};\n  const letters = test.split(\" \");\n  for (let\
    \ i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    if (result[letter])\
    \ {\n      result[letter] += 1;\n    } else {\n      result[letter] = 1;\n   \
    \ }\n  }\n  return result;\n}\n", "  let result = {};\n  let count = 0;\n  for\
    \ (let i = 0; i < test.length; i++) {\n    let key = test[i];\n    if (!result[key])\
    \ {\n      result[key] = 1;\n    } else {\n      result[key] += 1;\n    }\n  \
    \  count += 1;\n  }\n  if (count === 0) {\n    return result;\n  }\n  let max\
    \ = 0;\n  let maxKey = null;\n  for (let key in result) {\n    if (result[key]\
    \ > max) {\n      max = result[key];\n      maxKey = key;\n    }\n  }\n  if (max\
    \ === 1) {\n    return result;\n  }\n  for (let key in result) {\n    if (result[key]\
    \ === max) {\n      result[key] = null;\n    }\n  }\n  return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
