name: HumanEval_16_count_distinct_characters
language: ts
prompt: "//Given a string, find out how many distinct characters (regardless of case)\
  \ does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>>\
  \ count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string:\
  \ string): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = count_distinct_characters;\n  assert.deepEqual(candidate(\"\
  \"),0);\n  assert.deepEqual(candidate(\"abcde\"),5);\n  assert.deepEqual(candidate(\"\
  abcdecadeCADE\"),5);\n  assert.deepEqual(candidate(\"aaaaAAAAaaaa\"),1);\n  assert.deepEqual(candidate(\"\
  Jerry jERRY JeRRRY\"),5);\n}\n\ntest();"
completions: ["  let count = 0;\n  let chars = [];\n  for (let i = 0; i < string.length;\
    \ i++) {\n    let char = string.charAt(i);\n    if (chars.indexOf(char) === -1)\
    \ {\n      chars.push(char);\n    }\n  }\n  return chars.length;\n}\n", "    let\
    \ count = 0;\n    let chars = [];\n    for (let i = 0; i < string.length; i++)\
    \ {\n        let char = string.charAt(i);\n        if (chars.indexOf(char) ===\
    \ -1) {\n            chars.push(char);\n        }\n    }\n    return chars.length;\n\
    }\n", "    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n   \
    \     let character = string[i];\n        if (count_distinct_characters_helper(character)\
    \ === 1) {\n            count++;\n        }\n    }\n    return count;\n}\n\nfunction\
    \ count_distinct_characters_helper(character: string): number {\n    let count\
    \ = 0;\n    for (let i = 0; i < character.length; i++) {\n        let c = character[i];\n\
    \        if (c === character.toLowerCase()) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\n", "  let count = 0\n  let chars = []\n  for (let\
    \ i = 0; i < string.length; i++) {\n    let char = string.charAt(i)\n    if (chars.indexOf(char)\
    \ === -1) {\n      chars.push(char)\n      count++\n    }\n  }\n  return count\n\
    }\n", "    let count = 0;\n    let character_count = {};\n    for (let i = 0;\
    \ i < string.length; i++) {\n        let character = string[i];\n        if (character_count[character]\
    \ === undefined) {\n            character_count[character] = 1;\n        } else\
    \ {\n            character_count[character] += 1;\n        }\n    }\n    for (let\
    \ key in character_count) {\n        if (character_count[key] > 1) {\n       \
    \     count += character_count[key];\n        }\n    }\n    return count;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
