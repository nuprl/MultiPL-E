name: HumanEval_6_parse_nested_parens
language: ts
prompt: "//Input to this function is a string represented multiple groups for nested\
  \ parentheses separated by spaces.\n// For each of the group, output the deepest\
  \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
  \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
  )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
  (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"()\
  \ (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
  ),[4]);\n}\n\ntest();"
completions: ["    let paren_stack = [];\n    let paren_count = 0;\n    let paren_level\
    \ = 0;\n    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n\
    \    let paren_count_stack_length = 0;\n    let paren_count_stack_max = 0;\n \
    \   let paren_count_stack_max_index = 0;\n    let paren_count_stack_max_length\
    \ = 0;\n    let paren_count_stack_max_max = 0;\n    let paren_count_stack_max_max_index\
    \ = 0;\n    let paren_count_stack_max_max_length = 0;\n    let paren_count_stack_max_max_max\
    \ = 0;\n    let paren_count_stack_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_length\
    \ = 0;\n    let paren_count_stack_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_index\
    \ = 0;\n    let paren_count_stack_max_max_max_max_length = 0;\n    let paren_count_stack_max_max_max_max_max\
    \ = 0;\n    let paren_count_stack_max_max_max_max_max_index = 0;\n    let paren_count_stack_max_max_max_max_max_length\
    \ = 0;\n    let paren_count_stack_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_index\
    \ = 0;\n    let paren_count_stack_max_max_max_max_max_max_length = 0;\n    let\
    \ paren_count_stack_max_max_max_max_max_max_max = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_index\
    \ = 0;\n    let paren_count_stack_max_max_max_max_max_max_max_length", "    let\
    \ paren_stack = [];\n    let current_level = 0;\n    let max_level = 0;\n    let\
    \ max_level_index = 0;\n    let current_index = 0;\n    let next_index = 0;\n\
    \    let next_char = '';\n    let current_char = '';\n    let paren_count = 0;\n\
    \    let paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let\
    \ paren_count_stack_top = 0;\n    let paren_count_stack_top_index = 0;\n    let\
    \ paren_count_stack_top_char = '';\n    let paren_count_stack_top_char_index =\
    \ 0;\n    let paren_count_stack_top_char_count = 0;\n    let paren_count_stack_top_char_count_index\
    \ = 0;\n    let paren_count_stack_top_char_count_count = 0;\n    let paren_count_stack_top_char_count_count_index\
    \ = 0;\n    let paren_count_stack_top_char_count_count_count = 0;\n    let paren_count_stack_top_char_count_count_count_index\
    \ = 0;\n    let paren_count_stack_top_char_count_count_count_count = 0;\n    let\
    \ paren_count_stack_top_char_count_count_count_count_index = 0;\n    let paren_count_stack_top_char_count_count_count_count_count\
    \ = 0;\n    let paren_count_stack_top_char_count_count_count_count_count_index\
    \ = 0;\n    let paren_count_stack_top_char_count_count_count_count_count_count\
    \ = 0;\n    let paren_count_stack_top_char_count_count_count_count_count_count_index\
    \ = 0;\n    let paren_count_stack_top_char_count_count_count_count_count_count_count\
    \ = 0;\n    let paren_count_stack_top_char_count_count_count_count_", "    let\
    \ paren_stack = [];\n    let paren_count = 0;\n    let paren_level = 0;\n    let\
    \ paren_count_stack = [];\n    let paren_count_stack_index = 0;\n    let paren_count_stack_top\
    \ = 0;\n    let paren_count_stack_top_index = 0;\n    let paren_count_stack_top_top\
    \ = 0;\n    let paren_count_stack_top_top_index = 0;\n    let paren_count_stack_top_top_top\
    \ = 0;\n    let paren_count_stack_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top\
    \ = 0;\n    let paren_count_stack_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top\
    \ = 0;\n    let paren_count_stack_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top\
    \ = 0;\n    let paren_count_stack_top_top_top_top_top_top_index = 0;\n    let\
    \ paren_count_stack_top_top_top_top_top_top_top = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_index\
    \ = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top = 0;\n    let\
    \ paren_count_stack_top_top_top_top_top_top_top_top_index = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top_top\
    \ = 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top_top_index =\
    \ 0;\n    let paren_count_stack_top_top_top_top_top_top_top_top_top_top = 0;\n\
    \    let paren_count_stack_top_top", "    let paren_stack: number[] = [];\n  \
    \  let paren_count: number = 0;\n    let paren_count_stack: number[] = [];\n \
    \   let paren_count_stack_index: number = 0;\n    let paren_count_stack_max: number\
    \ = 0;\n    let paren_count_stack_max_index: number = 0;\n    let paren_count_stack_max_max:\
    \ number = 0;\n    let paren_count_stack_max_max_index: number = 0;\n    let paren_count_stack_max_max_max:\
    \ number = 0;\n    let paren_count_stack_max_max_max_index: number = 0;\n    let\
    \ paren_count_stack_max_max_max_max: number = 0;\n    let paren_count_stack_max_max_max_max_index:\
    \ number = 0;\n    let paren_count_stack_max_max_max_max_max: number = 0;\n  \
    \  let paren_count_stack_max_max_max_max_max_index: number = 0;\n    let paren_count_stack_max_max_max_max_max_max:\
    \ number = 0;\n    let paren_count_stack_max_max_max_max_max_max_index: number\
    \ = 0;\n    let paren_count_stack_max_max_max_max_max_max_max: number = 0;\n \
    \   let paren_count_stack_max_max_max_max_max_max_max_index: number = 0;\n   \
    \ let paren_count_stack_max_max_max_max_max_max_max_max: number = 0;\n    let\
    \ paren_count_stack_max_max_max_max_max_max_max_max_index: number = 0;\n    let\
    \ paren_count_stack_max_max_max_max_max_max_max_max_max: number = 0;\n    let\
    \ paren_count_stack_max_max_max_max_max_max_max_max_max_index: number = 0;\n \
    \   let paren_count_stack", "  let paren_stack = [];\n  let max_nesting = 0;\n\
    \  let current_nesting = 0;\n  let current_index = 0;\n  let current_char = paren_string[current_index];\n\
    \  while (current_index < paren_string.length) {\n    if (current_char === '(')\
    \ {\n      paren_stack.push(current_index);\n      current_nesting++;\n    } else\
    \ if (current_char === ')') {\n      if (paren_stack.length > 0) {\n        current_index\
    \ = paren_stack.pop();\n        current_nesting--;\n      } else {\n        throw\
    \ new Error(\"Invalid input\");\n      }\n    }\n    current_index++;\n    current_char\
    \ = paren_string[current_index];\n    if (current_nesting > max_nesting) {\n \
    \     max_nesting = current_nesting;\n    }\n  }\n  return max_nesting;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
