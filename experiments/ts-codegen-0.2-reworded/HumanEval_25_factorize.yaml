name: HumanEval_25_factorize
language: ts
prompt: "//Return array of prime factors of given integer in the order from smallest\
  \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
  \ to how many times it appeares in factorization.\n// Input number should be equal\
  \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
  // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[]\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
  \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2,\
  \ 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
  \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n \
  \ assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
  \ 3, 3]);\n}\n\ntest();"
completions: ["  let factors = [];\n  let i = 2;\n  while (n > 1) {\n    while (n\
    \ % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n\
    \  return factors;\n}\n", "  let factors = [];\n  let i = 2;\n  while (n > 1)\
    \ {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n\
    \    i++;\n  }\n  return factors;\n}\n", "  let factors = [];\n  let i = 2;\n\
    \  while (n % i === 0) {\n    factors.push(i);\n    n /= i;\n  }\n  if (n > 1)\
    \ {\n    factors.push(n);\n  }\n  return factors;\n}\n", "  let factors = [];\n\
    \  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n % i === 0) {\n    factors.push(i);\n    n /=\
    \ i;\n  }\n  factors.push(n);\n  return factors;\n}\n", "  let factors = [];\n\
    \  let i = 2;\n  while (n % i === 0) {\n    factors.push(i);\n    n /= i;\n  }\n\
    \  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n % i === 0) {\n    factors.push(i);\n    n /=\
    \ i;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n}\n",
  "  let factors = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n\
    \      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  return factors;\n\
    }\n", "  let factors = [];\n  let i = 2;\n  while (n % i === 0) {\n    factors.push(i);\n\
    \    n /= i;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n\
    }\n", "  let factors = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i\
    \ === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  return\
    \ factors;\n}\n", "  let factors = [];\n  let i = 2;\n  while (n > 1) {\n    while\
    \ (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n\
    \  return factors;\n}\n", "  let factors = [];\n  let i = 2;\n  while (n > 1)\
    \ {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    } else\
    \ {\n      i++;\n    }\n  }\n  return factors;\n}\n", "  let factors = [];\n \
    \ let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n\
    \      factors.push(i);\n      factors.push(n / i);\n    }\n  }\n  return factors;\n\
    }\n", "  let factors = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i\
    \ === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  return\
    \ factors;\n}\n", "  let factors = [];\n  let i = 2;\n  while (n > 1) {\n    while\
    \ (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n\
    \  return factors;\n}\n", "  let factors = [];\n  let i = 2;\n  while (n > 1)\
    \ {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n\
    \    i++;\n  }\n  return factors;\n}\n", "  const factors = [];\n  let i = 2;\n\
    \  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n      n\
    \ /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors = [];\n\
    \  let i = 2;\n  while (n % i === 0) {\n    factors.push(i);\n    n /= i;\n  }\n\
    \  factors.push(n);\n  return factors;\n}\n", "  let factors = [];\n  let i =\
    \ 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n \
    \     n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors =\
    \ [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n \
    \     factors.push(i);\n      factors.push(n / i);\n    }\n  }\n  return factors;\n\
    }\n", "  let factors = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i\
    \ === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  return\
    \ factors;\n}\n", "  let factors = [];\n  let i = 2;\n  while (n > 1) {\n    while\
    \ (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n\
    \  return factors;\n}\n", "  const factors = [];\n  let i = 2;\n  while (n > 1)\
    \ {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n\
    \    i++;\n  }\n  return factors;\n}\n", "  let factors = [];\n  let i = 2;\n\
    \  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n      n\
    \ /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  const factors = [];\n\
    \  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  const factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n % i === 0) {\n    factors.push(i);\n    n /=\
    \ i;\n  }\n  factors.push(n);\n  return factors;\n}\n", "  let factors = [];\n\
    \  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    if (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n}\n",
  "  let factors = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n\
    \      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  return factors;\n\
    }\n", "  let factors = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i\
    \ === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  return\
    \ factors;\n}\n", "  let factors = [];\n  let i = 2;\n  while (n % i === 0) {\n\
    \    factors.push(i);\n    n /= i;\n  }\n  if (n > 1) {\n    factors.push(n);\n\
    \  }\n  return factors;\n}\n", "  let factors = [];\n  let i = 2;\n  while (n\
    \ > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n \
    \   }\n    i++;\n  }\n  return factors;\n}\n", "  let factors = [];\n  let i =\
    \ 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n \
    \     n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors =\
    \ [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n % i === 0) {\n    factors.push(i);\n    n /=\
    \ i;\n  }\n  factors.push(n);\n  return factors;\n}\n", "  let factors = [];\n\
    \  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    if (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n}\n",
  "  let factors = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n\
    \      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  return factors;\n\
    }\n", "  let factors = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i\
    \ === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  return\
    \ factors;\n}\n", "  const factors = [];\n  let i = 2;\n  while (n > 1) {\n  \
    \  while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n\
    \  }\n  return factors;\n}\n", "  const factors = [];\n  let i = 2;\n  while (n\
    \ > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n \
    \   }\n    i++;\n  }\n  return factors;\n}\n", "  let factors = [];\n  let i =\
    \ 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n \
    \     n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors =\
    \ [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  const factors\
    \ = [];\n  let i = 2;\n  while (n % i === 0) {\n    factors.push(i);\n    n /=\
    \ i;\n  }\n  return factors;\n}\n", "  let factors = [];\n  let i = 2;\n  while\
    \ (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n\
    \    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors = [];\n  let i\
    \ = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n\
    \      factors.push(i);\n      factors.push(n / i);\n    }\n  }\n  return factors;\n\
    }\n", "  let factors = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i\
    \ === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  return\
    \ factors;\n}\n", "  let factors = [];\n  let i = 2;\n  while (n > 1) {\n    while\
    \ (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n\
    \  return factors;\n}\n", "  let factors = [];\n  let i = 2;\n  while (n > 1)\
    \ {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n\
    \    i++;\n  }\n  return factors;\n}\n", "  let factors = [];\n  let i = 2;\n\
    \  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n      n\
    \ /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors = [];\n\
    \  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n % i === 0) {\n    factors.push(i);\n    n /=\
    \ i;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n}\n",
  "  let factors = [];\n  let i = 2;\n  while (n % i === 0) {\n    factors.push(i);\n\
    \    n /= i;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n\
    }\n", "  let factors = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i\
    \ === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  return\
    \ factors;\n}\n", "  const factors = [];\n  let i = 2;\n  while (n > 1) {\n  \
    \  while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n\
    \  }\n  return factors;\n}\n", "  let factors = [];\n  let i = 2;\n  while (n\
    \ > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n \
    \   }\n    i++;\n  }\n  return factors;\n}\n", "  let factors = [];\n  let i =\
    \ 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n \
    \     n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors =\
    \ [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  const factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  const factors\
    \ = [];\n  let i = 2;\n  while (n % i === 0) {\n    factors.push(i);\n    n /=\
    \ i;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n}\n",
  "  let factors = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n\
    \      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  return factors;\n\
    }\n", "  const factors = [];\n  let i = 2;\n  while (n > 1) {\n    while (n %\
    \ i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  return\
    \ factors;\n}\n", "  let factors = [];\n  let i = 2;\n  while (n > 1) {\n    if\
    \ (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    } else {\n     \
    \ i++;\n    }\n  }\n  return factors;\n}\n", "  let factors = [];\n  let i = 2;\n\
    \  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n      n\
    \ /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors = [];\n\
    \  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  const factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  const factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    if (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n}\n",
  "  let factors = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n\
    \      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  return factors;\n\
    }\n", "  let factors = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i\
    \ === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  return\
    \ factors;\n}\n", "  let factors = [];\n  let i = 2;\n  while (n > 1) {\n    while\
    \ (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n\
    \  return factors;\n}\n", "  let factors = [];\n  let i = 2;\n  while (n % i ===\
    \ 0) {\n    factors.push(i);\n    n /= i;\n  }\n  if (n > 1) {\n    factors.push(n);\n\
    \  }\n  return factors;\n}\n", "  let factors = [];\n  let i = 2;\n  while (n\
    \ > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n \
    \   }\n    i++;\n  }\n  return factors;\n}\n", "  let factors = [];\n  let i =\
    \ 2;\n  while (n % i === 0) {\n    factors.push(i);\n    n /= i;\n  }\n  if (n\
    \ > 1) {\n    factors.push(n);\n  }\n  return factors;\n}\n", "  let factors =\
    \ [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  const factors\
    \ = [];\n  let i = 2;\n  while (n % i === 0) {\n    factors.push(i);\n    n /=\
    \ i;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n}\n",
  "  let factors = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n\
    \      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  return factors;\n\
    }\n", "  let factors = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i\
    \ === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  return\
    \ factors;\n}\n", "  let factors = [];\n  let i = 2;\n  while (n > 1) {\n    while\
    \ (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n\
    \  return factors;\n}\n", "  let factors = [];\n  let i = 2;\n  while (n > 1)\
    \ {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n\
    \    i++;\n  }\n  return factors;\n}\n", "  let factors = [];\n  let i = 2;\n\
    \  while (n % i === 0) {\n    factors.push(i);\n    n /= i;\n  }\n  factors.push(n);\n\
    \  return factors;\n}\n", "  let factors = [];\n  let i = 2;\n  while (n > 1)\
    \ {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n\
    \    i++;\n  }\n  return factors;\n}\n", "  let factors = [];\n  let i = 2;\n\
    \  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n      n\
    \ /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors = [];\n\
    \  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    if (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n}\n",
  "  let factors = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n\
    \      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  return factors;\n\
    }\n", "  let factors = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i\
    \ === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  return\
    \ factors;\n}\n", "  let factors = [];\n  let i = 2;\n  while (n > 1) {\n    while\
    \ (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n\
    \  return factors;\n}\n", "  let factors = [];\n  let i = 2;\n  while (n > 1)\
    \ {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n\
    \    i++;\n  }\n  return factors;\n}\n", "  let factors = [];\n  let i = 2;\n\
    \  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n      n\
    \ /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  const factors = [];\n\
    \  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    if (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n}\n",
  "  const factors = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0)\
    \ {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  return factors;\n\
    }\n", "  let factors = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i\
    \ === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  return\
    \ factors;\n}\n", "  let factors = [];\n  let i = 2;\n  while (n > 1) {\n    while\
    \ (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n\
    \  return factors;\n}\n", "  let factors = [];\n  let i = 2;\n  while (n > 1)\
    \ {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n\
    \    i++;\n  }\n  return factors;\n}\n", "  let factors = [];\n  let i = 2;\n\
    \  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n      n\
    \ /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors = [];\n\
    \  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  const factors\
    \ = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n\
    \      factors.push(i);\n      factors.push(n / i);\n    }\n  }\n  return factors;\n\
    }\n", "  let factors = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i\
    \ === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  return\
    \ factors;\n}\n", "  let factors = [];\n  let i = 2;\n  while (n % i === 0) {\n\
    \    factors.push(i);\n    n /= i;\n  }\n  factors.push(n);\n  return factors;\n\
    }\n", "  let factors = [];\n  let i = 2;\n  while (n % i === 0) {\n    factors.push(i);\n\
    \    n /= i;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n\
    }\n", "  let factors = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i\
    \ === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  return\
    \ factors;\n}\n", "  let factors = [];\n  let i = 2;\n  while (n > 1) {\n    while\
    \ (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n\
    \  return factors;\n}\n", "  let factors = [];\n  let i = 2;\n  while (n > 1)\
    \ {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n\
    \    i++;\n  }\n  return factors;\n}\n", "  let factors = [];\n  let i = 2;\n\
    \  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n      n\
    \ /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors = [];\n\
    \  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n % i === 0) {\n    factors.push(i);\n    n /=\
    \ i;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n}\n",
  "  let factors = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n\
    \      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  return factors;\n\
    }\n", "  let factors = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i\
    \ === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  return\
    \ factors;\n}\n", "  let factors = [];\n  let i = 2;\n  while (n > 1) {\n    while\
    \ (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n\
    \  return factors;\n}\n", "  let factors = [];\n  let i = 2;\n  while (n > 1)\
    \ {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n\
    \    i++;\n  }\n  return factors;\n}\n", "  let factors = [];\n  let i = 2;\n\
    \  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n      n\
    \ /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors = [];\n\
    \  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  const factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  const factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  const factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  const factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n % i === 0) {\n    factors.push(i);\n    n /=\
    \ i;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n}\n",
  "  let factors = [];\n  let i = 2;\n  while (n > 1) {\n    if (n % i === 0) {\n\
    \      factors.push(i);\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n\
    \  return factors;\n}\n", "  let factors = [];\n  let i = 2;\n  while (n > 1)\
    \ {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n\
    \    i++;\n  }\n  return factors;\n}\n", "  let factors = [];\n  let i = 2;\n\
    \  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n      n\
    \ /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors = [];\n\
    \  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n % i === 0) {\n    factors.push(i);\n    n /=\
    \ i;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n}\n",
  "  let factors = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n\
    \      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  return factors;\n\
    }\n", "  let factors = [];\n  let i = 2;\n  while (n > 1) {\n    if (n % i ===\
    \ 0) {\n      factors.push(i);\n      n /= i;\n    } else {\n      i++;\n    }\n\
    \  }\n  return factors;\n}\n", "  let factors = [];\n  let i = 2;\n  while (n\
    \ > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n \
    \   }\n    i++;\n  }\n  return factors;\n}\n", "  let factors = [];\n  let i =\
    \ 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n \
    \     n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors =\
    \ [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n    i++;\n  }\n  return factors;\n}\n", "  let factors\
    \ = [];\n  let i = 2;\n  while (n % i === 0) {\n    factors.push(i);\n    n /=\
    \ i;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n}\n",
  "  let factors = [];\n  let i = 2;\n  while (n % i === 0) {\n    factors.push(i);\n\
    \    n /= i;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n\
    }\n", "  let factors = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i\
    \ === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  return\
    \ factors;\n}\n", "  let factors = [];\n  let i = 2;\n  while (n > 1) {\n    while\
    \ (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n\
    \  return factors;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
