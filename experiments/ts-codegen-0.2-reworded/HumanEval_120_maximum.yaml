name: HumanEval_120_maximum
language: ts
prompt: "//Given an array arr of integers and a positive integer k, return a sorted\
  \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>>\
  \ maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4,\
  \ 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n\
  // [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n\
  // 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
  \ <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5],\
  \ 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
  \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0,\
  \ 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2,\
  \ -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0],\
  \ 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3,\
  \ -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
  \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
completions: ["    let max = arr[0];\n    let maxIndex = 0;\n    for (let i = 1; i\
    \ < arr.length; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n\
    \            maxIndex = i;\n        }\n    }\n    let result = [];\n    for (let\
    \ i = 0; i < k; i++) {\n        result.push(arr[maxIndex]);\n        maxIndex\
    \ = (maxIndex + 1) % arr.length;\n    }\n    return result;\n}\n", "  let max\
    \ = arr[0];\n  let result = [max];\n  for (let i = 1; i < k; i++) {\n    if (arr[i]\
    \ > max) {\n      max = arr[i];\n      result = [max];\n    } else {\n      result.push(arr[i]);\n\
    \    }\n  }\n  return result;\n}\n", "  let max = arr[0];\n  let maxIndex = 0;\n\
    \  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max\
    \ = arr[i];\n      maxIndex = i;\n    }\n  }\n  let result = [];\n  for (let i\
    \ = 0; i < k; i++) {\n    result.push(arr[maxIndex]);\n    maxIndex = (maxIndex\
    \ + 1) % arr.length;\n  }\n  return result;\n}\n", "    let max = arr[0];\n  \
    \  let maxIndex = 0;\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i]\
    \ > max) {\n            max = arr[i];\n            maxIndex = i;\n        }\n\
    \    }\n    if (k > arr.length) {\n        return [];\n    }\n    let result =\
    \ [];\n    for (let i = 0; i < k; i++) {\n        result.push(arr[maxIndex]);\n\
    \        maxIndex = maxIndex === arr.length - 1 ? 0 : maxIndex + 1;\n    }\n \
    \   return result;\n}\n", "    let max = arr[0];\n    let maxIndex = 0;\n    for\
    \ (let i = 1; i < k; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n\
    \            maxIndex = i;\n        }\n    }\n    let result = [max];\n    for\
    \ (let i = 0; i < k; i++) {\n        if (i === maxIndex) {\n            result.push(arr[i]);\n\
    \        } else {\n            result.push(arr[i]);\n        }\n    }\n    return\
    \ result;\n}\n", "  let max = arr[0];\n  let max_index = 0;\n  for (let i = 1;\
    \ i < k; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      max_index\
    \ = i;\n    }\n  }\n  let result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n\
    \  }\n  result[max_index] = max;\n  return result;\n}\n", "  let max = arr[0];\n\
    \  let maxIndex = 0;\n  for (let i = 1; i < k; i++) {\n    if (arr[i] > max) {\n\
    \      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  let result = [];\n  for\
    \ (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  result[maxIndex]\
    \ = max;\n  return result;\n}\n", "    let max = arr[0];\n    let maxIndex = 0;\n\
    \    for (let i = 1; i < k; i++) {\n        if (arr[i] > max) {\n            max\
    \ = arr[i];\n            maxIndex = i;\n        }\n    }\n    return arr.slice(maxIndex);\n\
    }\n", "    let max = arr[0];\n    let maxIndex = 0;\n    for (let i = 1; i < arr.length;\
    \ i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n           \
    \ maxIndex = i;\n        }\n    }\n    if (k > arr.length) {\n        return [];\n\
    \    }\n    let result = [];\n    for (let i = 0; i < k; i++) {\n        result.push(arr[maxIndex]);\n\
    \        maxIndex = (maxIndex + 1) % arr.length;\n    }\n    return result;\n\
    }\n", "  let max = arr[0];\n  let maxIndex = 0;\n  for (let i = 1; i < k; i++)\
    \ {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n\
    \  }\n  return arr.slice(maxIndex);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
