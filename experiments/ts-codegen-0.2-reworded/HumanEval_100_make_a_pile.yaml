name: HumanEval_100_make_a_pile
language: ts
prompt: "//Given a positive integer n, you have to make a pile of n levels of stones.\n\
  // The first level has n stones.\n// The number of stones in the next level is:\n\
  // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
  // Return the number of stones in each level in an array, where element at index\n\
  // i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
  // [3, 5, 7]\nfunction make_a_pile(n: number): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = make_a_pile;\n  assert.deepEqual(candidate(3),[3,\
  \ 5, 7]);\n  assert.deepEqual(candidate(4),[4, 6, 8, 10]);\n  assert.deepEqual(candidate(5),[5,\
  \ 7, 9, 11, 13]);\n  assert.deepEqual(candidate(6),[6, 8, 10, 12, 14, 16]);\n  assert.deepEqual(candidate(8),[8,\
  \ 10, 12, 14, 16, 18, 20, 22]);\n}\n\ntest();"
completions: ["    let arr = [];\n    let i = 1;\n    while (i <= n) {\n        arr.push(i);\n\
    \        i = i + 2 - (i % 2);\n    }\n    return arr;\n}\n", "    let result =\
    \ [];\n    let i = 1;\n    while (i <= n) {\n        let odd = i % 2 === 1;\n\
    \        let even = i % 2 === 0;\n        let stones = odd ? i + 1 : i;\n    \
    \    result.push(stones);\n        i = stones;\n    }\n    return result;\n}\n",
  "  let result = [];\n  let i = 1;\n  while (i <= n) {\n    let odd = i;\n    if\
    \ (i % 2 === 0) {\n      odd = i + 1;\n    }\n    result.push(odd);\n    i = odd;\n\
    \  }\n  return result;\n}\n", "  const result = [];\n  for (let i = 0; i < n;\
    \ i++) {\n    result.push(n);\n  }\n  return result;\n}\n", "    let result =\
    \ [];\n    let i = 0;\n    while (n > 0) {\n        let stones = n % 2 === 0 ?\
    \ n / 2 : n + 1;\n        result.push(stones);\n        n = stones;\n        i++;\n\
    \    }\n    return result;\n}\n", "  let result = [];\n  let count = n;\n  while\
    \ (count > 0) {\n    result.push(count);\n    count = count - 2;\n  }\n  return\
    \ result;\n}\n", "    let result = [];\n    let i = 0;\n    while (i < n) {\n\
    \        let odd = n % 2;\n        let even = !odd;\n        let stones = Math.floor(Math.sqrt(n));\n\
    \        let level = stones;\n        if (odd) {\n            level += 1;\n  \
    \      } else if (even) {\n            level += 2;\n        }\n        result.push(level);\n\
    \        n -= level;\n        i += 1;\n    }\n    return result;\n}\n", "    let\
    \ result = [];\n    let i = 0;\n    while (n > 0) {\n        let num = n % 2;\n\
    \        if (n % 2 === 0) {\n            num = num * 2;\n        }\n        result.push(num);\n\
    \        n = Math.floor(n / 2);\n        i++;\n    }\n    return result;\n}\n",
  "  let result = [];\n  let i = 0;\n  while (n > 0) {\n    result.push(n);\n    n\
    \ = Math.floor(n / 2);\n    i++;\n  }\n  return result;\n}\n", "  let result =\
    \ [];\n  let i = 1;\n  while (i <= n) {\n    let odd = i % 2 === 1;\n    let even\
    \ = i % 2 === 0;\n    let stones = odd ? i + 1 : i;\n    result.push(stones);\n\
    \    i += even ? 2 : 1;\n  }\n  return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
