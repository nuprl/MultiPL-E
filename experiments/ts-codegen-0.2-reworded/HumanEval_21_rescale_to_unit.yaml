name: HumanEval_21_rescale_to_unit
language: ts
prompt: "//Given array of numbers (of at least two elements), apply a linear transform\
  \ to that array,\n// such that the smallest number will become 0 and the largest\
  \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
  \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
  \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
  \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
  \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0,\
  \ 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
  \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
completions: ["  let min = numbers[0];\n  let max = numbers[0];\n  for (let i = 0;\
    \ i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n\
    \    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for\
    \ (let i = 0; i < numbers.length; i++) {\n    numbers[i] = (numbers[i] - min)\
    \ / (max - min);\n  }\n  return numbers;\n}\n", "  let min = numbers[0];\n  let\
    \ max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i]\
    \ < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n    \
    \  max = numbers[i];\n    }\n  }\n  let scale = 1 / (max - min);\n  for (let i\
    \ = 0; i < numbers.length; i++) {\n    numbers[i] = (numbers[i] - min) * scale;\n\
    \  }\n  return numbers;\n}\n", "  let min = numbers[0];\n  let max = numbers[0];\n\
    \  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n \
    \     min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n\
    \    }\n  }\n  let scale = 1.0 / (max - min);\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    numbers[i] = (numbers[i] - min) * scale;\n  }\n  return numbers;\n\
    }\n", "  let min = numbers[0];\n  let max = numbers[0];\n  for (let i = 1; i <\
    \ numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n\
    \    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  let\
    \ scale = 1.0 / (max - min);\n  for (let i = 0; i < numbers.length; i++) {\n \
    \   numbers[i] = (numbers[i] - min) * scale;\n  }\n  return numbers;\n}\n", " \
    \ let min = numbers[0];\n  let max = numbers[0];\n  for (let i = 1; i < numbers.length;\
    \ i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if\
    \ (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  let scale = 1.0\
    \ / (max - min);\n  for (let i = 0; i < numbers.length; i++) {\n    numbers[i]\
    \ = (numbers[i] - min) * scale;\n  }\n  return numbers;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
