{
  "name": "HumanEval_58_common",
  "language": "ts",
  "prompt": "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1: number[], l2: number[]): number[] {\n",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common;\n  assert.deepEqual(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]),[1, 5, 653]);\n  assert.deepEqual(candidate([5, 3, 2, 8], [3, 2]),[2, 3]);\n  assert.deepEqual(candidate([4, 3, 2, 8], [3, 2, 4]),[2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 8], []),[]);\n}\n\ntest();",
  "completions": [
    "  const result = [];\n  const l1Len = l1.length;\n  const l2Len = l2.length;\n  let i = 0;\n  let j = 0;\n  while (i < l1Len && j < l2Len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "  let l1_len = l1.length\n  let l2_len = l2.length\n  let l1_index = 0\n  let l2_index = 0\n  let common_array = []\n  while (l1_index < l1_len && l2_index < l2_len) {\n    if (l1[l1_index] === l2[l2_index]) {\n      common_array.push(l1[l1_index])\n      l1_index++\n      l2_index++\n    } else if (l1[l1_index] < l2[l2_index]) {\n      l1_index++\n    } else {\n      l2_index++\n    }\n  }\n  return common_array\n}\n",
    "  let l1_len = l1.length\n  let l2_len = l2.length\n  let l1_i = 0\n  let l2_i = 0\n  let result = []\n  while (l1_i < l1_len && l2_i < l2_len) {\n    if (l1[l1_i] === l2[l2_i]) {\n      result.push(l1[l1_i])\n      l1_i++\n      l2_i++\n    } else if (l1[l1_i] < l2[l2_i]) {\n      l1_i++\n    } else {\n      l2_i++\n    }\n  }\n  return result\n}\n",
    "  let l1_len = l1.length\n  let l2_len = l2.length\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < l1_len && j < l2_len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else if (l1[i] > l2[j]) {\n      j++\n    } else {\n      i++\n    }\n  }\n  return result\n}\n",
    "  let l1_len = l1.length;\n  let l2_len = l2.length;\n  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1_len && j < l2_len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "  const l1_len = l1.length;\n  const l2_len = l2.length;\n  const l1_set = new Set(l1);\n  const l2_set = new Set(l2);\n  const common_set = new Set();\n  for (let i = 0; i < l1_len; i++) {\n    if (l1_set.has(l1[i])) {\n      common_set.add(l1[i]);\n    }\n  }\n  for (let i = 0; i < l2_len; i++) {\n    if (l2_set.has(l2[i])) {\n      common_set.add(l2[i]);\n    }\n  }\n  return [...common_set];\n}\n",
    "    let result = [];\n    let i = 0;\n    let j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] === l2[j]) {\n            result.push(l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return result;\n}\n",
    "    let result = [];\n    let i = 0;\n    let j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] === l2[j]) {\n            result.push(l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            i++;\n        }\n    }\n    return result;\n}\n",
    "  let l1_len = l1.length\n  let l2_len = l2.length\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < l1_len && j < l2_len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else if (l1[i] > l2[j]) {\n      j++\n    } else {\n      i++\n    }\n  }\n  return result\n}\n",
    "  let l1_len = l1.length;\n  let l2_len = l2.length;\n  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1_len && j < l2_len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "    let l1_len = l1.length;\n    let l2_len = l2.length;\n    let l1_index = 0;\n    let l2_index = 0;\n    let common_array = [];\n    while (l1_index < l1_len && l2_index < l2_len) {\n        if (l1[l1_index] === l2[l2_index]) {\n            common_array.push(l1[l1_index]);\n            l1_index++;\n            l2_index++;\n        } else if (l1[l1_index] < l2[l2_index]) {\n            l1_index++;\n        } else {\n            l2_index++;\n        }\n    }\n    return common_array;\n}\n",
    "    var result = [];\n    var i = 0;\n    var j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] === l2[j]) {\n            result.push(l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            i++;\n        }\n    }\n    return result;\n}\n",
    "  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "  const result = [];\n  const l1Len = l1.length;\n  const l2Len = l2.length;\n  let i = 0;\n  let j = 0;\n  while (i < l1Len && j < l2Len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "    let l1_len = l1.length;\n    let l2_len = l2.length;\n    let l3_len = Math.min(l1_len, l2_len);\n    let l4_len = Math.max(l1_len, l2_len);\n    let l5_len = Math.min(l1_len, l2_len);\n    let l6_len = Math.max(l1_len, l2_len);\n    let l7_len = Math.min(l1_len, l2_len);\n    let l8_len = Math.max(l1_len, l2_len);\n    let l9_len = Math.min(l1_len, l2_len);\n    let l10_len = Math.max(l1_len, l2_len);\n    let l11_len = Math.min(l1_len, l2_len);\n    let l12_len = Math.max(l1_len, l2_len);\n    let l13_len = Math.min(l1_len, l2_len);\n    let l14_len = Math.max(l1_len, l2_len);\n    let l15_len = Math.min(l1_len, l2_len);\n    let l16_len = Math.max(l1_len, l2_len);\n    let l17_len = Math.min(l1_len, l2_len);\n    let l18_len = Math.max(l1_len, l2_len);\n    let l19_len = Math.min(l1_len, l2_len);\n    let l20_len = Math.max(l1_len, l2_len);\n    let l21_len = Math.min(l1_len, l2_len);\n    let l22_len = Math.max(l1_len, l2_len);\n    let l23_len = Math.min(l1_len, l2_len);\n    let l24_len = Math.max(l1_len, l2_len);\n    let",
    "  let i = 0, j = 0, result = [];\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return result;\n}\n",
    "  let i = 0, j = 0, k = 0, l = 0;\n  let result = [];\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return result;\n}\n",
    "  let l1_len = l1.length\n  let l2_len = l2.length\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < l1_len && j < l2_len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else if (l1[i] > l2[j]) {\n      j++\n    } else {\n      i++\n    }\n  }\n  return result\n}\n",
    "  let l1_len = l1.length\n  let l2_len = l2.length\n  let l1_i = 0\n  let l2_i = 0\n  let common = []\n  while (l1_i < l1_len && l2_i < l2_len) {\n    if (l1[l1_i] === l2[l2_i]) {\n      common.push(l1[l1_i])\n      l1_i++\n      l2_i++\n    } else if (l1[l1_i] < l2[l2_i]) {\n      l1_i++\n    } else {\n      l2_i++\n    }\n  }\n  return common\n}\n",
    "  const common = [];\n  const l1Len = l1.length;\n  const l2Len = l2.length;\n  let i = 0;\n  let j = 0;\n  while (i < l1Len && j < l2Len) {\n    if (l1[i] === l2[j]) {\n      common.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return common;\n}\n",
    "  var result = [];\n  var i = 0;\n  var j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "  let l1_len = l1.length\n  let l2_len = l2.length\n  let i = 0\n  let j = 0\n  let k = 0\n  let common = []\n  while (i < l1_len && j < l2_len) {\n    if (l1[i] === l2[j]) {\n      common.push(l1[i])\n      i++\n      j++\n    } else if (l1[i] < l2[j]) {\n      i++\n    } else {\n      j++\n    }\n  }\n  return common\n}\n",
    "  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "  let l1_len = l1.length;\n  let l2_len = l2.length;\n  let l1_i = 0;\n  let l2_i = 0;\n  let common = [];\n  while (l1_i < l1_len && l2_i < l2_len) {\n    if (l1[l1_i] === l2[l2_i]) {\n      common.push(l1[l1_i]);\n      l1_i++;\n      l2_i++;\n    } else if (l1[l1_i] < l2[l2_i]) {\n      l1_i++;\n    } else {\n      l2_i++;\n    }\n  }\n  return common;\n}\n",
    "  const result = [];\n  let i = 0, j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "    let result = [];\n    let l1_len = l1.length;\n    let l2_len = l2.length;\n    let i = 0;\n    let j = 0;\n    while (i < l1_len && j < l2_len) {\n        if (l1[i] === l2[j]) {\n            result.push(l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            i++;\n        }\n    }\n    return result;\n}\n",
    "  let l1_len = l1.length\n  let l2_len = l2.length\n  let l1_i = 0\n  let l2_i = 0\n  let common = []\n  while (l1_i < l1_len && l2_i < l2_len) {\n    if (l1[l1_i] === l2[l2_i]) {\n      common.push(l1[l1_i])\n      l1_i++\n      l2_i++\n    } else if (l1[l1_i] > l2[l2_i]) {\n      l2_i++\n    } else {\n      l1_i++\n    }\n  }\n  return common\n}\n",
    "  let l1_len = l1.length;\n  let l2_len = l2.length;\n  let l1_index = 0;\n  let l2_index = 0;\n  let common = [];\n  while (l1_index < l1_len && l2_index < l2_len) {\n    if (l1[l1_index] === l2[l2_index]) {\n      common.push(l1[l1_index]);\n      l1_index++;\n      l2_index++;\n    } else if (l1[l1_index] > l2[l2_index]) {\n      l2_index++;\n    } else {\n      l1_index++;\n    }\n  }\n  return common;\n}\n",
    "  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "  const l1_len = l1.length\n  const l2_len = l2.length\n  const l1_set = new Set(l1)\n  const l2_set = new Set(l2)\n  const common = []\n  for (let i = 0; i < l1_len; i++) {\n    if (l1_set.has(l1[i])) {\n      if (l2_set.has(l2[i])) {\n        common.push(l1[i])\n      }\n    }\n  }\n  return common\n}\n",
    "  const l1_len = l1.length;\n  const l2_len = l2.length;\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1_len && j < l2_len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "  const map = new Map();\n  for (let i = 0; i < l1.length; i++) {\n    map.set(l1[i], l1[i]);\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (map.has(l2[i])) {\n      map.delete(l2[i]);\n    }\n  }\n  return Array.from(map.keys());\n}\n",
    "  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return result;\n}\n",
    "  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return result;\n}\n",
    "    let l1_len = l1.length;\n    let l2_len = l2.length;\n    let l1_i = 0;\n    let l2_i = 0;\n    let common = [];\n    while (l1_i < l1_len && l2_i < l2_len) {\n        if (l1[l1_i] === l2[l2_i]) {\n            common.push(l1[l1_i]);\n            l1_i++;\n            l2_i++;\n        } else if (l1[l1_i] > l2[l2_i]) {\n            l2_i++;\n        } else {\n            l1_i++;\n        }\n    }\n    return common;\n}\n",
    "  let l1_len = l1.length;\n  let l2_len = l2.length;\n  let l1_index = 0;\n  let l2_index = 0;\n  let common_array = [];\n  while (l1_index < l1_len && l2_index < l2_len) {\n    if (l1[l1_index] === l2[l2_index]) {\n      common_array.push(l1[l1_index]);\n      l1_index++;\n      l2_index++;\n    } else if (l1[l1_index] < l2[l2_index]) {\n      l1_index++;\n    } else {\n      l2_index++;\n    }\n  }\n  return common_array;\n}\n",
    "  let l1_len = l1.length\n  let l2_len = l2.length\n  let l1_index = 0\n  let l2_index = 0\n  let result = []\n  while (l1_index < l1_len && l2_index < l2_len) {\n    if (l1[l1_index] === l2[l2_index]) {\n      result.push(l1[l1_index])\n      l1_index++\n      l2_index++\n    } else if (l1[l1_index] < l2[l2_index]) {\n      l1_index++\n    } else {\n      l2_index++\n    }\n  }\n  return result\n}\n",
    "    let l1_len = l1.length;\n    let l2_len = l2.length;\n    let l1_set = new Set(l1);\n    let l2_set = new Set(l2);\n    let common = [];\n    for (let i = 0; i < l1_len; i++) {\n        if (l1_set.has(l1[i])) {\n            common.push(l1[i]);\n        }\n    }\n    for (let i = 0; i < l2_len; i++) {\n        if (l2_set.has(l2[i])) {\n            common.push(l2[i]);\n        }\n    }\n    return common;\n}\n",
    "  const result = [];\n  const l1Len = l1.length;\n  const l2Len = l2.length;\n  let i = 0;\n  let j = 0;\n  while (i < l1Len && j < l2Len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "  let l1_len = l1.length\n  let l2_len = l2.length\n  let l1_i = 0\n  let l2_i = 0\n  let result = []\n  while (l1_i < l1_len && l2_i < l2_len) {\n    if (l1[l1_i] === l2[l2_i]) {\n      result.push(l1[l1_i])\n      l1_i++\n      l2_i++\n    } else if (l1[l1_i] > l2[l2_i]) {\n      l2_i++\n    } else {\n      l1_i++\n    }\n  }\n  return result\n}\n",
    "    let l1_len = l1.length;\n    let l2_len = l2.length;\n    let l1_i = 0;\n    let l2_i = 0;\n    let result = [];\n    while (l1_i < l1_len && l2_i < l2_len) {\n        if (l1[l1_i] === l2[l2_i]) {\n            result.push(l1[l1_i]);\n            l1_i++;\n            l2_i++;\n        } else if (l1[l1_i] < l2[l2_i]) {\n            l1_i++;\n        } else {\n            l2_i++;\n        }\n    }\n    return result;\n}\n",
    "    let result = [];\n    let i = 0;\n    let j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] === l2[j]) {\n            result.push(l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            i++;\n        }\n    }\n    return result;\n}\n",
    "  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "    let l1_len = l1.length, l2_len = l2.length;\n    let result = [];\n    for (let i = 0; i < l1_len; i++) {\n        for (let j = 0; j < l2_len; j++) {\n            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n                break;\n            }\n        }\n    }\n    return result;\n}\n",
    "  const result = [];\n  const l1Len = l1.length;\n  const l2Len = l2.length;\n  let i = 0;\n  let j = 0;\n  while (i < l1Len && j < l2Len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "  let i = 0, j = 0, k = 0;\n  let result = [];\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return result;\n}\n",
    "  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "  const l1_len = l1.length\n  const l2_len = l2.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < l1_len && j < l2_len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else if (l1[i] > l2[j]) {\n      j++\n    } else {\n      i++\n    }\n  }\n  return result\n}\n",
    "  let l1_len = l1.length\n  let l2_len = l2.length\n  let l1_index = 0\n  let l2_index = 0\n  let common = []\n  while (l1_index < l1_len && l2_index < l2_len) {\n    if (l1[l1_index] === l2[l2_index]) {\n      common.push(l1[l1_index])\n      l1_index++\n      l2_index++\n    } else if (l1[l1_index] < l2[l2_index]) {\n      l1_index++\n    } else {\n      l2_index++\n    }\n  }\n  return common\n}\n",
    "  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "  const l1_len = l1.length\n  const l2_len = l2.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < l1_len && j < l2_len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else if (l1[i] > l2[j]) {\n      j++\n    } else {\n      i++\n    }\n  }\n  return result\n}\n",
    "  let i = 0, j = 0, k = 0, l = 0;\n  let result = [];\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "  let l1_len = l1.length\n  let l2_len = l2.length\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < l1_len && j < l2_len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else if (l1[i] < l2[j]) {\n      i++\n    } else {\n      j++\n    }\n  }\n  return result\n}\n",
    "  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "    let l1_len = l1.length;\n    let l2_len = l2.length;\n    let l1_index = 0;\n    let l2_index = 0;\n    let result = [];\n    while (l1_index < l1_len && l2_index < l2_len) {\n        if (l1[l1_index] === l2[l2_index]) {\n            result.push(l1[l1_index]);\n            l1_index++;\n            l2_index++;\n        } else if (l1[l1_index] < l2[l2_index]) {\n            l1_index++;\n        } else {\n            l2_index++;\n        }\n    }\n    return result;\n}\n",
    "  const l1_len = l1.length\n  const l2_len = l2.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < l1_len && j < l2_len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else if (l1[i] > l2[j]) {\n      j++\n    } else {\n      i++\n    }\n  }\n  return result\n}\n",
    "  const result = [];\n  let i = 0, j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "  let l1_len = l1.length\n  let l2_len = l2.length\n  let l1_i = 0\n  let l2_i = 0\n  let common = []\n  while (l1_i < l1_len && l2_i < l2_len) {\n    if (l1[l1_i] === l2[l2_i]) {\n      common.push(l1[l1_i])\n      l1_i++\n      l2_i++\n    } else if (l1[l1_i] > l2[l2_i]) {\n      l2_i++\n    } else {\n      l1_i++\n    }\n  }\n  return common\n}\n",
    "  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "  const result = [];\n  const l1Len = l1.length;\n  const l2Len = l2.length;\n  let i = 0;\n  let j = 0;\n  while (i < l1Len && j < l2Len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "  const l1_len = l1.length;\n  const l2_len = l2.length;\n  const l1_set = new Set(l1);\n  const l2_set = new Set(l2);\n  const common = [];\n  for (let i = 0; i < l1_len; i++) {\n    if (l1_set.has(l1[i])) {\n      common.push(l1[i]);\n    }\n  }\n  for (let i = 0; i < l2_len; i++) {\n    if (l2_set.has(l2[i])) {\n      common.push(l2[i]);\n    }\n  }\n  return common;\n}\n",
    "  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "  let l1_len = l1.length;\n  let l2_len = l2.length;\n  let l1_i = 0;\n  let l2_i = 0;\n  let common = [];\n  while (l1_i < l1_len && l2_i < l2_len) {\n    if (l1[l1_i] === l2[l2_i]) {\n      common.push(l1[l1_i]);\n      l1_i++;\n      l2_i++;\n    } else if (l1[l1_i] > l2[l2_i]) {\n      l2_i++;\n    } else {\n      l1_i++;\n    }\n  }\n  return common;\n}\n",
    "    let result = [];\n    let i = 0;\n    let j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] === l2[j]) {\n            result.push(l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            i++;\n        }\n    }\n    return result;\n}\n",
    "  const l1_len = l1.length\n  const l2_len = l2.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < l1_len && j < l2_len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else if (l1[i] > l2[j]) {\n      j++\n    } else {\n      i++\n    }\n  }\n  return result\n}\n",
    "  let l1_len = l1.length\n  let l2_len = l2.length\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < l1_len && j < l2_len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else if (l1[i] > l2[j]) {\n      j++\n    } else {\n      i++\n    }\n  }\n  return result\n}\n",
    "    let l1_len = l1.length;\n    let l2_len = l2.length;\n    let l1_i = 0;\n    let l2_i = 0;\n    let common = [];\n    while (l1_i < l1_len && l2_i < l2_len) {\n        if (l1[l1_i] === l2[l2_i]) {\n            common.push(l1[l1_i]);\n            l1_i++;\n            l2_i++;\n        } else if (l1[l1_i] > l2[l2_i]) {\n            l2_i++;\n        } else {\n            l1_i++;\n        }\n    }\n    return common;\n}\n",
    "  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "  let result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "  let result = [];\n  let l1Len = l1.length;\n  let l2Len = l2.length;\n  let i = 0;\n  let j = 0;\n  while (i < l1Len && j < l2Len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "  const l1_len = l1.length\n  const l2_len = l2.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < l1_len && j < l2_len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else if (l1[i] > l2[j]) {\n      j++\n    } else {\n      i++\n    }\n  }\n  return result\n}\n",
    "  let l1_len = l1.length;\n  let l2_len = l2.length;\n  let l1_index = 0;\n  let l2_index = 0;\n  let common = [];\n  while (l1_index < l1_len && l2_index < l2_len) {\n    if (l1[l1_index] === l2[l2_index]) {\n      common.push(l1[l1_index]);\n      l1_index++;\n      l2_index++;\n    } else if (l1[l1_index] < l2[l2_index]) {\n      l1_index++;\n    } else {\n      l2_index++;\n    }\n  }\n  return common;\n}\n",
    "  let l1_len = l1.length\n  let l2_len = l2.length\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < l1_len && j < l2_len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else if (l1[i] > l2[j]) {\n      j++\n    } else {\n      i++\n    }\n  }\n  return result\n}\n",
    "  let l1_len = l1.length\n  let l2_len = l2.length\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < l1_len && j < l2_len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else if (l1[i] > l2[j]) {\n      j++\n    } else {\n      i++\n    }\n  }\n  return result\n}\n",
    "  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "    let l1_len = l1.length;\n    let l2_len = l2.length;\n    let l1_index = 0;\n    let l2_index = 0;\n    let result = [];\n    while (l1_index < l1_len && l2_index < l2_len) {\n        if (l1[l1_index] === l2[l2_index]) {\n            result.push(l1[l1_index]);\n            l1_index++;\n            l2_index++;\n        } else if (l1[l1_index] < l2[l2_index]) {\n            l1_index++;\n        } else {\n            l2_index++;\n        }\n    }\n    return result;\n}\n",
    "  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "  let common = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      common.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return common;\n}\n",
    "    let common = [];\n    for (let i = 0; i < l1.length; i++) {\n        for (let j = 0; j < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n                common.push(l1[i]);\n                break;\n            }\n        }\n    }\n    return common;\n}\n",
    "  const l1_len = l1.length\n  const l2_len = l2.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < l1_len && j < l2_len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else if (l1[i] < l2[j]) {\n      i++\n    } else {\n      j++\n    }\n  }\n  return result\n}\n",
    "  const l1_len = l1.length\n  const l2_len = l2.length\n  const l1_set = new Set(l1)\n  const l2_set = new Set(l2)\n  const common = []\n  for (let i = 0; i < l1_len; i++) {\n    if (l1_set.has(l1[i])) {\n      common.push(l1[i])\n    }\n  }\n  for (let i = 0; i < l2_len; i++) {\n    if (l2_set.has(l2[i])) {\n      common.push(l2[i])\n    }\n  }\n  return common\n}\n",
    "  const common = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      common.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return common;\n}\n",
    "  let l1_sorted = l1.sort();\n  let l2_sorted = l2.sort();\n  let common = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1_sorted.length && j < l2_sorted.length) {\n    if (l1_sorted[i] === l2_sorted[j]) {\n      common.push(l1_sorted[i]);\n      i++;\n      j++;\n    } else if (l1_sorted[i] < l2_sorted[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return common;\n}\n",
    "    let l1_len = l1.length, l2_len = l2.length;\n    let result = [];\n    for (let i = 0; i < l1_len; i++) {\n        for (let j = 0; j < l2_len; j++) {\n            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n                break;\n            }\n        }\n    }\n    return result;\n}\n",
    "    var l1_len = l1.length;\n    var l2_len = l2.length;\n    var l3_len = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l1_i = 0;\n    var l2_i = 0;\n    var l3_i = 0;\n    var l1_j = 0;\n    var l2_j = 0;\n    var l3_j = 0;\n    var l1_k = 0;\n    var l2_k = 0;\n    var l3_k = 0;\n    var l1_l = 0;\n    var l2_l = 0;\n    var l3_l = 0;\n    var l1_m = 0;\n    var l2_m = 0;\n    var l3_m = 0;\n    var l1_n = 0;\n    var l2_n = 0;\n    var l3_n = 0;\n    var l1_o = 0;\n    var l2_o = 0;\n    var l3_o = 0;\n    var l1_p = 0;\n    var l2_p = 0;\n    var l3_p = 0;\n    var l1_q = 0;\n    var l2_q = 0;\n    var l3_q = 0;\n    var l1_r = 0;\n    var l2_r = 0;\n    var l3_r = 0;\n    var l1_s = 0;\n    var l2_s = 0;\n    var l3_s = 0;\n    var l1_t = 0;\n    var l2_t = 0;\n    var l3_t = 0;\n    var l1_u = 0;\n    var l2_u = 0;\n    var l3_u = 0;\n    var l1_v = 0;\n    var l2_v = 0;\n    var l3_v = 0;\n    var l1_w = 0;\n    var l2_w = 0;\n    var l3_w = 0;\n    var l1_",
    "  const l1_len = l1.length\n  const l2_len = l2.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < l1_len && j < l2_len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else if (l1[i] < l2[j]) {\n      i++\n    } else {\n      j++\n    }\n  }\n  return result\n}\n",
    "  var result = [];\n  var i = 0;\n  var j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "    let result = [];\n    let i = 0;\n    let j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] === l2[j]) {\n            result.push(l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            i++;\n        }\n    }\n    return result;\n}\n",
    "  let l1_len = l1.length\n  let l2_len = l2.length\n  let l1_index = 0\n  let l2_index = 0\n  let result = []\n  while (l1_index < l1_len && l2_index < l2_len) {\n    if (l1[l1_index] === l2[l2_index]) {\n      result.push(l1[l1_index])\n      l1_index++\n      l2_index++\n    } else if (l1[l1_index] < l2[l2_index]) {\n      l1_index++\n    } else {\n      l2_index++\n    }\n  }\n  return result\n}\n",
    "    let result = [];\n    let i = 0;\n    let j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] === l2[j]) {\n            result.push(l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            i++;\n        }\n    }\n    return result;\n}\n",
    "    let l1_len = l1.length, l2_len = l2.length;\n    let result = [];\n    let i = 0, j = 0;\n    while (i < l1_len && j < l2_len) {\n        if (l1[i] === l2[j]) {\n            result.push(l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            i++;\n        }\n    }\n    return result;\n}\n",
    "  let common = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      common.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return common;\n}\n",
    "  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "    let l1_len = l1.length, l2_len = l2.length;\n    let i = 0, j = 0, common = [];\n    while (i < l1_len && j < l2_len) {\n        if (l1[i] === l2[j]) {\n            common.push(l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            i++;\n        }\n    }\n    return common;\n}\n",
    "    let common = [];\n    let i = 0;\n    let j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] === l2[j]) {\n            common.push(l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            i++;\n        }\n    }\n    return common;\n}\n",
    "  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "    let l1_len = l1.length;\n    let l2_len = l2.length;\n    let l1_set = new Set(l1);\n    let l2_set = new Set(l2);\n    let common_set = new Set();\n    for (let i = 0; i < l1_len; i++) {\n        if (l1_set.has(l1[i])) {\n            common_set.add(l1[i]);\n        }\n    }\n    for (let i = 0; i < l2_len; i++) {\n        if (l2_set.has(l2[i])) {\n            common_set.add(l2[i]);\n        }\n    }\n    return [...common_set];\n}\n",
    "  const l1Len = l1.length\n  const l2Len = l2.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < l1Len && j < l2Len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else if (l1[i] > l2[j]) {\n      j++\n    } else {\n      i++\n    }\n  }\n  return result\n}\n",
    "    let result = [];\n    let i = 0;\n    let j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] === l2[j]) {\n            result.push(l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            i++;\n        }\n    }\n    return result;\n}\n",
    "    let l1_len = l1.length;\n    let l2_len = l2.length;\n    let l1_set = new Set(l1);\n    let l2_set = new Set(l2);\n    let common = [];\n    for (let i = 0; i < l1_len; i++) {\n        if (l1_set.has(l1[i])) {\n            common.push(l1[i]);\n        }\n    }\n    for (let i = 0; i < l2_len; i++) {\n        if (l2_set.has(l2[i])) {\n            common.push(l2[i]);\n        }\n    }\n    return common;\n}\n",
    "    let result = [];\n    let i = 0;\n    let j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] === l2[j]) {\n            result.push(l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            i++;\n        }\n    }\n    return result;\n}\n",
    "  const result = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) > -1) {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n}\n",
    "    let l1_len = l1.length;\n    let l2_len = l2.length;\n    let result = [];\n    let i = 0;\n    let j = 0;\n    while (i < l1_len && j < l2_len) {\n        if (l1[i] === l2[j]) {\n            result.push(l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            i++;\n        }\n    }\n    return result;\n}\n",
    "  let l1_len = l1.length\n  let l2_len = l2.length\n  let l1_index = 0\n  let l2_index = 0\n  let result = []\n  while (l1_index < l1_len && l2_index < l2_len) {\n    if (l1[l1_index] === l2[l2_index]) {\n      result.push(l1[l1_index])\n      l1_index++\n      l2_index++\n    } else if (l1[l1_index] < l2[l2_index]) {\n      l1_index++\n    } else {\n      l2_index++\n    }\n  }\n  return result\n}\n",
    "    let result = [];\n    let i = 0;\n    let j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] === l2[j]) {\n            result.push(l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            i++;\n        }\n    }\n    return result;\n}\n",
    "  const result = [];\n  const l1Len = l1.length;\n  const l2Len = l2.length;\n  let i = 0;\n  let j = 0;\n  while (i < l1Len && j < l2Len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "  const l1_len = l1.length\n  const l2_len = l2.length\n  const l1_set = new Set(l1)\n  const l2_set = new Set(l2)\n  const common_set = new Set()\n  for (let i = 0; i < l1_len; i++) {\n    if (l1_set.has(l1[i])) {\n      common_set.add(l1[i])\n    }\n  }\n  for (let i = 0; i < l2_len; i++) {\n    if (l2_set.has(l2[i])) {\n      common_set.add(l2[i])\n    }\n  }\n  return [...common_set]\n}\n",
    "    let result = [];\n    for (let i = 0; i < l1.length; i++) {\n        for (let j = 0; j < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n                break;\n            }\n        }\n    }\n    return result;\n}\n",
    "  const result = [];\n  const l1Len = l1.length;\n  const l2Len = l2.length;\n  let i = 0;\n  let j = 0;\n  while (i < l1Len && j < l2Len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "  const result = [];\n  const l1Len = l1.length;\n  const l2Len = l2.length;\n  let i = 0;\n  let j = 0;\n  while (i < l1Len && j < l2Len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "  let l1_len = l1.length\n  let l2_len = l2.length\n  let l1_index = 0\n  let l2_index = 0\n  let common = []\n  while (l1_index < l1_len && l2_index < l2_len) {\n    if (l1[l1_index] === l2[l2_index]) {\n      common.push(l1[l1_index])\n      l1_index++\n      l2_index++\n    } else if (l1[l1_index] < l2[l2_index]) {\n      l1_index++\n    } else {\n      l2_index++\n    }\n  }\n  return common\n}\n",
    "  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "  const l1_len = l1.length;\n  const l2_len = l2.length;\n  const l1_set = new Set(l1);\n  const l2_set = new Set(l2);\n  const common = [];\n  for (let i = 0; i < l1_len; i++) {\n    if (l1_set.has(l1[i])) {\n      common.push(l1[i]);\n    }\n  }\n  for (let i = 0; i < l2_len; i++) {\n    if (l2_set.has(l2[i])) {\n      common.push(l2[i]);\n    }\n  }\n  return common;\n}\n",
    "  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "  let i = 0, j = 0, l = l1.length, m = l2.length;\n  let result = [];\n  while (i < l && j < m) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "  const l1_len = l1.length\n  const l2_len = l2.length\n  const l1_index = 0\n  const l2_index = 0\n  const result = []\n  while (l1_index < l1_len && l2_index < l2_len) {\n    if (l1[l1_index] === l2[l2_index]) {\n      result.push(l1[l1_index])\n      l1_index++\n      l2_index++\n    } else if (l1[l1_index] < l2[l2_index]) {\n      l1_index++\n    } else {\n      l2_index++\n    }\n  }\n  return result\n}\n",
    "  const l1_len = l1.length\n  const l2_len = l2.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < l1_len && j < l2_len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else if (l1[i] > l2[j]) {\n      j++\n    } else {\n      i++\n    }\n  }\n  return result\n}\n",
    "  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return result;\n}\n",
    "  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "    let l1_len = l1.length;\n    let l2_len = l2.length;\n    let l1_set = new Set(l1);\n    let l2_set = new Set(l2);\n    let common_set = new Set();\n    for (let i = 0; i < l1_len; i++) {\n        if (l1_set.has(l1[i])) {\n            common_set.add(l1[i]);\n        }\n    }\n    for (let i = 0; i < l2_len; i++) {\n        if (l2_set.has(l2[i])) {\n            common_set.add(l2[i]);\n        }\n    }\n    return [...common_set];\n}\n",
    "  let i = 0, j = 0, k = 0, l = 0;\n  let common = [];\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      common.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return common;\n}\n",
    "  const l1_len = l1.length\n  const l2_len = l2.length\n  const l1_set = new Set(l1)\n  const l2_set = new Set(l2)\n  const common = []\n  for (let i = 0; i < l1_len; i++) {\n    if (l1_set.has(l1[i])) {\n      if (l2_set.has(l2[i])) {\n        common.push(l1[i])\n      }\n    }\n  }\n  return common\n}\n",
    "  const result = [];\n  const l1Len = l1.length;\n  const l2Len = l2.length;\n  let i = 0;\n  let j = 0;\n  while (i < l1Len && j < l2Len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "  let l1_len = l1.length\n  let l2_len = l2.length\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < l1_len && j < l2_len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else if (l1[i] > l2[j]) {\n      j++\n    } else {\n      i++\n    }\n  }\n  return result\n}\n",
    "    let l1_len = l1.length;\n    let l2_len = l2.length;\n    let l1_set = new Set(l1);\n    let l2_set = new Set(l2);\n    let common_set = new Set();\n    for (let i = 0; i < l1_len; i++) {\n        if (l1_set.has(l1[i])) {\n            common_set.add(l1[i]);\n        }\n    }\n    for (let i = 0; i < l2_len; i++) {\n        if (l2_set.has(l2[i])) {\n            common_set.add(l2[i]);\n        }\n    }\n    return [...common_set];\n}\n",
    "  let l1_len = l1.length\n  let l2_len = l2.length\n  let i = 0\n  let j = 0\n  let result = []\n  while (i < l1_len && j < l2_len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else if (l1[i] > l2[j]) {\n      j++\n    } else {\n      i++\n    }\n  }\n  return result\n}\n",
    "  const l1_len = l1.length\n  const l2_len = l2.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < l1_len && j < l2_len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else if (l1[i] > l2[j]) {\n      j++\n    } else {\n      i++\n    }\n  }\n  return result\n}\n",
    "  const result = [];\n  const l1Len = l1.length;\n  const l2Len = l2.length;\n  let i = 0;\n  let j = 0;\n  while (i < l1Len && j < l2Len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "    let l1_len = l1.length;\n    let l2_len = l2.length;\n    let l3 = [];\n    let i = 0;\n    let j = 0;\n    while (i < l1_len && j < l2_len) {\n        if (l1[i] === l2[j]) {\n            l3.push(l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            i++;\n        }\n    }\n    return l3;\n}\n",
    "  const l1_len = l1.length\n  const l2_len = l2.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < l1_len && j < l2_len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else if (l1[i] > l2[j]) {\n      j++\n    } else {\n      i++\n    }\n  }\n  return result\n}\n",
    "    let l1_len = l1.length;\n    let l2_len = l2.length;\n    let l1_index = 0;\n    let l2_index = 0;\n    let common = [];\n    while (l1_index < l1_len && l2_index < l2_len) {\n        if (l1[l1_index] === l2[l2_index]) {\n            common.push(l1[l1_index]);\n            l1_index++;\n            l2_index++;\n        } else if (l1[l1_index] < l2[l2_index]) {\n            l1_index++;\n        } else {\n            l2_index++;\n        }\n    }\n    return common;\n}\n",
    "    let l1_len = l1.length;\n    let l2_len = l2.length;\n    let l1_set = new Set(l1);\n    let l2_set = new Set(l2);\n    let common = [];\n    for (let i = 0; i < l1_len; i++) {\n        if (l1_set.has(l1[i])) {\n            common.push(l1[i]);\n        }\n    }\n    for (let i = 0; i < l2_len; i++) {\n        if (l2_set.has(l2[i])) {\n            common.push(l2[i]);\n        }\n    }\n    return common;\n}\n",
    "  const result = [];\n  let i = 0, j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "    let result = [];\n    let i = 0;\n    let j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] === l2[j]) {\n            result.push(l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            i++;\n        }\n    }\n    return result;\n}\n",
    "  const l1_len = l1.length\n  const l2_len = l2.length\n  const l1_set = new Set(l1)\n  const l2_set = new Set(l2)\n  const common = []\n  for (let i = 0; i < l1_len; i++) {\n    if (l1_set.has(l1[i])) {\n      if (l2_set.has(l2[i])) {\n        common.push(l1[i])\n      }\n    }\n  }\n  return common\n}\n",
    "  let l1_len = l1.length\n  let l2_len = l2.length\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < l1_len && j < l2_len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else if (l1[i] > l2[j]) {\n      j++\n    } else {\n      i++\n    }\n  }\n  return result\n}\n",
    "  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "  const common = [];\n  for (let i = 0; i < l1.length; i++) {\n    for (let j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n        common.push(l1[i]);\n        break;\n      }\n    }\n  }\n  return common;\n}\n",
    "  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "  const l1_len = l1.length\n  const l2_len = l2.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < l1_len && j < l2_len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else if (l1[i] < l2[j]) {\n      i++\n    } else {\n      j++\n    }\n  }\n  return result\n}\n",
    "    let result = [];\n    let i = 0;\n    let j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] === l2[j]) {\n            result.push(l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return result;\n}\n",
    "  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "  const map = new Map();\n  for (let i = 0; i < l1.length; i++) {\n    map.set(l1[i], l1[i]);\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (!map.has(l2[i])) {\n      map.set(l2[i], l2[i]);\n    }\n  }\n  return [...map.keys()];\n}\n",
    "  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "    let l1_len = l1.length;\n    let l2_len = l2.length;\n    let l1_unique = [];\n    let l2_unique = [];\n    let l1_unique_len = 0;\n    let l2_unique_len = 0;\n    let l1_unique_index = 0;\n    let l2_unique_index = 0;\n    let l1_unique_index_end = 0;\n    let l2_unique_index_end = 0;\n    let l1_unique_index_end_len = 0;\n    let l2_unique_index_end_len = 0;\n    let l1_unique_index_end_len_end = 0;\n    let l2_unique_index_end_len_end = 0;\n    let l1_unique_index_end_len_end_end = 0;\n    let l2_unique_index_end_len_end_end = 0;\n    let l1_unique_index_end_len_end_end_end = 0;\n    let l2_unique_index_end_len_end_end_end = 0;\n    let l1_unique_index_end_len_end_end_end_end = 0;\n    let l2_unique_index_end_len_end_end_end_end = 0;\n    let l1_unique_index_end_len_end_end_end_end_end = 0;\n    let l2_unique_index_end_len_end_end_end_end_end = 0;\n    let l1_unique_index_end_len_end_end_end_end_end_end = 0;\n    let l2_unique_index_end_len_end_end_end_end_end_end = 0;\n    let l1_unique_index_end_len_end_end_end_end_end_end_end = 0;\n    let l2_unique_index_end_len_end_end_end_end_end_end_end = 0;\n    let l1_unique_index_end_len_end_end_end_end_end_end",
    "    let l1_len = l1.length;\n    let l2_len = l2.length;\n    let l1_set = new Set(l1);\n    let l2_set = new Set(l2);\n    let common = [];\n    for (let i = 0; i < l1_len; i++) {\n        if (l1_set.has(l1[i])) {\n            common.push(l1[i]);\n        }\n    }\n    for (let i = 0; i < l2_len; i++) {\n        if (l2_set.has(l2[i])) {\n            common.push(l2[i]);\n        }\n    }\n    return common;\n}\n",
    "  const l1_len = l1.length\n  const l2_len = l2.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < l1_len && j < l2_len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else if (l1[i] > l2[j]) {\n      j++\n    } else {\n      i++\n    }\n  }\n  return result\n}\n",
    "    let l1_len = l1.length;\n    let l2_len = l2.length;\n    let l1_set = new Set(l1);\n    let l2_set = new Set(l2);\n    let common_set = new Set();\n    for (let i = 0; i < l1_len; i++) {\n        if (l1_set.has(l1[i])) {\n            common_set.add(l1[i]);\n        }\n    }\n    for (let i = 0; i < l2_len; i++) {\n        if (l2_set.has(l2[i])) {\n            common_set.add(l2[i]);\n        }\n    }\n    return [...common_set];\n}\n",
    "  let l1_len = l1.length\n  let l2_len = l2.length\n  let l1_i = 0\n  let l2_i = 0\n  let common = []\n  while (l1_i < l1_len && l2_i < l2_len) {\n    if (l1[l1_i] === l2[l2_i]) {\n      common.push(l1[l1_i])\n      l1_i++\n      l2_i++\n    } else if (l1[l1_i] > l2[l2_i]) {\n      l2_i++\n    } else {\n      l1_i++\n    }\n  }\n  return common\n}\n",
    "  const map = new Map();\n  for (let i = 0; i < l1.length; i++) {\n    map.set(l1[i], 1);\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (map.has(l2[i])) {\n      map.delete(l2[i]);\n    }\n  }\n  return Array.from(map.keys());\n}\n",
    "  const result = [];\n  const l1Len = l1.length;\n  const l2Len = l2.length;\n  let i = 0;\n  let j = 0;\n  while (i < l1Len && j < l2Len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "  const l1_len = l1.length\n  const l2_len = l2.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < l1_len && j < l2_len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else if (l1[i] < l2[j]) {\n      i++\n    } else {\n      j++\n    }\n  }\n  return result\n}\n",
    "  const result = [];\n  const l1Len = l1.length;\n  const l2Len = l2.length;\n  let i = 0;\n  let j = 0;\n  while (i < l1Len && j < l2Len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "    let l1_len = l1.length, l2_len = l2.length;\n    let result = [];\n    let i = 0, j = 0;\n    while (i < l1_len && j < l2_len) {\n        if (l1[i] === l2[j]) {\n            result.push(l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return result;\n}\n",
    "  const l1_len = l1.length\n  const l2_len = l2.length\n  const l1_i = 0\n  const l2_i = 0\n  const result = []\n  while (l1_i < l1_len && l2_i < l2_len) {\n    if (l1[l1_i] === l2[l2_i]) {\n      result.push(l1[l1_i])\n      l1_i++\n      l2_i++\n    } else if (l1[l1_i] > l2[l2_i]) {\n      l2_i++\n    } else {\n      l1_i++\n    }\n  }\n  return result\n}\n",
    "    let common = [];\n    let i = 0;\n    let j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] === l2[j]) {\n            common.push(l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return common;\n}\n",
    "  let l1_sorted = l1.sort();\n  let l2_sorted = l2.sort();\n  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1_sorted.length && j < l2_sorted.length) {\n    if (l1_sorted[i] === l2_sorted[j]) {\n      result.push(l1_sorted[i]);\n      i++;\n      j++;\n    } else if (l1_sorted[i] < l2_sorted[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return result;\n}\n",
    "  let l1_sorted = l1.sort();\n  let l2_sorted = l2.sort();\n  let l1_unique = [];\n  let l2_unique = [];\n  let l1_unique_index = 0;\n  let l2_unique_index = 0;\n  let l1_unique_count = 0;\n  let l2_unique_count = 0;\n  let common_count = 0;\n  while (l1_unique_index < l1_sorted.length && l2_unique_index < l2_sorted.length) {\n    if (l1_sorted[l1_unique_index] === l2_sorted[l2_unique_index]) {\n      l1_unique[l1_unique_count] = l1_sorted[l1_unique_index];\n      l2_unique[l2_unique_count] = l2_sorted[l2_unique_index];\n      l1_unique_count++;\n      l2_unique_count++;\n      l1_unique_index++;\n      l2_unique_index++;\n      common_count++;\n    } else if (l1_sorted[l1_unique_index] < l2_sorted[l2_unique_index]) {\n      l1_unique_index++;\n    } else {\n      l2_unique_index++;\n    }\n  }\n  return l1_unique.slice(0, common_count);\n}\n",
    "  const result = [];\n  const l1Len = l1.length;\n  const l2Len = l2.length;\n  let i = 0;\n  let j = 0;\n  while (i < l1Len && j < l2Len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "    let result = [];\n    let i = 0;\n    let j = 0;\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] === l2[j]) {\n            result.push(l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            i++;\n        }\n    }\n    return result;\n}\n",
    "  let l1_len = l1.length\n  let l2_len = l2.length\n  let l1_i = 0\n  let l2_i = 0\n  let common = []\n  while (l1_i < l1_len && l2_i < l2_len) {\n    if (l1[l1_i] === l2[l2_i]) {\n      common.push(l1[l1_i])\n      l1_i++\n      l2_i++\n    } else if (l1[l1_i] > l2[l2_i]) {\n      l2_i++\n    } else {\n      l1_i++\n    }\n  }\n  return common\n}\n",
    "  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "  const result = [];\n  const l1Len = l1.length;\n  const l2Len = l2.length;\n  let i = 0;\n  let j = 0;\n  while (i < l1Len && j < l2Len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "  const result = [];\n  const l1Len = l1.length;\n  const l2Len = l2.length;\n  let i = 0;\n  let j = 0;\n  while (i < l1Len && j < l2Len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "  const result = [];\n  const l1_len = l1.length;\n  const l2_len = l2.length;\n  let i = 0;\n  let j = 0;\n  while (i < l1_len && j < l2_len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "  let l1_len = l1.length;\n  let l2_len = l2.length;\n  let l3_len = 0;\n  let l4_len = 0;\n  let l5_len = 0;\n  let l6_len = 0;\n  let l7_len = 0;\n  let l8_len = 0;\n  let l9_len = 0;\n  let l10_len = 0;\n  let l11_len = 0;\n  let l12_len = 0;\n  let l13_len = 0;\n  let l14_len = 0;\n  let l15_len = 0;\n  let l16_len = 0;\n  let l17_len = 0;\n  let l18_len = 0;\n  let l19_len = 0;\n  let l20_len = 0;\n  let l21_len = 0;\n  let l22_len = 0;\n  let l23_len = 0;\n  let l24_len = 0;\n  let l25_len = 0;\n  let l26_len = 0;\n  let l27_len = 0;\n  let l28_len = 0;\n  let l29_len = 0;\n  let l30_len = 0;\n  let l31_len = 0;\n  let l32_len = 0;\n  let l33_len = 0;\n  let l34_len = 0;\n  let l35_len = 0;\n  let l36_len = 0;\n  let l37_len = 0;\n  let l38_len = 0;\n  let l39_len = 0;\n  let l40_len = 0;\n  let l41_len = 0;\n  let l42_len = 0;\n  let l43_len = 0;\n  let l44_len = 0;\n  let l45_len = 0;\n  let l46_len = 0;\n  let l47_len = 0;\n  let l48_len = 0;\n  let l49_len = 0;\n  let l50_len = 0;\n  let l51_len",
    "  let l1_len = l1.length\n  let l2_len = l2.length\n  let l1_index = 0\n  let l2_index = 0\n  let common = []\n  while (l1_index < l1_len && l2_index < l2_len) {\n    if (l1[l1_index] === l2[l2_index]) {\n      common.push(l1[l1_index])\n      l1_index++\n      l2_index++\n    } else if (l1[l1_index] < l2[l2_index]) {\n      l1_index++\n    } else {\n      l2_index++\n    }\n  }\n  return common\n}\n",
    "  let l1_len = l1.length\n  let l2_len = l2.length\n  let l1_index = 0\n  let l2_index = 0\n  let result = []\n  while (l1_index < l1_len && l2_index < l2_len) {\n    if (l1[l1_index] === l2[l2_index]) {\n      result.push(l1[l1_index])\n      l1_index++\n      l2_index++\n    } else if (l1[l1_index] < l2[l2_index]) {\n      l1_index++\n    } else {\n      l2_index++\n    }\n  }\n  return result\n}\n",
    "  const result = [];\n  const l1Len = l1.length;\n  const l2Len = l2.length;\n  let i = 0;\n  let j = 0;\n  while (i < l1Len && j < l2Len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "  const result = [];\n  const l1Len = l1.length;\n  const l2Len = l2.length;\n  let i = 0;\n  let j = 0;\n  while (i < l1Len && j < l2Len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "  const result = [];\n  const l1Len = l1.length;\n  const l2Len = l2.length;\n  let i = 0;\n  let j = 0;\n  while (i < l1Len && j < l2Len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "  const map = new Map();\n  for (let i = 0; i < l1.length; i++) {\n    map.set(l1[i], true);\n  }\n  const result = [];\n  for (let i = 0; i < l2.length; i++) {\n    if (map.has(l2[i])) {\n      result.push(l2[i]);\n    }\n  }\n  return result;\n}\n",
    "  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return result;\n}\n",
    "  const result = [];\n  const l1Len = l1.length;\n  const l2Len = l2.length;\n  let i = 0;\n  let j = 0;\n  while (i < l1Len && j < l2Len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "    let l1_len = l1.length;\n    let l2_len = l2.length;\n    let result = [];\n    let i = 0;\n    let j = 0;\n    while (i < l1_len && j < l2_len) {\n        if (l1[i] === l2[j]) {\n            result.push(l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            i++;\n        }\n    }\n    return result;\n}\n",
    "  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "  const l1Len = l1.length\n  const l2Len = l2.length\n  const l1Idx = 0\n  const l2Idx = 0\n  const common = []\n  let i = 0\n  let j = 0\n  while (i < l1Len && j < l2Len) {\n    if (l1[i] === l2[j]) {\n      common.push(l1[i])\n      i++\n      j++\n    } else if (l1[i] > l2[j]) {\n      j++\n    } else {\n      i++\n    }\n  }\n  return common\n}\n",
    "  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "  let l1_len = l1.length;\n  let l2_len = l2.length;\n  let l1_set = new Set(l1);\n  let l2_set = new Set(l2);\n  let common = [];\n  for (let i = 0; i < l1_len; i++) {\n    if (l1_set.has(l1[i])) {\n      common.push(l1[i]);\n    }\n  }\n  for (let i = 0; i < l2_len; i++) {\n    if (l2_set.has(l2[i])) {\n      common.push(l2[i]);\n    }\n  }\n  return common;\n}\n",
    "  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return result;\n}\n",
    "    let l1_len = l1.length, l2_len = l2.length;\n    let result = [];\n    let i = 0, j = 0;\n    while (i < l1_len && j < l2_len) {\n        if (l1[i] === l2[j]) {\n            result.push(l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] > l2[j]) {\n            j++;\n        } else {\n            i++;\n        }\n    }\n    return result;\n}\n",
    "  const l1_len = l1.length\n  const l2_len = l2.length\n  const l1_set = new Set(l1)\n  const l2_set = new Set(l2)\n  const common_set = new Set()\n  for (let i = 0; i < l1_len; i++) {\n    if (l1_set.has(l1[i])) {\n      common_set.add(l1[i])\n    }\n  }\n  for (let i = 0; i < l2_len; i++) {\n    if (l2_set.has(l2[i])) {\n      common_set.add(l2[i])\n    }\n  }\n  return [...common_set]\n}\n",
    "  var result = [];\n  var i = 0;\n  var j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "  let i = 0, j = 0, result = [];\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n",
    "  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n"
  ],
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ]
}