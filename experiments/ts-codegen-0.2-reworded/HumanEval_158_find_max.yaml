name: HumanEval_158_find_max
language: ts
prompt: "//Write a function that accepts an array of strings.\n// The array contains\
  \ different words. Return the word with maximum number\n// of unique characters.\
  \ If multiple strings have maximum number of unique\n// characters, return the one\
  \ which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\"\
  , \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n\
  // \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction\
  \ find_max(words: string[]): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
  , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
  enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
  , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
  );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
  ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
  rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\"\
  , \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"\
  a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"\
  play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();"
completions: ["    let max_count = 0;\n    let max_word = \"\";\n    for (let i =\
    \ 0; i < words.length; i++) {\n        let count = 0;\n        for (let j = 0;\
    \ j < words[i].length; j++) {\n            if (words[i][j] !== words[i][j].toLowerCase())\
    \ {\n                count++;\n            }\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max_word = words[i];\n      \
    \  }\n    }\n    return max_word;\n}\n", "    let max_count = 0\n    let max_index\
    \ = 0\n    for (let i = 0; i < words.length; i++) {\n        let count = 0\n \
    \       for (let j = 0; j < words[i].length; j++) {\n            if (words[i][j]\
    \ === ' ') {\n                count += 1\n            }\n        }\n        if\
    \ (count > max_count) {\n            max_count = count\n            max_index\
    \ = i\n        }\n    }\n    return words[max_index]\n}\n", "    let max_count\
    \ = 0\n    let max_word = \"\"\n    for (let i = 0; i < words.length; i++) {\n\
    \        let count = 0\n        for (let j = 0; j < words[i].length; j++) {\n\
    \            if (words[i][j] === ' ') {\n                count += 1\n        \
    \    }\n        }\n        if (count > max_count) {\n            max_count = count\n\
    \            max_word = words[i]\n        }\n    }\n    return max_word\n}\n",
  "    let max = 0;\n    let max_word = \"\";\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let count = 0;\n        for (let j = 0; j < words[i].length;\
    \ j++) {\n            if (words[i][j] === \"\") {\n                count++;\n\
    \            }\n        }\n        if (count > max) {\n            max = count;\n\
    \            max_word = words[i];\n        }\n    }\n    return max_word;\n}\n",
  "    let max_count = 0;\n    let max_word = \"\";\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let count = 0;\n        for (let j = 0; j < words[i].length;\
    \ j++) {\n            if (words[i][j] !== \"\") {\n                count++;\n\
    \            }\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max_word = words[i];\n        }\n    }\n    return max_word;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
