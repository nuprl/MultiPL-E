name: HumanEval_36_fizz_buzz
language: ts
prompt: "//Return the number of times the digit 7 appears in integers less than n\
  \ which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
  // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n\
  \  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
  \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
  \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
  }\n\ntest();"
completions: ["  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 11 ===\
    \ 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n}\n", " \
    \ let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i\
    \ % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n}\n", "  let count\
    \ = 0\n  for (let i = 0; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0)\
    \ {\n      count++\n    }\n  }\n  return count\n}\n", "  let count = 0;\n  for\
    \ (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\n", "  let count = 0;\n  for (let i = 0; i < n;\
    \ i++) {\n    if (i % 3 === 0 && i % 5 === 0) {\n      count++;\n    } else if\
    \ (i % 3 === 0) {\n      count++;\n    } else if (i % 5 === 0) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
