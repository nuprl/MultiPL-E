name: HumanEval_12_longest
language: ts
prompt: "//Out of array of strings, return the longest one. Return the first one in\
  \ case of multiple\n// strings of the same length. Return undefined in case the\
  \ input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\"\
  , \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\
  \nfunction longest(strings: string[]): string | undefined {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = longest;\n  assert.deepEqual(candidate([]),undefined);\n\
  \  assert.deepEqual(candidate([\"x\", \"y\", \"z\"]),\"x\");\n  assert.deepEqual(candidate([\"\
  x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]),\"zzzz\");\n}\n\ntest();"
completions: ["  if (strings.length === 0) {\n    return undefined;\n  }\n\n  let\
    \ maxLength = 0;\n  let maxString = \"\";\n\n  for (let i = 0; i < strings.length;\
    \ i++) {\n    if (strings[i].length > maxLength) {\n      maxLength = strings[i].length;\n\
    \      maxString = strings[i];\n    }\n  }\n\n  return maxString;\n}\n", "  if\
    \ (strings.length === 0) {\n    return undefined;\n  }\n\n  let maxLength = 0;\n\
    \  let maxString = strings[0];\n\n  for (let i = 0; i < strings.length; i++) {\n\
    \    if (strings[i].length > maxLength) {\n      maxLength = strings[i].length;\n\
    \      maxString = strings[i];\n    }\n  }\n\n  return maxString;\n}\n", "  if\
    \ (strings.length === 0) {\n    return undefined;\n  }\n\n  let max = strings[0];\n\
    \  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > max.length)\
    \ {\n      max = strings[i];\n    }\n  }\n\n  return max;\n}\n", "  if (!strings.length)\
    \ {\n    return undefined;\n  }\n  let maxLength = 0;\n  let maxString = \"\"\
    ;\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].length > maxLength)\
    \ {\n      maxLength = strings[i].length;\n      maxString = strings[i];\n   \
    \ }\n  }\n  return maxString;\n}\n", "  if (strings.length === 0) {\n    return\
    \ undefined;\n  }\n  let max = strings[0];\n  for (let i = 1; i < strings.length;\
    \ i++) {\n    if (strings[i].length > max.length) {\n      max = strings[i];\n\
    \    }\n  }\n  return max;\n}\n", "  if (strings.length === 0) {\n    return undefined;\n\
    \  }\n\n  let maxLength = 0;\n  let maxString = \"\";\n\n  for (let i = 0; i <\
    \ strings.length; i++) {\n    if (strings[i].length > maxLength) {\n      maxLength\
    \ = strings[i].length;\n      maxString = strings[i];\n    }\n  }\n\n  return\
    \ maxString;\n}\n", "  if (!strings.length) {\n    return undefined;\n  }\n\n\
    \  let maxLength = 0;\n  let maxString = \"\";\n\n  for (let i = 0; i < strings.length;\
    \ i++) {\n    if (strings[i].length > maxLength) {\n      maxLength = strings[i].length;\n\
    \      maxString = strings[i];\n    }\n  }\n\n  return maxString;\n}\n", "  if\
    \ (!strings.length) {\n    return undefined;\n  }\n\n  let maxLength = 0;\n  let\
    \ maxString = \"\";\n\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].length\
    \ > maxLength) {\n      maxLength = strings[i].length;\n      maxString = strings[i];\n\
    \    }\n  }\n\n  return maxString;\n}\n", "  if (!strings.length) {\n    return\
    \ undefined;\n  }\n  let max = strings[0];\n  for (let i = 1; i < strings.length;\
    \ i++) {\n    if (strings[i].length > max.length) {\n      max = strings[i];\n\
    \    }\n  }\n  return max;\n}\n", "  if (strings.length === 0) {\n    return undefined;\n\
    \  }\n\n  let maxLength = 0;\n  let maxString = \"\";\n\n  for (let i = 0; i <\
    \ strings.length; i++) {\n    if (strings[i].length > maxLength) {\n      maxLength\
    \ = strings[i].length;\n      maxString = strings[i];\n    }\n  }\n\n  return\
    \ maxString;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
