name: HumanEval_102_choose_num
language: ts
prompt: "//This function takes two positive numbers x and y and returns the\n// biggest\
  \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
  \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
  \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x: number, y:\
  \ number): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = choose_num;\n  assert.deepEqual(candidate(12, 15),14);\n\
  \  assert.deepEqual(candidate(13, 12),-1);\n  assert.deepEqual(candidate(33, 12354),12354);\n\
  \  assert.deepEqual(candidate(5234, 5233),-1);\n  assert.deepEqual(candidate(6,\
  \ 29),28);\n  assert.deepEqual(candidate(27, 10),-1);\n  assert.deepEqual(candidate(7,\
  \ 7),-1);\n  assert.deepEqual(candidate(546, 546),546);\n}\n\ntest();"
completions: ["    let i = x;\n    let j = y;\n    let result = -1;\n    while (i\
    \ <= j) {\n        if (i % 2 === 0 && j % 2 === 0) {\n            result = i;\n\
    \            break;\n        }\n        i += 1;\n        j -= 1;\n    }\n    return\
    \ result;\n}\n", "    let i = x;\n    let j = y;\n    let k = 0;\n    while (i\
    \ <= j) {\n        if (i % 2 == 0) {\n            k = i;\n        }\n        i\
    \ += 1;\n    }\n    return k;\n}\n", "    let i = x;\n    let j = y;\n    let\
    \ max = -1;\n    while (i <= j) {\n        if (i % 2 === 0 && j % 2 === 0) {\n\
    \            max = Math.max(max, i * j);\n        }\n        i += 1;\n       \
    \ j -= 1;\n    }\n    return max;\n}\n", "  let num = -1;\n  for (let i = x; i\
    \ <= y; i++) {\n    if (i % 2 === 0) {\n      num = i;\n      break;\n    }\n\
    \  }\n  return num;\n}\n", "  let i = 0;\n  let j = 0;\n  let num = -1;\n  while\
    \ (i < x && j < y) {\n    if (i % 2 === 0 && j % 2 === 0) {\n      num = Math.max(num,\
    \ i * j);\n    }\n    if (i % 2 === 0) {\n      i++;\n    } else {\n      j++;\n\
    \    }\n  }\n  return num;\n}\n", "  if (x > y) {\n    return -1;\n  }\n  let\
    \ num = 0;\n  for (let i = x; i <= y; i++) {\n    if (i % 2 === 0) {\n      num\
    \ = i;\n      break;\n    }\n  }\n  return num;\n}\n", "    let num = -1;\n  \
    \  for (let i = x; i <= y; i++) {\n        if (i % 2 === 0) {\n            num\
    \ = i;\n            break;\n        }\n    }\n    return num;\n}\n", "  if (x\
    \ > y) {\n    return -1;\n  }\n  let result = -1;\n  for (let i = x; i <= y; i\
    \ += 2) {\n    if (i % 2 === 0) {\n      result = i;\n    }\n  }\n  return result;\n\
    }\n", "  let i = x;\n  let j = y;\n  let max = -1;\n  while (i <= j) {\n    let\
    \ temp = i + j;\n    if (temp % 2 === 0 && temp >= x && temp <= y) {\n      max\
    \ = temp;\n    }\n    i++;\n    j--;\n  }\n  return max;\n}\n", "  let nums =\
    \ [];\n  for (let i = x; i <= y; i++) {\n    nums.push(i);\n  }\n  let max_num\
    \ = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > max_num)\
    \ {\n      max_num = nums[i];\n    }\n  }\n  if (max_num % 2 == 0) {\n    return\
    \ max_num;\n  } else {\n    return -1;\n  }\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
