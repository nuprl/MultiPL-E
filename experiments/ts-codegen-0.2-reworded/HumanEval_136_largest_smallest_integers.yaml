name: HumanEval_136_largest_smallest_integers
language: ts
prompt: "//Create a function that returns an array (a, b), where 'a' is\n// the largest\
  \ of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n\
  // If there is no negative or positive integers, return them as undefined.\n// Examples:\n\
  // >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>>\
  \ largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n\
  // [undefined, undefined]\nfunction largest_smallest_integers(lst: number[]): [number\
  \ | undefined, number | undefined] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
  \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5,\
  \ 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2,\
  \ 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7,\
  \ 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
  \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1,\
  \ -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6,\
  \ 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3,\
  \ 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\n\
  test();"
completions: ["  let a = undefined;\n  let b = undefined;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] < 0) {\n      if (a === undefined) {\n        a = lst[i];\n\
    \      } else if (lst[i] > a) {\n        a = lst[i];\n      }\n    } else if (lst[i]\
    \ > 0) {\n      if (b === undefined) {\n        b = lst[i];\n      } else if (lst[i]\
    \ < b) {\n        b = lst[i];\n      }\n    }\n  }\n  return [a, b];\n}\n", " \
    \ let a = undefined;\n  let b = undefined;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] < 0) {\n      a = lst[i];\n    } else if (lst[i] > 0)\
    \ {\n      b = lst[i];\n    }\n  }\n  return [a, b];\n}\n", "  let max = -Infinity\n\
    \  let min = Infinity\n  let result = []\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    if (lst[i] < min) {\n      min = lst[i]\n    }\n    if (lst[i] > max)\
    \ {\n      max = lst[i]\n    }\n  }\n  if (min === Infinity || max === -Infinity)\
    \ {\n    result = [undefined, undefined]\n  } else {\n    result = [max, min]\n\
    \  }\n  return result\n}\n", "  let min = Infinity\n  let max = -Infinity\n  for\
    \ (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n\
    \    }\n    if (lst[i] > max) {\n      max = lst[i]\n    }\n  }\n  if (min ===\
    \ Infinity || max === -Infinity) {\n    return [undefined, undefined]\n  }\n \
    \ return [max, min]\n}\n", "  let min = Infinity;\n  let max = -Infinity;\n  let\
    \ min_index = 0;\n  let max_index = 0;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    if (lst[i] < min) {\n      min = lst[i];\n      min_index = i;\n    }\n\
    \    if (lst[i] > max) {\n      max = lst[i];\n      max_index = i;\n    }\n \
    \ }\n  if (min === Infinity) {\n    return [undefined, undefined];\n  }\n  return\
    \ [min, lst[min_index]];\n}\n", "  let a = undefined;\n  let b = undefined;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      a = lst[i];\n\
    \    } else if (lst[i] > 0) {\n      b = lst[i];\n    }\n  }\n  return [a, b];\n\
    }\n", "  let a = undefined;\n  let b = undefined;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] < 0) {\n      if (a === undefined) {\n        a = lst[i];\n\
    \      } else if (lst[i] > a) {\n        a = lst[i];\n      }\n    } else if (lst[i]\
    \ > 0) {\n      if (b === undefined) {\n        b = lst[i];\n      } else if (lst[i]\
    \ < b) {\n        b = lst[i];\n      }\n    }\n  }\n  return [a, b];\n}\n", " \
    \ if (lst.length === 0) {\n    return [undefined, undefined];\n  }\n\n  let max\
    \ = -Infinity;\n  let min = Infinity;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max)\
    \ {\n      max = lst[i];\n    }\n  }\n\n  return [max, min];\n}\n", "  let max\
    \ = -Infinity\n  let min = Infinity\n  let res = []\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n    }\n    if (lst[i] <\
    \ min) {\n      min = lst[i]\n    }\n  }\n  if (max === -Infinity) {\n    res\
    \ = [undefined, undefined]\n  } else {\n    res = [max, min]\n  }\n  return res\n\
    }\n", "  const neg = lst.filter(x => x < 0);\n  const pos = lst.filter(x => x\
    \ > 0);\n  if (neg.length === 0 && pos.length === 0) {\n    return [undefined,\
    \ undefined];\n  }\n  if (neg.length === 0) {\n    return [undefined, pos[0]];\n\
    \  }\n  if (pos.length === 0) {\n    return [neg[0], undefined];\n  }\n  return\
    \ [Math.max(...neg), Math.min(...pos)];\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
