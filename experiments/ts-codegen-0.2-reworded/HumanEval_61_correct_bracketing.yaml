name: HumanEval_61_correct_bracketing
language: ts
prompt: "//brackets is a string of \"(\" and \")\".\n// return true if every opening\
  \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
  )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
  (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets:\
  \ string): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
  ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
  ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
  ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
  )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
  ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
  (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"\
  ()()(()())()))()\"),false);\n}\n\ntest();"
completions: ["  let opening_bracket_count = 0\n  let closing_bracket_count = 0\n\
    \  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '(') {\n\
    \      opening_bracket_count++\n    } else if (brackets[i] === ')') {\n      closing_bracket_count++\n\
    \    }\n  }\n  return opening_bracket_count === closing_bracket_count\n}\n", " \
    \ let opening_bracket_count = 0\n  let closing_bracket_count = 0\n  for (let i\
    \ = 0; i < brackets.length; i++) {\n    if (brackets[i] === '(') {\n      opening_bracket_count++\n\
    \    } else if (brackets[i] === ')') {\n      closing_bracket_count++\n    }\n\
    \  }\n  return opening_bracket_count === closing_bracket_count\n}\n", "  let opening_bracket_count\
    \ = 0\n  let closing_bracket_count = 0\n  for (let i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] === '(') {\n      opening_bracket_count++\n    }\
    \ else if (brackets[i] === ')') {\n      closing_bracket_count++\n    }\n  }\n\
    \  return opening_bracket_count === closing_bracket_count\n}\n", "  let opening_bracket_count\
    \ = 0\n  let closing_bracket_count = 0\n  for (let i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] === '(') {\n      opening_bracket_count++\n    }\
    \ else if (brackets[i] === ')') {\n      closing_bracket_count++\n    }\n  }\n\
    \  return opening_bracket_count === closing_bracket_count\n}\n", "  let openingBrackets\
    \ = 0\n  let closingBrackets = 0\n\n  for (let i = 0; i < brackets.length; i++)\
    \ {\n    if (brackets[i] === '(') {\n      openingBrackets++\n    } else if (brackets[i]\
    \ === ')') {\n      closingBrackets++\n    }\n  }\n\n  return openingBrackets\
    \ === closingBrackets\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
