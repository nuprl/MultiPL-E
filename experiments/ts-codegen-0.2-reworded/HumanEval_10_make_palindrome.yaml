name: HumanEval_10_make_palindrome
language: ts
prompt: "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm\
  \ idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n\
  // - Append to the end of the string reverse of a string prefix that comes before\
  \ the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"\
  cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string:\
  \ string): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = make_palindrome;\n  assert.deepEqual(candidate(\"\"\
  ),\"\");\n  assert.deepEqual(candidate(\"x\"),\"x\");\n  assert.deepEqual(candidate(\"\
  xyz\"),\"xyzyx\");\n  assert.deepEqual(candidate(\"xyx\"),\"xyx\");\n  assert.deepEqual(candidate(\"\
  jerry\"),\"jerryrrej\");\n}\n\ntest();"
completions: ["    let longest_palindrome = \"\";\n    let longest_palindrome_index\
    \ = -1;\n    let i = 0;\n    let j = 0;\n    while (i < string.length) {\n   \
    \     let palindrome = string.substr(i, string.length - i);\n        if (is_palindrome(palindrome))\
    \ {\n            if (palindrome.length > longest_palindrome.length) {\n      \
    \          longest_palindrome = palindrome;\n                longest_palindrome_index\
    \ = i;\n            }\n        }\n        i++;\n    }\n    if (longest_palindrome_index\
    \ === -1) {\n        return string;\n    }\n    let prefix = string.substr(0,\
    \ longest_palindrome_index);\n    let suffix = string.substr(longest_palindrome_index\
    \ + 1);\n    let reversed_prefix = reverse(prefix);\n    let reversed_suffix =\
    \ reverse(suffix);\n    let new_string = reversed_prefix + reversed_suffix;\n\
    \    return new_string;\n}\n\nfunction is_palindrome(string: string): boolean\
    \ {\n    let i = 0;\n    let j = string.length - 1;\n    while (i < j) {\n   \
    \     if (string[i] !== string[j]) {\n            return false;\n        }\n \
    \       i++;\n        j--;\n    }\n    return true;\n}\n\nfunction reverse(string:\
    \ string): string {\n    let reversed_string = \"\";\n    let i = string.length\
    \ - 1;\n    let j = 0;\n    while (i >= 0) {\n        reversed_string += string[i];\n\
    \        i--;\n    }\n    return reversed_string;\n}\n", "  let longest_palindrome\
    \ = find_longest_palindrome(string);\n  let reversed_prefix = reverse_string(string.slice(0,\
    \ longest_palindrome.length));\n  return string + reversed_prefix;\n}\n\nfunction\
    \ find_longest_palindrome(string: string): string {\n  let longest_palindrome\
    \ = \"\";\n  let current_palindrome = \"\";\n  let current_palindrome_length =\
    \ 0;\n  let current_palindrome_index = 0;\n  let current_palindrome_index_end\
    \ = 0;\n  let current_palindrome_index_start = 0;\n  let current_palindrome_index_start_end\
    \ = 0;\n  let current_palindrome_index_start_start = 0;\n  let current_palindrome_index_start_start_end\
    \ = 0;\n  let current_palindrome_index_start_start_start = 0;\n  let current_palindrome_index_start_start_start_end\
    \ = 0;\n  let current_palindrome_index_start_start_start_start = 0;\n  let current_palindrome_index_start_start_start_start_end\
    \ = 0;\n  let current_palindrome_index_start_start_start_start_start = 0;\n  let\
    \ current_palindrome_index_start_start_start_start_start_end = 0;\n  let current_palindrome_index_start_start_start_start_start_start\
    \ = 0;\n  let current_palindrome_index_start_start_start_start_start_start_end\
    \ = 0;\n  let current_palindrome_index_start_start_start_start_start_start_start\
    \ = 0;\n  let current_palindrome_index_start_start_start_start_start_start_start_end\
    \ = 0;\n  let current_palindrome_index_start_start_start_start_start_start_start_start\
    \ = 0;\n  let current_palindrome_index_start_start_start_start_start_start_start_start_end\
    \ = 0;\n  let current_palindrome", "  let longest_palindrome = find_longest_palindrome(string);\n\
    \  let reversed_prefix = reverse_string(string.slice(0, longest_palindrome.length));\n\
    \  return string + reversed_prefix;\n}\n", "    let longest_palindrome = string.match(/^(.*)$/);\n\
    \    let reverse_of_longest_palindrome = longest_palindrome[1].split(\"\").reverse().join(\"\
    \");\n    return string + reverse_of_longest_palindrome;\n}\n", "    // Find the\
    \ longest palindrome that begins with a supplied string.\n    let longest_palindrome\
    \ = string.slice(0, -1);\n    let i = 0;\n    let j = string.length - 1;\n   \
    \ while (i < j) {\n        let palindrome = string.slice(i, j + 1);\n        if\
    \ (palindrome === palindrome.split('').reverse().join('')) {\n            longest_palindrome\
    \ = palindrome;\n            break;\n        }\n        i++;\n        j--;\n \
    \   }\n    // Append to the end of the string reverse of a string prefix that\
    \ comes before the palindromic suffix.\n    let reverse_string = longest_palindrome.split('').reverse().join('');\n\
    \    return string.slice(0, -reverse_string.length) + reverse_string;\n}\n", " \
    \   let longest_palindrome = \"\";\n    let longest_palindrome_length = 0;\n \
    \   let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n\
    \    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n\
    \    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n\
    \    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n\
    \    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n\
    \    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n\
    \    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n\
    \    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n\
    \    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n\
    \    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n\
    \    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n\
    \    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n\
    \    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n\
    \    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0",
  "    let longest_palindrome = find_longest_palindrome(string);\n    let reversed_prefix\
    \ = reverse_string(string.slice(0, longest_palindrome.length));\n    return string\
    \ + reversed_prefix;\n}\n\nfunction find_longest_palindrome(string: string): string\
    \ {\n    let longest_palindrome = \"\";\n    let current_palindrome = \"\";\n\
    \    let current_length = 0;\n    for (let i = 0; i < string.length; i++) {\n\
    \        let current_char = string[i];\n        if (is_palindrome(current_char))\
    \ {\n            current_palindrome += current_char;\n            current_length\
    \ += 1;\n        } else {\n            if (current_length > longest_length) {\n\
    \                longest_palindrome = current_palindrome;\n                longest_length\
    \ = current_length;\n            }\n            current_palindrome = \"\";\n \
    \           current_length = 0;\n        }\n    }\n    if (current_length > longest_length)\
    \ {\n        longest_palindrome = current_palindrome;\n        longest_length\
    \ = current_length;\n    }\n    return longest_palindrome;\n}\n\nfunction is_palindrome(char:\
    \ string): boolean {\n    let is_palindrome = true;\n    for (let i = 0; i < char.length\
    \ / 2; i++) {\n        if (char[i] !== char[char.length - 1 - i]) {\n        \
    \    is_palindrome = false;\n            break;\n        }\n    }\n    return\
    \ is_palindrome;\n}\n\nfunction reverse_string(string: string): string {\n   \
    \ let reversed_string = \"\";\n    for (let i = string.length - 1; i >= 0; i--)\
    \ {\n        reversed_string += string[i];\n    }\n    return reversed_string;\n\
    }\n", "  let longest_palindrome = string.length;\n  let palindrome_suffix = string.substr(0,\
    \ longest_palindrome);\n  let palindrome_prefix = string.substr(string.length\
    \ - longest_palindrome);\n  let palindrome_suffix_reverse = palindrome_suffix.split(\"\
    \").reverse().join(\"\");\n  let palindrome_prefix_reverse = palindrome_prefix.split(\"\
    \").reverse().join(\"\");\n  let new_string = palindrome_prefix_reverse + palindrome_suffix_reverse;\n\
    \  return new_string;\n}\n", "    let longest_palindrome = \"\";\n    let i =\
    \ 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let\
    \ n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n   \
    \ let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n\
    \    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n\
    \    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n\
    \    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n\
    \    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n\
    \    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n\
    \    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n\
    \    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n\
    \    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n\
    \    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n\
    \    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n\
    \    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n\
    \    let a = 0;\n    let b =", "  let longest_palindrome = ''\n  let longest_palindrome_index\
    \ = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let\
    \ n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let\
    \ t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let\
    \ z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let\
    \ f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let\
    \ l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let\
    \ r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let\
    \ x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let\
    \ d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let\
    \ j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let\
    \ p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let\
    \ v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let\
    \ b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let\
    \ h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l ="]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
