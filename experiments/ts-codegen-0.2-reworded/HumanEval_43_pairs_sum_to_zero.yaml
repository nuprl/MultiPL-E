name: HumanEval_43_pairs_sum_to_zero
language: ts
prompt: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
  \ true if there are two distinct elements in the array that\n// sum to zero, and\
  \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
  \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
  \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
  // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
  \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
  \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3, 9,\
  \ -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
  \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
  \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
completions: ["  let i = 0\n  let j = 0\n  let sum = 0\n  let count = 0\n  let result\
    \ = false\n  while (i < l.length) {\n    sum = l[i] + l[j]\n    if (sum === 0)\
    \ {\n      count++\n      if (count > 1) {\n        result = true\n      }\n \
    \   }\n    if (sum < 0) {\n      j++\n    } else {\n      i++\n    }\n  }\n  return\
    \ result\n}\n", "    let i = 0;\n    let j = 0;\n    let count = 0;\n    while\
    \ (i < l.length) {\n        if (l[i] === 0) {\n            count++;\n        \
    \    if (count > 1) {\n                return false;\n            }\n        \
    \    j = i + 1;\n            while (j < l.length && l[j] === 0) {\n          \
    \      j++;\n            }\n            i = j;\n        } else {\n           \
    \ i++;\n        }\n    }\n    return count === 2;\n}\n", "  let pairs = [];\n\
    \  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n\
    \      }\n    }\n  }\n  return pairs.length > 0;\n}\n", "  let pairs = [];\n \
    \ let i = 0;\n  let j = 0;\n  let sum = 0;\n  let sum_to_zero = false;\n  while\
    \ (i < l.length) {\n    sum = l[i];\n    while (j < l.length) {\n      if (sum\
    \ === l[j]) {\n        pairs.push([i, j]);\n        sum = 0;\n        break;\n\
    \      }\n      j++;\n    }\n    i++;\n  }\n  for (let [a, b] of pairs) {\n  \
    \  if (l[a] + l[b] === 0) {\n      sum_to_zero = true;\n      break;\n    }\n\
    \  }\n  return sum_to_zero;\n}\n", "  if (l.length === 0) {\n    return false;\n\
    \  }\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let sum = 0;\n  while (i\
    \ < l.length) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    \
    \  if (count === 2) {\n        return true;\n      }\n      sum = 0;\n      j\
    \ = i + 1;\n    } else {\n      i++;\n    }\n  }\n  return false;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
