name: HumanEval_130_tri
language: ts
prompt: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
  \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
  \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n\
  // tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n\
  \ + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) =\
  \ 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given\
  \ a non-negative integer number n, you have to a return an array of the \n// first\
  \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1,\
  \ 3, 2, 8]\nfunction tri(n: number): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n\
  \  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
  \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
  \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
  \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15,\
  \ 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5,\
  \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
  \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
completions: ["  let result = [1, 3, 2, 8];\n  for (let i = 1; i < n; i++) {\n   \
    \ let a = result[i - 1];\n    let b = result[i - 2];\n    let c = result[i - 3];\n\
    \    result[i] = a + b + c;\n  }\n  return result;\n}\n", "    let result = [];\n\
    \    let a = 1;\n    let b = 1;\n    let c = 0;\n    for (let i = 0; i < n + 1;\
    \ i++) {\n        if (i % 2 === 0) {\n            result.push(a);\n          \
    \  a = b + c;\n            b = c;\n            c = a;\n        } else {\n    \
    \        result.push(a);\n            a = b + c;\n            b = c;\n       \
    \     c = a + b;\n        }\n    }\n    return result;\n}", "  const result =\
    \ [];\n  for (let i = 0; i <= n; i++) {\n    result.push(1 + (i / 2));\n  }\n\
    \  return result;\n}\n", "  let result = [];\n  for (let i = 0; i <= n; i++) {\n\
    \    result.push(1 + (i / 2));\n  }\n  return result;\n}\n", "  let result = [1];\n\
    \  let a = 1;\n  let b = 1;\n  let c = 1;\n  for (let i = 1; i <= n; i++) {\n\
    \    if (i % 2 === 0) {\n      c = a + b;\n      a = b;\n      b = c;\n    } else\
    \ {\n      c = a + b;\n      a = b;\n      b = c;\n      result.push(c);\n   \
    \ }\n  }\n  return result;\n}\n", "  let result = [1, 3, 2, 8];\n  for (let i\
    \ = 1; i <= n; i++) {\n    let prev = result[i - 1];\n    let next = result[i\
    \ - 2] + result[i - 1];\n    result[i] = prev + next;\n  }\n  return result;\n\
    }\n", "    let a = [1, 1];\n    let b = [1, 1];\n    let c = [1, 1];\n    let\
    \ i = 2;\n    while (i <= n) {\n        let temp = a;\n        a = b;\n      \
    \  b = c;\n        c = temp + a + b;\n        i++;\n    }\n    return c;\n}",
  "  let result = [1, 1];\n  for (let i = 2; i <= n; i++) {\n    result.push(result[i\
    \ - 1] + result[i - 2] + result[i - 1]);\n  }\n  return result;\n}\n", "  let\
    \ result = [1, 1];\n  for (let i = 2; i <= n; i++) {\n    result.push(result[i\
    \ - 1] + result[i - 2] + result[i - 1]);\n  }\n  return result;\n}\n", "  let\
    \ result = [1, 3, 2, 8];\n  for (let i = 3; i <= n; i++) {\n    result.push(result[i\
    \ - 1] + result[i - 2] + result[i - 3]);\n  }\n  return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
