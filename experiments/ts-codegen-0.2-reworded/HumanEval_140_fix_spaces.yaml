name: HumanEval_140_fix_spaces
language: ts
prompt: "//Given a string text, replace all spaces in it with underscores, \n// and\
  \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
  \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
  \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
  \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text:\
  \ string): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = fix_spaces;\n  assert.deepEqual(candidate(\"Example\"\
  ),\"Example\");\n  assert.deepEqual(candidate(\"Mudasir Hanif \"),\"Mudasir_Hanif_\"\
  );\n  assert.deepEqual(candidate(\"Yellow Yellow  Dirty  Fellow\"),\"Yellow_Yellow__Dirty__Fellow\"\
  );\n  assert.deepEqual(candidate(\"Exa   mple\"),\"Exa-mple\");\n  assert.deepEqual(candidate(\"\
  \   Exa 1 2 2 mple\"),\"-Exa_1_2_2_mple\");\n}\n\ntest();"
completions: ["    return text.replace(/ /g, '_').replace(/\\s{2,}/g, '_');\n}\n",
  "    let result = text.replace(/ /g, \"_\");\n    let spaces = result.match(/\\\
    s{2,}/g);\n    if (spaces) {\n        for (let i = 0; i < spaces.length; i++)\
    \ {\n            result = result.replace(spaces[i], \"-\");\n        }\n    }\n\
    \    return result;\n}\n", "    return text.replace(/ /g, \"_\").replace(/\\s{2,}/g,\
    \ \"-\");\n}\n", "    let result = text.replace(/ /g, \"_\");\n    let count =\
    \ 0;\n    let last_index = 0;\n    while (result.indexOf(\"  \", last_index) !==\
    \ -1) {\n        count++;\n        last_index = result.indexOf(\"  \", last_index);\n\
    \        result = result.substring(0, last_index) + \"_\" + result.substring(last_index\
    \ + 2);\n    }\n    if (count > 2) {\n        result = result.replace(/ /g, \"\
    -\");\n    }\n    return result;\n}\n", "    return text.replace(/ /g, \"_\").replace(/\\\
    s{2,}/g, \"_\");\n}\n", "    let fixed_text = text.replace(/ /g, '_');\n    if\
    \ (fixed_text.match(/\\s{2,}/g)) {\n        fixed_text = fixed_text.replace(/\\\
    s{2,}/g, '_');\n    }\n    return fixed_text;\n}\n", "    return text.replace(/\
    \ /g, '_').replace(/\\s{2,}/g, '_');\n}\n", "    let result = text.replace(/ /g,\
    \ \"_\");\n    let spaces = result.match(/\\s{2,}/g);\n    if (spaces) {\n   \
    \     result = result.replace(/\\s{2,}/g, \"-\");\n    }\n    return result;\n\
    }\n", "  let new_text = text.replace(/ /g, '_');\n  let spaces = new_text.match(/\\\
    s{2,}/g);\n  if (spaces) {\n    for (let i = 0; i < spaces.length; i++) {\n  \
    \    new_text = new_text.replace(spaces[i], '-');\n    }\n  }\n  return new_text;\n\
    }\n", "    return text.replace(/ /g, \"_\").replace(/\\s{2,}/g, \"-\");\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
