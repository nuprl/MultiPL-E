{
  "name": "HumanEval_59_largest_prime_factor",
  "language": "ts",
  "prompt": "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n: number): number {\n",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n}\n\ntest();",
  "completions": [
    "  let prime_factors = [];\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      prime_factors.push(i);\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  if (n > 1) {\n    prime_factors.push(n);\n  }\n  return prime_factors.sort((a, b) => b - a)[0];\n}\n",
    "  let factors = [];\n  let i = 2;\n  while (n % i === 0) {\n    factors.push(i);\n    n /= i;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return Math.max(...factors);\n}\n",
    "  let largest_factor = 1;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      largest_factor = i;\n      n = n / i;\n    }\n  }\n  if (n > 1) {\n    largest_factor = n;\n  }\n  return largest_factor;\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 3;\n  }\n  if (n % 2 === 0) {\n    return 2;\n  }\n  if (n % 3 === 0) {\n    return 3;\n  }\n  let i = 5;\n  while (n % i === 0) {\n    i += 2;\n  }\n  return i;\n}\n",
    "  let largest_factor = 1;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      largest_factor = i;\n      n = n / i;\n    }\n  }\n  if (n > 1) {\n    largest_factor = n;\n  }\n  return largest_factor;\n}\n",
    "  let i = 2;\n  while (n % i === 0) {\n    n /= i;\n    i++;\n  }\n  return n;\n}\n",
    "  let prime_factors = [];\n  let i = 2;\n  while (n % i === 0) {\n    prime_factors.push(i);\n    n /= i;\n  }\n  if (n > 1) {\n    prime_factors.push(n);\n  }\n  return prime_factors.reduce((a, b) => Math.max(a, b));\n}\n",
    "  let factors = [];\n  let i = 2;\n  while (n % i === 0) {\n    factors.push(i);\n    n /= i;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return Math.max(...factors);\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  let factors = [];\n  let i = 2;\n  while (n % i === 0) {\n    factors.push(i);\n    n /= i;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return Math.max.apply(Math, factors);\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return 2;\n  }\n  if (n % 3 === 0) {\n    return 3;\n  }\n  if (n % 5 === 0) {\n    return 5;\n  }\n  if (n % 7 === 0) {\n    return 7;\n  }\n  if (n % 11 === 0) {\n    return 11;\n  }\n  if (n % 13 === 0) {\n    return 13;\n  }\n  if (n % 17 === 0) {\n    return 17;\n  }\n  if (n % 19 === 0) {\n    return 19;\n  }\n  if (n % 23 === 0) {\n    return 23;\n  }\n  if (n % 29 === 0) {\n    return 29;\n  }\n  if (n % 31 === 0) {\n    return 31;\n  }\n  if (n % 37 === 0) {\n    return 37;\n  }\n  if (n % 41 === 0) {\n    return 41;\n  }\n  if (n % 43 === 0) {\n    return 43;\n  }\n  if (n % 47 === 0) {\n    return 47;\n  }\n  if (n % 53 === 0) {\n    return 53;\n  }\n  if (n % 59 === 0) {\n    return 59;\n  }\n  if (n % 61 === 0) {\n    return 61;\n  }\n  if (n % 67 === 0) {\n    return 67;\n  }\n  if (n % 71 === 0) {\n    return 71;\n  }\n  if (n % 73 === 0) {\n    return 73;\n  }\n  if (n % 79 === 0) {\n    return 79;\n  }\n  if (n % 83 === 0) {\n    return 83;\n  }\n  if (n % 89 === 0) {\n    return 89;\n  }\n  if (n % 97 === 0) {\n    return 97;\n  }\n  if (",
    "  if (n === 1) {\n    return 1;\n  }\n  let i = 2;\n  while (n % i === 0) {\n    n /= i;\n    i++;\n  }\n  return i;\n}\n",
    "  if (n < 2) {\n    return n\n  }\n  let factors = []\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      factors.push(n / i)\n    }\n  }\n  let max = Math.max(...factors)\n  return max\n}\n",
    "  let factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      factors.push(n / i);\n    }\n  }\n  return Math.max(...factors);\n}\n",
    "  if (n < 2) {\n    return n\n  }\n  let factors = []\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      factors.push(n / i)\n    }\n  }\n  let max = Math.max(...factors)\n  return max\n}\n",
    "  let i = 2;\n  while (n % i === 0) {\n    n /= i;\n    i++;\n  }\n  return n;\n}\n",
    "    let i = 2;\n    while (n % i === 0) {\n        n /= i;\n        i = 2;\n    }\n    return n;\n}\n",
    "  let i = 2;\n  while (n % i === 0) {\n    n /= i;\n    i++;\n  }\n  return n;\n}\n",
    "  let i = 2;\n  let max = n;\n  while (n % i === 0) {\n    max = i;\n    i++;\n  }\n  return max;\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 3;\n  }\n  if (n % 2 === 0) {\n    return 2;\n  }\n  if (n % 3 === 0) {\n    return 3;\n  }\n  let i = 5;\n  while (n % i === 0) {\n    i += 2;\n  }\n  return i;\n}\n",
    "    if (n < 2) {\n        return n;\n    }\n    let factors = [];\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n    }\n    if (n > 1) {\n        factors.push(n);\n    }\n    return factors.reduce((max, curr) => Math.max(max, curr), 1);\n}",
    "  let prime_factors = [];\n  let i = 2;\n  while (n % i === 0) {\n    prime_factors.push(i);\n    n /= i;\n  }\n  if (n > 1) {\n    prime_factors.push(n);\n  }\n  return Math.max(...prime_factors);\n}\n",
    "  let i = 2;\n  while (n % i === 0) {\n    n /= i;\n    i++;\n  }\n  return n;\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  let i = 2;\n  while (n % i === 0) {\n    n /= i;\n    i++;\n  }\n  return i;\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return 2;\n  }\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i += 2;\n  }\n  return n;\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  let largest = 1;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      largest = i;\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  if (n > 1) {\n    largest = n;\n  }\n  return largest;\n}\n",
    "  let i = 2;\n  while (n % i === 0) {\n    n /= i;\n    i = 2;\n  }\n  return n;\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 3;\n  }\n  if (n % 2 === 0) {\n    return 2;\n  }\n  if (n % 3 === 0) {\n    return 3;\n  }\n  let i = 5;\n  while (n % i === 0) {\n    i += 2;\n  }\n  return i;\n}\n",
    "  let i = 2;\n  let max = n;\n  while (n % i === 0) {\n    n /= i;\n    i++;\n  }\n  return i;\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n\n  let largest_prime_factor = 2;\n  let i = 3;\n\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      largest_prime_factor = i;\n      n = n / i;\n    } else {\n      i = i + 2;\n    }\n  }\n\n  if (n > 1) {\n    largest_prime_factor = n;\n  }\n\n  return largest_prime_factor;\n}\n",
    "  let prime_factors = [];\n  let i = 2;\n  while (n % i === 0) {\n    prime_factors.push(i);\n    n /= i;\n  }\n  if (n > 1) {\n    prime_factors.push(n);\n  }\n  return prime_factors.reduce((a, b) => Math.max(a, b));\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 3;\n  }\n  if (n % 2 === 0) {\n    return 2;\n  }\n  if (n % 3 === 0) {\n    return 3;\n  }\n  let i = 5;\n  while (n % i === 0) {\n    i += 2;\n  }\n  return i;\n}\n",
    "  let i = 2;\n  while (n % i === 0) {\n    n /= i;\n    i++;\n  }\n  return n;\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  let i = 2;\n  while (n % i === 0) {\n    n /= i;\n    i++;\n  }\n  return i;\n}\n",
    "  let prime_factors = [];\n  let i = 2;\n  while (n % i === 0) {\n    prime_factors.push(i);\n    n /= i;\n  }\n  if (n > 1) {\n    prime_factors.push(n);\n  }\n  return Math.max(...prime_factors);\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  let largest_factor = 2;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      largest_factor = i;\n      n /= i;\n    } else {\n      i += 2;\n    }\n  }\n  if (n > 1) {\n    largest_factor = n;\n  }\n  return largest_factor;\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  let i = 2;\n  while (n % i === 0) {\n    n /= i;\n    i++;\n  }\n  return i;\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  let i = 2;\n  while (n % i === 0) {\n    n /= i;\n    i++;\n  }\n  return i;\n}\n",
    "  let i = 2;\n  while (n % i === 0) {\n    n /= i;\n    i++;\n  }\n  return n;\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 3;\n  }\n  if (n % 2 === 0) {\n    return 2;\n  }\n  if (n % 3 === 0) {\n    return 3;\n  }\n  let i = 5;\n  while (n % i === 0) {\n    i += 2;\n  }\n  return i;\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return 2;\n  }\n  if (n % 3 === 0) {\n    return 3;\n  }\n  let i = 5;\n  while (n % i === 0) {\n    i += 2;\n  }\n  return i;\n}\n",
    "  let i = 2;\n  while (n % i === 0) {\n    n /= i;\n    i++;\n  }\n  return n;\n}\n",
    "  let prime_factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      prime_factors.push(i);\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  if (n > 1) {\n    prime_factors.push(n);\n  }\n  return prime_factors.sort((a, b) => b - a)[0];\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  let i = 2;\n  while (n % i === 0) {\n    n /= i;\n    i++;\n  }\n  return i;\n}\n",
    "  let i = 2;\n  while (n % i === 0) {\n    n /= i;\n    i++;\n  }\n  return n;\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n}\n",
    "  let i = 2;\n  while (n % i === 0) {\n    n /= i;\n    i++;\n  }\n  return n;\n}\n",
    "    let largest_prime_factor = 1;\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            largest_prime_factor = i;\n            n = n / i;\n        }\n    }\n    if (n > 1) {\n        largest_prime_factor = n;\n    }\n    return largest_prime_factor;\n}\n",
    "  let i = 2;\n  while (n % i === 0) {\n    n /= i;\n    i++;\n  }\n  return n;\n}\n",
    "    let prime_factors = [];\n    let i = 2;\n    while (n % i === 0) {\n        prime_factors.push(i);\n        n = n / i;\n    }\n    if (n > 1) {\n        prime_factors.push(n);\n    }\n    return Math.max.apply(null, prime_factors);\n}",
    "  if (n < 2) {\n    return n\n  }\n  let largest_prime_factor = 2\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      largest_prime_factor = i\n      n /= i\n    }\n  }\n  if (n > 1) {\n    largest_prime_factor = n\n  }\n  return largest_prime_factor\n}\n",
    "    if (n === 1) {\n        return 1;\n    }\n    let factors = [];\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            factors.push(i);\n            factors.push(n / i);\n        }\n    }\n    let max = 1;\n    for (let i = 0; i < factors.length; i++) {\n        if (factors[i] > max) {\n            max = factors[i];\n        }\n    }\n    return max;\n}",
    "  if (n === 1) {\n    return 1;\n  }\n  let i = 2;\n  while (n % i === 0) {\n    n /= i;\n    i++;\n  }\n  return i;\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return 2;\n  }\n  let i = 3;\n  while (n % i === 0) {\n    i += 2;\n  }\n  return i;\n}\n",
    "  if (n < 2) {\n    return n\n  }\n  let factors = []\n  let i = 2\n  while (n % i === 0) {\n    factors.push(i)\n    n /= i\n  }\n  return factors.reduce((max, factor) => Math.max(max, factor), n)\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  let i = 2;\n  while (n % i === 0) {\n    n /= i;\n    i++;\n  }\n  return i;\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  let i = 2;\n  while (n % i === 0) {\n    n /= i;\n    i++;\n  }\n  return i;\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 3;\n  }\n  if (n % 2 === 0) {\n    return 2;\n  }\n  if (n % 3 === 0) {\n    return 3;\n  }\n  let i = 5;\n  while (n % i === 0) {\n    i += 2;\n  }\n  return i;\n}\n",
    "  if (n < 2) {\n    return n\n  }\n  let i = 2\n  while (n % i === 0) {\n    n /= i\n    i = 2\n  }\n  return n\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  let largest = 1;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      largest = i;\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  if (n > 1) {\n    largest = n;\n  }\n  return largest;\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n}\n",
    "  if (n < 2) {\n    return n\n  }\n  let factors = []\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      factors.push(n / i)\n    }\n  }\n  return Math.max(...factors)\n}\n",
    "  let i = 2;\n  while (n % i === 0) {\n    n /= i;\n    i++;\n  }\n  return n;\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n}\n",
    "  let largestFactor = 1;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      largestFactor = i;\n      n = n / i;\n    }\n  }\n  if (n > 1) {\n    largestFactor = n;\n  }\n  return largestFactor;\n}\n",
    "  let factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      factors.push(n / i);\n    }\n  }\n  return Math.max(...factors);\n}\n",
    "  let prime_factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      prime_factors.push(i);\n      n /= i;\n    } else {\n      i += 1;\n    }\n  }\n  if (n > 1) {\n    prime_factors.push(n);\n  }\n  return prime_factors[prime_factors.length - 1];\n}\n",
    "  if (n < 2) {\n    return n\n  }\n  let i = 2\n  while (n % i === 0) {\n    n /= i\n    i++\n  }\n  return n\n}\n",
    "  let i = 2;\n  while (n % i === 0) {\n    n /= i;\n    i = 2;\n  }\n  return n;\n}\n",
    "    let largest_factor = 1;\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            largest_factor = i;\n            while (n % i === 0) {\n                n /= i;\n            }\n        }\n    }\n    if (n > 1) {\n        largest_factor = n;\n    }\n    return largest_factor;\n}",
    "  if (n === 1) {\n    return 1;\n  }\n  let factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      factors.push(n / i);\n    }\n  }\n  return Math.max(...factors);\n}\n",
    "    let prime_factors = [];\n    let i = 2;\n    while (i <= Math.sqrt(n)) {\n        if (n % i === 0) {\n            prime_factors.push(i);\n            n = n / i;\n        } else {\n            i++;\n        }\n    }\n    if (n > 1) {\n        prime_factors.push(n);\n    }\n    return prime_factors[prime_factors.length - 1];\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 3;\n  }\n  if (n % 2 === 0) {\n    return 2;\n  }\n  if (n % 3 === 0) {\n    return 3;\n  }\n  let i = 5;\n  while (n % i === 0) {\n    i += 2;\n  }\n  return i;\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  let factors = [];\n  let i = 2;\n  while (n % i === 0) {\n    factors.push(i);\n    n /= i;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return Math.max(...factors);\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 3;\n  }\n  if (n === 4) {\n    return 2;\n  }\n  if (n === 5) {\n    return 5;\n  }\n  if (n === 6) {\n    return 2;\n  }\n  if (n === 7) {\n    return 7;\n  }\n  if (n === 8) {\n    return 2;\n  }\n  if (n === 9) {\n    return 3;\n  }\n  if (n === 10) {\n    return 2;\n  }\n  if (n === 11) {\n    return 11;\n  }\n  if (n === 12) {\n    return 2;\n  }\n  if (n === 13) {\n    return 13;\n  }\n  if (n === 14) {\n    return 2;\n  }\n  if (n === 15) {\n    return 3;\n  }\n  if (n === 16) {\n    return 2;\n  }\n  if (n === 17) {\n    return 17;\n  }\n  if (n === 18) {\n    return 2;\n  }\n  if (n === 19) {\n    return 19;\n  }\n  if (n === 20) {\n    return 2;\n  }\n  if (n === 21) {\n    return 3;\n  }\n  if (n === 22) {\n    return 2;\n  }\n  if (n === 23) {\n    return 23;\n  }\n  if (n === 24) {\n    return 2;\n  }\n  if (n === 25) {\n    return 5;\n  }\n  if (n === 26) {\n    return 2;\n  }\n  if (n === 27) {\n    return 3;\n  }\n  if (n === 28) {\n    return 2;\n  }\n  if (n === 29) {\n    return 29;\n  }\n  if (n === 30) {\n    return 2;\n  }\n  if",
    "  if (n === 1) {\n    return 1;\n  }\n  let i = 2;\n  while (n % i === 0) {\n    n /= i;\n    i++;\n  }\n  return i;\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return 2;\n  }\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i += 2;\n  }\n  return n;\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  let i = 2;\n  while (n % i === 0) {\n    n /= i;\n    i++;\n  }\n  return i;\n}\n",
    "    let largest_prime_factor = 1;\n    let i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n            n = n / i;\n        } else {\n            i++;\n        }\n    }\n    if (n > 1) {\n        largest_prime_factor = n;\n    }\n    return largest_prime_factor;\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  let factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      factors.push(n / i);\n    }\n  }\n  let max = Math.max(...factors);\n  return max;\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  let largest = 2;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      largest = i;\n      n /= i;\n    }\n  }\n  if (n > 1) {\n    largest = n;\n  }\n  return largest;\n}\n",
    "  let factors = [];\n  let i = 2;\n  while (n % i === 0) {\n    factors.push(i);\n    n /= i;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors.reduce((a, b) => a > b ? a : b);\n}\n",
    "    let largestFactor = 1;\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            largestFactor = i;\n            while (n % i === 0) {\n                n /= i;\n            }\n        }\n    }\n    if (n > 1) {\n        largestFactor = n;\n    }\n    return largestFactor;\n}",
    "  let prime_factors = [];\n  let i = 2;\n  while (n % i === 0) {\n    prime_factors.push(i);\n    n /= i;\n  }\n  if (n > 1) {\n    prime_factors.push(n);\n  }\n  return prime_factors.reduce((max, prime) => Math.max(max, prime), 1);\n}\n",
    "  let factors = [];\n  let i = 2;\n  while (n % i === 0) {\n    factors.push(i);\n    n /= i;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return Math.max(...factors);\n}\n",
    "  let factors = [];\n  let i = 2;\n  while (n % i === 0) {\n    factors.push(i);\n    n /= i;\n    i = 2;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return Math.max(...factors);\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  let i = 2;\n  while (n % i === 0) {\n    n /= i;\n    i = 2;\n  }\n  return n;\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 3;\n  }\n  if (n % 2 === 0) {\n    return 2;\n  }\n  if (n % 3 === 0) {\n    return 3;\n  }\n  let i = 5;\n  while (n % i === 0) {\n    i += 2;\n  }\n  return i;\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n}\n",
    "  let i = 2;\n  while (n % i === 0) {\n    n /= i;\n    i = 2;\n  }\n  return n;\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return 2;\n  }\n  if (n % 3 === 0) {\n    return 3;\n  }\n  let i = 5;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i += 2;\n  }\n  return n;\n}\n",
    "  let factors = [];\n  let i = 2;\n  while (n % i === 0) {\n    factors.push(i);\n    n /= i;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return Math.max(...factors);\n}\n",
    "  let factors = [];\n  let i = 2;\n  while (n % i === 0) {\n    factors.push(i);\n    n /= i;\n  }\n  return factors[factors.length - 1];\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 3;\n  }\n  if (n % 2 === 0) {\n    return 2;\n  }\n  if (n % 3 === 0) {\n    return 3;\n  }\n  let i = 5;\n  while (n % i === 0) {\n    i += 2;\n  }\n  return i;\n}\n",
    "  let factors = [];\n  let i = 2;\n  while (n % i === 0) {\n    factors.push(i);\n    n /= i;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors.sort((a, b) => b - a)[0];\n}\n",
    "  let prime_factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      prime_factors.push(i);\n      n = n / i;\n    } else {\n      i = i + 1;\n    }\n  }\n  if (n > 1) {\n    prime_factors.push(n);\n  }\n  return prime_factors.reduce((a, b) => a * b);\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 3;\n  }\n  if (n % 2 === 0) {\n    return 2;\n  }\n  if (n % 3 === 0) {\n    return 3;\n  }\n  let i = 5;\n  while (n % i === 0) {\n    i += 2;\n  }\n  return i;\n}\n",
    "    let factors = [];\n    let i = 2;\n    while (n % i === 0) {\n        factors.push(i);\n        n /= i;\n        i = 2;\n    }\n    if (n > 1) {\n        factors.push(n);\n    }\n    return Math.max.apply(null, factors);\n}",
    "    if (n === 1) {\n        return 1;\n    }\n    let i = 2;\n    while (i * i <= n) {\n        if (n % i === 0) {\n            n = n / i;\n            i = 2;\n        } else {\n            i++;\n        }\n    }\n    return n;\n}\n",
    "  let i = 2;\n  let max = n;\n  while (n % i === 0) {\n    max = i;\n    i++;\n  }\n  return max;\n}\n",
    "  let i = 2;\n  while (n % i === 0) {\n    n /= i;\n    i = i + 1;\n  }\n  return n;\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  let factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      factors.push(n / i);\n    }\n  }\n  if (factors.length === 0) {\n    return n;\n  }\n  let max = Math.max(...factors);\n  for (let i = 0; i < factors.length; i++) {\n    if (factors[i] === max) {\n      return max;\n    }\n  }\n  return max;\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 3;\n  }\n  if (n % 2 === 0) {\n    return 2;\n  }\n  if (n % 3 === 0) {\n    return 3;\n  }\n  let i = 5;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i += 2;\n  }\n  return n;\n}\n",
    "  let i = 2;\n  while (n % i === 0) {\n    n /= i;\n    i++;\n  }\n  return n;\n}\n",
    "    if (n === 1) {\n        return 1;\n    }\n    let i = 2;\n    while (n % i === 0) {\n        n /= i;\n        i++;\n    }\n    return i;\n}\n",
    "    let prime_factors = [];\n    let i = 2;\n    while (n % i === 0) {\n        prime_factors.push(i);\n        n /= i;\n    }\n    if (n > 1) {\n        prime_factors.push(n);\n    }\n    return prime_factors.reduce((max, prime) => Math.max(max, prime), 1);\n}\n",
    "  let factors = [];\n  let i = 2;\n  while (n % i === 0) {\n    factors.push(i);\n    n /= i;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return Math.max.apply(Math, factors);\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      n = n / i;\n      i = 2;\n    } else {\n      i++;\n    }\n  }\n  return n;\n}\n",
    "  let factors = [];\n  let i = 2;\n  while (n % i === 0) {\n    factors.push(i);\n    n /= i;\n    i = 2;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return Math.max(...factors);\n}\n",
    "    let factors = [];\n    let i = 2;\n    while (n % i === 0) {\n        factors.push(i);\n        n /= i;\n    }\n    if (n > 1) {\n        factors.push(n);\n    }\n    return Math.max(...factors);\n}\n",
    "    if (n === 1) {\n        return 1;\n    }\n    let i = 2;\n    while (n % i === 0) {\n        n /= i;\n        i++;\n    }\n    return i;\n}",
    "  let prime_factors = [];\n  let i = 2;\n  while (n % i === 0) {\n    prime_factors.push(i);\n    n /= i;\n  }\n  if (n > 1) {\n    prime_factors.push(n);\n  }\n  return prime_factors.reduce((a, b) => Math.max(a, b));\n}\n",
    "    let i = 2;\n    while (n % i === 0) {\n        n /= i;\n        i++;\n    }\n    return n;\n}\n",
    "  if (n < 2) {\n    return n\n  }\n  let largest_prime_factor = 2\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      largest_prime_factor = i\n      n /= i\n    }\n  }\n  if (n > 1) {\n    largest_prime_factor = n\n  }\n  return largest_prime_factor\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n}\n",
    "  let prime_factors = [];\n  let i = 2;\n  while (n % i === 0) {\n    prime_factors.push(i);\n    n /= i;\n  }\n  if (n > 1) {\n    prime_factors.push(n);\n  }\n  return prime_factors.reduce((a, b) => a > b ? a : b);\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return 2;\n  }\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i += 2;\n  }\n  return n;\n}\n",
    "  let i = 2;\n  while (n % i === 0) {\n    n /= i;\n    i++;\n  }\n  return n;\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return 2;\n  }\n  if (n % 3 === 0) {\n    return 3;\n  }\n  let i = 5;\n  while (n % i === 0) {\n    i += 2;\n  }\n  return i;\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  let i = 2;\n  while (n % i === 0) {\n    n /= i;\n    i++;\n  }\n  return i;\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 3;\n  }\n  if (n % 2 === 0) {\n    return 2;\n  }\n  if (n % 3 === 0) {\n    return 3;\n  }\n  let i = 5;\n  while (n % i === 0) {\n    i += 2;\n  }\n  return i;\n}\n",
    "  let prime_factors = [];\n  let i = 2;\n  while (n % i === 0) {\n    prime_factors.push(i);\n    n /= i;\n  }\n  if (n > 1) {\n    prime_factors.push(n);\n  }\n  return prime_factors.reduce((a, b) => Math.max(a, b));\n}\n",
    "  let prime_factors = [];\n  let i = 2;\n  while (n % i === 0) {\n    prime_factors.push(i);\n    n /= i;\n  }\n  if (n > 1) {\n    prime_factors.push(n);\n  }\n  return prime_factors.reduce((a, b) => a * b);\n}\n",
    "    let prime_factors = [];\n    let i = 2;\n    while (i <= Math.sqrt(n)) {\n        if (n % i === 0) {\n            prime_factors.push(i);\n            n = n / i;\n        } else {\n            i++;\n        }\n    }\n    if (n > 1) {\n        prime_factors.push(n);\n    }\n    return prime_factors.reduce((a, b) => a > b ? a : b);\n}",
    "  let i = 2;\n  while (n % i === 0) {\n    n /= i;\n    i++;\n  }\n  return n;\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  let largest = 2;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      largest = i;\n      n /= i;\n    }\n  }\n  if (n > 1) {\n    largest = n;\n  }\n  return largest;\n}\n",
    "    let largest_prime_factor = 1;\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            largest_prime_factor = i;\n            n = n / i;\n        }\n    }\n    if (n > 1) {\n        largest_prime_factor = n;\n    }\n    return largest_prime_factor;\n}",
    "    let i = 2;\n    while (n % i === 0) {\n        n /= i;\n        i++;\n    }\n    return n;\n}\n",
    "  if (n < 2) {\n    return n\n  }\n  let largest = 2\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      largest = i\n      n /= i\n    }\n  }\n  if (n > 1) {\n    largest = n\n  }\n  return largest\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return 2;\n  }\n  let i = 3;\n  while (n % i === 0) {\n    n /= i;\n    i += 2;\n  }\n  return i;\n}\n",
    "    let i = 2;\n    while (n % i === 0) {\n        n /= i;\n        i++;\n    }\n    return n;\n}\n",
    "    if (n === 1) {\n        return 1;\n    }\n    let i = 2;\n    while (i * i <= n) {\n        if (n % i === 0) {\n            return i;\n        }\n        i++;\n    }\n    return n;\n}",
    "  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 3;\n  }\n  if (n % 2 === 0) {\n    return 2;\n  }\n  if (n % 3 === 0) {\n    return 3;\n  }\n  let i = 5;\n  while (n % i === 0) {\n    i += 2;\n  }\n  return i;\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  let largest_prime_factor = 2;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      largest_prime_factor = i;\n      n = n / i;\n    } else {\n      i = i + 2;\n    }\n  }\n  if (n > 1) {\n    largest_prime_factor = n;\n  }\n  return largest_prime_factor;\n}\n",
    "    let i = 2;\n    while (n % i === 0) {\n        n /= i;\n        i++;\n    }\n    return n;\n}\n",
    "    let factors = [];\n    let i = 2;\n    while (n % i === 0) {\n        factors.push(i);\n        n /= i;\n    }\n    return Math.max(...factors);\n}\n",
    "  if (n === 1) return 1;\n  if (n === 2) return 2;\n  if (n % 2 === 0) return 2;\n  if (n % 3 === 0) return 3;\n  if (n % 5 === 0) return 5;\n  if (n % 7 === 0) return 7;\n  if (n % 11 === 0) return 11;\n  if (n % 13 === 0) return 13;\n  if (n % 17 === 0) return 17;\n  if (n % 19 === 0) return 19;\n  if (n % 23 === 0) return 23;\n  if (n % 29 === 0) return 29;\n  if (n % 31 === 0) return 31;\n  if (n % 37 === 0) return 37;\n  if (n % 41 === 0) return 41;\n  if (n % 43 === 0) return 43;\n  if (n % 47 === 0) return 47;\n  if (n % 53 === 0) return 53;\n  if (n % 59 === 0) return 59;\n  if (n % 61 === 0) return 61;\n  if (n % 67 === 0) return 67;\n  if (n % 71 === 0) return 71;\n  if (n % 73 === 0) return 73;\n  if (n % 79 === 0) return 79;\n  if (n % 83 === 0) return 83;\n  if (n % 89 === 0) return 89;\n  if (n % 97 === 0) return 97;\n  if (n % 101 === 0) return 101;\n  if (n % 103 === 0) return 103;\n  if (n % 107 === 0) return 107;\n  if (n % 109 === 0) return 109;\n  if (n % 113 === 0) return 113;\n  if (n % 127 === 0) return 127;\n  if (n % 131 === 0) return 131;\n  if (n % 137 === 0) return 137;\n  if (n % 139 === 0) return 139;\n  if (n % 149 === 0) return 149;\n  if (n % 151 === 0) return 151;\n  if (n % 157 === 0) return 157;\n  if (n % 163 === 0)",
    "    let prime_factors = [];\n    let i = 2;\n    while (n % i === 0) {\n        prime_factors.push(i);\n        n /= i;\n    }\n    if (n > 1) {\n        prime_factors.push(n);\n    }\n    return prime_factors.reduce((a, b) => Math.max(a, b));\n}",
    "  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return 2;\n  }\n  if (n % 3 === 0) {\n    return 3;\n  }\n  let i = 5;\n  while (n % i === 0) {\n    i += 2;\n  }\n  return i;\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  let i = 2;\n  while (n % i === 0) {\n    n /= i;\n    i++;\n  }\n  return i;\n}\n",
    "  let i = 2;\n  while (n % i === 0) {\n    n /= i;\n    i++;\n  }\n  return n;\n}\n",
    "  let largest_factor = 1;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      largest_factor = i;\n      n = n / i;\n    }\n  }\n  if (n > 1) {\n    largest_factor = n;\n  }\n  return largest_factor;\n}\n",
    "    if (n === 1) {\n        return 1;\n    }\n    let largest = 1;\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            largest = i;\n            while (n % i === 0) {\n                n /= i;\n            }\n        }\n    }\n    if (n > 1) {\n        largest = n;\n    }\n    return largest;\n}",
    "  let prime_factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      prime_factors.push(i);\n      n /= i;\n    } else {\n      i += 1;\n    }\n  }\n  if (n > 1) {\n    prime_factors.push(n);\n  }\n  return prime_factors.sort((a, b) => b - a)[0];\n}\n",
    "    let largest_prime_factor = 1;\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            largest_prime_factor = i;\n            n = n / i;\n        }\n    }\n    if (n > 1) {\n        largest_prime_factor = n;\n    }\n    return largest_prime_factor;\n}",
    "  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 3;\n  }\n  if (n % 2 === 0) {\n    return 2;\n  }\n  if (n % 3 === 0) {\n    return 3;\n  }\n  let i = 5;\n  while (n % i === 0) {\n    i += 2;\n  }\n  return i;\n}\n",
    "    let factors = [];\n    let i = 2;\n    while (n % i === 0) {\n        factors.push(i);\n        n /= i;\n        i = 2;\n    }\n    if (n > 1) {\n        factors.push(n);\n    }\n    return Math.max.apply(null, factors);\n}",
    "  if (n === 1) {\n    return 1;\n  }\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 3;\n  }\n  if (n % 2 === 0) {\n    return 2;\n  }\n  if (n % 3 === 0) {\n    return 3;\n  }\n  let i = 5;\n  while (n % i === 0) {\n    i += 2;\n  }\n  return i;\n}\n",
    "  let i = 2;\n  while (n % i === 0) {\n    n /= i;\n    i++;\n  }\n  return n;\n}\n",
    "    let i = 2;\n    while (n % i === 0) {\n        n /= i;\n        i = 2;\n    }\n    return n;\n}\n",
    "  let prime_factors = [];\n  let i = 2;\n  while (n % i === 0) {\n    prime_factors.push(i);\n    n = n / i;\n  }\n  if (n > 1) {\n    prime_factors.push(n);\n  }\n  return Math.max(...prime_factors);\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  let i = 2;\n  while (n % i === 0) {\n    n /= i;\n    i++;\n  }\n  return i;\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 3;\n  }\n  if (n % 2 === 0) {\n    return 2;\n  }\n  if (n % 3 === 0) {\n    return 3;\n  }\n  if (n % 5 === 0) {\n    return 5;\n  }\n  if (n % 7 === 0) {\n    return 7;\n  }\n  if (n % 11 === 0) {\n    return 11;\n  }\n  if (n % 13 === 0) {\n    return 13;\n  }\n  if (n % 17 === 0) {\n    return 17;\n  }\n  if (n % 19 === 0) {\n    return 19;\n  }\n  if (n % 23 === 0) {\n    return 23;\n  }\n  if (n % 29 === 0) {\n    return 29;\n  }\n  if (n % 31 === 0) {\n    return 31;\n  }\n  if (n % 37 === 0) {\n    return 37;\n  }\n  if (n % 41 === 0) {\n    return 41;\n  }\n  if (n % 43 === 0) {\n    return 43;\n  }\n  if (n % 47 === 0) {\n    return 47;\n  }\n  if (n % 53 === 0) {\n    return 53;\n  }\n  if (n % 59 === 0) {\n    return 59;\n  }\n  if (n % 61 === 0) {\n    return 61;\n  }\n  if (n % 67 === 0) {\n    return 67;\n  }\n  if (n % 71 === 0) {\n    return 71;\n  }\n  if (n % 73 === 0) {\n    return 73;\n  }\n  if (n % 79 === 0) {\n    return 79;\n  }\n  if (n % 83 === 0) {\n    return 83;\n  }\n  if (n % 89 === 0) {\n    return 89;\n  }\n  if (n %",
    "  let factors = [];\n  let i = 2;\n  while (n % i === 0) {\n    factors.push(i);\n    n /= i;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return Math.max.apply(Math, factors);\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  let largest_factor = 1;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      largest_factor = i;\n      n = n / i;\n    }\n  }\n  if (n > 1) {\n    largest_factor = n;\n  }\n  return largest_factor;\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 3;\n  }\n  if (n === 4) {\n    return 2;\n  }\n  if (n === 5) {\n    return 5;\n  }\n  if (n === 6) {\n    return 2;\n  }\n  if (n === 7) {\n    return 7;\n  }\n  if (n === 8) {\n    return 2;\n  }\n  if (n === 9) {\n    return 3;\n  }\n  if (n === 10) {\n    return 2;\n  }\n  if (n === 11) {\n    return 11;\n  }\n  if (n === 12) {\n    return 2;\n  }\n  if (n === 13) {\n    return 13;\n  }\n  if (n === 14) {\n    return 2;\n  }\n  if (n === 15) {\n    return 3;\n  }\n  if (n === 16) {\n    return 2;\n  }\n  if (n === 17) {\n    return 17;\n  }\n  if (n === 18) {\n    return 2;\n  }\n  if (n === 19) {\n    return 19;\n  }\n  if (n === 20) {\n    return 2;\n  }\n  if (n === 21) {\n    return 3;\n  }\n  if (n === 22) {\n    return 2;\n  }\n  if (n === 23) {\n    return 23;\n  }\n  if (n === 24) {\n    return 2;\n  }\n  if (n === 25) {\n    return 5;\n  }\n  if (n === 26) {\n    return 2;\n  }\n  if (n === 27) {\n    return 3;\n  }\n  if (n === 28) {\n    return 2;\n  }\n  if (n === 29) {\n    return 29;\n  }\n  if (n === 30) {\n    return 2;\n  }\n  if",
    "    if (n < 2) {\n        return n\n    }\n    let largest = 2\n    let i = 3\n    while (i <= Math.sqrt(n)) {\n        if (n % i === 0) {\n            largest = i\n            n /= i\n        } else {\n            i += 2\n        }\n    }\n    if (n > 1) {\n        largest = n\n    }\n    return largest\n}",
    "    let i = 2;\n    while (n % i === 0) {\n        n /= i;\n        i++;\n    }\n    return n;\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n}\n",
    "  let largest_factor = 1;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      largest_factor = i;\n      n = n / i;\n    }\n  }\n  if (n > 1) {\n    largest_factor = n;\n  }\n  return largest_factor;\n}\n",
    "  let prime_factors = [];\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      prime_factors.push(i);\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  if (n > 1) {\n    prime_factors.push(n);\n  }\n  return prime_factors.sort((a, b) => b - a)[0];\n}\n",
    "    let i = 2;\n    while (n % i === 0) {\n        n /= i;\n        i++;\n    }\n    return n;\n}\n",
    "  let i = 2;\n  while (n % i === 0) {\n    n /= i;\n    i++;\n  }\n  return n;\n}\n",
    "  let factors = [];\n  let i = 2;\n  while (n % i === 0) {\n    factors.push(i);\n    n /= i;\n  }\n  return factors[factors.length - 1];\n}\n",
    "  if (n < 2) {\n    return n\n  }\n  let factors = []\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      factors.push(n / i)\n    }\n  }\n  let max = Math.max(...factors)\n  return max\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  let i = 2;\n  while (n % i === 0) {\n    n /= i;\n    i++;\n  }\n  return i;\n}\n",
    "  let prime_factors = [];\n  let i = 2;\n  while (n % i === 0) {\n    prime_factors.push(i);\n    n /= i;\n  }\n  if (n > 1) {\n    prime_factors.push(n);\n  }\n  return prime_factors.reduce((max, prime) => Math.max(max, prime), 1);\n}\n",
    "  let prime_factors = [];\n  let i = 2;\n  while (n % i === 0) {\n    prime_factors.push(i);\n    n /= i;\n  }\n  if (n > 1) {\n    prime_factors.push(n);\n  }\n  return prime_factors.sort((a, b) => b - a)[0];\n}\n",
    "  let i = 2;\n  let max = Math.sqrt(n);\n  while (i <= max) {\n    if (n % i === 0) {\n      n /= i;\n      max = Math.sqrt(n);\n    } else {\n      i++;\n    }\n  }\n  return n;\n}\n",
    "  if (n < 2) {\n    return n\n  }\n  let i = 2\n  while (n % i === 0) {\n    n /= i\n    i++\n  }\n  return n\n}\n",
    "    let prime_factors = [];\n    let i = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n            prime_factors.push(i);\n            n = n / i;\n        }\n        i++;\n    }\n    return prime_factors[prime_factors.length - 1];\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  let factors = [];\n  let i = 2;\n  while (n % i === 0) {\n    factors.push(i);\n    n /= i;\n  }\n  if (n === 1) {\n    return factors[factors.length - 1];\n  }\n  return factors[factors.length - 1] * largest_prime_factor(n);\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  let largest_prime_factor = 1;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      largest_prime_factor = i;\n      n = n / i;\n    }\n  }\n  if (n > 1) {\n    largest_prime_factor = n;\n  }\n  return largest_prime_factor;\n}\n",
    "  let factors = [];\n  let i = 2;\n  while (n % i === 0) {\n    factors.push(i);\n    n /= i;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return Math.max(...factors);\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  let i = 2;\n  while (n % i === 0) {\n    n /= i;\n    i++;\n  }\n  return i;\n}\n",
    "    let i = 2;\n    while (n % i === 0) {\n        n /= i;\n        i++;\n    }\n    return n;\n}\n",
    "    let i = 2;\n    let max = n;\n    while (n % i === 0) {\n        max = i;\n        i++;\n    }\n    return max;\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 3;\n  }\n  if (n % 2 === 0) {\n    return 2;\n  }\n  if (n % 3 === 0) {\n    return 3;\n  }\n  let i = 5;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i += 2;\n  }\n  return n;\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  let i = 2;\n  while (n % i === 0) {\n    n /= i;\n    i++;\n  }\n  return i;\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  let factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors.reduce((a, b) => a > b ? a : b);\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return 2;\n  }\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i += 2;\n  }\n  return n;\n}\n",
    "  let i = 2;\n  let max = 0;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      max = Math.max(max, i);\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n  if (n > 1) {\n    max = Math.max(max, n);\n  }\n  return max;\n}\n",
    "    let largest_prime_factor = 1;\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            largest_prime_factor = i;\n            n = n / i;\n        }\n    }\n    if (n > 1) {\n        largest_prime_factor = n;\n    }\n    return largest_prime_factor;\n}\n",
    "  let i = 2;\n  let max = 0;\n  while (n % i === 0) {\n    max = i;\n    n /= i;\n  }\n  return max;\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 3;\n  }\n  if (n % 2 === 0) {\n    return 2;\n  }\n  if (n % 3 === 0) {\n    return 3;\n  }\n  let i = 5;\n  while (n % i === 0) {\n    i += 2;\n  }\n  return i;\n}\n",
    "  let i = 2;\n  let max = n;\n  while (n % i === 0) {\n    max = i;\n    i++;\n  }\n  return max;\n}\n",
    "    let i = 2;\n    let max = n;\n    while (n % i === 0) {\n        max = i;\n        i++;\n    }\n    return max;\n}\n",
    "    if (n < 2) {\n        return n\n    }\n    let largest_prime_factor = 2\n    for (let i = 3; i <= Math.sqrt(n); i += 2) {\n        if (n % i === 0) {\n            largest_prime_factor = i\n            n /= i\n        }\n    }\n    if (n > 1) {\n        largest_prime_factor = n\n    }\n    return largest_prime_factor\n}",
    "    let factors = [];\n    let i = 2;\n    while (n % i === 0) {\n        factors.push(i);\n        n /= i;\n    }\n    if (n > 1) {\n        factors.push(n);\n    }\n    return factors.sort((a, b) => b - a)[0];\n}\n",
    "    let i = 2;\n    while (n % i === 0) {\n        n /= i;\n        i = 2;\n    }\n    return n;\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n}\n",
    "  if (n < 2) {\n    return n\n  }\n  let factors = []\n  let i = 2\n  while (n % i === 0) {\n    factors.push(i)\n    n /= i\n  }\n  if (n > 1) {\n    factors.push(n)\n  }\n  return Math.max(...factors)\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return 2;\n  }\n  if (n % 3 === 0) {\n    return 3;\n  }\n  if (n % 5 === 0) {\n    return 5;\n  }\n  if (n % 7 === 0) {\n    return 7;\n  }\n  if (n % 11 === 0) {\n    return 11;\n  }\n  if (n % 13 === 0) {\n    return 13;\n  }\n  if (n % 17 === 0) {\n    return 17;\n  }\n  if (n % 19 === 0) {\n    return 19;\n  }\n  if (n % 23 === 0) {\n    return 23;\n  }\n  if (n % 29 === 0) {\n    return 29;\n  }\n  if (n % 31 === 0) {\n    return 31;\n  }\n  if (n % 37 === 0) {\n    return 37;\n  }\n  if (n % 41 === 0) {\n    return 41;\n  }\n  if (n % 43 === 0) {\n    return 43;\n  }\n  if (n % 47 === 0) {\n    return 47;\n  }\n  if (n % 53 === 0) {\n    return 53;\n  }\n  if (n % 59 === 0) {\n    return 59;\n  }\n  if (n % 61 === 0) {\n    return 61;\n  }\n  if (n % 67 === 0) {\n    return 67;\n  }\n  if (n % 71 === 0) {\n    return 71;\n  }\n  if (n % 73 === 0) {\n    return 73;\n  }\n  if (n % 79 === 0) {\n    return 79;\n  }\n  if (n % 83 === 0) {\n    return 83;\n  }\n  if (n % 89 === 0) {\n    return 89;\n  }\n  if (n % 97 === 0) {\n    return 97;\n  }\n  if (",
    "  if (n === 1) {\n    return 1;\n  }\n  let i = 2;\n  while (n % i === 0) {\n    n /= i;\n    i++;\n  }\n  return i;\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 3;\n  }\n  if (n % 2 === 0) {\n    return 2;\n  }\n  if (n % 3 === 0) {\n    return 3;\n  }\n  let i = 5;\n  while (n % i === 0) {\n    i += 2;\n  }\n  return i;\n}\n",
    "  if (n < 2) {\n    return n\n  }\n  let factors = []\n  let i = 2\n  while (n % i === 0) {\n    factors.push(i)\n    n /= i\n  }\n  if (n > 1) {\n    factors.push(n)\n  }\n  return factors.reduce((a, b) => Math.max(a, b))\n}\n",
    "    let i = 2;\n    while (n % i === 0) {\n        n /= i;\n        i++;\n    }\n    return n;\n}\n",
    "    let i = 2;\n    while (n % i === 0) {\n        n /= i;\n        i++;\n    }\n    return n;\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n\n  let factors = [];\n  let i = 2;\n\n  while (i * i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n\n  if (n > 1) {\n    factors.push(n);\n  }\n\n  return factors.reduce((a, b) => Math.max(a, b));\n}\n",
    "  if (n === 1) {\n    return 1;\n  }\n  let i = 2;\n  while (n % i === 0) {\n    n /= i;\n    i++;\n  }\n  return i;\n}\n"
  ],
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ]
}