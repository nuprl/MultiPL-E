name: HumanEval_160_do_algebra
language: ts
prompt: "//Given two arrays operator, and operand. The first array has basic algebra\
  \ operations, and \n// the second array is an array of integers. Use the two given\
  \ arrays to build the algebric \n// expression and return the evaluation of this\
  \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
  \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
  \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n//\
  \ result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
  \ array is equal to the length of operand array minus one.\n// Operand is an array\
  \ of of non-negative integers.\n// Operator array has at least one operator, and\
  \ operand array has at least two operands.\nfunction do_algebra(operator: string[],\
  \ operand: number[]): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\"\
  , \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\"\
  , \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3,\
  \ 4]),8);\n}\n\ntest();"
completions: ["    let result = 0;\n    for (let i = 0; i < operand.length - 1; i++)\
    \ {\n        let op = operator[i];\n        let num = operand[i];\n        let\
    \ next = operand[i + 1];\n        if (op === '+') {\n            result += num\
    \ + next;\n        } else if (op === '-') {\n            result += num - next;\n\
    \        } else if (op === '*') {\n            result += num * next;\n       \
    \ } else if (op === '/') {\n            result += num / next;\n        } else\
    \ if (op === '**') {\n            result += Math.pow(num, next);\n        }\n\
    \    }\n    return result;\n}\n", "    let result = 0;\n    for (let i = 0; i\
    \ < operand.length - 1; i++) {\n        let op = operator[i];\n        let num\
    \ = operand[i];\n        if (op === '+') {\n            result += num;\n     \
    \   } else if (op === '-') {\n            result -= num;\n        } else if (op\
    \ === '*') {\n            result *= num;\n        } else if (op === '//') {\n\
    \            result = Math.floor(result / num);\n        } else if (op === '**')\
    \ {\n            result = Math.pow(result, num);\n        }\n    }\n    return\
    \ result;\n}\n", "    let result = 0;\n    for (let i = 0; i < operand.length\
    \ - 1; i++) {\n        let op = operator[i];\n        let num = operand[i];\n\
    \        if (op === '+') {\n            result += num;\n        } else if (op\
    \ === '-') {\n            result -= num;\n        } else if (op === '*') {\n \
    \           result *= num;\n        } else if (op === '//') {\n            result\
    \ = Math.floor(result / num);\n        } else if (op === '**') {\n           \
    \ result = Math.pow(result, num);\n        }\n    }\n    return result;\n}\n",
  "    let result = 0;\n    for (let i = 0; i < operand.length - 1; i++) {\n     \
    \   let op = operator[i];\n        let num = operand[i];\n        let next = operand[i\
    \ + 1];\n        if (op === '+') {\n            result += num;\n        } else\
    \ if (op === '-') {\n            result -= num;\n        } else if (op === '*')\
    \ {\n            result *= num;\n        } else if (op === '//') {\n         \
    \   result = Math.floor(result / num);\n        } else if (op === '**') {\n  \
    \          result = Math.pow(result, num);\n        }\n    }\n    return result;\n\
    }\n", "    let result = 0;\n    for (let i = 0; i < operand.length; i++) {\n \
    \       let temp = operand[i];\n        for (let j = 0; j < operator.length; j++)\
    \ {\n            let op = operator[j];\n            if (op === '+') {\n      \
    \          result += temp;\n            } else if (op === '-') {\n           \
    \     result -= temp;\n            } else if (op === '*') {\n                result\
    \ *= temp;\n            } else if (op === '//') {\n                result /= temp;\n\
    \            } else if (op === '**') {\n                result = Math.pow(result,\
    \ temp);\n            }\n        }\n    }\n    return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
