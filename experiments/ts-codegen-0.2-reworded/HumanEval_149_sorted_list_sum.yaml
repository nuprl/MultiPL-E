name: HumanEval_149_sorted_list_sum
language: ts
prompt: "//Write a function that accepts an array of strings as a parameter,\n// deletes\
  \ the strings that have odd lengths from it,\n// and returns the resulted array\
  \ with a sorted order,\n// The array is always an array of strings and never an\
  \ array of numbers,\n// and it may contain duplicates.\n// The order of the array\
  \ should be ascending by length of each word, and you\n// should return the array\
  \ sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n\
  // The function should return an array of strings in sorted order.\n// You may assume\
  \ that all words will have the same length.\n// For example:\n// >>> list_sort([\"\
  aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"\
  cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst: string[]): string[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = sorted_list_sum;\n  assert.deepEqual(candidate([\"\
  aa\", \"a\", \"aaa\"]),[\"aa\"]);\n  assert.deepEqual(candidate([\"school\", \"\
  AI\", \"asdf\", \"b\"]),[\"AI\", \"asdf\", \"school\"]);\n  assert.deepEqual(candidate([\"\
  d\", \"b\", \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"d\", \"dcba\",\
  \ \"abcd\", \"a\"]),[\"abcd\", \"dcba\"]);\n  assert.deepEqual(candidate([\"AI\"\
  , \"ai\", \"au\"]),[\"AI\", \"ai\", \"au\"]);\n  assert.deepEqual(candidate([\"\
  a\", \"b\", \"b\", \"c\", \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"\
  aaaa\", \"bbbb\", \"dd\", \"cc\"]),[\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\n\n\
  test();"
completions: ["    let sorted_lst = lst.sort((a, b) => a.length - b.length);\n   \
    \ let result = [];\n    for (let i = 0; i < sorted_lst.length; i++) {\n      \
    \  if (sorted_lst[i].length % 2 === 0) {\n            result.push(sorted_lst[i]);\n\
    \        }\n    }\n    return result;\n}\n", "  let result = [];\n  for (let i\
    \ = 0; i < lst.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < lst[i].length;\
    \ j++) {\n      sum += lst[i][j];\n    }\n    if (sum % 2 === 0) {\n      result.push(lst[i]);\n\
    \    }\n  }\n  result.sort((a, b) => a.length - b.length);\n  return result;\n\
    }\n", "  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length\
    \ % 2 === 0) {\n      result.push(lst[i]);\n    }\n  }\n  result.sort((a, b) =>\
    \ a.length - b.length);\n  return result;\n}\n", "  let result = [];\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 === 0) {\n      result.push(lst[i]);\n\
    \    }\n  }\n  result.sort((a, b) => a.length - b.length);\n  return result;\n\
    }\n", "    let result = [];\n    for (let i = 0; i < lst.length; i++) {\n    \
    \    let sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n       \
    \     sum += lst[i][j];\n        }\n        if (sum % 2 === 0) {\n           \
    \ result.push(lst[i]);\n        }\n    }\n    result.sort((a, b) => a.length -\
    \ b.length);\n    return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
