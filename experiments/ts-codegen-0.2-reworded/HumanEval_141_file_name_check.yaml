name: HumanEval_141_file_name_check
language: ts
prompt: "//Create a function which takes a string representing a file's name, and\
  \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
  // A file's name is considered to be valid if and only if all the following conditions\
  \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in the\
  \ file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring\
  \ before the dot should not be empty, and it starts with a letter from \n// the\
  \ latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should\
  \ be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
  example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\n\
  function file_name_check(file_name: string): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = file_name_check;\n  assert.deepEqual(candidate(\"\
  example.txt\"),\"Yes\");\n  assert.deepEqual(candidate(\"1example.dll\"),\"No\"\
  );\n  assert.deepEqual(candidate(\"s1sdf3.asd\"),\"No\");\n  assert.deepEqual(candidate(\"\
  K.dll\"),\"Yes\");\n  assert.deepEqual(candidate(\"MY16FILE3.exe\"),\"Yes\");\n\
  \  assert.deepEqual(candidate(\"His12FILE94.exe\"),\"No\");\n  assert.deepEqual(candidate(\"\
  _Y.txt\"),\"No\");\n  assert.deepEqual(candidate(\"?aREYA.exe\"),\"No\");\n  assert.deepEqual(candidate(\"\
  /this_is_valid.dll\"),\"No\");\n  assert.deepEqual(candidate(\"this_is_valid.wow\"\
  ),\"No\");\n  assert.deepEqual(candidate(\"this_is_valid.txt\"),\"Yes\");\n  assert.deepEqual(candidate(\"\
  this_is_valid.txtexe\"),\"No\");\n  assert.deepEqual(candidate(\"#this2_i4s_5valid.ten\"\
  ),\"No\");\n  assert.deepEqual(candidate(\"@this1_is6_valid.exe\"),\"No\");\n  assert.deepEqual(candidate(\"\
  this_is_12valid.6exe4.txt\"),\"No\");\n  assert.deepEqual(candidate(\"all.exe.txt\"\
  ),\"No\");\n  assert.deepEqual(candidate(\"I563_No.exe\"),\"Yes\");\n  assert.deepEqual(candidate(\"\
  Is3youfault.txt\"),\"Yes\");\n  assert.deepEqual(candidate(\"no_one#knows.dll\"\
  ),\"Yes\");\n  assert.deepEqual(candidate(\"1I563_Yes3.exe\"),\"No\");\n  assert.deepEqual(candidate(\"\
  I563_Yes3.txtt\"),\"No\");\n  assert.deepEqual(candidate(\"final..txt\"),\"No\"\
  );\n  assert.deepEqual(candidate(\"final132\"),\"No\");\n  assert.deepEqual(candidate(\"\
  _f4indsartal132.\"),\"No\");\n  assert.deepEqual(candidate(\".txt\"),\"No\");\n\
  \  assert.deepEqual(candidate(\"s.\"),\"No\");\n}\n\ntest();"
completions: ["    if (file_name.length > 3 && file_name.match(/[0-9]/g) !== null)\
    \ {\n        return \"No\";\n    }\n    if (file_name.match(/\\./g) !== null)\
    \ {\n        if (file_name.match(/^[a-zA-Z]/g) !== null && file_name.match(/[a-zA-Z]\\\
    ./) !== null) {\n            if (file_name.match(/[0-9]/g) !== null) {\n     \
    \           return \"No\";\n            }\n            else {\n              \
    \  return \"Yes\";\n            }\n        }\n        else {\n            return\
    \ \"No\";\n        }\n    }\n    else {\n        return \"No\";\n    }\n}\n",
  "    if (file_name.length > 3 && file_name.length < 6) {\n        if (file_name.indexOf(\"\
    .\") == 0 && file_name.indexOf(\".\") == file_name.length - 1) {\n           \
    \ if (file_name.substring(0, 1).match(/[a-zA-Z]/)) {\n                if (file_name.substring(1,\
    \ 2).match(/[a-zA-Z]/)) {\n                    if (file_name.substring(2, 3).match(/[0-9]/))\
    \ {\n                        return \"No\";\n                    }\n         \
    \       }\n            }\n        }\n    }\n    return \"Yes\";\n}\n", "    if\
    \ (file_name.length > 3 && file_name.match(/^[0-9]{3}[.]/)) {\n        return\
    \ \"No\";\n    }\n    if (file_name.match(/^[a-zA-Z]{1}[.]/)) {\n        return\
    \ \"Yes\";\n    }\n    if (file_name.match(/^[a-zA-Z]{1}[.][0-9]{1}[.]/)) {\n\
    \        return \"Yes\";\n    }\n    if (file_name.match(/^[a-zA-Z]{1}[.][0-9]{1}[.][0-9]{1}[.]/))\
    \ {\n        return \"Yes\";\n    }\n    return \"No\";\n}\n", "    if (file_name.length\
    \ > 3 && file_name.length < 6) {\n        if (file_name.indexOf(\".\") == 0) {\n\
    \            if (file_name.substr(0, 1).match(/[a-zA-Z]/)) {\n               \
    \ if (file_name.substr(1, 3).match(/[0-9]/)) {\n                    if (file_name.substr(4,\
    \ 3).match(/[0-9]/)) {\n                        if (file_name.substr(5, 3).match(/[0-9]/))\
    \ {\n                            return \"Yes\";\n                        }\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return \"No\";\n}\n", "    if (file_name.match(/^[0-9]{3}[.]/)) {\n      \
    \  return \"No\";\n    }\n    if (file_name.match(/[.]/)) {\n        if (file_name.match(/^[a-zA-Z]/))\
    \ {\n            if (file_name.match(/[.]txt$/)) {\n                return \"\
    Yes\";\n            }\n            if (file_name.match(/[.]exe$/)) {\n       \
    \         return \"Yes\";\n            }\n            if (file_name.match(/[.]dll$/))\
    \ {\n                return \"Yes\";\n            }\n        }\n    }\n    return\
    \ \"No\";\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
