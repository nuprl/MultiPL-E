name: HumanEval_127_intersection
language: ts
prompt: "//You are given two intervals,\n// where each interval is a pair of integers.\
  \ For example, interval = (start, end) = (1, 2).\n// The given intervals are closed\
  \ which means that the interval (start, end)\n// includes both start and end.\n\
  // For each given interval, it is assumed that its start is less or equal its end.\n\
  // Your task is to determine whether the length of intersection of these two \n\
  // intervals is a prime number.\n// Example, the intersection of the intervals (1,\
  \ 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n//\
  \ If the length of the intersection is a prime number, return \"YES\",\n// otherwise,\
  \ return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output]\
  \ samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1,\
  \ 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction\
  \ intersection(interval1: [number, number], interval2: [number, number]): string\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = intersection;\n  assert.deepEqual(candidate([1, 2],\
  \ [2, 3]),\"NO\");\n  assert.deepEqual(candidate([-1, 1], [0, 4]),\"NO\");\n  assert.deepEqual(candidate([-3,\
  \ -1], [-5, 5]),\"YES\");\n  assert.deepEqual(candidate([-2, 2], [-4, 0]),\"YES\"\
  );\n  assert.deepEqual(candidate([-11, 2], [-1, -1]),\"NO\");\n  assert.deepEqual(candidate([1,\
  \ 2], [3, 5]),\"NO\");\n  assert.deepEqual(candidate([1, 2], [1, 2]),\"NO\");\n\
  \  assert.deepEqual(candidate([-2, -2], [-3, -2]),\"NO\");\n}\n\ntest();"
completions: ["    let min1 = Math.min(interval1[0], interval1[1]),\n        max1\
    \ = Math.max(interval1[0], interval1[1]),\n        min2 = Math.min(interval2[0],\
    \ interval2[1]),\n        max2 = Math.max(interval2[0], interval2[1]);\n    if\
    \ (min1 > max2 || min2 > max1) {\n        return \"NO\";\n    }\n    let len =\
    \ Math.min(max1, max2) - Math.max(min1, min2) + 1;\n    if (len % 2 === 0) {\n\
    \        return \"NO\";\n    }\n    return \"YES\";\n}", "    let result = 0;\n\
    \    let start1 = interval1[0];\n    let end1 = interval1[1];\n    let start2\
    \ = interval2[0];\n    let end2 = interval2[1];\n    if (start1 > end1 || start2\
    \ > end2) {\n        return \"NO\";\n    }\n    if (start1 < end2 && end1 > start2)\
    \ {\n        result = Math.min(end1, end2) - Math.max(start1, start2);\n    }\n\
    \    if (start2 < end1 && end2 > start1) {\n        result = Math.min(end2, end1)\
    \ - Math.max(start2, start1);\n    }\n    if (result % 1 === 0) {\n        return\
    \ \"YES\";\n    }\n    return \"NO\";\n}", "    let [start1, end1] = interval1;\n\
    \    let [start2, end2] = interval2;\n    if (start1 > end2 || start2 > end1)\
    \ {\n        return \"NO\";\n    }\n    let length = Math.min(end1, end2) - Math.max(start1,\
    \ start2);\n    let isPrime = false;\n    for (let i = 2; i <= length / 2; i++)\
    \ {\n        if (length % i === 0) {\n            isPrime = true;\n          \
    \  break;\n        }\n    }\n    if (isPrime) {\n        return \"YES\";\n   \
    \ }\n    return \"NO\";\n}", "    let result = false;\n    let min1 = Math.min(interval1[0],\
    \ interval1[1]);\n    let max1 = Math.max(interval1[0], interval1[1]);\n    let\
    \ min2 = Math.min(interval2[0], interval2[1]);\n    let max2 = Math.max(interval2[0],\
    \ interval2[1]);\n    if (min1 <= max2 && max1 >= min2) {\n        let length\
    \ = Math.min(max2 - min1, max1 - min2) + 1;\n        if (isPrime(length)) {\n\
    \            result = true;\n        }\n    }\n    return result ? \"YES\" : \"\
    NO\";\n}\n\nfunction isPrime(n: number): boolean {\n    if (n < 2) {\n       \
    \ return false;\n    }\n    if (n === 2) {\n        return true;\n    }\n    if\
    \ (n % 2 === 0) {\n        return false;\n    }\n    for (let i = 3; i * i <=\
    \ n; i += 2) {\n        if (n % i === 0) {\n            return false;\n      \
    \  }\n    }\n    return true;\n}\n", "    let min1 = Math.min(...interval1);\n\
    \    let max1 = Math.max(...interval1);\n    let min2 = Math.min(...interval2);\n\
    \    let max2 = Math.max(...interval2);\n    if (min1 > max2 || max1 < min2) {\n\
    \        return \"NO\";\n    }\n    let len = Math.min(max1 - min1, max2 - min2);\n\
    \    let isPrime = len % 1 === 0;\n    if (isPrime) {\n        return \"YES\"\
    ;\n    }\n    return \"NO\";\n}", "    if (interval1[0] > interval2[1] || interval1[1]\
    \ < interval2[0]) {\n        return \"NO\";\n    }\n    let min = Math.min(interval1[0],\
    \ interval2[0]);\n    let max = Math.max(interval1[1], interval2[1]);\n    let\
    \ length = max - min + 1;\n    if (length % 2 === 0) {\n        return \"NO\"\
    ;\n    }\n    return \"YES\";\n}", "    let [start1, end1] = interval1;\n    let\
    \ [start2, end2] = interval2;\n    if (start1 > end2 || start2 > end1) {\n   \
    \     return \"NO\";\n    }\n    let length = Math.min(end1, end2) - Math.max(start1,\
    \ start2);\n    if (length % 2 === 0) {\n        return \"NO\";\n    }\n    return\
    \ \"YES\";\n}", "    let start1 = interval1[0];\n    let end1 = interval1[1];\n\
    \    let start2 = interval2[0];\n    let end2 = interval2[1];\n    let length\
    \ = end1 - start1;\n    let length2 = end2 - start2;\n    let result = false;\n\
    \    if (length > 0 && length2 > 0) {\n        let i = Math.min(start1, start2);\n\
    \        let j = Math.max(start1, start2);\n        let k = Math.min(end1, end2);\n\
    \        let l = Math.max(end1, end2);\n        let count = 0;\n        while\
    \ (i <= j && i <= k && i <= l) {\n            count++;\n            i++;\n   \
    \     }\n        if (count % 2 === 0) {\n            result = true;\n        }\n\
    \    }\n    return result ? \"YES\" : \"NO\";\n}", "    let i1 = interval1[0];\n\
    \    let i2 = interval1[1];\n    let j1 = interval2[0];\n    let j2 = interval2[1];\n\
    \    if (i1 > j2 || i2 < j1) {\n        return \"NO\";\n    }\n    let min = Math.min(i1,\
    \ i2);\n    let max = Math.max(i1, i2);\n    let min2 = Math.min(j1, j2);\n  \
    \  let max2 = Math.max(j1, j2);\n    let len = max - min;\n    if (len % 2 ===\
    \ 0) {\n        return \"NO\";\n    }\n    let result = true;\n    for (let i\
    \ = min2; i <= max2; i++) {\n        if (i % len === 0) {\n            result\
    \ = false;\n            break;\n        }\n    }\n    return result ? \"YES\"\
    \ : \"NO\";\n}", "    let min1 = Math.min(interval1[0], interval1[1]);\n    let\
    \ max1 = Math.max(interval1[0], interval1[1]);\n    let min2 = Math.min(interval2[0],\
    \ interval2[1]);\n    let max2 = Math.max(interval2[0], interval2[1]);\n    if\
    \ (min1 > max2 || max1 < min2) {\n        return \"NO\";\n    }\n    let length\
    \ = Math.min(max2 - min1, max1 - min2);\n    let isPrime = false;\n    for (let\
    \ i = 2; i <= Math.sqrt(length); i++) {\n        if (length % i === 0) {\n   \
    \         isPrime = true;\n            break;\n        }\n    }\n    if (isPrime)\
    \ {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
