name: HumanEval_68_pluck
language: ts
prompt: "//\"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n// your task is to pluck one of the nodes and return it.\n// The\
  \ plucked node should be the node with the smallest even value.\n// If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n// The plucked node should be returned in an array, [ smalest_value, its\
  \ index ],\n// If there are no even values or the given array is empty, return [].\n\
  // Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest\
  \ even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2,\
  \ 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
  \ index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5,\
  \ 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there\
  \ are two zeros,\n// so we will choose the first zero, which has the smallest index.\n\
  // Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction\
  \ pluck(arr: number[]): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
  \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
  \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n\
  \  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
  \ 9, 7, 1]),[]);\n}\n\ntest();"
completions: ["  let smallest_even = Infinity;\n  let smallest_index = -1;\n  let\
    \ result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 ===\
    \ 0) {\n      if (arr[i] < smallest_even) {\n        smallest_even = arr[i];\n\
    \        smallest_index = i;\n      }\n    }\n  }\n  if (smallest_even === Infinity)\
    \ {\n    return [];\n  }\n  result.push(smallest_even);\n  result.push(smallest_index);\n\
    \  return result;\n}\n", "  let smallest_even = Infinity;\n  let smallest_index\
    \ = -1;\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] % 2 === 0) {\n      if (arr[i] < smallest_even) {\n        smallest_even\
    \ = arr[i];\n        smallest_index = i;\n      }\n    }\n  }\n  if (smallest_index\
    \ !== -1) {\n    result = [smallest_even, smallest_index];\n  }\n  return result;\n\
    }\n", "  const result = [];\n  let min = Infinity;\n  let minIndex = -1;\n  for\
    \ (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      if (arr[i]\
    \ < min) {\n        min = arr[i];\n        minIndex = i;\n      }\n    }\n  }\n\
    \  if (minIndex !== -1) {\n    result.push(min, minIndex);\n  }\n  return result;\n\
    }\n\nmodule.exports = pluck;\n", "  let smallest_value = arr[0];\n  let smallest_index\
    \ = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < smallest_value)\
    \ {\n      smallest_value = arr[i];\n      smallest_index = i;\n    }\n  }\n \
    \ let result = [smallest_value, smallest_index];\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0) {\n      if (arr[i] < smallest_value) {\n\
    \        smallest_value = arr[i];\n        smallest_index = i;\n      }\n    }\n\
    \  }\n  return result;\n}\n", "  let result = [];\n  let min = Number.MAX_SAFE_INTEGER;\n\
    \  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] %\
    \ 2 === 0) {\n      if (arr[i] < min) {\n        min = arr[i];\n        index\
    \ = i;\n      }\n    }\n  }\n  if (index === -1) {\n    return [];\n  }\n  result.push(min);\n\
    \  result.push(index);\n  return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
