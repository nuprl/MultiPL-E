name: HumanEval_65_circular_shift
language: ts
prompt: "//Circular shift the digits of the integer x, shift the digits right by shift\n\
  // and return the result as a string.\n// If shift > number of digits, return digits\
  \ reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
  \ 2)\n// \"12\"\nfunction circular_shift(x: number, shift: number): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = circular_shift;\n  assert.deepEqual(candidate(100,\
  \ 2),\"001\");\n  assert.deepEqual(candidate(12, 2),\"12\");\n  assert.deepEqual(candidate(97,\
  \ 8),\"79\");\n  assert.deepEqual(candidate(12, 1),\"21\");\n  assert.deepEqual(candidate(11,\
  \ 101),\"11\");\n}\n\ntest();"
completions: ["  let digits = String(x);\n  let result = \"\";\n  let i = 0;\n  while\
    \ (i < shift) {\n    result = digits[i] + result;\n    i++;\n  }\n  while (i <\
    \ digits.length) {\n    result = digits[i] + result;\n    i++;\n  }\n  return\
    \ result;\n}\n", "  let result = '';\n  let digits = x.toString();\n  if (shift\
    \ > digits.length) {\n    result = digits.split('').reverse().join('');\n  } else\
    \ {\n    result = digits.substr(0, digits.length - shift) + digits.substr(digits.length\
    \ - shift);\n  }\n  return result;\n}\n", "  let result = ''\n  let n = x\n  while\
    \ (n > 0) {\n    result = (n % 10) + result\n    n = Math.floor(n / 10)\n  }\n\
    \  if (shift > result.length) {\n    return result.slice(result.length - shift)\n\
    \  } else {\n    return result.slice(shift)\n  }\n}\n", "  let result = ''\n \
    \ let digits = x.toString()\n  let i = 0\n  while (i < shift) {\n    result =\
    \ digits[i] + result\n    i++\n  }\n  while (i < digits.length) {\n    result\
    \ = digits[i] + result\n    i++\n  }\n  return result\n}\n", "  let digits = String(x);\n\
    \  let result = '';\n  let i = 0;\n  let j = shift;\n  while (i < digits.length)\
    \ {\n    result += digits.charAt(i);\n    if (j === 0) {\n      j = shift;\n \
    \   } else {\n      j--;\n    }\n    i++;\n  }\n  return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
