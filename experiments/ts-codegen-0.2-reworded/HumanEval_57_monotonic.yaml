name: HumanEval_57_monotonic
language: ts
prompt: "//Return true is array elements are monotonically increasing or decreasing.\n\
  // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n\
  // >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]): boolean\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4,\
  \ 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
  \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n  assert.deepEqual(candidate([4,\
  \ 1, 1, 0]),true);\n  assert.deepEqual(candidate([1, 2, 3, 2, 5, 60]),false);\n\
  \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n  assert.deepEqual(candidate([9,\
  \ 9, 9, 9]),true);\n}\n\ntest();"
completions: ["  if (l.length < 2) {\n    return true;\n  }\n  let last = l[0];\n\
    \  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n      return\
    \ false;\n    }\n    last = l[i];\n  }\n  return true;\n}\n", "    let isMonotonic\
    \ = true;\n    let last = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] < last) {\n            isMonotonic = false;\n            break;\n\
    \        }\n        last = l[i];\n    }\n    return isMonotonic;\n}", "  if (l.length\
    \ < 2) {\n    return true;\n  }\n  let last = l[0];\n  for (let i = 1; i < l.length;\
    \ i++) {\n    if (l[i] < last) {\n      return false;\n    }\n    last = l[i];\n\
    \  }\n  return true;\n}\n", "  if (l.length < 2) {\n    return true;\n  }\n  let\
    \ last = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n\
    \      return false;\n    }\n    last = l[i];\n  }\n  return true;\n}\n", "  let\
    \ isMonotonic = true;\n  let last = l[0];\n  for (let i = 1; i < l.length; i++)\
    \ {\n    if (l[i] < last) {\n      isMonotonic = false;\n      break;\n    }\n\
    \    last = l[i];\n  }\n  return isMonotonic;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
