name: HumanEval_57_monotonic
language: ts
prompt: "//Return true is array elements are monotonically increasing or decreasing.\n\
  // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n\
  // >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]): boolean\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4,\
  \ 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
  \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n  assert.deepEqual(candidate([4,\
  \ 1, 1, 0]),true);\n  assert.deepEqual(candidate([1, 2, 3, 2, 5, 60]),false);\n\
  \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n  assert.deepEqual(candidate([9,\
  \ 9, 9, 9]),true);\n}\n\ntest();"
completions: ["  if (l.length < 2) {\n    return true;\n  }\n  let last = l[0];\n\
    \  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n      return\
    \ false;\n    }\n    last = l[i];\n  }\n  return true;\n}\n", "    let isMonotonic\
    \ = true;\n    let last = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] < last) {\n            isMonotonic = false;\n            break;\n\
    \        }\n        last = l[i];\n    }\n    return isMonotonic;\n}", "  if (l.length\
    \ < 2) {\n    return true;\n  }\n  let last = l[0];\n  for (let i = 1; i < l.length;\
    \ i++) {\n    if (l[i] < last) {\n      return false;\n    }\n    last = l[i];\n\
    \  }\n  return true;\n}\n", "  if (l.length < 2) {\n    return true;\n  }\n  let\
    \ last = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n\
    \      return false;\n    }\n    last = l[i];\n  }\n  return true;\n}\n", "  let\
    \ isMonotonic = true;\n  let last = l[0];\n  for (let i = 1; i < l.length; i++)\
    \ {\n    if (l[i] < last) {\n      isMonotonic = false;\n      break;\n    }\n\
    \    last = l[i];\n  }\n  return isMonotonic;\n}\n", "  let isMonotonic = true;\n\
    \  for (let i = 1; i < l.length; i++) {\n    if (l[i] < l[i - 1]) {\n      isMonotonic\
    \ = false;\n      break;\n    }\n  }\n  return isMonotonic;\n}\n", "    let result\
    \ = true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i -\
    \ 1]) {\n            result = false;\n            break;\n        }\n    }\n \
    \   return result;\n}\n", "  if (l.length < 2) {\n    return true;\n  }\n  let\
    \ last = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n\
    \      return false;\n    }\n    last = l[i];\n  }\n  return true;\n}\n", "  let\
    \ isMonotonic = true;\n  let last = l[0];\n  for (let i = 1; i < l.length; i++)\
    \ {\n    if (l[i] < last) {\n      isMonotonic = false;\n      break;\n    }\n\
    \    last = l[i];\n  }\n  return isMonotonic;\n}\n", "  if (l.length < 2) {\n\
    \    return true;\n  }\n  let last = l[0];\n  for (let i = 1; i < l.length; i++)\
    \ {\n    if (l[i] < last) {\n      return false;\n    }\n    last = l[i];\n  }\n\
    \  return true;\n}\n", "    let isMonotonic = true;\n    let last = l[0];\n  \
    \  for (let i = 1; i < l.length; i++) {\n        if (l[i] < last) {\n        \
    \    isMonotonic = false;\n            break;\n        }\n        last = l[i];\n\
    \    }\n    return isMonotonic;\n}\n", "  if (l.length < 2) {\n    return true;\n\
    \  }\n  let last = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i]\
    \ < last) {\n      return false;\n    }\n    last = l[i];\n  }\n  return true;\n\
    }\n", "  if (l.length < 2) {\n    return true;\n  }\n  let last = l[0];\n  for\
    \ (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n      return false;\n\
    \    }\n    last = l[i];\n  }\n  return true;\n}\n", "  let isMonotonic = true;\n\
    \  let last = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last)\
    \ {\n      isMonotonic = false;\n      break;\n    }\n    last = l[i];\n  }\n\
    \  return isMonotonic;\n}\n", "  let last = l[0];\n  for (let i = 1; i < l.length;\
    \ i++) {\n    if (l[i] < last) {\n      return false;\n    }\n    last = l[i];\n\
    \  }\n  return true;\n}\n", "  if (l.length < 2) {\n    return true;\n  }\n  let\
    \ last = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n\
    \      return false;\n    }\n    last = l[i];\n  }\n  return true;\n}\n", "  if\
    \ (l.length < 2) {\n    return true;\n  }\n  let last = l[0];\n  for (let i =\
    \ 1; i < l.length; i++) {\n    if (l[i] < last) {\n      return false;\n    }\n\
    \    last = l[i];\n  }\n  return true;\n}\n", "  if (l.length < 2) {\n    return\
    \ true;\n  }\n  let last = l[0];\n  for (let i = 1; i < l.length; i++) {\n   \
    \ if (l[i] < last) {\n      return false;\n    }\n    last = l[i];\n  }\n  return\
    \ true;\n}\n", "    let isMonotonic = true;\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] < l[i - 1]) {\n            isMonotonic = false;\n \
    \           break;\n        }\n    }\n    return isMonotonic;\n}\n", "  let isMonotonic\
    \ = true;\n  let last = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if\
    \ (l[i] < last) {\n      isMonotonic = false;\n      break;\n    }\n    last =\
    \ l[i];\n  }\n  return isMonotonic;\n}\n", "  let isMonotonic = true;\n  let last\
    \ = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n  \
    \    isMonotonic = false;\n      break;\n    }\n    last = l[i];\n  }\n  return\
    \ isMonotonic;\n}\n", "  if (l.length < 2) {\n    return true;\n  }\n  let last\
    \ = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n  \
    \    return false;\n    }\n    last = l[i];\n  }\n  return true;\n}\n", "    if\
    \ (l.length < 2) {\n        return true;\n    }\n    let last = l[0];\n    for\
    \ (let i = 1; i < l.length; i++) {\n        if (l[i] < last) {\n            return\
    \ false;\n        }\n        last = l[i];\n    }\n    return true;\n}\n", "  if\
    \ (l.length < 2) {\n    return true;\n  }\n  let last = l[0];\n  for (let i =\
    \ 1; i < l.length; i++) {\n    if (l[i] < last) {\n      return false;\n    }\n\
    \    last = l[i];\n  }\n  return true;\n}\n", "    let isMonotonic = true;\n \
    \   let last = l[0];\n    for (let i = 1; i < l.length; i++) {\n        if (l[i]\
    \ < last) {\n            isMonotonic = false;\n            break;\n        }\n\
    \        last = l[i];\n    }\n    return isMonotonic;\n}\n", "    let last = l[0];\n\
    \    for (let i = 1; i < l.length; i++) {\n        if (l[i] < last) {\n      \
    \      return false;\n        }\n        last = l[i];\n    }\n    return true;\n\
    }\n", "  if (l.length < 2) {\n    return true;\n  }\n  let last = l[0];\n  for\
    \ (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n      return false;\n\
    \    }\n    last = l[i];\n  }\n  return true;\n}\n", "  if (l.length < 2) {\n\
    \    return true;\n  }\n  let last = l[0];\n  for (let i = 1; i < l.length; i++)\
    \ {\n    if (l[i] < last) {\n      return false;\n    }\n    last = l[i];\n  }\n\
    \  return true;\n}\n", "  if (l.length < 2) {\n    return true;\n  }\n  let last\
    \ = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n  \
    \    return false;\n    }\n    last = l[i];\n  }\n  return true;\n}\n", "  if\
    \ (l.length < 2) {\n    return true;\n  }\n  let last = l[0];\n  for (let i =\
    \ 1; i < l.length; i++) {\n    if (l[i] < last) {\n      return false;\n    }\n\
    \    last = l[i];\n  }\n  return true;\n}\n", "  let isMonotonic = true;\n  let\
    \ last = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n\
    \      isMonotonic = false;\n      break;\n    }\n    last = l[i];\n  }\n  return\
    \ isMonotonic;\n}\n", "  if (l.length < 2) {\n    return true;\n  }\n\n  let isMonotonic\
    \ = true;\n  let last = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if\
    \ (l[i] < last) {\n      isMonotonic = false;\n      break;\n    }\n    last =\
    \ l[i];\n  }\n  return isMonotonic;\n}\n", "  let isMonotonic = true;\n  let last\
    \ = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n  \
    \    isMonotonic = false;\n      break;\n    }\n    last = l[i];\n  }\n  return\
    \ isMonotonic;\n}\n", "    let isMonotonic = true;\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] < l[i - 1]) {\n            isMonotonic = false;\n \
    \           break;\n        }\n    }\n    return isMonotonic;\n}\n", "  let isMonotonic\
    \ = true;\n  let last = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if\
    \ (l[i] < last) {\n      isMonotonic = false;\n      break;\n    }\n    last =\
    \ l[i];\n  }\n  return isMonotonic;\n}\n", "  let isMonotonic = true;\n  let last\
    \ = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n  \
    \    isMonotonic = false;\n      break;\n    }\n    last = l[i];\n  }\n  return\
    \ isMonotonic;\n}\n", "  if (l.length < 2) {\n    return true;\n  }\n  let last\
    \ = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n  \
    \    return false;\n    }\n    last = l[i];\n  }\n  return true;\n}\n", "  let\
    \ i = 0\n  let j = 0\n  let k = 0\n  let l1 = 0\n  let l2 = 0\n  let m = 0\n \
    \ let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n\
    \  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n\
    \  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n\
    \  let f = 0\n  let g = 0\n  let h = 0\n  let i1 = 0\n  let i2 = 0\n  let j1 =\
    \ 0\n  let j2 = 0\n  let k1 = 0\n  let k2 = 0\n  let l1 = 0\n  let l2 = 0\n  let\
    \ m1 = 0\n  let m2 = 0\n  let n1 = 0\n  let n2 = 0\n  let o1 = 0\n  let o2 = 0\n\
    \  let p1 = 0\n  let p2 = 0\n  let q1 = 0\n  let q2 = 0\n  let r1 = 0\n  let r2\
    \ = 0\n  let s1 = 0\n  let s2 = 0\n  let t1 = 0\n  let t2 = 0\n  let u1 = 0\n\
    \  let u2 = 0\n  let v1 = 0\n  let v2 = 0\n  let w1 = 0\n  let w2 = 0\n  let x1\
    \ = 0\n  let x2 = 0\n  let y1 = 0\n  let y2 = 0\n  let z1 = 0\n  let z2 = 0\n\
    \  let a1 = 0\n  let a2 = 0\n  let b1 = 0\n  let b2 = 0\n  let c1 = 0\n  let c2\
    \ = 0\n  let d1 = 0\n  let d2 = 0\n  let e1 = 0\n  let e2 = 0\n  let f1 = 0\n\
    \  let f2 = 0\n  let g1 = 0\n  let g2 =", "    let isMonotonic = true;\n    let\
    \ last = l[0];\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < last)\
    \ {\n            isMonotonic = false;\n            break;\n        }\n       \
    \ last = l[i];\n    }\n    return isMonotonic;\n}\n", "  if (l.length < 2) {\n\
    \    return true;\n  }\n  let last = l[0];\n  for (let i = 1; i < l.length; i++)\
    \ {\n    if (l[i] < last) {\n      return false;\n    }\n    last = l[i];\n  }\n\
    \  return true;\n}\n", "  if (l.length < 2) {\n    return true;\n  }\n  let last\
    \ = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n  \
    \    return false;\n    }\n    last = l[i];\n  }\n  return true;\n}\n", "  let\
    \ isMonotonic = true;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] <\
    \ l[i - 1]) {\n      isMonotonic = false;\n      break;\n    }\n  }\n  return\
    \ isMonotonic;\n}\n", "  if (l.length < 2) {\n    return true;\n  }\n  let last\
    \ = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n  \
    \    return false;\n    }\n    last = l[i];\n  }\n  return true;\n}\n", "    let\
    \ isMonotonic = true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i]\
    \ < l[i - 1]) {\n            isMonotonic = false;\n            break;\n      \
    \  }\n    }\n    return isMonotonic;\n}\n", "  let last = l[0];\n  for (let i\
    \ = 1; i < l.length; i++) {\n    if (l[i] < last) {\n      return false;\n   \
    \ }\n    last = l[i];\n  }\n  return true;\n}\n", "  if (l.length < 2) {\n   \
    \ return true;\n  }\n  let last = l[0];\n  for (let i = 1; i < l.length; i++)\
    \ {\n    if (l[i] < last) {\n      return false;\n    }\n    last = l[i];\n  }\n\
    \  return true;\n}\n", "  if (l.length < 2) {\n    return true;\n  }\n  let last\
    \ = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n  \
    \    return false;\n    }\n    last = l[i];\n  }\n  return true;\n}\n", "    let\
    \ isMonotonic = true;\n    let last = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] < last) {\n            isMonotonic = false;\n     \
    \       break;\n        }\n        last = l[i];\n    }\n    return isMonotonic;\n\
    }\n", "  let isMonotonic = true;\n  let last = l[0];\n  for (let i = 1; i < l.length;\
    \ i++) {\n    if (l[i] < last) {\n      isMonotonic = false;\n      break;\n \
    \   }\n    last = l[i];\n  }\n  return isMonotonic;\n}\n", "  if (l.length < 2)\
    \ {\n    return true;\n  }\n  let last = l[0];\n  for (let i = 1; i < l.length;\
    \ i++) {\n    if (l[i] < last) {\n      return false;\n    }\n    last = l[i];\n\
    \  }\n  return true;\n}\n", "  let isMonotonic = true;\n  let last = l[0];\n \
    \ for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n      isMonotonic\
    \ = false;\n      break;\n    }\n    last = l[i];\n  }\n  return isMonotonic;\n\
    }\n", "  let isMonotonic = true;\n  for (let i = 1; i < l.length; i++) {\n   \
    \ if (l[i] < l[i - 1]) {\n      isMonotonic = false;\n      break;\n    }\n  }\n\
    \  return isMonotonic;\n}\n", "  let i = 0\n  let j = 0\n  let k = 0\n  let l1\
    \ = 0\n  let l2 = 0\n  let l3 = 0\n  let l4 = 0\n  let l5 = 0\n  let l6 = 0\n\
    \  let l7 = 0\n  let l8 = 0\n  let l9 = 0\n  let l10 = 0\n  let l11 = 0\n  let\
    \ l12 = 0\n  let l13 = 0\n  let l14 = 0\n  let l15 = 0\n  let l16 = 0\n  let l17\
    \ = 0\n  let l18 = 0\n  let l19 = 0\n  let l20 = 0\n  let l21 = 0\n  let l22 =\
    \ 0\n  let l23 = 0\n  let l24 = 0\n  let l25 = 0\n  let l26 = 0\n  let l27 = 0\n\
    \  let l28 = 0\n  let l29 = 0\n  let l30 = 0\n  let l31 = 0\n  let l32 = 0\n \
    \ let l33 = 0\n  let l34 = 0\n  let l35 = 0\n  let l36 = 0\n  let l37 = 0\n  let\
    \ l38 = 0\n  let l39 = 0\n  let l40 = 0\n  let l41 = 0\n  let l42 = 0\n  let l43\
    \ = 0\n  let l44 = 0\n  let l45 = 0\n  let l46 = 0\n  let l47 = 0\n  let l48 =\
    \ 0\n  let l49 = 0\n  let l50 = 0\n  let l51 = 0\n  let l52 = 0\n  let l53 = 0\n\
    \  let l54 = 0\n  let l55 = 0\n  let l56 = 0\n  let l57 = 0\n  let l58 = 0\n \
    \ let l59 = 0\n  let l60 = 0\n  let l61 = 0\n  let l62 = 0\n  let l63 = 0\n  let\
    \ l64 = 0\n  let l65 = 0\n  let l66 = 0\n  let l67 = 0\n  let l68 = 0\n  let l69\
    \ = 0\n  let l70 = 0\n  let l71", "    let isMonotonic = true;\n    for (let i\
    \ = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1]) {\n            isMonotonic\
    \ = false;\n            break;\n        }\n    }\n    return isMonotonic;\n}\n",
  "    let isMonotonic = true;\n    let last = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] < last) {\n            isMonotonic = false;\n     \
    \       break;\n        }\n        last = l[i];\n    }\n    return isMonotonic;\n\
    }\n", "    let last = l[0];\n    for (let i = 1; i < l.length; i++) {\n      \
    \  if (l[i] < last) {\n            return false;\n        }\n        last = l[i];\n\
    \    }\n    return true;\n}\n", "  if (l.length < 2) {\n    return true;\n  }\n\
    \  let last = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last)\
    \ {\n      return false;\n    }\n    last = l[i];\n  }\n  return true;\n}\n",
  "  if (l.length < 2) {\n    return true;\n  }\n  let last = l[0];\n  for (let i\
    \ = 1; i < l.length; i++) {\n    if (l[i] < last) {\n      return false;\n   \
    \ }\n    last = l[i];\n  }\n  return true;\n}\n", "  if (l.length < 2) {\n   \
    \ return true;\n  }\n  let last = l[0];\n  for (let i = 1; i < l.length; i++)\
    \ {\n    if (l[i] < last) {\n      return false;\n    }\n    last = l[i];\n  }\n\
    \  return true;\n}\n", "  if (l.length < 2) {\n    return true;\n  }\n  let last\
    \ = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n  \
    \    return false;\n    }\n    last = l[i];\n  }\n  return true;\n}\n", "  let\
    \ last = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n\
    \      return false;\n    }\n    last = l[i];\n  }\n  return true;\n}\n", "  let\
    \ isMonotonic = true;\n  let last = l[0];\n  for (let i = 1; i < l.length; i++)\
    \ {\n    if (l[i] < last) {\n      isMonotonic = false;\n      break;\n    }\n\
    \    last = l[i];\n  }\n  return isMonotonic;\n}\n", "  if (l.length < 2) return\
    \ true;\n  let last = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i]\
    \ < last) return false;\n    last = l[i];\n  }\n  return true;\n}\n", "    let\
    \ isMonotonic = true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i]\
    \ < l[i - 1]) {\n            isMonotonic = false;\n            break;\n      \
    \  }\n    }\n    return isMonotonic;\n}\n", "  if (l.length < 2) {\n    return\
    \ true;\n  }\n  let last = l[0];\n  for (let i = 1; i < l.length; i++) {\n   \
    \ if (l[i] < last) {\n      return false;\n    }\n    last = l[i];\n  }\n  return\
    \ true;\n}\n", "  let isMonotonic = true;\n  let last = l[0];\n  for (let i =\
    \ 1; i < l.length; i++) {\n    if (l[i] < last) {\n      isMonotonic = false;\n\
    \      break;\n    }\n    last = l[i];\n  }\n  return isMonotonic;\n}\n", "  let\
    \ isMonotonic = true;\n  let last = l[0];\n  for (let i = 1; i < l.length; i++)\
    \ {\n    if (l[i] < last) {\n      isMonotonic = false;\n      break;\n    }\n\
    \    last = l[i];\n  }\n  return isMonotonic;\n}\n", "  let isMonotonic = true;\n\
    \  let last = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last)\
    \ {\n      isMonotonic = false;\n      break;\n    }\n    last = l[i];\n  }\n\
    \  return isMonotonic;\n}\n", "  if (l.length < 2) {\n    return true;\n  }\n\
    \  const last = l[0];\n  for (let i = 1; i < l.length; i++) {\n    const current\
    \ = l[i];\n    if (current < last) {\n      return false;\n    }\n    last = current;\n\
    \  }\n  return true;\n}\n", "  if (l.length < 2) {\n    return true;\n  }\n  let\
    \ last = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n\
    \      return false;\n    }\n    last = l[i];\n  }\n  return true;\n}\n", "  \
    \  let isMonotonic = true;\n    let last = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] < last) {\n            isMonotonic = false;\n     \
    \       break;\n        }\n        last = l[i];\n    }\n    return isMonotonic;\n\
    }\n", "    let isMonotonic = true;\n    for (let i = 1; i < l.length; i++) {\n\
    \        if (l[i] < l[i - 1]) {\n            isMonotonic = false;\n          \
    \  break;\n        }\n    }\n    return isMonotonic;\n}\n", "  let last = l[0];\n\
    \  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n      return\
    \ false;\n    }\n    last = l[i];\n  }\n  return true;\n}\n", "  if (l.length\
    \ < 2) {\n    return true;\n  }\n  let last = l[0];\n  for (let i = 1; i < l.length;\
    \ i++) {\n    if (l[i] < last) {\n      return false;\n    }\n    last = l[i];\n\
    \  }\n  return true;\n}\n", "    let isMonotonic = true;\n    for (let i = 1;\
    \ i < l.length; i++) {\n        if (l[i] < l[i - 1]) {\n            isMonotonic\
    \ = false;\n            break;\n        }\n    }\n    return isMonotonic;\n}\n",
  "  let isMonotonic = true;\n  for (let i = 0; i < l.length - 1; i++) {\n    if (l[i]\
    \ > l[i + 1]) {\n      isMonotonic = false;\n      break;\n    }\n  }\n  return\
    \ isMonotonic;\n}\n", "  if (l.length < 2) return true;\n  let last = l[0];\n\
    \  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) return false;\n\
    \    last = l[i];\n  }\n  return true;\n}\n", "  let i = 1;\n  let last = l[0];\n\
    \  while (i < l.length) {\n    if (l[i] < last) {\n      return false;\n    }\n\
    \    last = l[i];\n    i++;\n  }\n  return true;\n}\n", "  if (l.length < 2) {\n\
    \    return true;\n  }\n  let last = l[0];\n  for (let i = 1; i < l.length; i++)\
    \ {\n    if (l[i] < last) {\n      return false;\n    }\n    last = l[i];\n  }\n\
    \  return true;\n}\n", "  if (l.length < 2) {\n    return true;\n  }\n  let last\
    \ = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n  \
    \    return false;\n    }\n    last = l[i];\n  }\n  return true;\n}\n", "  if\
    \ (l.length < 2) {\n    return true;\n  }\n  let last = l[0];\n  for (let i =\
    \ 1; i < l.length; i++) {\n    if (l[i] < last) {\n      return false;\n    }\n\
    \    last = l[i];\n  }\n  return true;\n}\n", "  if (l.length < 2) {\n    return\
    \ true;\n  }\n  let last = l[0];\n  for (let i = 1; i < l.length; i++) {\n   \
    \ if (l[i] < last) {\n      return false;\n    }\n    last = l[i];\n  }\n  return\
    \ true;\n}\n", "  if (l.length < 2) {\n    return true;\n  }\n  let last = l[0];\n\
    \  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n      return\
    \ false;\n    }\n    last = l[i];\n  }\n  return true;\n}\n", "  let isMonotonic\
    \ = true;\n  let last = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if\
    \ (l[i] < last) {\n      isMonotonic = false;\n      break;\n    }\n    last =\
    \ l[i];\n  }\n  return isMonotonic;\n}\n", "  if (l.length < 2) {\n    return\
    \ true;\n  }\n  let last = l[0];\n  for (let i = 1; i < l.length; i++) {\n   \
    \ if (l[i] < last) {\n      return false;\n    }\n    last = l[i];\n  }\n  return\
    \ true;\n}\n", "  let isMonotonic = true;\n  let last = l[0];\n  for (let i =\
    \ 1; i < l.length; i++) {\n    if (l[i] < last) {\n      isMonotonic = false;\n\
    \      break;\n    }\n    last = l[i];\n  }\n  return isMonotonic;\n}\n", "  \
    \  let isMonotonic = true;\n    let last = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] < last) {\n            isMonotonic = false;\n     \
    \       break;\n        }\n        last = l[i];\n    }\n    return isMonotonic;\n\
    }\n", "  let isMonotonic = true;\n  for (let i = 1; i < l.length; i++) {\n   \
    \ if (l[i] < l[i - 1]) {\n      isMonotonic = false;\n      break;\n    }\n  }\n\
    \  return isMonotonic;\n}\n", "  if (l.length < 2) {\n    return true;\n  }\n\
    \  let last = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last)\
    \ {\n      return false;\n    }\n    last = l[i];\n  }\n  return true;\n}\n",
  "  if (l.length < 2) {\n    return true;\n  }\n  let last = l[0];\n  for (let i\
    \ = 1; i < l.length; i++) {\n    if (l[i] < last) {\n      return false;\n   \
    \ }\n    last = l[i];\n  }\n  return true;\n}\n", "  if (l.length < 2) return\
    \ true;\n  let last = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i]\
    \ < last) return false;\n    last = l[i];\n  }\n  return true;\n}\n", "  if (l.length\
    \ < 2) {\n    return true;\n  }\n  let last = l[0];\n  for (let i = 1; i < l.length;\
    \ i++) {\n    if (l[i] < last) {\n      return false;\n    }\n    last = l[i];\n\
    \  }\n  return true;\n}\n", "  if (l.length < 2) {\n    return true;\n  }\n\n\
    \  let last = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last)\
    \ {\n      return false;\n    }\n    last = l[i];\n  }\n  return true;\n}\n",
  "  let i = 0\n  let last = l[0]\n  let isIncreasing = true\n  while (i < l.length\
    \ - 1) {\n    if (l[i + 1] < last) {\n      isIncreasing = false\n      break\n\
    \    }\n    last = l[i + 1]\n    i++\n  }\n  return isIncreasing\n}\n", "  let\
    \ isMonotonic = true;\n  let last = l[0];\n  for (let i = 1; i < l.length; i++)\
    \ {\n    if (l[i] < last) {\n      isMonotonic = false;\n      break;\n    }\n\
    \    last = l[i];\n  }\n  return isMonotonic;\n}\n", "  let isMonotonic = true;\n\
    \  let last = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last)\
    \ {\n      isMonotonic = false;\n      break;\n    }\n    last = l[i];\n  }\n\
    \  return isMonotonic;\n}\n", "    let isMonotonic = true;\n    for (let i = 1;\
    \ i < l.length; i++) {\n        if (l[i] < l[i - 1]) {\n            isMonotonic\
    \ = false;\n            break;\n        }\n    }\n    return isMonotonic;\n}\n",
  "  let i = 1;\n  let last = l[0];\n  while (i < l.length) {\n    if (l[i] < last)\
    \ {\n      return false;\n    }\n    last = l[i];\n    i++;\n  }\n  return true;\n\
    }\n", "    let isMonotonic = true;\n    let last = l[0];\n    for (let i = 1;\
    \ i < l.length; i++) {\n        if (l[i] < last) {\n            isMonotonic =\
    \ false;\n            break;\n        }\n        last = l[i];\n    }\n    return\
    \ isMonotonic;\n}\n", "  let isMonotonic = true;\n  let last = l[0];\n  for (let\
    \ i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n      isMonotonic = false;\n\
    \      break;\n    }\n    last = l[i];\n  }\n  return isMonotonic;\n}\n", "  let\
    \ i = 1;\n  let last = l[0];\n  while (i < l.length) {\n    if (l[i] < last) {\n\
    \      return false;\n    }\n    last = l[i];\n    i++;\n  }\n  return true;\n\
    }\n", "  let isMonotonic = true;\n  let last = l[0];\n  for (let i = 1; i < l.length;\
    \ i++) {\n    if (l[i] < last) {\n      isMonotonic = false;\n      break;\n \
    \   }\n    last = l[i];\n  }\n  return isMonotonic;\n}\n", "  let last = l[0];\n\
    \  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n      return\
    \ false;\n    }\n    last = l[i];\n  }\n  return true;\n}\n", "    let isMonotonic\
    \ = true;\n    let last = l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] < last) {\n            isMonotonic = false;\n            break;\n\
    \        }\n        last = l[i];\n    }\n    return isMonotonic;\n}\n", "    let\
    \ isMonotonic = true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i]\
    \ < l[i - 1]) {\n            isMonotonic = false;\n            break;\n      \
    \  }\n    }\n    return isMonotonic;\n}\n", "  let isMonotonic = true;\n  let\
    \ last = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n\
    \      isMonotonic = false;\n      break;\n    }\n    last = l[i];\n  }\n  return\
    \ isMonotonic;\n}\n", "  if (l.length < 2) {\n    return true;\n  }\n\n  let last\
    \ = l[0];\n  let monotonic = true;\n  for (let i = 1; i < l.length; i++) {\n \
    \   if (l[i] < last) {\n      monotonic = false;\n      break;\n    }\n    last\
    \ = l[i];\n  }\n  return monotonic;\n}\n", "  if (l.length < 2) {\n    return\
    \ true;\n  }\n  let last = l[0];\n  for (let i = 1; i < l.length; i++) {\n   \
    \ if (l[i] < last) {\n      return false;\n    }\n    last = l[i];\n  }\n  return\
    \ true;\n}\n", "    let i = 1;\n    let last = l[0];\n    let isMonotonic = true;\n\
    \    while (i < l.length) {\n        if (l[i] < last) {\n            isMonotonic\
    \ = false;\n            break;\n        }\n        last = l[i];\n        i++;\n\
    \    }\n    return isMonotonic;\n}\n", "  let isMonotonic = true;\n  for (let\
    \ i = 1; i < l.length; i++) {\n    if (l[i] < l[i - 1]) {\n      isMonotonic =\
    \ false;\n      break;\n    }\n  }\n  return isMonotonic;\n}\n", "  if (l.length\
    \ < 2) {\n    return true;\n  }\n  let last = l[0];\n  for (let i = 1; i < l.length;\
    \ i++) {\n    if (l[i] < last) {\n      return false;\n    }\n    last = l[i];\n\
    \  }\n  return true;\n}\n", "  if (l.length < 2) {\n    return true;\n  }\n  let\
    \ last = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n\
    \      return false;\n    }\n    last = l[i];\n  }\n  return true;\n}\n", "  if\
    \ (l.length < 2) {\n    return true;\n  }\n  let last = l[0];\n  for (let i =\
    \ 1; i < l.length; i++) {\n    if (l[i] < last) {\n      return false;\n    }\n\
    \    last = l[i];\n  }\n  return true;\n}\n", "  if (l.length < 2) {\n    return\
    \ true;\n  }\n  let last = l[0];\n  for (let i = 1; i < l.length; i++) {\n   \
    \ if (l[i] < last) {\n      return false;\n    }\n    last = l[i];\n  }\n  return\
    \ true;\n}\n", "  if (l.length < 2) {\n    return true;\n  }\n\n  let last = l[0];\n\
    \  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n      return\
    \ false;\n    }\n    last = l[i];\n  }\n  return true;\n}\n", "  if (l.length\
    \ < 2) {\n    return true;\n  }\n  let last = l[0];\n  for (let i = 1; i < l.length;\
    \ i++) {\n    if (l[i] < last) {\n      return false;\n    }\n    last = l[i];\n\
    \  }\n  return true;\n}\n", "  let isMonotonic = true;\n  let last = l[0];\n \
    \ for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n      isMonotonic\
    \ = false;\n      break;\n    }\n    last = l[i];\n  }\n  return isMonotonic;\n\
    }\n", "  if (l.length < 2) {\n    return true;\n  }\n  let last = l[0];\n  for\
    \ (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n      return false;\n\
    \    }\n    last = l[i];\n  }\n  return true;\n}\n", "  if (l.length < 2) return\
    \ true;\n  let last = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i]\
    \ < last) return false;\n    last = l[i];\n  }\n  return true;\n}\n", "  let last\
    \ = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n  \
    \    return false;\n    }\n    last = l[i];\n  }\n  return true;\n}\n", "  if\
    \ (l.length < 2) {\n    return true;\n  }\n  let last = l[0];\n  for (let i =\
    \ 1; i < l.length; i++) {\n    if (l[i] < last) {\n      return false;\n    }\n\
    \    last = l[i];\n  }\n  return true;\n}\n", "    let isMonotonic = true;\n \
    \   for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1]) {\n   \
    \         isMonotonic = false;\n            break;\n        }\n    }\n    return\
    \ isMonotonic;\n}\n", "  let last = l[0];\n  for (let i = 1; i < l.length; i++)\
    \ {\n    if (l[i] < last) {\n      return false;\n    }\n    last = l[i];\n  }\n\
    \  return true;\n}\n", "  if (l.length < 2) {\n    return true;\n  }\n  let last\
    \ = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n  \
    \    return false;\n    }\n    last = l[i];\n  }\n  return true;\n}\n", "  if\
    \ (l.length < 2) {\n    return true;\n  }\n  let last = l[0];\n  for (let i =\
    \ 1; i < l.length; i++) {\n    if (l[i] < last) {\n      return false;\n    }\n\
    \    last = l[i];\n  }\n  return true;\n}\n", "  let isMonotonic = true;\n  for\
    \ (let i = 0; i < l.length - 1; i++) {\n    if (l[i + 1] < l[i]) {\n      isMonotonic\
    \ = false;\n      break;\n    }\n  }\n  return isMonotonic;\n}\n", "  if (l.length\
    \ < 2) {\n    return true;\n  }\n  let last = l[0];\n  for (let i = 1; i < l.length;\
    \ i++) {\n    if (l[i] < last) {\n      return false;\n    }\n    last = l[i];\n\
    \  }\n  return true;\n}\n", "    let isMonotonic = true;\n    for (let i = 1;\
    \ i < l.length; i++) {\n        if (l[i] < l[i - 1]) {\n            isMonotonic\
    \ = false;\n            break;\n        }\n    }\n    return isMonotonic;\n}\n",
  "  if (l.length < 2) {\n    return true;\n  }\n  let last = l[0];\n  for (let i\
    \ = 1; i < l.length; i++) {\n    if (l[i] < last) {\n      return false;\n   \
    \ }\n    last = l[i];\n  }\n  return true;\n}\n", "  let isMonotonic = true;\n\
    \  let last = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last)\
    \ {\n      isMonotonic = false;\n      break;\n    }\n    last = l[i];\n  }\n\
    \  return isMonotonic;\n}\n", "  if (l.length < 2) {\n    return true;\n  }\n\
    \  let last = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last)\
    \ {\n      return false;\n    }\n    last = l[i];\n  }\n  return true;\n}\n",
  "    let isMonotonic = true;\n    for (let i = 1; i < l.length; i++) {\n       \
    \ if (l[i] < l[i - 1]) {\n            isMonotonic = false;\n            break;\n\
    \        }\n    }\n    return isMonotonic;\n}\n", "  let isMonotonic = true;\n\
    \  let last = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last)\
    \ {\n      isMonotonic = false;\n      break;\n    }\n    last = l[i];\n  }\n\
    \  return isMonotonic;\n}\n", "  if (l.length < 2) {\n    return true;\n  }\n\
    \  let last = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last)\
    \ {\n      return false;\n    }\n    last = l[i];\n  }\n  return true;\n}\n",
  "  let last = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last)\
    \ {\n      return false;\n    }\n    last = l[i];\n  }\n  return true;\n}\n",
  "    if (l.length < 2) {\n        return true;\n    }\n    let isMonotonic = true;\n\
    \    let last = l[0];\n    for (let i = 1; i < l.length; i++) {\n        if (l[i]\
    \ < last) {\n            isMonotonic = false;\n            break;\n        }\n\
    \        last = l[i];\n    }\n    return isMonotonic;\n}\n", "    if (l.length\
    \ < 2) {\n        return true;\n    }\n    let last = l[0];\n    for (let i =\
    \ 1; i < l.length; i++) {\n        if (l[i] < last) {\n            return false;\n\
    \        }\n        last = l[i];\n    }\n    return true;\n}", "  if (l.length\
    \ < 2) {\n    return true;\n  }\n  let last = l[0];\n  for (let i = 1; i < l.length;\
    \ i++) {\n    if (l[i] < last) {\n      return false;\n    }\n    last = l[i];\n\
    \  }\n  return true;\n}\n", "  let i = 1;\n  let last = l[0];\n  while (i < l.length)\
    \ {\n    if (l[i] < last) {\n      return false;\n    }\n    last = l[i];\n  \
    \  i++;\n  }\n  return true;\n}\n", "    let isMonotonic = true;\n    for (let\
    \ i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1]) {\n            isMonotonic\
    \ = false;\n            break;\n        }\n    }\n    return isMonotonic;\n}\n",
  "  if (l.length < 2) {\n    return true;\n  }\n  let last = l[0];\n  for (let i\
    \ = 1; i < l.length; i++) {\n    if (l[i] < last) {\n      return false;\n   \
    \ }\n    last = l[i];\n  }\n  return true;\n}\n", "    let isMonotonic = true;\n\
    \    let last = l[0];\n    for (let i = 1; i < l.length; i++) {\n        if (l[i]\
    \ < last) {\n            isMonotonic = false;\n            break;\n        }\n\
    \        last = l[i];\n    }\n    return isMonotonic;\n}\n", "  if (l.length <\
    \ 2) {\n    return true;\n  }\n\n  let last = l[0];\n  for (let i = 1; i < l.length;\
    \ i++) {\n    if (l[i] < last) {\n      return false;\n    }\n    last = l[i];\n\
    \  }\n  return true;\n}\n", "  if (l.length < 2) {\n    return true;\n  }\n  let\
    \ last = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n\
    \      return false;\n    }\n    last = l[i];\n  }\n  return true;\n}\n", "  let\
    \ isMonotonic = true;\n  let last = l[0];\n  for (let i = 1; i < l.length; i++)\
    \ {\n    if (l[i] < last) {\n      isMonotonic = false;\n      break;\n    }\n\
    \    last = l[i];\n  }\n  return isMonotonic;\n}\n", "  let isMonotonic = true;\n\
    \  let last = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last)\
    \ {\n      isMonotonic = false;\n      break;\n    }\n    last = l[i];\n  }\n\
    \  return isMonotonic;\n}\n", "  let isMonotonic = true;\n  let last = l[0];\n\
    \  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n      isMonotonic\
    \ = false;\n      break;\n    }\n    last = l[i];\n  }\n  return isMonotonic;\n\
    }\n", "    let isMonotonic = true;\n    for (let i = 1; i < l.length; i++) {\n\
    \        if (l[i] < l[i - 1]) {\n            isMonotonic = false;\n          \
    \  break;\n        }\n    }\n    return isMonotonic;\n}\n", "  if (l.length <\
    \ 2) {\n    return true;\n  }\n  let last = l[0];\n  for (let i = 1; i < l.length;\
    \ i++) {\n    if (l[i] < last) {\n      return false;\n    }\n    last = l[i];\n\
    \  }\n  return true;\n}\n", "    if (l.length < 2) {\n        return true;\n \
    \   }\n    let last = l[0];\n    for (let i = 1; i < l.length; i++) {\n      \
    \  if (l[i] < last) {\n            return false;\n        }\n        last = l[i];\n\
    \    }\n    return true;\n}\n", "    let isMonotonic = true;\n    let last = l[0];\n\
    \    for (let i = 1; i < l.length; i++) {\n        if (l[i] < last) {\n      \
    \      isMonotonic = false;\n            break;\n        }\n        last = l[i];\n\
    \    }\n    return isMonotonic;\n}\n", "    let i = 1;\n    let last = l[0];\n\
    \    while (i < l.length) {\n        if (l[i] < last) {\n            return false;\n\
    \        }\n        last = l[i];\n        i++;\n    }\n    return true;\n}\n",
  "  if (l.length < 2) {\n    return true;\n  }\n  let last = l[0];\n  for (let i\
    \ = 1; i < l.length; i++) {\n    if (l[i] < last) {\n      return false;\n   \
    \ }\n    last = l[i];\n  }\n  return true;\n}\n", "  if (l.length < 2) {\n   \
    \ return true;\n  }\n  let last = l[0];\n  for (let i = 1; i < l.length; i++)\
    \ {\n    if (l[i] < last) {\n      return false;\n    }\n    last = l[i];\n  }\n\
    \  return true;\n}\n", "    let isMonotonic = true;\n    let last = l[0];\n  \
    \  for (let i = 1; i < l.length; i++) {\n        if (l[i] < last) {\n        \
    \    isMonotonic = false;\n            break;\n        }\n        last = l[i];\n\
    \    }\n    return isMonotonic;\n}\n", "  if (l.length < 2) return true;\n  let\
    \ last = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) return\
    \ false;\n    last = l[i];\n  }\n  return true;\n}\n", "  let isMonotonic = true;\n\
    \  for (let i = 1; i < l.length; i++) {\n    if (l[i] < l[i - 1]) {\n      isMonotonic\
    \ = false;\n      break;\n    }\n  }\n  return isMonotonic;\n}\n", "  let last\
    \ = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n  \
    \    return false;\n    }\n    last = l[i];\n  }\n  return true;\n}\n", "    let\
    \ last = l[0];\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < last)\
    \ {\n            return false;\n        }\n        last = l[i];\n    }\n    return\
    \ true;\n}\n", "  if (l.length < 2) {\n    return true;\n  }\n  let last = l[0];\n\
    \  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n      return\
    \ false;\n    }\n    last = l[i];\n  }\n  return true;\n}\n", "  if (l.length\
    \ < 2) {\n    return true;\n  }\n  let last = l[0];\n  for (let i = 1; i < l.length;\
    \ i++) {\n    if (l[i] < last) {\n      return false;\n    }\n    last = l[i];\n\
    \  }\n  return true;\n}\n", "    let isMonotonic = true;\n    for (let i = 1;\
    \ i < l.length; i++) {\n        if (l[i] < l[i - 1]) {\n            isMonotonic\
    \ = false;\n            break;\n        }\n    }\n    return isMonotonic;\n}\n",
  "  if (l.length < 2) {\n    return true;\n  }\n  let last = l[0];\n  for (let i\
    \ = 1; i < l.length; i++) {\n    if (l[i] < last) {\n      return false;\n   \
    \ }\n    last = l[i];\n  }\n  return true;\n}\n", "    let isMonotonic = true;\n\
    \    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] > l[i + 1]) {\n\
    \            isMonotonic = false;\n            break;\n        }\n    }\n    return\
    \ isMonotonic;\n}\n", "  let isMonotonic = true;\n  for (let i = 1; i < l.length;\
    \ i++) {\n    if (l[i] < l[i - 1]) {\n      isMonotonic = false;\n      break;\n\
    \    }\n  }\n  return isMonotonic;\n}\n", "  if (l.length < 2) {\n    return true;\n\
    \  }\n  let last = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i]\
    \ < last) {\n      return false;\n    }\n    last = l[i];\n  }\n  return true;\n\
    }\n", "  let i = 1;\n  let last = l[0];\n  let result = true;\n  while (i < l.length)\
    \ {\n    if (l[i] < last) {\n      result = false;\n      break;\n    }\n    last\
    \ = l[i];\n    i++;\n  }\n  return result;\n}\n", "  let isMonotonic = true;\n\
    \  for (let i = 1; i < l.length; i++) {\n    if (l[i] < l[i - 1]) {\n      isMonotonic\
    \ = false;\n      break;\n    }\n  }\n  return isMonotonic;\n}\n", "  if (l.length\
    \ < 2) {\n    return true;\n  }\n\n  let last = l[0];\n  for (let i = 1; i < l.length;\
    \ i++) {\n    if (l[i] < last) {\n      return false;\n    }\n    last = l[i];\n\
    \  }\n  return true;\n}\n", "    let isMonotonic = true;\n    for (let i = 1;\
    \ i < l.length; i++) {\n        if (l[i] < l[i - 1]) {\n            isMonotonic\
    \ = false;\n            break;\n        }\n    }\n    return isMonotonic;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
