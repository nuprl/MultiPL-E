name: HumanEval_76_is_simple_power
language: ts
prompt: "//Your task is to write a function that returns true if a number x is a simple\n\
  // power of n and false in other cases.\n// x is a simple power of n if n**int=x\n\
  // For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2,\
  \ 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3,\
  \ 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5,\
  \ 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
  \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
  \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
  \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
  \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
  \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
completions: ["    return x === n ** Math.floor(Math.log(x) / Math.log(n));\n}\n",
  "    if (x === 1) {\n        return true;\n    }\n    if (x === n) {\n        return\
    \ true;\n    }\n    if (x % n !== 0) {\n        return false;\n    }\n    return\
    \ is_simple_power(x / n, n);\n}\n", "    if (x === 1) {\n        return true;\n\
    \    }\n    if (x === n) {\n        return true;\n    }\n    if (x % n !== 0)\
    \ {\n        return false;\n    }\n    return is_simple_power(x / n, n);\n}\n",
  "    return x === n ** Math.floor(Math.log(x) / Math.log(n));\n}\n", "    return\
    \ x === n ** Math.floor(Math.log(x) / Math.log(n));\n}\n", "    if (x === 1) {\n\
    \        return true;\n    }\n    if (x === n) {\n        return true;\n    }\n\
    \    if (x % n !== 0) {\n        return false;\n    }\n    return is_simple_power(x\
    \ / n, n);\n}\n", "    if (x === 1) {\n        return true;\n    }\n    if (x\
    \ === n) {\n        return true;\n    }\n    if (x % n !== 0) {\n        return\
    \ false;\n    }\n    return is_simple_power(x / n, n);\n}\n", "    return x ===\
    \ n ** Math.floor(Math.log(x) / Math.log(n));\n}\n", "    return x === n ** Math.floor(Math.log(x)\
    \ / Math.log(n));\n}\n", "    return x === n ** Math.floor(Math.log(x) / Math.log(n));\n\
    }\n", "    return x === n ** Math.floor(Math.log(x) / Math.log(n));\n}\n", " \
    \   return x === n ** Math.floor(Math.log(x) / Math.log(n));\n}\n", "    if (x\
    \ === 1) {\n        return true;\n    }\n    if (x === n) {\n        return true;\n\
    \    }\n    if (x % n !== 0) {\n        return false;\n    }\n    return is_simple_power(x\
    \ / n, n);\n}\n", "    if (x === 1) {\n        return true;\n    }\n    if (x\
    \ === n) {\n        return true;\n    }\n    if (x % n !== 0) {\n        return\
    \ false;\n    }\n    return is_simple_power(x / n, n);\n}\n", "    if (x === 1)\
    \ {\n        return true;\n    }\n    if (x === n) {\n        return true;\n \
    \   }\n    if (x % n !== 0) {\n        return false;\n    }\n    return is_simple_power(x\
    \ / n, n);\n}\n", "    if (x === 1) {\n        return true;\n    }\n    if (x\
    \ === n) {\n        return true;\n    }\n    if (x % n !== 0) {\n        return\
    \ false;\n    }\n    return is_simple_power(x / n, n);\n}\n", "    return x ===\
    \ n ** Math.floor(Math.log(x) / Math.log(n));\n}\n", "    if (x === 1) {\n   \
    \     return true;\n    }\n    if (x === n) {\n        return true;\n    }\n \
    \   if (x % n !== 0) {\n        return false;\n    }\n    return is_simple_power(x\
    \ / n, n);\n}\n", "    return x === n ** Math.floor(Math.log(x) / Math.log(n));\n\
    }\n", "    return x === n ** Math.floor(Math.log(x) / Math.log(n));\n}\n", " \
    \   return x === n ** Math.floor(Math.log(x) / Math.log(n));\n}\n", "    return\
    \ x === n ** Math.floor(Math.log(x) / Math.log(n));\n}\n", "    return x === n\
    \ ** Math.floor(Math.log(x) / Math.log(n));\n}\n", "    return x === n ** Math.floor(Math.log(x)\
    \ / Math.log(n));\n}\n", "    if (x === 1) {\n        return true;\n    }\n  \
    \  if (x === n) {\n        return true;\n    }\n    if (x % n !== 0) {\n     \
    \   return false;\n    }\n    return is_simple_power(x / n, n);\n}\n", "    if\
    \ (x === 1) {\n        return true;\n    }\n    if (x === n) {\n        return\
    \ true;\n    }\n    if (x % n !== 0) {\n        return false;\n    }\n    return\
    \ is_simple_power(x / n, n);\n}\n", "    if (x === 1) {\n        return true;\n\
    \    }\n    if (x === n) {\n        return true;\n    }\n    if (x % n !== 0)\
    \ {\n        return false;\n    }\n    return is_simple_power(x / n, n);\n}\n",
  "    if (x === 1) {\n        return true;\n    }\n    if (x === n) {\n        return\
    \ true;\n    }\n    if (x % n !== 0) {\n        return false;\n    }\n    return\
    \ is_simple_power(x / n, n);\n}\n", "    if (x === 1) {\n        return true;\n\
    \    }\n    if (x === n) {\n        return true;\n    }\n    if (x % n !== 0)\
    \ {\n        return false;\n    }\n    return is_simple_power(x / n, n);\n}\n",
  "    if (x === 1) {\n        return true;\n    }\n    if (x === n) {\n        return\
    \ true;\n    }\n    if (x % n !== 0) {\n        return false;\n    }\n    return\
    \ is_simple_power(x / n, n);\n}\n", "    return x === n ** Math.floor(Math.log(x)\
    \ / Math.log(n));\n}\n", "    if (x === 1) {\n        return true;\n    }\n  \
    \  if (x === n) {\n        return true;\n    }\n    if (x % n !== 0) {\n     \
    \   return false;\n    }\n    return is_simple_power(x / n, n);\n}\n", "    return\
    \ x === n ** Math.floor(Math.log(x) / Math.log(n));\n}\n", "    return x === n\
    \ ** Math.floor(Math.log(x) / Math.log(n));\n}\n", "    return x === n ** Math.floor(Math.log(x)\
    \ / Math.log(n));\n}\n", "    if (x === 1) {\n        return true;\n    }\n  \
    \  if (x === n) {\n        return true;\n    }\n    if (x % n !== 0) {\n     \
    \   return false;\n    }\n    return is_simple_power(x / n, n);\n}\n", "    if\
    \ (x === 1) {\n        return true;\n    }\n    if (x === n) {\n        return\
    \ true;\n    }\n    if (x % n !== 0) {\n        return false;\n    }\n    return\
    \ is_simple_power(x / n, n);\n}\n", "    return x === n ** Math.floor(Math.log(x)\
    \ / Math.log(n));\n}\n", "    if (n === 0) {\n        return false;\n    }\n \
    \   if (x === 1) {\n        return true;\n    }\n    if (x % n !== 0) {\n    \
    \    return false;\n    }\n    return is_simple_power(x / n, n);\n}\n", "    return\
    \ x === n ** Math.floor(Math.log(x) / Math.log(n));\n}\n", "    return x === n\
    \ ** Math.floor(Math.log(x) / Math.log(n));\n}\n", "    return x === n ** Math.floor(Math.log(x)\
    \ / Math.log(n));\n}\n", "    return x === n ** Math.floor(Math.log(x) / Math.log(n));\n\
    }\n", "    if (x === 1) {\n        return true;\n    }\n    if (x === n) {\n \
    \       return true;\n    }\n    if (x % n !== 0) {\n        return false;\n \
    \   }\n    return is_simple_power(x / n, n);\n}\n", "    return x === n ** Math.floor(Math.log(x)\
    \ / Math.log(n));\n}\n", "    if (x === 1) {\n        return true;\n    }\n  \
    \  if (x === n) {\n        return true;\n    }\n    if (x % n !== 0) {\n     \
    \   return false;\n    }\n    return is_simple_power(x / n, n);\n}\n", "    return\
    \ x === n ** Math.floor(Math.log(x) / Math.log(n));\n}\n", "    return x === n\
    \ ** Math.floor(Math.log(x) / Math.log(n));\n}\n", "    return x === n ** Math.floor(Math.log(x)\
    \ / Math.log(n));\n}\n", "    return x === n ** Math.floor(Math.log(x) / Math.log(n));\n\
    }\n", "    return x === n ** Math.floor(Math.log(x) / Math.log(n));\n}\n", " \
    \   return x === n ** Math.floor(Math.log(x) / Math.log(n));\n}\n", "    return\
    \ x === n ** Math.floor(Math.log(x) / Math.log(n));\n}\n", "    return x === n\
    \ ** Math.floor(Math.log(x) / Math.log(n));\n}\n", "    if (x === 1) {\n     \
    \   return true;\n    }\n    if (x === n) {\n        return true;\n    }\n   \
    \ if (x % n !== 0) {\n        return false;\n    }\n    return is_simple_power(x\
    \ / n, n);\n}\n", "    return n === Math.floor(Math.log(x) / Math.log(n));\n}\n",
  "    return x === n ** Math.floor(Math.log(x) / Math.log(n));\n}\n", "    return\
    \ x === n ** Math.floor(Math.log(x) / Math.log(n));\n}\n", "    return x === n\
    \ ** Math.floor(Math.log(x) / Math.log(n));\n}\n", "    if (x === 1) {\n     \
    \   return true;\n    }\n    if (x === n) {\n        return true;\n    }\n   \
    \ if (x % n !== 0) {\n        return false;\n    }\n    return is_simple_power(x\
    \ / n, n);\n}\n", "    return x === n ** Math.floor(Math.log(x) / Math.log(n));\n\
    }\n", "    if (x === 1) {\n        return true;\n    }\n    if (x === n) {\n \
    \       return true;\n    }\n    if (x % n !== 0) {\n        return false;\n \
    \   }\n    return is_simple_power(x / n, n);\n}\n", "    return x === n ** Math.floor(Math.log(x)\
    \ / Math.log(n));\n}\n", "    return x === n ** Math.floor(Math.log(x) / Math.log(n));\n\
    }\n", "    if (x === 1) {\n        return true;\n    }\n    if (x === n) {\n \
    \       return true;\n    }\n    if (x % n !== 0) {\n        return false;\n \
    \   }\n    return is_simple_power(x / n, n);\n}\n", "    return x === n ** Math.floor(Math.log(x)\
    \ / Math.log(n));\n}\n", "    return x === n ** Math.floor(Math.log(x) / Math.log(n));\n\
    }\n", "    if (x === 1) return true;\n    if (x === n) return true;\n    if (x\
    \ === n ** 2) return true;\n    if (x === n ** 3) return true;\n    if (x ===\
    \ n ** 4) return true;\n    if (x === n ** 5) return true;\n    if (x === n **\
    \ 6) return true;\n    if (x === n ** 7) return true;\n    if (x === n ** 8) return\
    \ true;\n    if (x === n ** 9) return true;\n    if (x === n ** 10) return true;\n\
    \    if (x === n ** 11) return true;\n    if (x === n ** 12) return true;\n  \
    \  if (x === n ** 13) return true;\n    if (x === n ** 14) return true;\n    if\
    \ (x === n ** 15) return true;\n    if (x === n ** 16) return true;\n    if (x\
    \ === n ** 17) return true;\n    if (x === n ** 18) return true;\n    if (x ===\
    \ n ** 19) return true;\n    if (x === n ** 20) return true;\n    if (x === n\
    \ ** 21) return true;\n    if (x === n ** 22) return true;\n    if (x === n **\
    \ 23) return true;\n    if (x === n ** 24) return true;\n    if (x === n ** 25)\
    \ return true;\n    if (x === n ** 26) return true;\n    if (x === n ** 27) return\
    \ true;\n    if (x === n ** 28) return true;\n    if (x === n ** 29) return true;\n\
    \    if (x === n ** 30) return true;\n    if (x === n ** 31) return true;\n  \
    \  if (x === n ** 32) return true;\n    if (x === n ** 33) return true;\n    if\
    \ (x === n ** 34) return true;\n    if (x === n ** 35) return true;\n    if (x\
    \ === n ** 36) return true;\n    if (x === n ** 37) return true;\n    if (x ===\
    \ n ** 38) return true;\n    if (x === n ** 39)", "    return x === n ** Math.floor(Math.log(x)\
    \ / Math.log(n));\n}\n", "    return x === n ** Math.floor(Math.log(x) / Math.log(n));\n\
    }\n", "    return x === n ** Math.floor(Math.log(x) / Math.log(n));\n}\n", " \
    \   return x === n ** Math.floor(Math.log(x) / Math.log(n));\n}\n", "    if (x\
    \ === 1) {\n        return true;\n    }\n    if (x === n) {\n        return true;\n\
    \    }\n    if (x % n !== 0) {\n        return false;\n    }\n    return is_simple_power(x\
    \ / n, n);\n}\n", "    return x === n ** Math.floor(Math.log(x) / Math.log(n));\n\
    }\n", "    return x === n ** Math.floor(Math.log(x) / Math.log(n));\n}\n", " \
    \   return x === n ** Math.floor(Math.log(x) / Math.log(n));\n}\n", "    return\
    \ x === n ** Math.floor(Math.log(x) / Math.log(n));\n}\n", "    return x === n\
    \ ** Math.floor(Math.log(x) / Math.log(n));\n}\n", "    return x === n ** Math.floor(Math.log(x)\
    \ / Math.log(n));\n}\n", "    return n === Math.floor(Math.log(x) / Math.log(n))\n\
    }\n", "    return x === n ** Math.floor(Math.log(x) / Math.log(n));\n}\n", " \
    \   if (x === 1) {\n        return true;\n    }\n    if (x === n) {\n        return\
    \ true;\n    }\n    if (x % n !== 0) {\n        return false;\n    }\n    return\
    \ is_simple_power(x / n, n);\n}\n", "    return x === n ** Math.floor(Math.log(x)\
    \ / Math.log(n));\n}\n", "    return x === n ** Math.floor(Math.log(x) / Math.log(n));\n\
    }\n", "    return x === n ** Math.floor(Math.log(x) / Math.log(n));\n}\n", " \
    \   if (x === 1) {\n        return true;\n    }\n    if (x === n) {\n        return\
    \ true;\n    }\n    if (x % n !== 0) {\n        return false;\n    }\n    return\
    \ is_simple_power(x / n, n);\n}\n", "    return x === n ** Math.floor(Math.log(x)\
    \ / Math.log(n));\n}\n", "    return x === n ** Math.floor(Math.log(x) / Math.log(n));\n\
    }\n", "    return x === n ** Math.floor(Math.log(x) / Math.log(n));\n}\n", " \
    \   return x === n ** Math.floor(Math.log(x) / Math.log(n));\n}\n", "    return\
    \ x === n ** Math.floor(Math.log(x) / Math.log(n));\n}\n", "    if (x === 1) {\n\
    \        return true;\n    }\n    if (x === n) {\n        return true;\n    }\n\
    \    if (x % n !== 0) {\n        return false;\n    }\n    return is_simple_power(x\
    \ / n, n);\n}\n", "    return x === n ** Math.floor(Math.log(x) / Math.log(n));\n\
    }\n", "    return x === n ** Math.floor(Math.log(x) / Math.log(n));\n}\n", " \
    \   return n === Math.floor(Math.log(x) / Math.log(n))\n}\n", "    return x ===\
    \ n ** Math.floor(Math.log(x) / Math.log(n));\n}\n", "    return x === n ** Math.floor(Math.log(x)\
    \ / Math.log(n));\n}\n", "    if (x === 1) {\n        return true;\n    }\n  \
    \  if (x === n) {\n        return true;\n    }\n    if (x % n !== 0) {\n     \
    \   return false;\n    }\n    return is_simple_power(x / n, n);\n}\n", "    return\
    \ n === Math.floor(Math.log(x) / Math.log(n))\n}\n", "    return x === n ** Math.floor(Math.log(x)\
    \ / Math.log(n));\n}\n", "    return x === n ** Math.floor(Math.log(x) / Math.log(n));\n\
    }\n", "    if (x === 1) {\n        return true;\n    }\n    if (x === n) {\n \
    \       return true;\n    }\n    if (x % n !== 0) {\n        return false;\n \
    \   }\n    return is_simple_power(x / n, n);\n}\n", "    return x === n ** Math.floor(Math.log(x)\
    \ / Math.log(n));\n}\n", "    if (x === 1) {\n        return true;\n    }\n  \
    \  if (x === n) {\n        return true;\n    }\n    if (x % n !== 0) {\n     \
    \   return false;\n    }\n    return is_simple_power(x / n, n);\n}\n", "    return\
    \ x === n ** Math.floor(Math.log(x) / Math.log(n));\n}\n", "    return x === n\
    \ ** Math.floor(Math.log(x) / Math.log(n));\n}\n", "    return x === n ** Math.floor(Math.log(x)\
    \ / Math.log(n));\n}\n", "    if (x === 1) {\n        return true;\n    }\n  \
    \  if (x === n) {\n        return true;\n    }\n    if (x % n !== 0) {\n     \
    \   return false;\n    }\n    return is_simple_power(x / n, n);\n}\n", "    return\
    \ x === n ** Math.floor(Math.log(x) / Math.log(n));\n}\n", "    if (x === 1) {\n\
    \        return true;\n    }\n    if (x === n) {\n        return true;\n    }\n\
    \    if (x % n !== 0) {\n        return false;\n    }\n    return is_simple_power(x\
    \ / n, n);\n}\n", "    return x === n ** Math.floor(Math.log(x) / Math.log(n));\n\
    }\n", "    return x === n ** Math.floor(Math.log(x) / Math.log(n));\n}\n", " \
    \   return x === n ** Math.floor(Math.log(x) / Math.log(n));\n}\n", "    if (x\
    \ === 1) {\n        return true;\n    }\n    if (x === n) {\n        return true;\n\
    \    }\n    if (x % n !== 0) {\n        return false;\n    }\n    return is_simple_power(x\
    \ / n, n);\n}\n", "    if (x === 1) {\n        return true;\n    }\n    if (x\
    \ === n) {\n        return true;\n    }\n    if (x % n !== 0) {\n        return\
    \ false;\n    }\n    return is_simple_power(x / n, n);\n}\n", "    if (x === 1)\
    \ {\n        return true;\n    }\n    if (x === n) {\n        return true;\n \
    \   }\n    if (x === n ** 2) {\n        return true;\n    }\n    if (x === n **\
    \ 3) {\n        return true;\n    }\n    if (x === n ** 4) {\n        return true;\n\
    \    }\n    if (x === n ** 5) {\n        return true;\n    }\n    if (x === n\
    \ ** 6) {\n        return true;\n    }\n    if (x === n ** 7) {\n        return\
    \ true;\n    }\n    if (x === n ** 8) {\n        return true;\n    }\n    if (x\
    \ === n ** 9) {\n        return true;\n    }\n    if (x === n ** 10) {\n     \
    \   return true;\n    }\n    if (x === n ** 11) {\n        return true;\n    }\n\
    \    if (x === n ** 12) {\n        return true;\n    }\n    if (x === n ** 13)\
    \ {\n        return true;\n    }\n    if (x === n ** 14) {\n        return true;\n\
    \    }\n    if (x === n ** 15) {\n        return true;\n    }\n    if (x === n\
    \ ** 16) {\n        return true;\n    }\n    if (x === n ** 17) {\n        return\
    \ true;\n    }\n    if (x === n ** 18) {\n        return true;\n    }\n    if\
    \ (x === n ** 19) {\n        return true;\n    }\n    if (x === n ** 20) {\n \
    \       return true;\n    }\n    if (x === n ** 21) {\n        return true;\n\
    \    }\n    if (x === n ** 22) {\n        return true;\n    }\n    if (x === n\
    \ ** 23) {\n        return true;\n    }\n    if (x === n ** 24) {\n        return\
    \ true;\n    }\n    if (x === n ** 25) {\n        return true;\n    }\n    if\
    \ (x === n ** 26) {\n        return true;\n    }\n    if (", "    return x ===\
    \ n ** Math.floor(Math.log(x) / Math.log(n));\n}\n", "    return x === n ** Math.floor(Math.log(x)\
    \ / Math.log(n));\n}\n", "    return x === n ** Math.floor(Math.log(x) / Math.log(n));\n\
    }\n", "    if (x === 1) {\n        return true;\n    }\n    if (x === n) {\n \
    \       return true;\n    }\n    if (x % n !== 0) {\n        return false;\n \
    \   }\n    return is_simple_power(x / n, n);\n}\n", "    if (x === 1) {\n    \
    \    return true;\n    }\n    if (x === n) {\n        return true;\n    }\n  \
    \  if (x % n !== 0) {\n        return false;\n    }\n    return is_simple_power(x\
    \ / n, n);\n}\n", "    return x === n ** Math.floor(Math.log(x) / Math.log(n));\n\
    }\n", "    if (x === 1) {\n        return true;\n    }\n    if (x === n) {\n \
    \       return true;\n    }\n    if (x % n !== 0) {\n        return false;\n \
    \   }\n    return is_simple_power(x / n, n);\n}\n", "    return x === n ** Math.floor(Math.log(x)\
    \ / Math.log(n));\n}\n", "    if (x === 1) {\n        return true;\n    }\n  \
    \  if (x === n) {\n        return true;\n    }\n    if (x % n !== 0) {\n     \
    \   return false;\n    }\n    return is_simple_power(x / n, n);\n}\n", "    return\
    \ x === n ** Math.floor(Math.log(x) / Math.log(n));\n}\n", "    return x === n\
    \ ** Math.floor(Math.log(x) / Math.log(n));\n}\n", "    return x === n ** Math.floor(Math.log(x)\
    \ / Math.log(n));\n}\n", "    return n === Math.floor(Math.log(x) / Math.log(n))\n\
    }\n", "    if (x === 1) {\n        return true;\n    }\n    if (x === n) {\n \
    \       return true;\n    }\n    if (x % n !== 0) {\n        return false;\n \
    \   }\n    return is_simple_power(x / n, n);\n}\n", "    if (x === 1) {\n    \
    \    return true;\n    }\n    if (x === n) {\n        return true;\n    }\n  \
    \  if (x % n !== 0) {\n        return false;\n    }\n    return is_simple_power(x\
    \ / n, n);\n}\n", "    if (x === 1) {\n        return true;\n    }\n    if (x\
    \ === n) {\n        return true;\n    }\n    if (x % n !== 0) {\n        return\
    \ false;\n    }\n    return is_simple_power(x / n, n);\n}\n", "    if (x === 1)\
    \ {\n        return true;\n    }\n    if (x === n) {\n        return true;\n \
    \   }\n    if (x % n !== 0) {\n        return false;\n    }\n    return is_simple_power(x\
    \ / n, n);\n}\n", "    return x === n ** Math.floor(Math.log(x) / Math.log(n));\n\
    }\n", "    if (x === 1) {\n        return true;\n    }\n    if (x === n) {\n \
    \       return true;\n    }\n    if (x % n !== 0) {\n        return false;\n \
    \   }\n    return is_simple_power(x / n, n);\n}\n", "    return x === n ** Math.floor(Math.log(x)\
    \ / Math.log(n));\n}\n", "    return x === n ** Math.floor(Math.log(x) / Math.log(n));\n\
    }\n", "    if (x === 1) {\n        return true;\n    }\n    if (x === n) {\n \
    \       return true;\n    }\n    if (x % n !== 0) {\n        return false;\n \
    \   }\n    return is_simple_power(x / n, n);\n}\n", "    return x === n ** Math.floor(Math.log(x)\
    \ / Math.log(n));\n}\n", "    return x === n ** Math.floor(Math.log(x) / Math.log(n));\n\
    }\n", "    if (x === 1) {\n        return true;\n    }\n    if (x === n) {\n \
    \       return true;\n    }\n    if (x % n !== 0) {\n        return false;\n \
    \   }\n    return is_simple_power(x / n, n);\n}\n", "    if (x === 1) {\n    \
    \    return true;\n    }\n    if (x === n) {\n        return true;\n    }\n  \
    \  if (x % n !== 0) {\n        return false;\n    }\n    return is_simple_power(x\
    \ / n, n);\n}\n", "    return x === n ** Math.floor(Math.log(x) / Math.log(n));\n\
    }\n", "    return x === n ** Math.floor(Math.log(x) / Math.log(n));\n}\n", " \
    \   return n === Math.floor(Math.log(x) / Math.log(n))\n}\n", "    if (x === 1)\
    \ {\n        return true;\n    }\n    if (x === n) {\n        return true;\n \
    \   }\n    if (x % n !== 0) {\n        return false;\n    }\n    return is_simple_power(x\
    \ / n, n);\n}\n", "    if (x === 1) {\n        return true;\n    }\n    if (x\
    \ === n) {\n        return true;\n    }\n    if (x % n !== 0) {\n        return\
    \ false;\n    }\n    return is_simple_power(x / n, n);\n}\n", "    return x ===\
    \ n ** Math.floor(Math.log(x) / Math.log(n));\n}\n", "    return x === n ** Math.floor(Math.log(x)\
    \ / Math.log(n));\n}\n", "    return x === n ** Math.floor(Math.log(x) / Math.log(n));\n\
    }\n", "    if (x === 1) {\n        return true;\n    }\n    if (x === n) {\n \
    \       return true;\n    }\n    if (x % n !== 0) {\n        return false;\n \
    \   }\n    return is_simple_power(x / n, n);\n}\n", "    return x === n ** Math.floor(Math.log(x)\
    \ / Math.log(n));\n}\n", "    if (x === 1) {\n        return true;\n    }\n  \
    \  if (x === n) {\n        return true;\n    }\n    if (x % n !== 0) {\n     \
    \   return false;\n    }\n    return is_simple_power(x / n, n);\n}\n", "    return\
    \ x === n ** Math.floor(Math.log(x) / Math.log(n));\n}\n", "    return x === n\
    \ ** Math.floor(Math.log(x) / Math.log(n));\n}\n", "    if (x === 1) {\n     \
    \   return true;\n    }\n    if (x === n) {\n        return true;\n    }\n   \
    \ if (x % n !== 0) {\n        return false;\n    }\n    return is_simple_power(x\
    \ / n, n);\n}\n", "    if (x === 1) {\n        return true;\n    }\n    if (x\
    \ === n) {\n        return true;\n    }\n    if (x % n !== 0) {\n        return\
    \ false;\n    }\n    return is_simple_power(x / n, n);\n}\n", "    if (x === 1)\
    \ {\n        return true;\n    }\n    if (x === n) {\n        return true;\n \
    \   }\n    if (x % n !== 0) {\n        return false;\n    }\n    return is_simple_power(x\
    \ / n, n);\n}\n", "    if (x === 1) {\n        return true;\n    }\n    if (x\
    \ === n) {\n        return true;\n    }\n    if (x % n !== 0) {\n        return\
    \ false;\n    }\n    return is_simple_power(x / n, n);\n}\n", "    return x ===\
    \ n ** Math.floor(Math.log(x) / Math.log(n));\n}\n", "    if (x === 1) {\n   \
    \     return true;\n    }\n    if (x === n) {\n        return true;\n    }\n \
    \   if (x % n !== 0) {\n        return false;\n    }\n    return is_simple_power(x\
    \ / n, n);\n}\n", "    return x === n ** Math.floor(Math.log(x) / Math.log(n));\n\
    }\n", "    return x === n ** Math.floor(Math.log(x) / Math.log(n));\n}\n", " \
    \   return x === n ** Math.floor(Math.log(x) / Math.log(n));\n}\n", "    return\
    \ x === n ** Math.floor(Math.log(x) / Math.log(n));\n}\n", "    return x === n\
    \ ** Math.floor(Math.log(x) / Math.log(n));\n}\n", "    if (x === 1) {\n     \
    \   return true;\n    }\n    if (x === n) {\n        return true;\n    }\n   \
    \ if (x % n !== 0) {\n        return false;\n    }\n    return is_simple_power(x\
    \ / n, n);\n}\n", "    if (x === 1) {\n        return true;\n    }\n    if (x\
    \ === n) {\n        return true;\n    }\n    if (x % n !== 0) {\n        return\
    \ false;\n    }\n    return is_simple_power(x / n, n);\n}\n", "    return x ===\
    \ n ** Math.floor(Math.log(x) / Math.log(n));\n}\n", "    return x === n ** Math.floor(Math.log(x)\
    \ / Math.log(n));\n}\n", "    if (x === 1) {\n        return true;\n    }\n  \
    \  if (x === n) {\n        return true;\n    }\n    if (x % n !== 0) {\n     \
    \   return false;\n    }\n    return is_simple_power(x / n, n);\n}\n", "    return\
    \ x === n ** Math.floor(Math.log(x) / Math.log(n));\n}\n", "    return x === n\
    \ ** Math.floor(Math.log(x) / Math.log(n));\n}\n", "    if (x === 1) {\n     \
    \   return true;\n    }\n    if (x === n) {\n        return true;\n    }\n   \
    \ if (x % n !== 0) {\n        return false;\n    }\n    return is_simple_power(x\
    \ / n, n);\n}\n", "    if (x === 1) {\n        return true;\n    }\n    if (x\
    \ === n) {\n        return true;\n    }\n    if (x % n !== 0) {\n        return\
    \ false;\n    }\n    return is_simple_power(x / n, n);\n}\n", "    return x ===\
    \ n ** Math.floor(Math.log(x) / Math.log(n));\n}\n", "    return x === n ** Math.floor(Math.log(x)\
    \ / Math.log(n));\n}\n", "    if (x === 1) {\n        return true;\n    }\n  \
    \  if (x === n) {\n        return true;\n    }\n    if (x % n !== 0) {\n     \
    \   return false;\n    }\n    return is_simple_power(x / n, n);\n}\n", "    if\
    \ (x === 1) {\n        return true;\n    }\n    if (x === n) {\n        return\
    \ true;\n    }\n    if (x % n !== 0) {\n        return false;\n    }\n    return\
    \ is_simple_power(x / n, n);\n}\n", "    if (x === 1) {\n        return true;\n\
    \    }\n    if (x === n) {\n        return true;\n    }\n    if (x % n !== 0)\
    \ {\n        return false;\n    }\n    return is_simple_power(x / n, n);\n}\n",
  "    return x === n ** Math.floor(Math.log(x) / Math.log(n));\n}\n", "    return\
    \ x === n ** Math.floor(Math.log(x) / Math.log(n));\n}\n", "    return x === n\
    \ ** Math.floor(Math.log(x) / Math.log(n));\n}\n", "    if (x === 1) {\n     \
    \   return true;\n    }\n    if (x === n) {\n        return true;\n    }\n   \
    \ if (x % n !== 0) {\n        return false;\n    }\n    return is_simple_power(x\
    \ / n, n);\n}\n", "    if (x === 1) {\n        return true;\n    }\n    if (x\
    \ === n) {\n        return true;\n    }\n    if (x % n !== 0) {\n        return\
    \ false;\n    }\n    return is_simple_power(x / n, n);\n}\n", "    return x ===\
    \ n ** Math.floor(Math.log(x) / Math.log(n));\n}\n", "    return x === n ** Math.floor(Math.log(x)\
    \ / Math.log(n));\n}\n", "    if (x === 1) return true;\n    if (x === n) return\
    \ true;\n    if (x % n !== 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}\n", "    if (x === 1) {\n        return true;\n    }\n    if (x === n)\
    \ {\n        return true;\n    }\n    if (x % n !== 0) {\n        return false;\n\
    \    }\n    return is_simple_power(x / n, n);\n}\n", "    if (x === 1) {\n   \
    \     return true;\n    }\n    if (x === n) {\n        return true;\n    }\n \
    \   if (x % n !== 0) {\n        return false;\n    }\n    return is_simple_power(x\
    \ / n, n);\n}\n", "    return x === n ** Math.floor(Math.log(x) / Math.log(n));\n\
    }\n", "    if (x === 1) {\n        return true;\n    }\n    if (x === n) {\n \
    \       return true;\n    }\n    if (x % n !== 0) {\n        return false;\n \
    \   }\n    return is_simple_power(x / n, n);\n}\n", "    return x === n ** Math.floor(Math.log(x)\
    \ / Math.log(n));\n}\n", "    return x === n ** Math.floor(Math.log(x) / Math.log(n));\n\
    }\n", "    return x === n ** Math.floor(Math.log(x) / Math.log(n));\n}\n", " \
    \   return x === n ** Math.floor(Math.log(x) / Math.log(n));\n}\n", "    return\
    \ x === n ** Math.floor(Math.log(x) / Math.log(n));\n}\n", "    return x === n\
    \ ** Math.floor(Math.log(x) / Math.log(n));\n}\n", "    if (x === 1) {\n     \
    \   return true;\n    }\n    if (x === n) {\n        return true;\n    }\n   \
    \ if (x % n !== 0) {\n        return false;\n    }\n    return is_simple_power(x\
    \ / n, n);\n}\n", "    if (x === 1) {\n        return true;\n    }\n    if (x\
    \ === n) {\n        return true;\n    }\n    if (x % n !== 0) {\n        return\
    \ false;\n    }\n    return is_simple_power(x / n, n);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
