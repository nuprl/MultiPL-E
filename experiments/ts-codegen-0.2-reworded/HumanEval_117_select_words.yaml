name: HumanEval_117_select_words
language: ts
prompt: "//Given a string s and a natural number n, you have been tasked to implement\
  \ \n// a function that returns an array of all words from string s that contain\
  \ exactly \n// n consonants, in order these words appear in the string s.\n// If\
  \ the string s is empty then the function should return an empty array.\n// Note:\
  \ you may assume the input string contains only letters and spaces.\n// Examples:\n\
  // >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"\
  Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple\
  \ white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"\
  ]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s:\
  \ string, n: number): string[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
  \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
  \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple\
  \ white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
  ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
  \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
  d\", \"f\"]);\n}\n\ntest();"
completions: ["    let result = [];\n    let words = s.split(\" \");\n    for (let\
    \ i = 0; i < words.length; i++) {\n        let word = words[i];\n        let count\
    \ = 0;\n        for (let j = 0; j < word.length; j++) {\n            if (word[j]\
    \ === \" \") {\n                count++;\n                if (count === n) {\n\
    \                    result.push(word);\n                    break;\n        \
    \        }\n            }\n        }\n    }\n    return result;\n}\n", "    let\
    \ res = [];\n    let words = s.split(\" \");\n    for (let word of words) {\n\
    \        if (word.length >= n) {\n            let consonants = word.split(\"\"\
    );\n            let count = 0;\n            for (let consonant of consonants)\
    \ {\n                if (consonant === \" \") {\n                    continue;\n\
    \                }\n                count += 1;\n            }\n            if\
    \ (count === n) {\n                res.push(word);\n            }\n        }\n\
    \    }\n    return res;\n}\n", "    let words = [];\n    let word = '';\n    let\
    \ i = 0;\n    while (i < s.length) {\n        if (s[i] === ' ') {\n          \
    \  if (word.length === n) {\n                words.push(word);\n             \
    \   word = '';\n            }\n            i++;\n        } else {\n          \
    \  word += s[i];\n            i++;\n        }\n    }\n    if (word.length ===\
    \ n) {\n        words.push(word);\n    }\n    return words;\n}\n", "    let words\
    \ = [];\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === ' ') {\n\
    \            if (words.length === n) {\n                words.pop();\n       \
    \     }\n            continue;\n        }\n        words.push(s.substr(i, n));\n\
    \        i += n - 1;\n    }\n    return words;\n}\n", "    let arr = [];\n   \
    \ let words = s.split(\" \");\n    for (let word of words) {\n        let count\
    \ = 0;\n        for (let c of word) {\n            if (c === \" \") continue;\n\
    \            count++;\n            if (count === n) {\n                arr.push(word);\n\
    \                break;\n            }\n        }\n    }\n    return arr;\n}\n",
  "    let words = [];\n    let word = '';\n    let i = 0;\n    let j = 0;\n    let\
    \ k = 0;\n    let c = 0;\n    while (i < s.length) {\n        if (s[i] === ' ')\
    \ {\n            if (c === n) {\n                words.push(word);\n         \
    \       word = '';\n                c = 0;\n            }\n            i++;\n\
    \        } else {\n            if (s[i] === ' ') {\n                i++;\n   \
    \         } else {\n                word += s[i];\n                c++;\n    \
    \            i++;\n            }\n        }\n    }\n    if (c === n) {\n     \
    \   words.push(word);\n    }\n    return words;\n}\n", "    let words = [];\n\
    \    let word = '';\n    let count = 0;\n    for (let i = 0; i < s.length; i++)\
    \ {\n        if (s[i] === ' ') {\n            if (count === n) {\n           \
    \     words.push(word);\n                word = '';\n                count = 0;\n\
    \            }\n        } else {\n            word += s[i];\n            count++;\n\
    \        }\n    }\n    if (count === n) {\n        words.push(word);\n    }\n\
    \    return words;\n}\n", "    let result = [];\n    let words = s.split(\" \"\
    );\n    for (let word of words) {\n        let count = 0;\n        for (let letter\
    \ of word) {\n            if (letter === \" \") continue;\n            count++;\n\
    \            if (count === n) {\n                result.push(word);\n        \
    \        break;\n            }\n        }\n    }\n    return result;\n}\n", " \
    \   let arr = [];\n    let words = s.split(\" \");\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let consonants = word.split(\"\
    \");\n        if (consonants.length === n) {\n            arr.push(word);\n  \
    \      }\n    }\n    return arr;\n}\n", "    let words = [];\n    let word = \"\
    \";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === \" \") {\n\
    \            if (word.length === n) {\n                words.push(word);\n   \
    \             word = \"\";\n            }\n        } else {\n            word\
    \ += s[i];\n        }\n    }\n    if (word.length === n) {\n        words.push(word);\n\
    \    }\n    return words;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
