name: HumanEval_145_order_by_points
language: ts
prompt: "//Write a function which sorts the given array of integers\n// in ascending\
  \ order according to the sum of their digits.\n// Note: if there are several items\
  \ with similar sum of their digits,\n// order them based on their index in original\
  \ array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1,\
  \ -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums:\
  \ number[]): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
  \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
  \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423,\
  \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
  \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
  \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9,\
  \ 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
  \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
completions: ["  let sorted = nums.sort((a, b) => {\n    let sum_a = sum_of_digits(a);\n\
    \    let sum_b = sum_of_digits(b);\n    if (sum_a === sum_b) {\n      return a\
    \ - b;\n    }\n    return sum_a - sum_b;\n  });\n  return sorted;\n}\n\nfunction\
    \ sum_of_digits(num: number): number {\n  let sum = 0;\n  while (num > 0) {\n\
    \    sum += num % 10;\n    num = Math.floor(num / 10);\n  }\n  return sum;\n}\n",
  "    let sorted = nums.sort((a, b) => {\n        let sum_a = a.toString().split('').reduce((a,\
    \ b) => a + b, 0);\n        let sum_b = b.toString().split('').reduce((a, b) =>\
    \ a + b, 0);\n        return sum_a - sum_b;\n    });\n    return sorted;\n}\n",
  "  let sorted = nums.sort((a, b) => {\n    let sum_a = sum_of_digits(a);\n    let\
    \ sum_b = sum_of_digits(b);\n    if (sum_a === sum_b) {\n      return a - b;\n\
    \    }\n    return sum_a - sum_b;\n  });\n  return sorted;\n}\n\nfunction sum_of_digits(num:\
    \ number): number {\n  let sum = 0;\n  while (num) {\n    sum += num % 10;\n \
    \   num = Math.floor(num / 10);\n  }\n  return sum;\n}\n", "  let sorted = nums.sort((a,\
    \ b) => {\n    let sumA = 0, sumB = 0;\n    for (let i = 0; i < a.length; i++)\
    \ {\n      sumA += a[i] * Math.pow(10, i);\n      sumB += b[i] * Math.pow(10,\
    \ i);\n    }\n    return sumA - sumB;\n  });\n  return sorted;\n}\n", "    let\
    \ sorted = nums.sort((a, b) => {\n        let sum_a = 0, sum_b = 0;\n        for\
    \ (let i = 0; i < a.length; i++) {\n            sum_a += a[i] * Math.pow(10, i);\n\
    \        }\n        for (let i = 0; i < b.length; i++) {\n            sum_b +=\
    \ b[i] * Math.pow(10, i);\n        }\n        return sum_a - sum_b;\n    });\n\
    \    return sorted;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
