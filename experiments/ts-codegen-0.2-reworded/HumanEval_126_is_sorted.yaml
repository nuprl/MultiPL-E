name: HumanEval_126_is_sorted
language: ts
prompt: "//Given an array of numbers, return whether or not they are sorted\n// in\
  \ ascending order. If array has more than 1 duplicate of the same\n// number, return\
  \ false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n\
  // true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2,\
  \ 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1,\
  \ 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n\
  // >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3,\
  \ 4])\n// false\nfunction is_sorted(lst: number[]): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
  \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
  \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
  \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
  \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
  \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
  \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
  \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 4]),true);\n}\n\ntest();"
completions: ["  let i = 0\n  let j = lst.length - 1\n  let val = lst[i]\n  while\
    \ (i < j) {\n    if (lst[i] > lst[j]) {\n      return false\n    }\n    if (lst[i]\
    \ < lst[j]) {\n      val = lst[i]\n      i++\n    } else {\n      j--\n    }\n\
    \  }\n  return true\n}\n", "    let i = 0;\n    let j = lst.length - 1;\n    let\
    \ n = lst[0];\n    let m = lst[j];\n    while (i < j) {\n        if (n > m) {\n\
    \            return false;\n        }\n        if (n < m) {\n            return\
    \ true;\n        }\n        n = lst[++i];\n        m = lst[--j];\n    }\n    return\
    \ true;\n}\n", "  let i = 0;\n  let j = lst.length - 1;\n  let val = lst[i];\n\
    \  while (i < j) {\n    if (val > lst[j]) {\n      return false;\n    }\n    if\
    \ (val < lst[i]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return\
    \ true;\n}\n", "  let i = 0;\n  let j = lst.length - 1;\n  let prev = lst[i];\n\
    \  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    } else\
    \ if (lst[i] < lst[j]) {\n      prev = lst[i];\n      i++;\n    } else {\n   \
    \   j--;\n    }\n  }\n  return true;\n}\n", "  let i = 0;\n  let j = lst.length\
    \ - 1;\n  let is_sorted = true;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n\
    \      is_sorted = false;\n      break;\n    } else if (lst[i] < lst[j]) {\n \
    \     is_sorted = false;\n      break;\n    }\n    i++;\n    j--;\n  }\n  return\
    \ is_sorted;\n}\n", "  let len = lst.length\n  if (len === 1) return true\n  let\
    \ i = 0\n  let j = len - 1\n  let curr = lst[i]\n  while (i < j) {\n    if (lst[i]\
    \ > lst[j]) return false\n    if (lst[i] < lst[j]) return true\n    i++\n    j--\n\
    \  }\n  return true\n}\n\nmodule.exports = is_sorted\n", "  let i = 0;\n  let\
    \ j = lst.length - 1;\n  let prev = lst[i];\n  while (i < j) {\n    if (lst[i]\
    \ > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      prev\
    \ = lst[i];\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n\
    }\n", "  let i = 0;\n  let j = lst.length - 1;\n  let n = lst[0];\n  let m = lst[lst.length\
    \ - 1];\n  let result = true;\n  while (i < j) {\n    if (n > m) {\n      result\
    \ = false;\n      break;\n    }\n    if (n < m) {\n      result = true;\n    \
    \  break;\n    }\n    i++;\n    j--;\n    n = lst[i];\n    m = lst[j];\n  }\n\
    \  return result;\n}\n", "  let i = 0;\n  let j = lst.length - 1;\n  while (i\
    \ < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i]\
    \ < lst[j]) {\n      return true;\n    }\n    i++;\n    j--;\n  }\n  return true;\n\
    }\n", "  let i = 0;\n  let j = lst.length - 1;\n  let is_sorted = true;\n  while\
    \ (i < j) {\n    if (lst[i] > lst[j]) {\n      is_sorted = false;\n      break;\n\
    \    }\n    if (lst[i] < lst[j]) {\n      is_sorted = true;\n      break;\n  \
    \  }\n    i++;\n    j--;\n  }\n  return is_sorted;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
