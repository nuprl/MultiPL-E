name: HumanEval_70_strange_sort_list
language: ts
prompt: "//Given array of integers, return array in strange order.\n// Strange sorting,\
  \ is when you start with the minimum value,\n// then maximum of the remaining integers,\
  \ then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n\
  // [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>>\
  \ strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[]\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
  \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
  \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
  \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
  \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
  }\n\ntest();"
completions: ["    let min = lst[0];\n    let max = lst[0];\n    let result = [];\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < min) {\n   \
    \         min = lst[i];\n        } else if (lst[i] > max) {\n            max =\
    \ lst[i];\n        }\n    }\n    for (let i = 0; i < lst.length; i++) {\n    \
    \    if (lst[i] == min) {\n            result.push(lst[i]);\n        } else if\
    \ (lst[i] == max) {\n            result.push(lst[i]);\n        } else {\n    \
    \        result.push(lst[i]);\n        }\n    }\n    return result;\n}\n", " \
    \ if (lst.length === 0) {\n    return lst;\n  }\n  let min = lst[0];\n  let max\
    \ = lst[0];\n  let result = [];\n  for (let i = 1; i < lst.length; i++) {\n  \
    \  if (lst[i] < min) {\n      min = lst[i];\n    } else if (lst[i] > max) {\n\
    \      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n \
    \   if (lst[i] === min) {\n      result.push(max);\n      max = min;\n      min\
    \ = lst[i];\n    } else if (lst[i] === max) {\n      result.push(min);\n     \
    \ min = max;\n      max = lst[i];\n    } else {\n      result.push(lst[i]);\n\
    \    }\n  }\n  return result;\n}\n", "    let min = lst[0];\n    let max = lst[0];\n\
    \    let result = [];\n    for (let i = 1; i < lst.length; i++) {\n        if\
    \ (lst[i] < min) {\n            min = lst[i];\n        } else if (lst[i] > max)\
    \ {\n            max = lst[i];\n        }\n    }\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] == min) {\n            result.push(max);\n      \
    \      max = min;\n            min = lst[i];\n        } else if (lst[i] == max)\
    \ {\n            result.push(min);\n            min = max;\n            max =\
    \ lst[i];\n        } else {\n            result.push(lst[i]);\n        }\n   \
    \ }\n    return result;\n}\n", "  let min = lst[0];\n  let max = lst[0];\n  let\
    \ result = [];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min)\
    \ {\n      min = lst[i];\n    } else if (lst[i] > max) {\n      max = lst[i];\n\
    \    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] == min)\
    \ {\n      result.push(max);\n      max = lst[i];\n    } else if (lst[i] == max)\
    \ {\n      result.push(min);\n      min = lst[i];\n    } else {\n      result.push(lst[i]);\n\
    \    }\n  }\n  return result;\n}\n", "    if (lst.length === 0) {\n        return\
    \ lst;\n    }\n    let min = lst[0];\n    let max = lst[0];\n    let result =\
    \ [];\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < min) {\n\
    \            min = lst[i];\n        }\n        if (lst[i] > max) {\n         \
    \   max = lst[i];\n        }\n    }\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] === min) {\n            result.push(max);\n        }\n\
    \        if (lst[i] === max) {\n            result.push(min);\n        }\n   \
    \     result.push(lst[i]);\n    }\n    return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
