name: HumanEval_157_right_angle_triangle
language: pl
prompt: "# Given the lengths of the three sides of a triangle. Return 1 if the three\n\
  # sides form a right-angled triangle, '' otherwise.\n# A right-angled triangle is\
  \ a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n#\
  \ >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
  # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
  \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
  \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
  \  if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n \
  \       exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
  \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
  \     if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
  \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
  \    if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    return '' unless $a > 0 && $b > 0 && $c > 0 && $b > $c && $b >\
    \ $a;\n    return 1 if $b == $c && $b == $a;\n    return '' if $a == $c || $a\
    \ == $b;\n    return 0 if $a == 0 || $b == 0 || $c == 0;\n    return 0 if $a <\
    \ $c && $b < $a || $a > $c && $b > $a || $c < $a && $b < $c;\n    return 1 if\
    \ $a < $b;\n    return 0 if $a == $b;\n    return 1 if $c > $b;\n    return 0\
    \ if $c > $a;\n    return 1;\n}", "    if ($a > $b) {\n        if ($a > $c) {\n\
    \            return 1;\n        }\n        else {\n            return \"\";\n\
    \        }\n    }\n    if ($b > $c) {\n        if ($b > $a) {\n            return\
    \ 1;\n        }\n        else {\n            return \"\";\n        }\n    }\n\
    \    if ($a > $c) {\n        if ($b > $a) {\n            return 1;\n        }\n\
    \        else {\n            return \"\";\n        }\n    }\n    return \"\";\n\
    }", "    \n    # Triangle is not an Angle.\n    return if $a eq $b || $b eq $c;\n\
    \    \n    # Triangle is Angle.\n    return if $b eq 90 || $c eq 90;\n    \n \
    \   # Triangle is right angle.\n    return if $a > $b || $a > $c;\n    \n    #\
    \ Triangle is not right angle.\n    return if $b < $a || $c < $a;\n    \n    #\
    \ Triangle is right-angled.\n    return 1;\n}", "    my $c1 = $a + $b + $c;\n\
    \    my $c2 = $a + $c + $b;\n    my $c3 = $b + $c + $a;\n    return 1 if ($a>=$b\
    \ and $a>=$c and $b>=$c and ($a==$c or $a==$b or $a==$c));\n    return '' if ($c1>$c2\
    \ and $c1>$c3 and $c2>$c3 and ($c1==$c2 or $c1==$c3));\n}", "    $c > $b || ($c\
    \ < $b && $a > $b) ? $a : $b\n}", "    if ($a < $b and $a < $c) {\n        if\
    \ ($b < $c) {\n            return 1;\n        }\n        return \"\";\n    }\n\
    \    return 1;\n}", "    return 1 if abs($a - $b) <= abs($c - $a);\n    return\
    \ '' if abs($a - $b) > abs($c - $a);\n    return '' if abs($a - $c) < abs($c -\
    \ $a);\n    return '' if $a < $c || ($a == $c && $b < $a);\n    return '' if $a\
    \ < $b || ($a == $b && $b < $a);\n    return '' if $a < $c || ($a == $c && $b\
    \ > $a);\n    return '' if $a > $c || ($a == $b && $b > $a);\n    return '' if\
    \ $a > $b || ($a == $b && $b > $a);\n    return '' if $a > $c || ($a == $c &&\
    \ $b < $a);\n    return '' if $a < $b || $a == $c || $b > $c;\n}", "    return\
    \ '' unless $a >= $b && $a >= $c && $b >= $c;\n    return 1 if $a==$b+$c && $a==$b-$c\
    \ && $b==$c-$a;\n    return 0 if $a==$b+$c && $b==$c-$a && $c==$a-$b;\n    return\
    \ 0 if $a==$b+$c && $b==$c-$a && $c==$b-$a;\n    return 0;\n}", "    my(@result)\
    \ =;\n    if ($a > $b and $a > $c and $b > $c) {\n        return 1;\n    } elsif\
    \ ($b > $c and $b > $a and $c > $a) {\n        return 1;\n    } elsif ($c > $a\
    \ and $c > $b and $a > $b) {\n        return 1;\n    } else {\n        return\
    \ '';\n    }\n}", "    return 1 if $c > $a || $c > $b || $a > $b;\n    \"\";\n\
    }", "    if((($a - $b) ^ ($a - $c)) < 0) {\n        $a = $c if $a > $c;\n    \
    \    $a = $b if $a > $b;\n        $b = $a if $a > $b;\n        $c = $a if $a >\
    \ $c;\n        return 1;\n    }\n    elsif ((($b - $c) ^ ($b - $a)) < 0) {\n \
    \       $b = $a if $b > $a;\n        $b = $c if $b > $c;\n        $c = $b if $b\
    \ > $c;\n        $a = $b if $b > $a;\n        return \"\";\n    }\n    elsif ((($c\
    \ - $a) ^ ($c - $b)) < 0) {\n        $c = $b if $c > $b;\n        $c = $a if $c\
    \ > $a;\n        $a = $c if $c > $a;\n        $b = $a if $c > $b;\n        return\
    \ \"\";\n    }\n    elsif ((($a - $b) ^ ($a - $c)) < 0) {\n        $a = $b if\
    \ $a > $b;\n        $a = $c if $a > $c;\n        $b = $a if $a > $b;\n       \
    \ $c = $a if $a > $c;\n        return \"\";\n    }\n    else {\n        return\
    \ 1;\n    }\n}\n</code>\n<|/ a dscore=4 tags=algorithm,c |>\n<| c |>\nOh god,\
    \ that was fast. Thanks!\n<|/ c |>\n<| c |>\nIt can be simplified a lot: you only\
    \ need one of those 3 terms in the `if` statement, and you can use `if ($a > $b\
    \ && $a > $c)` instead of `if`.\n<|/ c |>\n<| c |>\nThanks for the comment, I've\
    \ fixed it. Also the explanation was very helpful!\n<|/ c |>\n<| c |>\nI fixed\
    \ the code so that the variable names `$a`, `$b` etc are more descriptive.\n<|/\
    \ c |>\n<| c |>\nIt's been some time since I posted this, but I went ahead and\
    \ implemented a modified version of the algorithm. Here's a link to it: http://codepad.org/YVwX5uhX\n\
    <|/ c |>\n<| a dscore=2 tags=algorithm,c |>\nThis is a bit of a necroposting,\
    \ but I came across this while doing my own homework involving this same problem.\
    \  I thought it would be a fun exercise.\nThe problem is stated as such:", " \
    \   my $deg_to_rad = Math::PI / 180;\n    if ($a + $b > $c) {\n        if ($b\
    \ > $c) {\n            my $x = $a - $b;\n            my $y = $c;\n           \
    \ return $x ? \"1\" : \"$x\" . \"0\";\n        } else {\n            my $y = $a\
    \ - $b;\n            my $x = $c;\n            return $y ? \"1\" : \"$y\" . \"\
    0\";\n        }\n    } elsif ($a > $b) {\n        if ($c > $b) {\n           \
    \ my $x = $a;\n            my $y = $b - $c;\n            return $x ? \"1\" : \"\
    $x\" . \"0\";\n        } else {\n            my $y = $a;\n            my $x =\
    \ $b - $c;\n            return $y ? \"1\" : \"$y\" . \"0\";\n        }\n    }\
    \ else {\n        if ($c > $a) {\n            my $x = $c;\n            my $y =\
    \ $a - $b;\n            return $x ? \"1\" : \"$x\" . \"0\";\n        } else {\n\
    \            my $y = $c;\n            my $x = $a - $b;\n            return $y\
    \ ? \"1\" : \"$y\" . \"0\";\n        }\n    }\n}", "    $a = abs($a);\n    $b\
    \ = abs($b);\n    $c = abs($c);\n    if ($a < $b and $a < $c) {\n        return\
    \ 1;\n    } elsif ($b < $c and $b < $a) {\n        return 1;\n    } elsif ($c\
    \ < $a and $c < $b) {\n        return 1;\n    } else {\n        return '';\n \
    \   }\n}", "    \n    return 1 if $a + $b > $c || $a + $c > $b || $b + $c > $a;\n\
    \    \n    return ''; \n}", "    return 1 if ($a == $b or $a == $c or $b == $c);\n\
    \    return '' if ($a == $b);\n    return '' if ($b == $c);\n    return '' if\
    \ ($a == $c);\n    return '' if ($a == $b and $b == $c);\n    return '' if ($a\
    \ != $b and $a != $c or $b != $c);\n    return '' if ($a == $b and $b == $c and\
    \ a != c);\n    return '' if ($a == $c and a != b);\n    return '' if ($b == $c\
    \ and a != b);\n    return \"L\" if ($a != $b and $b != $c and a != c);\n    return\
    \ '' if ($a == $b and $b != $c and a != c);\n    return '' if ($a == $c and a\
    \ != b);\n    return '' if ($b == $c and a != b);\n    return '' if ($a != $b\
    \ and $a != $c and $b != $c);\n    return '' if ($a != $b and $b != $c and $a\
    \ != $c);\n    return '' if ($a == $c and $b != $c and $a != $b);\n    return\
    \ \"R\" if ($a != $b and $a != $c and $b != $c);\n    return '' if ($a == $b and\
    \ $b != $c and a != c);\n    return '' if ($a == $c and a != b);\n    return ''\
    \ if ($b == $c and a != b);\n    return '' if ($a != $b and $a != $c and $b !=\
    \ $c);\n    return '' if ($a != $b and $b != $c and $a != $c);\n    return ''\
    \ if ($a == $c and $b != $c and $a != $b);\n    return \"M\" if ($a != $b and\
    \ $b != $c and $a != $b);\n    return '' if ($a == $b and $b != $c and $a != $c);\n\
    \    return '' if ($a == $c and a != b);\n    return '' if ($b == $c and a !=\
    \ b);\n    return '' if ($a != $b and $a != $c and $b != $c);\n    return '' if\
    \ ($a != $b and $b != $c and $a != $c);\n    return '' if ($a == $c and $b !=\
    \ $c and $a != $b);\n    return \"-\" if ($a != $b and $b != $c and $a != $b);\n\
    \    return '' if ($a == $b and $b != $c and $a != $c);\n    return '' if ($a\
    \ == $c and a != b);\n    return '' if ($b == $c and a != b);\n    return '' if\
    \ ($a != $b and $a != $c and $b != $c);\n", "    return '' if $b < $c || $b >\
    \ $c;\n    return 1 if $b <= $c && $a >= $b;\n    return '' if $a <= $c && $c\
    \ <= $b;\n    return '' if $a > $b && $c > $b;\n    return 1;\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nThat is great thanks, now I just need to work out how to get\
    \ it so that if they enter a number that is above 3 it just stops them from entering\
    \ the number, any idea how to do that?\n<|/ c |>\n<| c |>\n- just add `elsif($a>3){last;}`\
    \ before the return 1... Or you can add a `die(\"Please enter a number less than\
    \ 3\");` to the end of the code as well...\n<|/ c |>\n<| c |>\n- also, if you\
    \ don't want the user to have to enter the number more than once, you may want\
    \ to add the `last` statement to the end of the `if` statement as well...\n<|/\
    \ c |>\n<| c |>\nThanks very much for your help it's working perfectly now I just\
    \ need to work out how to get it so that if they enter a number that is above\
    \ 3 it just stops them from entering the number, any idea how to do that?\n<|/\
    \ c |>\n<| c |>\n- Just add another condition to your `if` statement... I updated\
    \ the answer to show how that could work...\n<|/ c |>\n<| a tags=perl |>\nI like\
    \ using subroutines for things like this. Here's an example of how I might structure\
    \ a method like that.\n<code>", "    # a < b\n    # a > b\n    # a > c\n    return\
    \ '' if $a > $b || $a > $c;\n    return '' if $b > $c;\n    return 1 if $c ==\
    \ $b - $a || $b - $a == $c - $a;\n    return 1;\n}", "    return '' unless $a\
    \ > $b > $c;\n    return $a == $b == $c ? 1 : 0;\n}\n</cell>\n<cell>", "    return\
    \ 1 if ($a > $b && $b > $c) || ($a > $c && $c > $b) || ($a > $b && $c > $a) ||\
    \ ($a > $c && $b > $c);\n    return '';\n}", "    my ($ac, $bc, $ca) = ($a, $b,\
    \ $c);\n    if($bc > $ac) {\n        return 1;\n    }\n    if($ca > $bc) {\n \
    \       return 1;\n    }\n    if($ac > $bc) {\n        return 1;\n    }\n    return\
    \ 0;\n}", "    return '' unless $a > $b and $a > $c; #right\n    return '' unless\
    \ $b > $c and $b > $a; #right\n    return '' unless $c > $a and $c > $b; #right\n\
    \    my $a = $a < $b ? $a : $b;\n    my $c = $a < $c ? $a : $c;\n    my $b = $b\
    \ < $c ? $b : $c;\n    return '' unless $a + $b == $c; #right\n    return '' unless\
    \ $a > $b + $c; #right\n    return '' if $a == $b || $a == $c; #right\n    return\
    \ '' if $b == $c || $b == $a; #right\n    return '' if $c == $a || $c == $b; #right\n\
    \    return '' if $a + $b == $c || $a + $c == $b || $a + $b == $a;\n}", "    return\
    \ 0 unless $a && $b && $c;\n    my $sum = $a + $c + $b;\n    my $product1 = $a\
    \ * $c;\n    my $product2 = $c * $b;\n    my $product3 = $b * $a;\n    my $product4\
    \ = $sum - $product1 - $product2 - $product3;\n    return 0 if (($product1 eq\
    \ $product2) || ($product2 eq $product3) ||\n                ($product3 eq $product4));\n\
    \    return 1;\n}", "    my $rad = sqrt($a*$a + $b*$b + $c*$c);\n    $rad < $tol\n\
    \        or $rad == 0\n        or $rad > $two\n        or return 1;\n    my $angle\
    \ = 0;\n    $angle += atan($a/$b);\n    $angle += atan($c/$a);\n    $angle -=\
    \ atan($c/$b);\n    $angle > $two\n        or $angle < $two\n        or $angle\
    \ == pi\n        or $angle == -pi\n        or $angle == pi/2\n        or $angle\
    \ == -pi/2;\n    return '' if $angle > $two;\n    $angle == $two\n        or $angle\
    \ == -$two;\n    return '';\n}", "    my $sum = $a + $b + $c;\n    if ($sum ==\
    \ 3) {\n        return 1;\n    }\n    elsif ($sum == 6) {\n        return '';\n\
    \    }\n    elsif ($sum == 9) {\n        return 0;\n    }\n}", '    my $d;', " \
    \   my $d = ($a > $c) ? $a : $c;\n    my $e = ($b > $c) ? $b : $c;\n    my $f\
    \ = ($d > $e) ? $d : $e;", "    return '' unless $a > $b and $a > $c;\n    return\
    \ '' unless $b > $c and $b > $a;\n    return 1 if $a + $b > $c + $a;\n    return\
    \ 1 if $c + $a > $b + $c;\n    return '0'; # Triangle is right\n}", "    return\
    \ ($a >= $b && $a >= $c && $a >= $b) || ($a <= $b && $a <= $c && $a <= $b);\n}",
  "    my $angle1 = atan2($b, $c);\n    my $angle2 = atan2($c, $a);\n    my $angle3\
    \ = atan2($a, $b);\n    return 1 if\n        ($angle1 + $angle2 > $angle3) or\n\
    \        ($angle1 + $angle2 < $angle3) or\n        ($angle3 + $angle2 > $angle1)\
    \ or\n        ($angle3 + $angle2 < $angle1);\n    return;\n}", "    if($a > $c\
    \ && $b > $c){\n        return 1;\n    }\n    return '';\n}", "    # A right-angled\
    \ triangle is a triangle in which one angle is right angle\n    # or 90 degree.\
    \ \n    if((($a - $b) * 100) > (($b - $c) * 100)) {\n        return(1);\n    }\n\
    \    return(\"\");\n}", '    my $result = 1;', "    return ($a == $b or $a ==\
    \ $c || $b == $c) ? 1 : 0;\n}", "    return (!is_odd($b) && is_odd($c)) ? '' :\
    \ 'A';\n}", "    \n    # Calculate the hypotenuse\n    my $hypotenuse = $b * $c\
    \ + ($a * $a) - ($a * $b) + ($b * $b);\n    # Check the hypotenuse\n    if ($hypotenuse\
    \ <= 0) {\n        return '';\n    }\n    \n    return ($a < $b) && ($a < $c)\
    \ ? \"1\" : \"\";\n}", "    if($a <= $b && $a <= $c) { \n        return 1\n  \
    \  }\n    elsif($b <= $c) { \n        return ''\n    }\n    elsif($c <= $b) {\n\
    \        return ''\n    }\n    else { \n        return 1;\n    }\n}", "    # Case\
    \ 1: $a + $b + $c is less than or equal to 90\n    if ($a + $b + $c <= 90) {\n\
    \        return 0;\n    }\n    # Case 2: $a + $b + $c is greater than or equal\
    \ to 90 but less than 180\n    elsif ($a + $b + $c >= 180) {\n        return 1;\n\
    \    }\n    # Case 3: $a + $b + $c is greater than 180 but less than 360\n   \
    \ elsif ($a + $b + $c > 360) {\n        return '';\n    }\n}", "    my $ab = abs($a\
    \ - $b);\n    my $bc = abs($b - $c);\n    my $cb = abs($c - $b);\n    my $nab\
    \ = $ab;\n    my $ncb = $cb;\n    if ($a > $c && $b > $c) {\n        $nab = $bc;\n\
    \        $ncb = $ab;\n    }\n    if ($nab == $ncb) {\n        return 0;\n    }\n\
    \    if ($nab > $ncb) {\n        return 1;\n    }\n    return '';\n}", "    my\
    \ $a1 = $a < $b ? $a : $b;\n    my $b1 = $a < $c ? $a : $c;\n    my $c1 = $b <\
    \ $c ? $b : $c;\n    if((abs($a1 - $b1) < abs($a1 - $c1)) && (abs($b1 - $c1) <\
    \ abs($a1 - $b1))) {\n        return 1;\n    }\n    return '';\n}", "    my $c\
    \ = $c < $b ? $c : $b;\n    my $b = $c < $a ? $c : $a;\n    my $a = $c < $b ?\
    \ $c : $b;\n    return '' if ($a > $b);\n    my $sum = 0;\n    my $d = $c - $a;\n\
    \    my $s = $b - $a;\n    my $t = $c - $b;\n    for my $i (0..($a + $b + $c -\
    \ 1)) {\n        $sum += 1 if $i + $s < $d + $s + $t;\n    }\n    return $sum;\n\
    }", "    return '' if ($a <= $b and $a <= $c);\n    return '' if ($b <= $c and\
    \ $b <= $a);\n    return '' if ($c <= $a and $c <= $b);\n    my $ra = ($a + $b\
    \ + $c)/2;\n    return '' if ($a <= $b and $c > $ra or $a <= $c and $b > $ra);\n\
    \    return '' if ($b <= $c and $a > $ra or $b <= $c and $a > $ra);\n    return\
    \ '' if ($c <= $a and $a > $ra or $c <= $a and $b > $ra);\n    return '' if ($a\
    \ <= $b and $a > $ra or $b <= $c and $c > $ra);\n    return '' if ($a <= $c and\
    \ $a > $ra or $b <= $c and $c > $ra);\n    return $ra >= $b && $ra >= $c;\n}",
  "    return '' unless $a > $b and $a > $c;\n    return '' if $a == $b || $b == $c;\n\
    \    return '' if $a == $c || $c == $a;\n    return '' if $a == $b;\n    return\
    \ '' if $b == $c;\n    return '' if $a eq $b;\n    return '' if $b eq $c;\n  \
    \  return '' if $c eq $a;\n    return '1';\n}", "    \n    return '' if $a > $b\
    \ || $a > $c || $b > $c || $a == $b || $a == $c || $b == $c;\n    return 1 if\
    \ $a + $b + $c == 180;\n    return 0 if $a + $b > $c;\n    return 0 if $a + $c\
    \ > $b;\n    return 0 if $b + $c > $a;\n    return 1 if $a + $b + $c == 180;\n\
    \    return 1;\n}", "    if ($a + $b > $c) {\n        return 1;\n    }\n    if\
    \ ($a + $b > $c) {\n        return '';\n    }\n    if ($a + $c > $b) {\n     \
    \   return 1;\n    }\n    if ($a + $c > $b) {\n        return '';\n    }\n}",
  "    if ($a == $b) {\n        return $a == $c ? 1 : 0;\n    }\n    if ($a == $c)\
    \ {\n        return $b == $c ? 1 : 0;\n    }\n    if ($b == $c) {\n        return\
    \ 0;\n    }\n    \n    if ($a eq $c) {\n        if ($b eq $c) {\n            return\
    \ 1;\n        }\n    }\n    \n    if ($b eq $c) {\n        return 1;\n    }\n\
    \    \n    return '';\n}", "    return ( ($a < $b) && ($a > $c) || ($b < $c) );\n\
    }", "    if ($a > $b) {\n        if ($a > $c) {\n            return 1;\n     \
    \   } else {\n            return '';\n        }\n    } elsif ($b > $c) {\n   \
    \     return '';\n    } else {\n        return 1;\n    }\n}", "    my $result\
    \ = \"\";\n    # \u5224\u65AD\u4E09\u4E2A\u89D2\u7684\u957F\u5EA6\n    if ($a\
    \ + $b > $c) {\n        $result = $c - ($a + $b);\n    } else {\n        $result\
    \ = $a - $b;\n    }\n    if ($a > $b) {\n        $result = $result * -1;\n   \
    \ }\n    return $result;\n}", "    my $result;\n    my $angle = ($a + $b + $c)\
    \ / 2;\n    if ($angle < 180) {\n        $result = $angle == 90 ? 1 : 0;\n   \
    \ }\n    return $result;\n}", "    return '' if abs($b-$c) > abs($a-$b);\n   \
    \ return 1 if $a == $b == $c;\n    return 1 if $a == $b;\n    return 1 if $c ==\
    \ $b;\n    return 1 if $a == $c || $b == $c;\n    return 1 if $a == $c || $c ==\
    \ $a;\n    return 1 if $a == $b;\n    return 1 if $c == $a || $b == $a;\n    return\
    \ 1 if $c == $a;\n    return 1 if $a < $b and $a < $c;\n    return 1 if $b < $c\
    \ and a < $b;\n    return 1;\n}\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis answer\
    \ is great, but I needed it to work in 3 dimensions too, and I couldn't come up\
    \ with another solution, so I had to revisit it and add 2 more conditions:\n<|/\
    \ c |>\n<| c |>\nif ($a == $c && $b == $d || $a == $d || $b == $c || $a == $c\
    \ || $b == $d) { print \"1\";}\nif ($a == $b && $b == $c || $a == $b || $b ==\
    \ $c || $a == $c || $b == $d) { print \"1\";}\n<|/ c |>\n<| c |>\nThe above code\
    \ didn't work when the numbers were equal, e.g. right_angle_triangle(3,5,3) returns\
    \ \"\" (empty string).  This code worked:\n<|/ c |>\n<| c |>\nif ($a == $c &&\
    \ $b == $d || $a == $d || $b == $c || $a == $c || $b == $d) { print \"1\";}\n\
    if ($a == $b && $b == $c || $a == $b || $b == $c || $a == $c || $b == $d) { print\
    \ \"1\";}\n<|/ c |>\n<| c |>\nI didn't post the whole program just to keep the\
    \ code readable because I felt it was too much for someone like me to look through.\
    \ Also my program doesn't output anything in that case, as I said in the original\
    \ question. Thanks for the solution though!\n<|/ c |>\n<| a |>\nI know this is\
    \ an old thread, but the accepted answer is incorrect. Here's the proof:\n<code>",
  "    my $ab = $b - $a;\n    my $cb = $c - $b;\n    my $abc = $ab * $cb;\n    if\
    \ ($abc > 0) {\n        return 0;\n    } elsif ($abc < 0) {\n        return 1;\n\
    \    } elsif ($ab == 0) {\n        if ($cb != 0) {\n            return 1;\n  \
    \      } else {\n            return '';\n        }\n    } elsif ($ab == 1) {\n\
    \        if ($cb == 0) {\n            return '';\n        } else {\n         \
    \   return 1;\n        }\n    } elsif ($a < $b) {\n        if ($cb != 0) {\n \
    \           return '';\n        } else {\n            return 1;\n        }\n \
    \   } elsif ($a < $c) {\n        if ($ab != 0) {\n            return '';\n   \
    \     } else {\n            return 1;\n        }\n    } else {\n        if ($ab\
    \ != 0) {\n            return 1;\n        } else {\n            return '';\n \
    \       }\n    }\n}", "    $a     = $a > $b ? $a : $b;\n    $b     = $b > $c ?\
    \ $b : $c;\n    $c     = $c > $a ? $c : $a;", "    $a==$b || $a==$c || $b==$c\
    \ || $a == 0 || $b == 0 || $c == 0\n        ? ''\n        : ($a > $c && $a > $b)\
    \ ? 1 : ''\n}", "    return '' if $a + $b > $c;\n    return '' if $c < 0;\n  \
    \  return '' if $b > $c;\n    return 1 if $a + $b == $c || $a == $c;\n    return\
    \ 0;\n}", "    my $result;\n    if ( ($c eq 0) || ($b eq 0) || ($a eq 0) ) {\n\
    \        $result = $c eq $b;\n    } elsif ($a eq $b) {\n        $result = !($a\
    \ eq $c);\n    } elsif ($a eq $c) {\n        $result = !($b eq $c);\n    } else\
    \ {\n        $result = !($a eq $b) && !($b eq $c);\n    }\n    return $result;\n\
    }", "    return 1 if($a <= 0 || $b <= 0 || $c <= 0);\n    return '' if($a > $b\
    \ && $a > $c);\n    return '' if($b > $c && $b > $a);\n    $d = $c / $a;\n   \
    \ $e = ($a + $b) / 2;\n    $f = $a * $b;\n    $g = ($f * $e) / ($a + $b - $c);\n\
    \    return '' if($g != $d);\n    return 1 if($g <= $d && $g <= $e || $g == $d);\n\
    }", "    return '' if $b < $a || $c < $b;\n    return '' if $a == $b || $a ==\
    \ $c;\n    return '' if $c == $b;\n    return '' if $a < $b;\n    return '' if\
    \ $c < $a;\n    return '' if ($a > $c && $b > $c);\n    return '' if ($a > $c\
    \ && $b < $a) || ($b > $c && $a > $a);\n    return '' if ($c > $a && $a > $c)\
    \ || ($c > $b && $b > $c);\n    return '' if ($c > $a && $b > $a) || ($c > $b\
    \ && $a > $b);\n    return $a > $c;\n}", "    $a <=> $b and $a <=> $c and $b ==\
    \ $c or\n    $a <=> $b and $a <=> $c and $c > $b;\n}\n</code>\n<|/ a tags=perl\
    \ |>\n<| a tags=perl dscore=0 |>\nA simple way to approach this problem might\
    \ be to create a string that represents all possible permutations of the three\
    \ sides (each number in that string being one of the sides) and then test whether\
    \ each permutation is valid.\nThe program below creates strings of length three,\
    \ each representing one of each side's number, and tests whether each string is\
    \ valid by comparing it to each of the other strings. If there are any differences,\
    \ the first missing number is printed and the script terminates.\n<code>\nuse\
    \ strict;\nuse warnings;", "    $a =~ tr/-+//d;\n    $b =~ tr/-+//d;\n    $c =~\
    \ tr/-+//d;\n    if ($a eq $b && $a eq $c) {\n        1;\n    } elsif ($a eq $c\
    \ || $a eq $b) {\n        1;\n    } elsif ($b eq $c || $b eq $a) {\n        1;\n\
    \    } elsif ($c eq $a || $c eq $b) {\n        1;\n    }\n    '';\n}", "    my\
    \ $sign = ($b > $c) ? 1 : -1;\n    $sign = $sign * 1 if ($a > $c);", "    my $l\
    \ = $a;\n    my $m = $b;\n    my $n = $c;\n    my $result = '';\n    my $temp_a;\n\
    \    my $temp_b;\n    my $temp_c;\n    my $temp_l;\n    my $temp_m;\n    my $temp_n;\n\
    \    my $temp_o;\n    my $temp_result = '';\n    my $temp_o_c;", "    if ($a >\
    \ $b && $a > $c) {\n        $a = 0;\n    } elsif ($b > $c && $b > $a) {\n    \
    \    $b = 0;\n    } elsif ($c > $a && $c > $b) {\n        $c = 0;\n    }\n   \
    \ my $d = ($a + $b + $c);\n    if ($d == 0) {\n        die \"Can't determine if\
    \ $a $b $c is a right angle triangle\";\n    } elsif ($d == 1) {\n        my $result\
    \ = $a >= $b && $a >= $c ? \"1\" : \"0\";\n        return $result;\n    } elsif\
    \ ($d < 3) {\n        my $result = $a >= $b && $a >= $c ? \"1\" : \"0\";\n   \
    \     return $result;\n    } else {\n        my $result = $a >= $b && $a >= $c\
    \ ? \"1\" : \"0\";\n        return $result;\n    }\n}", "    my ($xa, $ya, $za)\
    \ = @{$a}[0..2]; # x values of each of the three sides\n    my ($xb, $yb, $zb)\
    \ = @{$b}[0..2]; # y values of each of the three sides\n    my ($xc, $yc, $zc)\
    \ = @{$c}[0..2]; # z values of each of the three sides\n    return '' unless $xa\
    \ + $ya + $za == $xb + $yb + $zb && $xa + $ya + $za == $xc + $yc + $zc;\n    return\
    \ $xa * $yb - $xb * $ya >= 0 && $xa * $zc - $xc * $za >= 0;\n}\n</code>\n<|/ a\
    \ tags=perl |>\n<| c |>\nI'm very sorry but I don't understand why you say \"\
    the three sides form a right-angled triangle\" when you don't have any right angled\
    \ triangles in your list. If you just need the right angled triangles, use your\
    \ `right_angle` subroutine.\n<|/ c |>\n<| c |>\nYes, it does, but my code is more\
    \ about understanding the algorithm than coding it, which is why I explained the\
    \ examples. I only want to know if my example is correct and how to get it from\
    \ there on. The subroutine is a great help!\n<|/ c |>\n<| c |>\nYour `right_angle_triangle`\
    \ function has a bug where the `if` test `return $xa * $yb - $xb * $ya >= 0` will\
    \ always be true if the first two `x` values are equal. It's enough that one of\
    \ them is zero (in which case the function returns `''`).\n<|/ c |>\n<| a |>\n\
    This is really too complicated and hard to explain in a comment, so I wrote a\
    \ longer answer instead. I will try to explain how I understand your question\
    \ and how to solve it. I am sorry if it is still not clear enough. \nI assume\
    \ you are given three points and are asked to find the area that goes through\
    \ these three points.\nWe know that if you draw an angle in any direction, you\
    \ can see a triangle. You can draw an angle in any direction by rotating all the\
    \ three points by the same amount. You are given three points and are asked to\
    \ find the area that goes through these three points.\nGiven the lengths of the\
    \ three sides of the triangle. Return 1 if the three sides form a right-angled\
    \ triangle, '' otherwise. \nA right-angled tri", "    my $d = $c - $b;\n    $d\
    \ = $d <= 0 ? 0 : $d;\n    my $e = sqrt($a*$a + $b*$b);\n    my $f = sqrt($a*$a\
    \ + $c*$c);\n    my $g = $b - $c;\n    my $h = sqrt($b*$b + $c*$c);\n    my $i\
    \ = $f/$g;\n    my $j = $h/$g;\n    if ($i != $j) {\n        return 0;\n    }\
    \ elsif ($i == 0 && $j != 0) {\n        return 1;\n    } elsif ($i == 0 && $j\
    \ == 0) {\n        return $a <= $b and $a <= $c ? 1 : 0;\n    } else {\n     \
    \   return $a <= $b && $a <= $c || $a >= $b && $a >= $c ? 1 : 0;\n    }\n}", " \
    \   \n    if ($a <= $b && $b <= $c) {\n        if ($a > $c) {\n            return\
    \ 1;\n        } else {\n            return '';\n        }\n    } else {\n    \
    \    if ($a <= $c) {\n            return '';\n        }\n        if ($b > $c)\
    \ {\n            return 1;\n        } else {\n            return '';\n       \
    \ }\n    }\n}", "    my ($ha, $hb, $hc) = @{$a}{qw(a b c)};\n    $ha == $hc ?\
    \ $ha == $hb ? $ha : substr $hb, 1, -1 : ''\n}", "    my $result = ($b - $c >\
    \ $a - $b) ? '' : 0;\n    return $result;\n}", "    my($angle) = atan2($b*$c-$a*$b,\
    \ $a * $b + $c * $a);\n    if ($angle < 0){\n        $angle += 2 * PI();\n   \
    \ }\n    my($result) = \"\";\n    my($angle) = ($angle / 180) * PI();\n    my($angle_counter)\
    \ = 0;\n    my($angle_counter_change) = 0;\n    $angle_counter = $angle;\n   \
    \ while (1){\n        my($current_angle) = $angle_counter;\n        my($is_right)\
    \ = 0;\n        my($counter) = 0;\n        my($counter_change) = 0;\n        my($result)\
    \ = \"\";\n        while (1){\n            if ($angle_counter_change < 1){\n \
    \               $angle_counter_change += $counter;\n            }\n          \
    \  if ($counter < 1){\n                $is_right = 1;\n                $counter\
    \ = $angle_counter_change;\n            }\n            else {\n              \
    \  $is_right = 0;\n                $counter -= 1;\n            }\n           \
    \ $result .= \" \" if $is_right;\n            my($current_angle) = $angle_counter;\n\
    \            $angle_counter = $angle_counter + $counter;\n            my($is_right)\
    \ = 0;\n            my($counter) = 0;\n            my($counter_change) = 0;\n\
    \        }\n        if ($result eq \" \" && ($a <= $b + $c && $a <= $b + $c +\
    \ $a)){\n            $result = 1;\n        }\n        else {\n            $result\
    \ = 0;\n        }\n        if ($result > 0){\n            return 1;\n        }\n\
    \    }\n    return 0;\n}", "    if ( $a > $b && $a > $c ) { $a = $b }\n    if\
    \ ( $b > $c && $b > $a ) { $b = $c }\n    if ( $c > $a && $c > $b ) { $c = $a\
    \ }\n    if ( $a == $b == $c ) { return 1; }\n    return 0;\n}", "    my $d =\
    \ $a - $c;\n    my $e = $b - $c;\n    my $f = $a + $d;\n    my $g = $b + $e;\n\
    \    my $h = $a + $b;\n    my $i = $c + $e;\n    my $j = $c + $b;\n    return\
    \ 0 if (($f + $e) == $d && ($g - $h) == $c && ($f + $h) == $a && ($g + $i) ==\
    \ $b);\n    return '';\n}", "    if ($a < $b and $a < $c) {\n        return 1;\n\
    \    }\n    return ''; # return an empty string if we cannot determine this fact\n\
    }", "    my $a = $a < $b ? $a : $b;\n    my $b = $c < $a ? $c : $a;\n    my $c\
    \ = $c < $b ? $c : $b;\n    my $d = $c - ($a + $b);\n    my $e = ($b - $a) * $a\
    \ / $d;\n    my $f = $c * $c / $d;\n    my $g = -$a * $b / $d;\n    my $h = $a\
    \ - ($c + $d) * $b / $d;\n    if ($e + $f - $g - $h == 0) return 1;\n    else\
    \ return '';\n}", "    return '' if ($a < $b and $a < $c) or $a > $b and $a >\
    \ $c;\n    return '' if ($b < $c and $b < $a) or $b > $c and $b > $a;\n    return\
    \ '' if ($c < $a and $c < $b) or $c > $a and $c > $b;\n    return $a < $b and\
    \ $a < $c or $a > $b and $a > $c or\n        $b < $a and $b < $c or $b > $a and\
    \ $b > $c or\n        $c < $a and $c < $b or $c > $a and $c > $b;\n}\n</cell>\n\
    <cell>", "    if ($b > $c) {\n        if ($a > $c) {\n            return 0;\n\
    \        }\n        elsif ($a > $b) {\n            return 1;\n        }\n    \
    \    else {\n            return \"\";\n        }\n    }\n    elsif ($c > $a) {\n\
    \        if ($b > $a) {\n            return 0;\n        }\n        elsif ($b >\
    \ $c) {\n            return 1;\n        }\n        else {\n            return\
    \ \"\";\n        }\n    }\n    else {\n        return 0;\n    }\n}", "    \n \
    \   $a = abs($a); $b = abs($b); $c = abs($c);\n    $a = abs($a-$b); $b = abs($c-$a);\
    \ $c = abs($b-$a);\n    \n    return $a > $b ? 1 : 0;\n}", "    ($a, $b, $c) =\
    \ @{$_[0]}, @{$_[1]}, @{$_[2]};\n    for my $i ( 0 .. 2 ) {\n        return 0\
    \ if $i == $c || $i == $b || $i == $a;\n        return 1 if $i == $b && $c ==\
    \ ($a + $b);\n        return 1 if $i == $a && $c == ($b + $c);\n    }\n    return\
    \ 1;\n}", "    my $a = abs($a);\n    my $b = abs($b);\n    my $c = abs($c);\n\
    \    if ($a + $b + $c > 1) {\n       return '';\n    }\n    if ($a + $b > $c)\
    \ {\n       return 1;\n    }\n    return '';\n}", "    $a * $b <= $c * $a || $a\
    \ * $c <= $b * $a || $a * $b <= $c * $c;\n}", "    $a * $a + $b * $b + $c * $c\
    \ <= 1\n}", "    \n    # no triangle is right angle if one is 90 degree\n    if($a\
    \ == $b and $a == $c) {\n        return 0;\n    }", "    $a > $b ? $a > $c : $b\
    \ > $c ? $b > $a : $c > $a ? $c > $b : '';\n}", "    \n    return (\n        $a\
    \ == $b and $b == $c and $b == (sqrt( (pow($a, 2) + pow($b, 2)) + (pow($a, 2)\
    \ + pow($c, 2)))\n    );\n}", "    \n    # Check if any of a, b, or c are negative.\n\
    \    # Return '' if any are negative.\n    my $a = abs($a);\n    my $b = abs($b);\n\
    \    my $c = abs($c);\n    \n    my $angle = ($a + $b + $c) / 2.0;\n    return\
    \ '' if $a < $b && $b < $c;\n    return '' if $a < $c && $c < $b;\n    return\
    \ '' if $a < $b || $a < $c || $b < $c;\n    return '1';\n}", "    return '' if\
    \ $a > $b || $b > $c;\n    my $d = $a - $c;\n    return '' if $d == 0;\n    return\
    \ '' if $d > 180;\n    return 1 if $d < -180 + 90;\n}", "    return 1 if $a >\
    \ $b and $a > $c;\n    return 1 unless ($a > $b and $c > $b);\n    return 0 if\
    \ ($a > $b and $c > $b);\n    return 1 if ($a < $b and $c < $b);\n    return 1\
    \ if ($a < $b and $c > $b);\n    return 1 if ($a == $b and $c < $a);\n    return\
    \ 1 if ($a == $b and $c > $a);\n    return 0 if ($a == $b and $c == $a);\n   \
    \ return 1;\n}", "    my $d = ($a + $b + $c) / 2;\n    my $sin = Math::sin($d);\n\
    \    my $cos = Math::cos($d);\n    return $sin < $c / $a ? 1 : 0;\n}", "    return\
    \ if $a eq $b && $a eq $c;\n    return if ($b == $c || $a == $c);\n    my $discriminant\
    \ = ($b**2 - ($a*$c)**2);\n    if ($discriminant < 0) {\n        return '';\n\
    \    }\n    if ($discriminant === 0) {\n        $discriminant = 1;\n    } else\
    \ {\n        $discriminant *= -1;\n    }\n    my $angle = atan2($b, $c);\n   \
    \ return '' if ($angle < $discriminant && $angle < pi() / 2);\n    return '' if\
    \ ($angle > pi() / 2 && $angle < 3 * pi() / 2);\n    return 1;\n}", "    return\
    \ '' unless $a > $b and $a > $c;\n    return '' if $b < $a or $c < $a;\n    return\
    \ 1 if $a + $b == $c;\n    return 1 if $a + $c == 90;\n    return 1 if $a + $b\
    \ == $c or $c + $b == 90;\n    return '';\n}", "    return 1 if $a > $c || ($a\
    \ == $c && $b > $a);\n    return '' if $a > $b;\n    return '' if $b > $c;\n \
    \   return '' if $a == $b;\n    return '' if $c > $a;\n    return '' if $c < $b;\n\
    \    return '' if $a < $b;\n    return '' if $a < $c;\n    return '' if $b < $c;\n\
    \    return 0;\n}", "    \n    return 1 if abs($a - $b) > abs($a - $c) && abs($a\
    \ - $b) > abs($a - $c);\n    return '' if abs($a - $b) == abs($a - $c) && abs($a\
    \ - $b) > 90;\n    return '' if abs($a - $c) == abs($a - $b) && abs($a - $c) >\
    \ 90;\n    return '';\n}", "    my $is_right_angle = $a eq $b and $c eq $b and\
    \ $a eq $c or $a eq $c and $c eq $a;\n    return $is_right_angle ? '' : '';\n}",
  "    my $ab = $b - $a;\n    my $ac = $c - $a;\n    my $bc = $b - $c;\n    my $abc\
    \ = $ab + $ac;", "    my $result = $a - $b;\n    $result = $result > $c ? $a :\
    \ $result;\n    $result = $result < $b ? $a : $result;\n    $result == $b ? ''\
    \ : $result;\n}", "    return ( ($a == $b) && ($b == $c) || ($a != $c) ? \"\"\
    \ : \"1\" );\n}", "    my($sx, $sy, $sz) = vec2($a, $b);\n    my($tx, $ty, $tz)\
    \ = vec2($a, $c);\n    my($cx, $cy, $cz) = vec2($c, $b);\n    my($ay, $az, $ac)\
    \ = vec2($a, $c);\n    my($gx, $gy, $gz) = vec2($a, $b);\n    my($hx, $hy, $hz)\
    \ = vec2($c, $b);", "    return '' unless $a > $b && $a > $c;\n    return '' unless\
    \ $b > $c && $b > $a;\n    return '1' if $a > $b and $a > $c;\n    return '1'\
    \ if $b > $c && $b > $a;\n}", "    $a =~ /^([\\-\\+]?\\d+)\\/([\\-\\+]?\\d+)\\\
    /([\\-\\+]?\\d+)$/;\n    $b =~ /^([\\-\\+]?\\d+)\\/([\\-\\+]?\\d+)\\/([\\-\\+]?\\\
    d+)$/;\n    $c =~ /^([\\-\\+]?\\d+)\\/([\\-\\+]?\\d+)\\/([\\-\\+]?\\d+)$/;\n \
    \   return 1 if (($b - $a) <= ($c - $a)); \n    return '' if $a == $b or $a ==\
    \ $c or $b == $c;\n    return 1;\n}", "    return ( ( $b + $c ) mod $a == $a )\
    \ ? \"1\" : \"\";\n}", "    my $is_right_angle = 0;\n    for(my $i=0; $i<$a; $i++)\
    \ {\n        for(my $j=0; $j<$b; $j++) {\n            for(my $k=0; $k<$c; $k++)\
    \ {\n                if($a==$k || $b==$k || $c==$k) {\n                    $is_right_angle\
    \ = $is_right_angle + 1;\n                    last;\n                }\n     \
    \       }\n        }\n    }\n    return $is_right_angle ? 1 : 0;\n}", "    return\
    \ '' unless $a < $b && $a < $c && $b < $c;\n    return '' if $a == $b && $a ==\
    \ $c;\n    return '' if $a eq $b;\n    return '1' if $a > $b && $a > $c;\n   \
    \ return '1' if $b eq $c;\n    return '2';\n}\n</code>\n<|/ a dscore=5 |>\n<|\
    \ c |>\nHi, why do you return '2' if $a == $b? You want to return '' if $b ==\
    \ $c?\n<|/ c |>\n<| c |>\nI realize this is an old answer, but just wanted to\
    \ say that your solution seems more elegant, so +1 for that, but I suggest that\
    \ you use something more simple to help with the beginner. I'm writing this in\
    \ Perl, so I can just use `my $test = $a > $b && $a > $c;`\n<|/ c |>\n<| c |>\n\
    I would also add that you could use `return '1' if $a > $b || $a > $c;` to simplify\
    \ the if statement\n<|/ c |>\n<| c |>\n: Yes, that is even better.  Thank you!\n\
    <|/ c |>\n<| a tags=numbers,logic,algorithm,math,language-agnostic |>\nYes, you\
    \ can do it. In Perl you can do it in 1 line:\n<code>", "    my $r = sqrt(($a\
    \ * $a) + ($b * $b) + ($c * $c));\n    if ($r < 1.0) {\n        return 1;\n  \
    \  }\n    return '';\n}", "    \n    # Calculate the hypotenuse\n    my $hypotenuse\
    \ = ($a*$a + $b*$b + $c*$c);\n    \n    # If the hypotenuse is zero, return an\
    \ empty string\n    die \"Can't calculate hypotenuse if there are non-zero elements\\\
    n\" if $hypotenuse == 0;\n    \n    # If the hypotenuse is smaller than the length\
    \ of the sides, return an empty string\n    die \"Can't calculate hypotenuse if\
    \ there are non-zero elements\\n\" if $hypotenuse < $a * $b;\n    \n    # If the\
    \ hypotenuse is bigger than the length of the sides, return an empty string\n\
    \    die \"Can't calculate hypotenuse if there are non-zero elements\\n\" if $hypotenuse\
    \ > $a * $c;\n    \n    # If the hypotenuse is exactly the length of the sides,\
    \ return an empty string\n    if ($hypotenuse == $a * $c) {\n      return '';\n\
    \    }\n    \n    my $angle = (360/sqrt($a**2 + $b**2 + $c**2))*180/pi;\n    return\
    \ '' if $angle < 0;\n    \n    if ($angle == 90) {\n      return 1;\n    } else\
    \ {\n      return '';\n    }\n}", "    my $a = abs($a);\n    my $b = abs($b);\n\
    \    my $c = abs($c);\n    if ($a <= $b && $a <= $c) {\n        return $a;\n \
    \   }\n    elsif ($b <= $c && $b <= $a) {\n        return $b;\n    }\n    else\
    \ {\n        return $c;\n    }\n}", "    my $a_in = $a < $b;\n    my $b_in = $b\
    \ < $c;\n    my $c_in = $c < $a;\n    my $is_right_angle = 0;\n    my $angle =\
    \ 0;", "    return '' if $a == $b == $c;\n    return $a > $b and $a > $c ? ''\
    \ : $a < $b and $a < $c ? '' : $a < $b or $a > $c ? '' : '';\n}", "    my $angle;\n\
    \    my $angle1;\n    my $angle2;\n    my $angle3;\n    $angle = $a + $b;\n  \
    \  $angle1 = $c + $b;\n    $angle2 = $a + $c;\n    $angle3 = $c + $c;\n    if\
    \ ($angle < $angle1) {\n        if ($angle < $angle2) {\n            if ($angle\
    \ < $angle3) {\n                return 1;\n            }\n        }\n    }\n \
    \   return \"\";\n}", "    return 0 unless (abs($a - $b) > abs($a - $c) && abs($b\
    \ - $c) > abs($a - $b));\n    return 1 if (abs($a - $b) == abs($a - $c) && abs($b\
    \ - $c) == abs($b - $a));\n    return '' if (abs($a - $b) == abs($a - $c) && abs($a\
    \ - $c) == abs($b - $a));\n    return '' if (abs($b - $c) == abs($a - $b) && abs($b\
    \ - $c) == abs($c - $a));\n    return '' if (abs($c - $a) == abs($b - $c) && abs($c\
    \ - $a) == abs($a - $b));\n    return '';\n}", "    my $angle = $b - $c;\n   \
    \ return 1 if ($angle < 0);", "    $a==$c || $a==$b && ($b==$c || $b==$a) ? 1\
    \ : '';\n}", "    return 1 unless $a > $b || $a > $c;\n    return 1 unless $b\
    \ > $c;\n    return 1 unless $a == $b == $c;\n    return 0 if ($a > $b) && ($c\
    \ > $a) && ($a > $c);\n    return 0 if ($b > $c) && ($a > $c) && ($b > $a);\n\
    \    return 0;\n}", "    \n    return '' if $b < $c || $a < $c;\n    \n    return\
    \ '' if $a == $b or $a == $c;\n    return '' if $a == $c;\n    \n    return $a\
    \ < $b and $c < $a or\n           $c < $a and $b < $c;\n}", "    \n    my ($sa,\
    \ $sb, $sc) = &length($a), &length($b), &length($c);\n    \n    # triangle is\
    \ right-angle\n    if($sa < $sb && $sa < $sc) {\n        return 1;\n    } elsif($sb\
    \ < $sc) {\n        return 0;\n    } elsif($sc < $sa) {\n        return '';\n\
    \    }\n    \n    # triangle is 90 degree\n    if($sa > $sb) {\n        return\
    \ 0;\n    } elsif($sa > $sc) {\n        return '';\n    } elsif($sb > $sc) {\n\
    \        return '';\n    }\n}", "    my $is_rt = $a >= $b && $a >= $c;\n    return\
    \ $is_rt? 1 : 0;\n}\n</code>\nA triangle is a right-angled triangle if all the\
    \ angles are 90degrees.\n<code>", "    my $length = sqrt($a*$a + $b*$b + $c*$c);\n\
    \    $a /= $length;\n    $b /= $length;\n    $c /= $length;\n    \n    return\
    \ '' unless $c > $b && $c > $a;\n    return 1 unless $c == $a || $c == $b || $c\
    \ == $c || $b == $a || $b == $c || $b == $d;\n    return 0 unless $a == $b ||\
    \ $a == $c || $a == $d;\n    return 0 unless $a == $c || $a == $d;\n    return\
    \ 0 unless $a == $b || $a == $c || $a == $d;\n    return 0 unless $b == $c ||\
    \ $b == $d;\n    return 0 unless $a == $b;\n    return 0 unless $b == $c;\n  \
    \  return 0 unless $c == $d;\n    return 0;\n}\n    ", "    if ($a < $b) {\n \
    \       if ($a < $c) {\n            $c = $a;\n            $a = $b;\n         \
    \   $b = $c;\n        }\n    } elsif ($b < $c) {\n        $c = $b;\n        $b\
    \ = $a;\n        $a = $c;\n    }", "    return ( (($a <= $b) && ($b <= $c) &&\
    \ ($a <= $c)) ? '' : '1') ;\n}", "    \n    return 1 if ($c > $a and $c > $b and\
    \ $c < $a or $a > $c and $a > $b);\n    \n    return '' if ($c == $a);\n    \n\
    \    return '' if ($b == $c);\n    \n    return '' if ($a == $c);\n    \n    return\
    \ '';\n}", "    return '' if $a + $b > $c;\n    return 1 if $a + $b == $c || $a\
    \ + $c == $b || $b + $c == $a;\n    return '';\n}", "    if ($a < $b and $a <\
    \ $c) {\n\treturn 0;\n    } elsif ($b < $c and a < $c) {\n\treturn 1;\n    } elsif\
    \ ($c < $a and $a < $b) {\n\treturn 1;\n    } elsif ($c < $b and $b < $a) {\n\t\
    return 1;\n    } elsif ($c < $a and $c < $b) {\n\treturn 0;\n    } elsif ($a <\
    \ $c and $b < $c) {\n\treturn 1;\n    }\n    return \"\";\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThe OP wants to return \"1\" or \"0\", not \"true\" or \"false\"\
    , so the result is correct. I don't see how that answers the question.\n<|/ c\
    \ |>\n<| c |>\n`sub right_angle_triangle(@) {\n  my($a,$b,$c) = @_;\n  return\
    \ $a < $b and $a < $c ? \"0\" : \"1\";\n}`\n<|/ c |>\n<| c |>\nThis is what I\
    \ get for trying to answer quickly in between hours of work.\n<|/ c |>\n<| c |>\n\
    Yeah I agree, that's probably the better way of doing it.\n<|/ c |>\n<| a dscore=2\
    \ |>\nA very simple recursive function should do it:\n<code>", "    return ''\
    \ if $a + $b > $c;\n    return '' if $a + $c > $b;\n    return '' if $b + $c >\
    \ $a;\n    return 1;\n}", "    my($ra) = $b - $a;\n    my($ca) = $c - $a;\n  \
    \  my($ac) = $ac - $ca;\n    if ($ac >= 0){\n        return 1;\n    }else{\n \
    \       return '';\n    }\n}", "    my $ra = atan2($b, $a);\n    my $rb = atan2($c,\
    \ $b);\n    my $rc = atan2($a, $c);\n    my $diffra = $ra - $rb;\n    my $diffrb\
    \ = $rb - $rc;\n    my $diffrc = $rc - $ra;\n    return $diffra > $diffrb and\
    \ $diffra > $diffrc ? 1 : 0;\n}", "    my $s = ($a + $b + $c)/2;\n    return $s\
    \ < $a && $s > $b ? 1 : '';\n}", "    my($d) = $b + ($c - $a) * 2;\n    my($e)\
    \ = $b + ($c + $a) * 2;\n    my($f) = $c + ($a + $b) * 2;\n    return $d < $e\
    \ && $e < $f ? 1 : 0;\n}", "    if( $a < $b and $a < $c ) {\n       return 1;\n\
    \    }\n    if( $b < $c and $b < $a ) {\n       return 1;\n    }\n    return '';\n\
    }", "    return 1 if ($b =~ m/^\\d+$/);\n    my($d, $e) = ($a, $b);\n    my($f,\
    \ $g) = ($c, $a);\n    my $rad = Math::PI / 180;\n    my ($s, $c) = line_triangle($a,\
    \ $b, $c);\n    my($x1, $y1, $x2, $y2, $x3, $y3) = ($x3, $y3, $x2, $y2, $x1, $y1);\n\
    \    my($u, $v) = ($x3 - $x2 * $u / $v,\n\t\t   $y3 - $y2 * $u / $v);\n    my\
    \ $s = $u * $v / $u + $v * $u / $v;\n    if ($s > 1) {\n\t# Vertices lie on opposite\
    \ sides of an equilateral triangle\n\treturn '';\n    }\n    # Normalize vectors.\n\
    \    my($ux, $uy) = ($u * $s, $v * $s);\n    my($vx, $vy) = ($v * $s, $u * $s);\n\
    \    $ux = $ux if $ux->[0] > $ux->[1];\n    $vx = $vx if $vx->[0] > $vx->[1];\n\
    \    if ($ux != $vx) {\n\treturn '';\n    }\n    $s = $ux / $uy;\n    $s = 1 if\
    \ $s == 0;\n    $s = $s / 2;\n    # Solve triangle equation.\n    my $a = $vx\
    \ * $uy - $ux * $vy;\n    my $b = $ux * $vy - $vx * $uy;\n    my $c = $ux * $vy\
    \ - $ux * $vx;\n    $a = 1 if $a == 0;\n    $b = 1 if $b == 0;\n    $c = 1 if\
    \ $c == 0;\n    my $x1 = $x3 + $c * $s;\n    my $y1 = $y3 + $a * $s;\n    my $x2\
    \ = $x3 - $c * $s;\n    my $y2 = $y3 - $a * $s;\n    return ($x1, $y1, $x2, $y2);\n\
    }", "    $a += $b if $b > $c;\n    $a -= $b if $b < $c;\n    $c += $a if $a >\
    \ $b;\n    $c -= $a if $a < $b;\n    $b -= $c if $c > $a;\n    $b += $c if $c\
    \ < $a;\n    $a -= $c if $c > $b;\n    $a += $c if $c < $b;\n    return 1 if ($a\
    \ >= $b) && ($a >= $c);\n    return '' if ($a <= $b) && ($a <= $c);\n    return\
    \ '' if ($a >= $c) && ($a <= $b);\n    return '' if ($a <= $c) && ($a >= $b);\n\
    \    return '' if ($a >= $b) && ($a <= $c);\n    return '' if ($a <= $b) && ($a\
    \ >= $c);\n    return '' if ($a >= $c) && ($a <= $b);\n    return '';\n}", " \
    \   return '' unless $a > $b || $a > $c;\n    return '' if $a > $b;\n    return\
    \ '' if $c < $b;\n    return $a == $b || $a == $c;\n}", "    # Check if three\
    \ sides are equal.\n    return '' unless $a == $b && $a == $c;\n    # Check if\
    \ one side is equal.\n    return '' unless $a == $b;\n    # Check if another side\
    \ is equal.\n    return '' unless $a == $c;\n    # Now we have to check the triangle.\
    \ There are 2 possible cases.\n    return '' unless $a != 0 && $b != 0 && $c !=\
    \ 0;\n    # From this point on, we can assume that the three sides are not equal.\n\
    \    # In this case, we check if there are 2 angles less than 180 degrees. \n\
    \    if ($a > $b and $a > $c) or ($b > $a and $b > $c) or ($c > $a and $c > $b)\
    \ {\n        # Two angles less than 180 degrees: it is a right angled triangle.\n\
    \        return 1;\n    }\n    # There are three possible cases:\n    # 1. One\
    \ angle less than 180 degrees.\n    # 2. Two angles less than 180 degrees.\n \
    \   # 3. Three angles less than 180 degrees.\n    # In this case we have to check\
    \ them.\n    if ($a > $c and $a > $b) or ($b > $c and $b > $a) or ($c > $c and\
    \ $c > $b) {\n        # One angle less than 180 degrees.\n        return '';\n\
    \    }\n    if ($a == $b and $a == $c) {\n        # Two angles greater than 180\
    \ degrees.\n        return '';\n    }\n    # Three angles greater than 180 degrees.\n\
    \    return 0;\n}", "    return '' unless $a > $b && $a > $c;\n    return '' unless\
    \ $b > ($a + $c) || $c > ($a + $b);\n    return 1 if $a == $b || $a == $c || $b\
    \ == $c;\n    return 1 if $a == $b;\n    return 1 if $c == $a;\n    return 1 if\
    \ $b == $c;\n    return 1 if $a eq $b || $a eq $c || $c eq $b;\n    return 0;\n\
    }", "    my $ab = $b - $a;\n    my $bc = $c - $b;\n    if ($ab * $bc < 0) {\n\
    \        my $n = $a < $c ? $a : $c;\n        my $s = $a + $b + $c;\n        return\
    \ ($n - $s + $ab * $bc) % 2 == 0;\n    }\n    else {\n        return '';\n   \
    \ }\n}", "    return '' if abs($a - $b) > abs($a - $c) or abs($a - $c) > abs($b\
    \ - $c);\n    return 1 if abs($a - $b) == abs($a - $c) or abs($a - $b) == abs($c\
    \ - $c);\n    return 1 if abs($b - $c) == abs($a - $c) or abs($b - $c) == abs($c\
    \ - $c);\n    return 1;\n}", "    my $r1 = ($a > $b) ? ($a < $c) : ($b < $c);\n\
    \    my $r2 = ($a < $b) ? ($a > $c) : ($b > $c);\n    my $r3 = ($a > $b) ? ($a\
    \ < $c) : ($b < $c);\n    my $r4 = ($a < $b) ? ($a > $c) : ($b > $c);", "    return\
    \ '' if abs($a - $b) + abs($a - $c) + abs($b - $c) >= 1;\n    return 0 if abs($a\
    \ - $b) > abs($a - $c) + abs($b - $c);\n    return 0 if abs($a - $b) > abs($b\
    \ - $c);\n    return 0 if abs($a - $b) > abs($a - $c) + abs($b - $c);\n}", " \
    \   my ($l, $r, $h) = @$a > @$b ? @$a : @$b;\n    my $result = $l > $r ? ($l <=\
    \ $c ? $l : $c) : $r > $c ? $r : $c;\n    return '' if $result < $h;\n    return\
    \ 1 if $result > $h;\n    return '';\n}", "    $a < $b and $a < $c or $a > $b\
    \ and $a > $c or $a != $b and $a != $c;\n}", "    return 1 if $a > $b and $a >\
    \ $c and $b > $c;\n}", "    return 1 if ($a > $b and $a > $c and $b > $c);\n \
    \   return '';\n}", "    $a += $a > $c ? $a - $c : $a - $a + $c - $b;\n    $b\
    \ += $b > $c ? $b - $c : $b - $a + $c - $b;\n    $c += $c > $c ? $c - $c : $c\
    \ - $a + $c - $b;\n    $a == $b == $c ? 1 : '';\n}", "    return $a < $b and $a\
    \ < $c ? 1 : $a > $b and $a > $c ? 1 : 0;\n}", "    if($a > $b and $a > $c) {\n\
    \        return 1;\n    }\n    elsif ($b > $c and $b > $a) {\n        return 1;\n\
    \    }\n    else {\n        return '';\n    }\n}", "    return ( (($a + $b > $c)\
    \ && ($a + $c > $b) && ($b + $c > $a)) ) ? '1' : '' \n}", "    return '' if $a\
    \ == $b || $b == $c || $c == $a;\n    return '' if $b == $c || $c == $a;\n   \
    \ return '' if $a == $c || $a == $b || $b == $c;\n    my $l = ($a + $b + $c) /\
    \ 2;\n    return '' if $l == 0 || $l == 1;\n    my $angle = (180 - $acos(($b *\
    \ $b + $c * $c - $a * $a) / (2 * $b * $c)));\n    return $angle > 90 ? 0 : $angle;\n\
    }", "    my($l1, $l2, $l3) = ($a, $b, $c);\n    $l1 =~ s/^-//;\n    $l2 =~ s/^-//;\n\
    \    $l3 =~ s/^-//;\n    $l1 =~ tr/a-zA-Z0-9//cd;\n    $l2 =~ tr/a-zA-Z0-9//cd;\n\
    \    $l3 =~ tr/a-zA-Z0-9//cd;\n    $l3 =~ tr/9//cd;\n    $l3 =~ tr/90//cd;\n \
    \   return 1 if $l1 eq $l2 && $l1 ne $l3;\n    return ''\n}", "    return 1 if($a\
    \ >= $b && $a >= $c && $b >= $c);\n    return '' if($a >= $b && $a >= $c && $b\
    \ >= $c && $c >= $a);\n    return '' if($a >= $b && $a >= $c && $c >= $b && $c\
    \ >= $a);\n    return '' if($a >= $b && $b >= $c && $a >= $c && $c >= $b);\n \
    \   return '' if($b >= $a && $b >= $c && $a >= $c && $c >= $b);\n    return ''\
    \ if($a >= $b && $b >= $c && $b >= $c && $c >= $a);\n    return '' if($a >= $b\
    \ && $c >= $a && $c >= $b && $b >= $a);\n    return '' if($a >= $b && $c >= $a\
    \ && $a >= $b && $b >= $a);\n    return '' if($a >= $b && $c >= $a && $c >= $b\
    \ && $b >= $a);\n    return '' if($a >= $b && $b >= $c && $a >= $c && $c >= $b);\n\
    \    return '' if($a >= $c && $b >= $a && $b >= $c && $a >= $b);\n    return ''\
    \ if($a >= $c && $c >= $a && $a >= $c && $a >= $b);\n    return '' if($a >= $c\
    \ && $c >= $a && $c >= $b && $b >= $a);\n    return '' if($a >= $c && $c >= $a\
    \ && $c >= $b && $b >= $a);\n    return '' if($a >= $c && $b >= $a && $b >= $c\
    \ && $a >= $b);\n    return '' if($a >= $c && $b >= $a && $b >= $c && $a >= $b);\n\
    \    return '' if($a >= $c && $c >= $a && $c >= $b && $b >= $a);\n    return ''\
    \ if($b >= $a && $b >= $c && $a >= $c && $c >= $b);\n    return '' if($b >= $a\
    \ && $c >= $a && $a >= $c && $c >= $b);\n    return '' if($b >= $a && $c >= $a\
    \ && $c >= $b && $b >= $a);\n    return '' if($b >= $a && $c >= $a ", "    my\
    \ $a2 = $a*$a;\n    my $b2 = $b*$b;\n    my $c2 = $c*$c;\n    my $ac = $a*$c;\n\
    \    my $bc = ($b*$c);\n    my $ab2 = $a*$b*$b;\n    my $bc2 = ($b*$c*$c);\n \
    \   $a2 *= $ac;\n    $b2 *= $bc;\n    $c2 *= $ac;\n    $ac -= $a2;\n    $bc -=\
    \ $b2;\n    $bc2 -= $bc2;\n    return $ac >= 0 && $bc >= 0 && $bc2 >= 0 && $ab2\
    \ <= $a2 + $b2 + $c2;\n}", "    $a > $b and $a > $c and $b > $c or $a > $b and\
    \ $c > $a and $b > $c or $a > $c and $b > $a\n}", "    my $ret = 0;\n    if ($a\
    \ > $b and $a > $c) {\n        $ret = 1;\n    }\n    if ($b > $c and $b > $a)\
    \ {\n        $ret = '';\n    }\n    return $ret;\n}", "    $a >= $b and $a >=\
    \ $c or $c >= $b and $c >= $a or $a == $b == $c or $a != $b != $c;\n}", "    return\
    \ ( ($a == $b and $a == $c) or ($b == $c and ($a < 0 or $a >= 180) or $c < 0 or\
    \ $c >= 180) ) ? '' : 1;\n}", "    if($b == $c && $b > $a) {\n        return 1;\n\
    \    }\n    if($a > $b) {\n        $a = $b;\n        $b = $c;\n    }\n    if($b\
    \ > $c) {\n        $b = $c;\n        $c = $a;\n    }\n    if($b == $c && $b ==\
    \ $a) {\n        return 1;\n    }\n    return '';\n}", "    return '' if $a >\
    \ $b + $c || $c > $b + $a;\n    return '' if $b > $a + $c || $c > $a + $b;\n \
    \   return '' if $a == $b;\n    return '' if $a == $c;\n    return '' if $a ==\
    \ $b;\n    return '' if $b == $c;\n    return '' unless (($a + $b) < $c && $c\
    \ <= ($a + $b));\n    return '' unless (($b + $c) < $a && $a <= ($b + $c));\n\
    \    return '' unless (($c + $a) < $b && $b <= ($c + $a));\n    return 0;\n}",
  "    \n    return 1 if $a <= $b and $a <= $c and $b <= $c;", "    my($len1, $len2,\
    \ $len3) = ($a - $b + $c, $b - $a + $c, $c - $a + $b);\n    \n    $len1 == $len2\
    \ and $len2 == $len3 and $len1 == 0 ? 1 : '';\n}", "    return 1 if $b == $c;\n\
    \    return '' if $a < $b or $a < $c;\n    return '' if $c < $a;\n    return 1\
    \ if $a + $b > $c;\n    return 1 if $c - $b > $a;\n    return '';\n}", "    if\
    \ ($b > $c) {\n        $a < $c && ($b, $c) = ($c, $b);\n    }\n    return $a <\
    \ $b ? \"1\" : $a < $c ? \"1\" : $a > $c ? \"1\" : '';\n}", "    return '' unless\
    \ $a > $b and $a > $c;\n    return '' unless $b > $c and $b > $a;\n    return\
    \ 1 if ($a == $b or $b == $c or $a == $c);\n    return '';\n}", "    if ($a >\
    \ $b and $a > $c) {\n        return 1\n    }\n    if ($b > $c and $b > $a) {\n\
    \        return 1;\n    }\n    if ($c > $a and $c > $b) {\n        return 1;\n\
    \    }\n    return '';\n}", "    \n    return '' if $a + $b > $c || $a + $c >\
    \ $b || $b + $c > $a;\n    return 1;\n}", "    return 1 if ($a > $c && $b > $c\
    \ && $b > $a);\n    return \"\";\n}", "    $a * $a + $b * $b - $c * $c < 0 ? 1\
    \ : 0;\n}", "    my $deg = 180 - ($a + $b + $c);\n    if ($deg == 90 || $deg ==\
    \ 270) {\n        return 1;\n    }\n    return '';\n}", "    \n    return '' if\
    \ $b < $c || $b > $c;\n    \n    return 0 if $a == $c || $b == $c;\n    \n   \
    \ return '' if $a < $b;\n    return '' if $a > $c;\n    return '' if $b < $c;\n\
    \    \n    return 1 if $a > $b and $b > $c;\n    return 1;\n}", "    my $is_right_angle;\n\
    \    if ($a > 0 && $b > 0 && $c > 0) {\n        if ($b == $c || ($a == $c && $b\
    \ > 0)) {\n            $is_right_angle = 1;\n        } else {\n            $is_right_angle\
    \ = 0;\n        }\n    } else {\n        $is_right_angle = 0;\n    }\n    return\
    \ $is_right_angle ? '' : 1;\n}", "    my $is_right_angle = ($a > $c && $b > $c);\n\
    \    return $is_right_angle ? \"1\" : \"\";\n}", "    my $angle;\n    $angle =\
    \ $b/$c;\n    return 1 if ($angle <= 90 && $angle >= 0);\n    return '';\n}",
  "    return '' if $a + $b > $c;\n    return '' if $a + $c > $b;\n    return '' if\
    \ $b + $c > $a;\n    return 1 if ($a + $b + $c >= 4);\n    return '';\n}", " \
    \   my $ret = '';\n    if ($a > $b && $b > $c) {\n        if ($a > $c) {\n   \
    \         $ret = \"1\";\n        } elsif ($b > $c) {\n            $ret = \"1\"\
    ;\n        }\n    }\n    return $ret;\n}", "    return 1 if($a > $b && $b > $c\
    \ && $a > $c);\n    return '' if($a == $b && $b == $c && $a == $c);\n    return\
    \ '' if($a > $b && $a > $c && $b > $c);\n    return '' if($b > $c && $c > $a &&\
    \ $c > $b);\n    return '' if($a == $b && $b == $c && $c == $d);\n    return ''\
    \ if($a == $c && $c == $d && $a == $d);\n    return '' if($a > $b && $a > $c &&\
    \ $a > $d);\n    return '' if($b > $c && $b > $d && $b > $d);\n    return '' if($c\
    \ > $d && $d > $a && $d > $c);\n    return '' if($a == $b && $b == $c && $b ==\
    \ $d);\n    return '' if($a == $c && $c == $d && $c == $d);\n    return '' if($b\
    \ > $c && $c > $d && $c > $d);\n    return '' if($a > $b && $a > $c && $a > $d);\n\
    \    return '' if($a > $b && $b > $c && $b > $d);\n    return '' if($a > $b &&\
    \ $a > $c && $a > $d);\n    return '' if($b > $c && $b > $d && $b > $d);\n   \
    \ return '' if($a > $b && $a > $c && $a > $d);\n    return '' if($a == $b && $b\
    \ == $c && $b == $d);\n    return '' if($a == $c && $c == $d && $c == $d);\n \
    \   return '' if($b > $c && $b > $d && $b > $d);\n    return '' if($a > $b &&\
    \ $a > $c && $a > $d);\n    return '' if($a > $b && $b > $c && $b > $d);\n   \
    \ return '' if($a > $b && $a > $c && $a > $d);\n    return '' if($b > $c && $b\
    \ > $d && $b > $d);\n    return '' if($a > $b && $a > $c && $a > $d);\n    return\
    \ '' if($a == $b && $b == $c && $b == $d);\n    return '' if($a == $c && $c == ",
  "    my $s = $a <= $b ? $c : $b;\n    my $e = $a <= $c ? $a : $c;\n    my $f = $b\
    \ <= $c ? $b : $c;\n    if ($s == $e && $s == $f) {\n        return 1;\n    }\n\
    \    else {\n        return '';\n    }\n}", "    if ($b == $c || $a == $c || $a\
    \ == $b) {\n        return '';\n    } elsif ($a == $c) {\n        return $a .\
    \ \" \";\n    } elsif ($b == $c) {\n        return $b . \" \";\n    } else {\n\
    \        return $a . \" \" . $b . \" \" . $c . \" \";\n    }\n}", "    my($c_right,\
    \ $a_right, $b_right) = ($c > $a and $c > $b and $c > $a);\n    return $c_right\
    \ ? $a_right : $b_right;\n}", "    \n    if ($a < $b) {\n        return $a < $c\
    \ ? ($a < $b) ? 1 : 0 : ($a < $c) ? 1 : 0;\n    }\n    \n    return $a < $c ?\
    \ ($a < $b) ? 0 : ($a < $c) ? 1 : '';\n}", "    my $lena = $a + $c;\n    my $lenb\
    \ = $b + $c;\n    my $lenc = $a + $b;\n    my $dega = (90-$a) * M_PI / 180;\n\
    \    my $degb = (90-$b) * M_PI / 180;\n    my $degc = (90-$c) * M_PI / 180;\n\
    \    my $d = sqrt($lena * $lena + $lenb * $lenb + $lenc * $lenc);\n    return\
    \ $d < ($dega + $degb + $degc) / 2 ? \"1\" : \"0\";\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThanks, I actually had thought of this, but I was hoping for a\
    \ mathematical answer.  But I guess I will have to use this approach.\n<|/ c |>\n\
    <| a dscore=0 tags=algorithm,math |>\nThis is not an answer, but I don't have\
    \ enough reputation to comment on previous answers yet.  I thought I'd share the\
    \ Python code (originally found here) that I used to test whether a triangle was\
    \ right-angled or not.  Note that in the Python code \"if triangle\" evaluates\
    \ to true if a triangle is right-angled.  It can be changed to \"if triangle[0]\
    \ or triangle[1] or triangle[2]\", but this checks a more general case of the\
    \ triangle not being a right-angled triangle.  You can change the code to your\
    \ liking.\n<code>\ndef isrightangled(a, b, c):\n    triangle_area = a*b*c\n  \
    \  ab = math.sqrt(a**2 + b**2)\n    bc = math.sqrt(b**2 + c**2)\n    ac = math.sqrt(a**2\
    \ + c**2)", "    $a =~ s/^\\s+//;\n    $b =~ s/^\\s+//;\n    $c =~ s/^\\s+//;\n\
    \    if ( ($a + $b) * $c != $a + $b )\n    {\n        $b - $a > $c - $b ? $a +\
    \ $b : $c - $a;\n    }\n}\n</code>\n<|/ a tags=perl,regex,subroutine,math |>\n\
    <| c |>\nThis only works if the triangle is equilateral or right angled. If this\
    \ is not the case then it won't work. Also, it's not very efficient.\n<|/ c |>\n\
    <| c |>\n`s/^\\s+//` isn't really needed since `split` trims empty fields by default.\
    \ Also `split` doesn't take any regex, so `$a` and `$b` have to be used instead.\n\
    <|/ c |>\n<| c |>\n: I like your approach and it seems like the most elegant solution\
    \ thus far.  It's very easy to read and to follow.  Thanks for sharing it!\n<|/\
    \ c |>\n<| c |>\nThis does not work for \"Right angled triangle of length 1 has\
    \ perimeter of 2\" and \"Right angled triangle of length 2 has perimeter of 3\"\
    . Also, it fails to report the correct perimeter in cases like \"Right angled\
    \ triangle of length 5 has perimeter of 6.\" It also reports the wrong perimeter\
    \ if all the angles are multiples of 90.\n<|/ c |>\n<| c |>\n: I believe this\
    \ problem was deliberately designed that way. Consider the definition of the right-angled\
    \ triangle: any triangle with one angle not being right angle or 90 degrees will\
    \ have the same perimeter as the triangle.\n<|/ c |>\n<| a dscore=2 |>\n<code>",
  "    if ( $a == $b || $a == $c || $b == $c ) {\n        return 1;\n    }\n    if\
    \ ( $a > $b ) {\n        $b = $a;\n    }\n    if ( $b > $c ) {\n        $c = $b;\n\
    \    }\n    if ( $a < $c ) {\n        $a = $c;\n    }\n    if ( $b < $c ) {\n\
    \        $b = $c;\n    }\n    if ( $a == $b || $b == $c || $a == $c ) {\n    \
    \    return '';\n    }\n    $min = $a;\n    $max = $b;\n    while ( $min < $max\
    \ ) {\n        $mid = $min + ( $max - $min ) / 2;\n        if ( $mid > $a && $mid\
    \ > $b && $mid > $c ) {\n            $min = $mid + 1;\n        } elsif ( $mid\
    \ < $a && $mid < $b && $mid < $c ) {\n            $max = $mid - 1;\n        }\
    \ else {\n            $min = $mid + 1;\n            $max = $mid - 1;\n       \
    \ }\n    }\n    if ( $a > $b ) {\n        $min = $b;\n    }\n    if ( $b > $c\
    \ ) {\n        $max = $c;\n    }\n    $min = $min;\n    $max = $max;\n    if (\
    \ $min > $max ) {\n        $min = $min;\n    }\n    if ( $max > $c ) {\n     \
    \   $max = $max;\n    }\n    $mid = $min + ( $max - $min ) / 2;\n    if ( $a ==\
    \ $mid || $a == $c || $b == $mid || $b == $c ) {\n        return '';\n    }\n\
    \    if ( $a > $mid ) {\n        $max = $mid;\n    }\n    if ( $b > $mid ) {\n\
    \        $min = $mid;\n    }\n    if ( $c > $mid ) {\n        $max = $mid;\n \
    \   }\n    if ( $a > $max ) {\n        $min = $max;\n    }\n    if ( $b > $max\
    \ ) {\n        $max = $max;\n    }\n    if ( $c > $max ) {\n        $min = $max;\n\
    \    }\n    if ( $a < $min ) {\n        $max = $min;\n    }\n    if ( $b < $min\
    \ ) {\n        $min = $min;\n    }\n    if ( $c < $min ) {\n        $max = $min;\n\
    \    }\n    if ( $a < $b ) {\n        return 1;\n    }\n    if ( $a < $c ) {\n\
    \        return '';\n    }\n    if ( $", "    ($a + $b <= $c) || ($a + $c <= $b)\
    \ || ($b + $c <= $a)\n}", "    return (not ($b > $c and $b > $a and $c > $a))\
    \ ? 1 : '';\n}", "    if($a==$b and $a==$c) { # a triangle whose sides are all\
    \ same \n        return 1;\n    } elsif($a == $b and $c > $a) {  # a triangle\
    \ whose side one is longer\n        return 1;\n    } elsif($a == $c and $a > $b)\
    \ {  # a triangle whose side two is longer\n        return 1;\n    } elsif($c\
    \ != $a){  # a triangle whose sides are different\n        return '';\n    }\n\
    }", "    \n    return ( ( ( $b <= $c ) and ( $a <= $c ) ) or ( ( $b <= $c ) and\
    \ ( $c <= $a ) ) or ( ( $c <= $b ) and ( $a <= $c ) ) );\n}", "    return if $a\
    \ == $c or $b == $c;\n    return 0 if $a == $b or $a == $c or $b == $c;\n    return\
    \ 1 if $a == $b and $b == $c;\n    return 0;\n}", "    if ($a eq $b && $a eq $c)\
    \ {\n        return '1';\n    } elsif ($a > $b && $a > $c) {\n        return '1';\n\
    \    } elsif ($b > $c && $b > $a) {\n        return '1';\n    } elsif ($c > $a\
    \ && $c > $b) {\n        return '1';\n    } else {\n        return '';\n    }\n\
    }", "    return '' if ($a > $b || $a > $c || $b > $c);\n    if ($a == $b) {\n\
    \        if ($a == $c) {\n            return '' if ($a > $c || $b > $c);\n   \
    \         return '' if ($a > $c || $b > $c);\n        }\n        return '1' if\
    \ ($a > $c);\n        return '0' if ($b > $c);\n    }\n    return '1' if ($a >\
    \ $b);\n    return '0' if ($b > $a);\n    return '1' if ($c > $b);\n    return\
    \ '0' if ($c > $a);\n}", "    if ($a < $b) {\n        if ($a < $c) {\n       \
    \     $c = $a;\n            $a = $b;\n            $b = $c;\n        }\n    }\n\
    \    if ($b < $c) {\n        $c = $b;\n        $b = $a;\n        $a = $c;\n  \
    \  }\n    $a < $b or $a < $c\n}\n</code>\n<|/ a |>\n<| a |>\nI wrote a solution\
    \ in JavaScript that uses arrays to solve this problem. It will work for all cases\
    \ and is easy to understand:\n<code>\nfunction checkTriangle(length1, length2,\
    \ length3) {\n    var side1 = [length1, length2, length3];\n    var side2 = side1;\n\
    \    side2.sort(function(a, b) {\n        return a - b;\n    });\n    var a1 =\
    \ side1[0]/2;\n    var a2 = side2[0]/2;\n    var b1 = side1[1]/2;\n    var b2\
    \ = side2[1]/2;\n    var c1 = side1[2]/2;\n    var c2 = side2[2]/2;\n    var side1IsRight\
    \ = side1[0] > side1[1] && side1[0] > side1[2];\n    var side2IsRight = side2[0]\
    \ > side2[1] && side2[0] > side2[2];\n    var angle = Math.atan(Math.abs(b2 -\
    \ a2));\n    var angle1 = Math.atan(Math.abs(b1 - a1));\n    var angle2 = Math.atan(Math.abs(b2\
    \ - a2));", "    my $ret = 0;\n    my %tri_angles = map { $_ => $a * $b /3 };\n\
    \    return '' unless $tri_angles{9};\n    return '' unless $tri_angles{3} ==\
    \ $c;\n    return '' unless $tri_angles{5} == $c;\n    return '' unless $tri_angles{7}\
    \ == $b;\n    return $ret++\n}", "    my $d1 = $a - $b;\n    my $d2 = $a - $c;\n\
    \    my $d3 = $c - $b;\n    my $r = sqrt($d1 * $d1 + $d2 * $d2 + $d3 * $d3);\n\
    \    return 1 if ($d1 == $d2 && $d2 == $d3);\n    return '' if ($r > 1);\n   \
    \ return '';\n}\n</code>\n<|/ a dscore=0 tags=algorithm,c++,c,perl,python |>\n\
    <| c |>\n\"A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n90 degree.\" That only applies to one angle. Your code would fail for `right_angle_triangle(8,\
    \ 4, 6)` which has a right angle with 45,0\xB0.\n<|/ c |>\n<| c |>\n\"An equilateral\
    \ triangle is a triangle where all three sides are equal.\" That is exactly the\
    \ opposite of what a right-angle triangle is.\n<|/ c |>\n<| c |>\nI believe you\
    \ meant to say _\"If not both sides are equal, the triangle is not equilateral\"\
    _\n<|/ c |>\n<| c |>\nIn fact, I don't believe this would actually work for some\
    \ edge cases. For example, a triangle with two angles greater than 180, as in\
    \ `right_angle_triangle(90, -90, 180)` would return true.\n<|/ c |>\n<| a |>\n\
    The easiest solution in Python is to use the module math:\n<code>\nfrom math import\
    \ sqrt", "    $a = abs($a);\n    $b = abs($b);\n    $c = abs($c);\n    if ($a\
    \ + $b <= $c || $c + $b <= $a || $a + $c <= $b) {\n        return 1;\n    }\n}",
  "    my $l1 = $a * $a + $b * $b + $c * $c;\n    my $l2 = sqrt($l1);\n    $l2 = $l2\
    \ > 1.0 ? $l2 : 1.0;\n    $l2 = $l2 / $a; # $a / $l1\n    $l2 = $l2 < 1.0 ? $l2\
    \ : 1.0;\n    my $l3 = sqrt($l2);\n    return '' if $l2 != $l3;\n    return $l2\
    \ > $l3 ? '1' : '0';\n}", "    $a < $b and $a < $c and $a > $c ? $a :\n    $b\
    \ < $c and $b > $a and $b > $c ? $b :\n    $c < $a and $c < $b and $c > $a ? $c\
    \ :\n    ''\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=perl,algorithm,geometry\
    \ |>\nI was just looking for a solution to this problem, and found a great solution\
    \ here: https://www.geeksforgeeks.org/check-if-a-given-line-intersects-a-polygon/\n\
    Basically its a recursive solution which returns true or false depending on whether\
    \ there is an intersection between the line and a polygon.\nFor your example you\
    \ would want to use the following two points to determine if the line intersects\
    \ the polygon:\n<code>\nA = {3, 3}\nB = {3, 5}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a tags=perl,algorithm,geometry dscore=0 |>\nFor me the solution was very simple.\
    \ I just need this information for polygon clipping. I just need to know whether\
    \ a point is inside the polygon.\nI used a method which I found on the internet.\n\
    <code>\n// Polygon contains point 'x'\nbool isInside(vector<Point> points, int\
    \ x, int y)\n{\n    for (int i = 0; i < points.size(); i++)\n    {\n        Point\
    \ p = points[i];\n        if ((p.x - x) * (p.x - x) + (p.y - y) * (p.y - y) <\
    \ 1)\n        {\n            return true;\n        }\n    }\n    return false;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nPlease add an explanation to your answer to make\
    \ it a better one.\n<|/ c |>\n<| c |>\nI used this method for clipping polygons\
    \ in WPF.\n<|/ c |>\n<| a tags=perl,algorithm,geometry |>\nThis one is more or\
    \ less same as above but in python and for sure better than recursive solution.\
    \ I know its for perl but someone may need this so i wrote it in python\n<code>\n\
    import turtle as t", "    return '' unless $a > $b > $c;\n    return $a > $b if\
    \ $c < $a + $b + 1 or $c < $a + $b or $c < $a + $b;\n    return $b > $c if $a\
    \ < $c + $b + 1 or $a < $c + $b or $a < $c + $b;\n    return 0;\n}", "    \n \
    \   my $is_right_angle = \n        (($b - $c) mod ($b + $c) == 0)\n        ||\
    \ (($c - $b) mod ($c + $b) == 0)\n        || (($a - $b) mod ($a + $b) == 0)\n\
    \        || (($b - $a) mod ($b + $a) == 0)\n        || (($c - $a) mod ($c + $a)\
    \ == 0)\n        || (($a - $c) mod ($a + $c) == 0)\n        || (($b - $c) mod\
    \ ($b + $c) == 0);\n    \n    return $is_right_angle? 1 : 0;\n}", "    return\
    \ if $a > $c or $b > $c;\n    my $a_is_eq_to_b_or_c = $a == $b || $a == $c;\n\
    \    my $b_is_eq_to_a_or_c = $b == $a || $b == $c;\n    my $c_is_eq_to_a_or_d\
    \ = $c == $a || $c == $b;\n    my $one_of_four_of_these_equal = $a_is_eq_to_b_or_c\
    \ || $b_is_eq_to_a_or_c || $c_is_eq_to_a_or_d;\n    my $a_is_opposite_of_four_of_these\
    \ = $a_is_eq_to_b_or_c && !$b_is_eq_to_a_or_c && $c_is_eq_to_a_or_d;\n    my $b_is_opposite_of_four_of_these\
    \ = $b_is_eq_to_a_or_c && !$a_is_eq_to_b_or_c && $c_is_eq_to_a_or_d;\n    my $c_is_opposite_of_four_of_these\
    \ = $c_is_eq_to_a_or_d && !$a_is_eq_to_b_or_c && !$b_is_eq_to_a_or_c;\n    return\
    \ $one_of_four_of_these_equal || $a_is_opposite_of_four_of_these || $b_is_opposite_of_four_of_these\
    \ || $c_is_opposite_of_four_of_these;\n}", "    my($a_len, $b_len, $c_len) = @_;\n\
    \    my $triangle_len = $a_len + $b_len + $c_len;\n    return '' if ($triangle_len\
    \ <= 1);\n    return 1 if (($b_len * $c) >= ($a_len * $b));\n    return 1 if (($a_len\
    \ * $c) >= ($b_len * $a));\n    \n    return 0;\n}", "    # Check if the length\
    \ of the sides of the triangle are equal\n    if($a != $b) {\n        if($a !=\
    \ $c) {\n            if($b != $c) {\n                return 1;\n            }\n\
    \        }\n    }\n    # Check if the length of the sides of the triangle are\
    \ equal\n    if($a != $c) {\n        if($b != $c) {\n            return 1;\n \
    \       }\n    }\n    # Check if the length of the sides of the triangle are equal\n\
    \    if($b != $c) {\n        return '';\n    }\n}\n</code>\n<|/ a |>\n<| c |>\n\
    Thank you for your solution!  I really appreciate it.\n<|/ c |>\n<| c |>\nI'm\
    \ glad this works for you. Thank you!\n<|/ c |>\n<| a tags=perl,algorithm,computational-geometry\
    \ |>\nHere's a simple Perl solution. It checks whether three sides are equal,\
    \ and then checks whether each one is 90\xB0 clockwise or counterclockwise, returning\
    \ an empty string if all three sides are equal:\n<code>", "    return '' if $a\
    \ < $b && $a < $c;\n    return '' if $c < $b;\n    return '' if $a > $b || $a\
    \ > $c || $c > $b;\n    return 1;\n}", "    my $result;\n    my $sum = $a + $b\
    \ + $c;\n    if($sum % 2 == 0){\n        $result = 1;\n    } else {\n        $result\
    \ = '';\n    }\n    return $result;\n}\n</code>\n<|/ a tags=perl |>\n<| c |>\n\
    I don't think your function will work. Try it with a different set of arguments.\n\
    <|/ c |>\n<| c |>\nIt works. It works perfectly for me with the test case you\
    \ provided.\n<|/ c |>\n<| c |>\nYou're right, of course. I just forgot about the\
    \ possibility of a triangle being \"right\" instead of \"90\".\n<|/ c |>\n<| c\
    \ |>\nYes, I missed the possibility of being right-angle.\n<|/ c |>\n<| c |>\n\
    I've revised my answer, including a complete working example, using your original\
    \ code.\n<|/ c |>\n<| a |>\nHere's another way to do it (just for fun), using\
    \ Math::Trig::Sine:\n<code>\nuse Math::Trig::Sine;", "    # Return an empty string\
    \ if all sides are the same.\n    if ($a eq $b && $a eq $c)\n    {\n        return\
    \ '';\n    }", "    return undef unless $a > 0 && $a < $c && $b > 0 && $b < $c;\n\
    \    my $left_a = $a - ($b * $c) / $c;\n    my $left_b = $a - ($c * $a) / $c;\n\
    \    my $left_c = $b - ($c * $b) / $c;\n    return 1 if $c < $b && $b < $a; #\
    \ a right angled triangle\n    return '' if $c < $a || $c < $b;\n    # both $a\
    \ and $b are same\n    return '' unless $left_b == $left_c;\n    return 1 if ($left_a\
    \ < $left_b) || ($left_a < $left_c);\n    return '' if ($left_a > $left_c) ||\
    \ ($left_b > $left_c);\n    return '';\n}", "    my ($a_length, $b_length, $c_length)\
    \ = $a ^ $b ^ $c;\n    return $b_length < $a_length\n        ? $a < $c || $a >\
    \ $b\n        : $c < $a || $c > $b;\n}", "    my $r = 0; \n    my $a = abs($a);\
    \ \n    my $b = abs($b); \n    my $c = abs($c); \n    if ( $a + $b > $c ) {\n\
    \        $r = $c;\n    } elsif ( $a + $c > $b ) {\n        $r = $b; \n    } else\
    \ {\n        $r = $a;\n    }\n    return $r;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
