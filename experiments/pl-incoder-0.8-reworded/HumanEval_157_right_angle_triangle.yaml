name: HumanEval_157_right_angle_triangle
language: pl
prompt: "# Given the lengths of the three sides of a triangle. Return 1 if the three\n\
  # sides form a right-angled triangle,  otherwise.\n# A right-angled triangle is\
  \ a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n#\
  \ >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
  # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
  \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
  \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
  \  if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n \
  \       exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
  \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
  \     if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
  \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
  \    if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    return '' unless $a > $b and $a > $c;\n    return '' if $a == $b\
    \ or $a == $c;\n    return '' if $b > $c;\n    $a == $b and $a != $c or $a ==\
    \ $c or $b == $c;\n}", "    my $c = $a > $c ? $a : $c;\n    my $b = $a > $b ?\
    \ $a : $b;\n    my $a = $a > $b ? $a : $b;\n    return $a > $c ? '' : '1';\n}",
  "    my $sides = ($b - $a) x ($c - $a);\n    return $sides == 2 && $a + $c >= $b\
    \ || $sides == 2 && $a + $c <= $b\n                    && $b + $c >= $a || $sides\
    \ == 2 && $a + $c <= $b\n                    && $b + $c <= $a || $sides == 2 &&\
    \ ($a > $b && $a > $c && $a > $a)\n                    || ($sides == 3 && $a +\
    \ $c >= $b && $b + $c >= $a && $a + $c >= $b)\n                    || ($sides\
    \ == 3 && $a + $c <= $b && $b + $c <= $a && $a + $c <= $b)\n                 \
    \   || ($sides == 3 && ($a > $b && $a > $c && $a > $a) || ($sides == 3 && $a +\
    \ $c >= $b && $b + $c >= $a && $a + $c >= $b))\n                    || ($sides\
    \ == 3 && ($a > $b && $a > $c && $a > $a) || ($sides == 3 && $a + $c <= $b &&\
    \ $b + $c <= $a && $a + $c <= $b))\n                    || ($sides == 3 && ($a\
    \ > $b && $a > $c && $a > $a) || ($sides == 3 && $a + $c <= $b && $b + $c <= $a\
    \ && $a + $c <= $b))\n                    || ($sides == 3 && ($a > $b && $a >\
    \ $c && $a > $a) || ($sides == 3 && $a + $c <= $b && $b + $c <= $a && $a + $c\
    \ <= $b))\n                    || ($sides == 3 && ($a > $b && $a > $c && $a >\
    \ $a) || ($sides == 3 && $a + $c >= $b && $b + $c >= $a && $a + $c >= $b));\n}",
  "    my $rad = $rad_triangle($a, $b, $c);\n    return $rad ? 1 : '';\n}", "    return\
    \ 1 if $b > $c && $a > $c;\n    return 1 if $a > $c && $b > $c;\n    return 1\
    \ if $a > $b;\n    return 1 if $b > $a;\n    return 0 if $a > $c;\n    return\
    \ 0 if $b > $c;\n    return 0 if $c > $a;\n    return 0 if $c > $b;\n    return\
    \ 1 if $a > $c;\n}", "    if($a > $c || $b > $c){\n        return 0;\n    }\n\
    \    elsif(!($a == $b || $a == $c)){\n        return 1;\n    }\n}", "    my ($s1,\
    \ $s2, $s3, $s4, $s5) = @$a[-5..5];\n    my $s6 = @$a[5..4];\n    my $s7 = @$b[-5..5];\n\
    \    my $s8 = @$b[5..4];\n    my $s9 = @$c[-5..5];\n    my $s10 = @$c[5..4];\n\
    \    return (@$a[$s1,$s2,$s3,$s4,$s5] eq @$b[$s1,$s2,$s3,$s4,$s5]) ? 1 : \"\"\
    \ if \n    @$a[$s1,$s2,$s3,$s4,$s5] eq @$c[$s1,$s2,$s3,$s4,$s5] ? 1 : \"\" if\
    \ \n    ($s6 == $s7) && @$a[$s1,$s2,$s3,$s4,$s5] eq @$b[$s1,$s2,$s3,$s4,$s5] ?\
    \ 1 : \"\" if \n    ($s8 == $s9) && @$a[$s1,$s2,$s3,$s4,$s5] eq @$c[$s1,$s2,$s3,$s4,$s5]\
    \ ? 1 : \"\";\n    return \"\" if @$a[$s1,$s2,$s3,$s4,$s5] eq @$b[$s1,$s2,$s3,$s4,$s5]\
    \ eq @$c[$s1,$s2,$s3,$s4,$s5] ? 1 : \"\";\n    return \"\" if @$a[$s1,$s2,$s3,$s4,$s5]\
    \ eq @$b[$s1,$s2,$s3,$s4,$s5] eq @$c[$s1,$s2,$s3,$s4,$s5] ? 1 : \"\";\n}", " \
    \   return \"\" if($a > $b or $a > $c or $b > $c);\n    return \"\" if($a != $b\
    \ and $a != $c or $b != $c and $a != $c );\n    return \"\" if($b != $c and $b\
    \ != $a and $c != $a and $c != $b );\n    my $ab = $b - $a;\n    my $ac = $c -\
    \ $a;\n    $ab > $ac ? \"\" : 1\n}", "    my ($ac, $bc, $ca);\n    my $det, $detv;\n\
    \    # http://en.wikipedia.org/wiki/Determinant\n    $detv = sqrt($a*$a + $b*$b\
    \ + $c*$c);\n    $det = $detv**2 - $a*$b*$c if $detv;\n    # http://en.wikipedia.org/wiki/Moebius_determinant\n\
    \    $ca = $detv*(($bc-$ac)/($a-$b));\n    $ac = $detv*(($ca-$ac)/($b-$a));\n\
    \    $ac -= $det;\n    # http://en.wikipedia.org/wiki/Indeces_of_determination\n\
    \    return $ac < 0 and $ac > -$detv;\n}\n</code>\n<|/ a tags=perl,trigonometry,algorithm\
    \ |>\n<| a dscore=2 |>\n<code>", "    $a < $b and $a < $c or $a > $b and $a >\
    \ $c or $a > $b and $a < $c;\n}", "    \n    if (abs($a - $b) > abs($c - $a))\
    \ {\n\treturn 1;\n    }\n    return '' unless $a == $c || $b == $c;\n    return\
    \ '' unless $a > $b or $a == $b;\n    return '0' if $a > $b;\n    return '' if\
    \ $a == $b;\n    return '' if $b > $c;\n    return '0' if $b == $c;\n    return\
    \ '' if $c > $a;\n    return '0' if $c == $a;\n    return '' if $a == $b and $b\
    \ > $c;\n    return '0' if $a > $c and $a > $b;\n    return '0' if $a > $c and\
    \ $b > $c;\n    return '0' if $b > $c and $a > $c;\n    return '0' if $a == $c\
    \ and $b > $c;\n    return '1' if $a > $b;\n    return '1' if $b > $c;\n}", " \
    \   return 1 if ($b eq $c && $a ne $b);\n    return 1 if $b ne $c && $a ne $c;\n\
    \    if ($a eq $b) {\n        return 1 if ($c ne $a || $c eq $b);\n        return\
    \ 1 if $c ne $b && $a eq $c;\n        return \"\" if $c ne $a && $b eq $c;\n \
    \   }\n    if ($a eq $c) {\n        return 1 if ($b ne $c || $b eq $c);\n    \
    \    return 1 if $b ne $c && $a eq $b;\n        return \"\" if $b ne $a && $c\
    \ eq $b;\n    }\n    return \"\"\n}\n</code>\n<|/ a dscore=0 tags=algorithm,perl,hash,key\
    \ |>\n<| c |>\nI did this just before I saw this. And it seems the most efficient\
    \ way for me to do it. Thank you!\n<|/ c |>\n<| a tags=algorithm,perl,hash,key\
    \ |>\nThis code is a little more efficient than your code, though it could use\
    \ some work:\n<code>\nuse 5.010;\nuse strict;\nuse warnings;\nuse autodie;", " \
    \   return 1 if $a eq $b or $a eq $c or $b eq $c or $a == $b or $a == $c;\n  \
    \  return;\n}", "    return '' if $a == $b || $a == $c || $b == $c;\n    return\
    \ '' if abs($b - $c) > ($a - $c) * 0.5;\n    return '' if $a < $c;\n    return\
    \ '' if $a > $b;\n    return '' if $c < $a;\n    return '' if $c > $b;\n    return\
    \ '' if $c < $b;\n    return '' if $a > $b;\n    return '' if $a < $c;\n    return\
    \ '' if $a > $c;\n    return '' if $a > $b;\n    return '' if $a < $b;\n    return\
    \ '' if $a > $c;\n    return '' if $a < $c;\n    return '' if $a > $b;\n    return\
    \ '' if $a < $b;\n    return '' if $a > $c;\n    return '' if $a < $c;\n    return\
    \ '' if $a > $b;\n    return '' if $a < $c;\n    return '' if $a > $c;\n    return\
    \ '' if $a < $b;\n    return '' if $a > $c;\n    return '' if $a < $b;\n    return\
    \ '' if $a > $c;\n    return '' if $a < $c;\n    return '' if $a > $b;\n    return\
    \ '' if $a < $c;\n    return '' if $a > $c;\n    return '' if $a < $b;\n    return\
    \ '' if $a > $c;\n    return '' if $a < $b;\n    return '' if $a > $c;\n    return\
    \ '' if $a < $c;\n    return '' if $a > $b;\n    return '' if $a < $c;\n    return\
    \ '' if $a > $c;\n    return '' if $a < $b;\n    return '' if $a > $c;\n    return\
    \ '' if $a < $b;\n    return '' if $a > $c;\n    return '' if $a < $c;\n    return\
    \ '' if $a > $b;\n    return '' if $a < $c;\n    return '' if $a > $c;\n    return\
    \ '' if $a < $b;\n    return '' if $a > $c;\n    return '' if $a < $b;\n    return\
    \ '' if $a > $c;\n    return '' if $a < $c;\n    return '' if $a > $b;\n    return\
    \ '' if $a < $c;\n    return '' if $a > $c;\n    return '' if $a < $b;\n    return\
    \ '' if $a > $c;", "    return ( (($a + $b > $c) && ($b > $c) && ($a + $c > $b))\
    \ ? '' : \"$a, $b and $c are not right angle!\");\n}", "    \n    if ($a < $b\
    \ and $b < $c) {\n        return 1;\n    }\n    else {\n        return 0;\n  \
    \  }\n}", "    return if ($b == $c && $a == $b);\n    return if ($b == $c && $a\
    \ != $b);\n    return if ($a == $c && $b != $a);\n    my $d = $b ** 2;\n    my\
    \ $e = ($a ** 2) - ($a * $c * $d);\n    return if (($a > 0 && $c > 0 && $d ==\
    \ $e && $b > $a * $c));\n    return if ($e < 0);\n    return if ($b > $a * $c\
    \ / $d);\n    return if ((((($b ** 2) - ($a * $c)) ** (0.5)) / $d) <= 0);\n  \
    \  return if ((((($b ** 2) - ($a * $c)) ** (0.5)) / $d) == 0);\n    return if\
    \ ((((($b ** 2) - ($a * $c)) ** (0.5)) / $d) > 0);\n    return if ((((($b ** 2)\
    \ - ($a * $c)) ** (0.5)) / $d) < 0);\n}", "    return 1 unless $a > $b and $a\
    \ > $c;\n    return 1 unless $a < $b and $a < $c;\n    return 1 unless $a > $b\
    \ and $a < $c;\n    return '';\n}", "    if(abs($a) > abs($b)) {\n        if(abs($a)\
    \ > abs($c)) {\n            return 1;\n        }\n        else {\n           \
    \ return 0;\n        }\n    }\n    else {\n        return 0;\n    }\n}\n</cell>\n\
    <text>\nExercise 3\nThe area of a triangle is determined by its base, height,\
    \ and side length. Write a subroutine to calculate the area of a triangle given\
    \ its lengths.", "    \n    return 1 if $a + $b > $c;\n    return 1 if ($a + $b\
    \ == $c) || ($a + $b == $c - $a);\n    return 1 if ($b + $c == $a) || ($b + $c\
    \ == $a - $b);\n    return 1;\n}", "    my $left_angle = -($a > $b) ? (($a < $c)\
    \ ? 1 : 2) : 0;\n    my $right_angle = -($a > $b) ? (($a < $c) ? 3 : 4) : 1;",
  "    return $c > $a and $c > $b and $c > $a and $b > $a and $a > $b;\n}\n</code>\n\
    <|/ a tags=math,python |>\n<| c |>\nI like the elegance of this solution, but\
    \ it only works for sides of length 2 or 3. I also don't understand why you say\
    \ \"A right-angled triangle is a triangle in which one angle is right angle\"\
    .\n<|/ c |>\n<| c |>\nThe conditions I listed are for the 3 sides of the triangle\
    \ to be of length 3 or 2, but any length can be used. The conditions are a specific\
    \ requirement of the question. I could have written the conditions more verbosely\
    \ as `abs($b - $c) > abs($a - $c)` and `abs($c - $a) > abs($b - $a)`\n<|/ c |>\n\
    <| a |>\n<code>\ndef right_angle(a,b,c):\n    ab = abs(a-b)\n    ac = abs(c-a)\n\
    \    bc = abs(b-c)\n    if ab < ac and bc > ab:\n        return True\n    else:\n\
    \        return False", '    my $det = $a*$c - $b*$b;', "    if ($a > $b || $a\
    \ > $c) {\n\t$a > $b or $a > $c ? 1 : 0;\n    } elsif ($b > $c || $b > $a) {\n\
    \t$b > $c or $b > $a ? 1 : 0;\n    } elsif ($c > $a || $c > $b) {\n\t$c > $a or\
    \ $c > $b ? 1 : 0;\n    } else {\n\t1;\n    }\n}", "    my $sum = 0;\n    $sum\
    \ += $a*$b;\n    $sum += $b*$c;\n    $sum += $c*$a;\n    return 1 if $sum == 0;\n\
    \    return \"\" if $sum < 0;\n    return \"\" if $sum > 0;\n    return \"\";\n\
    }", "    my $s = $a + $b + $c;\n    if ($s < 0) {\n        $s = (sqrt($s))**2;\n\
    \        $s = -$s;\n    }\n    if ($s == 0) {\n        return 1;\n    }\n    my\
    \ $t = sqrt($s/$a + $s/$b + $s/$c);\n    if ($t > 1) {\n        return 1;\n  \
    \  }\n    return \"\";\n}", "    return '' if ($a + $b + $c != 0);\n    return\
    \ '' if ($a == $b and $a == $c);\n    return '' if ($b == $c and $b == $a);\n\
    \    return '' if ($a == $c or $b == $c);\n    return 1 if $b == ($a * $c) / $a;\n\
    \    return 1 if $c == ($a * $b) / $a;\n}", "    return \"\" unless $a != $b ||\
    \ $c != $a || $c != $b;\n    my $d = ($b*$c - $a*$b);\n    if ($d <= 0) {\n  \
    \      return \"\" unless $a != $b;\n        return \"\" unless $a != $c;\n  \
    \      return \"\" unless $b != $c;\n        return \"ABCD\";\n    }\n    my $e\
    \ = sqrt(($b*$c) - ($a*$a));\n    my $f = sqrt(($c*$c) - ($a*$b));\n    my $g\
    \ = sqrt(($a*$c) - ($b*$b));\n    return \"\" unless $e == $f || $e == $g;\n \
    \   return \"FEDC\";\n}", "    # return \"NO\" if $a + $b > $c;\n    # return\
    \ \"YES\" if $a + $b = $c\n    # return \"NO\" if $a + $b > $c or $a + $c = $b\n\
    \    # return \"YES\" if $a + $b = $c or $a + $c = $b\n    return $a + $b == $c\
    \ if $a + $b > $c;\n    return $a + $c == 0  if $a + $b > $c;\n    return $a +\
    \ $b == $c if $a + $b == $c;\n    # return \"NO\" if $a + $b > $c or $a + $c =\
    \ $b;\n    # return \"YES\" if $a + $b = $c or $a + $c = $b;\n    return $a +\
    \ $b > $c if $a + $b == $c or $a + $b == $c or $a + $b > $c;\n    # return \"\
    NO\" if $a + $b = $c or $a + $c = $b;\n    # return \"YES\" if $a + $b > $c or\
    \ $a + $c = $b;\n}", "    my %hash = (\n        a => $a + $b,\n        b => $b\
    \ - $c,\n        c => $c - $a\n    );\n    return $hash{a} eq $hash{c}? $hash{b}\
    \ > $hash{c}: $hash{a} > $hash{b} and $hash{b} > $hash{c};\n}", "    return 1\
    \ if $b <= $c || $a <= $c || $a <= $b;\n    return;\n}", "    $a = abs($a); $b\
    \ = abs($b); $c = abs($c);\n    return $a == $b || ($a == $c && ($b == $c || $b\
    \ == $c - $a));\n}", '    return if $a + $b < $c;', "    if ($a != $b && $a !=\
    \ $c && $b != $c) {\n\tmy($a1, $b1, $c1) = @_;\n\tmy($a2, $b2, $c2) = ($b, $c,\
    \ $a);\n\tmy($p1, $p2, $p3) = ($a, $b, $c);\n\tmy($q1, $q2, $q3) = ($c, $a, $b);\n\
    \tif ($p1 < $q2) {\n\t    if ($p2 < $q1) {\n\t\tif ($p3 < $q2) {\n\t\t    my($p4,\
    \ $p5, $p6) = ($b, $c, $a);\n\t\t    my($q4, $q5, $q6) = ($c, $a, $b);\n\t\t \
    \   my($s1, $s2, $s3) = ($a1, $b1, $c1);\n\t\t    my($s4, $s5, $s6) = ($a2, $b2,\
    \ $c2);\n\t\t    return 1 if ($s1 < $s4 && $s2 < $s5 && $s3 < $s6);\n\t\t}\n\t\
    \tmy($s4, $s5, $s6) = ($a2, $b2, $c2);\n\t\treturn 1 if ($s1 < $s4 && $s2 < $s5\
    \ && $s3 < $s6);\n\t    }\n\t    if ($p3 < $q1) {\n\t\tmy($p4, $p5, $p6) = ($b,\
    \ $c, $a);\n\t\tmy($q4, $q5, $q6) = ($c, $a, $b);\n\t\tmy($s1, $s2, $s3) = ($a1,\
    \ $b1, $c1);\n\t\tmy($s4, $s5, $s6) = ($a2, $b2, $c2);\n\t\treturn 1 if ($s1 <\
    \ $s4 && $s2 < $s5 && $s3 < $s6);\n\t    }\n\t} else {\n\t    if ($p2 < $q1) {\n\
    \t\tif ($p3 < $q2) {\n\t\t    my($p4, $p5, $p6) = ($b, $c, $a);\n\t\t    my($q4,\
    \ $q5, $q6) = ($c, $a, $b);\n\t\t    my($s1, $s2, $s3) = ($a1, $b1, $c1);\n\t\t\
    \    my($s4, $s5, $s6) = ($a2, $b2, $c2);\n\t\t    return 1 if ($s1 < $s4 && $s2\
    \ < $s5 && $s3 < $s6);", "    my $sum = $a + $b + $c;\n    my $div = $sum / 2;\n\
    \    my $is_right_angle = (($a * $c) + ($b * $sum) - $c * $div == 0);\n    \n\
    \    if ($is_right_angle) {\n        return 1;\n    }\n    else {\n        return\
    \ '';\n    }\n}\n</textarea>\n</div>", "    return 1 if $a > $b || $a > $c ||\
    \ $b > $c;\n    return \"\";\n}", "    my $d = $a - $b;\n    my $e = $c - $b;\n\
    \    my $f;", "    my($d) = abs ($a - $b);\n    my($e) = abs ($a - $c);\n    my($f)\
    \ = abs ($b - $c);\n    return \"\" if (($a + $b + $c) == 0);\n    return \"\"\
    \ if ($d < $e);\n    return \"\" if ($e < $f);\n    return \"\" if ($f < $d);\n\
    \    return \"\" if ($f - $e < $d - $c);\n    return 1 if ($d == $e + $f);\n \
    \   return 1 if ($d == $e * 2 + $f);\n    return 1 if ($d == $e * 2 + $f);\n \
    \   return 1;\n}", "    my $d = ($a - $b) * ($c - $b);\n    my $e = ($b - $a)\
    \ * ($c - $a);\n    return $d == $e ? \"1\" : \"\";\n}", "    return 0 unless\
    \ $a > $b;\n    return 0 unless $a > $c;\n    return 0 unless $b > $c;\n    return\
    \ 0 unless ($a == $b || $b == $c || $a == $c);\n    return 1 if ($a != $b && $b\
    \ != $c && $c != $a);\n    return 0 if ($a == $b || $b == $c || $a == $c);\n \
    \   return 1 if ($a != $b && $b != $c && $c != $a);\n    return 1 if ($a == $b\
    \ || $b == $c || $a == $c);\n}", "    \n    if ($c < 0) {\n\treturn 1;\n    }\
    \ elsif ($b > $c && $a > $c) {\n\treturn 1;\n    } elsif ($a > $b and $c > $b)\
    \ {\n\treturn 1;\n    }\n    \n    return \"\";\n}", "    my($d,  $e,  $f) = ($c,\
    \ $b, $a);\n    my($g,  $h,  $i) = ($a, $b, $c);\n    my($j,  $k,  $l) = ($b,\
    \ $c, $a);\n    my($m, $n, $o) = ($a, $c, $b);\n    my($p, $q, $r) = ($b, $c,\
    \ $c);\n    my($s, $t, $u) = ($c, $a, $c);\n    my($v, $w, $x) = ($a, $c, $b);\n\
    \    my($y, $z) = ($b, $a, $c);\n    my $e1 = $a;\n    my $e2 = $b;\n    my $e3\
    \ = $c;", "    if ($a > $b and $a > $c) {\n        return 1;\n    } elsif ($b\
    \ > $c and $b > $a) {\n        return 1;\n    } elsif ($c > $a and $c > $b) {\n\
    \        return 1;\n    }\n    return '';\n}", "    $b < $a || $b > $c || $c <\
    \ $a || $c > $b && ($a > $b || $a > $c || $b > $c || $b > $a);\n}", "    my $lena\
    \ = $a - $b;\n    my $lenb = $c - $b;\n    my $lenc = $a - $c;\n    if ($lenb\
    \ eq $lenc) {\n\treturn 1;\n    }\n    if ($lena eq $lenc) {\n\treturn '';\n \
    \   }\n    if ($lenb eq $lenc) {\n\treturn '';\n    }\n    if ($lena eq $lenb)\
    \ {\n\treturn 1;\n    }\n    return '';\n}", "    return 1 unless $a > $b or $a\
    \ > $c or $b > $c;\n    return 1 if $a > $b and $b > $c;\n    return 1 if $a >\
    \ $c and $c > $b;\n    return \"0\" if $a > $b and $c > $b;\n    return \"0\"\
    \ if $b > $c and $a > $b;\n    return \"0\" if $a > $b and $b > $c and $c > $a;\n\
    \    return \"0\" if $a > $b or $a > $c or $b > $c or $c > $a;\n}\n</cell>\n<text>\n\
    Test\nLet's test our functions. We expect them all to return the correct result.",
  "    if($a eq $b) {\n        if($a eq $c) {\n            return 1;\n        } else\
    \ {\n            return 0;\n        }\n    }\n    if($a eq $c) {\n        return\
    \ 0;\n    }\n    if($b eq $c) {\n        return 0;\n    }\n    if($a > $b) {\n\
    \        return 1;\n    }\n    if($b > $c) {\n        return 1;\n    }\n    if($a\
    \ > $c) {\n        return 0;\n    }\n    if($b > $c) {\n        return 0;\n  \
    \  }\n    if($a > $b) {\n        return 0;\n    }\n    if($b eq $c) {\n      \
    \  return 0;\n    }\n    return 0;\n}", "    return 1 if $a > $b and $a > $c;\n\
    \    return 1 if $b > $a and $b > $c;\n    return 1 if $c > $a and $c > $b;\n}",
  "    my $a = $a + $b;\n    my $b = $a + $c;\n    my $c = $b + $a;\n    if ($a <=\
    \ $b && $b <= $c && $c <= $a) { return \"1\"; }\n    else { return \"\"; }\n}",
  "    my $side1 = $a - $b;\n    my $side2 = $b - $c;\n    my $side3 = $c - $a;\n\
    \    my $result1 = ($side1 * $side2) <= 0 || ($side1 * $side3) <= 0;\n    my $result2\
    \ = ($side2 * $side3) <= 0 || ($side1 * $side3) <= 0;\n    $result1 ||= $result2;\n\
    \    $result1 ? 1 : 0;\n}\n</code>\n<|/ a dscore=1 tags=perl,hash |>\n<| c |>\n\
    Why do you compare with 0 and 1? I thought 0 and 1 represent false and true respectively\n\
    <|/ c |>\n<| c |>\n: No, `0` and `1` are just numbers and are different from `FALSE`\
    \ and `TRUE`. `FALSE` and `TRUE` are the names of Perl constants, like `0` and\
    \ `1`. When you compare them with `0`, you are actually comparing their values\
    \ with the string `\"0\"`. That is, `$x eq \"0\"` is true only if `$x` has the\
    \ string `\"0\"` in it, whereas `$x eq 0` is true only if `$x` has the number\
    \ `0` in it.\n<|/ c |>\n<| c |>\nOkay, I think I understand. I was under the impression\
    \ that ($x == 0) is equivalent to ($x eq \"0\") which was giving me a false positive.\
    \ Thanks!\n<|/ c |>\n<| c |>\n: You were not wrong, but you were wrong in a subtle\
    \ way. `$x == 0` does not mean `$x eq \"0\"`, it means `$x eq ($x == 0)`. When\
    \ you did `$x eq $x == 0`, you were comparing the values returned by `$x eq $x`,\
    \ which is always true.\n<|/ c |>\n<| c |>\nOh yeah, I see now. Thanks!\n<|/ c\
    \ |>\n<| a dscore=1 |>\nYour code doesn't work. \nPerl won't ever be able to read\
    \ your mind, unless you use proper indentation, then it'll be clear what you're\
    \ doing wrong.\nHere is a version that does work:\n<code>\nuse strict;\nuse warnings;\n\
    use autodie;", "    # Make sure a,b and c are valid lengths\n    if ($a < $b &&\
    \ $a < $c) {\n        return 1;\n    }\n    if ($b < $c && $b < $a) {\n      \
    \  return 1;\n    }\n    if ($c < $a && $c < $b) {\n        return 1;\n    }\n\
    \    return 0;\n}", "    my $cond = ($a > $b) || ($a == $b);\n    my $res = $cond\
    \ ? '' : 1;\n    return $res;\n}", "    return '' if $a + $b > $c;\n    return\
    \ '' if $a + $b == $c or $a == $c;\n    return '' if $a + $b > $c;\n    return\
    \ '' if $a + $b == $c or $a == $c;\n    return '' if $a == $c;\n    return ''\
    \ if $a + $b > $c;\n    return '' if $a + $b == $c or $a == $c;\n    return '1';\n\
    }", "    my $rad = ($a - $b)*($a + $c)/($b - $c);\n    return $rad < 180?1:\"\"\
    ;\n}", "    $a++ if $b > $c;\n    $b++ if $c > $a;\n    $c++ if $a > $b;\n   \
    \ return $a == $b and $a == $c ? \"1\" : \"\";\n}", "    return unless ($a < $b\
    \ and $a < $c and $c > $b);\n    return 1;\n}\n</code>\n<|/ a |>\n<| c |>\nThis\
    \ code returns 1 for the following case: `right_angle_triangle(100, 1, 102)`.\n\
    <|/ c |>\n<| a tags=perl,java |>\nHere is the C code that would solve the problem:\n\
    <code>", "    my ($p, $q, $r) = @{$_}{qw(p q r)};\n    my ($u, $v, $w) = @{$_}{qw(u\
    \ v w)};", "    my ($s1, $s2, $s3);\n    my $ab = $a - $b;\n    my $bc = $b -\
    \ $c;\n    my $ac = $a - $c;\n    my $tmp1;\n    my $tmp2;\n    if ($ac > $bc)\
    \ {\n\t$tmp1 = $ac;\n\t$tmp2 = $bc;\n    } else {\n\t$tmp1 = $bc;\n\t$tmp2 = $ac;\n\
    \    }\n    # find angle\n    my $angle = $tmp1 * $tmp2 + $tmp2 * $tmp1;\n   \
    \ $angle /= Math::Math::sqrt($tmp1*$tmp1 + $tmp2*$tmp2);\n    if ($angle > Math::PI/2)\
    \ {\n\t$angle = -$angle;\n    }\n    if ($angle >= 0) {\n\treturn '1';\n    }\
    \ else {\n\treturn '';\n    }\n}\n1;\n__END__\n</code>\n<|/ a tags=perl,perl-module\
    \ |>\n<| c |>\nHi Dave, thank you for your solution.  I tried it out and it works\
    \ great.  I was wondering if you could explain what the my($s1,$s2,$s3); and sub\
    \ right_angle... do.  I understand $a and $b but $c?\n<|/ c |>\n<| c |>\nOops,\
    \ I see your edit with the missing `$c`.  I edited the post with corrected code.\
    \  `$c` was missing, which was why my solution didn't work.\n<|/ c |>\n<| c |>\n\
    Oops, I see you corrected the $c missing as well which fixed the problem. Thanks.\n\
    <|/ c |>\n<| c |>\nNo problem, I'm glad I was able to help.  Good luck with your\
    \ project!\n<|/ c |>\n<| a tags=perl,perl-module |>\nThe solution is in Math::Trig:\n\
    <code>", "    my $rad = Math::PI / 180;\n    $a = 180 * $a / $b;\n    $c = 180\
    \ * $c / $b;\n    $a = 180 * $a / $c;\n    $c = 180 * $c / $c;", "    \n    $a==$c\
    \ || $b==$c || $a == $b;\n}", "    # Right-angled triangle is if any of these\
    \ conditions is true:\n    return 1 if (\n                ( $c > $b || $c > $a\
    \ )\n                &&\n                ( $b > $c || $b > $a )\n            \
    \    &&\n                ( $a > $c || $a > $b )\n                );\n    return;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\ndef right_angled_triangle(a,\
    \ b, c):\n    \n    if a + b > c and b + c > a and c + a > b:\n        print('Triangle\
    \ is Right-Angled')\n    else:\n        print('Triangle is not Right-Angled')\n\
    </code>\n<|/ a tags=perl,function |>\n<| a dscore=0 |>\n<code>", "    if($b ==\
    \ 0 and $c != 0){\n        return 0;\n    }\n    if($b != 0 and $c == 0) {\n \
    \       return 0;\n    }\n    if($a == 0 and $b != 0){\n        return 0;\n  \
    \  }\n    if($a == 0 and $b == 0 and $c != 0){\n        return 0;\n    }\n   \
    \ if($a != 0 and $b == 0 and $c == 0){\n        return 0;\n    }\n    if($a !=\
    \ 0 and $b != 0 and $c == 0){\n        return 0;\n    }\n    if($a != 0 and $b\
    \ != 0 and $c != 0){\n        return 1;\n    }\n}\n</code>\n<|/ a |>\n<| a dscore=2\
    \ |>\nFor anyone stumbling across this question in the future, here's my implementation\
    \ of a right-angled triangle:\n<code>\nfunction checkRightAngle($side1, $side2,\
    \ $side3) {", "    my $sum = 0;\n    for my $i ( 0 .. 3 ) {\n        my $l = (\
    \ $i + 1 ) % 3;\n        if ( $a + $b > $c ) {\n            $sum += $a + $c ;\n\
    \            $sum -= $b + $c ;\n        } elsif ( $a + $c > $b ) {\n         \
    \   $sum += $a + $b ;\n            $sum -= $c + $b ;\n        } elsif ( $b + $c\
    \ > $a ) {\n            $sum += $b + $c ;\n            $sum -= $a + $c ;\n   \
    \     } elsif ( $a + $b > $c ) {\n            $sum += $a + $c ;\n            $sum\
    \ -= $b + $c ;\n        } else {\n            $sum += $a + $b ;\n            $sum\
    \ -= $c + $b ;\n        }\n    }\n    return $sum == 0 ? '' : \"1\";\n}", "  \
    \  return (\n        $a == $b + $c ||\n        $a == $b - $c ||\n        $a ==\
    \ $c - $b ||\n        $a == $c - $b + $b\n        );\n}", "    my ($s, $t, $u,\
    \ $v) = @$c;\n    ($s, $t, $u, $v) = (@$a, @$b, @$c, @$d);\n    return $s <= $t\
    \ && $s <= $u && $t <= $u && $u <= $v;\n}", "    \n    if(($b - $c) > ($a - $b))\
    \ {\n        return 1;\n    }", "    return '' unless $a < $b or $a < $c or $b\
    \ < $c;\n    return 1 if $a == $b and $a == $c;\n    return 1 if $b == $c and\
    \ $b == $a;\n    return 1 unless $a % 2 == 1 and $b % 2 == 1 and $c % 2 == 1;\n\
    \    return 1 if $c * ($b - $a) / ($c - $a) == $b - $a;\n    return 1;\n}\n</code>\n\
    <|/ a tags=algorithm,math,perl |>\n<| c |>\nThis code is so much slower than the\
    \ other solutions.\n<|/ c |>\n<| c |>\n, did you do some benchmarking with the\
    \ other solutions?  And how is the speed of it compared to mine?\n<|/ c |>\n<|\
    \ c |>\nMy code is almost two times faster than yours. That's what I meant with\
    \ \"slow\".\n<|/ c |>\n<| c |>\n, how slow is \"slow\"?  And what are your benchmark\
    \ numbers?  Your code is very different from mine since it uses the fact that\
    \ \"the triangle ABC is a right angled triangle if and only if AB and CB are right\
    \ angled.\"\n<|/ c |>\n<| c |>\nYour code runs in 0.67 seconds for me\n<|/ c |>\n\
    <| a dscore=4 tags=algorithm,math,perl |>\nHere's a non-perl solution in javascript:\n\
    <code>\nfunction checkTriangle(a,b,c){\n    var a1=a/2;\n    var b1=b/2;\n   \
    \ var c1=c*a/2;", "    if( $a + $b > $c ) {\n        return \"$a $b $c\" =~ /^.*(\\\
    d+)\\s+(\\d+)\\s+(\\d+)$/;\n    }\n    return 0;\n}", "    $a < $b and $a < $c\
    \ and $b < $c and $a > $c\n}", "    return 1 if ($a == $b || $a == $c || $b ==\
    \ $c);\n    return \"\";\n}", "    my $ab = $a - $b;\n    my $cd = $c - $d;\n\
    \    my $ab_cos = $ab * $ab;\n    my $cd_cos = $cd * $cd;\n    my $ab_plus_cd\
    \ = $ab_cos + $cd_cos;\n    if ($ab_plus_cd <= 0) {\n        return 0;\n    }\n\
    \    if ($ab_plus_cd > $a * $c) {\n        return 1;\n    }\n}\n</code>\n<|/ a\
    \ tags=algorithm,math |>\n<| c |>\nThat code looks a lot like Python. Python is\
    \ very similar to C/C++/Java/C# but also has [operator overloading](http://docs.python.org/2/library/operator.html)\
    \ which makes your code more succinct. Also, your math seems a lot more complicated\
    \ than the code in the question. Do you know what [Horner's method](https://en.wikipedia.org/wiki/Horner's_method)\
    \ is and how it can simplify the code?\n<|/ c |>\n<| c |>\n: That's very true.\
    \ The `@result` is probably a bad name for a variable that holds the result of\
    \ a calculation; it's a nice name for a variable that holds the arguments. I've\
    \ fixed the names.\n<|/ c |>\n<| c |>\nYou don't need the square root. The angle\
    \ is `atan2(y, x)`.\n<|/ c |>\n<| a dscore=4 |>\nThis is an old question but a\
    \ very good answer!\nHere is a very simple C implementation:\n<code>\nint isRightAngleTriangle(int\
    \ a, int b, int c)\n{\n    int ab = a * b;\n    int ac = a * c;\n    int bc =\
    \ b * c;", "    my $sum = ($a + $b) + $c;\n    return if $sum < 0;\n    return\
    \ if $sum > $a + $c;\n    return if $sum == 0;\n    return 1 if $a + $b > $c &&\
    \ $a + $c > $b;\n    return 1 if $a > $b && ($a + $b + $c) == 0;\n    return 1\
    \ if $c > $b && $c > $a && ($a + $b + $c) == 0;\n    return 1;\n}", "    return\
    \ undef if ($a eq 0 || $b eq 0 || $c eq 0);\n    return undef if ($a eq $b ||\
    \ $a eq $c || $b eq $c);\n    my $s = (abs $a) > (abs $b) ? (abs $c) > (abs $a)\
    \ ? ($a - $c) > ($b - $a) ? ($a - $b) > ($c - $b) : ($a - $b) > ($c - $a) : ($a\
    \ - $c) > ($b - $a);\n    return $s ? 1 : 0;\n}", "    if ($a > $b && $a > $c)\
    \ {\n\treturn 1;\n    } elsif ($b > $a && $b > $c) {\n\treturn 1;\n    } elsif\
    \ ($c > $a && $c > $b) {\n\treturn 1;\n    } else {\n\treturn '';\n    }\n}",
  "    return $c <= $a + $b or $c <= $a + $b + $a or $c <= $a - $b - $c;\n}", "  \
    \  my($d, $e) = ($b+$c, $c-$a);\n    return if abs($d) == abs($e);\n    return\
    \ 1 if abs($d) == 90;\n    return '' if $d < 0;\n    return '1';\n}", "    if(abs($a\
    \ - $b) > abs($a - $c) || abs($a - $b) > abs($c - $b)) {\n\treturn 1;\n    }\n\
    \    return \"\";\n}", "    return 1 if $a + $b > $c;\n    return 1 if $c + $b\
    \ > $a;\n    return 0 if $a + $b == $c;\n    return 0 if $a + $b != $c;\n    \n\
    \    return 0 if $a - $b == $c;\n    return 0 if $a - $b != $c;\n    return 1\
    \ if $a - $b > $c;\n}", "    return \"\" unless ($a != $b and $a != $c);\n   \
    \ return \"\" unless ($b != $c);\n    \n    return 1 if ($a <= $b and $a <= $c);\n\
    \    return 1 if ($b <= $a and $b < $c);\n    return 1 if ($c <= $a and $c <=\
    \ $b);\n    return \"\";\n}", "    return if $a eq $b || $a eq $c || $b eq $c;\n\
    \    return if $a eq $c || $b eq $c || $c eq $a;\n    return $a + $b > $c ? 1\
    \ : \"\";\n}", "    my $d;\n    my $e = $a + $c;\n    my $f = $a + $b;\n    my\
    \ $g = $b + $c;\n    my $tmp;\n    if (($a < $b and $b < $c) or $a < $c and $b\
    \ < $d) {\n        $tmp = ${@{[$b]}[@{[$a]}[@{[$c]}[@{[$a]} > $b ? 1 : -1]}[0][0];\n\
    \        $tmp == ${@{[$a]}[@{[$c]}[@{[$a]} > $b ? 1 : -1]}[0][0]\n    }\n    else\
    \ {\n        $tmp = ${@{[$a]}[@{[$b]}[@{[$c]}[@{[$b]} > $c ? 1 : -1]}[0][0];\n\
    \        $tmp == ${@{[$b]}[@{[$a]}[@{[$c]} > $c ? 1 : -1]}[0][0]\n    }\n    if\
    \ ($tmp > $e){\n        $_[1] = 1;\n    }\n    else { \n        $_[1] = \"\";\n\
    \    }\n    return;\n}", "    \n    if($b <= $c && $b <= $a) {\n        return\
    \ 1;\n    }\n    elsif($c <= $a && $c <= $b) {\n        return 1;\n    }\n   \
    \ return \"\";\n}", "    return 1 if $a==$b and $b==$c or $a==$c and $b==$a or\
    \ $c==$a and $a==$c;\n    return \"\";\n}", "    return (1 if ($b > $c || ($b\
    \ == $c && $a == $b));\n}", "    my $l = abs($a-$b);\n    my $w = abs($a-$c);\n\
    \    my $h = abs($b-$c);\n    return $w > $h ? $l == $w ? \"1\" : \"0\" : $l ==\
    \ $h ? \"1\" : \"0\";\n}", "    return 1 if $c > $a + $b || $c < $a - $b;\n  \
    \  return \"\" unless ($c < $a + $b) || ($c > $a - $b);\n    my $is_triangle_right_angled\
    \ = 1;\n    my $a = $a - $c;\n    my $b = $b - $c;\n    my $c = $c - $c;\n   \
    \ $c < 0 or return \"\";\n    while ($a > 0 && $b > 0) {\n        if ($a * $b\
    \ < $c) {\n            $a -= 1;\n            $b -= 1;\n        } else {\n    \
    \        $b -= 1;\n        }\n    }\n    return \"\" if $a == 0 && $b == 0 &&\
    \ $c == 0;\n    $a * $b < $c and $a = $a - 1;\n    $b * $c < $a and $b = $b -\
    \ 1;\n    $c * $a < $b and $c = $c - 1;\n    $is_triangle_right_angled = $a >\
    \ 0 && $b > 0 && $c > 0;\n    return $is_triangle_right_angled;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nIt's very useful to have a simple program that generates\
    \ test cases to compare against actual solutions. Thanks for pointing it out.\n\
    <|/ c |>\n<| a dscore=1 |>\nThe simplest way to check if a given triangle is right\
    \ angle or not is to check with three sides. \nIf the sum of any two sides is\
    \ greater than the third side, then the triangle is not an right angle. \n<code>\n\
    \ def is_right(side1,side2,side3):\n    return ((side1 + side2) < side3)\n</code>\n\
    <|/ a tags=math,python,geometry |>\n<| c |>\nWhat about `is_right(1,2,2)` ?\n\
    <|/ c |>\n<| c |>\nIn that case, a triangle is right. But a triangle is not right\
    \ if it is isosceles i.e. not right with respect to its third side.\n<|/ c |>\n\
    <| a dscore=1 |>\nYou could also check whether the distance from the diagonal\
    \ to the given points is at least as long as the angles of the two opposite sides.\n\
    Example:\n<code>\nis_right_triangle((3,4,5), (2,1,1))", "    # Check if side a\
    \ is greater than side b or b is greater than c\n    if ($a > $b or $b > $c) {\
    \ \n        return 1;\n    }\n    elsif ($a > $c or $a > $b) { \n        return\
    \ 1;\n    }\n    # Check if side a is greater than side b or b is greater than\
    \ c\n    return 1;\n}\n</code>\n<|/ a tags=math,python,algorithm |>\n<| c |>\n\
    This is good but only works for a few special cases. For example, right_angle_triangle(3,4,5)\
    \ is incorrect.\n<|/ c |>\n<| a dscore=3 tags=math,python,algorithm |>\n<code>\n\
    def triangle_area(base, height, angle):\n    a = base\n    b = height\n    c =\
    \ angle", "    return '' if $a == $b == $c;", "    return 1 if ($a > $c || $b\
    \ > $c || $a > $b);\n    return \"\";\n}\n</code>\n<|/ a tags=perl,regex |>\n\
    <| c |>\nYour code will pass `right_angle_triangle(4, 2, 5)` but fail `right_angle_triangle(7,\
    \ 4, 1)`. See [this demo](http://ideone.com/qVw8Xh).\n<|/ c |>\n<| c |>\n: Agreed.\
    \ I was using regex as a fun exercise.\n<|/ c |>\n<| c |>\nI'm sure there are\
    \ multiple ways to approach this problem. However the answer to the OP's question\
    \ was that regex was the wrong tool for the job. Although regex is not always\
    \ the right tool.\n<|/ c |>\n<| c |>\n: I disagree that regex is the wrong tool.\
    \ The OP specifically asked for regex because it seems like the best solution.\
    \ Please, don't demand that regex is the right tool for everything. Regex is good\
    \ for many things, but not many other things.\n<|/ c |>\n<| c |>\n: My point was\
    \ that it's not a good tool for many things but it's good for the OP's problem.\n\
    <|/ c |>\n<| a tags=perl,regex |>\nThis is not the best solution, but it is pretty\
    \ readable:\n<code>\nuse 5.010;\nuse strict;\nuse warnings;", "    \n    # Special\
    \ case\n    return 1 if $b==$c || (($a == $b && $b == $c) || ($a == $c && $c ==\
    \ $b));\n    \n    # If the lengths equal, it's a right angled triangle\n    return\
    \ '' if $a == $b || $a == $c;\n    \n    # Otherwise, it's a right angle triangle\n\
    \    return '' if $a>$b || $a>$c;\n    \n    # Otherwise, it's an equilateral\
    \ triangle\n    return '' if $a==$b;\n    \n    # Otherwise, we need to find whether\
    \ it's right angle triangle\n    return '' if $b > $c || $c > $a;\n    \n    #\
    \ Otherwise, it's an isosceles triangle\n    return '' if $a > $b or $a > $c;\n\
    }", "    ($a - $b) > ($c - $b) || ($a - $b) > ($c - $a) || ($a - $b) = ($c - $a)\
    \ || 0;\n    return 1 if $a + $b > $c + $a;\n    return 0;\n}", "    my $result;\n\
    \    if (($b - $a) eq ($c - $a))\n    {\n        $result = 1;\n    }\n    else\n\
    \    {\n        $result = 0;\n    }\n    return $result;\n}", "    if($a == $b\
    \ || $a == $c || $b == $c) {\n        return '';\n    }\n    \n    # http://mathworld.wolfram.com/Right-angledTriangle.html\n\
    \    $a = $a - $a % $b;\n    $b = $b - $b  % $c;\n    $c = $c - $c % $a;\n   \
    \ if($a > 0 && $a < $b && $a < $c) {\n        return \"right angled triangle\"\
    \n    }\n    if($b == $c) {\n        return \"equilateral triangle\";\n    }\n\
    \    if($b < 0) {\n        $c = -$c;\n    }\n    if($a < 0 && $a < $b && $a <\
    \ $c) {\n        return \"right angled triangle\";\n    }\n    if($a == 0) {\n\
    \        return \"isosceles triangle\";\n    }\n    if($c < 0) {\n        $b =\
    \ -$b;\n    }\n    if($a > 0 && $a < $b && $a < $c) {\n        return \"right\
    \ angled triangle\";\n    }\n    if($c > 0 && $b < $c && $b < $a) {\n        return\
    \ \"right angled triangle\";\n    }\n}", "    if ($b > $c && $b > $a) {\n    \
    \    return 1;\n    }\n    return '';\n}", "    return undef unless defined $a\
    \ and defined $b and defined $c &&\n                       $a != $b and $a !=\
    \ $c and $b != $c;\n    $c > $a and $a > $b and $a > $c or $c > $b and $b > $c\
    \ and $b > $a;\n}", "    my $result;\n    if( $a > $b ) {\n        if( $b > $c\
    \ ) {\n            $result = 0;\n        } else {\n            $result = 1;\n\
    \        }\n    } else {\n        if( $c > $a ) {\n            $result = 1;\n\
    \        } else {\n            $result = 0;\n        }\n    }\n    return $result;\n\
    }", "    return if abs($a - $b) >  abs($a - $c) || abs($a - $c) > abs($b - $c);\n\
    \    if ($a < $b) {\n        if ($a < $c) {\n            $a += 1;\n        }\n\
    \        else {\n            $c += 1;\n        }\n    }\n    else {\n        if\
    \ ($b < $c) {\n            $b += 1;\n        }\n        else {\n            $c\
    \ += 1;\n        }\n    }\n    return $a == $c || $b == $c;\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a |>\nI wrote this code for LeetCode OJ recently that uses Ruby's\
    \ built-in class Math#sqrt. My code is also very similar to the answers given\
    \ here.\n<code>\ndef isTriangle(a, b, c):\n    return (a**2 + b**2) <= c**2\n\
    </code>\n<|/ a dscore=1 tags=perl,python,algorithm |>\n<| c |>\n`(a**2 + b**2)\
    \ <= c**2` might not work as expected, see [this](http://stackoverflow.com/questions/15651641/what-is-the-minimum-and-maximum-real-number-that-ruby-can-represent-via-single-li/15651670#15651670)\
    \ question which uses `1e-10` as a limit for `a`, `b` and `c`\n<|/ c |>\n<| a\
    \ tags=perl,python,algorithm |>\n<code>\ndef isTriangle(a,b,c):\n    sum1= (a+b+c)//2\n\
    \    sum2= (a+c)//2\n    sum3= (b+c)//2\n    if (sum1==sum2 and sum2==sum3 and\
    \ sum3==a):\n        return True\n    else:\n        return False\n</code>\n<|/\
    \ a dscore=1 |>\n<| c |>\nThis only checks if triangles are equal by sides, not\
    \ if they form a right angled triangle\n<|/ c |>\n<| a |>\nThis is my implementation\
    \ in Python\n<code>\ndef isTriangle(a,b,c):\n    if a+b+c==0:\n        return\
    \ True\n    elif (a+b+c) < 0:\n        a,b,c=c,b,a\n    return abs(a*b*c)-abs((a+b+c)//2)\n\
    </code>\n<|/ a tags=perl,python,algorithm dscore=1 |>\n<| a |>\n<code>\ndef is_triangle(a,\
    \ b, c):\n    side1 = min(a, b, c)\n    side2 = max(a, b, c)\n    side3 = min(b,\
    \ c, a)\n    side4 = max(b, c, a)\n    return (side1 + side2 + side3 +", "   \
    \ my($c, $d, $a1, $a2, $b1, $b2, $c1);\n    if ($a != $b and $a != $c) {\n   \
    \     # right triangle when b is greater than c\n        return 0;\n    }", " \
    \   if($a > $c) {\n        return 1;\n    }\n    if($a < $b) {\n        if($b\
    \ > $c) {\n            return 1;\n        }\n        return 0;\n    }\n    if($b\
    \ > $c) {\n        if($a < $c) {\n            return 1;\n        }\n        return\
    \ 0;\n    }\n    return 0;\n}", "    ($a + $b + $c) == 180 or return(\"\");\n\
    \    return(1);\n}", '    my $is_right_angle = 0;', "    if($a eq $b and $a eq\
    \ $c){\n        return 1;\n    }\n    if($a eq $b or $a eq $c or $b eq $c){\n\
    \        return \"\";\n    }\n    if($a > $c or $c > $b){\n        return 1;\n\
    \    }\n    if($a > $b or $b > $c){\n        return \"\";\n    }\n    return 0;\n\
    }\n</code>\n<|/ a |>\n<| a tags=perl |>\nThe code in the accepted answer by is\
    \ very slow and memory intensive.  The accepted answer also had problems in edge\
    \ cases that would not otherwise arise.  Below is the code from my answer.\n<code>",
  "    my $ab = $b - $a;\n    my $ac = $c - $a;\n    return 1 if ($ab == $ac);\n \
    \   return \"\" if ($ab != $ac);\n    return $ab > $ac ? 1 : \"\";\n}", "    return\
    \ 1 if ($a > $b + $c && $b > $c + $a);\n    return 1 if ($a > $b + $c && $c >\
    \ $a + $b);\n    return 1 if ($b > $c + $a && $c > $a + $b);\n    return 1;\n}",
  "    my($s, $t, $u);\n    my($angle, $is_right_angle);\n    $s = $a - $b;\n    $t\
    \ = $c - $a;\n    $u = $b - $c;\n    $angle = atan2($u, $s);\n    if ($u < 0)\
    \ {\n        $angle = -$angle;\n    }\n    $is_right_angle = $angle == $t || $angle\
    \ == $s;\n    return $is_right_angle;\n}", "    return 1 if ($a + $b > $c);\n\
    \    return 1 if ($b + $c > $a);\n    return 1 if ($a + $c > $b);\n    return\
    \ \"\";\n}", "    my $is_right_angled = 1;\n    my $is_right_angle_or_90 = 1;\n\
    \    if ($a < $c or $c < $b or $b < $a) {\n        $is_right_angle_or_90 = 1;\n\
    \    } elsif ($b == $c or $a == $c or $b == $a) {\n        $is_right_angled =\
    \ 0;\n    } elsif ($a == $c or $b == $c) {\n        $is_right_angled = 0;\n  \
    \  } else {\n        $is_right_angle_or_90 = 0;\n    }\n    return $is_right_angled\
    \ ? 1 : \"\";\n}", "    \n    if ($a eq $b && $a eq $c) {\n        return $a;\n\
    \    } elsif ($b eq $c && $b eq $a) {\n        return $b; \n    } elsif ($c eq\
    \ $a && $c eq $b) {\n        return $c;\n    } else {\n        return \"NO\";\n\
    \    }\n}", "    \n    if ($a > $c) {\n\tif ($a > $b) { \n\t    return 1;\n\t\
    } elsif ($b > $c) {\n\t    return 0;\n\t}\n    } else {\n\tif ($b > $c) {\n\t\
    \    return 1;\n\t} elsif ($a > $c) {\n\t    return 0;\n\t}\n    }\n    return\
    \ '';\n}", "    if ($a + $b > $c) {\n        $a > $b ? $a > $c ? return 1 : print\
    \ \"$a is right angled triangle\" : print \"$c is right angled triangle\" : return\
    \ 1;\n    } else {\n        $b > $a ? $b > $c ? return 1 : print \"$b is right\
    \ angled triangle\" : print \"$c is right angled triangle\" : return 1;\n    }\n\
    }", "    \n    return 1 if $a > $b;\n    return 1 if $a > $c;\n    return 1 if\
    \ $b > $c;\n    return \"\";\n}", "    if ($a > $b && $a > $c) {\n        print\
    \ \"$a > $b and $a > $c\\n\";\n    } elsif ($b > $c && $b > $a) {\n        print\
    \ \"$b > $c and $b > $a\\n\";\n    } elsif ($c > $a && $c > $b) {\n        print\
    \ \"$c > $a and $c > $b\\n\";\n    } elsif ($a > $b) {\n        print \"$a > $b\\\
    n\";\n    } else {\n        print \"$a > $c or $b > $c\\n\";\n    }\n}", "   \
    \ return 1 if $a == $b and $a == $c;\n    my $r = sqrt($a ** 2 + $b ** 2);\n \
    \   return 1 if $r == $c or ($r == $a and not ($b == $c));\n    return \"\";\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for the solution, however, I was\
    \ looking for a solution that does not require the use of any packages. I apologize\
    \ for not stating this in the original post.\n<|/ c |>\n<| c |>\n: Your question\
    \ states *I only need to determine the area of a triangle in three separate lengths*,\
    \ implying that you already know `a`, `b`, and `c`; so `a`, `b`, and `c` are the\
    \ lengths of the three sides. Do you know anything about `a`, `b`, and `c`, or\
    \ are they all unknown? Please [edit] your question to add this information.\n\
    <|/ c |>\n<| c |>\n: Thank you. Your solution works well, however, I wanted to\
    \ avoid using any packages and was hoping for a solution without the use of a\
    \ package, though I do not believe it is possible without them.\n<|/ c |>\n<|\
    \ c |>\n: I don't understand your comment. Do you not know anything about a, b,\
    \ and c? What do `a`, `b`, and `c` represent? If all your variables are known,\
    \ why do you not know them all before you even get to the point where you decide\
    \ which of the 3 lengths is the longest?\n<|/ c |>\n<| c |>\n: I have posted a\
    \ solution that does not use any packages. You mentioned in your question that\
    \ you only need the area of a triangle. I am not sure if you want a solution that\
    \ includes the perimeter, or a solution that excludes the perimeter (but that\
    \ includes the area).\n<|/ c |>\n<| a |>\nJust to provide a different perspective,\
    \ this is a solution using only primitive math functions. \nThis solution does\
    \ not take into account the fact that the lengths of the sides are unknown. \n\
    <code>\ndef triangle_area(side1, side2, side3):\n    \"\"\"\n    Calculates the\
    \ area of a triangle given sides lengths.", "    \n    my $ans = $a >= $b && $a\
    \ >= $c && $b >= $c ? 1 : 0;\n    \n    return $ans;\n}", "    return 1 if $a\
    \ + $b > $c && $a + $c > $b || $a + $b < $c && $a + $c < $b;\n    return \"\"\
    ;\n}", "    return 0 unless $a > $b;\n    return 0 unless $c > $b;", "    return\
    \ '' unless $a > $b || $a > $c || $b > $c;\n    \n    if ($a > $b) { $a > $c }\n\
    \    elsif ($a > $c) { $b > $c }\n    else { $a > $c }\n}", "    $a==$b?$a==$c?\n\
    \        ($a < $b)?\n            (1) :\n            (0) :\n        (($a > $c)?\n\
    \            (1) :\n            (0) ):\n        (0);\n}", '    my ($p1, $p2, $p3)
    = ($a, $b, $c);', "    if($a > $b || $a > $c) { # a must be greater than b and\
    \ a\n        if($b > $c) {\n            return 1;\n        } elsif($c > $b) {\n\
    \            return 1;\n        } elsif($c > $a) {\n            return 1;\n  \
    \      }\n    } elsif ($b > $c) {\n        return 1;\n    }\n}", "    $a = $a\
    \ > $b ? $a : $b;\n    $a = $a > $c ? $a : $c;\n    $b = $b > $c ? $b : $c;\n\
    \    $c = $c - $a + $b - $a < 0 ? $c : ($a - $b - $c) / 2;\n    $c = $a > $c ?\
    \ $a : $c;\n    $b = $b > $c ? $b : $c;\n    return $c > $b ? 1 : '';\n}", " \
    \   return '' if ($a + $b > $c);\n    return '' if ($a + $b > $c || $a + $c >\
    \ $b);\n    return '1' if ($a + $c > $b);\n}", "    my($l1, $l2, $l3) = ($a -\
    \ $b, $c - $a, $b - $c);\n    my($s11, $s22, $s33) = (\"==\", \">=\", \"<=\");\n\
    \    return if ($l1 == 0); # triangles are always right angled\n    return if\
    \ ($l2 == 0); # triangles are always right angled\n    return if ($l3 == 0); #\
    \ triangles are always right angled\n    return if ($s11 eq $s22 eq $s33);\n \
    \   if ($l1 eq $l2 eq $l3) {\n        my $d = $l1 + $l2 + $l3;\n        return\
    \ if ($d <= 1);\n    }\n    # sides parallel to x axis or y axis\n    if ($s11\
    \ eq $s22) {\n        # case 1: sides parallel to x axis\n        if ($l2 eq $l3)\
    \ {\n            # case 1: triangles are right angled\n            return 1;\n\
    \        }\n        # case 2: sides parallel to y axis\n        return '';\n \
    \   }\n    # sides parallel to y axis or x axis\n    if ($s11 eq $s33) {\n   \
    \     # case 1: sides parallel to y axis\n        return '';\n    }\n}", "   \
    \ my($c2, $a2, $a1, $b1, $b2, $a3, $a4, $b4) = $a * $a + $b * $b + $c * $c;\n\
    \    my($d1, $d2, $d3) = $b2 - $a2, $b4 - $a4, $b1 - $a1;", "    return 1 if $a\
    \ == $b or $a == $c || $b == $c;\n}", "    if ($b > $a && $c > $a) {\n       \
    \ if ($b > $c) {\n            return 1;\n        } else {\n            return\
    \ 0;\n        }\n    }\n    else {\n        return 0;\n    }\n}", "    if($a <=\
    \ 0 || $b <= 0 || $c <= 0){\n        return \"\";\n    }\n    if($a == $b || $a\
    \ == $c){\n        return \"R\";\n    }\n    if($b == $c){\n        return \"\
    L\";\n    }\n    if($c > $a + $b){\n        return \"R\";\n    }\n    return \"\
    L\";\n}", "    ($a + $b + $c) == 0 || \n        (abs($a - $b) + abs($a - $c) +\
    \ abs($c - $b)) == 0;\n}", "    return unless (defined $a);\n    return unless\
    \ (defined $b);\n    return unless (defined $c);\n    return 1 if ($b <= $c &&\
    \ $a <= $c) || ($b <= $a && $c <= $a);\n    return 0 if ($a == $b) || ($b == $c);\n\
    \    return 0 if ($a == $c);\n    return 1 if ($a > $b && $b > $c);\n    return\
    \ 1 if ($a < $b && $b < $c);\n    return 1 if ($a > $c && $b > $c);\n    return\
    \ 0 if ($a < $c && $b < $c);\n    return 1;\n}", "    \n    my $s = ($a < $b)\
    \ ? \"a\" : \"b\";\n    my $t = $a <  $c ? \"b\" : \"c\";\n    my $u = $a <  $b\
    \ ? \"a\" : \"b\";\n    my $v = ($a <  $c) ? \"c\" : \"b\";\n    \n    my $a =\
    \ sqrt(pow($a,2)+pow($b,2)+pow($c,2));\n    my $b = sqrt(pow($a,2)+pow($t,2));\n\
    \    my $c = sqrt(pow($a,2)+pow($u,2));\n    \n    if ($b == $c)\n    {\n    \
    \    return 1;\n    }\n    elsif ($a == $b)\n    {\n        return 1;\n    }\n\
    \    elsif ($a == $c)\n    {\n        return 1;\n    }\n    elsif ($t == $u)\n\
    \    {\n        return 1;\n    }\n    elsif ($s == $v)\n    {\n        return\
    \ 1;\n    }\n    else\n    {\n        return 0;\n    }\n}", "    if($a + $b >\
    \ $c) {\n        return 1;\n    } else {\n        return \"\";\n    }\n}", " \
    \   my ($a1, $a2, $a3, $b1, $b2, $b3, $c1, $c2, $c3) = @_;\n    \n    # calculate\
    \ the area of triangle\n    $a1 += $a2 * $c3;\n    $a2 += $a3 * $c2;\n    $a3\
    \ += $a1 * $c1;\n    $b1 += $b2 * $c3;\n    $b2 += $b3 * $c2;\n    $b3 += $b1\
    \ * $c1;\n    $c1 += $c1 * $a2;\n    $c2 += $c2 * $a3;\n    $c3 += $c3 * $a1;\n\
    \    \n    return \"\" if not ($a1 + $b1 + $c1 == 0 && $a2 + $b2 + $c2 == 0 &&\
    \ $a3 + $b3 + $c3 == 0);\n    \n    return $a1 * $b2 * $c3 > 0 ? \"1\" : \"0\"\
    \n}", "    \n    my $d = ($a + $b + $c);\n    if ($d <= 1){\n        return 0;\n\
    \    }\n    \n    if ($a eq $b || $b eq $c || $c eq $a){\n        return 1;\n\
    \    }\n    \n    if ($a < $b && $a < $c && $c < $d){\n        return 1;\n   \
    \ }\n    \n    if ($c < $a && $c < $b && $a < $d){\n        return 1;\n    }\n\
    \    \n    if ($c < $b && $c < $a && $b < $d){\n        return 1;\n    }\n   \
    \ \n    if ($c < $b && $c < $a && $c < $d){\n        return 1;\n    }\n    \n\
    \    if ($a < $c && $a < $b && $c < $d){\n        return 1;\n    }\n    \n   \
    \ if ($a < $b && $a < $c && $c < $d){\n        return 1;\n    }\n    \n    return\
    \ \"\";\n}", "    \n    if ($a <= 0 || $b <= 0 || $c <= 0){\n        return \"\
    \";\n    }\n    \n    # Triangle is right-angled if it is a right angle or 180\
    \ degree.\n    # Otherwise, it is left-angled.\n    return 1 if ($a > $b && $a\
    \ > $c || $a > $c && $a > $b);\n    return 1 if ($b > $c && $b > $a || $b > $a\
    \ && $b > $c);\n    return 1;\n}", "    return 1 if ($a eq $b and $a eq $c) or\
    \ ($b eq $a and $b eq $c) or ($c eq $a and $c eq $b);\n    return \"\"\n}", " \
    \   if ($a > $b) {\n        my $tmp = $a;\n        $a = $b;\n        $b = $tmp;\n\
    \    }\n    if ($b > $c) {\n        my $tmp = $b;\n        $b = $c;\n        $c\
    \ = $tmp;\n    }\n    if ($a > $b) {\n        $a = $b;\n    }\n    if ($b > $c)\
    \ {\n        $b = $c;\n    }\n    my $deg = 360-abs($a - ($a*cos($b/$c)));\n \
    \   if ($deg == 0){\n        return $a != $b;\n    } \n    else {\n        return\
    \ $deg > 180;\n    }\n}", "    return '' if $a + $b == $c || $a + $c == $b ||\
    \ $b + $c == $a;\n    return '' if $a == $c || $b == $c || $c == $a;\n    return\
    \ '' if $a + $b > $c || $c + $b > $a || $a + $c > $b || $c + $a > $a;\n    return\
    \ '' if $a > $b && $b > $c || $a > $c && $c > $b || $b > $c && $a > $a;\n    return\
    \ '' if $a < $b && $b < $c || $a < $c && $c < $b || $b < $c && $a < $a;\n    return\
    \ '' if $a < $b || $b < $c || $c < $a;\n    return '0' if $a > $b;\n    return\
    \ '0' if $a < $b;\n    return '' if $a > $c;\n    return '0' if $a < $c;\n   \
    \ return '' if $b > $c;\n    return '0' if $b < $c;\n    return '' if $c > $a;\n\
    \    return '0' if $c < $a;\n    return '' if $a != $b;\n    return '' if $a !=\
    \ $c;\n    return '' if $b != $c;\n    return '1';\n}", "    return 1 if $a +\
    \ $b > $c && $a + $c > $b;\n    return 1 if $b + $c > $a && $b + $a > $c;\n  \
    \  return 1;\n}", "    return $a eq $c || $b eq $c || $a eq $b;\n}\n</code>\n\
    <|/ a dscore=3 |>\n<| a tags=perl dscore=1 |>\n<code>", "    if($a + $b > $c){\n\
    \        return \"$b $c $a\";\n    } elsif($a + $c > $b){\n        return \"$a\
    \ $b $c\";\n    } elsif($b + $c > $a){\n        return \"$b $c $a\";\n    } else\
    \ {\n        return \"\";\n    }\n}", "    my $deg;\n    if ($a eq $b) {\n   \
    \     $deg = 180;\n    }\n    if ($a eq $c) {\n        $deg = 180;\n    }\n  \
    \  if ($b eq $c) {\n        $deg = 90;\n    }\n    if ($a > $b) {\n        if\
    \ ($a > $c) {\n            $deg = 180 - $deg;\n        } else {\n            $deg\
    \ = 90 - $deg;\n        }\n    }\n    if ($a < $b) {\n        if ($a < $c) {\n\
    \            $deg = 180 - $deg;\n        } else {\n            $deg = 90 - $deg;\n\
    \        }\n    }\n    my $result;\n    if ($deg == 90 && $a > $c) {\n       \
    \ $result = 1;\n    } elsif ($deg == 180 && $b > $c) {\n        $result = 1;\n\
    \    } elsif ($deg == 180 && $a == $c) {\n        $result = 1;\n    } else {\n\
    \        $result = 0;\n    }\n    return $result;\n}", "    \n    return if ($a\
    \ + $b + $c != $a * $a + $b * $b + $c * $c);\n    \n    # right angle\n    my\
    \ $d = sqrt($a * $a + $b * $b + $c * $c);\n    \n    return 1 if $a == $c && $b\
    \ == $d;\n    \n    return 1 if $a == $b && $c == $d;\n    \n    return 1;\n}",
  "    return (\n\t$a eq $b and $c eq $b or\n\t$a eq $c and $b eq $c or\n\t$a eq $b\
    \ and $c eq $c or\n\tnot (\n\t\t($a eq $b and $c eq $b) or\n\t\t($a eq $c and\
    \ $c eq $b) or\n\t\t($a eq $b and $c eq $c)\n\t)\n\t);\n}", "    my $d = $a +\
    \ $b + $c;\n    return 1 if $a > $b && $a > $c && $c > $b;\n    return 1 if ($a\
    \ == $b) || ($d == $a) || ($d == $b);\n    return 1 if ($a == $c) || ($d == $c)\
    \ || ($d == $a);\n    return 1 if ($b == $c) || ($d == $b) || ($d == $c);\n  \
    \  return 1;\n}", "    return '' unless $a > $b && $a > $c;\n    return '' unless\
    \ $b > $c;\n    return 1 if $a == $b and $b == $c;\n    return 1 if $a > $c and\
    \ $b > $c;\n    return ''\n}", "    return 1 if $a * $b > $c * $c;\n    return\
    \ \"\" if $a * $b < $c * $c;\n}", "    return 1 if $a > $b && $a > $c;\n    return\
    \ 1 if $b > $c && $b > $a;\n    return \"\";\n}\n</code>\n<|/ a tags=perl,algorithm\
    \ dscore=4 |>\n<| c |>\nWhy don't you just return true or false from your subroutine?\n\
    <|/ c |>\n<| a tags=perl,algorithm |>\nPerl code:\n<code>", "    return 1 if ($a\
    \ + $b > $c);\n    return 1 if ($b + $c > $a);\n    return 1 if ($a + $c > $b);\n\
    \    return \"\";\n}", "    \n    my $right_angles = $b <= $c ? $a : $b;\n   \
    \ $right_angles = $a <= $c ? $b : $a;\n    \n    if ($b <= $c && $b <= $a && $c\
    \ <= $a) {\n        return \"Right Triangle\";\n    } elsif ($b <= $c && $b <=\
    \ $a && $c <= $b) {\n        return \"Right Triangle\";\n    } elsif ($b <= $c\
    \ && $b <= $a && $c <= $c) {\n        return \"Right Triangle\";\n    } else {\n\
    \        return \"\";\n    }\n}", "    return \"\" unless $a > $b and $a > $c;\n\
    \    return \"\" unless $b > $a and $b > $c;\n    return \"\" unless $c > $a and\
    \ $c > $b;", "    my $d = $a - $b;\n    my $e = $c - $b;\n    my $f = $a - $c;\n\
    \    return \"\" unless abs($d) == abs($e);\n    return \"\" unless abs($d) ==\
    \ abs($f);\n    return 1 if ($d == $e && $d == $f);\n    return \"\" if ($d ==\
    \ $e || $d == $f);\n    return 1 if ($e == $f && $e == $d);\n    return \"\" if\
    \ ($e == $f || $e == $d);\n    return 1 if ($a == $b or $a == $c or $b == $c or\
    \ $a eq $c );\n    return 1;\n}", "    my $ab = $a - $b;\n    my $ac = $c - $a;\n\
    \    my $bc = ($b - $c) * $ab / $ac;\n    my $a2 = $ab * $ab + $ac * $ac;\n  \
    \  if ($a2 != 0) {\n        return $ab / $a2 > 0.5;\n    } else {\n        return\
    \ 0;\n    }\n}\n</code>\n<|/ a |>\n<| c |>\nYour `is_right_angle` test fails for\
    \ input like `$a = b = 2`\n<|/ c |>\n<| c |>\n- Yes. I edited it to use `atan2`.\
    \ My `is_right_angle` was designed to handle that case, but will now return `0`\
    \ for the other cases.\n<|/ c |>\n<| c |>\nThe first test also fails if $a2 and\
    \ $ab are equal.\n<|/ c |>\n<| c |>\n- Yes. I fixed it. Thanks for the catch.\n\
    <|/ c |>\n<| a tags=math,geometry,trigonometry,algorithm,perl |>\n<code>", " \
    \   if(($a <= $b) && ($b <= $c)) {\n        if(($a >= 0) && ($b >= 0) && ($c >=\
    \ 0)) {\n            return 1;\n        }\n    } elsif(($a >= 0) && ($b >= 0)\
    \ && ($c <= 0)) {\n        return \"\";\n    } elsif(($a <= 0) && ($b >= 0) &&\
    \ ($c >= 0)) {\n        return \"\";\n    }\n    return \"\";\n}", "    $a >=\
    \ $b ? $a > $c : $c > $b;\n}", "    return 1 if ($a > $b and $a > $c) or ($a >\
    \ $b and $c > $a) or ($c > $b and $a > $c);\n    return '';\n}\n</code>\n<|/ a\
    \ dscore=0 tags=perl,arrays |>\n<| a |>\n<code>", "    my $d = $b - $c;\n    my\
    \ $s= $a > $c ? 1 : -1;\n    my $t = $c > $b ? 1 : -1;\n    my $a = $a > $b ?\
    \ $a : $b;\n    my $b = $c > $a ? $c : $a;\n    $d = $d * $d;\n    if ($d < 0\
    \ ) {\n\t$s = $s * -1;\n\t$t = $t * -1;\n    }\n    return $s * ($b - $a) == $d\
    \ * ($c - $b);\n}", "    my ($sa, $sb, $sc) = split(//, $a, $b, $c);\n    if ($sc\
    \ >= 0) {\n        my $x = $sa + $sb;\n        my $y = $sa - $sb + $sc;\n    \
    \    my $z = $sa - $sb - $sc;\n        if ($x * $x + $y * $y + $z * $z < 0) {\n\
    \            return 1;\n        }\n    }\n    \n    return \"\";\n}", "    return\
    \ $a eq $c || $b eq $c || $b eq $a || $a eq $b;\n}", "    if ($b < $c) {\n\tif\
    \ ($a == $c) {\n\t    return 1;\n\t} else {\n\t    return 0;\n\t}\n    } else\
    \ {\n\treturn 0;\n    }\n}", "    return '' unless $a < $b and $a < $c;\n    return\
    \ '' unless $b < $c and $b < $a;\n    if ($a eq $b || $a eq $c || $b eq $c) {\n\
    \        return 1;\n    } else {\n        return 0;\n    }\n}", "    return 1\
    \ if(abs($b - $c) < $a && abs($a - $c) < $a);\n    return \"\";\n}", "    if ($a\
    \ > $c) {\n        if ($a > $b) { $c = $b; $b = $a; $a = $c };\n    }\n    elsif\
    \ ($b > $c) {\n        if ($b > $a) { $c = $a; $a = $b; $b = $c };\n    }\n  \
    \  return $a == $b == $c;\n}", "    my $s = $a <=> $b;\n    $s = $s eq 0 ? $a\
    \ <=> $c : $s eq 0 ? $c <=> $b : $a <=> $c;\n    return $a == $c || $s == 0 or\
    \ $s == 1 or $s == 2;\n}", "    # check input values\n    die \"Invalid triangle\
    \ sides $a, $b and $c\" unless $a <= $b <= $c;\n    # check equilateral triangle\n\
    \    return \"\" unless $a != $c || $b != $c;\n    # check equilateral triangle\n\
    \    return \"\" unless $a == $b;\n    # check equilateral triangle\n    return\
    \ \"\" unless $a == $c || $b == $c;\n    # check angle\n    my $theta = $c < $b\
    \ ? $c : $b;\n    return \"\" unless $theta = ($theta < 180 and $theta > 270)\
    \ ? 1 : \"\";\n    return 1\n}", "    \n    return \"\" if $b <= $a || $c <= $b;\n\
    \    \n    if ($a == $b) {\n        \n        if ($c == $a) {\n            return\
    \ \"1\"; # right-angled triangle\n        } elsif ($c > $b) {\n            return\
    \ \"0\"; # a right angle triangle\n        }\n    }\n    \n    return \"0\"; #\
    \ not a right angle triangle\n}", "    my $a1 = $a < $b ? $a : $b;\n    my $b1\
    \ = $b < $c ? $b : $c;\n    my $c1 = $c < $a ? $c : $a;\n    \n    return $c1\
    \ > ($a1 + $b1) ? ($c1 > $b1 ? \"1\" : \"0\") : ($c1 > $a1 ? \"1\" : \"0\");\n\
    }", "    if ( $a + $b > $c ) {\n        $b - $c; \n    } else {\n        $a -\
    \ $c;\n    }\n}\n</cell>\n<cell>\n%%bash\ncat ./examples/data/iris.data\n</cell>\n\
    <cell>\niris_data = pd.read_csv(\"./examples/data/iris.data\",\n             \
    \          header=None, \n                       names=['sepal_length', 'sepal_width',\
    \ 'petal_length', 'petal_width',\n                              'class'])\n</cell>\n\
    <cell>\niris_data.tail()\n</cell>\n<cell>\niris_data.describe()\n</cell>\n<cell>\n\
    iris_data.info()\n</cell>\n<cell>\niris_data['class'].unique()\n</cell>\n<cell>\n\
    iris_data.dtypes\n</cell>\n<cell>\niris_data['class'] = iris_data['class'].apply(lambda\
    \ x : 0 if x < 0 else 1)\n</cell>\n<cell>\niris_data['class'].unique()\n</cell>\n\
    <cell>\niris_data.describe()\n</cell>\n<cell>", "    my($s1, $s2, $s3) = ($a,\
    \ $b, $c);\n    my($s1, $s2, $s3, $s4) = ($b, $c, $a);\n    my($s1, $s2, $s3,\
    \ $s4) = ($c, $a, $b);", "    my $rad = $a > $b ? $a - $b : $b - $a;\n    my $ang\
    \ = $c > $a ? $c - $a : $b - $c;\n    return 1 if ($rad > 180 && $ang > 180);\n\
    \    return '';\n}\n</code>\n<|/ a tags=algorithm,perl,math |>\n<| a dscore=3\
    \ |>\nThe following function will return a hash with the angles (a) and the lengths\
    \ (l) for each triangle. It also returns the angles which have a length more than\
    \ half the smallest side:\n<code>\nuse strict;\nuse warnings;", "    return 1\
    \ if $a + $b > $c;\n    return 1 if $a + $b > 2 * $c;\n    return 1 if $a + $b\
    \ > 3 * $c;\n    return 0 if $a + $b == $c;\n    return 0 if $a + $b == 2 * $c;\n\
    \    return 0 if $a + $b == 3 * $c;\n    return 0;\n}", "    \n    # Triangle\
    \ is right if any one of {a, b, c} is a right angle.\n    # Triangle is right\
    \ if all three sides are equal.\n    # Triangle is right if sides are on same\
    \ side of x axis.\n    # Triangle is right if sides are on same side of y axis.\n\
    \    # Triangle is right if sides are on same side of z axis.\n    \n    if ($a\
    \ eq 90 && $b eq 90 && $c eq 90) {\n        return 1;\n    } elsif ($a == $b &&\
    \ $a == $c) {\n        return 0;\n    } elsif ($a == $b or $a == $c or $b == $c)\
    \ {\n        return 1;\n    }\n}", "    my $d = ($a + $b + $c) / 2;\n    return\
    \ 0 if $d > $a - $b || $d > $c - $a;\n    return 1 unless is_angle_right_triangle($a,\
    \ $b, $c);\n    return 1;\n}", "    my($triangle_side) = $a > $b ? $a : $b;\n\
    \    my($side) = $c > $triangle_side ? $c : $triangle_side;", "    \n    my $ret\
    \ = 0;\n    if ($b <= $c) {\n        $ret = 1;\n    } elsif ($b <= $a) {\n   \
    \     $ret = ($a <= $c) ? 1 : 0;\n    } elsif ($c <= $a) {\n        $ret = ($a\
    \ <= $b) ? 1 : 0;\n    }\n    \n    return $ret;\n}", "    my $ans = ($a > $b\
    \ and $a > $c) ? 1 : 0;\n    $ans = $ans or ($a == $b and $a == $c) ? 1 : ($a\
    \ < $b and $a < $c) ? 0 : $ans;\n    return $ans;\n}", "    $a = $a % 4; \n  \
    \  $b = $b + $a + 1;\n    $c = $c + $a + 1;\n    if ($a <= $b and $a <= $c) {\n\
    \        if ($b > $c) {\n            print STDOUT \"1\\n\";\n        } else {\n\
    \            print STDOUT \"0\\n\";\n        }\n    } elsif ($b <= $c) {\n   \
    \     print STDOUT \"0\\n\";\n    } else {\n        print STDOUT \"1\\n\";\n \
    \   }\n}\n</code>\n<|/ a |>\n<| a |>\nI hope this is useful for someone. \nHere\
    \ is my solution\n<code>\nfunction checkIfRightAngleTriangle {\n    my ($a, $b,\
    \ $c) = @_;\n    $a = $a % 4; \n    $b = $b + $a + 1;\n    $c = $c + $a + 1;\n\
    \    if ($a <= $b and $a <= $c) {\n        if ($b > $c) {\n            return\
    \ 1;\n        } else {\n            return 0;\n        }\n    } elsif ($b <= $c)\
    \ {\n        return 0;\n    } else {\n        return 1;\n    }\n}\n</code>\n<|/\
    \ a tags=perl,python,c,python-3.x dscore=1 |>\n<| a |>\n<code>\ndef is_right_angled_triangle(a,\
    \ b, c):\n    return (a*a + b*b == c*c) or (a*b + b*c == c*a) or (a*c + b*a ==\
    \ c*b)\n</code>\n<|/ a dscore=1 tags=perl,python,c,python-3.x |>\n<| a dscore=0\
    \ tags=perl,python,c,python-3.x |>\nUsing Mod function \n<code>\ndef is_right_angled_triangle(a,\
    \ b, c):\n    return a * b * c + a * b + b * c == a * c\n</code>\n<|/ a |>\n<|\
    \ a tags=perl,python,c,python-3.x |>\n<code>", "    my $l = $a - $b;\n    my $h\
    \ = $b - $c;\n    my $s = $a - $c;\n    my $a1 = sqrt(($a ** 2 + $b ** 2));\n\
    \    my $b1 = sqrt(($b ** 2 + $c ** 2));\n    my $c1 = sqrt(($c ** 2 + $a ** 2));\n\
    \    my $a2 = sqrt(($a ** 2 + $s ** 2));\n    my $b2 = sqrt(($b ** 2 + $s ** 2));\n\
    \    my $c2 = sqrt(($c ** 2 + $s ** 2));\n    my $d = $a1 * $b2 - $a2 * $b1;\n\
    \    my $e = $a1 * $c2 - $a2 * $c1;\n    my $f = $a2 * $c1 - $a1 * $c2;\n    my\
    \ $g = $b1 * $c2 - $b2 * $c1;\n    my $h = $b1 * $c2 - $b2 * $c1;\n    my $s =\
    \ $a2 * $c1 - $a1 * $c2;\n    my $t = $b1 * $c2 - $b2 * $c1;\n    $e = ($e > 0)\
    \ ? 1 : 0;\n    $f = ($f > 0) ? 1 : 0;\n    $g = ($g > 0) ? 1 : 0;\n    $h = ($h\
    \ > 0) ? 1 : 0;\n    my $ret = $e * $g * $h + $f * $g * $s - $d * $g * $s + $d\
    \ * $t * $h - $e * $t * $s;\n    if ($ret < 0) {\n        $ret = - $ret;\n   \
    \ }\n    return $ret;\n}", "    my ($s) = ($a + $b <= $c || $b + $c <= $a);\n\
    \    if ($s) {\n        return 1;\n    }\n    return '';\n}", "    my($l1, $l2,\
    \ $l3) = $a * $a * $a + $b * $b * $b + $c * $c * $c;\n    my($r1, $r2, $r3) =\
    \ $a * $a * $a + $b * $b * $c + $c * $c * $b;", "    return 1 if ($a + $b > $c\
    \ or $a + $c > $b or $b + $c > $a);\n    return \"\";\n}", "    my($s, $t, $u);\n\
    \    my($h1, $h2, $h3);\n    \n    $s = sqrt(($a*$a)+($b*$b)+($c*$c));\n    $t\
    \ = sqrt(($b*$b)-($a*$a));\n    $u = sqrt(($c*$c)-($a*$a));\n    \n    if ($s\
    \ == $t) {\n        if ($s == $u) {\n            $h1 = sqrt(($a*$a)+($b*$b)+($c*$c));\n\
    \            return $h1 == 180 ? 1 : \"\";\n        }\n        $h2 = sqrt(($b*$b)-($a*$a));\n\
    \        return $h2 == 180 ? 1 : \"\";\n    }\n    if ($t == $u) {\n        $h3\
    \ = sqrt(($c*$c)-($a*$a));\n        return $h3 == 180 ? 1 : \"\";\n    }\n   \
    \ \n    if ($s > $t) {\n        $h1 = sqrt(($a*$a)+($b*$b)+($c*$c));\n       \
    \ return $h1 == 180 ? 1 : \"\";\n    }\n    \n    $h2 = sqrt(($b*$b)-($a*$a));\n\
    \    return $h2 == 180 ? 1 : \"\";\n}\n</cell>\n<cell>", "    $c > $a or $c >\
    \ $b or $c > $a or $c > $b or $c > $a or $c > $b;\n}", "    my $d = $a + $b +\
    \ $c;\n    if ($d == 0 || $d == 360) {\n        return 1;\n    }\n    return if\
    \ $b == 0 || $a == 0 || $c == 0 || $d == 0;\n    return if $a > $b || $b > $c\
    \ || $c > $d;\n    \n    if ($a == $b and $a > $c) {\n        return 1;\n    }\n\
    \    if ($a == $c and $b == $c) {\n        return 1;\n    }\n    if ($a == $b\
    \ and $b == $c) {\n        return 1;\n    }\n    \n    if ($a == $b and $b ==\
    \ $c) {\n        return 1;\n    }\n    \n    if ($a == $c and $b == $c) {\n  \
    \      return 1;\n    }\n    \n    if ($a == $b) {\n        return 0;\n    }\n\
    \    \n    if ($b == $c) {\n        return 0;\n    }\n    \n    if ($a == $c)\
    \ {\n        return 0;\n    }\n    \n    if ($b == $c) {\n        return 0;\n\
    \    }\n    \n    return 0;\n}", "    my $ans = $a <= $b and $a <= $c; # true\
    \ if both a and b and c are <= 90\n    return $ans if $ans;                # if\
    \ true, return true\n    return $a < $b and $a < $c or $a > $b and $a > $c or\
    \ $a == $b || $a == $c;\n}\n</code>\n<|/ a tags=perl |>\n<| c |>\n: Please note\
    \ that I updated the code to eliminate two of the `if` statements.  Also, please\
    \ note that I did not test the code.  I only wrote it down and added comments.\n\
    <|/ c |>\n<| c |>\nThanks. And I missed that two if statements.\n<|/ c |>\n<|\
    \ a tags=perl |>\nI wrote a functional Perl solution using Lingua::Roman::Perl\
    \ to do the work, and to allow for greater control over the input. This version\
    \ allows you to specify how many of each of the 4 sides you want, and whether\
    \ you consider a triangle to contain all the same number of each, or just any\
    \ number of each. Here is a one-liner that does this:\n<code>\nperl -MLingua::Roman::Perl\
    \ -e 'print Lingua::Roman::Perl::triangle( 4, 1 ), \"\\n\"'\n</code>\nor equivalently\n\
    <code>\nperl -MLingua::Roman::Perl -e 'print Lingua::Roman::Perl::triangle( 4,\
    \ 1 )->triangle(), \"\\n\"'\n</code>\nThis gives the following output:\n<code>\n\
    4\n</code>\nNow let's see how to make it take in arguments. First, we will change\
    \ the prototype declaration line to include the parenthesis:\n<code>", "    my\
    \ $r = $b - $c;\n    $r > 0 && $r < 180 \n       or $r == 90 && $b > $c\n    \
    \   or $r == 90 && $b == $c && $a > $c;\n}\n</code>\n<|/ a tags=perl,algorithm\
    \ dscore=2 |>\n<| c |>\nThanks for your answer. Could you please provide an explanation\
    \ as to how it works?\n<|/ c |>\n<| c |>\nI've provided an explanation.\n<|/ c\
    \ |>\n<| c |>\nThat looks very promising. What if I wanted to add another condition,\
    \ what if i wanted to see if the triangle is equilateral rather than right angled?\
    \ How would I modify the code to do that?\n<|/ c |>\n<| c |>\nThat's a different\
    \ problem. One approach is to determine if a line segment intersects the triangle.\
    \ If not, then it's an equilateral triangle. Another approach is to determine\
    \ the triangle's normal vector. Then you only need to test if the vector has the\
    \ same direction as one of the 3 vectors to the triangle's origin.\n<|/ c |>\n\
    <| c |>\nThanks. Just one last thing. How would I go about testing the intersection\
    \ of the line and the triangle (which is given in the code I posted)? I believe\
    \ that the line intersects the triangle if it is perpendicular to the vector,\
    \ and also if the line is orthogonal to the vector to the triangle's origin, but\
    \ I'm not sure how to implement this.\n<|/ c |>\n<| a dscore=2 tags=perl,algorithm\
    \ |>\nOne way to do it is to create a triangle by first making the three sides\
    \ equal length and rotating it by the desired angle.  That gives us one triangle\
    \ with two angles, not three.\nTo rotate an angle by some number of degrees, we\
    \ can use an angle formula:\n<code>\ntheta = deg * (pi/180)\n</code>\nSo the angle\
    \ is rotated 90 degrees counterclockwise is\n<code>\nangle = 90 * (pi/180)\n</code>\n\
    And 90 degrees clockwise is\n<code>\nangle = -90 * (pi/180)\n</code>\nIf you rotate\
    \ a vector by the above formula to obtain the rotated vector, you'll find that\
    \ the two vectors always end up pointing in the same direction.\nSo we can find\
    \ out what direction we need to rotate our triangle in to achieve the desired\
    \ angle.  If the triangle is \"facing\" the direction of the desired angle, the\
    \ angle is 0 degrees.  If the triangle is \"rotated\" by the desired angle, the\
    \ angle is 90 degrees.\nSo we know what we need to be rotating in.  But what ",
  "    return '' unless $a eq $b;\n    return '' unless $a eq $c;\n    return '' unless\
    \ $b eq $c;\n    return 1 if ($a>$b and $b>$c and $c>$a) or $a>$c and $b>$a or\
    \ $c>$a and $b>$c;\n    return;\n}", "    if ($a <= 0 or $b <= 0 or $c <= 0) {\n\
    \        return 0;\n    }\n    my $is_right_angle_triangle = ($b - $c) % ($a -\
    \ $c) == 0;\n    return $is_right_angle_triangle ? 1 : 0;\n}", "    my $a = $a\
    \ + 0;\n    my $b = $b + 0;\n    my $c = $c + 0;\n    my $s = (3 * $a + $b + ($c\
    \ * $c)) / 2;\n    if ($a <= $c && $c <= $b && $b <= $a) {\n        return 0;\n\
    \    } else {\n        return 1;\n    }\n}\n</code>\nThis approach is very fast\
    \ (O(n) in average and O(log(n)) in worst).\n<|/ a dscore=1 |>\n<| c |>\nIt does\
    \ not work for all possible inputs! It works for this particular case, which is\
    \ what the OP wanted to check, but it does not work for `right_angle_triangle(5,\
    \ 2, 3)`\n<|/ c |>\n<| c |>\nRight, my bad. I added a comment in the code, which\
    \ mentions this problem.\n<|/ c |>\n<| c |>\nYou also need `@arr = [1, 4, 9, 16]`\
    \ before `print right_angle_triangle(@arr);` The OP stated that they can only\
    \ use these function parameters.\n<|/ c |>\n<| c |>\nTrue, I didn't pay attention\
    \ to the OP's description. However, I think his point is that he can't use any\
    \ additional parameters, because the code he wrote only works with the parameters\
    \ he gave. He can only use the parameters he gave.\n<|/ c |>\n<| c |>\nI added\
    \ a section at the end of this answer, explaining why your solution is not the\
    \ best.\n<|/ c |>\n<| a tags=algorithm,perl dscore=1 |>\nIt's a little long to\
    \ write but a good way of doing it would be to go through all permutations of\
    \ the input array and see if any of the permutations are a right-angled triangle.\
    \ The easiest way to do this would be to shuffle it then check all permutations.\n\
    <code>\nuse strict;\nuse warnings;", "    my $len = $a + $b + $c;\n    my %seen\
    \ = ();\n    my $triangle_angle = ($a <= $b) ? abs(($a + $b) / $c) : abs(($b +\
    \ $c) / $a);\n    my ($is_right_angle, $is_right_angle_or_90_degree) = (1, 0);\n\
    \    if ($triangle_angle > $90 ) {\n        $is_right_angle = 1;\n    }\n    else\
    \ {\n        my $triangle_angle_square = $triangle_angle * $triangle_angle;\n\
    \        my $triangle_angle_square_root = $triangle_angle_square / $triangle_angle;\n\
    \        my $is_right_angle_or_90_degree_check = ( $triangle_angle_square_root\
    \ - 1 - $triangle_angle_square < 0 );\n        $is_right_angle_or_90_degree =\
    \ 1 if $is_right_angle_or_90_degree_check;\n    }", "    my $ab = abs($b - $a);\n\
    \    my $ac = abs($c - $a);\n    if ($ab == $ac) {\n        return 1;\n    }\n\
    \    if ($ab == $b) {\n        return 0;\n    }\n    \n    my $tmp = $b - $ab;\n\
    \    if ($tmp == 0) {\n        return 0;\n    }\n    \n    return $a > $c ? $a\
    \ : $c;\n}", "    return 1 if $a eq $b;\n    return 1 if $a eq $c;\n    return\
    \ 1 if $b eq $c;\n}", "    return 1 if\n            $b <= $c or\n            $b\
    \ <= $a or\n            $c <= $a;\n};", "    return 1 if ($b <= $a and $c <= $a);\n\
    \    return \"\" if ($b <= $a and $c <= $b);\n    return \"\" if ($a <= $c and\
    \ $c <= $b);\n    return \"\" if $c <= $b;\n    return 1;\n}", "    return 1 if\
    \ $a > $b and $a > $c;\n    return 1 if $b > $c and $b > $a;\n    return 1;\n}",
  "    my($ab, $bc, $ac) = $a . $b . $c;\n    my($bd, $cd, $ad) = $b . $c . $a;\n\
    \    my($cb, $abc, $acd) = $c . $a . $b;\n    my($bcd, $acbd, $cda) = $b . $c\
    \ . $d;", "    my ($s1, $s2, $s3) = ($a > $b) ? $a : $b;\n    my ($c1, $c2, $c3)\
    \ = ($c > $a) ? $c : $a;\n    my $result = ($c3 > $s1 + $c2) || ($c1 > $s2 + $c3);\n\
    \    return $result ? \"1\" : \"0\";\n}", "    my $result;\n    if ($a + $b >\
    \ $c) {\n        $result = 1;\n    } elsif ($b + $c > $a) {\n        $result =\
    \ 1;\n    } elsif ($a + $c > $b) {\n        $result = 1;\n    } elsif ($a + $b\
    \ > $c) {\n        $result = 1;\n    } elsif ($b + $c > $a) {\n        $result\
    \ = 1;\n    } elsif ($a + $c > $b) {\n        $result = 1;\n    }\n    return\
    \ $result;\n}", "    return unless ($a > 0 && $a < $b and $a < $c);\n    my($i,\
    \ $j, $k) = ($b, $c, $a);\n    for(; $i != $k; $i++, $j++, $k++) {\n        $i1\
    \ eq $i or $j1 eq $j or $k1 eq $k or $i2 eq $j1 or $j2 eq $k1 or $k2 eq $i2\n\
    \        or return 1;\n    }\n    return unless ($a == $c && $b == $c && $a >\
    \ 0);\n    return \"\";\n}\n</code>\nI hope this helps you.\n<|/ a tags=perl,recursion\
    \ |>\n<| c |>\nThanks a lot, but it is still not working. I think the problem\
    \ is in my comparison function. I will try to figure it out\n<|/ c |>\n<| a dscore=2\
    \ |>\nI understand this problem\n<code>\nInput:\nN = 3\n    4 6 9\n    3 2 5\n\
    \    1 2 3", "    return \"\" if $b == 0 or $c == 0 ;\n    return \"\" if $a >\
    \ $c and $a > $b ;\n    return \"\" if $c > $a and $c > $b ;\n    return \"\"\
    \ if $b > $a and $b > $c ;\n    my $ab = sqrt($a*$a + $b*$b) ;\n    my $cb = sqrt($c*$c\
    \ + $b*$b) ;\n    return \"\" if $ab == $cb ; # equilateral\n    return \"\" if\
    \ $ab == $a ;\n    return \"\" if $cb == $a ;\n    return \"\" if $ab == $c ;\n\
    \    return \"\" if $cb == $c ;\n    return \"\" if $a > $b && $a > $c && $a >\
    \ $c ;\n    return \"\" if $a > $b && $a > $c && $b > $c ;\n    return \"\" if\
    \ $b > $a && $b > $c && $a > $c ;\n    return \"\" if $b > $a && $b > $c && $b\
    \ > $c ;\n    return \"\" if $c > $a && $c > $b && $c > $b ;\n    return \"\"\
    \ if $c > $a && $c > $b && $c > $b ;\n    return \"\" if $b > $a && $b > $c &&\
    \ $c > $a ;\n    return \"\" if $b > $a && $b > $c && $b > $c ;\n    return \"\
    \" if $a > $b && $a > $c && $c > $a ;\n    return \"\" if $a > $b && $a > $c &&\
    \ $b > $c ;\n    return \"\" if $b > $a && $b > $c && $a > $c ;\n    return \"\
    \" if $b > $a && $b > $c && $b > $c ;\n    return \"\" if $a > $b && $a > $c &&\
    \ $b > $c ;\n    return \"\" if $a > $b && $a > $c && $b > $c ;\n    return \"\
    \" if $b > $a && $b > $c && $a > $c ;\n    return \"\" if $b > $a && $b > $c &&\
    \ $b > $c ;\n    return $a < $c && $c < $b && $b < $a ? \"right\" :\n        $c\
    \ < $a && $a < $b && $b < $c ? \"left\" :\n        $a < $c && ", "    \n    my\
    \ $is_right_angle;\n    my $sum = $a + $b + $c;\n    my $diff = ($a + (($b + $c)\
    \ % $sum));\n    if ($diff < 0) {\n        $diff += $sum;\n    }\n    $diff >\
    \ $sum ? $is_right_angle = 1 : $is_right_angle = 0;\n    \n    \n    if ($is_right_angle\
    \ && $c < $b && $b < $a) {\n        return \"right angle\";\n    } else {\n  \
    \      return \"not right angle\";\n    }\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
