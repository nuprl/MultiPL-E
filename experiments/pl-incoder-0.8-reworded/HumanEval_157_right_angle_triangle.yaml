name: HumanEval_157_right_angle_triangle
language: pl
prompt: "# Given the lengths of the three sides of a triangle. Return 1 if the three\n\
  # sides form a right-angled triangle,  otherwise.\n# A right-angled triangle is\
  \ a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n#\
  \ >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
  # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
  \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
  \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
  \  if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n \
  \       exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
  \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
  \     if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
  \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
  \    if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    return 1 if ($a > $b and $a > $c);\n    return 1 if ($b > $c and\
    \ $b > $a);\n    return 1;\n}", "    \n    my $is_right_angled;\n    \n    # Calculate\
    \ sides\n    my $a_side = $a > $b ? $a - $b : $a - $c;\n    my $b_side = $b >\
    \ $c ? $b - $c : $b - $a;\n    my $c_side = $c > $a ? $c - $a : $c - $b;\n   \
    \ \n    # Check if sides are equal\n    my $equal = ($a_side == $b_side && $c_side\
    \ == $b_side);\n    \n    # If no equal sides\n    if (!$equal) {\n        # Check\
    \ if one side is 90\n        my $is_90 = ($a_side == $b_side) ? 1 : 0;\n     \
    \   \n        # If 90\n        if ($is_90) {\n            \n            # Return\
    \ 0\n            $is_right_angled = 0;\n        }\n        \n        # Else return\
    \ 1\n        else {\n            $is_right_angled = 1;\n        }\n    }\n   \
    \ \n    return $is_right_angled;\n}", "    if ($a > $b && $a > $c) {\n\tprint\
    \ \"1\";\n    }\n    elsif ($b > $c && $b > $a) {\n\tprint \"1\";\n    }\n   \
    \ elsif ($c > $a && $c > $b) {\n\tprint \"1\";\n    }\n    else { \n\treturn \"\
    \"; \n    }\n    return \"\"; \n}", "    # Check for sides of triangle\n    return\
    \ $a > $c ? 1 : 0;\n}", "    return 1 if ( !$a || !$b || !$c || $a + $b > $c +\
    \ $b || $c + $a > $b + $a || $a + $b + $c <= $c + $b );\n    return '';\n}", " \
    \   my $result;\n    if ($b > $c || $b > $a) {\n        # b not greater than c\n\
    \        $result = 1;\n    }\n    else {\n        # b is greater than c\n    \
    \    if ($a > $c) {\n            # a not greater than c\n            $result =\
    \ 0;\n        }\n        else {\n            # a greater than c\n            if\
    \ ($a == $c) {\n                # a == c\n                $result = 1;\n     \
    \       }\n            else {\n                # a not greater than c\n      \
    \          $result = 0;\n            }\n        }\n    }\n    return $result;\n\
    }", "    return if ($a eq $b || $a eq $c || $b eq $c);\n    my $angle_a = ($a\
    \ + $b + $c) / 2;\n    my $angle_b = ($a - $b - $c) / 2;\n    my $angle_c = ($a\
    \ - $b + $c) / 2;\n    my $angle_d = ($a - $b - $c) / 2;\n    if ($angle_a > $angle_b\
    \ && $angle_a > $angle_c) {\n        if ($angle_d > $angle_c || $angle_d < $angle_b)\n\
    \            return 1;\n    }\n    if ($angle_b > $angle_c && $angle_b > $angle_d)\n\
    \        return 1;\n    if ($angle_c > $angle_d || $angle_c < $angle_d)\n    \
    \    return 1;\n    return 0;\n}", "    my $result = $c <=> $b;\n    if ($result\
    \ != 0) {\n        $result = -$result;\n        $result *= $a <=> $c;\n    }\n\
    \    elsif ($a != 0) {\n        $result = -$result;\n        $result *= $b <=>\
    \ $c;\n    }\n    return $result == 0;\n}", "    my $n = ($a + $b + $c)/2;\n \
    \   return 0 if $n % 2 == 1;\n    return \"Right\" if $a >= $b;\n    return \"\
    Left\" if $a <= $b;\n    return \"Both\" if $a > $b;\n    return \"Both\" if $a\
    \ < $b;\n    return \"Right\" if $a > $c;\n    return \"Left\" if $a < $c;\n \
    \   return \"Both\" if $a >= $c && $b >= $c;\n    return \"Both\" if $a >= $c\
    \ && $b <= $c;\n    return \"Both\" if $a <= $c && $b <= $c;\n    return \"Right\"\
    \ if $a >= $c && $b <= $c;\n    return \"Left\" if $a <= $c && $b >= $c;\n   \
    \ return \"Both\" if $a >= $c && $b <= $c;\n    return \"Right\" if $a <= $c &&\
    \ $b >= $c;\n    return \"Left\" if $a >= $c && $b <= $c;\n    return \"Right\"\
    \ if $a <= $c && $b <= $c;\n}", "    return 1 if $a == $b || $a == $c;\n    return\
    \ 1 if $b == $c || $b == $a;\n    return 0;\n}", '    return if $b == $c || $a
    == $c;', "    # Only one side is of interest to us\n    return '' unless $a >\
    \ $b || $a > $c;\n    \n    # b is left of c\n    return '' if $a <= $b && $a\
    \ <= $c;", "    my $ab_or_ac = $b + $c < $a + $c ? $c + $a + $b : $a + $c + $b;\n\
    \    my $s = $ab_or_ac % 2 ? -$ab_or_ac : $ab_or_ac;\n    return $s ? $a == $ab_or_ac\
    \ / 2 ? \"0\" : \"1\" : \"1\";\n}", "    my $result;\n    if ($b eq $c) {\n  \
    \      if ($b ne $a) {\n            $result = 1;\n        }\n    }\n    else {\n\
    \        if ($a ne $c or $a ne $b and $c ne $b) {\n            $result = 1;\n\
    \        }\n    }\n    return $result;\n}", "    return undef unless $a > $b and\
    \ $a > $c;\n    return undef if $b <= $a or $c <= $a;\n    my $l = $a + $b + $c;\n\
    \    my $left_angle = 45.0;\n    my $right_angle = 90.0;\n    return undef if\
    \ $l == $right_angle * 2;\n    return undef if $l == $left_angle * 2;\n    $l\
    \ == 360 or return 0;\n    $a == $c or return 0;\n    $left_angle == $right_angle\
    \ or return 0;\n    my $s = sqrt(($a * $a + $b * b + $c * $c) / $l);\n    return\
    \ 0 if $s == $a;\n    return 0 if $s == $b;\n    return 0 if $s == $c;\n    return\
    \ 1;\n}", "    return $a if $a + $b > $c || $a + $c > $b || $b + $c > $a;\n  \
    \  return $a if $a == $b || $b == $c || $c == $a;\n}", "    if ($a > $b) {\n \
    \       if ($a > $c) {\n            $a > $b && return 1;\n        } else {\n \
    \           $a > $c && return 1;\n        }\n    } else {\n        if ($b > $c)\
    \ {\n            $b > $a && return 1;\n        } else {\n            $b > $c &&\
    \ return 1;\n        }\n    }\n    return 0;\n}", "    my $is_right_angle = 0;\n\
    \    my $d = $c - $b;\n    my $c2 = $c * $c;\n    if ($d > 0) {\n        $is_right_angle\
    \ = ($d < $c2);\n    }\n    return $is_right_angle;\n}", "    if((abs($a - $b)\
    \ + abs($a - $c) + abs($b - $c)) <= 1) { \n        return \"1\";\n    }\n    else\
    \ { \n        return \"\";\n    }\n}", "    return 1 if ($a + $b > $c && $a +\
    \ $c > $b && $b + $c > $a);\n    return \"\";\n}", "    if (abs($a - $b) > abs($a\
    \ - $c)) {\n        if (abs($a - $b) == abs($c - $b)) {\n            return \"\
    \"\n        }\n    }\n    return \"\"\n}", "    if (abs($a - $b) + abs($a - $c)\
    \ + abs($a - $c)) < abs($a - $b) + abs($a - $c) + abs($a - $b)\n    {\n      \
    \  $a = $a - $a + $b;\n        $b = $a - $a + $c;\n        $c = $a - $a + $b;\n\
    \        $a = $a - $a + $b;\n    }\n    return $a eq 90 || $b eq 90 || $c eq 90;\n\
    }", "    my $concave_angle = 180 - $a + $b + $c - ($a + $b + $c) * 4\n       \
    \ * atan2($a / $c , $b / $c) * 180 / $a + $a + $b;\n    return ($concave_angle\
    \ >= 180)? \"1\": \"0\";\n}", "    my $sides = $a + $b + $c;\n    if ($sides ==\
    \ 0) {\n        return '';\n    } elsif (($sides & 1) == 0) {\n        return\
    \ '';\n    } elsif (($sides & 2) == 0) {\n        return '';\n    }", "    if(\
    \ $a > $b && $a > $c ) {\n        1;\n    }\n    elsif( $a > $c && $a > $b ) {\n\
    \        1;\n    }\n    elsif( $b > $c && $b > $a ) {\n        1;\n    }\n   \
    \ elsif( $b > $a && $b > $c ) {\n        1;\n    }\n    else {\n        \"\";\n\
    \    }\n}", "    if( abs($a-$b) == abs($c-$b) && abs($a-$b) == abs($c-$a) )\n\
    \    {\n        return 1;\n    }\n    return \"\";\n}", "    my $is_right_angled\
    \ = ((atan2($b, $c) - atan2($a, $c)) <= pi/2);\n    \n    return $is_right_angled\
    \ ? 1 : 0;\n}", "    return \"\"\n        if ($a <= 0 || $b <= 0 || $c <= 0);\n\
    \    return $a >= $b && $a >= $c\n         || $a <= $b && $a <= $c\n         ||\
    \ $a <= $c && $a >= $b;\n}", '    my $result;', "    if($c < 0) {\n        $a\
    \ = $a + $b;\n        $b = $a + $c;\n        $c = $a - $b;\n    }\n    \n    #\
    \ check if b > a and b > c\n    if($a > $b) {\n        if($b > $c) {\n       \
    \     # both b and c > 0\n            my $result = 0;\n            if($b == $c)\
    \ {\n                $result = 1;\n            }\n            else {\n       \
    \         if($a < $c) {\n                    $result = 1;\n                }\n\
    \                else {\n                    $result = 0;\n                }\n\
    \            }\n            return $result;\n        }\n        elsif ($b == $c)\
    \ {\n            $result = 0;\n        }\n        else {\n            $result\
    \ = 1;\n        }\n    }\n    elsif($a == $b) {\n        $result = 0;\n    }\n\
    \    elsif($a == $c) {\n        $result = 1;\n    }\n    else {\n        $result\
    \ = 1;\n    }\n    return $result;\n}", "    return 1 if $a == $c || $b == $c;\n\
    \    return \"A\" if $a + $b > $c;\n    return \"B\" if $a + $c > $b;\n    return\
    \ \"C\";\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for this. I've been trying\
    \ to write this in Javascript, but I've never been comfortable with it.\n<|/ c\
    \ |>\n<| c |>\nThis is my favorite solution. It solves the problem using one loop\
    \ and avoids string concatenation.\n<|/ c |>\n<| a dscore=2 |>\nUsing ternary\
    \ operators:\n<code>\nfunction rightTriangle(a, b, c) {\n  return a<b?(a+b > c?'A':((a+b\
    \ > c?'B':'C')||'A')) :\n         b<c?(b+c > a?'A':(b+c > a?'B':'C')||'A'):\n\
    \         c<a?(c+a > b?'A':(c+a > b?'B':'C')||'A');\n}\n</code>\n<|/ a tags=recursion,algorithm,javascript\
    \ |>\n<| a dscore=2 |>\n<code>\nvar is_rightTriangle = function(a, b, c){\n  if\
    \ (a < b) return ((a + b > c) ? 'A' : ((a + b > c) ? 'B' : 'C')) || is_rightTriangle(a,\
    \ b, c);\n  if (b < c) return ((b + c > a) ? 'A' : (b + c > a) ? 'B' : 'C') ||\
    \ is_rightTriangle(a, b, c);\n  return (c < a) ? ((c + a > b) ? 'A' : ((c + a\
    \ > b) ? 'B' : 'C')) : is_rightTriangle(a, b, c);\n};\n</code>\n<|/ a tags=recursion,algorithm,javascript\
    \ |>\n<| a dscore=1 tags=recursion,algorithm,javascript |>\n<code>\nvar rightTriangle\
    \ = function (a, b, c){\n     if(a<b){\n          return (a+b > c) ? 'A' : ((a\
    \ + b > c) ? 'B' : 'C') || rightTriangle(a,b,c);\n     }\n     else if(b<c){\n\
    \          return (b+c > a) ? 'A' : (b + c > a) ? 'B' : 'C'|| rightTriangle(a,b,c);\n\
    \     }\n     else{\n          return (c+a > b) ? 'A' : (c+a > b) ? 'B' : 'C'||\
    \ rightTriangle(a,b,c);\n     }\n", "    $a <> $b || $a <> $c || $b <> $c || $a\
    \ == $b || $a == $c || $b == $c ? \"1\" : \"\";\n}", "    if ($a < $b) {\n   \
    \    if ($b < $c) {\n        return 1;\n       }\n    }\n    else {\n       if\
    \ ($c < $a) {\n        return 1;\n       }\n    }\n    return \"\";\n}", "   \
    \ my($l_a, $l_b, $l_c) = @{$_[0]};\n    my($r_a, $r_b, $r_c) = @{$_[1]};\n   \
    \ my($v_a, $v_b, $v_c) = @{$_[2]};\n    $l_a  =  $l_c -$l_b;\n    $r_a  =  $r_c\
    \ -$r_b;\n    $v_a  = $v_c -$v_b;\n    return ($l_a > $r_a) || ($l_a < $v_a);\n\
    }", "    my($d, $e) = $b-$a;\n    my($f, $h) = $c-$a;\n    my($i, $j) = ($d+$e)/2;\n\
    \    my($k, $l) = ($f+$h)/2;", "    if($a + $b + $c <= 0){\n        return 1;\n\
    \    }\n    elsif($b - $c > 0){\n        return 1;\n    }\n    elsif($c - $b >\
    \ 0){\n        return 1;\n    }\n    elsif($a > $c){\n        return 1;\n    }\n\
    \    elsif($a > $b){\n        return 1;\n    }\n    elsif($a > $c){\n        return\
    \ 1;\n    }\n    return \"\";\n}", "    return 1 if ($a - $b > 0 && $a - $c >\
    \ 0 && $b - $c > 0);\n}", "    return 1 if($a > $b and $a > $c) or $c > $b and\
    \ $c > $a;\n    return;\n}", "    if($a == $b)\n    {\n        if($a > $c)\n \
    \       {\n            return 1;\n        }\n        else\n        {\n       \
    \     return 0;\n        }\n    }\n    elsif($a == $c)\n    {\n        if($b >\
    \ $c)\n        {\n            return 1;\n        }\n        else\n        {\n\
    \            return 0;\n        }\n    }\n    elsif($b == $c)\n    {\n       \
    \ if($a > $c)\n        {\n            return 1;\n        }\n        else\n   \
    \     {\n            return 0;\n        }\n    }\n    else\n    {\n        return\
    \ 1;\n    }\n}\n</code>\n<|/ a tags=c,algorithm,c++,math |>\n<| c |>\nYou have\
    \ a typo, should read `if( a>b )`\n<|/ c |>\n<| c |>\nThanks. I was looking for\
    \ something similar and this was perfect :)\n<|/ c |>\n<| a tags=c,algorithm,c++,math\
    \ |>\n<code>\nbool isTriangle(vector<int> &vec)\n{\n  int a, b, c;\n  int len\
    \ = vec.size();\n  if (len == 3)\n    return true;\n  if (len > 3)\n    return\
    \ false;\n  a = vec[0];\n  b = vec[1];\n  c = vec[2];\n  int x = 0;\n  int y =\
    \ 0;\n  int z = 0;\n  while (x <= y && x <= z && y <= z)\n  {\n    if (a * x +\
    \ b * y + c * z == len) {\n      return true;\n    }\n    x++;\n    y++;\n   \
    \ z++;\n  }\n  return false;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis will\
    \ work, but this approach doesn't account for edge cases.\n<|/ c |>\n<| c |>\n\
    Yep, this will work as long as you follow all the rules for triangle rotations.\
    \ http://en.wikipedia.org/wiki/Rotation_(mathematics)#The_rotations_of_triangles\n\
    <|/ c |>\n<| c |>\nA problem with this approach is that it requires three separate\
    \ loops, each of which can be optimized away by using the fact that `x`, `y` and\
    \ `z` are independent variables -- the outer while loop can be written as `for(x\
    \ = 0; x <= y; x++) ...` and the inner loop as `for(y = 0; y <= z; y++) ...`.\
    \ These optimizations will probably be done by the compiler anyway (but that's\
    \ just an implementation detail). I'd rather suggest a more optimized implementation.\n\
    <|/ c |>\n<| c |>\n- your loop could be optimized further to simply one loop using\
    \ `x < y && y < z`\n<|/ c |>\n<|", "    return 1 if $a > $c; # triangle is right\
    \ angled if $a > $b or $a > $c\n    return 1 if $c > $b;  # triangle is right\
    \ angled if $c > $b or $c > $a\n    return 1 if $b == $c # triangle is right angled\
    \ if $b == $a\n    return 1;              # triangle is right angled if $b ==\
    \ $c and $b == $a\n}", "    if ($a > $b) {\n\t($a, $b, $c) = ($c, $b, $a);\n \
    \   }\n    if ($a > $c) {\n\t$d = $b - $c;\n\t$c = ($b - $a) if ($c < $a);\n\t\
    $a = ($b - $a) / $d;\n    }\n    if ($a > $b) {\n\t$d = $a - $c;\n\t$b = $d /\
    \ $a if ($c < $a);\n    }\n    if ($c > $b) {\n\t$a = $c - $b;\n\t$b = $a / $c\
    \ if ($a < $c);\n    }\n    $a > 0 ? \"$a : $b\" : \"$b : $a\";\n}", "    my $is_right_angled_triangle\
    \ = $a * $b > $c * $a;\n    return $is_right_angled_triangle ? $is_right_angled_triangle\
    \ : $a;\n}", "    \n    return 1 if ($a + $b > $c); # if a + b > c then a right\
    \ angle triangle\n    \n    return \"\" if ($c < $a + $b); # if c < a + b then\
    \ c not a right angle triangle\n    \n    my $degree = 180 - ((180 - $a) % 180)%180;\n\
    \    \n    return $degree if ($degree < $b);\n    \n    return $degree if ($degree\
    \ < $a);\n    \n    return $degree if ($degree < $c);\n    \n    return $degree;\n\
    }", "    my $s = sqrt(($a ** 2) + ($b ** 2) + ($c ** 2));\n    if ($a == $b) {\n\
    \        return $s == $c ? \"1\" : \"\";\n    }\n    elsif ($a != $c) {\n    \
    \    return $s == $b ? \"1\" : \"\";\n    }\n    else {\n        return $s ==\
    \ $a ? \"1\" : \"\";\n    }\n}\n</code>\n<|/ a dscore=4 tags=math,algorithm,if-statement,function,perl\
    \ |>\n<| c |>\nThis returns false for left_angle_triangle(3, 4, 5); right_angle_triangle(3,\
    \ 4, 5); left_angle_triangle(1, 2, 3); right_angle_triangle(1, 2, 3); right_angle_triangle(1,\
    \ 1, 4); left_angle_triangle(1, 1, 4); left_angle_triangle(4, 4, 4); right_angle_triangle(4,\
    \ 4, 4); left_angle_triangle(4, 4, 5); right_angle_triangle(4, 4, 5); right_angle_triangle(4,\
    \ 5, 4);\n<|/ c |>\n<| c |>\n: How are you passing parameters to the subroutine?\
    \ I'm using the same parameters I specified in the OP code.\n<|/ c |>\n<| c |>\n\
    The perl code is passing the parameters to the subroutine. I just made a test\
    \ case using the OP code and it works.\n<|/ c |>\n<| c |>\n: I didn't say that.\
    \ I said the perl code is passing the parameters to the subroutine. :)\n<|/ c\
    \ |>\n<| c |>\nI see what you mean, I just wanted to make sure I wasn't missing\
    \ something. :)\n<|/ c |>\n<| a tags=math,algorithm,if-statement,function,perl\
    \ |>\n<code>\nmy $s = sqrt(($a ** 2) + ($b ** 2) + ($c ** 2));", "    if ($a +\
    \ $b > $c+$c) {\n        return 1;\n    } else {\n        return '';\n    }\n}",
  "    return 1 if $a > $b and $b > $c;\n    return 1 if $a < $b and $c > $a;\n  \
    \  return 1;\n}", "    my $a = @$a < 3 ? @$a : 3;\n    my $b = @$b < 3 ? @$b :\
    \ 3;\n    my $c = @$c < 3 ? @$c : 3;\n    my ($s, $e, $f) = grep( { $_ % 2 ==\
    \ 0 }, ($a, $b, $c));\n    return $s == $e || $s == $f || $e == $f;\n}", "   \
    \ if((abs($a - $b) + abs($a - $c) + abs($b - $c)) <= 1) {\n        return 1;\n\
    \    }\n    else { \n        return \"\";\n    }\n}", "    if ($a eq 1 || $b eq\
    \ 1 || $c eq 1) {\n        return \"1\";\n    }\n    my $deg = atan2($b, $a) *\
    \ 180 / $Math::PI;\n    if ($deg > 90) {\n        return \"0\";\n    }\n    return\
    \ \"1\";\n}", "    my $is_right_angled_triangle = 0;\n    for my $i (0 .. $b)\
    \ {\n        for my $j ($i .. $c) {\n            my $delta_angle = $b - $j;\n\
    \            my $angle_to_opposite = $a - $j;\n            my $angle_to_other_side\
    \ = $b - $i;\n            if ( $angle_to_other_side > $angle_to_opposite ) {\n\
    \                last if $delta_angle == $angle_to_opposite;\n               \
    \ $is_right_angled_triangle = 1;\n                break;\n            }\n    \
    \    }\n    }\n    return $is_right_angled_triangle;\n}", "    return \"\" if\
    \ $b > $c || $b > $a;\n    return \"\" if $c > $a || $c > $b;\n    return 1 if\
    \ $a > $b or $a > $c;\n    return 1 if $b > $c or $b > $a;\n    return 1 if $c\
    \ > $a or $c > $b;\n    my $d = ($a + $b + $c) / 2;\n    $a -= $d;\n    $b -=\
    \ $d;\n    $c -= $d;\n    my $t1 = ($a + $b) / 2;\n    $b += $t1;\n    $c += $t1;\n\
    \    my $t2 = ($c + $b) / 2;\n    $a += $t2;\n    $b -= $t2;\n    $c -= $t2;\n\
    \    return 1 if $a > $c || $a > $b;\n    return 1 if $b > $a || $b > $c;\n  \
    \  return 1 if $c > $a || $c > $b;\n    return 0;\n}", "    return unless ($a\
    \ < $b and $a < $c and $c < $b);\n    $a > $c or $c > $b or $b > $a or $a > $c\
    \ or $c > $b;\n    return 1 if $b == $c or $a == $c;\n    return 0;\n}\n</code>\n\
    <|/ a |>\n<| a tags=perl |>\nAs already said, your algorithm is wrong, because\
    \ you only return 0 if all 3 sides are equal. But also you do not consider if\
    \ the three sides are parallel or crossed. \nTo fix it you must check for all\
    \ 4 combinations:\n<code>", "    \n    my $test = ($a + $b + $c)/2;\n    if ($test\
    \ > $c) {\n        if ($test - $c > $b - $a) {\n            return 1;\n      \
    \  } else {\n            return '';\n        }\n    } elsif ($test < $c) {\n \
    \       if ($test - $c < $b - $a) {\n            return '';\n        } else {\n\
    \            return 1;\n        }\n    } elsif ($test == $c) {\n        if ($a\
    \ < $b and $a < $c and $b < $c) {\n            return 1;\n        } else {\n \
    \           return '';\n        }\n    }\n}", "    my $l = ($a + $b + $c) / 2;\n\
    \    if (($a <= $b && $a <= $c) || ($b <= $c && $b <= $a)) {\n        if ($a <\
    \ $b) {\n            return 1;\n        } else {\n            return \"\";\n \
    \       }\n    } elsif ($c <= $a || $c <= $b) {\n        return \"\";\n    } else\
    \ {\n        return 1;\n    }\n}\n</code>\n<|/ a tags=python,perl,php dscore=4\
    \ |>\n<| a |>\nApart from what others have already suggested, a very simple solution\
    \ is this:\n<code>\ndef isRightAngleTriangle(a, b, c, n):\n    # All valid points\
    \ of a right angle triangle\n    # are on sides of an equilateral triangle\n \
    \   valid_pts = (a, b, c), (b, c, a), (c, a, b)", "    \n    if ($b eq 0) {\n\
    \        if ($c eq 0 || $c eq 90) { return 1; }\n    }\n    if ($a eq 0 ) {\n\
    \        if ($b eq 0 || $b eq 90) { return 1; }\n    }\n    \n    if ($c eq 0\
    \ || $c eq 90) { return 0; }\n    if ($a eq 0 ) { return 0; }\n    if ($b eq 0)\
    \ { return 0; }\n    \n    return 1;\n}\n</cell>\n<cell>\n%%writefile ../solutions/triangles/right_angle.pl",
  "    return 1 if(abs($b - $c) < abs($a - $c));\n    return \"\" if(abs($c - $b)\
    \ < abs($a - $c));\n    return \"\" if(abs($a - $b) < abs($c - $b));\n    return\
    \ 1;\n}", "    my $result = $a < $b ? $a < $c : $b < $c ? $b : $c;\n    return\
    \ $result eq $c ? \"1\" : \"\";\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks\
    \ for helping, but this solution is too simple, what about an input like `right_angle_triangle(2,\
    \ 4, 5)`\n<|/ c |>\n<| c |>\nI thought the goal was to give OP some hints on how\
    \ to do what he/she wants. But this was a fun challenge! :)\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\ndef right_angle_triangle(a,b,c):\n    \n    if a < b:\n        if\
    \ a > c:\n            if b > c:\n                return True\n            else:\n\
    \                return False\n        elif b < c:\n            return False\n\
    \    else:\n        if b > c:\n            if b > c:\n                return True\n\
    \            else:\n                return False\n        elif c < b:\n      \
    \      return False\n        else:\n            return True", "    my ($ab, $ac,\
    \ $bc) = ($a, $b, $c);\n    if ($ac < $bc or $ab < $bc) {\n        my $r = $ac\
    \ < $bc  ? 1 : -1;\n        return ($r == 0 ? '' : \"$ab$bc$r\");\n    }\n   \
    \ if ($ab == $bc or $ac == $bc) {\n        $a = $ab if $ab > $ac;\n        $b\
    \ = $ac if $ac > $bc;\n        $c = $bc if $bc > $ab;\n    }\n    my ($u, $v)\
    \ = vec($ab, $bc, $ac);\n    my $t = $ab - $bc;\n    $v = $ab + $bc - $v if $u\
    \ == $v; # v is right angle\n    return $ab == $bc ? \"$a$bc$u\" :\n         \
    \  $ac == $bc ? \"$ab$uc$v\" :\n           \"$ab$uc$v\";\n}", "    return 1 if\
    \ (($b - $a) * ($c - $a) + ($a - $b) * ($c - $b)) == 0;\n    return \"\";\n}",
  "    my($is_right_angle, $angle_1, $angle_2);\n    my($side_length1, $side_length2,\
    \ $side_length3);\n    if ($a < $b and $a < $c) {\n        if ($b < $c) {\n  \
    \          $is_right_angle = 1;\n            $angle_1 = $b;\n            $angle_2\
    \ = $c;\n            $side_length1 = $a || 0;\n            $side_length2 = $b\
    \ || 0;\n            $side_length3 = $c || 0;\n        }\n        else {\n   \
    \         $is_right_angle = 0;\n            $angle_1 = $b;\n            $angle_2\
    \ = $c;\n            $side_length1 = $a || 0;\n            $side_length2 = $c\
    \ || 0;\n            $side_length3 = $b || 0;\n        }\n    }\n    else {\n\
    \        if ($a < $c) {\n            $is_right_angle = 0;\n            $angle_1\
    \ = $a;\n            $angle_2 = $c;\n            $side_length1 = $b || 0;\n  \
    \          $side_length2 = $c || 0;\n            $side_length3 = $a || 0;\n  \
    \      }\n        else {\n            $is_right_angle = 1;\n            $angle_1\
    \ = $a;\n            $angle_2 = $c;\n            $side_length1 = $b || 0;\n  \
    \          $side_length2 = $c || 0;\n            $side_length3 = $a || 0;\n  \
    \      }\n    }\n    return $is_right_angle\n        ? $side_length1 > $side_length2\
    \ && $side_length1 < $side_length3\n        : \"\";\n}", "    ($c > $b) ? (($c\
    \ == $b) || ($a > $c)) : ( (($c == $a) || ($b > $c)) );\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThanks for your answer, but it doesn't really answer the question, which\
    \ is specifically about the case that two triangles have the same side length.\n\
    <|/ c |>\n<| c |>\nThanks for answering, but I don't see how your method solves\
    \ my problem. Could you please provide an example of a case where the two triangles\
    \ have the same side length?\n<|/ c |>\n<| c |>\nSorry, I forgot to mention that\
    \ my method doesn't have to be implemented in a certain way, only that it works\
    \ :-) I have updated the example in my answer to show that it should work for\
    \ all cases you want.\n<|/ c |>\n<| a dscore=0 tags=math,geometry,algorithm |>\n\
    A point on the plane P is called a point on triangle T if:\n<code>\n(T[1]-P[1])*(T[2]-P[2])=(T[0]-P[0])*(T[2]-P[2])+T[1]*(T[0]-P[0])-(T[1]-P[1])*(T[0]-P[0])\n\
    </code>\nThe above formula shows that the point P is on the triangle if and only\
    \ if all the 3 sides of T are parallel.\nNow to check whether 2 triangles are\
    \ on the same plane or not, we can calculate all the 3 sides parallelly and then\
    \ check for all 3 points on that plane.\n<|/ a |>\n<| c |>\nThe expression for\
    \ `a` is also wrong.  It should be `((a*b*c - a*d*d) - b*c*d)`.\n<|/ c |>\n<|\
    \ c |>\nThanks for answering, but I don't see how your method solves my problem.\
    \ Could you please provide an example of a case where the two triangles have the\
    \ same side length?\n<|/ c |>\n<| a dscore=0 |>\nFor 3 point triangle you can\
    \ use\n<code>\nax + by + c = 0\n</code>\nIf all three points are on the line\n\
    <code>\nax = By - Cx\n</code>\nThis solution should work for any number of points.\n\
    <|/ a tags=math,geometry,algorithm |>\n<| c |>\nThanks for answering, but I don't\
    \ see how your method solves my problem. Could you please provide an example of\
    \ a case where the two triangles have the same side length?\n<|/ c |>\n<| a dscore=0\
    \ |>\nThe problem is solved in one dimension by checking the sign of the determinant\
    \ of the matrix of the triangle:\n<code>\n", "    my($ab) = ($a * $b);\n    my($cd)\
    \ = ($c * $d);\n    my($ac) = ($a * $c);\n    my($ab) = ($a * $b);\n    my($a2)\
    \ = ($a * 2);\n    my($b2) = ($b * 2);\n    my($c2) = ($c * 2);\n    my($ac) =\
    \ ($a * $c);\n    my($cd) = ($c * $d);\n    my($ab) = ($a * $b);\n    my($ab2)\
    \ = ($ab * 2);\n    my($bc2) = ($bc * 2);\n    my($b2) = ($b * 2);\n    my($c2)\
    \ = ($c * 2);\n    my($ac) = ($a * $c);\n    my($ab2) = ($ab * 2);\n    my($ab)\
    \ = ($a * $b);\n    my($ab) = ($a * $b);\n    my($ac) = ($a * $c);\n    my($ac)\
    \ = ($a * $c);\n    my($a2) = ($a * 2);\n    my($a2) = ($a * 2);\n    my($b2)\
    \ = ($b * 2);\n    my($c2) = ($c * 2);\n    my($ac) = ($a * $c);\n    my($cd)\
    \ = ($c * $d);\n    my($ac) = ($a * $c);\n    my($cd) = ($c * $d);\n    my($ac)\
    \ = ($a * $c);\n    my($ab2) = ($ab * 2);\n    my($bc2) = ($bc * 2);\n    my($ac)\
    \ = ($a * $c);\n    my($ab2) = ($ab * 2);\n    my($ab) = ($a * $b);\n    my($ab)\
    \ = ($a * $b);\n    my($ac) = ($a * $c);\n    my($ac) = ($a * $c);\n    my($ab2)\
    \ = ($ab * 2);\n    my($bc2) = ($bc * 2);\n    my($ac) = ($a * $c);\n    my($ab2)\
    \ = ($ab * 2);\n    my($ab) = ($a * $b);\n    my($ab) = ($a * $b);\n    my($ac)\
    \ = ($a * $c);\n    my($ab2) = ($", "    my $triangle_area = $a * $b;\n    my\
    \ $side1 = sqrt($triangle_area / ($a * $a + $b * b));\n    my $side2 = sqrt($triangle_area\
    \ / ($c * $c + $a * $a));\n    my $side3 = sqrt($triangle_area / ($c * $c + $b\
    \ * b));\n    return 0 if $side1 == 0 && $side2 == 0 && $side3 == 0;\n    return\
    \ 1 if ($side1 != 0) && ($side2 != 0) && ($side3 != 0);\n    return \"Not a triangle!\"\
    ;\n}\n</code>\n<|/ a dscore=1 tags=perl,recursion,algorithm |>\n<| c |>\nIt's\
    \ probably not going to work out so well for non-right-angled triangles when the\
    \ sides are very close to each other. I'd suggest using the Pythagorean formula\
    \ to check the sides before throwing them into the square-root function. Then\
    \ your `right_angle_triangle` could return 'Not a triangle!' instead of 0.\n<|/\
    \ c |>\n<| c |>\nGood idea, I have updated the code.\n<|/ c |>\n<| c |>\nI agree,\
    \ for triangles with two sides both close to each other the Pythagorean formula\
    \ may work better, but for triangles with three sides, the Pythagorean formula\
    \ is too expensive to be worth it. I've updated the code.\n<|/ c |>\n<| c |>\n\
    Thanks for the solution. Just to add a little bit more explanation to this solution,\
    \ the function `is_triangle` is used to determine whether the given three sides\
    \ are equal or not, if they are equal, it means all three sides are equal.\n<|/\
    \ c |>\n<| a tags=perl,recursion,algorithm |>\n<code>", "    my $ab = $a - $b;\n\
    \    my $ac = $a - $c;\n    my $bc = $b - $c;", "    return 1 if ($c > $a and\
    \ $c > $b) or \n                ($c > $b and $c > $a) or \n                ($c\
    \ > $a and $c > $b);\n}", "    \n    return 1 if $b <= ($a + $c); \n    return\
    \ '' unless $b <= ($a + $c); \n    return '' unless $c <= ($a + $b); \n    return\
    \ '' unless $c <= ($a + $b); \n    return 1 if $a == $b;\n    return 1 if $a ==\
    \ $c;\n    return '' if $a eq $c;\n    return '' if $a eq $b;\n    return '' if\
    \ $a eq $c;\n    return '' if $a <= $c;\n    return '' if $a <= $b;\n    return\
    \ '' if $a <= $c;\n    return 1 if $b <= $c;\n    return 1 if $c <= $b;\n    return\
    \ 1 if $c <= $a;\n    return '';\n}\n</code>\n<|/ a |>\n<| a dscore=4 |>\nI think\
    \ it would be easier to find the angles in one single equation, and then just\
    \ check that the sum of the angles equals 180 or 90.\n<code>\ndef right_angle_triangle(a,b,c):\n\
    \    if a+b+c > 180:\n        return \"\"\n    else:\n        return \"\" if a+b+c\
    \ == 90 else \"\"\n</code>\n<|/ a tags=algorithm,geometry,math |>\n<| c |>\nThis\
    \ is a nice solution. In the original question, the triangles have a length of\
    \ 5, which means that the sum of the angles is 270.\n<|/ c |>\n<| c |>\n+1 This\
    \ should cover all cases since it returns the empty string when the sum is not\
    \ 180 or 90\n<|/ c |>\n<| a |>\nA simple (but inefficient) way is to calculate\
    \ all the angles and see if the sum of all the angles is either 180 or 90:\n<code>\n\
    def right_angle_triangle(a, b, c):\n    angle = 180 if a**2 + b**2 + c**2 - 180\
    \ > 0 else 90\n    if abs(a - b) > angle or abs(a - c) > angle or abs(b - c) >\
    \ angle:\n        return False\n    else:\n        return True\n</code>\n<|/ a\
    \ dscore=4 tags=algorithm,geometry,math |>\n<| c |>\n`180 if a**2 + b**2 + c**2\
    \ - 180 > 0` can be simplified to `360 - 180 if a == b and a == c or a==c and\
    \ b==c else 180` for a similar effect but more clear.\n<|/ c |>\n<| c |>\n: Thanks\
    \ for sharing this :) I like it.\n<|/ c |>\n<| a |>\n<code>\ndef check(a, b, c):\n\
    \    angles = [a, b, c]\n    i = min(angles)\n    while i < 360:\n        i +=\
    \ 1\n        if angles.count(i) != 3:\n            return False\n        else:\n\
    \            ", "    my $angle = 0;\n    if ( ($b - $c) ne 0)\n    {\n       \
    \ $angle = ($a + $b - $c) / 2;\n    }\n    elsif (($b - $a) ne 0)\n    {\n   \
    \     $angle = 180;\n    }\n    elsif ($a ne 0)\n    {\n        $angle = 270;\n\
    \    }\n    if ($angle > 180)\n    {\n        $angle -= 360;\n    }\n    return\
    \ $angle;\n}", "    return 1 if $b == 0 && $c == 0;\n    return 1 if ($c > $a\
    \ && $b > $a) || ($c > $a && $a > $b) || ($b > $c && $a > $c);\n    return \"\"\
    ;\n}", "    if($b <= $c)\n    {\n        return '';\n    }\n    if($b <= $a)\n\
    \    {\n        if($a < $c)\n        {\n            return 1;\n        }\n   \
    \     else\n        {\n            return '';\n        }\n    }\n    if($c <=\
    \ $a)\n    {\n        if($a < $b)\n        {\n            return 1;\n        }\n\
    \        else\n        {\n            return '';\n        }\n    }\n    return\
    \ '';\n}", "    return $a <= $b and $a <= $c || $b <= $c ? 1 : 0;\n}", "    return\
    \ $a eq $b || $a eq $c || $b eq $c ? \"1\" : \"\";\n}", "    return if ($a eq\
    \ $b and $b eq $c);\n    my($delta) = ($b - $a) x ($c - $a);\n    my($delta) =\
    \ ($delta * $delta) ** (1/2);\n    return 1 if ($delta <= 1);\n    return \"\"\
    ;\n}", "    my $side = 0;\n    $side = $a > $b ? 1 : 0;\n    $side = $side ==\
    \ 1 ? 0 : 1;\n    $side = $side == 1 ? 1 : 2;\n    return $side == 1 ? \"\" :\
    \ 1;\n}\n</code>\n<|/ a tags=perl,if-statement,variables,function |>\n<| c |>\n\
    I like how you decided to change `my $side = 0;` to `my $side = 0;` and then immediately\
    \ to `my $side = 1;`\n<|/ c |>\n<| a |>\nYou want something like:\n<code>", " \
    \   if($b == $c) {\n        return $b eq $a;\n    }\n    else {\n        return\
    \ ($b > $c) ? 1 : 0;\n    }\n}", "    if ($a <= $b and $b <= $c){\n       return\
    \ 1;\n    }\n    if ($a <= $c and $c <= $b){\n       return 1;\n    }\n    if\
    \ ($a >= $b and $b >= $c){\n       return 1;\n    }\n    return \"\";\n}", " \
    \   \n    if($a == $b) {\n        if($b == $c) {\n            if($a == 1) {\n\
    \                return 1;\n            } else {\n                return '';\n\
    \            }\n        } else {\n            return 1;\n        }\n    } else\
    \ {\n        if($b == $c) {\n            if($a == 1) {\n                return\
    \ '';\n            } else {\n                return 1;\n            }\n      \
    \  } else {\n            return '';\n        }\n    }\n}", "    my($d1) = $a >\
    \ $b ? $a : $b;\n    my($d2) = $a > $c ? $a : $c;\n    my($d3) = $b > $c ? $b\
    \ : $c;\n    return $d1 == $d2 || $d2 == $d3 || $d3 == $d1;\n}", "    return 1\
    \ if($a <= 0 or $b <= 0 or $c <= 0 or $a + $b + $c <= 0);\n    my $ab = $a + $b;\n\
    \    my $bc = $b + $c;\n    my $cd = $c + $d;\n    my $abc = $ab * $cd;\n    my\
    \ $abcd = $abc * $bc;\n    my $bcdd = $bcd * $cd;\n    my $abbcd = $abbc * $bcd;\n\
    \    my $abcdbc = $abcd * $bcd;\n    my $abcbcd = $abcb * $abcd;\n    my $abbcdcd\
    \ = $abbcd * $cd;\n    my $abcdbcd = $abcdb * $bcd;\n    my $abcdbcde = $abcdbcd\
    \ * $cde;\n    return 1 if($abcbcd > 0 and $abcdbcde == $abbcdcd);\n    return\
    \ \"\";\n}", "    $a > $b ? $a : $b;\n    $a > $c ? $a : $c;\n    $b > $c ? $b\
    \ : $c;\n}", "    \n    my ($angle, $c, $b) = ([$a, $c, $b] or return undef);\n\
    \    return 1 if ($a < $c and $b < $c and $a < $b) or \n\t($a == $c or $b == $c\
    \ or $c == $b);\n}", "    my $is_right_angle = 0;\n    my $right_angle;\n    if\
    \ ( $a + $b > $c ) {\n        $right_angle = $a + $b - $c;\n        if ( $right_angle\
    \ < 180 ) {\n            $is_right_angle = 1;\n        }\n    } else {\n     \
    \   $right_angle = $b - $c;\n        if ( $right_angle < 180 ) {\n           \
    \ $is_right_angle = 1;\n        }\n    }\n    return $is_right_angle;\n}", '    my($x1,
    $y1, $x2, $y2, $x3, $y3, $x4, $y4) = (0,0,0,0, 0,0,0,0);', "    my $sign = $a\
    \ < $b ? ($b <= $c ? -1 : ($b > $c ? 1 : 0)) : 1;\n    $sign = 1 - $sign if $sign\
    \ < 0;\n    return $sign >= 0 ? 1 : 0;\n}", "    if($a eq $b || $a eq $c || $b\
    \ eq $c){\n       return 1;\n    }\n    return \"\";\n}", "    my($is_right_angle)\
    \ = 0;\n    if ($a > $c) {\n        $a = $c;\n        $is_right_angle = 1;\n \
    \   }\n    if ($b > $c) {\n        $b = $c;\n        $is_right_angle = 1;\n  \
    \  }\n    if ($a > $b) {\n        $a = $b;\n        $is_right_angle = 1;\n   \
    \ }\n    return $is_right_angle;\n}", "    return 1 if ($a+$b > $c && $a+$c >\
    \ $b+$c);\n    return \"\"\n}\n</code>\nNow we can compare the solutions:\n<code>\n\
    my $time_limit = 1000; # seconds", "    if ($a eq $b && $a eq $c) {\n        return\
    \ 1\n    } elsif ($a == $b) {\n        return $a eq $c\n    } elsif ($a == $c)\
    \ {\n        return $b eq $c\n    } else {\n        return $a eq $b || $a eq $c\n\
    \    }\n}", "    if ($b == $c) {\n\treturn 0;\n    } elsif ($b < 0) {\n\t$c--;\n\
    \    } elsif ($c < 0) {\n\t$b--;\n    }", "    if($b > $c || $b < $a) {\n    \
    \    return \"Triangle is not right-angled\";\n    }\n    if($a eq $c) {\n   \
    \     return 1;\n    }\n    if($a eq $b) {\n        return \"\";\n    }\n    if($a\
    \ < $b) {\n        if($a eq $c) {\n            return \"Triangle is right-angled\"\
    ;\n        }\n        return \"Triangle is not right-angled\";\n    }\n    if($a\
    \ < $c) {\n        if($a eq $b) {\n            return \"Triangle is right-angled\"\
    ;\n        }\n        return \"Triangle is not right-angled\";\n    }\n    return\
    \ \"Triangle is not right-angled\";\n}\n</code>\n<|/ a tags=c#,c,math,algorithm\
    \ |>\n<| c |>\nI'm glad you pointed me to this.  I didn't know there was a name\
    \ for this.  Thank you!\n<|/ c |>\n<| c |>\nActually, I take that back.  It's\
    \ not what I need.  I'm going to have to use this to figure out if a given triangle\
    \ is a right angle or a left-angled triangle, and not an isosceles triangle. \
    \ I just need one for right angle.  So, no way to do it with this.\n<|/ c |>\n\
    <| c |>\nYou do realize that your question is asking for \"a right angled triangle\"\
    , not an isosceles triangle? Also, see [this answer](http://stackoverflow.com/a/2835994/33499)\
    \ which tells how to check if a triangle is a right angled triangle or not.\n\
    <|/ c |>\n<| c |>\nI do realize.  My question was poorly worded.  But I didn't\
    \ know there was a name for this.  Thank you, though!\n<|/ c |>\n<| c |>\nI took\
    \ a look at the other post and am not sure I understand it all.  I understand\
    \ how to check if a triangle is a right angle triangle, just not how to determine\
    \ if it is a right angled triangle or not.  Can you help me on that?\n<|/ c |>\n\
    <| a tags=c#,c,math,algorithm |>\nThe Wikipedia article on right angled triangles\
    \ has all the details that you need.\n<|/ a dscore=3 |>\n<| c |>\nThis link is\
    \ broken.\n<|/ c |>\n<| a |>\nI think I found something I like for triangle detection\
    \ - the one on the bottom of this page \"The solution to detect whether the triangle\
    \ is convex or concave\".  \nThe way I understand this is, if you can't figure\
    \ out how to do it, then it might be ", "    my $c = $a + $b;\n    if($c < 3)\
    \ {\n        return 1;\n    }\n    return $c % 2 != 0 ? 1 : 0;\n}", "    if($b\
    \ eq $c || $a eq $b)\n    {\n        return 1\n    }\n    elsif($b eq $a || $c\
    \ eq $a)\n    {\n        return 1\n    }\n    elsif($b eq $a || $c eq $b)\n  \
    \  {\n        return 1\n    }\n    else\n    {\n        return \"\";\n    }\n}",
  "    my $a = abs $a;\n    my $b = abs $b;\n    my $c = abs $c;\n    if ($a <= $b\
    \ && $b <= $c && $c <= $a) {\n\treturn 1;\n    }\n    else {\n\treturn '';\n \
    \   }\n}", "    my $ab = $b - $a;\n    my $bc = $c - $b;\n    my $ac = $a - $c;\n\
    \    if ($ab == $bc && $bc == $ac) {\n        return 1;\n    }\n    else {\n \
    \       return \"\";\n    }\n}\n</code>\n<|/ a tags=raku,substitution,regex |>\n\
    <| a tags=raku,substitution,regex |>\nI took some time to find what was a bug\
    \ in Raku regex. There are a lot of issues related to regex and non-greedy matching.\
    \ This code works fine on both Rakudo and NQP\n<code>", "    my $ans = 1;\n  \
    \  \n    # check side a and b\n    my $s = acos($a / sqrt($a ** 2 + $b ** 2));\n\
    \    if ($a > $b) ($b, $a) = ($a, $b);\n    if ($c > $a) ($a, $c) = ($c, $a);\n\
    \    if ($b > $c) { ($c, $b) = ($b, $c);  }", "    if ($a > $b) {\n        $a\
    \ > $b ? return \"\" : return \"\";\n    } elsif ($b > $c) {\n        $b > $c\
    \ ? return \"\" : return \"\";\n    } else {\n        return 1;\n    }\n}\n</code>\n\
    <|/ a tags=perl,algorithm |>\n<| a |>\nI think this problem can be solved in O(2n).\
    \ Here is a solution that passes all the tests given by Codewars (just one test\
    \ fails).\n<code>", "    if($b * $c < $a * $b) {\n        return 1;\n    }\n \
    \   return undef;\n}", "    \n    return $a == $b and $a == $c ? 1 : 0;\n}", " \
    \   return 0 if ($a == $b == $c);\n    return 0 if ($a == $b);\n    return 0 if\
    \ ($b == $c);\n    return 1 if ($a <= 1 && $b >= 1 && $c >= 1 && $a <= $b && $c\
    \ <= $b);\n    return 1 if ($a >= 1 && $b <= 1 && $c >= 1 && $a >= $b && $c <=\
    \ $b);\n    return 1 if ($a >= 1 && $b >= 1 && $c <= 1 && $a <= $b && $c >= $b);\n\
    \    return 1 if ($a <= 1 && $b >= 1 && $c <= 1 && $a <= $b && $c >= $b);\n  \
    \  return 1 if ($a <= 1 && $b >= 1 && $c >= 1 && $a >= $b && $c <= $b);\n    return\
    \ 1;\n}", "    $a > $b ? ($a, $b) > ($c, $a) : ($a, $c) > ($b, $a);\n}", "   \
    \ return \"\" unless is_between($a, $b, $c);\n    return \"\" unless is_between($b,\
    \ $c, $a);\n    return \"\" unless is_between($c, $a, $b);\n    my $ab = sqrt($a\
    \ ** 2 + $b ** 2);\n    my $bc = sqrt($b ** 2 + $c ** 2);\n    my $abc = sqrt($ab\
    \ ** 2 + $bc ** 2);\n    return $abc > $a || $abc > $b || $abc > $c ? \"1\" :\
    \ \"\";\n}", "    my $result;\n    \n    if ($b <= $c) {\n        $result = $a\
    \ <= $b + $c;\n    } elsif ($c <= $a) {\n        $result = $a <= $b + $c;\n  \
    \  } elsif ($a <= $b) {\n        $result = $a == $b or $a == $b + $c or $a ==\
    \ $b - $c;\n    } elsif ($a <= $c) {\n        $result = $a == $b or $a == $b -\
    \ $c or $a == $b + $c;\n    } elsif ($b <= $c) {\n        $result = $a == $b or\
    \ $a == $b + $c or $a == $b - $c;\n    } else {\n        $result = $a == $b or\
    \ $a == $b - $c or $a == $b + $c;\n    }", "    my $d= $a-$b;\n    my $e= $a-$c;\n\
    \    my $f= $b - $c;\n    if ($d == $c && $d == $e) {\n        return $f==0 ?\
    \ '' : 1;\n    }\n    if ($d == $c) {\n        if ($e < $f) {\n            return\
    \ 0;\n        }\n        return $e<$f? '' : 1;\n    }\n    return $f<$e? '' :\
    \ 1;\n}", "    my $triangle_angle_difference = ($b - $c) - ($a - $c);\n    my\
    \ $side_length = ($b - $a) + ($c - $a);\n    if ($triangle_angle_difference >\
    \ 0) {\n        if ($triangle_angle_difference == 90) {\n            return 1;\n\
    \        }\n    }\n    return \"\";\n}", "    return \"\" unless abs($a) > abs($b)\
    \ and abs($a) > abs($c);\n    return \"\" unless $b > $c;\n    return $a > $c\
    \ ? \"1\" : \"0\";\n}", "    return 1 unless ($a eq $b);\n    return 1 unless\
    \ ($b eq $c);\n    return 1 unless ($c > $a);\n    return 1 unless ($c < $b);",
  "    if ($a + $b > $c) {\n        $b = $c - $b;\n    }\n    if ($a + $c > $b) {\n\
    \        $c = $a - $c;\n    }\n    if ($b + $c > $a) {\n        $a = $b - $c;\n\
    \    }\n    return ($a < $b) && ($a < $c);\n}", "    return if ($a == 0 || $b\
    \ == 0 || $c == 0);\n    my $is_right_angled_tri = $a + $b > $c + $a &&\n    \
    \                       $a + $c > $b + $c &&\n                           $b +\
    \ $c > $a + $c;\n    return $is_right_angled_tri ? 1 : 0;\n}", "    my $len =\
    \ ($a > $b) ? ($a > $c ? ($a > $b ? $a : $b) : ($c > $b ? $c : $b)) : ($c > $a\
    \ ? ($c > $b ? $c : $a) : ($b > $a ? $b : $a));\n    return (1 if ($len == $a));\n\
    }", "    \n    my $is_right_angled_triangle = ($b ** 2) - (4 * ($a ** 2) * ($c\
    \ ** 2));\n    \n    return 1 if $is_right_angled_triangle > 0;\n    \n    return\
    \ \"\" if $is_right_angled_triangle < 0;\n    \n    return 1;\n}", "    \n   \
    \ # check for invalid input\n    \n    # right triangle\n    return 1 if($a <=\
    \ $b);\n    \n    # not right triangle\n    return 0 if($a <= $c);\n    \n   \
    \ # check for 90 degree\n    return 1 if($a > $b);\n    \n    # check for angle\
    \ triangle\n    return 1 if($a < $c);", "    my $sum;\n    my $tri_side = $a +\
    \ $b + $c;\n    if ($tri_side == 0) {\n        return \"no triangle\";\n    }\n\
    \    if ($tri_side > 0 && $a > $b and $a > $c) {\n        $sum = $b;\n    }\n\
    \    elsif ($tri_side > 0 && $b > $c and $b > $a) {\n        $sum = $c;\n    }\n\
    \    elsif ($tri_side > 0 && $c > $a and $c > $b) {\n        $sum = $a;\n    }\n\
    \    else {\n        return \"no triangle\";\n    }\n    if ($sum > $a) {\n  \
    \      return \"triangle is right angled\";\n    }\n    else {\n        return\
    \ \"triangle is 90 degree\";\n    }\n}", "    ($a, $b, $c) = ($c - $b, $c - $a,\
    \ $c - $a) if $a > $b;\n    ($a, $b, $c) = ($a - $b, $a - $a, $a - $b) if $a <\
    \ $b;\n    ($a, $b, $c) = ($a - $b, $a - $a, $a - $b) if $a < $b;\n    return\
    \ 1 if ($a + $b > $c);\n    return \"\";\n}\n</cell>\n<text>\nTest Cases", " \
    \   my($s1,$s2,$s3,$t1,$t2,$t3,$t4) = @_;\n    $s1 = $a <= $b and $c <= $a\n \
    \       or $c <= $b and $a <= $c;\n    $s2 = $a <= $b and $c <= $a\n        or\
    \ $a <= $b and $c <= $a;\n    $s3 = $a <= $b and $c <= $a\n        or $c <= $b\
    \ and $a <= $c;\n    $t1 = $a <= $b and $c <= $a\n        or $c <= $b and $a <=\
    \ $a;\n    $t2 = $a <= $b and $c <= $a\n        or $c <= $b and $a <= $c;\n  \
    \  $t3 = $a <= $b and $c <= $a\n        or $c <= $b and $a <= $c;\n    $t4 = $a\
    \ <= $b and $c <= $a\n        or $a <= $b and $c <= $a;\n    return $s1 and $s2\
    \ and $s3 and $t1 and $t2 and $t3 and $t4;\n}", "    return 1 if ($a < $b and\
    \ $a < $c or $a > $c and $a > $b);\n    return 1;\n}", "    $a <= $b and $b <=\
    \ $c and $a <= $c or return 1;\n}", '    my $angle = (atan2($b, $c) - atan2($a,
    $b)) % pi;', '    my $result = 0;', "    return 1 if ($a + $b > $c);\n    return\
    \ 1 if ($b + $c > $a);\n    return 1 if ($a + $c > $b);\n    return \"\";\n}",
  "    my $result;\n    $result = $a <= $b and $b <= $c or $c <= $a and $b <= $c;\n\
    \    return $result ? 1 : 0;\n}", "    return 1 if $b eq $a || $c eq $b;\n   \
    \ return 1 if $b eq $c || $a eq $c;\n    return 0;\n}", "    my $is_right = 0;\n\
    \    if ($a > $b && $a > $c) {\n        my $is_right_a = $a <= $b;\n        my\
    \ $is_right_b = $a <= $c;\n        my $is_right_c = $b <= $c;\n        my $is_right_ab\
    \ = $a <= $b && $b <= $c;\n        if ($is_right_a || $is_right_b or $is_right_c)\
    \ {\n            $is_right = 1;\n        }\n    }\n    elsif ($b > $c && $b >\
    \ $a) {\n        my $is_right_b = $b <= $c;\n        my $is_right_c = $b <= $a;\n\
    \        my $is_right_a = $c <= $a;\n        my $is_right_cb = $c <= $b;\n   \
    \     my $is_right_ac = $a <= $c && $c <= $b;\n        if ($is_right_b || $is_right_c\
    \ || $is_right_a) {\n            $is_right = 1;\n        }\n    }\n    elsif ($c\
    \ > $a && $c > $b) {\n        my $is_right_c = $c <= $a;\n        my $is_right_a\
    \ = $a <= $c;\n        my $is_right_b = $b <= $c;\n        my $is_right_ac = $a\
    \ <= $c && $c <= $b;\n        if ($is_right_c || $is_right_a || $is_right_b) {\n\
    \            $is_right = 1;\n        }\n    }\n    return $is_right;\n}", "  \
    \  my $length = abs($a-$b) . abs($b-$c) . abs($c-$a);\n    return 1 if ($length\
    \ <= 1);\n    if ($length == 2){\n        return \"\" if $a+$b+$c == $a*$b;\n\
    \        return \"R\" if $a != $b and $a != $c;\n        return \"L\" if $b !=\
    \ $c and $b != $a;\n    }\n    return \"T\" if $a != $b and $a != $c\n       \
    \   and $b != $c;\n    return \"B\" if $a != $b and $a != $c\n          and $c\
    \ != $a;\n    return \"D\" if $a != $b and $b != $c\n          and $c != $a;\n\
    \    return \"\";\n}", "    $a > $b || $a > $c || $b > $c ||\n        $a == $b\
    \ || $a == $c || $b == $c ||\n        $a < $b || $b < $c || $c < $a ||\n     \
    \   $a == $b && $b == $c ||\n        $a == $c && $b == $c ||\n        $b == $c\
    \ && $b == $a ||\n        $a < $b && $b < $c ||\n        $a < $c && $c < $b;\n\
    }", "    $c > $a or $c > $b or $c > $a or $a > $b or $a == $c or $a == $b or $b\
    \ == $c or $b == $a;\n}", "    \n    if ($a + $b > $c) {\n        if ($a + $c\
    \ > $b) {\n            if ($c + $b > $a) {\n                return 1;\n      \
    \      }\n        }\n    }\n    else {\n        if ($b + $c > $a) {\n        \
    \    if ($c + $a > $b) {\n                return 1;\n            }\n        }\n\
    \    }\n    \n    return '';\n}", "    return '' if ($a > $c || $b > $c);\n  \
    \  return '' if $a > $b;\n    return '1' if $b == $c;\n    return '0' if $a ==\
    \ $b;\n    return '2' if $c == $a;\n    return '3' if $a >= $c;\n    return '0'\
    \ if $a >= $b;\n    return '' if $b == $c;\n    return '' if $c >= $a;\n    return\
    \ '' if $a == $b;\n    return '' if $c == $a;\n    return '1' if $a <= $b;\n \
    \   return '' if $c <= $a;\n    return '0' if $a <= $c;\n    return '' if $b <=\
    \ $c;\n    return '2' if $a <= $b;\n    return '0' if $b <= $c;\n    return '3'\
    \ if $c <= $a;\n}", "    my $l = ($a < $b && $a < $c) ? $a : ($a < $c && $b <\
    \ $c) ? $b : $c;\n    return ($l == $a || $l == $b) ? \"1\" : \"0\";\n}\n</code>\n\
    <|/ a dscore=3 |>\n<| c |>\nThe question is for 3 integers, not 4. And `if ( ($a\
    \ + $b + $c) >= 2 )` doesn't work if $c = 0 (i.e. the triangle has one point at\
    \ infinity).\n<|/ c |>\n<| c |>\n: That's how I read the question. `A right-angled\
    \ triangle is a triangle in which one angle is right angle or 90 degree.`\n<|/\
    \ c |>\n<| c |>\n: It was a mistake to copy the code from that site I linked to,\
    \ sorry. I've fixed it.\n<|/ c |>\n<| a dscore=2 |>\nPython solution. \n<code>\n\
    def checkTriangle(a, b, c):\n    a, b, c = sorted([a, b, c])\n    return (a+b+c)\
    \ == 0 or (a+c+b) == 0 or (b+c+a) == 0\n</code>\n<|/ a tags=algorithm |>\n<| a\
    \ tags=algorithm |>\nA different way of thinking about this problem is to use\
    \ Boolean algebra. Assume you are given two numbers, a and b, a and b are both\
    \ either greater than or equal to zero. Consider the following set of equations:\n\
    <code>\na \u2264 b AND a \u2264 c AND b \u2264 c\na \u2264 b AND a \u2264 c AND\
    \ a \u2264 b\nb \u2264 c AND a \u2264 c AND b \u2264 a\nb \u2264 c AND b \u2264\
    \ c AND a \u2264 a\n</code>\nAnd we can use AND to combine all the conditions\
    \ into one expression:\n<code>\n((a \u2264 b) AND (a \u2264 c) AND (b \u2264 c))\
    \ OR (((a \u2264 b) AND (a \u2264 c) AND (a \u2264 b)) AND (b \u2264 c)) OR (((b\
    \ \u2264 c) AND (a \u2264 c) AND (b \u2264 a)) AND (a \u2264 a))\n</code>\nNow,\
    \ what does this tell us? All the combinations of ", "    return 1 if ($a + $b\
    \ + $c <= 180);\n    return '' if ($b + $c + $a < 180);\n    return '' if ($a\
    \ + $b < 180);\n    return '' if ($a + $c < 180);\n    return 1 if ($a + $b +\
    \ $c > 180);\n}", "    my $s = sqrt($a*$a + $b*$b + $c*$c);\n    $s = $s > SQR3\
    \ ? SQR3 : $s;\n    return ($a == $c || $b == $c || $a == $b) ? \"1\" : \"\";\n\
    }", "    if ($c <= $a or $c <= $b or $a <= $b) {\n        return \"1\";\n    }\n\
    \    return \"\";\n}", "    return '' unless $a > $c or $a > $b or $c > $b;\n\
    \    return $a + $b > $c;\n}", "    return 1 unless $a < $b && $a < $c;\n    return\
    \ 1 unless ($b - $a) > ($c - $a);\n    return 1 unless ($c - $a) > ($b - $a);\n\
    \    return 1;\n}", "    return unless ($a < $b && $a < $c);\n    my $s = ($a\
    \ + $b + $c) / 2;\n    return if ($s < ($a + $b) || ($s == ($a + $b) && ($a +\
    \ $b > $c && $a < $c)));\n    return if ($s == ($a + $b) && ($a + $b > $c));\n\
    \    return 1;\n}\n</cell>\n<cell>", "    return if ($a eq $b || $a eq $c);\n\
    \    return if ($b == $c || $a eq $c);\n    return if ($a == $c || $b == $c);\n\
    \    if ($a <= $b) {\n        if ($a <= $c) {\n            return 0;\n       \
    \ } else {\n            return 1;\n        }\n    } else {\n        if ($b <=\
    \ $c) {\n            return 1;\n        } else {\n            return 0;\n    \
    \    }\n    }\n}", "    \n    my $det = $b*$c - $a*$a;\n    \n    if ($det ==\
    \ 0){\n\treturn 0;\n    }\n    \n    return 1 if($det < 0);\n    \n    return\
    \ 0 if($det > 0);\n    \n    return 1 if($det == 180);\n    \n    return 0 if((-$det\
    \ / $a) < $b);\n}", "    my $side1 = $a + $b;\n    my $side2 = $c + $a;\n    my\
    \ $side3 = $c + $b;\n    my $triangle_length = $side1 + $side2 + $side3;\n   \
    \ if ($side1 == $side2 && $side2 == $side3) {\n        return 1;\n    }\n    elsif\
    \ ($side1 == $side3 || $side2 == $side3) {\n        return \"\";\n    }\n    return\
    \ 0;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=perl,algorithm,math,geometry,python\
    \ dscore=0 |>\n<code>\ndef isRightTriangle(a, b, c):\n    if(a<b and a<c):\n \
    \       return True\n    else:\n        return False", "    # If the sides are\
    \ the same, they form a right-angled triangle.\n    return 1 if $a eq $b and $a\
    \ eq $c;\n    # If the sides are opposite, they form a triangle with one angle\
    \ being right.\n    return 0 if $a eq $b or $b eq $c;\n    # Otherwise, they form\
    \ a triangle with 90 degree.\n    return 0;\n}\n</code>\n<|/ a dscore=3 |>\n<|\
    \ c |>\nWhy are you using $a and $b? Is that a typo?\n<|/ c |>\n<| c |>\nNo typo,\
    \ just old habits from when I was writing perl code ages ago. Now that I'm writing\
    \ perl more I tend to do something like `my $a = shift;` instead. Also if you're\
    \ going to use a subroutine with arguments, you probably want to call it with\
    \ `&right_angle_triangle(@_)`.\n<|/ c |>\n<| a |>\nI wrote a subroutine that uses\
    \ recursion to solve this problem in O(logn) time:\n<code>", "    my $d;\n   \
    \ \n    if(($c > $a && $c > $b) || ($c > $b && $c > $a)) {\n        $d = $c;\n\
    \    }\n    elsif(($b > $a && $b > $c) || ($b > $c && $b > $a)) {\n        $d\
    \ = $b;\n    }\n    elsif(($a > $b && $a > $c) || ($a > $c && $a > $b)) {\n  \
    \      $d = $a;\n    }\n    return $d;\n}", "    my($a_plus_b, $a_minus_b, $a_minus_c,\
    \ $b_minus_c) = map {$a + $b => $a - $b, $a - $c => $b, $b - $c => $c} $a, $b,\
    \ $c;\n    return $a_plus_b == $a_minus_c && $a_minus_c == $b_minus_c ? 1 : 0;\n\
    }", "    \n    if (($a - $b) eq ($c - $a)) {\n        return 1;\n    }\n    \n\
    \    if (($b - $c) eq ($a - $b)) {\n        return 1;\n    }\n    \n    return\
    \ \"\";\n}", "    return 1 if ($a > $b && $a > $c) || ($a == $b && $c > $a) ||\
    \ \n               ($a == $c && $b > $a);\n    return undef;\n}", "    my($r,\
    \ $t, $s) = @_;\n    return $t if abs($a - $b) <= abs($c - $r);\n    return $s\
    \ if $c > $r and $c > $b and abs($a - $c) <= abs($a - $b);\n    return $r if $c\
    \ > $r and $c > $b and abs($a - $c) >= abs($a - $b);\n}\n</code>\n<|/ a |>\n<|\
    \ c |>\nCan you please explain the code? I am trying to understand it but unable\
    \ to do so.\n<|/ c |>\n<| c |>\n, just read this [link](http://en.wikipedia.org/wiki/Rotation_matrix)\
    \ and it will help you understand the rotation matrix\n<|/ c |>\n<| a dscore=1\
    \ |>\nOne way I figured out is:\n<code>\nint isTriangle(double x0, double y0,\
    \ double x1, double y1, double x2, double y2, double x3, double y3) {\n    double\
    \ dx = x3 - x0;\n    double dy = y3 - y0;", "    $a > $b ? $a : $b > $c ? $b :\
    \ $c;\n}", "    return (\n        ($a - $b > 0)\n        || ($c - $a > 0)\n  \
    \      || ($b - $c > 0)\n        || ($a - $b == 0)\n        || ($c - $a == 0)\n\
    \        || ($b - $c == 0)\n        || ($a - $b == 0 && $c - $a == 0)\n    );\n\
    }", "    my(@res) = ();\n    push(@res, 1) if($a < $b and $b < $c and $c > $a);\n\
    \    push(@res, 1) if($a > $b and $b > $c and $c > $a);\n    push(@res, 1) if($b\
    \ > $a and $a > $c and $c > $a);\n    push(@res, 0) if($b > $a and $a < $c and\
    \ $c > $a);\n    return join(\"\", @res);\n}\n1;\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nI think this answer deserves more love than it deserves. You did everything\
    \ right!\n<|/ c |>\n<| c |>\nThanks. I have improved the code, and added an example.\
    \ Feel free to improve it further.\n<|/ c |>\n<| a |>\nThe correct algorithm to\
    \ check if a triangle is right angled is:\n<code>\ndef isRightAngled(a, b):\n\
    \    # if a == b, it is right angled\n    if a == b: return True", '    return
    1 if $c < $a or $c < $b;', "    \n    if($a + $b > $c) {\n        return 1;\n\
    \    } else {\n        return '';\n    }\n}", "    return undef unless $a > $b\
    \ and $a > $c and $c > $b;\n    return 1 if $a + $b > $c and $a + $c > $b and\
    \ $c + $b > $a;\n    return undef;\n}", "    if( $a + $b > $c ) {\n        my\
    \ $test = $a - $b;\n        $test < 0 ? $a++ : $a--;\n        $a + $b > $c ? $a++\
    \ : $a--;\n    }\n    return $a <= $b;\n}", "    if ($a eq 0 && $b eq 0 && $c\
    \ eq 0) or $a eq 0 && $b eq 0 || $c eq 0 && $b eq 0 { return \"\"; }\n    $a =\
    \ abs($a);\n    $b = abs($b);\n    $c = abs($c);\n    return $a < $b ? $a < $c\
    \ ? 1 : 0 : $a < $c ? 0 : 1; \n}", "    return 1 if ($a > $c && $b > $c) || ($a\
    \ > $b && $c > $b);\n    return \"\";\n}", "    return if ($a + $b > $c);\n  \
    \  return if ($b + $c > $a);\n    return if ($a + $b + $c > 1);\n    return \"\
    1\";\n}", "    return (sqrt($a*$a + $b*$b + $c*$c - ($a*$a + $b*$b + $c*$c)))\
    \ == 1 \n        ? 1 : 0;\n}\n</cell>\n<text>\nProblem 6: Implement a function\
    \ to check whether a triangle is equilateral, isosceles, or scalene.", "    my\
    \ $side1 = sqrt($a*$a + $b*$b);\n    my $side2 = sqrt($c*$c + $a*$a);\n    my\
    \ $a1 = $a / $side1;\n    my $a2 = $a / $side2;\n    my $b1 = $b / $side1;\n \
    \   my $b2 = $b / $side2;\n    my $c1 = $c / $side1;\n    my $c2 = $c / $side2;\n\
    \    my $deg = (90-($a1-b1)) * (180-($a2-c2)) - (90-($a2-c1)) * ($a1-b2);\n  \
    \  my $deg2 = ($a1+$b2) * 180 / $side1 - ($a1+$b1) * 180 / $side2;\n    my $deg3\
    \ = ($a1+$b2) * 180 / $side2 - ($a1+$b2) * 180 / $side1;\n    my $deg4 = $a1 *\
    \ 180 / $side1 - ($a2+$c2) * 180 / $side2;\n    my $deg5 = ($a2+$c2) * 180 / $side2\
    \ - ($a1+$c2) * 180 / $side1;\n    if ($deg <= 0){\n        my $degmin = $deg;\n\
    \        $deg = $deg2;\n        $deg2 = $degmin;\n    }\n    if ($deg >= 180){\n\
    \        my $degmax = $deg;\n        $deg = $deg3;\n        $deg3 = $degmax;\n\
    \    }\n    if ($deg >= 90 && $deg <= 270){\n        return 1;\n    }\n    elsif\
    \ ($deg >= 270 && $deg <= 360){\n        return 0;\n    }\n    elsif ($deg >=\
    \ 180){\n        if ($deg2 >= 180){\n            if ($deg3 >= 180){\n        \
    \        if ($deg4 >= 180){\n                    if ($deg5 >= 180){\n        \
    \                return 1;\n                    }\n                    else {\n\
    \                        return 0;\n                    }\n                }\n\
    \                else {\n                    return 0;\n                }\n  \
    \          }\n            else {\n                return 0;\n            }\n \
    \       }\n        else {\n            return 0;\n        }\n    }\n}", "    my\
    \ $is_right = $a > $b and $a > $c or $c > $b;\n    $is_right ? \"1\" : \"0\";\n\
    }", "    if( $a >= $b && $a >= $c && $b >= $c ){\n\treturn 0;\n    }", "    my\
    \ $cx = $c <=> $a;\n    my $bx = $b <=> $a;\n    my $ax = $a <=> $b;\n    return\
    \ $c <=> $b ? 1 : $ax <=> $bx ? 1 : $ax <=> $cx ? 1 : 0;\n}\n</code>\n<|/ a dscore=4\
    \ |>\n<| a |>\nStraight line to straight line:\n<code>\ndef checkTriangle(point1,point2,point3):\n\
    \    angle=atan2(point3[1]-point1[1],point3[0]-point1[0])\n    angle2=atan2(point3[2]-point2[2],point3[1]-point2[1])\n\
    \    if angle2-angle>M_PI:\n        return True\n    else:\n        return False\n\
    </code>\n<|/ a tags=python dscore=4 |>\n<| a dscore=4 |>\nJust to simplify the\
    \ above\n<code>\ndef checkTriangle(point1,point2,point3):\n    return not ((point2[0]\
    \ - point1[0]) * (point3[1] - point1[1]) < (point3[0] - point1[0]) * (point2[1]\
    \ - point1[1]))\n</code>\n<|/ a tags=python |>\n<| c |>\nAwesome! I did not know\
    \ that Python has `not X` like Python.\n<|/ c |>\n<| a dscore=3 tags=python |>\n\
    <code>\ndef checkTriangle(a,b,c):\n  a1,a2,a3=a,b,c\n  b1,b2,b3=c,b,a\n  c1,c2,c3=b,a,c\n\
    \  d1,d2,d3=a,c,b\n  return a1==a2 and b1==b2 and c1==c2\n</code>\n<|/ a |>\n\
    <| c |>\n`a1,a2,a3 = (a, b, c)` would save you a variable assignment\n<|/ c |>\n\
    <| c |>\nThis is not checking for right angles. A triangle is right angled if\
    \ a1, b1 and c1 are the same.\n<|/ c |>\n<| c |>\nThe triangle is right if the\
    \ three points are the three vertices of a right triangle and are not equal. (For\
    \ a triangle, a, b, c form a right triangle).\n<|/ c |>\n<| c |>\nYou will get\
    \ the wrong result with this check `checkTriangle(0.2, 0.2, 0.2)` as `b2==b1`\
    \ is true.\n<|/ c |>\n<| a dscore=3 |>\n<code>\nfrom math import atan2, degrees",
  "    return 1 if $a > $b and $a > $c;\n    return 1 if $b > $c and $b > $a;\n  \
    \  return \"\";\n}", "    \n    # Check if any angle is over 90 degree.\n    if($a\
    \ eq $b or $a eq $c or $b eq $c) {\n        return \"\";\n    }", "    return\
    \ 1 if (($a + $b > $c) && ($a + $c > $b) && ($b + $c > $a));\n    return '';\n\
    }", "    # Handle trivial cases.\n    return if ($a == $b) || ($a == $c) || ($b\
    \ == $c);\n    return if (abs($a - $b) + abs($a - $c) + abs($b - $c) > 1);\n \
    \   $a > $b ? ($a > $c ? \"right\" : \"left\")\n         : ($b > $c ? \"right\"\
    \ : \"left\");\n}", "    my $s = ($a + $b + $c)/2;\n    if ($a == $b and $s ==\
    \ $c) {\n\treturn \"1\";\n    }\n    if ($a == $c) {\n\treturn \"90\";\n    }\n\
    \    if ($b == $c) {\n\treturn \"180\";\n    }\n    return \"0\";\n}", "    return\
    \ undef unless $a > $b && $a > $c;\n    return undef if $b > $c;\n    my($e, $f,\
    \ $g) = ($c, $a, $b);\n    if ($a - $b > $c - $a) {\n        return undef if $a\
    \ > $b;\n        return undef if $c > $b;\n        return undef if $a > $c;\n\
    \        return undef if $c > $a;\n        $e = $a; $f = $b; $g = $c;\n    }\n\
    \    $e = $b; $f = $c; $g = $a;\n    return undef if $f > $g;\n    return undef\
    \ if $e > $g;\n    $e = $c; $f = $a; $g = $b;\n    return undef if $f > $g;\n\
    \    return undef if $e > $g;\n    return 1;\n}\n</code>\n<|/ a |>\n<| a tags=perl,math,geometry\
    \ dscore=1 |>\nPerhaps I'm missing something, but why not just:\n<code>\nperl\
    \ -Mbignum -lwe'print bignum->new(0)->bsqrt(2)->numcmp(bignum->new(1)->bsqrt(2)->numcmp(bignum->new(1)->bsqrt(2)->numcmp(bignum->new(5)->bsqrt(2)->numcmp(bignum->new(10)->bsqrt(2)->numcmp(bignum->new(7)->bsqrt(2)->numcmp(bignum->new(4)->bsqrt(2)->numcmp(bignum->new(12)->bsqrt(2)->numcmp(bignum->new(1)->bsqrt(2)->numcmp(bignum->new(0)->bsqrt(2)->numcmp(bignum->new(0)->bsqrt(2)->numcmp(bignum->new(0)->bsqrt(2)->numcmp(bignum->new(0)->bsqrt(2)->numcmp(bignum->new(0)->bsqrt(2)->numcmp(bignum->new(0)->bsqrt(2)->numcmp(bignum->new(0)->bsqrt(2)->numcmp(bignum->new(0)->bsqrt(2)->numcmp(bignum->new(0)->bsqrt(2)->numcmp(bignum->new(0)->bsqrt(2)->numcmp(bignum->new(0)->bsqrt(2)->numcmp(bignum->new(0)->bsqrt(2)->numcmp(bignum->new(0)->bsqrt(2)->numcmp(bignum->new(0)",
  "    my $sum = $a + $b + $c;\n    if ($sum == ($a + $b + $c)/2){\n        return\
    \ 1;\n    } elsif ($sum > $a + $b + $c){\n        return \"\";\n    } elsif ($sum\
    \ > $a + $c + $b){\n        return \"\";\n    } elsif ($sum > $c + $b + $a){\n\
    \        return \"\";\n    } else {\n        return \"\";\n    }\n}\n</code>\n\
    <|/ a tags=perl |>\n<| a tags=perl |>\nJust for fun, here's a solution without\
    \ any packages:\n<code>", "    return 1 if $a == $c or $b == $c or $a == $b;\n\
    \    return '';\n}", "    my $result = 0;\n    my $a = $a < $b ? $a : $b;\n  \
    \  my $b = $c < $a ? $c : $a;\n    my $c = $b < $c ? $b : $c;\n    my $ab = ($b\
    \ - $a);\n    my $bc = ($c - $b);\n    my $ac_ab = ($c - $a);\n    my $ab_ac =\
    \ ($ab * $ac_ab);\n    my $ab_ac_bc = ($ab * $bc);\n    my $ac_bc_ab = ($ac *\
    \ $ab);\n    my $bc__ac = ($bc * $ac_ab);\n    my $ab__ac_bc = ($ab * $ac_bc);\n\
    \    my $ab__ac_bc__ac = ($ab__ac_bc * $ac_ab);\n    if ($ab_ac_bc >= $ab_ac)\
    \ {\n\t$result++;\n    } else {\n\t$result = $ab_ac_bc >= $ab__ac_bc__ac ? 1 :\
    \ 0;\n    }\n    $result;\n}", "    return 1 if ($a + $b > $c and $a + $c > $b\
    \ and $b + $c > $a);\n    return \"\";\n}", "    if($a<$b && $a<$c){\n       \
    \ if($b<$c || $a==$b || $a==$c){\n            $ret=1;\n        }else{\n      \
    \      $ret=\"\";\n        }\n    }else{\n        if($b<$c || $b==$c || $a==$b){\n\
    \            $ret=1;\n        }else{\n            $ret=\"\";\n        }\n    }\n\
    \    return $ret;\n}", "    my ($ax, $bx, $cx, $ax2, $bx2, $cx2, $ax3, $bx3, $cx3)\
    \ = @_;\n    $ax2 = $ax * $ax;\n    $bx2 = $bx * $bx;\n    $cx2 = $cx * $cx;\n\
    \    $ax3 = $ax2 * $ax;\n    $bx3 = $bx2 * $bx;\n    $cx3 = $cx2 * $cx;\n    $ax3\
    \ != $bx3 && $ax3 != $cx3 && $bx3 != $cx3 && $ax3 != $ax2;\n}", "    return undef\
    \ if $a + $b + $c < 0;\n    return undef if $a + $b > $c;\n    return undef if\
    \ $a + $c > $b;\n    return undef if $a + $c > $b;\n    if ($a == $b)\n    {\n\
    \        return 1;\n    }\n    elsif ($a < $c)\n    {\n        return 0;\n   \
    \ }\n    else\n    {\n        return 1;\n    }\n}", "    $c = $c - $b if $b >\
    \ $c;\n    my $result;\n    if( $a == $b ) {\n        if( $a <= $c ) {\n     \
    \       $result = \"\";\n        } else {\n            $result = \"a\";\n    \
    \    }\n    } elsif ($a == $c ) {\n        $result = \"b\";\n    } elsif ($b ==\
    \ $c ) {\n        $result = \"c\";\n    } else {\n        $result = \"a$b$c\"\
    ;\n    }\n    return $result;\n}", "    \n    return 1 if $a > $b && $a > $c;\n\
    \    return 1 if $b > $c && $b > $a;\n    return 1 if $c > $a && $c > $b;\n  \
    \  \n    return \"Not a triangle\";\n}", "    if($a <= $b and $a <= $c) {\n\t\
    $_->[1]\n    }\n    elsif ($b <= $a and $b <= $c) {\n\t\"\";\n    }\n    elsif\
    \ ($c <= $a and $c <= $b) {\n\t\"\";\n    }\n}", "    my $det = $a * $c - $b *\
    \ $a;\n    $det < 0 ||\n        ($det == 0 and ($b * $c + $a * $a > 0)) or\n \
    \       0;\n}", "    my $xb = $b/$a;\n    my $yc = $c/$a;\n    my $xc = $c/$b;\n\
    \    my $ya = $a/$b;\n    if($a*$a+$b*$b+$c*$c-$a*$c-$b*$b-$c*$c < 0){\n     \
    \   return 1;\n    } else {\n        return \"\" if abs($acos(abs($xb)*$xb + $yb*$yb\
    \ + $xc*$xc)) > $acos(abs($yc));\n    }\n}", "    \n    # if the triangle is vertical\
    \ or parallel return an empty string\n    if(($a eq 3) || ($b eq 3) || ($c eq\
    \ 3)) { return \"\"; }\n    \n    # if the length of the side is less than 1 return\
    \ an empty string\n    if($a eq 1 || $b eq 1 || $c eq 1) { return \"\"; }\n  \
    \  \n    # if the length of the side is greater than the length of the other 2\
    \ sides\n    # return an empty string\n    if(($a > $b) && ($a > $c)) { return\
    \ \"\"; }\n    \n    # if the length is equal to the length of the other 2 sides\
    \ return 1\n    if(($a == $b) && ($a == $c)) { return 1; }\n    \n    # if the\
    \ length is less than the length of the other 2 sides return 0\n    if(($a < $b)\
    \ && ($a < $c)) { return 0; }\n    \n    # if the length of sides are equal, then\
    \ one of the two sides is greater than the\n    # length of the other. We need\
    \ to check if the other two sides are greater than \n    # the length of the triangle\
    \ to find out if it's a right-angled triangle. \n    if($a > $c) {\n        my\
    \ $d = ($a + $b + $c)/2;\n        \n        if($a > $b) {\n            my $e =\
    \ $d - $c;\n            \n            if($a > $c) {\n                return 1;\n\
    \            }\n        }\n        \n        if($a > $c) {\n            my $e\
    \ = $c - $a;\n            \n            if($e > $b) {\n                return\
    \ 1;\n            }\n        }\n        \n        if($e > $b) {\n            my\
    \ $d = ($a + $b + $c)/2;\n            \n            if($e > $c) {\n          \
    \      return 1;\n            }\n        }\n    }\n    \n    if($c > $b) {\n \
    \       my $d = ($a + $b + $c)/2;\n        \n        if($c > $b) {\n         \
    \   my $e = $d - $a;\n            \n            if($c > $a) {\n              \
    \  return 1;\n            }\n        }\n        \n        if($c > $a) {\n    \
    \        my $e = $a - $c;\n            \n            if($e > $b) {\n         \
    \       return 1;\n            }\n        }\n        \n        if($e > $b) {\n\
    \            my $d = ($a + $b + $c)/2;\n            \n            if($e > $a)\
    \ {\n                return 1;\n            }\n        }\n    }\n    \n    # if\
    \ the length of sides are equal, then one of the two sides is greater than the\n\
    \    # length of the other. We need to check if the other two sides are greater\
    \ than \n    # the length of the triangle to find out if it's a right-angled triangle.\n\
    \    if($b > $c) {\n        my $d = ($a + $b + ", "    $a <=> $b and $a <=> $c\
    \ and \n    $b<=> $c and\n    $a != $b and $a != $c and\n    $b != $c and\n  \
    \  $a != $b and $a != $c and\n    $b != $c;\n}", "    $a * $c > $b * $c ? 1 :\
    \ 0;\n}", "    # Only right angled triangle\n    if ($a > $b) {\n        if ($b\
    \ > $c) {\n            return 1;\n        } else {\n            return 0;\n  \
    \      }\n    } elsif ($b > $c) {\n        return 1;\n    } else {\n        return\
    \ 0;\n    }\n}", "    $a > $b ? $a : $b > $c ? $b : $c;\n}", "    return 1 if\
    \ ($a + $b > $c && $a + $c > $b && $c + $b > $a);\n    return \"\";\n}", "   \
    \ my $result = 0;\n    if ($a < $b && $a < $c) {\n        $result = 1;\n    }\n\
    \    elsif ($b < $c && $b < $a) {\n        $result = 1;\n    }\n    elsif ($c\
    \ < $a && $c < $b) {\n        $result = 1;\n    }\n    elsif ($a > $b && $a >\
    \ $c) {\n        $result = 1;\n    }\n    elsif ($b > $c && $b > $a) {\n     \
    \   $result = 1;\n    }\n    elsif ($c > $a && $c > $b) {\n        $result = 1;\n\
    \    }\n    return $result;\n}", "    \n    my $ab = $a - $b;\n    my $bc = $b\
    \ - $c;\n    my $ac = $a - $c;\n    \n    return 1 if ab != bc && ab != ac;\n\
    \    return \"\";\n}\n</code>\n<|/ a tags=algorithm,perl,perl-data-structures\
    \ dscore=2 |>\n<| c |>\nThis fails for `right_angle_triangle(0, 2, 0)`. Should\
    \ be returning `\"\"`, not `1`.\n<|/ c |>\n<| a dscore=1 |>\nThis works for me,\
    \ it's more of a quick and dirty test than a proof\n<code>", "    my $is_right_angle\
    \ = 0;\n    my $diff = $b - $c;\n    if($a == $b and $a == $c) {\n        $is_right_angle\
    \ = 1;\n    }\n    elsif($diff > 0 and $diff < 180) {\n        $is_right_angle\
    \ = 1;\n    }\n    return $is_right_angle;\n}", "    return 1 if ($b - $a == $c\
    \ - $a);\n    return '' if ($a + $b < $a + $c || $a + $c < $a + $b);\n    return\
    \ '' if ($b - $c < $a - $b);\n    return '' if ($a - $b < $a - $c);\n    return\
    \ '';\n}", "    return 1 if ($b > $c || $a > $c);\n    return 1 if ($a > $b and\
    \ $a > $c);\n    return 1 if ($c > $b and $c > $a);\n    return 1;\n}", "    if(\
    \ $a > $b && $a > $c ) {\n        return 1;\n    }\n    return \"\";\n}", "  \
    \  return \"\" unless length($a + $b + $c) == 3;\n    return $a eq $c || $b eq\
    \ $c || $a eq $b;\n}", "    return 1 if $a + $b > $c;\n    return 1 if $a + $b\
    \ == $c;\n    return 1 if $a + $b <= $c || $b + $c <= $a;\n    return;\n}", " \
    \   if ($a > $b && $a > $c) {\n        my $d = ($a + $b) * ($b + $c);\n      \
    \  if ($d > $a) {\n            $a -= $d;\n            $b -= $d;\n            $c\
    \ -= $d;\n        }\n    }\n    $a == $b or $c == $b;\n}", "    my $d = $a+$b+$c;\n\
    \    my $a = $a - $d;\n    my $b = $d - $b;\n    my $c = $a - $c;\n    if($a==$b\
    \ and $a==$c or $c==$b)\n    {\n        return 1;\n    }\n    else \n    {\n \
    \       return 0;\n    }\n}", "    \n    # Check if the three sides are equal\
    \ (triangle is equilateral)\n    if($a != $b && $a != $c) {\n        return 0;\n\
    \    }\n    \n    # Check if the three sides are equal (triangle is isosceles)\n\
    \    elsif($a == $b || $a == $c) {\n        if($b == $c) {\n            return\
    \ 0;\n        } else {\n            return 1;\n        }\n    } elsif($b == $c)\
    \ {\n        return 1;\n    } else {\n        # One of the two triangles has a\
    \ side which is not a right angle. \n        # This is a right-angled triangle.\n\
    \        return 1;\n    }\n}", "    if ($b > $a && $c > $a) {\n        return\
    \ 1;\n    }\n    if ($a > $c && $b > $c) {\n        return 1;\n    }\n    return\
    \ 0;\n}", "    return 1 if $b > $c and $b > $a;\n    return 1 if $c > $a and $c\
    \ > $b;\n}", "    return 1 if $a + $b > $c ||\n        1 if $a + $b == $c ||\n\
    \        1 if $a + $b == $c + 1;\n    return \"\";\n}", "    my $d; # discriminant\n\
    \    if ($b == $c){ # triangle\n        $d = 0; \n    } elsif($b < $c && $b !=\
    \ 0){ # no right angle \n        $d = -1; \n    } else {\n        $d = 1; \n \
    \   }\n    return $d != 0;\n}", "    $a != $b && $a != $c && $b != $c || return\
    \ 0;\n    my $v1 = ($a < $b) ? $a : $b;\n    my $v2 = ($c < $a) ? $c : $a;\n \
    \   my $v3 = $v1 + $v2;\n    my $u1 = ($v1 < $v2) ? $v1 : $v2;\n    my $u2 = ($v2\
    \ < $v1) ? $v2 : $v1;\n    return $u1 == $u2 || $u1 > $u2;\n}", "    if ($a eq\
    \ 1 && $b == $c && $a == $c) {\n\tprint \"OK!\\n\";\n    } else {\n\tprint \"\
    FAIL!\\n\";\n    }\n}", "    # Return an empty string if the three sides are equal.\
    \  \n    # Otherwise, check each of $a, $b, and $c to see whether they are \n\
    \    # in the right angled triangle.\n    return '' if $a == $b || $a == $c ||\
    \ $b == $c;\n    return \"$a is the right angle of $c\" if ($a > $b && $a > $c);\n\
    \    return \"$b is the right angle of $c\" if ($b > $a && $b > $c);\n    return\
    \ \"$c is the right angle of $a\" if ($c > $a && $c > $b);\n}", "    my ($xa,\
    \ $ya, $za, $xb, $yb, $zb, $xc, $yc, $zc) = @{$_}{qw(a b c)};\n    my $rad = $a\
    \ > $b ? $a : $b;\n    my $ang = 2*3.141592653589793/$rad;\n    my $xx = $xa +\
    \ $xb;\n    my $yy = $ya + $yb;\n    my $zz = $za + $zb;\n    my $w = $ang > 0\
    \ ? sqrt($xx*$xx + $yy*$yy + $zz*$zz) : 0;\n    if ($w > $c) {\n        return\
    \ 0;\n    }\n    return 1;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
