name: HumanEval_29_filter_by_prefix
language: pl
prompt: "# Filter an input array of strings only for ones that start with a given\
  \ prefix.\n# >>> filter_by_prefix([], \"a\")\n# []\n# >>> filter_by_prefix([\"abc\"\
  , \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\nsub filter_by_prefix\
  \ {\n    my($strings, $prefix) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_by_prefix;\n\
  \        if(eq_deeply($candidate->([], \"john\"),[])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"xxx\", \"asd\"\
  , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"\
  xxx\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ['    my @results = ();', '    my @retval = ();', '    my($first) = shift
    @$strings;', "    my(@filtered) = (\"\");\n    foreach my $string (@$strings)\
    \ {\n        if(length($string) >= length($prefix)) {\n            if(substr($string,\
    \ 0, length($prefix)) == $prefix) {\n                push(@filtered, $string);\n\
    \            }\n        }\n    }\n    @filtered;\n}", "    my(@results) = ();\n\
    \    foreach my $string ($strings) {\n\tif (index($string, $prefix) == 0) {\n\t\
    \    push(@results, $string);\n\t}\n    }\n    return @results;\n}", "    return\
    \ () unless @$strings;\n    my $len = length $prefix;\n    return () unless $len\
    \ == length $strings[0] || substr($strings[0],0,$len) eq $prefix;\n    return\
    \ @$strings;\n}", "    my(@filtered) = (0, 0);\n    foreach my $string (@$strings)\
    \ {\n        if (index($string, $prefix) == 0) {\n            $filtered[0]++;\n\
    \            push(@filtered, $string);\n        }\n    }\n    return @filtered;\n\
    }\n</code>\n<|/ a tags=perl,arrays,subroutine |>\n<| c |>\nNice.  My only suggestion\
    \ would be to return `@filtered` rather than `undef`.  Then people can chain `map`\
    \ calls.  Also, you could rewrite `map` as `grep`: `map{...} grep {...};`\n<|/\
    \ c |>\n<| c |>\nYes, I'd also return an array. However, I wanted to keep the\
    \ solution simple for the OP.\n<|/ c |>\n<| c |>\nIt would also help to explain\
    \ to OP that subroutines return their last statement implicitly if nothing is\
    \ assigned.  This would make the code more readable and would not be a problem\
    \ in this example.\n<|/ c |>\n<| c |>\n: I believe that `@filtered` isn't being\
    \ initialised? But I could be wrong?\n<|/ c |>\n<| c |>\nNo, `@filtered` is initialized\
    \ to `(0,0)`.  You could just do `my $filtered = (0, 0);` and the same would be\
    \ true for `@filtered`.\n<|/ c |>\n<| a |>\nThis is how I would do it:\n<code>",
  "    my(@filtered);\n    foreach my $string ($strings) {\n        push (@filtered,\
    \ $string) unless $string =~ /^$prefix/;\n    }\n    return @filtered;\n}", " \
    \   my($result);\n    $prefix = lc($prefix);\n    foreach my $string (@$strings)\
    \ {\n        if ($string =~ /^($prefix)\\w+$/i) {\n            push(@$result,\
    \ $string);\n        }\n    }\n    return @$result;\n}", '    my @result;', '    return
    unless @$strings;', "    return grep {!/^$prefix/} @$strings;\n}", "    my(@filtered);\n\
    \    foreach my $string (@$strings) {\n        push(@filtered, $string) if $string\
    \ =~ /^$prefix/;\n    }\n    return @filtered;\n}", '    my @result;', '    return
    @$strings if scalar(@$strings) <= 1;', "    my ($ret);\n    foreach my $s (@$strings)\
    \ {\n        if ( $s =~ /^$prefix/ ) {\n            $ret .= $s;\n        }\n \
    \   }\n    return $ret;\n}", "    my @matches = ();\n    foreach my $s (@$strings)\
    \ {\n        if (substr($s, 0, length($prefix)) == $prefix) {\n            push(@matches,\
    \ $s);\n        }\n    }\n    return @matches;\n}", "    my @filtered_strings;\n\
    \    foreach my $string (@$strings) {\n        next if $string eq $prefix or $string\
    \ =~ /^($prefix)([^$prefix])/;\n        push @filtered_strings, $string;\n   \
    \ }\n    return @filtered_strings;\n}", "    my(@filtered);\n    foreach my $s\
    \ (@$strings) {\n        if(substr($s, 0, length($prefix)) == $prefix) {\n   \
    \         push(@filtered, $s);\n        }\n    }\n    return @filtered;\n}", " \
    \   my(@results) = ();\n    foreach my $string (@$strings) {\n        if (index($string,\
    \ $prefix) == 0) {\n            push(@results, $string);\n        }\n    }\n \
    \   @results;\n}", "    my @return = ();\n    foreach my $string (@$strings) {\n\
    \        next if ($string eq \"\" || $string eq \".\" || $string eq \"..\");\n\
    \        if (index($string, $prefix) == 0) {\n            push(@return, $string);\n\
    \        }\n    }\n    return @return;\n}", "    $prefix = lc($prefix);\n    return\
    \ grep {substr($_, 0, length($prefix)) == $prefix} @$strings;\n}", "    $prefix\
    \ ||= \"\";\n    $prefix = uc($prefix);\n    grep {\n        my ($x) = $_ =~ m/^$prefix/;\n\
    \        $x ? $_ :\n    } @$strings;\n}", "    my @results;\n    foreach my $string\
    \ ($strings) {\n        if (substr($string, 0, length($prefix)) == $prefix) {\n\
    \            push(@results, $string);\n        }\n    }\n    return @results;\n\
    }", "    $prefix ||= '^';", "    my($filtered) = ();\n    foreach my $string (@$strings)\
    \ {\n        if (substr($string, 0, length($prefix)) eq $prefix) {\n         \
    \   $filtered->[$#filtered] = $string;\n        }\n    }\n    return @$filtered\
    \ unless wantarray;\n    return @$filtered;\n}", "    my(@filtered) = (0, 0);\n\
    \    foreach my $string (@$strings) {\n        if (substr($string, 0, length($prefix))\
    \ eq $prefix) {\n            push(@filtered, $string);\n            ++ $filtered[$_];\
    \ # Count how many there are\n        }\n    }\n    return wantarray ? @filtered\
    \ : \\@filtered;\n}", "    return @$strings if scalar @$strings == 0;\n    my\
    \ @filtered_strings = ();\n    foreach my $string (@$strings) {\n        push\
    \ @filtered_strings, $string if $string =~ /^$prefix/i;\n    }\n    return @filtered_strings;\n\
    }", "    my @results;\n    foreach my $string ($strings) {\n        if (substr($string,\
    \ 0, length($prefix)) == $prefix) {\n            push @results, $string;\n   \
    \     }\n    }\n    return @results;\n}", "    my(@filtered);\n    foreach my\
    \ $string (@$strings) {\n        my $prefixed = $string;\n        if($prefix eq\
    \ \"\") {\n            push(@filtered, $string);\n        } else {\n         \
    \   if(($string =~ /^$prefix/) || ($string =~ /^[^$prefix]+$/)) {\n          \
    \      push(@filtered, $string);\n            }\n        }\n    }\n    return\
    \ \\@filtered;\n}", "    return unless @$strings;\n    return @$strings if $prefix\
    \ eq '*';", "    my(@result) = [];\n    $prefix = lc($prefix);\n    foreach my\
    \ $s (@$strings) {\n        next if $s eq $prefix;\n        push(@result, $s);\n\
    \    }\n    return @result;\n}", "    my @out;\n    foreach my $string (@$strings)\
    \ {\n        if (substr($string, 0, length($prefix)) == $prefix) {\n         \
    \   push(@out, $string);\n        }\n    }\n    return @out;\n}", "    my @found;\n\
    \    foreach my $string ( @{$strings} ) {\n        push (@found, $string) if substr($string,\
    \ 0, length($prefix)) == $prefix;\n    }\n    return @found;\n}", "    my @ret;\n\
    \    foreach my $str (@$strings) {\n        if ($str =~ /^$prefix/) {\n      \
    \      push @ret, $$str;\n        }\n    }\n    @ret;\n}", "    $prefix ||= \"\
    \";\n    my(@output);", "    my(@filtered);\n    foreach my $string (@$strings)\
    \ {\n        if (index($string, $prefix) == 0) {\n            push(@filtered,\
    \ $string);\n        }\n    }\n    return @filtered;\n}", "    my @result = ();\n\
    \    $prefix ||= \"\";\n    # Slurp the input to handle file names that contain\
    \ newlines.\n    my $slurp_input = $strings;\n    $slurp_input =~ s/[\\r\\n]*$//;\n\
    \    # Filter the input strings just once, using a hash for fast lookup.\n   \
    \ my %seen;\n    my @strings = split(\" \", $slurp_input);\n    for (@strings)\
    \ {\n        my $stripped = lc($_);\n        # Skip blank lines.\n        if ($stripped\
    \ =~ /^\\s*$/) {\n            next;\n        }\n        # Skip lines that don't\
    \ start with the given prefix.\n        if ($stripped !~ /^$prefix/) {\n     \
    \       push @result, $_;\n            next;\n        }\n        $seen{$stripped}++;\n\
    \    }\n    return @result;\n}", "    my $result = $strings;\n    foreach my $string\
    \ ($strings) {\n        if (substr($string, 0, length($prefix)) == $prefix) {\n\
    \            $result = $string;\n            last;\n        }\n    }\n    return\
    \ $result;\n}", "    my @filtered_strings = ();\n    for my $string (@$strings)\
    \ {\n        if (index($string, $prefix) == 0) {\n            push(@filtered_strings,\
    \ $string);\n        }\n    }\n    return @filtered_strings;\n}", "    my @filtered\
    \ = ();\n    foreach my $string (@$strings) {\n        if (index($prefix, $string)\
    \ == 0) {\n            push(@filtered, $string);\n        }\n    }\n    return\
    \ @filtered;\n}", "    my @filtered = ();\n    \n    foreach my $string (@$strings)\
    \ {\n        if (index($string, $prefix) == 0) {\n            push(@filtered,\
    \ $string);\n        }\n    }\n    \n    return @filtered;\n}", "    my(@filtered);\n\
    \    foreach my $string (undef,$strings) {\n        if ($string !~ /^$prefix/)\
    \ {\n            push(@filtered, $string);\n        }\n    }\n    return @filtered;\n\
    }", "    $strings //= ();\n    map { $_ =~ /^$prefix/ ? $_ : () } @$strings;\n\
    }", "    my @filtered = ();\n    for my $string (@$strings) {\n        if ($string\
    \ =~ /^$prefix/) {\n            push(@filtered, $string);\n        }\n    }\n\
    \    return @filtered;\n}", "    $prefix ||= '\\0';\n    my @result = grep { substr($_,\
    \ 0, length($prefix)) eq $prefix } @$strings;\n    return @result unless wantarray;\n\
    \    return @result;\n}", "    my(@filtered);\n    foreach my $string (@$strings)\
    \ {\n        push (@filtered, $string) if $string =~ /^$prefix/;\n    }\n    return\
    \ @filtered;\n}", "    return unless @$strings;\n    @$strings = grep { substr($_,\
    \ 0) eq $prefix } @$strings;\n    @$strings;\n}", "    my $ret = [];\n    foreach\
    \ (@$strings) {\n        my $candidate = $_;\n        $candidate =~ /^$prefix/;\n\
    \        push(@$ret, $candidate);\n    }\n    return @$ret;\n}\n</code>\nThis\
    \ takes advantage of the fact that regex quantifiers are greedy, so that they\
    \ match as many characters as they can.  This will prevent false matches if your\
    \ prefix is at the end of a string you are matching against.\n<|/ a tags=perl,regex,string\
    \ |>\n<| a |>\nIf you want more flexible filtering, you can easily add more terms\
    \ to your existing regex. The following is a simple example of a more complicated\
    \ filter.\n<code>", "    my @filtered;\n    foreach my $string (@$strings) {\n\
    \        if ($string =~ m/^$prefix/) {\n            push(@filtered, $string);\n\
    \        }\n    }\n    @filtered;\n}", "    return grep { substr($_, 0) eq $prefix\
    \ } @$strings;\n}", "    my @results;\n    my $string = $strings[0];\n    my $prefix\
    \ = $prefix;\n    $prefix =~ s/^\\s+//;\n    $prefix =~ s/\\s+$//;", "    return\
    \ grep { $_ !~ /^$prefix/ } @$strings;\n}", "    my @filtered = ();\n    foreach\
    \ my $string (@$strings) {\n        push (@filtered, $string) if ($prefix eq $string);\n\
    \    }\n    return @filtered;\n}", "    my @results = ();\n    foreach my $string\
    \ (@$strings) {\n        if (index($prefix, $string) == 0) {\n            push(@results,\
    \ $string);\n        }\n    }\n    return @results;\n}", "    my @ret;\n    my\
    \ $idx = 0;\n    foreach my $s (@$strings) {\n        if ($s =~ /^$prefix/) {\n\
    \            $ret[$idx++] = $s;\n        }\n    }\n    return @ret;\n}", '    my(@result);',
  "    return @$strings if !defined($prefix) || !defined($strings);\n    return grep\
    \ {$_ !~ /^$prefix/} @$strings;\n}", "    return $strings if $prefix eq ''; #\
    \ Empty prefix is allowed.\n    my @results = ();\n    for my $s (@$strings) {\n\
    \        return @results if $s =~ /^$prefix/;\n        push(@results, $s);\n \
    \   }\n    return @results;\n}", "    return @$strings[$prefix eq ''] || grep\
    \ { substr($_, length($prefix)) eq $prefix } @$strings;\n}", '    my @filtered_strings;',
  "    my @candidates = ();\n    for my $string (@$strings) {\n        return @candidates\
    \ if $prefix eq '' || index($string, $prefix) == 0;\n        push(@candidates,\
    \ $string);\n    }\n    return @candidates;\n}", "    my $filtered = ();\n   \
    \ for (@$strings) {\n        if (index($_, $prefix) == 0) {\n            $filtered\
    \ += ($_);\n        }\n    }\n    return $filtered;\n}", "    my @ret;\n    \n\
    \    foreach my $string (@$strings) {\n        if (substr($string, 0, length($prefix))\
    \ == $prefix) {\n            push @ret, @$strings;\n        }\n    }\n    return\
    \ @ret;\n}", '    my(@filtered);', "    $prefix ||= \"\";\n    grep { substr($_,\
    \ 0, length($prefix)) = $prefix } @$strings;\n}", "    my @out;\n    foreach my\
    \ $str (@$strings) {\n        next if index($str, $prefix) == 0;\n        push\
    \ @out, $str;\n    }\n    @out;\n}", "    return grep {\n        my $string =\
    \ $_;\n        return substr($string, 0, length($prefix)) eq $prefix\n    } @$strings;\n\
    }", "    my $regex = qr/^$prefix/;\n    return grep(!m/$regex/i, @$strings);\n\
    }", "    my @ret;\n    if (@_ == 1) {\n        @ret = $strings if $strings;\n\
    \    } else {\n        while (@$strings) {\n            my $str = shift;\n   \
    \         if ($str =~ /^$prefix/) {\n                push(@ret, @$strings);\n\
    \                @$strings = ();\n            }\n        }\n    }\n    return\
    \ @ret;\n}", "    my @result = ();\n    for (@$strings) {\n        if (substr($_,\
    \ 0, length($prefix)) == $prefix) {\n            push(@result, $_);\n        }\n\
    \    }\n    return @result;\n}", "    @$strings = grep { length($_) and substr($_,\
    \ 0, length($prefix)) eq $prefix } @$strings;\n    return @$strings;\n}", "  \
    \  my($new_strings);\n    my($strings_length) = @$strings;\n    my $prefix_length\
    \ = length($prefix);", "    my @filtered_strings;\n    for my $str (@$strings)\
    \ {\n        if ($str =~ /^$prefix/i) {\n            push @filtered_strings, $str;\n\
    \        }\n    }\n    return @filtered_strings;\n}", "    my $result = ();\n\
    \    foreach my $string (@$strings) {\n        next if !$string || index($string,\
    \ $prefix) == -1;\n        $result->[$_] = $string for 0 .. index($string, $prefix)\
    \ - 1;\n    }\n    @$result = map { length $_ ? () : $_ } @$result;\n    return\
    \ @$result;\n}", "    my @filtered;\n    foreach my $s (@$strings) {\n       \
    \ push (@filtered, $s) if substr($s, 0, length($prefix)) eq $prefix;\n    }\n\
    \    return @filtered;\n}", "    my @strings_to_filter;\n    push @strings_to_filter,\
    \ $strings[0] unless $strings[0] =~ /^$prefix/i;\n    $strings[0] =~ /^$prefix/\
    \ and push @strings_to_filter, $strings[0]\n        if @$strings > 1;\n    my\
    \ $result = @$strings_to_filter;\n    map {\n        $result->[$_] = $_\n    \
    \        if $strings_to_filter->[$_] =~ /^$prefix/i;\n    } 0 .. @$strings_to_filter\
    \ - 1;\n    $result;\n}", "    my(@result);\n    foreach my $string (@$strings)\
    \ {\n\tif (index($string, $prefix) == 0) {\n\t    push(@result, $string);\n\t\
    }\n    }\n    return @result;\n}", "    my @filtered = ();\n    foreach my $string\
    \ ($strings) {\n        if ($string =~ /^$prefix/) {\n            push(@filtered,\
    \ $string);\n        }\n    }\n    return @filtered;\n}", "    my @results;\n\
    \    foreach my $str (@$strings) {\n        if ($str =~ /^$prefix/) {\n      \
    \      push(@results, $str);\n        }\n    }\n    return @results;\n}", "  \
    \  return grep(!m/^/, @$strings) if $prefix eq '';\n    my @filtered = ();\n \
    \   foreach my $string (@$strings) {\n        next if $string =~ /^$prefix/;\n\
    \        push(@filtered, $string);\n    }\n    return @filtered;\n}", "    my\
    \ @result = ();\n    my $i;\n    foreach $i (0 .. $#$strings) {\n        if (substr($strings[$i],\
    \ 0, length($prefix)) == $prefix) {\n            push(@result, $strings[$i]);\n\
    \        }\n    }\n    return @result;\n}", "    my @new_strings;\n    foreach\
    \ my $s (@$strings) {\n        if (index($s, $prefix) == 0) {\n            push(@new_strings,\
    \ $s);\n        }\n    }\n    return @new_strings;\n}", "    my @candidates =\
    \ ();\n    foreach my $string ($strings) {\n        if ($prefix eq \"\") {\n \
    \           push @candidates, $string;\n        } elsif ($string =~ /^$prefix/)\
    \ {\n            push @candidates, $string;\n        }\n    }\n    return @candidates;\n\
    }", "    my @filtered_strings;\n    foreach (@$strings) {\n        next if $_\
    \ eq $prefix;\n        push(@filtered_strings, $_);\n    }\n    return @filtered_strings;\n\
    }", "    my $ret = [];\n    grep { $_ =~ /^$prefix/ } @$strings;\n    return @$ret\
    \ if wantarray;\n    return $ret[0];\n}", "    my $regex = quotemeta($prefix);\n\
    \    $regex .= $prefix;\n    grep { m/$regex/ } @$strings;\n}", '    my(@filterd_strings);',
  "    my @result = ();\n    foreach my $string ($strings) {\n        if (substr($string,\
    \ 0, length($prefix)) == $prefix) {\n            push(@result, $string);\n   \
    \     }\n    }\n    return @result;\n}", "    return @$strings =~ /^$prefix/\n\
    \      ? map { substr($_, 0, length($prefix)) } @$strings\n      : $strings;\n\
    }", "    return unless @_;\n    my @out = ();\n    my $pref = $prefix;\n    for\
    \ (@$strings) {\n        if ( substr($_, 0, length($pref)) eq $prefix ) {\n  \
    \          push(@out, $_);\n        }\n    }\n    return @out;\n}", '    return
    unless @$strings;', "    my @results;\n    foreach my $s (@$strings) {\n     \
    \   if ($s =~ /^$prefix/) {\n            push(@results, $s);\n        }\n    }\n\
    \    @results;\n}", "    return @$strings[grep /^$prefix/, @$strings];\n}", " \
    \   my @filtered = ();\n    foreach my $string (@$strings) {\n        next if\
    \ $string =~ /^\\s*$/;\n        next if $string =~ /^$prefix/;\n        push(@filtered,\
    \ $string);\n    }\n    return @filtered;\n}", "    return [] unless @$strings;\n\
    \    my(@result) = [];\n    foreach my $str (@$strings) {\n        next if $prefix\
    \ eq \"\" && $str eq \"\";\n        return $str if $str eq $prefix;\n        push(@result,\
    \ $str);\n    }\n    @result;\n}", "    $prefix = lc($prefix);\n    my(@filtered);",
  "    my @result;\n    foreach my $string (@$strings) {\n        push(@result, $string)\
    \ if ($string =~ /^$prefix/);\n    }\n    return @result;\n}", '    my(@filtered);',
  "    return $strings if 0 == @$strings;\n    my(@filtered) = ([]);\n    foreach\
    \ my $string (@$strings) {\n        if($string =~ /^$prefix/) {\n            push(@filtered,\
    \ $string);\n        }\n    }\n    return @filtered;\n}", "    $prefix = uc($prefix);\n\
    \    return grep { substr($_, 0, length($prefix)) eq $prefix } @$strings;\n}",
  "    return @$strings if $strings == [] || ($strings->[0] =~ /^$prefix/);\n    return\
    \ @$strings if $strings->[0] eq $prefix;\n    return;\n}", "    return grep {\
    \ substr($_, 0, length($prefix)) eq $prefix } @$strings;\n}", "    $strings  \
    \ ||= [];\n    $prefix    ||= \"\";\n    $prefix =~ s/^\\s+//; # remove leading/trailing\
    \ whitespace\n    return unless @$strings and length $prefix;\n    grep { length($_)\
    \ < length $prefix } @$strings;\n}", "    my @return = [];\n    foreach my $string\
    \ ($strings) {\n        if(index($string, $prefix) == 0) {\n            push(@return,\
    \ $string);\n        }\n    }\n    return @return;\n}", "    my @out = ();\n \
    \   foreach my $string (@$strings) {\n        if (substr($string, 0, length($prefix))\
    \ = $prefix) {\n            push(@out, $string);\n        }\n    }\n    return\
    \ @out;\n}", "    $strings = @$strings if $strings == 1;\n    my @filtered = ();\n\
    \    foreach my $string ($strings) {\n\tmy $lc = lc($string);\n\tmy $prefix_length\
    \ = length($prefix);\n\tif ($lc =~ /^$prefix/) {\n\t    push @filtered, $string;\n\
    \t}\n\telsif ($lc !~ /^$prefix/) {\n\t    last;\n\t}\n    }\n    return @filtered;\n\
    }", '    return [] unless @$strings;', "    my $filtered = [];\n    foreach my\
    \ $string ($strings) {\n        next if length $string == 0 or substr($string,\
    \ 0, length($prefix)) ne $prefix;\n        push (@$filtered, $string);\n    }\n\
    \    return @$filtered;\n}", "    my $prefix_len = length($prefix);\n    if ($prefix_len\
    \ == 0) {\n        return $strings;\n    }\n    my = grep { substr($_, 0,  $prefix_len)\
    \ eq $prefix };\n    return @ret ? @ret : ();\n}", "    return if !$prefix ||\
    \ @$strings == 0;\n    my @result = ();\n    foreach my $s (@$strings) {\n   \
    \     push @result, $s if substr($s, 0, length($prefix)) == $prefix;\n    }\n\
    \    return @result;\n}", "    foreach my $string (@$strings) {\n        if (index($string,\
    \ $prefix) == 0) {\n            $strings[$string] = \"\";\n        }\n    }\n\
    \    return @$strings;\n}", "    my @filtered = ();\n    foreach my $str (@$strings)\
    \ {\n        if(substr($str, 0, length($prefix)) == $prefix) {\n            push(@filtered,\
    \ $str);\n        }\n    }\n    return @filtered;\n}", "    my(@results);\n  \
    \  foreach my $str (@$strings) {\n        if ($str =~ /^$prefix/) {\n        \
    \    push(@results, $str);\n        }\n    }\n    return @results;\n}", "    @$strings\
    \ = grep {\n        !($_ =~ /^$prefix/)\n    } @$strings;\n}", "    $prefix ||=\
    \ '';\n    $strings = $strings =~ /^\\Q$prefix\\E/\n                   ? grep\
    \ { /^\\Q$prefix\\E/ }\n                   : $strings;\n    return @$strings;\n\
    }", "    grep { substr($_, 0, length($prefix)) eq $prefix } @$strings;\n}", " \
    \   $prefix =~ s/^\\s+//;\n    $prefix =~ s/\\s+$//;\n    my(@results) = [];\n\
    \    foreach my $s (@$strings) {\n        next unless $s =~ /^$prefix/;\n    \
    \    push(@results, $s);\n    }\n    return @results;\n}", "    return grep {\
    \ $_ =~ /^$prefix/ } @$strings;\n}", "    my @filtered = ();\n    foreach (@$strings)\
    \ {\n        push(@filtered, $_ unless index($prefix, $_) == 0);\n    }\n    return\
    \ @filtered;\n}", '    my(@filtered);', "    my @filtered_strings = ();\n    foreach\
    \ my $string ($strings) {\n        push(@filtered_strings, $string) if substr($string,\
    \ 0, length($prefix)) eq $prefix;\n    }\n    return @filtered_strings;\n}", '    my
    @filtered = ();', "    my $filtered_strings;\n    my @filtered_strings;\n    foreach\
    \ my $string (@$strings) {\n        if ($string =~ /^$prefix/) {\n           \
    \ push(@filtered_strings, $string);\n        }\n    }\n    @$strings = @filtered_strings;\n\
    }", "    return () if @$strings == 0;\n    my @new_strings;\n    foreach my $string\
    \ (@$strings) {\n        if ($string =~ /^$prefix/) {\n            @new_strings\
    \ = @new_strings || ();\n            push(@new_strings, $string);\n        }\n\
    \    }\n    return @new_strings;\n}", "    return unless @$strings;\n    my @result\
    \ = ();\n    for my $str (@$strings) {\n        if ($str =~ /^$prefix/) {\n  \
    \          push(@result, $str);\n        }\n    }\n    @result;\n}", '    my @filtered_strings;',
  "    $prefix ||= \"\";\n    return grep { $_ !~ /^($prefix)/ } @$strings;\n}", " \
    \   my(@results) = [];\n    for my $string (@$strings) {\n        if ($string\
    \ =~ /^$prefix/) {\n            push(@results, $string);\n        }\n    }\n \
    \   return @results;\n}", "    my @out;\n    for (@$strings) {\n        next if\
    \ substr($_, 0) ne $prefix;\n        push(@out, $_);\n    }\n    return @out;\n\
    }", "    my(@filtered) = ();\n    foreach my $string (@$strings) {\n        if\
    \ ($string =~ /^$prefix/) {\n            push(@filtered, $string);\n        }\n\
    \    }\n    @$strings = @filtered;\n}", "    my @filtered = ();\n    foreach my\
    \ $string (@$strings) {\n        if (substr($string, 0, length($prefix)) eq $prefix)\
    \ {\n            push (@filtered, $string);\n        }\n    }\n    return @filtered;\n\
    }", "    $prefix = lc($prefix);\n    my %prefixes = map { $_ => 1 } split //,\
    \ $prefix;", '    my @result = ();', "    my(@results) = ();\n    foreach my $string\
    \ (@$strings) {\n        next unless ($string =~ m/^$prefix/);\n        push(@results,\
    \ $string);\n    }\n    return @results;\n}", "    my(@new_strings);\n    foreach\
    \ (@$strings) {\n        next if !defined $prefix || index($_, $prefix) == 0;\n\
    \        push(@new_strings, $_);\n    }\n    return @new_strings;\n}", '    my(@results);',
  "    my $prefix = $prefix || \"\";\n    my(@results);", "    my $regex = qr/^$prefix/;\n\
    \    return map {\n        grep { $_ ~~ $regex }\n    };\n}", "    my @result\
    \ = ();\n    my $prefixlength = length($prefix);", "    if (not defined $prefix\
    \ or not length($prefix)) {\n        return $strings;\n    }\n    # Filter out\
    \ non-strings in the array.\n    $strings =~ m{^$prefix} or next;", "    $strings\
    \ ||= [];\n    $prefix ||= \"\";\n    my @results = ();\n    foreach my $string\
    \ (@$strings) {\n        if ($string =~ /^$prefix/) {\n            push(@results,\
    \ $string);\n        }\n    }\n    return @results;\n}", '    return unless defined($prefix)
    && length($prefix);', "    my(@results);\n    foreach my $s (@$strings) {\n  \
    \      if (substr($s, 0, length($prefix)) eq $prefix) {\n            push(@results,\
    \ $s);\n        }\n    }\n    @results;\n}", "    my @filtered = ();\n    for\
    \ my $string (@$strings) {\n        if (index($string, $prefix) == 0) {\n    \
    \        push(@filtered, $string);\n        }\n    }\n    return @filtered;\n}",
  '    my $filtered_strings = $strings;', "    my $len = length($prefix);\n    my\
    \ $ret = [];\n    foreach my $string (@$strings) {\n        next if $string =~\
    \ /^\\s*$/;\n        next if $string =~ /^$prefix/;\n        push @$ret, substr($string,\
    \ 0, $len);\n    }\n    return @$ret;\n}", "    my(@filtered);\n    $prefix =\
    \ lc($prefix);\n    foreach my $string (@$strings) {\n        if(substr($string,\
    \ 0, length($prefix)) == $prefix) {\n            push(@filtered, $string);\n \
    \       }\n    }\n    return @filtered;\n}", "    my @return = ();\n    for my\
    \ $string (@$strings) {\n        push @return, $string if ( $string =~ /^$prefix/\
    \ );\n    }\n    return @return;\n}", "    $prefix =~ s/^\\s+//;\n    $prefix\
    \ =~ s/\\s+$//;\n    $strings = grep {/^$prefix/ }@$strings;\n    return @$strings;\n\
    }", "    if (not defined $prefix) {\n        return;\n    }", "    $strings =\
    \ $strings[] if !defined($strings);\n    my @result = ();\n    foreach my $s (@$strings)\
    \ {\n        push (@result, $s) if (substr($s, 0, length($prefix)) eq $prefix);\n\
    \    }\n    return @result;\n}", "    my @ret;\n    foreach my $string (@$strings)\
    \ {\n        next unless $string =~ /^$prefix/;\n        push(@ret, $$string);\n\
    \    }\n    return @ret;\n}", "    my(@filtered) = $strings;\n    foreach my $string\
    \ (@$strings) {\n        if(substr($string, 0, length($prefix)) eq $prefix) {\n\
    \            @filtered = grep(!/^$prefix/, @filtered);\n        }\n    }\n   \
    \ return @filtered;\n}", "    my %hash;\n    for my $string($strings) {\n    \
    \    $hash{$string} = 1\n            if length($string) > length($prefix);\n \
    \   }\n    return grep { $hash{$_} }\n       map { substr($_, 0, length($prefix))\
    \ }\n           sort { substr($a, 0, length($prefix)) cmp substr($b, 0, length($prefix))\
    \ }\n           keys %hash;\n}", "    return grep { substr($_, 0, length($prefix))\
    \ == $prefix } @$strings;\n}", "    return () unless @$strings;\n    my @results\
    \ = ();\n    foreach my $string (@$strings) {\n        if ($string =~ /^$prefix/)\
    \ {\n            push(@results, $string);\n        }\n    }\n    return @results;\n\
    }", "    my @results;\n    foreach my $string (@$strings) {\n        if ($string\
    \ =~ /^$prefix/) {\n            push @results, $string;\n        }\n    }\n  \
    \  return @results;\n}", "    return [] if @$strings == 0;\n    return grep {\
    \ substr($_, 0, length($prefix)) eq $prefix } @$strings;\n}", "    foreach my\
    \ $string (@$strings) {\n        next if $string eq $prefix || $string =~ /^\\\
    Q$prefix/;\n        push, $string;\n    }\n}", "    my($found_prefix) = undef;\n\
    \    my(@filtered) = [];\n    foreach my $string (@$strings) {\n        if($string\
    \ =~ /^$prefix/) {\n            $found_prefix = 1;\n        }\n        else {\n\
    \            push(@filtered, $string);\n        }\n    }\n    if(!$found_prefix)\
    \ {\n        die \"No strings starting with $prefix found in @$strings\\n\";\n\
    \    }\n    return @filtered;\n}", "    my @filtered;\n    foreach my $string\
    \ (@$strings) {\n        my $prefix = length $prefix ? $prefix : \"\";\n     \
    \   if (substr($string, 0, length($prefix)) eq $prefix) {\n            push @filtered,\
    \ $string;\n        }\n    }\n    return @filtered;\n}", '    my(@filtered);',
  "    grep {\n        my($s) = lc($_);\n        exists $prefix->{$s} if $s =~ /^$prefix/;\n\
    \    } @$strings;\n}", "    my $prefix = shift;\n    $strings = [] unless defined\
    \ $strings;\n    foreach my $string (@$strings) {\n        return @$strings unless\
    \ $string =~ /^$prefix/;\n    }\n    return @$strings;\n}", "    my @result =\
    \ ();\n    foreach my $string($strings) {\n        if ($string =~ /^$prefix/)\
    \ {\n            push(@result, $string);\n        }\n    }\n    return @result;\n\
    }", "    my @result = ();\n    foreach my $string (@$strings) {\n        next\
    \ unless $string =~ /^$prefix/;\n        push(@result, $string);\n    }\n    @result;\n\
    }", "    return @$strings =~ m!^$prefix!i ? @$strings : ();\n}", '    my @filtered
    = ();', '    return @$strings if not @$strings;', "    $prefix ||= \"\";\n   \
    \ my @results;\n    foreach my $string ($strings) {\n        if ($string =~ /^$prefix/)\
    \ {\n            push(@results, $string);\n        }\n    }\n    return @results;\n\
    }", "    return () unless @$strings;\n    return @$strings if $prefix eq $strings[0];",
  "    my @new_strings;\n    foreach my $string (@$strings) {\n        if (substr($string,\
    \ 0, length($prefix)) == $prefix) {\n            push(@new_strings, $string);\n\
    \        }\n    }\n    return @new_strings;\n}", "    my @result;\n    foreach\
    \ my $str (@$strings) {\n        next if (length($str) < length $prefix);\n  \
    \      if (index($str, $prefix) == 0) {\n            push(@result, $str);\n  \
    \      }\n    }\n    return @result;\n}", "    return unless @$strings;\n    return\
    \ grep { my($suffix) = length($_) && substr($_, 0, length($prefix)) eq $prefix\
    \ } @$strings;\n}", '    my(@filtered);', "    my @result = ();\n    foreach my\
    \ $string(@$strings) {\n        if (substr($string, 0, length($prefix)) == $prefix)\
    \ {\n            push(@result, $string);\n        }\n    }\n    return @result;\n\
    }", "    my($strings_len) = length($strings);\n    my($prefix_len) = length($prefix);",
  "    my @filtered;\n    foreach my $string (@$strings) {\n        if (index($string,\
    \ $prefix) == 0) {\n            push(@filtered, $string);\n        }\n    }\n\
    \    return @filtered;\n}", '    my(@result) = ();', "    my(@result);\n    foreach\
    \ my $string (@$strings) {\n        if ($string =~ /^$prefix/) {\n           \
    \ push(@result, $string);\n        }\n    }\n    @$strings = @result;\n    return\
    \ $strings;\n}", '    my(@results);', "    my(@ret) = ();\n    foreach my $string\
    \ (@$strings) {\n        if (substr($string, 0, length($prefix)) == $prefix) {\n\
    \            push(@ret, $$string);\n        }\n    }\n    return @ret;\n}", " \
    \   return [] unless @$strings;\n    my %filter;\n    @$strings = grep { !$filter{$_}++\
    \ } @$strings;\n    return @$strings unless @$strings > 1;\n    return $strings[0]\
    \ if scalar @$strings == 1;\n    my (@result) = map { $_[$_]->[0] } grep { $filter{$_}++\
    \ } 0 .. $#{$strings} - 1;\n    return @$result\n}", "    return [] unless @$strings;\n\
    \    my @out = ();\n    for my $string (@$strings) {\n        if ( substr($string,\
    \ 0, length($prefix)) eq $prefix ) {\n            push(@out, $string);\n     \
    \   }\n    }\n    return @out;\n}", '    my @result = ();', '    my(@filtered);',
  "    if (ref $strings) {\n        $strings = [@$strings];\n    }\n    my(@results)\
    \ = [];\n    foreach my $string($strings) {\n        if (substr($string, 0, length($prefix))\
    \ == $prefix) {\n            push(@results, $string);\n        }\n    }\n    @results;\n\
    }", "    my @results;\n    foreach my $string (@$strings) {\n        next if $string\
    \ =~ /^$prefix/;\n        push(@results, $string);\n    }\n    return @results;\n\
    }", "    my @to_keep;\n    foreach my $s (@$strings) {\n        if(substr($s,\
    \ 0, length($prefix)) == $prefix) {\n            push @to_keep, $s;\n        }\n\
    \    }\n    return @to_keep;\n}", '    return unless $prefix;', "    my @strings_filtered;\n\
    \    foreach my $str (@$strings) {\n        return @$strings_filtered if $str\
    \ =~ /^$prefix/i;\n        push(@$strings_filtered, $str);\n    }\n    return\
    \ @$strings_filtered;\n}", "    @$strings = grep { substr($_, 0) eq $prefix }\
    \ @$strings;\n    @$strings;\n}", "    return @$strings if scalar @$strings ==\
    \ 0;\n    my @filtered_strings = ();\n    for my $s (@$strings) {\n        if\
    \ (substr($s, 0, length($prefix)) == $prefix) {\n            push(@filtered_strings,\
    \ $s);\n        }\n    }\n    return @filtered_strings;\n}", '    return () unless
    @$strings;', "    \n    foreach my $string (@$strings) {\n        next if $string\
    \ =~ /^$prefix/;\n        push @$strings, $string;\n    }\n    return @$strings;\n\
    }", "    return unless @$strings;\n    return grep {$_ =~ /^$prefix/} @$strings;\n\
    }", '    my(@result) = ();', "    return $strings if !defined $prefix || length\
    \ $prefix < 1 || $prefix eq \"/\";\n    my($first_match);\n    my(@results);",
  "    return @$strings if scalar @$strings == 0;\n    return grep { substr($_, length($prefix),\
    \ 1) eq $prefix } @$strings;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
