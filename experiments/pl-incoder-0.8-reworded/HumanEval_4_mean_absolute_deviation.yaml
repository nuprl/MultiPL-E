name: HumanEval_4_mean_absolute_deviation
language: pl
prompt: "# For a given array of input numbers, calculate Mean Absolute Deviation\n\
  # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
  \ difference between each\n# element and a centerpoint (mean in this case):\n# MAD\
  \ = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n\
  # 1.0\nsub mean_absolute_deviation {\n    my($numbers) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n\
  \        if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
  \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n}\n\ntesthumaneval();"
completions: ["    $numbers -= reduce { $a + $b } @$numbers;\n    my $mean = reduce\
    \ { $a + $b } @$numbers;\n    my $squared = (1..scalar(@$numbers))\n         \
    \           .reduce { $_ * $_ } @$numbers;\n    my $mad = ($squared - ($mean *\
    \ $mean)) / ($scalar - $mean);\n    $mad\n}", "    my($mean)    = 0;\n    my($sum)\
    \     = 0;", "    my($x_mean) = mean($numbers);\n    my(@means);", "    my(@mean)\
    \ = (0, 0);\n    foreach my $number (@$numbers) {\n        $mean[0] += $number;\n\
    \        $mean[1] += $number * $number;\n    }\n    $mean[0] /= @$numbers;\n \
    \   $mean[1] /= @$numbers;\n    my $mad;\n    if (@$numbers > 1) {\n        $mad\
    \ = ($mean[1] - abs($mean[0] - $mean[1])) / (@$numbers - 1);\n    }\n    else\
    \ {\n        $mad = 0;\n    }\n    return $mad;\n}", "    my $mean = mean($numbers);\n\
    \    my $sum = 0;\n    foreach my $value (@$numbers) {\n        $sum += $value\
    \ - ($mean);\n    }\n    return $sum / scalar(@$numbers);\n}", "    my($mean)\
    \ = $numbers->[0];\n    my($dev);\n    my($sum);\n    my($n);\n    my($mean_square);\n\
    \    my($mean_absolute_deviation);\n    \n    $n = scalar($numbers);\n    \n \
    \   foreach $number (@$numbers) {\n        $sum += $number;\n    }\n    \n   \
    \ $mean = $sum / $n;\n    \n    $dev = $numbers->[0] - $mean;\n    \n    $mean_square\
    \ = 0;\n    foreach $number (@$numbers) {\n        $mean_square += $number * $number;\n\
    \    }\n    \n    $mean_square = $mean_square / $n;\n    \n    $mean_absolute_deviation\
    \ = $dev / sqrt($mean_square);\n    \n    return $mean_absolute_deviation;\n}",
  "    $numbers = sort @$numbers;\n    return $numbers[0] - $numbers[$#numbers]\n\
    \      if scalar @$numbers < 2;\n    my $mean = $numbers[0];\n    my $sum = 0;\n\
    \    my $diff = 0;\n    for(my $i = 1; $i < scalar @$numbers; ++$i) {\n      \
    \  $sum += $numbers[$i] - $mean;\n        $diff += $numbers[$i] - $numbers[$i\
    \ - 1];\n    }\n    return $diff / $sum;\n}", "    my $sum = 0;\n    my $mean\
    \ = 0;\n    my $len = @$numbers;\n    for(my $index = 0; $index < $len; $index++)\
    \ {\n        $sum += $numbers[$index];\n    }\n    $mean = $sum / $len;\n    my\
    \ $squared_sum = 0;\n    for(my $index = 0; $index < $len; $index++) {\n     \
    \   $squared_sum += ($numbers[$index] - $mean) * ($numbers[$index] - $mean);\n\
    \    }\n    return sqrt($squared_sum / $len);\n}", "    my($mean) = $numbers[0];\
    \ # first number is mean\n    my($square_sum) = 0; # sum of squares up to now\n\
    \    my(@deviation) = []; # deviations for each number", "    my $sum = 0;\n \
    \   foreach my $num (@$numbers) {\n        $sum += $num;\n    }\n    my $mean\
    \ = $sum / @$numbers;\n    my $mad;\n    foreach my $num (@$numbers) {\n     \
    \   $mad += abs($num - $mean);\n    }\n    return $mad / @$numbers;\n}", "   \
    \ my $n = @$numbers;\n    my $sum = 0;\n    my $mean = 0;\n    foreach (@$numbers)\
    \ {\n        my $diff = $_ - $mean;\n        $sum += $diff * $diff;\n        $mean\
    \ += $diff;\n    }\n    return $n <= 1 ? 0 : sqrt($sum / $n);\n}", "    my($mean)\
    \     = $numbers->[0];\n    my($sum)      = 0;\n    my($number_of_elements) =\
    \ @{$numbers}[0];\n    my(@deviation) = ();\n    my $first_element = $numbers->[0];\n\
    \    foreach my $element (@{$numbers}) {\n        $sum      += $element;\n   \
    \     $deviation[$element] = $element - $mean;\n    }\n    return $sum / $number_of_elements;\n\
    }", "    my @mean = mean($numbers);\n    return scalar map { abs($_ - $mean[$_])\
    \ } 0 .. $#numbers;\n}", "    my $sum = 0;\n    foreach my $number (@$numbers)\
    \ {\n        $sum += $number;\n    }\n    $sum /= @$numbers;\n    my $mean_of_numbers\
    \ = 0;\n    foreach my $number (@$numbers) {\n        $mean_of_numbers += $number\
    \ * $number;\n    }\n    $mean_of_numbers = $mean_of_numbers / @$numbers;\n  \
    \  my($mean) = 0;\n    foreach my $number (@$numbers) {\n        $mean += ($number\
    \ - $mean_of_numbers) * $number;\n    }\n    $mean /= @$numbers;\n    $sum = 0;\n\
    \    foreach my $number (@$numbers) {\n        $sum += $number * abs($number -\
    \ $mean);\n    }\n    $sum / @$numbers;\n}", "    my $mean = $numbers->[0];\n\
    \    my $deviation = 0;\n    my $n_numbers = $numbers->[1];\n    for my $number\
    \ (@_) {\n        my $diff = abs($number - $mean);\n        $deviation += $diff;\n\
    \    }\n    return $deviation/($n_numbers * $n_numbers);\n}", "    my $mean =\
    \ &mean($numbers);\n    my $mad = Math::Abs->new(0);\n    for my $n (@$numbers)\
    \ {\n        $mad->add($n - $mean);\n    }\n    return $mad->div(@$numbers);\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a |>\nThe question was how to find the minimum\
    \ MAD for an array. This is really easy, but it's easy to get overlooked.\nFirst,\
    \ we can find the mean of the array:\n<code>\nmy $mean = &mean(@numbers);\n</code>\n\
    Then, we can find the minimum and maximum values by looping through each element,\
    \ subtracting the mean from it, and adding the maximum to the maximum and minimum\
    \ variables respectively:\n<code>\nmy $min = undef;\nmy $max = undef;\nfor my\
    \ $n (@numbers) {\n    $max += $n;\n    if (defined $min) {\n        $min = $n\
    \ if $n < $min;\n    } else {\n        $min = $n;\n    }\n}\n</code>\nAfter that,\
    \ we just need to find the difference between the minimum and maximum, and take\
    \ the absolute value:\n<code>\nmy $mad = Math::Abs->new($max - $min);\n</code>\n\
    <|/ a tags=arrays,perl,math dscore=1 |>\n<| a dscore=1 |>\n<code>", '    my $mean
    = mean($numbers);', "    my $mean = $numbers[0];\n    my $sum = 0;\n    for my\
    \ $number (@$numbers) {\n        $sum += abs($number - $mean);\n    }\n    return\
    \ $sum;\n}", "    my $total = 0;\n    my $mean;\n    my $num_elements = scalar\
    \ (@$numbers);", "    my($mean) = $numbers[0];\n    my(@mad) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@mad, abs($number - $mean));\n    }\n\
    \    return (scalar @mad) / @_;\n}", "    my $sum = sum(@$numbers);\n    my $mean\
    \ = sum(@$numbers) / (@$numbers);\n    my $dev = 0;\n    foreach(@$numbers) {\n\
    \        $dev += ($_ - $mean) * ($_ - $mean);\n    }\n    $dev /= $sum;\n    return\
    \ $dev;\n}", "    my $n = @$numbers;\n    return 0 if( ! $n );\n    my $mean =\
    \ $numbers[0];\n    my $sum = 0;\n    for(my $i = 1; $i < $n; $i++) {\n      \
    \  my $diff = abs($numbers[$i] - $mean);\n        $sum += $diff;\n    }\n    return\
    \ $sum / $n;\n}", "    my $mean = mean(@$numbers);\n    my $mad = 0;\n    for\
    \ my $n (@$numbers) {\n        $mad += abs($n - $mean);\n    }\n    return $mad;\n\
    }", "    $numbers = map { abs($numbers[$_]) } 0..$#numbers;\n    my $mean = sum(@$numbers)\
    \ / $#numbers;\n    $numbers = map { $_ - $mean } @$numbers;\n    my $mad = sum(@$numbers)\
    \ / $#numbers;\n    return $mad;\n}\n</code>\nThe code above works by first calculating\
    \ the mean of the numbers. Then it calculates the mean absolute deviation between\
    \ the mean and the number. Finally, it calculates the mean of all the absolute\
    \ deviations.\n<|/ a dscore=5 |>\n<| c |>\nWhy does it work this way? Isn't it\
    \ a statistical measure? Why calculate mean when calculating standard deviation\
    \ when calculating standard deviation by hand is possible?\n<|/ c |>\n<| c |>\n\
    I understand why you think that your proposed code would be correct. However,\
    \ the code in the original question calculates the mean of the absolute deviations\
    \ *without* the mean of the original numbers. Therefore the code in this answer\
    \ calculates the mean of the absolute deviations *with the mean of the original\
    \ numbers*.\n<|/ c |>\n<| c |>\nI'm sorry I didn't notice you said that in your\
    \ answer. I thought you meant that you had the numbers divided by `N`, but you\
    \ actually meant that you had the numbers divided by `N-1`.\n<|/ c |>\n<| c |>\n\
    Thanks for your great answer, but I think that your solution isn't really correct.\
    \ You are calculating `N`, but you shouldn't be using it for the denominator of\
    \ the equation. Your denominator should be `N-1`.\n<|/ c |>\n<| a dscore=5 |>\n\
    This is a great question and a very simple answer will solve it very efficiently.\n\
    If you just want the mean of a set of numbers, i.e. the average of the numbers\
    \ without any fancy algorithms, the following method will work.\n<code>\n$total\
    \ = 0;\n$mean = undef;", '    my $n = @$numbers;', "    my($mean) = mean($numbers);\n\
    \    my $abs_diff = abs($numbers[0] - $mean);\n    return $abs_diff / $mean;\n\
    }", "    # mean is our centerpoint\n    $numbers.mean()\n}", "    return 0 if\
    \ !defined $numbers;\n    return 0 unless scalar(@$numbers) >= 1;", "    my($mean_val)\
    \ = $numbers[0];\n    my $mad = 0;", "    my $sum = 0;\n    foreach (@$numbers)\
    \ {\n        $sum += abs($_);\n    }\n    $sum / scalar(@$numbers);\n}", "   \
    \ my $mean = 0;\n    my $mean_deviation = 0;\n    my @deviations = ();\n    foreach\
    \ my $number (@$numbers) {\n        $mean += $number;\n        push(@deviations,\
    \ $number - $mean);\n    }\n    $mean_deviation = 1/(scalar(@deviations)) if scalar\
    \ @deviations > 0;\n    my $mad = $mean_deviation;\n    foreach my $number (@$numbers)\
    \ {\n        $mad += abs($number - $mean);\n    }\n    $mad /= (scalar(@$numbers)\
    \ - 1) if scalar @$numbers > 1;\n    return $mad;\n}", "    my($mean) = $numbers[0];\n\
    \    my($abs_deviation) = 0;\n    foreach my $num (@$numbers) {\n        $abs_deviation\
    \ += $num - $mean;\n    }\n    return $abs_deviation / @$numbers;\n}", '    my($sum)
    = 0;', "    my $mean = mean(@$numbers);\n    my $sum = 0;\n    foreach my $num\
    \ (@$numbers) {\n        my $diff = abs($num - $mean);\n        $sum += $diff;\n\
    \    }\n    return $sum / @$numbers;\n}", "    my($mean) = @{$numbers->[0]} ||\
    \ 0;\n    my($sum) = 0;\n    my(@result) = ();\n    foreach my $number (@$numbers)\
    \ {\n        $sum += abs($number - $mean);\n        push @result, $sum;\n    }\n\
    \    return mean(@result) if @result;\n    return -1;\n}", '    return unless
    @$numbers > 1;', "    $numbers[-1] += 0;\n    return $numbers[0] if @$numbers\
    \ == 1;\n    my $mean = $numbers[-1] / @$numbers;\n    my $diff = 0;\n    my $sum\
    \ = 0;\n    for (@$numbers) {\n        $diff += $_ - $mean;\n        $sum += $_;\n\
    \    }\n    $diff /= $sum;\n    return $diff;\n}", "    my($mean) = $numbers->[0];\n\
    \    return scalar(my(@deviations));\n}", "    my $mad_sum;\n    my $mean;\n \
    \   my $total_num;\n    my $i;\n    my @diffs;\n    my @diff_sums;\n    my @diff_means;\n\
    \    my $mad_sum;", "    my(@means);\n    my($x, $y);", "    my($x_mean) = mean(@$numbers);\n\
    \    my $mean;\n    my $sum = 0;\n    foreach my $number (@$numbers) {\n     \
    \   $sum += $number - $x_mean;\n    }\n    $mean = 1.0 * $sum / @$numbers;\n \
    \   return $mean;\n}", "    $numbers = uniq(@$numbers);\n    $numbers = sort(@$numbers);\n\
    \    my $mean;\n    my $x_mean;\n    $x_mean = $numbers[0];\n    foreach my $number\
    \ (@$numbers) {\n        $mean += $number;\n        $x_mean += $number * $number;\n\
    \    }\n    return $mean / @$numbers;\n}", "    my $mean = mean($numbers);\n \
    \   my $sum = 0;\n    my $count = 0;\n    \n    foreach my $number (@$numbers)\
    \ {\n        my $diff = abs($number - $mean);\n        $sum += $diff;\n      \
    \  $count++;\n    }\n    return $sum / $count;\n}", "    my $mean = mean(@$numbers);\n\
    \    my $mad = map { abs($_-$mean) } @$numbers;\n    return $mad->[0] if scalar\
    \ @$numbers > 1;\n    return $mad->[0];\n}", "    my $mean = $numbers->[0];\n\
    \    my $mad = 0;\n    foreach my $number (@$numbers) {\n        $mad += $number\
    \ - $mean;\n    }\n    return $mad / scalar @$numbers;\n}", "    my($x_mean) =\
    \ mean($numbers);\n    my $mean = 0;\n    my $mad_sum = 0;\n    foreach my $x\
    \ (@$numbers) {\n        my $diff = abs($x - $x_mean);\n        $mean += $diff;\n\
    \        $mad_sum += $diff;\n    }\n    return $mean / @$numbers;\n}", "    return\
    \ sqrt($numbers->sum()->abs() / $numbers->count());\n}", "    my $sum = 0;\n \
    \   my $mean = 0;\n    $sum += ($numbers->[0]-$mean);\n    foreach my $number(@$numbers)\
    \ {\n        $sum += ($number-$mean);\n        $mean = $sum/(@$numbers);\n   \
    \ }\n    return $sum/(@$numbers);\n}", "    my $mean    = 0;\n    my $total  \
    \ = 0;", "    my(@means);\n    my(@deviations);\n    my(@results);", '    my @mean_of_numbers;',
  "    my $mean = $numbers[0];\n    my $count = 0;\n    foreach my $number (@$numbers)\
    \ {\n        my $diff = abs($number - $mean);\n        my $count = $count + $diff;\n\
    \    }\n    return $count / scalar(@$numbers);\n}", "    my $mean = mean(@$numbers);\n\
    \    my $mad = 0;\n    for my $num (@$numbers) {\n        $mad = abs($num - $mean);\n\
    \    }\n    return $mad;\n}", '    return 0.0 unless @$numbers;', "    my($mean)\
    \ = mean($numbers);\n    return scalar($numbers - $mean);\n}", "    # get the\
    \ mean of all the input numbers\n    my($mean) = &mean(@_);\n    # calculate the\
    \ MAD\n    my($mad) = ();\n    &map(sub {\n        my $number = $_[0];\n     \
    \   $mad .= $number - $mean;\n    }, @_);\n    &mean(\\@mad);\n}", "    my($mean)\
    \ = 0;\n    my($meanSquared) = 0;\n    my($sum) = 0;\n    my($mad) = 0;\n    foreach\
    \ my $number (@$numbers) {\n        $sum += $number;\n        $mean = $sum / scalar\
    \ @$numbers;\n        $meanSquared += ($number - $mean)**2;\n    }\n    $mad =\
    \ $meanSquared / (scalar @$numbers - 1);\n    return $mad;\n}", "    my $mean\
    \ = mean($numbers);\n    my($sum, $n);", "    my $mean = scalar @$numbers;\n \
    \   return unless $mean;\n    my $sum = 0;\n    foreach (@$numbers) {\n      \
    \  $sum += $_;\n    }\n    my $mad = sqrt($sum / $mean);\n    return $mad;\n}",
  "    my($mean) = $numbers->[0];\n    my($n) = 0;\n    my($delta) = 0;\n    my(@result)\
    \ = ();\n    foreach my $value (@$numbers) {\n        my $diff = $value - $mean;\n\
    \        $delta += $diff;\n        $n++;\n        $result[$n] += $diff * $diff;\n\
    \    }\n    my $avg_value = $delta / ($n);\n    foreach my $idx (0 .. $#result)\
    \ {\n        $result[$idx] /= $n;\n        push (@result, $result[$idx] - $avg_value);\n\
    \    }\n    $result[0] = 0;\n    return $result;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nWhile this code may answer the question, it would be better to explain\
    \ how it solves the problem and why you did it.\n<|/ c |>\n<| c |>\nThis won't\
    \ work for negative numbers. I updated the code to show how to fix that\n<|/ c\
    \ |>\n<| c |>\n`mean_absolute_deviation([1,2,-3,-4,5])` returns `0.666667`, but\
    \ that should be `1.0`\n<|/ c |>\n<| c |>\nAh, yes. My bad. Forgot that mean isn't\
    \ a good measure for median as well.\n<|/ c |>\n<| a tags=arrays,perl |>\nThis\
    \ might be helpful.\n<code>", "    my($sum, $mean);\n    $sum = 0; # sum of the\
    \ values\n    $mean = 0; # mean of the values\n    foreach my $num (@$numbers)\
    \ {\n        ($sum += $num);\n        ($mean += $num);\n    }\n    $mean /= (scalar(@$numbers));\n\
    \    foreach my $num (@$numbers) {\n        ($sum -= $num);\n    }\n    return\
    \ $sum/$mean;\n}\n</code>\nThe function can be called like this:\n<code>", " \
    \   my $result = 0.0;\n    my $center = 0.0;\n    for (my $index = 0; $index <\
    \ @$numbers; $index++) {\n        $result += (abs ($numbers[$index] - $center));\n\
    \        $center += $numbers[$index];\n    }\n    return $result / @$numbers;\n\
    }", "    my($mean) = $numbers[0]; # First value is always mean\n    my($count)\
    \ = 1;\n    my($sum) = 0;\n    foreach $number (@$numbers) {\n        next unless\
    \ $number;\n        my $tmp = ($number - $mean) / $mean;\n        ++$count;\n\
    \        $sum += $tmp;\n    }\n    my $mad = $sum / $count;\n    return $mad;\n\
    }", "    my $mean = mean($numbers);\n    my $sum = 0;\n    my $size = scalar @$numbers;\n\
    \    foreach my $number (@$numbers) {\n        $sum += abs($number - $mean);\n\
    \    }\n    return $sum / $size;\n}", "    my $mean = mean(@$numbers);\n    return\
    \ 0 if @$numbers == 0;\n    return $numbers[0] if $numbers[0] > $mean;\n    return\
    \ @$numbers - $mean;\n}", "    my($sum) = $numbers[0];\n    foreach my $number\
    \ (@$numbers) {\n        $sum += $number;\n    }\n    return $sum / @$numbers;\n\
    }", "    my $median = median($numbers);\n    my($mean, @deviations) = (0, 0);\n\
    \    for(@$numbers) {\n        $mean += $_;\n        push(@deviations, $_ - $mean);\n\
    \    }\n    $mean = $mean / @$numbers;\n    my $mad = @deviations ? @deviations\
    \ / @$numbers - $mean : $mean;\n    return $mad;\n}\n</code>\n<|/ a tags=math,python,algorithm\
    \ |>\n<| a |>\nIt seems that you are looking for something called \"Median Absolute\
    \ Deviation\" (MAD), which is just your average of absolute differences of two\
    \ ordered values, divided by their counts.\nTo get the count, you can do:\n<code>\n\
    >>> import numpy as np\n>>> arr = np.array([1, 3, 2, 3, 8, 1])\n>>> count = np.bincount(arr)\n\
    >>> count = count.astype(float)\n>>> count\narray([1, 2, 1, 3, 2])\n>>> mad =\
    \  (np.max(count) - np.min(count)) / count\n>>> mad\n0.16666666666666666\n</code>\n\
    <|/ a dscore=4 tags=math,python,algorithm |>\n<| a |>\nHere is my Python implementation.\
    \ I modified it from a python wiki article on mean absolute deviation.\n<code>\n\
    def mahalanobis_distance(X, mean, covariance):\n    \"\"\"\n    Compute the mahalanobis\
    \ distance between two multivariate Gaussians X_true,\n    mu_true, and covariance\
    \ C_true.", "    my($mean) = $numbers[0];\n    my $sum_abs = 0;\n    my $total_number\
    \ = 0;\n    foreach my $number (@$numbers) {\n        $sum_abs += ($number - $mean)\
    \ * ($number - $mean);\n        $total_number += 1;\n    }\n    return $sum_abs\
    \ / $total_number;\n}", "    my $mean_number = &mean($numbers);\n    my $diff;\n\
    \    my $mad;\n    \n    $mad = 0; # Initialize\n    \n    # Find mean\n    foreach\
    \ my $number (@$numbers) {\n        $diff += $number - $mean_number;\n    }\n\
    \    $mad = $diff / @$numbers;\n    \n    return $mad;\n}", "    my($mean_of_numbers)\
    \ = 0.0;\n    foreach $number (@$numbers) {\n        $mean_of_numbers += $number;\n\
    \    }\n    $mean_of_numbers / @$numbers;\n}", "    $numbers -= $numbers[0];\n\
    \    return scalar @$numbers / (@$numbers - 1);\n}", "    my $mean = 0;\n    my\
    \ $sum = 0;\n    foreach my $number (@$numbers) {\n        $sum += $number;\n\
    \        $mean += $number;\n    }\n    $mean /= @$numbers;\n    foreach my $number\
    \ (@$numbers) {\n        $number -= $mean;\n        $number /= $sum;\n    }\n\
    \    my $mad = 0;\n    foreach my $number (@$numbers) {\n        $mad += $number\
    \ * $number;\n    }\n    return sqrt($mad);\n}", "    $numbers->[0] > $numbers->[-1]\
    \ ? $numbers->[-1] : $numbers->[0];\n    my $sum = 0;\n    my $mean = &mean($numbers);\n\
    \    foreach my $number (@$numbers) {\n        $sum += (abs($number - $mean));\n\
    \    }\n    $sum / scalar(@$numbers);\n}", "    my $mean = $numbers->[0];\n  \
    \  return unless @$numbers > 1;\n    my $sum = 0.0;\n    my $size = @$numbers;\n\
    \    foreach my $value (@$numbers) {\n        $sum += abs($value - $mean);\n \
    \   }\n    return $sum / $size;\n}", "    my $mean   = $numbers[0];\n    my $deviation;\n\
    \    foreach my $value (@$numbers) {\n        $deviation = $deviation + abs($value\
    \ - $mean);\n    }\n    return $deviation / scalar(@$numbers);\n}", "    my $mean;\n\
    \    return unless @$numbers > 0;", "    my($mean) = $numbers[0];\n    my(@mean_array)\
    \ = $numbers;\n    my $total = 0.0;", "    my $sum = 0;\n    my $mean = 0;\n \
    \   my @numbers_as_vector = ();\n    my $i = 0;\n    foreach my $number (@$numbers)\
    \ {\n        $sum += $number;\n        $mean = $sum / $i;\n        push(@numbers_as_vector,\
    \ $number);\n        last if ($i == scalar(@$numbers));\n        $i ++;\n    }\n\
    \    my $sum2 = 0;\n    my $mean2 = 0;\n    my $difference = 0;\n    foreach my\
    \ $number (@numbers_as_vector) {\n        $sum2 += abs($number - $mean);\n   \
    \     $mean2 = $sum2 / $i;\n        $difference = $sum2 - $mean2;\n    }\n   \
    \ return $mean;\n}", "    my $mean = @$numbers > 1 ? $numbers->[2] : 0;\n    my\
    \ @sum;\n    foreach my $num (@$numbers) {\n        push(@sum, $num - $mean);\n\
    \    }\n    return scalar(@sum > 1 ? mean(@sum) . '/' . scalar(@sum) : 0);\n}",
  "    my $mean = sum(@$numbers) / scalar(@$numbers);\n    my($sum_of_squared_differences)\
    \ = 0;\n    for(my $i = 0; $i < scalar(@$numbers); $i++) {\n        $sum_of_squared_differences\
    \ += ($numbers[$i] - $mean)**2;\n    }\n    return sqrt($sum_of_squared_differences\
    \ / scalar(@$numbers));\n}", "    if (@$numbers == 0) {\n        return 0;\n \
    \   }\n    my $mean = &mean($numbers);\n    return map { abs($numbers - $mean)\
    \ } @$numbers;\n}", "    my($count) = 0;\n    my $mean_number = 0.0;\n    my $sum\
    \ = 0;\n    foreach my $number (@$numbers) {\n        $sum += $number;\n     \
    \   $count++;\n    }\n    $mean_number = $sum / $count;\n    my($mad) = 0.0;\n\
    \    foreach my $number (@$numbers) {\n        $mad += abs($number - $mean_number);\n\
    \    }\n    return $mad / $count;\n}", "    my $mean = mean($numbers);\n    my\
    \ $mad_sum = 0;\n    foreach my $number (@$numbers) {\n        $mad_sum += abs($number\
    \ - $mean);\n    }\n    return $mad_sum / @$numbers;\n}", "    my($x_mean) = mean_number(@$numbers);\n\
    \    return 0 unless $x_mean;\n    return @$numbers - @$x_mean;\n}", "    my $mean;\n\
    \    my $mad;", "    my $n = scalar @$numbers;\n    my $sum = 0;\n    my $x_mean\
    \ = scalar @$numbers / @$numbers[0];\n    foreach my $number (@$numbers) {\n \
    \       my $d = $number - $x_mean;\n        $sum += $d * $d;\n    }\n    return\
    \ $sum / $n;\n}", "    my $mean   = mean(@$numbers);\n    my $mdev   = 0;", " \
    \   my $sum = 0;\n    my $mean = &mean($numbers);\n    foreach my $num (@$numbers)\
    \ {\n        $sum += $num - $mean;\n    }\n    return $sum / scalar(@$numbers);\n\
    }", "    my $mean_number = mean(@$numbers);\n    my($mad) = 0;\n    foreach my\
    \ $number (@$numbers) {\n        my $delta = $number - $mean_number;\n       \
    \ $mad += $delta;\n    }\n    return $mad / @$numbers;\n}", "    my $mean;\n \
    \   my $diff;\n    my $abs_diff;\n    my $i;\n    my $sum;", "    my $mean;\n\
    \    my $sum = 0.0;", "    my($mean)    = 0;\n    my(@deviation) = (0);", "  \
    \  my $mean = (@$numbers == 0) ? 0.0 : $numbers[0] / @$numbers;\n    my $sum_of_squared_differences\
    \ = 0.0;\n    for my $number (@$numbers) {\n        $sum_of_squared_differences\
    \ += $number**2 - $mean**2;\n    }\n    return sqrt($sum_of_squared_differences\
    \ / @$numbers);\n}", "    my($mean);\n    my($squared_deviation);", "    my $mean_abs\
    \ = 0;\n    my $mean;\n    for (@$numbers) {\n        $mean_abs += $_;\n     \
    \   $mean_abs /= @$numbers;\n    }\n    $mean = $mean_abs / @$numbers;\n    my\
    \ $delta;\n    for (@$numbers) {\n        $delta = $_ - $mean;\n        if ($delta\
    \ < 0) {\n            return $delta;\n        }\n    }\n    return 0;\n}", " \
    \   my($mean) = $numbers[0];\n    my @deviations = ();\n    foreach my $number\
    \ (@$numbers) {\n        push(@deviations, $number-$mean);\n    }\n    return\
    \ (mean(@deviations));\n}", "    return unless @$numbers;\n    return $numbers[0]\
    \ if $numbers[0] < 0;\n    return $numbers[0] if @$numbers == 1;\n    return $numbers[0]\
    \ if $numbers[0] > @$numbers;\n    return mean(map {abs($numbers[$_] - $numbers[$_-1])\
    \ } 0..$#numbers);\n}", "    my(@mean) = ();\n    for(my $i = 0; $i < @$numbers;\
    \ $i++) {\n        push(@mean, @$numbers[$i]);\n    }\n    my $mean_number = &mean(@mean);\n\
    \    my $sum = 0;\n    for(my $i = 0; $i < @$numbers; $i++) {\n        push(@$numbers[$i],\
    \ $numbers[$i] - $mean_number);\n        $sum += $numbers[$i] * $numbers[$i];\n\
    \    }\n    my $mad = $sum / @$numbers;\n    return $mad;\n}", "    my($mean,\
    \ $deviation);\n    my($i, $n) =;\n    $n = @$numbers;\n    my $sum = 0;\n   \
    \ foreach $i ( 0 .. $n - 1 ) {\n        $sum += abs($numbers[$i] - $mean);\n \
    \   }\n    $deviation = $sum / $n;\n    return $deviation;\n}", "    my $mean\
    \ = mean($numbers);\n    my $mad = 0;\n    foreach my $number (@$numbers) {\n\
    \        my $diff = abs($number - $mean);\n        $mad += $diff unless $diff\
    \ == 0;\n    }\n    $mad /= @$numbers;\n    return $mad;\n}", "    my(@array)\
    \ = @$numbers;\n    my($sum, $sum2) = (0.0, 0.0);\n    foreach my $number (@array)\
    \ {\n        $sum += $number;\n        $sum2 += $number * $number;\n    }\n  \
    \  my $result = $sum2 / $sum;\n    return $result;\n}", "    my $mean = 0;\n \
    \   my $sum_of_squares = 0;\n    foreach my $number (@$numbers) {\n        $sum_of_squares\
    \ += $number * $number;\n        $mean += $number;\n    }\n    return $sum_of_squares\
    \ / (scalar(@$numbers) - 1) if scalar(@$numbers) > 1;\n    return sqrt($sum_of_squares);\n\
    }", "    my @means = @$numbers;\n    my $mean;", "    my $mean;\n    my $sum_of_squares\
    \ = 0;\n    foreach my $number (@$numbers) {\n        $sum += $number; # $sum\
    \ is the accumulated sum\n        $sum_of_squares += $number ** 2;\n    }\n  \
    \  $mean = $sum / @$numbers;\n    return $sum_of_squares / (@$numbers - 1) - ($sum\
    \ * $mean);\n}", "    my $mean;\n    my $mad_sum;\n    my $mad_count;", "    $numbers\
    \ -= $numbers->mean;\n    my $mean = shift @$numbers;\n    my $sum = 0;\n    foreach\
    \ my $number (@$numbers) {\n        my $diff = abs($number - $mean);\n       \
    \ $sum += $diff;\n    }\n    return $sum / scalar @$numbers;\n}", "    my $mean\
    \ = mean($numbers);\n    my @mad = ();\n    foreach my $number (@$numbers) {\n\
    \        push(@mad, $number->abs() - $mean->abs());\n    }\n    return mean(@mad);\n\
    }", "    if (@$numbers == 0) {\n        return;\n    }\n    return $numbers[0]\n\
    \         if @$numbers == 1;", "    my @mean_value;\n    my $count = @$numbers;\n\
    \    my $sum = 0.0;\n    my $sum_squares = 0.0;\n    my $mean = 0.0;\n    for(my\
    \ $i=0; $i<$count; $i++) {\n        push @mean_value, $numbers[$i];\n        $sum\
    \ += $numbers[$i];\n        $sum_squares += $numbers[$i]**2;\n    }\n    $mean\
    \ = $sum / $count;", "    my($mean) = 0;\n    my($sum) = 0;", "    my($mean) =\
    \ $numbers[0];\n    my(@deviations) = ();\n    for (my $i = 1; $i -lt $#{$numbers};\
    \ $i++) {\n        push(@deviations, $numbers[$i] - $mean);\n    }\n    return\
    \ scalar(@deviations) / $#{$numbers};\n}", "    my($mean) = mean($numbers);\n\
    \    my($sum) = 0.0;\n    for my $number (@$numbers) {\n        $sum += $number\
    \ - $mean;\n    }\n    return $sum / @$numbers;\n}", '    my($mean) = $numbers[0];',
  "    my(@means) = ();\n    my($mean_of_numbers) = 0;\n    my($sum_squared_diff);\n\
    \    my($squared_means);\n    $sum_squared_diff = 0;\n    foreach my $number (@$numbers)\
    \ {\n        push(@means, $number);\n        $sum_squared_diff += $number * $number;\n\
    \    }\n    $mean_of_numbers = scalar(@means);\n    $sum_squared_diff /= $mean_of_numbers;\n\
    \    $squared_means = scalar(@means) * $sum_squared_diff;\n    foreach my $number\
    \ (@means) {\n        my $mad_abs = $number - $mean_of_numbers;\n        $mad_abs\
    \ = $mad_abs > 0 ? $mad_abs : -$mad_abs;\n        push(@mad_abs_values, $mad_abs);\n\
    \    }\n    my($mad_ave) = sum(@mad_abs_values) / scalar(@mad_abs_values);\n \
    \   return $mad_ave;\n}", "    my($mean) = $numbers->mean()->numify();\n    my($x_mean)\
    \ = $numbers->mean()->numify();\n    my($mad) = 0;\n    $mad = $numbers->reduce(sub\
    \ {\n        ($_->numify()-$mean)->abs()->numify();\n    })->numify();\n    return\
    \ $mad / $numbers->length();\n}", "    $numbers[0] if(-not defined $numbers[0]);\n\
    \    my $mean = mean($numbers);\n    my $sum = 0;\n    foreach (@$numbers) {\n\
    \        $sum += abs($_ - $mean);\n    }\n    my $result = $sum / @$numbers;\n\
    \    return $result;\n}", "    my $length = @$numbers;\n    my @numbers_mean =\
    \ map { $_ / $length };\n    my $sum = 0;\n    my @sums = ();\n    foreach my\
    \ $n (@$numbers) {\n        $sum += $n;\n        push(@sums, $sum);\n    }\n \
    \   my $mean = $sum / $length;\n    foreach my $n (@$numbers) {\n        $n =\
    \ $n - $mean;\n        my $abs_n = abs($n);\n        my $mad_abs = abs($n - $numbers_mean[$_]);\n\
    \        $mad_abs /= $n;\n        push(@sums, $mad_abs);\n    }\n    my $mad =\
    \ sum(@sums) / $length;\n    return $mad;\n}", "    my $mean = mean($numbers);\n\
    \    my $mad_sum = 0.0;\n    foreach my $number (@$numbers) {\n        $mad_sum\
    \ += abs($number - $mean);\n    }\n    $mad_sum / @$numbers;\n}", '    my $mean_abs
    = 0.0;', "    if (@$numbers > 0) {\n        my $mean = mean(@$numbers);\n    \
    \    return scalar(@$numbers) / @$numbers - abs($mean - $numbers[0]);\n    }\n\
    \    return;\n}", "    return 0 if @$numbers == 0;\n    my $mean = 0.0;\n    foreach\
    \ my $x (@$numbers) {\n        $mean += $x;\n    }\n    return $mean / @$numbers;\n\
    }", "    my @means = ();\n    foreach my $n (@$numbers) {\n        push(@means,\
    \ $n->[0]);\n    }\n    my $mean = (scalar @means) * 0.5;\n    my $sum = 0;\n\
    \    foreach my $n (@$numbers) {\n        push (@$numbers, ($n - $mean));\n  \
    \      push(@$numbers, ($n + $mean));\n        push(@$numbers, $mean);\n     \
    \   push(@$numbers, $n);\n        push(@$numbers, $n - $mean);\n        $sum +=\
    \ $n;\n    }\n    return $sum/scalar(@$numbers);\n}", "    if ( @$numbers == 0)\
    \ {\n        return 0;\n    }\n    $numbers[$#numbers + 1] = 0; # add mean to\
    \ end\n    my($sum) = 0;", "    my($mean)    = mean(@$numbers);\n    my(@results);\n\
    \    for my $number (@$numbers) {\n        push(@results, $number - $mean);\n\
    \    }\n    return mean(@results);\n}\n</code>\n<|/ a dscore=5 tags=perl,statistics\
    \ |>\n<| c |>\nThe algorithm is correct but your implementation is incorrect -\
    \ your `map` call should be `map {$_ - $mean}`\n<|/ c |>\n<| c |>\nNo, this is\
    \ incorrect. `map` expects its block to be a code reference that is called once\
    \ for each element, and its result is a list holding all the results. In your\
    \ implementation, you are passing `$number - $mean` to `map` and storing the result\
    \ in `$result`. This is incorrect, because `$mean` will always be the mean of\
    \ the entire dataset, not of the dataset you iterate over. `map` should be `map\
    \ {$_ - $_}`.\n<|/ c |>\n<| c |>\nI think you've a typo and it should be `map\
    \ {$_ - $_}`, not `map {$_ - $mean}`\n<|/ c |>\n<| c |>\nI've fixed the typo\n\
    <|/ c |>\n<| c |>\nThe algorithm is incorrect, though. This algorithm is based\
    \ on the assumption that the data is normally distributed. If that is not the\
    \ case, you should use the median instead of the mean.\n<|/ c |>\n<| a dscore=5\
    \ |>\nI've always used the following for standard deviation:\n<code>\nmy $mean\
    \ = mean(@numbers);\nmy $sd = 0.0;\nforeach my $num (@numbers) {\n    $sd += pow(($num\
    \ - $mean), 2);\n}\n$sd = sqrt($sd / scalar(@numbers));\n</code>\n<|/ a tags=perl,statistics\
    \ |>\n<| c |>\nNote that if you use `@numbers` instead of the scalar `$num`, you\
    \ can avoid the need to create a temporary array by simply using `map { $num -\
    \ $mean }` (see [map](http://perldoc.perl.org/functions/map.html) for more information).\n\
    <|/ c |>\n<| c |>\n: It would probably make more sense to move the `$mean` calculation\
    \ outside the loop.\n<|/ c |>\n<| c |>\nI wouldn't. If you need it to be calculated\
    \ multiple times, you should store it outside the loop.\n<|/ c |>\n<| c |>\n:\
    \ I agree, if the algorithm is called multiple times then storing the value in\
    \ `$mean` outside the loop is the best way to go. Just ", "    my $mean = mean($numbers);\n\
    \    return 0.0 if $mean == 0.0;\n    my $mad = 0.0;\n    foreach (@$numbers)\
    \ {\n        $mad += abs($_-$mean);\n    }\n    return $mad/@$numbers;\n}", " \
    \   return @$numbers if @$numbers == 0;\n    my $sum = @$numbers;\n    $sum -=\
    \ 1;\n    my $mean = @$numbers == 0 ? 0.0 : ($numbers[0] + $numbers[1]) / $sum;\n\
    \    my $sumOfSquares = 0;\n    for(my $i = 0; $i < @$numbers; $i++) {\n     \
    \   $sumOfSquares += $numbers[$i] - $mean * $mean;\n    }\n    return sqrt((1/$sum)\
    \ * $sumOfSquares);\n}", "    my($mean_number) = mean($numbers);\n    return scalar\
    \ @$numbers - $mean_number;\n}", "    my $mean = Mean($numbers);\n    return $numbers[0]\
    \ if !defined $mean;\n    my $sum = 0;\n    foreach (@$numbers) {\n        $sum\
    \ += $_ - $mean;\n    }\n    return $sum / @$numbers;\n}", "    my ($n) = $#numbers\
    \ + 1;\n    my @numbers_normalized = @$numbers[0..$n];\n    my $mean = &mean(\\\
    @numbers_normalized);\n    my $total_variance = 0;\n    my $squared_sum = 0;",
  "    my ($mean) = $numbers[0];\n    my $sum;\n    foreach my $num (@$numbers) {\n\
    \        $sum += abs($num - $mean);\n    }\n    $sum;\n}", "    my($mean) = &mean($numbers);\n\
    \    my($squared_deviations) = &squared_deviation($numbers);\n    my $total_deviation\
    \ = 0;\n    for my $number (@$numbers) {\n        $total_deviation += $number\
    \ - $mean;\n    }\n    return $total_deviation / scalar(@$numbers);\n}", "   \
    \ my $mean = shift;\n    return $mean if @$numbers == 0;\n    my @diff = ();\n\
    \    for my $number (@$numbers) {\n        push(@diff, $number - $mean);\n   \
    \ }\n    my $mad = reduce {\n        my $sum = $_;\n        foreach my $difference\
    \ (@diff) {\n            $sum -= $difference;\n        }\n        $sum / scalar(@diff);\n\
    \    };\n    return $mad;\n}", "    my $sum = 0;\n    my @mean;\n    foreach my\
    \ $num (@$numbers) {\n        $sum += $num;\n        push(@mean, $num);\n    }\n\
    \    my $mean = mean(@mean);\n    my $square_sum = 0;\n    foreach my $num (@$numbers)\
    \ {\n        $square_sum += $num * $num;\n    }\n    return $sum / scalar(@$numbers)\
    \ * $mean / $square_sum;\n}", "    my $result = 0.0;\n    foreach my $number (@$numbers)\
    \ {\n        $result += $number - @$numbers/2;\n    }\n    return $result;\n}",
  "    my $mean = get_mean(@$numbers);\n    my @diffs;\n    foreach my $num (@$numbers)\
    \ {\n        push @diffs, (abs($num - $mean));\n    }\n    my $mad = mean(@diffs);\n\
    \    return $mad;\n}", "    my($mean)    =   0;\n    my($diff)    =   0;", " \
    \   my ($mean, $count) = (0, 0);\n    foreach my $n (@$numbers) {\n        $mean\
    \ += $n;\n        $count++;\n    }\n    $mean /= $count;\n    foreach my $n (@$numbers)\
    \ {\n        $n -= $mean;\n        $n /= $count;\n    }\n    my $sum = 0;\n  \
    \  foreach my $n (@$numbers) {\n        $sum += $n*$n;\n    }\n    my $var = $sum\
    \ / $count;\n    return sqrt($var);\n}", "    return 0 unless @$numbers;\n   \
    \ my $mean = $numbers[0]->mean();\n    my(@mad) = ();\n    for(@$numbers) {\n\
    \        push(@mad, abs($_-$mean));\n    }\n    return (scalar @mad)/@$numbers;\n\
    }", "    my $mean = @$numbers/@$numbers;\n    my(@deviations);\n    for my $number\
    \ (@$numbers) {\n        push(@deviations, abs $number - $mean);\n    }\n    return\
    \ sqrt(@deviations/@$numbers);\n}", "    my($mean, $sum) = @_;\n    my(@made_up);\n\
    \    foreach my $number (@$numbers) {\n        $sum += $number;\n    }\n    $mean\
    \ += $sum / @$numbers;\n    foreach my $number (@$numbers) {\n        my($diff)\
    \ = $number - $mean;\n        $made_up[$_] += $diff / $number;\n    }\n    $made_up[$_]\
    \ *= $100 / $numbers for (0 .. $#made_up);\n    return $made_up[0];\n}", "   \
    \ my($mean) = $numbers[0]; # set default mean to first number\n    my(@means)\
    \ = ();\n    foreach $number (@$numbers) {\n        push(@means, $number);\n \
    \   }\n    $numbers[0] = $mean;\n    my $sum = 0;\n    foreach my $mean (@means)\
    \ {\n        my $diff = $mean - $means[0];\n        $sum += $diff;\n    }\n  \
    \  my $mad = $sum / @means;\n    return $mad;\n}", "    my $sum = 0;\n    my $mean\
    \ = @$numbers / @$numbers - 1;\n    foreach my $number (@$numbers) {\n       \
    \ $sum += abs($number - $mean);\n    }\n    return $sum / @$numbers;\n}", "  \
    \  my $mean = mean(@$numbers);\n    my $mad = 0;\n    foreach my $value (@$numbers)\
    \ {\n        if ($value ne $mean) {\n            $mad += abs($value - $mean);\n\
    \        }\n    }\n    return $mad / scalar(@$numbers);\n}", "    my($mean_number)\
    \ = mean($numbers);\n    my $sum = 0;\n    foreach my $num (@$numbers) {\n   \
    \     $sum += abs($num - $mean_number);\n    }\n    return $sum / @$numbers;\n\
    }", "    my($sum, $count) = (0, 0);\n    foreach my $number (@$numbers) {\n  \
    \      my $delta = $number - $self->mean;\n        $sum += abs($delta);\n    \
    \    $count += 1;\n    }\n    my $mad = $sum / $count;\n    return $mad;\n}",
  "    my $mean = mean(@$numbers);\n    my $sum = 0.0;\n    foreach my $number (@$numbers)\
    \ {\n        $sum += abs($number - $mean);\n    }\n    return $sum / @$numbers;\n\
    }", "    my($mean) = $numbers[0];\n    return 0.0 if @$numbers == 0;", "    my\
    \ $mean;\n    my($n) = scalar(@$numbers);\n    foreach my $n (@$numbers) {\n \
    \       next if ($n < $mean);\n        $mean = $n;\n    }\n    return $mean;\n\
    }", "    my $mean = $numbers->[0];\n    return $mean unless @$numbers > 0;", " \
    \   my ($sum, $mean, $count, $mad);\n    for my $i (0..$#$numbers) {\n       \
    \ $sum += $numbers[$i];\n        $count++;\n    }\n    $mean = $sum / $count;\n\
    \    my($delta, $delta_squared);\n    for (my $i = 0; $i < $#numbers; $i++) {\n\
    \        $delta = $numbers[$i] - $mean;\n        $delta_squared += $delta * $delta;\n\
    \    }\n    $mad = $delta_squared / $count;\n    return $mad;\n}", "    my(@mean)\
    \ = $numbers->{mean};\n    my($sum) = 0.0;\n    foreach $number (@$numbers) {\n\
    \        $sum += $number - $mean[0];\n    }\n    return $sum / @$numbers;\n}",
  "    my $n = @$numbers;\n    return $n if $n == 0;\n    my($mean) = $numbers->[0];\n\
    \    my $sum;\n    foreach my $number (@$numbers) {\n        $sum += abs($number\
    \ - $mean);\n    }\n    return $sum / $n;\n}", "    if (scalar($numbers) <= 0)\
    \ {\n        return;\n    }\n    my($mean) = $numbers[0];\n    my($n) = scalar($numbers);\n\
    \    if ($n <= 1) {\n        return $n;\n    }\n    my(@means) = ();\n    foreach\
    \ my $number (@$numbers) {\n        $mean += $number;\n    }\n    push(@means,\
    \ $mean);\n    my $i;\n    for ($i = 1; $i < $n; $i++) {\n        $means[$i] =\
    \ $means[$i - 1] + $numbers[$i] - $means[$i - 1];\n    }\n    $mean /= $n;\n \
    \   my($sum, @sums);\n    for (@means) {\n        push(@sums, ($sum += $_));\n\
    \    }\n    return sqrt($sum / $n);\n}", '    my(@means);', "    my @mean = @{$numbers->[0]};\n\
    \    return unless @mean > 0;", "    return 0 if @$numbers < 1;\n    return $numbers[0]\
    \ if @$numbers == 1;\n    my $mean = $numbers[0];\n    my $total = 0;\n    for\
    \ (my $i = 1; $i <= $#numbers; ++$i) {\n        $total += abs($numbers[$i] - $mean);\n\
    \    }\n    return $total / @$numbers;\n}", "    if (scalar @$numbers == 0) {\n\
    \        carp \"No data to calculate MAD from!\";\n        return;\n    }", " \
    \   my $mean = $numbers[0];\n    my $mad = 0;\n    foreach my $number (@$numbers)\
    \ {\n        $mad += abs($number - $mean);\n    }\n    return $mad / scalar @$numbers;\n\
    }", "    my $mean = mean($numbers);\n    my @numbers_mad =  map{ $numbers -  mean\
    \ } @$numbers;\n    my $mad = mean( map { abs ($_) } @numbers_mad );\n    return\
    \ $mad;\n}", "    $numbers[-1] //= @$numbers;\n    my $mean = $numbers[-1];\n\
    \    return map { $mean - ($_ - $mean) } @$numbers if @$numbers > 1;\n    return\
    \ $numbers[0];\n}", "    my @means;\n    my($mean) = 0.0;\n    for my $n (@$numbers)\
    \ {\n        $mean += $n;\n    }\n    $mean /= scalar(@$numbers);\n    for my\
    \ $n (@$numbers) {\n        my($diff) = abs($n - $mean);\n        push(@means,\
    \ $diff);\n    }\n    my($ma) = 0.0;\n    for my $n (@means) {\n        $ma +=\
    \ $n;\n    }\n    $ma /= scalar(@means);\n    return $ma;\n}", "    my($mean)\
    \ = $numbers[0];\n    my(@deviations);\n    foreach my $number (@$numbers) {\n\
    \        push(@deviations, abs($number - $mean));\n    }\n    return scalar @deviations\
    \ / @$numbers;\n}", "    return unless @$numbers;\n    return 0 unless @$numbers\
    \ > 1;\n    my $average;\n    my $deviation;\n    my $number;\n    my $sum = 0.0;\n\
    \    my $i = 0;\n    foreach $number (@$numbers) {\n        my $diff = abs($number\
    \ - $average);\n        if ($diff) {\n            $sum += $diff;\n        }\n\
    \        $i++;\n    }\n    $average = $sum / $i;\n    $deviation = 0.0;\n    foreach\
    \ $number (@$numbers) {\n        $deviation += abs($number - $average);\n    }\n\
    \    return $average - $deviation / $i;\n}", "    $numbers[-1] =~ s/^-//;\n  \
    \  my $mean = mean($numbers);\n    my $dev = 0;\n    foreach my $number (@$numbers)\
    \ {\n        $dev += abs($number - $mean);\n    }\n    return $dev / scalar(@$numbers);\n\
    }", "    my $mean = mean($numbers);\n    my $mean_deviation = 0;\n    $mean_deviation\
    \ = map { abs($numbers - $mean) } @$numbers;\n    my $mad = $mean_deviation /\
    \ scalar(@$numbers);\n    return $mad;\n}", "    my ($sum, $count) = (0, 0);\n\
    \    foreach (@$numbers) {\n        $sum += $_;\n        $count++;\n    }\n  \
    \  my $mean = $sum / $count;\n    my $variance = 0;\n    foreach (@$numbers) {\n\
    \        $variance += ($_ - $mean)**2; \n    }\n    return sqrt($variance / $count);\n\
    }\n</code>\n<|/ a |>\n<| c |>\nFor people who are looking to calculate the Mean\
    \ Absolute Deviation for a set of numbers instead of a single number, the code\
    \ can be modified to this:  \n  `sub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my ($sum, $count) = (0, 0);\n    foreach (@$numbers) {\n        $sum\
    \ += $_;\n        $count++;\n    }\n    my $mean = $sum / $count;\n    my $variance\
    \ = 0;\n    foreach (@$numbers) {\n        $variance += ($_ - $mean)**2; \n  \
    \  }\n    return sqrt($variance / $count);\n}`\n<|/ c |>\n<| a dscore=4 tags=statistics,perl,statistics-bootstrap\
    \ |>\nHere's a quick script that uses Statistics::Basic::Vector::Bootstrap::Mean:\n\
    <code>", "    my($mean_number) = $numbers[0] + $numbers[1] + $numbers[2] + $numbers[3]\
    \ / 4;\n    return map { abs($_ - $mean_number) } @$numbers;\n}", "    my($mean)\
    \ = 0;\n    my(@sums) = ();\n    for my $number (@$numbers) {\n        $mean +=\
    \ $number;\n        push(@sums, $number);\n    }\n    my($mad) = $mean ?? 0;\n\
    \    foreach my $number (@sums) {\n        $md += abs($number - $mean);\n    }\n\
    \    return $md / @$numbers;\n}\n</code>\n<|/ a tags=statistics,math,mathematical-optimization,floating-point,perl\
    \ |>\n<| a tags=statistics,math,mathematical-optimization,floating-point,perl\
    \ dscore=4 |>\nThe \"best answer\" depends on your requirements and your particular\
    \ application.\nFor a small sample size, this sort of algorithm will do fine.\
    \ The \"best\" is the one that minimizes the mean absolute deviation. If you're\
    \ doing this for data that has a few extreme outliers, that may be what you want.\
    \ If you're doing this for data that has a large number of extreme outliers, it\
    \ may be better to use a different algorithm that minimizes the median.\nIf you\
    \ need to process large quantities of numbers, then you may want to try a more\
    \ sophisticated algorithm.\n<|/ a |>\n<| c |>\nFor what it's worth, I just did\
    \ some tests on my MacBook Pro. I'm doing this sort of thing for my first couple\
    \ years as a hobby. I did it on 5000 numbers, and the median was about 1.55 (the\
    \ average was about 1.05). I ran my own tests using different algorithms, and\
    \ the median is almost always around 1.55 for 5000 numbers. I've never seen a\
    \ better result than the median for 5000 numbers.\n<|/ c |>\n<| c |>\nI ran a\
    \ test myself with a set of 50,000 numbers, and the median was about 3.8 (the\
    \ average was about 3.85).  This doesn't mean that an algorithm that minimizes\
    \ the mean absolute deviation will always give the best results.  It just means\
    \ there are some cases where it gives the best result.\n<|/ c |>\n<| a |>\nIn\
    \ Perl, you can use the Math::Statistics::Descriptive module to compute a standard\
    \ error of the mean.\n<|/ a tags=statistics,math,mathematical-optimization,floating-point,perl\
    \ dscore=4 |>\n<| c |>\nThis looks very promising.  However, when I tried it,\
    \ I get an error that Descriptive isn't installed.  However, when I install that\
    \ module it says it's not installed.\n<|/ c |>\n<| a tags=statistics,math", " \
    \   my $mean = mean($numbers);\n    my $mad_sum = 0;\n    my $length = 0;", " \
    \   my $mean = $numbers[0];\n    my $deviation = 0;", "    my($mean) = @$numbers;\n\
    \    my @means;\n    my $sum = 0;\n    foreach my $number (@$numbers) {\n    \
    \    $sum += $number;\n        push @means, $sum/@$numbers;\n    }\n    return\
    \ $means[0];\n}", "    my $sum = 0;\n    my $sum_sq = 0;\n    my $mean;\n    my\
    \ $n;\n    my $mad;\n    my $max_x;", "    my $sum = 0;\n    my $mean;\n    my\
    \ $mad_sum;\n    my $i;\n    my $x = 0;\n    my $x_mean;\n    my $j;", "    my($sum,\
    \ $count) = @_;\n    my($mean, @numbers);\n    my $average;\n    foreach my $number\
    \ (@$numbers) {\n        $sum += $number;\n        $count++;\n    }\n    $mean\
    \ = $sum / $count;\n    foreach my $number (@$numbers) {\n        $numbers[$number]\
    \ /= $mean;\n    }\n    foreach my $number (@$numbers) {\n        push (@numbers,\
    \ $number);\n    }\n    my($maximum);\n    $maximum = max (@numbers);\n    foreach\
    \ my $number (@numbers) {\n        $numbers[$number] /= $maximum;\n    }\n   \
    \ $maximum = max (@numbers);\n    $maximum = $maximum * $maximum;\n    foreach\
    \ my $number (@numbers) {\n        $numbers[$number] = $numbers[$number] * $maximum;\n\
    \    }\n    my $median;\n    my $median_index;\n    for (my $i = @$numbers - 1\
    \ ; $i >= 0 ; $i--) {\n        my $j = ($i + 1) % @$numbers;\n        my $sum\
    \ = 0;\n        my $difference = $numbers[$i] - $numbers[$j];\n        for my\
    \ $k (@$numbers) {\n            $sum += $k * $difference;\n        }\n       \
    \ if ($sum > $median) {\n            $median = $sum / @$numbers;\n           \
    \ $median_index = $i;\n        }\n    }\n    return $median;\n}", "    my($mean,\
    \ $sum) = @_;\n    my @return_values;\n    \n    my $sum = 0.0;\n    for my $number\
    \ (@$numbers) {\n        $sum += $number;\n    }\n    \n    for my $number (@$numbers)\
    \ {\n        push(@return_values, $number - $sum);\n    }\n    \n    return mean(@return_values);\n\
    }", "    return $numbers unless @$numbers > 1;\n    return $numbers[0] unless\
    \ @$numbers == 1;", "    my $n = scalar(@$numbers);\n    my $mean = 0;\n    my\
    \ $mad = 0;\n    my $sum = 0;\n    foreach my $number (@$numbers) {\n        $sum\
    \ += $number;\n        $mean += $number;\n    }\n    $mean /= $n;\n    foreach\
    \ my $number (@$numbers) {\n        $mad += abs($number - $mean);\n    }\n   \
    \ return $mad / $n;\n}", "    if (@$numbers == 0) {\n        return 0;\n    }\n\
    \    my $mean = sum(@$numbers) / (scalar(@$numbers));\n    my(@diffs);\n    for\
    \ my $number (@$numbers) {\n        push @diffs, $number - $mean;\n    }\n   \
    \ return sum(@diffs) / scalar(@diffs);\n}", "    my $mean = mean($numbers);\n\
    \    my $mad = 0;\n    my $i = 0;\n    foreach my $number (@$numbers) {\n    \
    \    my $absdiff = $number - $mean;\n        if ($absdiff != 0) {\n          \
    \  $mad += $absdiff;\n        }\n        $i++;\n    }\n    $mad /= $i;\n    return\
    \ $mad;\n}", "    # Mean\n    my($mean) = 0.0;\n    foreach my $num (@$numbers)\
    \ {\n        $mean += $num;\n    }\n    $mean /= @$numbers;\n    # Mean Absolute\
    \ Deviation\n    my($mad) = 0.0;\n    foreach my $num (@$numbers) {\n        my\
    \ $diff = $num - $mean;\n        $mad += abs($diff);\n    }\n    $mad /= @$numbers;\n\
    \    return $mad;\n}", "    my $mean = mean($numbers);\n    return 0 unless defined\
    \ $mean;\n    return scalar(grep { $_ != $mean } @$numbers);\n}", "    my @means;\n\
    \    my @mad_stats;\n    my $mean;", "    my $sum = 0.0;\n    my $mean;\n    my\
    \ $diff;\n    foreach my $num (@$numbers) {\n\t$sum += $num;\n\t$mean = $sum /\
    \ @$numbers;\n\t$diff = $num - $mean;\n\t$diff *= $diff;\n    }\n    return $sum\
    \ / @$numbers;\n}", "    my($sum) = 0;\n    foreach my $n (@$numbers) {\n    \
    \    $sum += abs($n - $n->{mean});\n    }\n    return $sum / @$numbers;\n}", '    my
    @sums;', "    my($mean) = $numbers[0];\n    $numbers = @$numbers[1..$#numbers];\n\
    \    my $n = @$numbers;\n    my $sum = 0;\n    foreach my $number (@$numbers)\
    \ {\n        $sum += $number - $mean;\n    }\n    return $sum / $n;\n}", "   \
    \ $numbers -= mean_of_numbers($numbers);\n    my $mean = mean_of_numbers($numbers);\n\
    \    return $numbers->mean() if ($numbers->is_a($self->_record_class));\n    my\
    \ $squared_sum = Math::BigFloat->new(0);\n    foreach my $number (@$numbers) {\n\
    \        my $tmp = $number - $mean;\n        $squared_sum += Math::BigFloat->new($tmp*$tmp);\n\
    \    }\n    return Math::BigFloat->new($squared_sum->numify() / scalar @$numbers);\n\
    }", "    return unless @$numbers;\n    my $mean = @$numbers / @$numbers != 0.0\
    \ ?\n        mean($numbers) : 0;\n    my $squares = 0.0;\n    for(@$numbers) {\n\
    \        $squares += $_ * $_;\n    }\n    my $mad_abs = $squares - $mean * $mean;\n\
    \    return $mad_abs;\n}", "    my $mean;\n    my $mad;\n    my $total;\n    my\
    \ @sorted_numbers;", "    my $mean    = mean($numbers);\n    my $mad;\n    if\
    \ (scalar @$numbers == 0) {\n        return 0;\n    }\n    my $diff = @$numbers\
    \ == 1 ? $numbers[0] : $numbers;\n    foreach my $n (@$numbers) {\n        $mad->[$n]\
    \ = abs($diff->[$n] - $mean->[$n]);\n    }\n    $mad = mean $mad;\n    return\
    \ $mad;\n}", "    # Take the absolute difference between each element and the\
    \ mean.\n    # A negative difference means the point is higher.\n    # This is\
    \ just one mean, so we divide by one.\n    my $mean = $numbers[0] / @$numbers;",
  '    $numbers[0] = $numbers[0] || 0;', "    my($mean) = $numbers[0] / @$numbers;\n\
    \    my(@results) = ();\n    my($i) = 0;\n    my $average = 0;\n    foreach my\
    \ $number (@$numbers) {\n        $i++;\n        push (@results, ($number - $mean));\n\
    \        if ($i > @$numbers / 2) {\n            push(@results, 0);\n        }\n\
    \    }\n    foreach my $result (@results) {\n        $average += $result;\n  \
    \  }\n    $average /= $i;\n    return $average;\n}", "    my($mean_number) = $numbers->[0];\n\
    \    my(@means) = ();\n    push(@means, $mean_number);\n    foreach (@$numbers)\
    \ {\n        push(@means, $_->[0]) unless ($_->[0] == $mean_number);\n    }\n\
    \    my($mad) = ();\n    foreach (@means) {\n        $md += abs($_ - $mean_number);\n\
    \    }\n    $md / scalar(@means);\n}", "    my $length = scalar @$numbers;\n \
    \   my $mean = @$numbers == 0 ? 0 : ($numbers[0] + $numbers[1]) / 2;\n    my @sums;\n\
    \    foreach my $x (@$numbers) {\n        $sums[$x] += $x;\n    }\n    foreach\
    \ my $x (@$numbers) {\n        my $x_mean = @$numbers == 0 ? 0 : ($sums[$x] /\
    \ $length);\n        push(@$numbers, $x - $x_mean);\n    }\n    return $sums[0];\n\
    }", "    my $sum = sum(@$numbers);\n    my $size = @$numbers;\n    my $mean =\
    \ $sum / $size;\n    my @means = map { ($_ - $mean) } @$numbers;\n    my $mad\
    \ = abs( scalar @means / 2.0 );\n    return $mad;\n}", "    my $mean;\n    my\
    \ $sum = 0;\n    foreach my $number (@$numbers) {\n        $sum += abs($number);\n\
    \        $mean += $number;\n    }\n    return $sum / @$numbers if @$numbers >\
    \ 0;\n    return $mean if @$numbers == 0;\n    return;\n}", "    my($sum, $sumOfSquareDiffs,\
    \ $sumOfSquareDiffsSQ, $i, $j, $sumOfSquareDiffsSum, $sumOfSquareDiffsSQSum, $mean,\
    \ $meanOfSquareDiffs, $meanOfSquareDiffsSum);\n    for(my $i=0; $i<@$numbers;\
    \ $i++) {\n        $sum += $numbers[$i];\n    }\n    for(my $i=0; $i<@$numbers;\
    \ $i++) {\n        $sumOfSquareDiffsSum += ($numbers[$i] - $sum)*($numbers[$i]\
    \ - $sum);\n    }\n    $sumOfSquareDiffsSQ = $sumOfSquareDiffsSum/@$numbers;\n\
    \    for(my $i=0; $i<@$numbers; $i++) {\n        $sumOfSquareDiffs += $numbers[$i]*$numbers[$i];\n\
    \    }\n    $mean = $sum/$@$numbers;\n    $meanOfSquareDiffs = $sumOfSquareDiffs/@$numbers;\n\
    \    $meanOfSquareDiffsSum = $sumOfSquareDiffsSum/@$numbers;\n    for(my $i=0;\
    \ $i<@$numbers; $i++) {\n        $meanOfSquareDiffs += ($numbers[$i] - $mean)*($numbers[$i]\
    \ - $mean);\n    }\n    $meanOfSquareDiffsSQ = $meanOfSquareDiffsSum/@$numbers;\n\
    \    return sqrt($meanOfSquareDiffsSQ/$sumOfSquareDiffsSQ);\n}", "    my($mean)\
    \ = 0.0;\n    my($mad) = 0.0;\n    foreach my $number (@$numbers) {\n        $mean\
    \ += $number;\n        $mad += ($number - $mean) * ($number - $mean);\n    }\n\
    \    $mad /= @$numbers;\n    return $mad;\n}", "    my $mean_of_numbers = mean(@$numbers);\n\
    \    return scalar map {abs($_ - $mean_of_numbers)} @$numbers;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
