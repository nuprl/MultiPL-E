name: HumanEval_0_has_close_elements
language: pl
prompt: "# Check if in given array of numbers, are any two numbers closer to each\
  \ other than\n# given threshold.\n# >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n\
  # \"\"\n# >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n# 1\nsub\
  \ has_close_elements {\n    my($numbers, $threshold) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&has_close_elements;\n\
  \        if(eq_deeply($candidate->([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
  \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05),\"\")) {\n        print \"ok!\" }else{\n     \
  \   exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 5.9, 4.0, 5.0],\
  \ 0.95),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
  \  if(eq_deeply($candidate->([1.0, 2.0, 5.9, 4.0, 5.0], 0.8),\"\")) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.0], 0.1),1)) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.1,\
  \ 2.2, 3.1, 4.1, 5.1], 0.5),\"\")) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $distance;\n    my $last_element;\n    my $sum;", "    my $numbers_ref\
    \ = $numbers;\n    $numbers_ref = [@$numbers_ref];\n    my $threshold = _float($threshold);\n\
    \    my $min_diff = _float(_min($numbers_ref));\n    my $max_diff = _float(_max($numbers_ref));\n\
    \    my $flag = 0;\n    foreach my $num (@$numbers) {\n        # Check if difference\
    \ between current number and min is\n        # smaller than threshold\n      \
    \  my $diff = _float($num) - $min_diff;\n        if ($diff < $threshold) {\n \
    \           $flag = 1;\n            last;\n        }\n        # Check if difference\
    \ between current number and max is\n        # larger than threshold\n       \
    \ my $diff = _float($num) - $max_diff;\n        if ($diff > $threshold) {\n  \
    \          $flag = 1;\n            last;\n        }\n    }\n    return $flag;\n\
    }", "    my(@return) = ();\n    foreach my $number (@$numbers) {\n        if (abs($number\
    \ - $threshold) <= $threshold) {\n            push(@return, $number);\n      \
    \  }\n    }\n    return (@return) ? 1 : 0;\n}", "    my @sorted_numbers = @$numbers;\n\
    \    sort { $a <=> $b }\n\tmap {\n\t    $sorted_numbers[$_] <=> $sorted_numbers[$_\
    \ -1]\n\t} 0..$#sorted_numbers;\n    my $cnt = 0;\n    foreach my $number (@sorted_numbers)\
    \ {\n\tif ($sorted_numbers[$cnt] < $threshold + 1) {\n\t    return 1;\n\t} elsif\
    \ ($sorted_numbers[$cnt] == $sorted_numbers[$cnt - 1] + 1) {\n\t    return 1;\n\
    \t} elsif ($sorted_numbers[$cnt] == $sorted_numbers[$cnt + 1] - 1) {\n\t    return\
    \ 1;\n\t}\n\t$cnt++;\n    }\n    return 0;\n}", "    \n    if (@$numbers == 0)\
    \ {\n        return \"\";\n    }\n    \n    my $smallest_value = $numbers[0];\n\
    \    my $second_smallest_value = $numbers[0];\n    \n    my $diff_to_smallest_value;\n\
    \    \n    for my $number (@$numbers) {\n        if ($number == $smallest_value)\
    \ {\n            $diff_to_smallest_value = $smallest_value - $number;\n      \
    \  }\n        else {\n            $diff_to_smallest_value = $number - $smallest_value;\n\
    \        }\n        \n        if ($diff_to_smallest_value <= $threshold) {\n \
    \           ($second_smallest_value) = $smallest_value, $number;\n           \
    \ $smallest_value = $number;\n        }\n        else {\n            return 1;\n\
    \        }\n    }\n    \n    return 0;\n}", "    my(@close_numbers, $found) =\
    \ (0);\n    my(@numbers_to_check) = @$numbers;\n    my $threshold = abs($threshold);",
  "    my($j, $k, $sum) = (0, 0);\n    for (my $i = 0; $i < @$numbers; ++$i) {\n \
    \       $sum += $numbers->[$i];\n        for (my $j = 0; $j < @$numbers; ++$j)\
    \ {\n            $k = $i;\n            while ($k != $j) {\n                if\
    \ ($sum > $threshold) {\n                    $sum -= $numbers->[$k];\n       \
    \             ++$k;\n                } else {\n                    $sum += $numbers->[$k];\n\
    \                    --$k;\n                }\n            }\n            if ($k\
    \ != $j) {\n                ++$j;\n            }\n        }\n    }\n    $j = $k\
    \ = 0;\n    while ($j != $k) {\n        $sum -= $numbers->[$j];\n        --$j;\n\
    \    }\n    return $j == $k;\n}", "    my($result,$count,$min_diff) = ('',0,0);\n\
    \    foreach my $number (@$numbers) {\n        # Calculate differences between\
    \ the given number and the rest of the numbers.\n        $diff = 0;\n        for(\
    \ my $i = 0; $i < $#{$numbers};  $i++) {\n            $diff += (($number->[$i]\
    \ - $numbers->[$i]) < $threshold) ? 1 : 0;\n        }\n        if($diff > $min_diff)\
    \ {\n            $min_diff = $diff;\n            $result = $number->[0];\n   \
    \         $count = 1;\n        } else {\n            $count++;\n        }\n  \
    \  }\n    return $count;\n}", "    my(@closed_elements);\n    for my $n ( @$numbers\
    \ ) {\n        my $diff = $n - $threshold;\n        if ( $diff == 0 ) {\n    \
    \        $closed_elements[$n] = $n;\n        }\n        else {\n            my\
    \ @diffs;\n            push(@diffs, $n, $n - $diff);\n            push(@diffs,\
    \ $n - $diff, $n);\n            foreach my $diff (@diffs) {\n                if\
    \ ( exists $closed_elements[$diff] ) {\n                    $closed_elements[$diff]++;\n\
    \                    last;\n                }\n                else {\n      \
    \              $closed_elements[$diff] = 1;\n                }\n            }\n\
    \        }\n    }\n    my($answer) = $closed_elements[$threshold] ? 1 : 0;\n \
    \   return $answer;\n}", "    my $num_elements = scalar @$numbers;\n    for (my\
    \ $i = 0; $i < $num_elements; $i++) {\n        my $min_diff = $threshold;\n  \
    \      my $curr_diff;\n        for (my $j = $i + 1; $j < $num_elements; $j++)\
    \ {\n            $curr_diff = $numbers[$i] - $numbers[$j];\n            if ($curr_diff\
    \ < $min_diff) {\n                $min_diff = $curr_diff;\n            }\n   \
    \     }\n        if ($min_diff <= $threshold) {\n            return $i;\n    \
    \    }\n    }\n    return 0;\n}", "    my $closest_idx = 0;\n    my $closest_dist;\n\
    \    my $i = 0;\n    my $dist = 0;\n    while(@$numbers) {\n        $dist = $numbers[$i]\
    \ - $numbers[$closest_idx];\n        if($dist < $threshold) {\n            $closest_idx++;\n\
    \        } elsif($dist == $threshold && $closest_idx > 0) {\n            return\
    \ $closest_idx;\n        }\n        $i++;\n    }\n    return 0;\n}", "    \n \
    \   # Sort and get rid of duplicates.\n    my = sort @$numbers;\n    my $count\
    \ = 1;\n    my $min = pop(@numbers);\n    my $max = $min;", "    my(@close_elements);\n\
    \    for my $number (@$numbers) {\n        push (@close_elements, $number) if\
    \ abs($number - $_) <= $threshold;\n    }\n    return !@close_elements;\n}", " \
    \   my(@found) = $numbers =~ m/^\\s*\n                             (\n       \
    \                      \\A\n                             \\s*\n              \
    \               \\Q$numbers\n                             \\s*\n             \
    \                \\E\n                             \\s*\n                    \
    \         \\Q$threshold\n                             \\s*\n                 \
    \            \\E\n                             \\s*\n                        \
    \     \\Q$threshold\n                             \\s*\n                     \
    \        \\E\n                             \\s*\n                            \
    \ \\Q$numbers\n                             \\s*\n                           \
    \  \\E\n                             \\s*\n                             \\Q$threshold\n\
    \                             \\s*\n                             \\E\n       \
    \                      \\s*\n                             \\Q$numbers\n      \
    \                       \\s*\n                             \\E\n             \
    \                \\s*\n                             \\Q$threshold\n          \
    \                   \\s*\n                             \\E\n                 \
    \            \\s*\n                             \\Q$numbers\n                \
    \             \\s*\n                             \\E\n                       \
    \      \\s*\n                             \\Q$threshold\n                    \
    \         \\s*\n                             \\E\n                           \
    \  \\s*\n                             \\Q$numbers\n                          \
    \   \\s*\n                             \\E\n                             \\s*\n\
    \                             \\Q$threshold\n                             \\s*\n\
    \                             \\E\n                             \\s*\n       \
    \                      \\Q$numbers\n                             \\s*\n      \
    \                       \\E\n                             \\s*\n             \
    \                \\Q$threshold\n                             \\s*\n          \
    \                   \\E\n                             \\s*\n                 \
    \            \\Q$numbers\n                             \\s*\n                \
    \             \\E\n                             \\s*\n                       \
    \      \\Q$threshold\n                             \\s*\n                    \
    \         \\E\n                             \\s*\n                           \
    \  \\Q$numbers\n                             \\s*\n                          \
    \   \\E\n                             \\s*\n                             \\Q$threshold\n\
    \                             \\s*\n                             \\E\n       \
    \                      \\s*\n                             \\Q$numbers\n      \
    \                       \\s*\n                             \\E\n             \
    \                \\s*\n                             \\Q$threshold\n          \
    \                   \\s*\n                             \\E\n                 \
    \            \\s*\n                             \\Q$numbers\n                \
    \             \\s*\n                             \\E\n                       \
    \      \\s*\n                             \\Q$threshold\n                    \
    \         \\s*\n                             \\E\n                           \
    \  \\s*\n                             \\Q$numbers\n                          \
    \   \\s*\n                             \\E\n                             \\s*\n\
    \                             \\Q$threshold\n                             \\s*\n\
    \                             \\E\n                             \\s*\n       \
    \                      \\Q$numbers\n                             \\s*\n      \
    \                       \\E\n                             \\s*\n             \
    \                \\Q$threshold\n                             \\s*\n          \
    \                   \\E\n                             \\s*\n                 \
    \            \\Q$numbers\n                             \\s*\n                \
    \             \\E\n                             \\s*\n                       \
    \      \\Q$threshold\n                             \\s*\n                    \
    \         \\E\n                             \\s*\n                           \
    \  \\Q$numbers\n                             \\s*\n                          \
    \   \\E\n                             \\s*\n                             \\Q$threshold\n\
    \                             \\s*\n                             \\E\n       \
    \                      \\s*\n                             \\Q$numbers\n      \
    \                       \\s*\n                             \\E\n             \
    \                \\s*\n                             \\Q$threshold\n          \
    \                   \\s*\n", "    \n    if (@$numbers == 0) {\n        return\
    \ '';\n    }\n    \n    my $n = @$numbers;\n    \n    my @closest_numbers;\n \
    \   \n    for (my $i = 0; $i < $n; $i++) {\n        my $diff = $numbers[$i] -\
    \ $threshold;\n        \n        if ($diff >= 0) {\n            $closest_numbers[$i]\
    \ = $numbers[$i];\n        } elsif ($diff < 0) {\n            my $min_value =\
    \ $i;\n            \n            for (my $j = @$numbers - 1 ; $j > $i; $j--) {\n\
    \                $diff = $numbers[$j] - $threshold;\n                \n      \
    \          if ($diff < 0) {\n                    $min_value = $j;\n          \
    \      }\n            }\n            \n            $closest_numbers[$i] = $numbers[$min_value];\n\
    \        } else {\n            die \"unhandled situation\";\n        }\n    }\n\
    \    \n    return scalar(@closest_numbers);\n}", '    my (@closers);', "    my(@array)\
    \ = @$numbers;\n    my(@closest_numbers);\n    my($number);\n    my($closest_number);",
  "    my @num_list;\n    \n    foreach my $num (@$numbers) {\n        push @num_list,\
    \ $num;\n    }\n    \n    my $result = &distance2($num_list, $threshold);\n  \
    \  return $result == 1;\n}", "    foreach my $number (@$numbers) {\n        foreach\
    \ my $idx (0..$#{$numbers} - 1) {\n            next if $idx != $idx && abs($numbers[$idx]\
    \ - $numbers[$idx + 1]) < $threshold;\n            return $idx if abs($numbers[$idx]\
    \ - $numbers[$idx + 1]) < $threshold;\n        }\n    }\n    return \"\";\n}",
  "    my(@elements);\n    my($element, $num1, $num2);\n    my($close, $close_num,\
    \ $close_nums);\n    foreach $element (@$numbers) {\n        $num1 = $element;\n\
    \        foreach $close_num (@$close_nums) {\n            $num2 = $close_num;\n\
    \            if (abs($num1 - $num2) <= $threshold) {\n                $close++;\n\
    \            }\n        }\n    }\n    if ($close > 0) {\n        return 1;\n \
    \   }\n    return 0;\n}", "    my $closest_distance = undef;\n    my $closest_number\
    \ = undef;\n    for (@$numbers) {\n        if (!defined $closest_distance) {\n\
    \            $closest_distance = $_;\n            $closest_number = $_;\n    \
    \    } elsif ($_ < $closest_distance) {\n            $closest_distance = $_;\n\
    \            $closest_number = $_;\n        } elsif ($_ > $closest_distance +\
    \ $threshold) {\n            $closest_distance = $_;\n        }\n    }\n    return\
    \ !defined $closest_distance;\n}", "    my @elements = ();\n    foreach my $num\
    \ (@$numbers) {\n        push @elements, $num if abs($num - $threshold) < $num;\n\
    \    }\n    return scalar(@elements) > 0;\n}", '    my $max;', "    my $count\
    \ = 0;\n    my $min = 100;\n    for (@$numbers) {\n        my $x = $_;\n     \
    \   if ($x <= $min) {\n            $min = $x;\n        }\n    }\n    for (@$numbers)\
    \ {\n        my $x = $_;\n        if ($x < $min - $threshold) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}", "    foreach my $number (@$numbers)\
    \ {\n        my $distance = $number - $threshold;\n        if ($distance < 0)\n\
    \        {\n            $distance *= -1;\n        }\n        if ($distance < 0)\n\
    \        {\n            return 1;\n        }\n    }\n    return \"\";\n}", " \
    \   return unless (ref $numbers);\n    return $numbers->_has_close_elements($threshold);\n\
    }", '    my $n = @$numbers;', "    my @numbers;\n    foreach my $number(@$numbers)\
    \ {\n        if ($number < $threshold) {\n            push(@numbers, $number);\n\
    \        } else {\n            push(@numbers, $number);\n            last;\n \
    \       }\n    }\n    # Compare array elements one by one from left to right and\
    \ return the smallest\n    # which is not greater than given threshold.\n    my\
    \ $first_number = $numbers[0];\n    my $counter = 1;\n    foreach my $number(@$numbers)\
    \ {\n        if ($number < $first_number - $threshold) {\n            $first_number\
    \ = $number;\n        } elsif ($number > $first_number + $threshold) {\n     \
    \       $first_number = $number;\n        } elsif ($number == $first_number) {\n\
    \            $first_number = $number;\n        } else {\n            ++$counter;\n\
    \        }\n    }\n    return $first_number == $numbers[scalar(@$numbers) - 1]\
    \ ? \"0\" : ($counter > 1 ? $counter : 0);\n}", "    my(@numbers) = @$numbers;\n\
    \    my($i, $j, $diff);", "    my(@close, @not_close);\n    my($i, $j, $k);\n\
    \    foreach $i (@$numbers) {\n        @close = ();\n        @not_close = ();\n\
    \        @k = ();\n        foreach $j (@$numbers) {\n            if ($i != $j\
    \ && abs($i - $j) < $threshold) {\n                push(@k, $j);\n           \
    \     push(@close, $i);\n            } else {\n                push(@not_close,\
    \ $i);\n            }\n        }\n        if (scalar @close == scalar @$numbers)\
    \ {\n            return 1;\n        }\n        foreach $k (@k) {\n           \
    \ if (scalar @not_close == scalar @$numbers) {\n                return 1;\n  \
    \          }\n            foreach $j (@not_close) {\n                if (abs($j\
    \ - $k) < $threshold) {\n                    return 1;\n                }\n  \
    \          }\n        }\n    }\n    return \"\";\n}", "    foreach my $number\
    \ (@$numbers) {\n\tmy $threshold = abs($threshold);\n\tmy $diff_threshold = 0;\n\
    \tmy $diff = 0;\n\tforeach my $other_number (@$numbers) {\n\t    my $difference\
    \ = abs($number - $other_number);\n\t    if ($difference >= $threshold) {\n\t\t\
    $diff_threshold = $difference if ($difference < $diff_threshold);\n\t\t$diff =\
    \ $difference if ($difference < $diff);\n\t    }\n\t}\n\treturn '' if ($diff_threshold\
    \ < $threshold * $diff_threshold);\n\treturn $diff if ($diff_threshold < $diff\
    \ * $diff_threshold);\n\treturn $diff_threshold if ($diff_threshold < $threshold\
    \ * $diff);\n    }\n    return 0;\n}", '    my $min = $numbers[0];', '    my(@result)
    = ();', '    my @close;', "    my($min, $max) = @_;\n    my $count = 0;\n    foreach\
    \ my $num (@$numbers) {\n        if ($min > $num && $max < $num) {\n         \
    \   ++$count;\n        } elsif ($min > $num || $max < $num) {\n            ++$count\
    \ if $min > $num && $max < $num;\n        }\n    }\n    return $count;\n}", '    my(@results);',
  "    my $result = -1;\n    foreach my $number (@$numbers) {\n        my $diff =\
    \ $number->[0] - $threshold;\n        if($diff < 0.0) {\n            my $index\
    \ = 0;\n            foreach my $prev (@$numbers) {\n                last if($prev->[0]\
    \ eq $number->[0]);\n                $index++;\n                if($prev->[0]\
    \ <= $number->[0]) {\n                    last;\n                }\n         \
    \   }\n            $result = $index;\n        }\n    }\n    defined($result) ?\
    \ $result : '';\n}", "    my $threshold2 = $threshold * $threshold;\n    my $result\
    \ = \"\";\n    for my $number (@$numbers) {\n        if ($number > $threshold2)\
    \ {\n            $result = 1;\n            last;\n        } elsif ($number < $threshold2)\
    \ {\n            $result = 0;\n            last;\n        } elsif ($number ==\
    \ $threshold2) {\n            $result = \"\";\n        }\n    }\n    return $result;\n\
    }", "    my(@closed_numbers);\n    # Sort numbers in ascending order.\n    my\
    \ @sorted_numbers = @$numbers;\n    sort { $a <=> $b } @sorted_numbers;\n    #\
    \ Check if two adjacent numbers are close to each other.\n    foreach my $i (0\
    \ .. $#sorted_numbers - 1) {\n        my $prev_number = $sorted_numbers[$i - 1];\n\
    \        my $current_number = $sorted_numbers[$i];\n        # Check if two adjacent\
    \ numbers are closer to each other than\n        # threshold.\n        if (abs($prev_number\
    \ - $current_number) > $threshold) {\n            if ($prev_number == $current_number)\
    \ {\n                push(@closed_numbers, $prev_number);\n            } elsif\
    \ ($prev_number == $sorted_numbers[$i - 1] + 1 ||\n                    $current_number\
    \ == $sorted_numbers[$i] + 1) {\n                push(@closed_numbers, $current_number);\n\
    \            }\n        }\n    }\n    if (@closed_numbers) {\n        if (scalar(@closed_numbers)\
    \ == 1) {\n            return $closed_numbers[0];\n        } else {\n        \
    \    return 1;\n        }\n    }\n    return '';\n}", '    $threshold = 0 unless
    defined $threshold;', "    $threshold = 0 if $threshold <= 0;\n    return unless\
    \ @$numbers > 0;\n    my($min, $max, $sum) = @$numbers;\n    return 0 if @$numbers\
    \ == 1 and $min == $max;\n    return $min if $sum < $threshold;\n    return $max\
    \ if $sum > $threshold;\n    $max = $min if ($min > $max);\n    return $min if\
    \ $sum - $threshold < $max - $min;\n    return $max if $sum - $threshold > $max\
    \ - $min;\n    return $sum - $threshold if $min == $max;\n}", "    my $numbers_ref\
    \ = is_ref($numbers);\n    $threshold = defined $threshold ? $threshold : -1;\n\
    \    my @numbers = is_ref($numbers) ? @{ $numbers } : ($numbers);\n    my $result\
    \ = -1;\n    my $max_distance = -1;\n    for my $number (@numbers) {\n       \
    \ if ($number < $threshold) {\n            next;\n        }\n        for my $index\
    \ (0..@numbers) {\n            my $current_dist = 0;\n            my $distance\
    \ = 0;\n            my $current_number = $numbers_ref ? $numbers->[$index] : $$numbers;\n\
    \            for (my $index2 = 0; $index2 < $index; $index2++) {\n           \
    \     my $current_element = $numbers_ref ? $numbers->[$index2] : $$numbers;\n\
    \                $current_dist += ($current_number - $current_element)->abs;\n\
    \            }\n            if ($distance == 0 || $current_dist > $distance) {\n\
    \                $distance = $current_dist;\n            }\n            if ($max_distance\
    \ < $distance) {\n                $max_distance = $distance;\n               \
    \ $result = $index;\n            }\n        }\n    }\n    return $result;\n}",
  '    $threshold ||= 0;', "    my $min = 0;\n    my $max = $#$numbers;\n    my $found\
    \ = 0;", "    my($last_number);\n    my($min_distance);", "    my $is_close =\
    \ $numbers[0] <= $threshold || $numbers[0] >= $threshold;\n    for my $n (@$numbers)\
    \ {\n        return 1 if $n <= $threshold && $n >= $threshold;\n        return\
    \ 0 if $n > $threshold && $n < $threshold;\n        $is_close ||= $n >= $threshold;\n\
    \    }\n    return $is_close;\n}", "    return '' if @$numbers == 0;\n    return\
    \ 1 unless @$numbers == 1 or @$numbers == 2;\n    my($min_val) = @$numbers;\n\
    \    my $max_val = @$numbers == 1 ? $min_val : $numbers[-1];\n    for (my $i =\
    \ 0; $i < @$numbers; $i++) {\n        my($val, $val2) = @$numbers[$i];\n     \
    \   if($val > $max_val) {\n            $max_val = $val;\n        }\n        if($val2\
    \ < $max_val) {\n            $max_val = $val2;\n        }\n    }\n    my $diff\
    \ = ($max_val - $min_val);\n    return '' if $diff < $threshold;\n    return $diff\
    \ == $threshold ? 0 : 1;\n}", "    my $result = 1;\n    my $array_len = @$numbers;\n\
    \    my $array_sum;\n    my $diff;\n    my $i;\n    my $j;", "    my(@close_numbers);\n\
    \    my $close_value = $threshold;\n    for(my $i = 0; $i <= $#{$numbers} - 1;\
    \ $i++) {\n        my $j = ($i + 1) % $#{$numbers};\n        next if ($i > $#{$numbers}\
    \ - 2 || $j > $#{$numbers} - 2);\n        my $diff = $$numbers[$i] - $$numbers[$j];\n\
    \        if (abs($diff) <= abs($close_value)) {\n            push(@close_numbers,\
    \ $$numbers[$j]);\n        }\n    }\n    return @close_numbers;\n}", "    my @close\
    \ = ();\n    my $i;\n    for ($i = $#numbers; $i >= 0; $i -= 1) {\n        if\
    \ (abs($numbers[$i] - $numbers[$i - 1]) < $threshold) {\n            push(@close,\
    \ $numbers[$i - 1]);\n            pop(@close);\n        }\n        push(@close,\
    \ $numbers[$i]);\n    }\n    return scalar @close ? 1 : 0;\n}", '    my(@closest_numbers);',
  "    foreach my $number (@$numbers) {\n        foreach my $index (0..$#$numbers)\
    \ {\n            if (abs($number->[$index] - $number->[$index]) <= $threshold)\
    \ {\n                return 1;\n            }\n        }\n    }\n    return 0;\n\
    }", "    my @diffs;\n    \n    foreach my $number (@$numbers) {\n        next\
    \ unless defined $number;\n        \n        push @diffs, $number - $_ for @_;\n\
    \    }\n    \n    return 0 if @diffs == 0;\n    \n    my $min;\n    foreach my\
    \ $d (@diffs) {\n        $min = $d if $min == -1 || $d < $min;\n    }\n    \n\
    \    return 0 if $min == -1;\n    \n    my $closest = -1;\n    my $closest_diff\
    \ = abs($min) - abs($threshold);\n    \n    foreach my $number (@$numbers) {\n\
    \        return 1 if abs($number - $min) < $closest_diff;\n        $closest_diff\
    \ = abs($number - $min);\n        $closest = abs($number);\n    }\n    \n    return\
    \ 1;\n}", "    my $result = 0;\n    $result = 1 if (($numbers[0] - $numbers[1])\
    \ > ($threshold * $numbers[0]));\n    $result = 1 if (($numbers[1] - $numbers[2])\
    \ > ($threshold * $numbers[1]));\n    $result = 1 if (($numbers[2] - $numbers[3])\
    \ > ($threshold * $numbers[2]));\n    $result = 1 if (($numbers[3] - $numbers[4])\
    \ > ($threshold * $numbers[3]));\n    $result = 1 if (($numbers[4] - $numbers[5])\
    \ > ($threshold * $numbers[4]));\n    $result = 1 if (($numbers[5] - $numbers[6])\
    \ > ($threshold * $numbers[5]));\n    $result = 1 if (($numbers[6] - $numbers[7])\
    \ > ($threshold * $numbers[6]));\n    $result = 1 if (($numbers[7] - $numbers[8])\
    \ > ($threshold * $numbers[7]));\n    $result = 1 if (($numbers[8] - $numbers[9])\
    \ > ($threshold * $numbers[8]));\n    $result = 1 if (($numbers[9] - $numbers[10])\
    \ > ($threshold * $numbers[9]));\n    $result = 1 if (($numbers[10] - $numbers[11])\
    \ > ($threshold * $numbers[10]));\n    $result = 1 if (($numbers[11] - $numbers[12])\
    \ > ($threshold * $numbers[11]));\n    $result = 1 if (($numbers[12] - $numbers[13])\
    \ > ($threshold * $numbers[12]));\n    $result = 1 if (($numbers[13] - $numbers[14])\
    \ > ($threshold * $numbers[13]));\n    $result = 1 if (($numbers[14] - $numbers[15])\
    \ > ($threshold * $numbers[14]));\n    $result = 1 if (($numbers[15] - $numbers[16])\
    \ > ($threshold * $numbers[15]));\n    $result = 1 if (($numbers[16] - $numbers[17])\
    \ > ($threshold * $numbers[16]));\n    $result = 1 if (($numbers[17] - $numbers[18])\
    \ > ($threshold * $numbers[17]));\n    $result = 1 if (($numbers[18] - $numbers[19])\
    \ > ($threshold * $numbers[18]));\n    $result = 1 if (($numbers[19] - $numbers[20])\
    \ > ($threshold * $numbers[19]));\n    $result = 1 if (($numbers[20] - $numbers[21])\
    \ > ($threshold * $numbers[20]));\n    $result = 1 if (($numbers[21] - $numbers[22])\
    \ > ($threshold * $numbers[21]));\n    $result = 1 if (($numbers[", '    my $max_diff
    = $threshold * $threshold;', '    my(@closest_numbers, $index);', "    # return\
    \ empty string if there is no input numbers or threshold is 0\n    return '' unless\
    \ $numbers && $threshold && $threshold > 0;\n    # return empty string if threshold\
    \ is negative or greater than input number\n    return '' unless $threshold <\
    \ 0 && $threshold > $numbers[-1];\n    # return 1 if two numbers close to each\
    \ other than threshold, else 0\n    return 1 if $numbers[-1] - $numbers[0] <=\
    \ $threshold;\n    return 0;\n}", "    for my $number (@$numbers) {\n        for\
    \ my $i ( 0 .. $#{$numbers} - 1 ) {\n            next unless $i == $i;\n     \
    \       my $delta = $number - $numbers[$i];\n            if ( $delta <= 0 ) {\n\
    \                return $i if $delta <= $threshold;\n                return $i\
    \ if $delta >= -$threshold;\n            }\n        }\n    }\n    return 0;\n}",
  '    my @closest_numbers = ();', "    my $diff;\n    foreach my $n (@$numbers) {\n\
    \        $diff = $n - $threshold;\n        if ($diff < 0.0) {\n            return\
    \ undef;\n        }\n        elsif ($diff == 0.0) {\n            return $n;\n\
    \        }\n        elsif ($diff > 0.0) {\n            return 1;\n        }\n\
    \    }\n    return undef;\n}", "    my @sorted_numbers;\n    my @numbers_to_check;",
  "    my $count = 0;\n    for my $num (@$numbers) {\n        for my $num2 (@$numbers)\
    \ {\n            if ($num + $num2 > $threshold) {\n                last if $num2\
    \ > $threshold;\n            }\n            elsif ($num + $num2 < $threshold)\
    \ {\n                last if $num > $threshold;\n            }\n            elsif\
    \ ($num + $num2 == $threshold) {\n                ++$count;\n            }\n \
    \       }\n    }\n    return $count;\n}", "    for my $number (@$numbers) {\n\
    \        if (abs($number - $_) < $threshold) {\n            return $number if\
    \ $number < $_;\n        }\n    }\n    return '';\n}", "    my $diff;\n    foreach\
    \ my $number (@$numbers) {\n        $diff += abs($number - $threshold);\n    }\n\
    \    return 1 if $diff < 0;\n    return 0 if $diff == 0;\n    return 0;\n}", " \
    \   my $threshold2 = $threshold * $threshold;\n    $threshold2 += $threshold;",
  "    my $diff = Math::Abs - Math::Abs($numbers[0] - $numbers[1]);\n    my $i = 0;\n\
    \    foreach my $number (@$numbers) {\n        my $index = $i;\n        foreach\
    \ my $i (@$numbers) {\n            if ($index == $i) {\n                next;\n\
    \            }\n            my $diff2 = Math::Abs - Math::Abs($number - $numbers[$index]);\n\
    \            if ($diff2 > $diff) {\n                ($diff, $i) = ($diff2, $index);\n\
    \            }\n        }\n    }\n    return 1 if $diff < $threshold;\n    return\
    \ 0;\n}", "    my(@close_elements) = ();\n    foreach my $number (@$numbers) {\n\
    \        my($min, $max) = @$numbers[0..1];\n        if ($number > $max || $number\
    \ < $min) {\n            next;\n        }\n        if (abs($max - $min) < $threshold)\
    \ {\n            push(@close_elements, $number);\n        }\n    }\n    return\
    \ @close_elements;\n}", '    my(@numbers) = @_;', "    my @closest_numbers;\n\
    \    foreach my $n (@$numbers) {\n        push(@closest_numbers, $n) if $n < $threshold;\n\
    \    }\n    return 0 if (scalar(@closest_numbers) < 2);\n    return 1 if ($closest_numbers[0]\
    \ == $closest_numbers[1]);\n    return -1 if ($closest_numbers[0] < $closest_numbers[1]);\n\
    \    return;\n}", "    my %elements;\n    my $counter = 1;\n    foreach my $number\
    \ (@$numbers) {\n        if (exists $elements{$number}) {\n            $elements{$number}++;\n\
    \        }\n        else {\n            $elements{$number} = $counter;\n     \
    \       $counter++;\n        }\n    }\n    foreach my $key (sort keys %elements)\
    \ {\n        my $count = $elements{$key};\n        return $key if ($count < $threshold);\n\
    \    }\n    return 0;\n}", "    my $max;\n    my $min;\n    for (@$numbers) {\n\
    \        $min = $_;\n        $max = $_;\n        for (my $i = 1; $i < @$numbers;\
    \ $i++) {\n            if ($_ ne $numbers[$i]) {\n                $min = $_ if\
    \ $min > $_;\n                $max = $_ if $max < $_;\n            }\n       \
    \ }\n        if ($max - $min < $threshold) {\n            return $min;\n     \
    \   }\n    }\n    return undef;\n}", "    return '' unless @$numbers;\n    my\
    \ $threshold = $threshold;\n    return '' unless $threshold <= 1.0;\n    my $min_diff\
    \ = max( @$numbers ) - min( @$numbers );\n    return 1 if abs($min_diff / $threshold)\
    \ < 0.1;\n    my $max_diff = min( @$numbers ) - max( @$numbers );\n    return\
    \ 0 if abs($max_diff / $threshold) < 0.1;\n    return 1;\n}", "    my($first_number,\
    \ $second_number, $distance);\n    for(my $index = 0; $index < scalar(@$numbers);\
    \ $index++) {\n        next unless $numbers[$index];\n        $first_number =\
    \ $numbers[$index];\n        for(my $next = $index + 1; $next < scalar(@$numbers);\
    \ $next++) {\n            $second_number = $numbers[$next];\n            $distance\
    \ = abs($first_number - $second_number);\n            next if $distance < $threshold;\n\
    \        }\n        return $index;\n    }\n    return -1;\n}", '    my @sorted_numbers
    = sort {$a <=> $b} @$numbers;', "    my @results = ();\n    my $min_diff = abs($numbers[0]\
    \ - $numbers[1]);\n    for(my $i = 0; $i < @$numbers-1; $i++) {\n        my $diff\
    \ = $numbers[$i+1] - $numbers[$i];\n        if(abs($diff) < $min_diff) {\n   \
    \         $min_diff = abs($diff);\n        }\n        elsif(abs($diff) < $threshold)\
    \ {\n            push(@results, $i);\n        }\n    }\n    return scalar(@results)\
    \ == 0;\n}", "    my @numbers_sorted = sort {$a <=> $b} @$numbers;\n    my $closes\
    \ = -1;\n    for (my $i = 0; $i < @numbers_sorted; $i++) {\n        my $diff =\
    \ $numbers_sorted[$i] - $numbers_sorted[$i+1];\n        if ($diff < $threshold)\
    \ {\n            $closes = 1;\n            last;\n        }\n    }\n    return\
    \ $closes;\n}", "    my @found_numbers;\n    \n    # Check if all elements are\
    \ in array and sorted\n    if (@$numbers > 1) {\n        foreach my $n (@$numbers)\
    \ {\n            my $tmp;\n            my $found = 0;\n            \n        \
    \    for my $i (0..$#$numbers) {\n                $found = $found or $numbers[$i]\
    \ < $n;\n                \n                if ($i == $#$numbers - 1) {\n     \
    \               $found = $found or $n <= $threshold;\n                }\n    \
    \            \n                $tmp = $numbers[$i];\n                $numbers[$i]\
    \ = $n;\n                $n = $tmp;\n            }\n            \n           \
    \ $found = $found ? 1 : 0;\n            \n            if ($found) {\n        \
    \        push(@found_numbers, $n);\n            }\n        }\n    }\n    \n  \
    \  return !@found_numbers;\n}", "    my $length = $numbers->[0];\n    my $threshold\
    \ = abs($threshold);\n    my $distance = 0;\n    my $flag = 0;\n    my $i = 1;",
  '    my($i, $j, $sum, $total_sum, $is_close);', "    my $max_diff;\n    my $min_diff\
    \ = undef;", "    my(@numbers);\n    my @results;\n    my $j;\n    foreach my\
    \ $number (@$numbers) {\n        push @numbers, $number unless $number <= $threshold;\n\
    \    }\n    $j = 0;\n    my $max = @numbers - 1;\n    foreach my $i (0 .. $max)\
    \ {\n        my $diff = abs($numbers[$i] - $numbers[$j]);\n        if ($diff <\
    \ $threshold) {\n            push @results, $j;\n            $j++;\n        }\n\
    \    }\n    return @results;\n}", "    my $n1 = $numbers[0];\n    my $n2 = $numbers[1];\n\
    \    my $result = $n1 <=> $n2;\n    if ($result < $threshold) {\n        return\
    \ 1;\n    }\n    elsif ($result > $threshold) {\n        return -1;\n    }\n \
    \   return 0;\n}", "    my(@thresholds) = @{ $thresholds ? @$thresholds : () };\n\
    \    my($closest_threshold, $closest_element_index) = (0, 0);\n    foreach my\
    \ $element (@$numbers) {\n        foreach my $threshold (@thresholds) {\n    \
    \        if (abs($element - $threshold) < $closest_threshold) {\n            \
    \    $closest_element_index++;\n                $closest_threshold = abs($element\
    \ - $threshold);\n            } elsif (abs($element - $threshold) == $closest_threshold)\
    \ {\n                $closest_element_index++;\n                $closest_threshold\
    \ = abs($element - $threshold);\n            } elsif (abs($element - $threshold)\
    \ > $closest_threshold) {\n                $closest_element_index = 0;\n     \
    \           $closest_threshold = abs($element - $threshold);\n            }\n\
    \        }\n    }\n    return $closest_element_index >= 2;\n}", "    my $threshold\
    \ = abs($threshold);\n    my @close_numbers = ();\n    foreach my $number (@$numbers)\
    \ {\n        my $distance = abs($number - $threshold);\n        my $index = @close_numbers\
    \ - 1;\n        $close_numbers[$index] = $number;\n        if ($distance < $threshold)\
    \ {\n            $index--;\n        }\n    }\n    return scalar(@close_numbers)\
    \ != 0;\n}", "    my(@close_elements) = ();\n    foreach my $n (@$numbers) {\n\
    \        foreach my $e (@close_elements) {\n            if (abs($n - $e) < $threshold)\
    \ {\n                return 0;\n            }\n        }\n        push(@close_elements,\
    \ $n);\n    }\n    return 1;\n}", "    my @numbers_to_check;\n    foreach my $number\
    \ (@$numbers) {\n        if(!$numbers_to_check->[$numbers_to_check->[$number-1]]{$number})\
    \ {\n            push @numbers_to_check, $number;\n        }\n    }\n    return\
    \ 0 unless @numbers_to_check;\n    my $max_dist = max(map { abs($numbers_to_check[$_-1]->[$_]\
    \ - $threshold) } @numbers_to_check);\n    return $numbers_to_check[$_-1]->[$_]\
    \ if @numbers_to_check[$_] == $max_dist && abs($numbers_to_check[$_-1]->[$_] -\
    \ $threshold) < $max_dist;\n    return $numbers_to_check[$_-1]->[$_] if @numbers_to_check[$_]\
    \ == $max_dist;\n    my $max_dist2 = max(map { abs($numbers_to_check[$_-1]->[$_]\
    \ - $threshold) } @numbers_to_check);\n    return $numbers_to_check[$_-1]->[$_]\
    \ if @numbers_to_check[$_] == $max_dist2 && abs($numbers_to_check[$_-1]->[$_]\
    \ - $threshold) < $max_dist2;\n    return $numbers_to_check[$_-1]->[$_] if @numbers_to_check[$_]\
    \ == $max_dist2;\n    return 0;\n}", "    foreach my $num (@$numbers) {\n    \
    \    foreach my $other (@$numbers) {\n            if ($num == $other or ($num\
    \ + $other) / 2 > $threshold) {\n                return 1;\n            }\n  \
    \      }\n    }\n    return 0;\n}", "    return scalar(@{$numbers} > 2) ? 1 :\
    \ 0;\n}", "    return 0 if $threshold < 0;\n    return 1 if $threshold == 0;\n\
    \    return 2 if $threshold > 1;", "    my $min_number = $numbers[0];\n    my\
    \ $max_number = $numbers[0];\n    my $min_distance = $threshold;\n    my $max_distance\
    \ = 0;\n    foreach my $number (@$numbers) {\n        next unless ($number ==\
    \ $min_number || $number == $max_number);\n        $max_distance = max($max_distance,\
    \ $number - $min_number);\n        $min_distance = min($min_distance, $number\
    \ - $max_number);\n        $min_number = $number;\n        $max_number = $number;\n\
    \    }\n    if ($max_distance < $min_distance) {\n        return 0;\n    }\n \
    \   return 1 if ($max_distance <= $threshold);\n    return 2 if ($max_distance\
    \ > $threshold);\n    return 3;\n}", '    $threshold *= $threshold;', "    my\
    \ @numbers_copy = @$numbers;\n    my @diff_array = ();\n    my $found = 0;\n \
    \   my $diff = 0;\n    my $closest_number = (@numbers_copy > 1) ? $numbers_copy[scalar(@numbers_copy)\
    \ - 2] : 0;\n    my $index_closest = 0;\n    my $thresholds_copy = @$threshold;\n\
    \    for(my $i = 0; $i < @numbers_copy; $i++) {\n        $diff = $closest_number\
    \ - $numbers_copy[$i];\n        if ($diff == 0) {\n            $diff = 1;\n  \
    \          $closest_number = $numbers_copy[$i];\n        }\n        push(@diff_array,\
    \ $diff);\n        for(my $j = $i + 1 ; $j < @numbers_copy; $j++) {\n        \
    \    $diff = $closest_number - $numbers_copy[$j];\n            if ($diff == 0)\
    \ {\n                $diff = 1;\n                $closest_number = $numbers_copy[$j];\n\
    \            }\n            push(@diff_array, $diff);\n        }\n    }", "  \
    \  my $n = scalar($numbers);\n    \n    # Special case for 1-element array.\n\
    \    if($n == 1) {\n        return scalar(@$numbers[0]) ? 1 : 0;\n    }", "  \
    \  my($closest_match, $closest_index) = (undef, undef);\n    my(@matches);\n \
    \   \n    foreach my $number (@$numbers) {\n        my $delta;\n        if ($closest_match\
    \ eq $number) {\n            $closest_index++;\n            $closest_match = $numbers[$closest_index];\n\
    \        }\n        elsif ($closest_match && $closest_match > $number) {\n   \
    \         $closest_match = $number;\n            $closest_index++;\n        }\n\
    \        elsif ($closest_match && $closest_match <= $threshold) {\n          \
    \  $closest_match = $number;\n            $closest_index++;\n        }\n     \
    \   else {\n            @matches = ($closest_match, $closest_index, $number);\n\
    \        }\n    }\n    \n    return @matches;\n}", "    my $threshold = abs($threshold);\n\
    \    foreach my $n (@$numbers) {\n        if (abs($n) > $threshold) {\n      \
    \      return 0 unless abs($n - $numbers[my $i-1]) > abs($n - $numbers[$i]);\n\
    \        }\n    }\n    return 1;\n}", "    my(@closest_elements);\n    \n    #\
    \ Loop through given numbers and save closest to each other.\n    # Calculate\
    \ Euclidean distance from given threshold.\n    foreach (@$numbers) {\n      \
    \  push @closest_elements, [ $_, (sqrt($_**2 +\n                             \
    \         $threshold**2)) ];\n    }\n    \n    # Check if closest two elements\
    \ are within given threshold.\n    foreach (@closest_elements) {\n        my $distance\
    \ = $_->[1];\n        if ($distance < $threshold) {\n            return $closest_elements[0]->[0]\
    \ . \"-\" . $closest_elements[1]->[0];\n        }\n    }\n    return \"\";\n}",
  "    foreach my $number (@$numbers) {\n        my($min, $max) = $number > $threshold\
    \ ? $number : ($number, $threshold);\n        next if ($min == $max);\n      \
    \  return $min == $max ? $min : abs($min - $max) < abs($min + $max) ? 1 : 0;\n\
    \    }\n    return 0;\n}", "    foreach my $num (@$numbers) {\n        next if\
    \ abs($num - $threshold) > $threshold;\n        return 1;\n    }\n    return 0;\n\
    }", "    my $sum = 0;\n    foreach my $number (@$numbers) {\n        $sum += $number;\n\
    \    }\n    my $diff = $sum;\n    foreach my $number (@$numbers) {\n        if\
    \ ($number - $threshold > $diff) {\n            $diff = $number - $threshold;\n\
    \        }\n    }\n    return undef if ($diff > 0);\n    return $diff if $diff\
    \ == 0;\n    return 1;\n}", "    my @matches = ();\n    foreach my $num (@$numbers)\
    \ {\n        foreach my $match (@$matches) {\n            if (abs($num - $match)\
    \ < $threshold) {\n                return $match;\n            }\n        }\n\
    \        push @matches, $num;\n    }\n    return;\n}\n</code>\n<|/ a tags=math,perl,algorithm,sorting\
    \ |>\n<| c |>\n`@numbers` may contain duplicates. I suppose you meant `$numbers`?\n\
    <|/ c |>\n<| c |>\n: yes, thanks. Fixed.\n<|/ c |>\n<| c |>\nThis still has a\
    \ worst-case time complexity of O(N\xB2), since you're iterating over every element\
    \ in the list N times. Since `@numbers` can be quite large (even a hundred million),\
    \ you'd need a better solution.\n<|/ c |>\n<| c |>\n: Actually, I believe it has\
    \ a better worst-case time complexity, but I'm not totally sure. I'll do some\
    \ tests.\n<|/ c |>\n<| c |>\nIf `$num` is a duplicate, the `if (abs($num - $match)\
    \ < $threshold)` condition will exit the `foreach` loop without `push`ing `$num`.\n\
    <|/ c |>\n<| a tags=math,perl,algorithm,sorting |>\nThis is not the best solution,\
    \ but I thought I'd post it anyway, since it might be useful.\nThe best solution\
    \ is probably an A* search where you specify a heuristic function. In this case,\
    \ I think I like Manhattan distance.\nI believe the pseudocode for the algorithm\
    \ is something like this:\n<code>\nbestNode = None\nbestDistance = infinity",
  "    my %num_hash;\n    foreach my $num (@$numbers) {\n        $num_hash{$num} =\
    \ 1;\n    }\n    my $first_number = $numbers[0];\n    my $second_number = $numbers[1];\n\
    \    my $first_element = $num_hash{$first_number};\n    my $second_element = $num_hash{$second_number};\n\
    \    return 1 if $first_element == $second_element;\n    my $threshold = abs($threshold);\n\
    \    my $diff = 0;\n    my $dist;\n    if ($first_element < $second_element) {\n\
    \        $diff = $second_element - $first_element;\n        $dist = $diff * $diff;\n\
    \    } elsif ($first_element > $second_element) {\n        $diff = $first_element\
    \ - $second_element;\n        $dist = $diff * $diff;\n    } else {\n        return\
    \ 0;\n    }\n    return $dist < $threshold;\n}", "    my $differences = $numbers\
    \ - \\@$numbers;\n    return $differences <= $threshold ? 1 : 0;\n}", "    my\
    \ $diff;\n    my $j = 0;\n    my $num_different_elements = 0;", "    \n    my\
    \ $max_dif = 0.0;\n    my $max_number = undef;\n    my $max_index_number;\n  \
    \  \n    foreach my $index ( 0 .. $#$numbers ) {\n        my $dif = abs($numbers[$index]\
    \ - $threshold);\n        if ( $dif > $max_dif ) {\n            $max_dif = $dif;\n\
    \            $max_number = $numbers[$index];\n            $max_index_number =\
    \ $index;\n        }\n    }\n    return 0 if $max_number == undef;\n    return\
    \ 1 if $max_dif > $threshold;\n    return undef if $max_index_number == 0;\n \
    \   return $max_index_number;\n}", "    my $min = 0;\n    my $max = $#{$numbers}\
    \ - 1;\n    \n    my $i = 0;\n    my $found = 0;\n    while ($i < $max) {\n  \
    \      last if $found and $i eq $max;\n        my $dist = $numbers[$i] - $numbers[$min\
    \ + 1];\n        $found = $dist < $threshold;\n        $min = $i + 1;\n    }\n\
    \    return $found;\n}", "    for my $number (@$numbers) {\n        if (exists\
    \ $hash{$number}) {\n            # found the number\n            last;\n     \
    \   }", "    foreach my $number (@$numbers) {\n        my $result = $number +\
    \ 0.01 - $threshold;\n        if (abs($result) < 1.0) {\n            return $result;\n\
    \        }\n    }\n    return 0;\n}", "    my $len = @$numbers;\n    for (my $i\
    \ = 0; $i < $len; $i++) {\n        for (my $j = $i + 1; $j < $len; $j++) {\n \
    \           if ($numbers[$i] - $numbers[$j] <= $threshold) {\n               \
    \ return 1;\n            }\n        }\n    }\n    return 0;\n}", "    foreach\
    \ my $number (@{$numbers}) {\n        if (is_close($number, $threshold, 1) > 0)\
    \ {\n            return $number;\n        }\n    }\n    return '';\n}", "    my(@numbers_sort)\
    \ = @$numbers;\n    if (@numbers_sort < 2) {\n        return 0;\n    }", '    my
    $count = 0;', "    my $len = scalar @$numbers;\n    for my $i (0..$len-1) {\n\
    \        my $delta = $numbers[$i+1] - $numbers[$i];\n        if (abs($delta) >\
    \ ($threshold*$threshold)) {\n            return $i;\n        }\n    }\n    return\
    \ $len;\n}", "    my($min, $max, $num, $delta);\n    \n    $min = $numbers[0];\n\
    \    $max = @$numbers - 1;\n    \n    # Initialize delta to zero.\n    $delta\
    \ = 0;\n    foreach $num (@$numbers) {\n        $delta = $delta + ($num - $min)\
    \ * ($num - $min);\n    }\n    \n    my $is_close = 0;\n    foreach $num (@$numbers)\
    \ {\n        if ($num - $min == 0) {\n            $is_close = 1;\n           \
    \ last;\n        }\n        $delta = $delta + ($num - $min) * ($num - $min);\n\
    \        if ($delta < $threshold) {\n            $is_close = 1;\n        }\n \
    \   }\n    return $is_close;\n}", '    my @results;', "    my $result = '';",
  "    my $min_diff_elements = 0;\n    my $min_index = 0;\n    my $max_index = 0;",
  "    my @candidates;\n    foreach my $number (@$numbers) {\n        push @candidates,\
    \ $number if $number > $threshold && $number < $threshold + 0.3;\n    }\n    return\
    \ @candidates ? 1 : '';\n}", "    my @sorted_numbers = sort { $a <=> $b } @$numbers;\n\
    \    my $has_close = 0;\n    for my $n (@sorted_numbers) {\n        if ($n !=\
    \ $sorted_numbers[$#sorted_numbers - 1]) {\n            $has_close = $sorted_numbers[$#sorted_numbers\
    \ - 1] - $n <= $threshold;\n            last;\n        }\n    }\n    return $has_close;\n\
    }", "    my(@close);\n    my $max = $numbers[0];\n    my $min = undef;\n    foreach\
    \ my $num (@$numbers) {\n        if (defined $min && $num < $min) {\n        \
    \    $min = undef;\n        }\n        if (defined $min && $num > $min) {\n  \
    \          $min = $num;\n        }\n        if (defined $max && $num > $max) {\n\
    \            $max = $num;\n        }\n    }\n    if (defined $min) {\n       \
    \ $max = $min;\n    }\n    if (defined $max) {\n        foreach my $num (@$numbers)\
    \ {\n            if (defined $min && $num < $min + $threshold) {\n           \
    \     push(@close, \"$num\");\n            }\n            if (defined $max &&\
    \ $num > $max - $threshold) {\n                push(@close, \"$num\");\n     \
    \       }\n        }\n    }\n    if (@close) {\n        return 1;\n    } else\
    \ {\n        return 0;\n    }\n}", "    my @numbers_array = @$numbers;\n    my($num_close,\
    \ $num_not_close);\n    \n    foreach my $num (@numbers_array) {\n        my($diff1,\
    \ $diff2) = @{$num - $threshold};\n        \n        # Not close enough\n    \
    \    unless(($diff1 eq $diff2)) {\n            $num_not_close += 1;\n        }\n\
    \        else {\n            $num_close += 1;\n        }\n    }", "    my $max_abs_diff\
    \ = 0;\n    foreach my $number (@$numbers) {\n        my $abs_diff = abs($number\
    \ - $threshold);\n        if ($abs_diff > $max_abs_diff) {\n            $max_abs_diff\
    \ = $abs_diff;\n        }\n    }\n    return $max_abs_diff == 0;\n}", "    my\
    \ @numbers_as_sin = map { ($_ - $threshold) } @$numbers;\n    my $smallest_difference\
    \ = $numbers_as_sin[0] || $numbers_as_sin[1];\n    my $returned_element = 0;\n\
    \    foreach (@$numbers) {\n        if ($_ - $threshold >= $smallest_difference)\
    \ {\n            $returned_element = 1;\n            last;\n        }\n    }\n\
    \    return $returned_element;\n}", "    return undef\n        unless @$numbers\
    \ > 0;", "    my @result;\n    foreach my $num (@$numbers) {\n        my $diff\
    \ = 0;\n        for my $index (0..$#{$numbers} -1) {\n            if (abs($numbers->[$index]\
    \ - $num) > $threshold) {\n                $diff = -1;\n            }\n      \
    \      elsif (abs($num - $numbers->[$index]) > $threshold) {\n               \
    \ $diff = 1;\n            }\n        }\n        push @result, $diff;\n    }\n\
    \    return scalar @result;\n}", "    foreach my $number (@$numbers) {\n     \
    \   foreach my $test (@$numbers) {\n            if (abs($number - $test) < $threshold)\
    \ {\n                return 1;\n            }\n        }\n    }\n    return 0;\n\
    }", "    return '' unless $numbers;\n    my @numbers;\n    push @numbers, grep\
    \ {defined && length($_) && (length($_) <= 10)} @$numbers;\n    return scalar\
    \ @numbers == 0;\n}", "    return undef unless @$numbers > 1;\n    my $diffs =\
    \ map { ($_ ^ $numbers[0]) } (@$numbers);\n    for (my $i = 1; $i <= @$numbers;\
    \ $i++) {\n        if ($diffs[$i] <= $threshold) {\n            return $i;\n \
    \       }\n    }\n    return undef;\n}", "    my @numbers_sorted = sort {$a <=>\
    \ $b} @$numbers;\n    my @sorted_indexes = map { $_+1 } 0..$#numbers_sorted;\n\
    \    my $min_index = $sorted_indexes[0];\n    my $max_index = @sorted_indexes\
    \ - 1;\n    my $closest_threshold = $threshold;\n    for (my $index = $min_index;\
    \ $index <= $max_index; $index++) {\n        if ($numbers_sorted[$index] - $numbers_sorted[$closest_threshold]\
    \ > $numbers_sorted[$closest_threshold] - $numbers_sorted[$index]) {\n       \
    \     $closest_threshold = $index;\n        }\n    }\n    return $closest_threshold;\n\
    }", "    my $min = $numbers->[0];\n    my $max = $numbers->[0];\n    for (my $i\
    \ = 1; $i < @$numbers; $i++) {\n        my $n = $numbers->[$i];\n        if ($n\
    \ < $min) {\n            $min = $n;\n        }\n        if ($n > $max) {\n   \
    \         $max = $n;\n        }\n    }\n    for (my $i = 0; $i < @$numbers; $i++)\
    \ {\n        my $n = $numbers->[$i];\n        if ($n < $min || $n > $max) {\n\
    \            return 0;\n        }\n    }\n    return 1;\n}", "    # Remove any\
    \ duplicated entries and sort and remove any duplicated values \n    # in the\
    \ array.\n    my = sort { $a <=> $b } uniq map { $_ } @$numbers;\n    # Find out\
    \ the maximum distance between any two elements\n    my($max, $max_count) = ($numbers[0],\
    \ $numbers[0]);\n    \n    # Loop through array and compare each pair of elements.\n\
    \    for my $i (0 .. @numbers - 1) {\n        for my $j ($i + 1 .. @numbers) {\n\
    \            # Skip if elements are not equal.\n            if ($numbers[$i] ne\
    \ $numbers[$j]) { \n                next;\n            }\n            my $diff\
    \ = $numbers[$i] - $numbers[$j];\n            # Calculate Euclidean distance between\
    \ two elements.\n            my $euclid = sqrt($diff * $diff + $threshold * $threshold);\n\
    \            if ($euclid > $max) {\n                $max = $euclid;\n        \
    \        $max_count = $j;\n            }\n        }\n    }\n    # Return count\
    \ if any two elements are closer to each other than the given\n    # threshold.\n\
    \    return 0 if $max_count == $numbers[@$numbers - 1];\n    return $max_count;\n\
    }", '    my(@closest_numbers);', "    my $close = 1;\n    my @numbers_ref;\n \
    \   push @numbers_ref, $numbers;\n    my @numbers_ref_sorted = sort {$a <=> $b}\
    \ @numbers_ref;\n    \n    for (my $i = 0; $i < @numbers_ref_sorted; $i++) {\n\
    \        \n        if ($numbers_ref_sorted[$i] == $numbers_ref_sorted[$i+1]) {\n\
    \            $close ++;\n        }\n        elsif ($numbers_ref_sorted[$i] > $numbers_ref_sorted[$i+1])\
    \ {\n            $close ++;\n            $numbers_ref_sorted[$i] += 0.2;\n   \
    \     }\n        elsif ($numbers_ref_sorted[$i] < $numbers_ref_sorted[$i+1]) {\n\
    \            $close ++;\n            $numbers_ref_sorted[$i] -= 0.2;\n       \
    \ }\n    }\n    \n    return $close;\n}", "    my $min = min($numbers);\n    my\
    \ $max = max($numbers);\n    my $counter;", '    my($i, $j, $close, $is_close);',
  "    if (scalar(@$numbers) <= 2) {\n        return 0;\n    }\n    for my $i (0..$#numbers)\
    \ {\n        for (my $j = 0; $j < @$numbers; $j++) {\n            last if (($j+1\
    \ == @$numbers) || ($numbers[$j+1] < $numbers[$j] + $threshold));\n        }\n\
    \        return 0 if $numbers[$i] >= $threshold;\n    }\n    return 1;\n}", " \
    \   foreach my $number (@$numbers) {\n        my $diff = $number - $threshold;\n\
    \        if ($diff > 0) {\n            return 1;\n        }\n        elsif ($diff\
    \ < 0) {\n            return 0;\n        }\n    }\n    return 0;\n}", "    my\
    \ @elements;\n    foreach my $number (@$numbers) {\n        push @elements, $number\
    \ if $number < $threshold;\n    }\n    return scalar(@elements) > 0;\n}", "  \
    \  my(@numbers) = @{$numbers}; # convert scalar to array and remove from list\n\
    \    \n    foreach my $n (@numbers) {\n        if ($n < $threshold) {\n      \
    \      pop(@numbers) if @numbers > 1;\n            return 1 if $n != $numbers[-1];\n\
    \        }\n    }\n    return \"\";\n}", "    return '' unless @$numbers > 1;",
  '    my @elements = @$numbers;', "    my $num_found;\n    my $j;\n    for (my $i\
    \ = 0; $i < @$numbers; $i++) {\n        $num_found = 0;\n        $j = 0;\n   \
    \     while (++$j < @$numbers) {\n            if (abs($numbers[$i] - $numbers[$j])\
    \ > $threshold) {\n                $num_found++;\n            }\n        }\n \
    \       if ($num_found == 2) {\n            return $i;\n        }\n    }\n   \
    \ return undef;\n}", "    my(@closest_numbers) = (0, 0);\n    foreach my $number\
    \ (@$numbers) {\n        my(@close) = ();\n        foreach my $i (0 .. @$numbers)\
    \ {\n            if ($i >= scalar @$numbers ) {\n                last;\n     \
    \       }\n            push(@close, $number->[$i] - $number->[0]);\n        }\n\
    \        if (@close > $threshold) {\n            push(@closest_numbers, @close);\n\
    \        }\n    }\n    if (scalar(@closest_numbers) > 0) {\n        return 1;\n\
    \    } else {\n        return 0;\n    }\n}\n</code>\n<|/ a tags=arrays,perl,algorithm,math\
    \ |>\n<| c |>\nI think you're using some variables that aren't declared. `@diff`\
    \ and `@close` aren't defined, and `$diff` isn't used.\n<|/ c |>\n<| c |>\n, good\
    \ catch. I'll update the code to include these. Not all answers are perfect, of\
    \ course, so hopefully this one is closer to being complete and correct ;)\n<|/\
    \ c |>\n<| a tags=arrays,perl,algorithm,math |>\nHere's another approach, assuming\
    \ you mean that one element of the array is closer to another element than the\
    \ others are.\n<code>\nuse v5.10;\nuse List::MoreUtils qw( uniq );", '    my($closest_first,
    $closest_second);', "    my $min    = $numbers[0];\n    my $max    = $numbers[0];\n\
    \    my $found  = 0;\n    my $found2 = 0;", "    my @numbers_hash = keys %$numbers;\n\
    \    my $closest_number = 0;\n    for my $i (0 .. @numbers_hash-1) {\n       \
    \ my $diff = $numbers_hash[$i] - $closest_number;\n        if(abs($diff) < abs($threshold))\
    \ {\n            $closest_number = $numbers_hash[$i];\n        }\n    }\n    return\
    \ $closest_number;\n}", '    my(@closest_numbers, @close_numbers);', "    return\
    \ $numbers[0] unless @$numbers == 2;\n    my $distance;\n    if ($numbers[0] +\
    \ $numbers[1] >= $threshold) {\n        $distance = $numbers[1] - $numbers[0];\n\
    \    } else {\n        $distance = $numbers[1] - $numbers[0];\n    }\n    if (abs($distance)\
    \ < $threshold) {\n        return 0;\n    }\n    my $i = 1;\n    my $found = 0;\n\
    \    my $j = 1;\n    my $check;\n    foreach $check (@$numbers) {\n        if\
    \ ($check == $j) {\n            $found = 1;\n            last;\n        }\n  \
    \      $distance2 = $numbers[$j] - $check;\n        if ($distance2 < $threshold)\
    \ {\n            $found = 1;\n            last;\n        }\n        $j++;\n  \
    \  }\n    return 1 if ($found == 0);\n    return 0;\n}", "    my %seen;\n    foreach\
    \ my $num (@$numbers) {\n        if (exists $seen{$num}) {\n            delete\
    \ $seen{$num};\n        } else {\n            $seen{$num} = 1;\n        }\n  \
    \  }", '    my $result = 0;', "    my(@array)       = $numbers =~ m{^\\[([^]]*)\\\
    ]}ms;\n    my($max);\n    $max = $numbers[0];", "    foreach my $number (@$numbers)\
    \ {\n        my $diff = $number - $threshold;\n        return $diff < $threshold\
    \ ? 1 : 0;\n    }\n    return 0;\n}", "    my @candidates = ();\n    my $min =\
    \ $numbers[0];\n    my $max = $numbers[-1];\n    my $sum = 0;\n    my $counter\
    \ = 0;\n    foreach my $number (@$numbers) {\n        my $diff = $number - $min;\n\
    \        $sum += $diff;\n        if ($diff > $threshold) {\n            $counter++;\n\
    \        }\n    }\n    return $counter if $counter > 0;\n    foreach my $number\
    \ (@$numbers) {\n        my $diff = $number - $max;\n        if (abs($diff) >\
    \ $threshold) {\n            return 0;\n        }\n    }\n    return 1;\n}", " \
    \   my(@diff);\n    my(@range);", "    my $num_elems = scalar( @$numbers );\n\
    \    \n    if ( !defined $threshold ) {\n        $threshold = 1.0;\n    }", " \
    \   my @numbers_sorted = @$numbers;\n    my $min_diff_number = $numbers_sorted->[0];",
  "    my @numbers = @{$numbers};\n    my $index;\n    for (my $i = 0; $i < @numbers\
    \ - 1; $i++) {\n        for (my $j = $i + 1; $j < @numbers; $j++) {\n        \
    \    if (abs($numbers[$i] - $numbers[$j]) < $threshold) {\n                $index\
    \ = $j;\n            }\n        }\n    }\n    return $index;\n}", "    if (@$numbers\
    \ == 0) {\n        return '';\n    }\n    my %unique_numbers;\n    my $distance;\n\
    \    foreach my $number (@$numbers) {\n        my $unique = exists $unique_numbers{$number}\
    \ ? $unique_numbers{$number} : ++$unique_numbers{$number};\n        $distance\
    \ = $number - $unique;\n        if ($distance < $threshold) {\n            return\
    \ $unique;\n        }\n    }\n}", '    my(@results) = ();', "    my $min = $numbers[0];\n\
    \    my $max = @$numbers == 1 ? $numbers[0] : $numbers[-1];\n    for(my $i = 0;\
    \ $i < $max; $i++) {\n        my $difference = $max - $i;\n        return $i ==\
    \ $numbers[0] ? \"No elements in array\" : $difference < $threshold ? \"At $i\"\
    \ : \"Between $i and $max\";\n    }\n    return \"\";\n}", "    my $close_number\
    \ = 0;\n    foreach my $number (@$numbers) {\n        next if $close_number;\n\
    \        $close_number = 1 if (abs($number - $threshold) < abs($numbers[$close_number]\
    \ - $threshold));\n    }\n    return $close_number;\n}", "    $threshold = 0 unless\
    \ defined $threshold;\n    return undef unless (defined $numbers);\n    my @numbers_sorted\
    \ = sort { $a <=> $b } @$numbers;\n    my @sorted_numbers = sort { $a <=> $b }\
    \ @numbers_sorted;\n    my $is_close;", "    my $total = 0;\n    my $min = $$threshold;\n\
    \    foreach my $num (@$numbers) {\n        my $delta = abs($num - $min);\n  \
    \      $total += $delta;\n        $min = $num if $delta < $threshold;\n    }\n\
    \    return $total >= 2;\n}", '    my(@closed_numbers);', '    my $threshold;',
  "    my @sorted = sort {$a <=> $b} @$numbers;\n    my $sum;\n    foreach my $n (@sorted)\
    \ {\n        $sum += $n;\n    }\n    foreach my $n (@$numbers) {\n        next\
    \ if ($n == $threshold);\n        return 0 if $sum > $threshold;\n        return\
    \ 0 if $sum < $threshold;\n    }\n    return 1;\n}", "    my @numbers_as_scalars\
    \ = @$numbers;\n    my $size = @numbers_as_scalars;\n    my @elements;\n    my\
    \ $i;\n    my $distance;\n    my $min_distance;\n    my $max_distance;", '    my(@numbers)
    = @$numbers;', "    my(@results);\n    my $sum = 0;\n    my $min = undef;\n  \
    \  my $min_index;\n    foreach my $num (@$numbers) {\n        $sum += $num;\n\
    \        if ($min == undef) {\n            $min = $num;\n            $min_index\
    \ = 0;\n        } elsif ($num < $min) {\n            $min = $num;\n          \
    \  $min_index = 0;\n        } elsif ($num > $min + $threshold) {\n           \
    \ push(@results, $min_index);\n            $min = $num;\n            $min_index\
    \ = 1;\n        }\n    }\n    if ($min != undef) {\n        push(@results, $min_index);\n\
    \    }\n    return $results[0];\n}", "    my @numbers_differ = grep { $numbers_diff\
    \ < $threshold } @$numbers;\n    my $has_close = scalar @numbers_differ > 0;\n\
    \    return $has_close;\n}", "    my(@closed_numbers) = ();\n    my $sum = 0;\n\
    \    my $num_elements = scalar(@$numbers);\n    foreach my $number (@$numbers)\
    \ {\n        if ($number < $threshold) {\n            push (@closed_numbers, $number);\n\
    \        } elsif ($number == $threshold) {\n            push (@closed_numbers,\
    \ $number);\n        } elsif ($number - $sum > $threshold) {\n            push\
    \ (@closed_numbers, $number);\n            $sum += $number;\n        }\n    }\n\
    \    return scalar(@closed_numbers) == $num_elements;\n}", "    my(@closest_numbers)\
    \ = (undef);\n    foreach my $n (@$numbers) {\n        push(@closest_numbers,\
    \ $n) if abs($n - $threshold) < abs($n - shift(@closest_numbers));\n    }\n  \
    \  return scalar(@closest_numbers) != 0;\n}", "    my($index, $close, $diff);\n\
    \    my($num, $i, $count) = @_;\n    $num = $numbers[$i];\n    $i = 1;\n    my\
    \ $flag = 1;\n    \n    foreach $num (@$numbers) {\n        $close = $num;\n \
    \       $diff = $num - $close;\n        if ($diff <= $threshold) {\n         \
    \   $flag = 0;\n            last;\n        }\n        if ($diff > $threshold)\
    \ {\n            $flag = 0;\n        }\n        $i++;\n    }\n    \n    return\
    \ $flag;\n}", "    # Sort to ensure we always find two elements from each other\n\
    \    @$numbers = sort @$numbers;", '    my(@sorted_numbers) = sort {$a <=> $b};',
  "    my($i, $j);\n    my @close;\n    for (my $i = 0; $i < scalar(@$numbers) - 1;\
    \ $i++) {\n        for (my $j = 0; $j < scalar(@$numbers) - 1; $j++) {\n     \
    \       if ($i ne $j) {\n                next unless $numbers[$i] <= $numbers[$j];\n\
    \                if (abs($numbers[$i] - $numbers[$j]) <= $threshold) {\n     \
    \               push(@close, $i, $j);\n                }\n            }\n    \
    \    }\n    }\n    return @close;\n}", "    \n    my($close, $close_index) = 0,\
    \ 0;\n    \n    for my $num (@$numbers) {\n        if (abs($num - $numbers[$close_index])\
    \ < $threshold) {\n            $close++;\n        } else {\n            $close_index\
    \ = $num if $close == 1;\n        }\n    }\n    \n    return $close_index;\n}",
  "    my @numbers_diff;\n    my $closest_diff = 0;\n    foreach my $n (@$numbers)\
    \ {\n        my $diff = $n - $threshold;\n        if ($diff < $closest_diff) {\n\
    \            $closest_diff = $diff;\n        }\n        push(@numbers_diff, $diff);\n\
    \    }\n    if (@numbers_diff != 0) {\n        if ($closest_diff > 0) {\n    \
    \        return 1;\n        }\n        else {\n            return 0;\n       \
    \ }\n    }\n    else {\n        return 0;\n    }\n}", "    my $result;\n    foreach\
    \ my $number (@$numbers) {\n        my $diff = $number - $threshold;\n       \
    \ if(abs($diff) < 0.000001) {\n            $result = 1;\n            last;\n \
    \       }\n    }\n    $result;\n}\n</code>\n<|/ a tags=perl,floating-point,math,algorithm\
    \ |>\n<| a |>\nThe fastest way is to use Bill Karwin's famous \"test if close\
    \ enough to zero\".\n<code>", "    my $diff = abs($numbers[1] - $numbers[0]);\n\
    \    return $diff < $threshold ? 0 : 1;\n}", "    my @all_elements = @$numbers;\n\
    \    my $index;\n    my $count = 0;\n    for ($index = 0; $index < $#all_elements\
    \ - 1; $index++) {\n        for ($index++; $index < $#all_elements - 1; $index++)\
    \ {\n            if ($all_elements[$index] >= $all_elements[$index + 1]) {\n \
    \               $count++;\n                last if $count >= $threshold;\n   \
    \         }\n        }\n    }\n    return 0 if $count >= $threshold;\n    return\
    \ 1;\n}", "    my($i, $j, $min_diff);\n    for ($i = 0; $i < scalar(@$numbers);\
    \ $i++) {\n        next if $numbers[$i] <= $threshold;\n        for ($j = 0; $j\
    \ < $i; $j++) {\n            if ($numbers[$j] - $numbers[$i] < $threshold) {\n\
    \                $min_diff = $numbers[$i] - $numbers[$j];\n                break;\n\
    \            }\n        }\n        if ($min_diff == 0) {\n            return \"\
    \";\n        } elsif ($min_diff == 1) {\n            return $min_diff;\n     \
    \   }\n    }\n    # no two numbers close to each other was found, so we return\
    \ the smallest\n    # one\n    foreach $i (@$numbers) {\n        if ($i > ($i\
    \ + 1)) {\n            return $i;\n        }\n    }\n    return \"\";\n}", " \
    \   for my $number ( @{$numbers} ) {\n        for my $other ( @{$numbers} ) {\n\
    \            next if $other == $number or $other == 0.0;\n            next if\
    \ $other == 0.0;\n            next if $number == 0.0;\n            $other = 1.0\
    \ - $other;\n            if ( $other >= $threshold ) {\n                last if\
    \ $other - $number < $threshold;\n                return 0 if $other - $number\
    \ > $threshold;\n            }\n        }\n    }\n    return 1;\n}", "    $threshold\
    \ = abs($threshold);\n    return $numbers[0] + $threshold <= $numbers[1]\n   \
    \     if $numbers[0] + $threshold == $numbers[1];\n    return $numbers[1] + $threshold\
    \ <= $numbers[0]\n        if $numbers[1] + $threshold == $numbers[0];\n    return\
    \ $numbers[0] - $threshold > $numbers[1]\n        if $numbers[0] - $threshold\
    \ > $numbers[1];\n    return $numbers[1] - $threshold > $numbers[0]\n        if\
    \ $numbers[1] - $threshold > $numbers[0];\n    return 0;\n}", "    \n    my $num_min\
    \ = min($numbers);\n    my $num_max = max($numbers);\n    my $max_threshold =\
    \ $num_max + $threshold;\n    my $min_threshold = $num_min - $threshold;\n   \
    \ my $i = 0;\n    \n    my $closest_index = -1;\n    my $closest_distance = 0;\n\
    \    \n    while( $i < @$numbers ) {\n        my $number = $numbers[$i];\n   \
    \     \n        if( $number > $max_threshold ) {\n            $closest_index =\
    \ $i;\n            $closest_distance = $number - $num_max;\n            last;\n\
    \        }\n        elsif( $number < $min_threshold ) {\n            $closest_index\
    \ = $i;\n            $closest_distance = $number - $num_min;\n            last;\n\
    \        }\n        else {\n            if( $closest_distance == 0 || abs($number\
    \ - $numbers[$closest_index]) < $closest_distance ) {\n                $closest_distance\
    \ = $number - $numbers[$closest_index];\n                $closest_index = $i;\n\
    \            }\n        }\n        \n        $i++;\n    }\n    \n    if( $closest_index\
    \ != -1 ) {\n        my $difference = $closest_distance - $threshold;\n      \
    \  $difference < 0 ? $difference = 0 : $difference;\n        $difference >= 0\
    \ ? $difference = -$difference : $difference;\n        $difference += $closest_index;\n\
    \        \n        return $difference;\n    }\n    \n    return -1;\n}", "   \
    \ my $min = $numbers[0];\n    my $max = $numbers[0];\n    for my $num (@$numbers)\
    \ {\n        if ($num < $min) { $min = $num; }\n        if ($num > $max) { $max\
    \ = $num; }\n    }\n    return 0 if ($min == $max);\n    return 0 if ($min ==\
    \ $threshold);\n    return 1 if ($max == $threshold);\n    return 1 if ($min ==\
    \ $threshold);\n    return 0 if ($max == $threshold);\n    return 0;\n}", "  \
    \  my $result = -1;\n    foreach my $number (@$numbers) {\n        $result = 1\
    \ if $number > $threshold and $result != 1;\n    }\n    return $result;\n}", " \
    \   my @numbers = @$numbers;\n    my $min_dist = min(map { abs($numbers[$_] -\
    \ $threshold) } 0..$#numbers);\n    $min_dist > $threshold or return;\n    my\
    \ $max_dist = max(map { abs($numbers[$_] - $threshold) } 0..$#numbers);\n    my\
    \ $min_elem = $#numbers;\n    my $max_elem = $#numbers;\n    while (++$min_elem\
    \ < $#numbers) {\n        if ($numbers[$min_elem] > $threshold || $numbers[$max_elem]\
    \ > $threshold) {\n            last;\n        }\n    }\n    return $min_elem;\n\
    }", "    my @numbers = @$numbers;\n    my $i = 0;\n    my $j = $#numbers - 1;\n\
    \    while (1) {\n        my $is_same = 0;\n        my $min = $numbers[$i];\n\
    \        my $max = $numbers[$j];\n        if ($min <= $threshold) {\n        \
    \    $is_same = 0;\n        }\n        elsif ($max >= $threshold) {\n        \
    \    $is_same = 1;\n        }\n        else {\n            if ($min < $threshold)\
    \ {\n                $is_same = 1;\n            }\n            else {\n      \
    \          $is_same = 0;\n            }\n        }\n        if ($is_same == 0)\
    \ {\n            return $is_same;\n        }\n        $i++;\n        if ($i >=\
    \ $j) {\n            $i = 0;\n            $j--;\n        }\n    }\n}", "    my\
    \ @numbers = @$numbers;\n    my $sum = 0;\n    for (my $i = 0; $i < @numbers;\
    \ $i++) {\n        $sum += $numbers[$i];\n    }\n    for (my $i = 0; $i < @numbers;\
    \ $i++) {\n        if (abs($numbers[$i] - $sum) < $threshold) {\n            $numbers[$i]\
    \ = $numbers[$i] - $sum;\n            return 1;\n        }\n    }\n    return\
    \ 0;\n}", '    my $result = 0;', "    my $min_diff = $threshold * $threshold;\n\
    \    my $diff;", "    my $result;\n    for my $number (@$numbers) {\n        for\
    \ my $other (@$numbers) {\n            $result ||= 0 if abs($number - $other)\
    \ < $threshold;\n        }\n    }\n    return $result;\n}", "    my $found = 0;\n\
    \    for my $number (@$numbers) {\n        if (abs($number - $_) < $threshold)\
    \ {\n            $found++;\n        }\n    }\n    return $found;\n}", "    my\
    \ $max_dist = max(map { abs($numbers - $_) } @$numbers);\n    foreach my $number\
    \ (@$numbers) {\n        last if $number == 0;\n        next if abs($number -\
    \ $threshold) <= $max_dist;\n        return $number;\n    }\n    return 0;\n}",
  "    return 1 if $threshold > sqrt($numbers[0] * $numbers[0] + $numbers[1] * $numbers[1]);\n\
    \    return 1 if $threshold > sqrt($numbers[0] * $numbers[0] + $numbers[1] * $numbers[1]\
    \ + $numbers[2] * $numbers[2]);\n    return 1 if $threshold > sqrt($numbers[0]\
    \ * $numbers[0] + $numbers[1] * $numbers[1] + $numbers[2] * $numbers[2] + $numbers[3]\
    \ * $numbers[3]);\n    return 0 if $threshold > sqrt($numbers[0] * $numbers[0]\
    \ + $numbers[1] * $numbers[1] + $numbers[2] * $numbers[2] + $numbers[3] * $numbers[3]\
    \ + $numbers[4] * $numbers[4]);\n    return 0 if $threshold > sqrt($numbers[0]\
    \ * $numbers[0] + $numbers[1] * $numbers[1] + $numbers[2] * $numbers[2] + $numbers[3]\
    \ * $numbers[3] + $numbers[4] * $numbers[4] + $numbers[5] * $numbers[5]);\n  \
    \  return 0 if $threshold > sqrt($numbers[0] * $numbers[0] + $numbers[1] * $numbers[1]\
    \ + $numbers[2] * $numbers[2] + $numbers[3] * $numbers[3] + $numbers[4] * $numbers[4]\
    \ + $numbers[5] * $numbers[5] + $numbers[6] * $numbers[6]);\n    return 0 if $threshold\
    \ > sqrt($numbers[0] * $numbers[0] + $numbers[1] * $numbers[1] + $numbers[2] *\
    \ $numbers[2] + $numbers[3] * $numbers[3] + $numbers[4] * $numbers[4] + $numbers[5]\
    \ * $numbers[5] + $numbers[6] * $numbers[6] + $numbers[7] * $numbers[7]);\n  \
    \  return 1 if $threshold > sqrt($numbers[0] * $numbers[0] + $numbers[1] * $numbers[1]\
    \ + $numbers[2] * $numbers[2] + $numbers[3] * $numbers[3] + $numbers[4] * $numbers[4]\
    \ + $numbers[5] * $numbers[5] + $numbers[6] * $numbers[6] + $numbers[7] * $numbers[7]\
    \ + $numbers[8] * $numbers[8]);\n    return 1 if $threshold > sqrt($numbers[0]\
    \ * $numbers[0] + $numbers[1] * $numbers[1] + $numbers[2] * $numbers[2] + $numbers[3]\
    \ * $numbers[3] + $numbers[4] * $numbers[4] + $numbers[5] * $numbers[5] + $numbers[6]\
    \ * $numbers[6] + $numbers[7] * $", '    my @sorted = sort {$a <=> $b} @$numbers;',
  "    my(@closest_to_others, $i, $dist);\n    my($i, @numbers);", "    my(@array)\
    \ = @$numbers;\n    my($min_diff) = -1;\n    \n    # Find minimum in array and\
    \ store it in $min_diff\n    foreach my $n (@array) {\n        if ($n != $min_diff)\
    \ {\n            $min_diff = $n;\n        }\n    }\n    \n    foreach my $n (@array)\
    \ {\n        if (abs($n - $min_diff) < $threshold) {\n            return 1;\n\
    \        }\n    }\n    \n    return 0;\n}", '    my(@list) = @$numbers;', '    $threshold
    = abs($threshold);']
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
