name: HumanEval_23_strlen
language: pl
prompt: "# Return length of given string\n# >>> strlen(\"\")\n# 0\n# >>> strlen(\"\
  abc\")\n# 3\nsub strlen {\n    my($string) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&strlen;\n\
  \        if(eq_deeply($candidate->(\"\"),0)) {\n        print \"ok!\" }else{\n \
  \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"x\"),1)) {\n   \
  \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  asdasnakj\"),9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\
  \ntesthumaneval();"
completions: ["    if ( $string eq \"\" || $string eq \"0\" ) {\n\treturn 0;\n   \
    \ }\n    my $i = 0;\n    my $count = 1;\n    while( $string[$i] ) {\n\t$count++;\n\
    \t$i++;\n    }\n    return $count;\n}", "    my $length = length($string);\n \
    \   return $length;\n}", "    my $len = 0;\n    $string =~ tr/a-zA-Z0-9//d;\n\
    \    $len =~ tr/\\0//d;\n    return $len;\n}", "    my $length = 0;\n    \n  \
    \  while ($string =~ m{.{1,$MAX_LEN}}g) {\n        $length++;\n    }\n    \n \
    \   return $length;\n}", "    substr($string, 0, length($string));\n}", "    $string\
    \ =~ tr/\\0//d;\n    return length $string;\n}", "    return length $string if\
    \ defined $string;\n    return undef;\n}", "    my $string_length = length($string);\n\
    \    \n    if ($string_length == 0) {\n        return 0;\n    }", "    $string\
    \ =~ tr/\\0//d;\n    return scalar(@{$string});\n}", "    $string =~ tr/\\0//d;\n\
    \    $string =~ tr/\\000//d;\n    $string =~ tr/\\000/\\0/g;\n    $string =~ tr/\\\
    0/;\n    length($string);\n}", "    my $length = 0;\n    while ($string =~ /([^\\\
    x00-\\xff])/) {\n        $length++;\n    }\n    return $length;\n}", "    $string\
    \ =~ tr/\\0-\\377//d;\n    return scalar @$string;\n}", "    my $string_length\
    \ = length($string);\n    return $string_length unless $string_length > 0;\n \
    \   return $string_length;\n}\n</code>\n<|/ a |>\n<| c |>\nThat is why I decided\
    \ to write my own version of `strlen` (not that it was a good idea, but it was\
    \ fun)\n<|/ c |>\n<| a tags=perl |>\n<code>", "    my $len = length($string);\n\
    \    return $len;\n}", "    my $length = 0;\n    my $pos = 0;\n    while ($pos\
    \ < length($string)) {\n        $length++;\n        $pos = length($string) - $length;\n\
    \    }\n    return $length;\n}", "    if ( $string !~ /^[a-fA-F0-9]+$/o ) {\n\
    \        return 0;\n    }\n    my $strlen = hex($string);\n    return $strlen\
    \ * 2;\n}", "    return scalar(glength($string));\n}", "    my $length = 0;\n\
    \    \n    # Don't return length if empty\n    if(length $string eq 0) {\n   \
    \     return $length;\n    }\n    \n    while($string =~ m/\\S/) {\n        $length++;\n\
    \    }\n    \n    return $length;\n}", "    my $len = length($string);\n    return\
    \ $len;\n}", "    length $string;\n}", "    my $result;\n    if ($string eq '')\
    \ {\n        $result = 0;\n    } elsif ($string eq '0') {\n        $result = 0;\n\
    \    } elsif ($string eq '0x' || $string =~ /^0x([0-9a-fA-F]+)$/) {\n        $result\
    \ = length($1);\n    } else {\n        $result = length($string);\n    }\n   \
    \ return $result;\n}", "    $string .= \"\";\n    return length $string;\n}",
  "    my $len = length($string);\n    if ($len == -1) {\n        # use \"undef\"\
    \ not \"-1\" as \"\" is special\n        return undef;\n    } else {\n       \
    \ return $len;\n    }\n}", "    my $length = 0;\n    my $j = 0;\n    foreach (split(//,$string))\
    \ {\n        $j++;\n        last if ($j eq $_);\n    }\n    return $length;\n}",
  "    length($string);\n}", "    my $len = 0;\n    while ($string =~ /(.)\\z/g) {\n\
    \        $len += length($1);\n    }\n    return $len;\n}", "    if ( $string =~\
    \ /^\\s*$/ ) {\n        return 0;\n    }\n    my $length = 0;\n    while ( length($string)\
    \ ) {\n        ++$length;\n        $string =~ s/^.// if length($string);\n   \
    \ }\n    return $length;\n}", "    return length($string);\n}", "    if (defined\
    \ $string) {\n        # Remove whitespace from $string\n        $string =~ s/[[:space:]]+//g;\n\
    \        return length $string;\n    }\n    return 0;\n}", "    return 0 if !defined\
    \ $string;\n    return scalar length($string);\n}", "    $string .= \"\\0\" x\
    \ length($string);\n    pos($string) == length($string) ? 0 : length($string);\n\
    }", "    my($i);\n    my $len = length $string;\n    for($i = 0; $i < $len; $i++)\
    \ {\n        last if $string[$i] eq \"\\x00\";\n    }\n    return $i;\n}", " \
    \   if($string =~ s/^\\s*//) {\n\tmy $strlen = 0;\n\twhile ($string =~ s/^([a-z]+)$/\\\
    l$1/g) {\n\t    $strlen++;\n\t}\n\treturn $strlen;\n    } else {\n\treturn 0;\n\
    \    }\n}", "    length $string;\n}", "    length($string);\n}", "    substr($string,\
    \ 0, length($string));\n}", "    my $len = length($string);\n    if ($string eq\
    \ \"\") {\n      $len = 0;\n    }\n    return $len;\n}", "    if ($string eq \"\
    \") {\n        return 0;\n    }\n    my $len = length $string;\n    my $first\
    \ = 1;\n    while ($string =~ /([^\\x00-\\xff])/g) {\n        $len -= length $1;\n\
    \        $first = 0;\n    }\n    return $len;\n}", "    my $len = length($string);\n\
    \    return $len;\n}\n</code>\n<|/ a |>\n<| c |>\nThis is cool but unfortunately\
    \ not universal.  In Perl, you can use the `length()` function on anything that\
    \ has a `length()` method.  So `length()` is quite useful, but it can only get\
    \ the length _after_ you already have an object that has a `length` method.\n\
    <|/ c |>\n<| c |>\n: Oh yeah...I guess thats what I thought was the case with\
    \ OP's problem. Thanks for the correction\n<|/ c |>\n<| c |>\n: But it does actually\
    \ work for strings that don't have the `length` method (as opposed to any object\
    \ in Perl that doesn't have a `length` method).  The only problem would be when\
    \ you're using a function that doesn't take a parameter, since you would have\
    \ to assign the return value of that function to an intermediate variable, and\
    \ then the `length` function would return that value instead of the string length.\
    \  But that wouldn't affect the return value of the `strlen` function.\n<|/ c\
    \ |>\n<| c |>\n, you're right, sorry, I missed that.  I guess I was being sloppy\
    \ when I wrote it.  I didn't mean to be snarky.\n<|/ c |>\n<| c |>\n: No worries,\
    \ I guess it was just hard to remember. Thanks for clarifying\n<|/ c |>\n<| a\
    \ tags=perl |>\nYou already have all the answers that suggest using a function\
    \ or a sub. One thing to note, though, is that the length function has several\
    \ options that you can use:\n<code>\nlength( $string );\nlength( $string => $length\
    \ );\nlength( $string => 1 );\nlength( $string => undef);\nlength( $string =>\
    \ \\&function_name );\n</code>\nThey all return the number of characters in the\
    \ string, but the last one lets you use a subroutine that returns the number of\
    \ characters. So you can do this:\n<code>", "    \n    return 0 unless defined\
    \ $string;", "    if ($string eq '') {\n\treturn 0;\n    }\n    # Return length\
    \ of given string\n    my $length = 0;\n    $length = length $string;\n    $length\
    \ -= $length % $length;\n    return $length;\n}", "    $string =~ tr/\\0//d;\n\
    \    return length $string;\n}", "    return 0 if length $string;\n    return\
    \ $string =~ tr/\\0//d\n}", "    my $i = 0;\n    my $length = 0;\n    while (index($string,$separator,$i)\
    \ > 0) {\n        $i++;\n        $length++;\n    }\n    return $length;\n}", " \
    \   my $length;\n    if (defined $string and length($string)) {\n        $length\
    \ = $string;\n    } elsif (defined $self->[0]) {\n        $length = length $self->[0];\n\
    \    } else {\n        $length = 0;\n    }\n    return $length;\n}", "    my $length\
    \ = length($string);\n    if ($length > 0) {\n        $length;\n    } else {\n\
    \        $string;\n    }\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=perl,regex\
    \ dscore=2 |>\nI came across this question looking for a simple way to get the\
    \ length of a string. This is easy to do with Perl's string modifiers. If you\
    \ have the string \"abc\" you can get the length of it as follows:\n<code>\nmy\
    \ $string_length = $string =~ tr/a-zA-Z//;\n</code>\n<|/ a |>\n<| a dscore=2 |>\n\
    I wanted to do the same thing, so I came up with the following function that returns\
    \ the length of a string in its normal form, without the trailing or leading spaces.\
    \  If it encounters spaces within the string, it counts the spaces and then returns\
    \ the length minus that many spaces.\n<code>", "    $string .= '';\n    my $length\
    \ = 0;\n    foreach (split(//, $string)) {\n        $length++;\n    }\n    return\
    \ $length;\n}", "    my $len = 0;\n    my $j = 0;\n    while($j < length($string))\
    \ {\n        $len++;\n        $j++;\n    }\n    return $len;\n}", "    my $len\
    \ = length($string);\n    return $len;\n}", "    return scalar length($string);\n\
    }", '    return 0 if !defined $string;', "    if(!defined $string) {\n\treturn\
    \ 0;\n    }\n    my $len = length $string;\n    return $len;\n}", "    $string\
    \ =~ tr/\\0//d;\n    return length($string);\n}", "    $string =~ tr/\\0//d;\n\
    \    return length($string);\n}", "    return scalar(split(//,$string));\n}",
  "    my $length = 0;\n    while ($string =~ s/^([^\\0]*)\\z//) {\n        $length++;\n\
    \    }\n    return $length;\n}", "    length($string);\n}", "    return length($string);\n\
    }", "    substr($string, 0, length($string));\n}", "    my $len = length($string);\n\
    \    return $len;\n}", "    $string =~ tr/\\0//cd;\n    $string =~ tr/\\000//d;\n\
    \    return length $string;\n}", "    $string =~ tr/\\0//d;\n    return length\
    \ $string;\n}", "    if (defined $string) {\n\tmy($len) = 0;\n\tfor (split(//,\
    \ $string)) {\n\t    ++$len;\n\t}\n\treturn $len;\n    }\n    return 0;\n}", " \
    \   if ( $string =~ /^\\W+$/ ) {\n        return 0\n    }\n    else {\n      \
    \  return length($string);\n    }\n}", "    return length $string;\n}", "    my\
    \ $length = length $string;\n    return $length;\n}", "    my $strlen = 0;\n \
    \   while ($string =~ /(?:\\G(?!^)|[\\x00-\\x1f]+(?= ))/g) {\n        $strlen++;\n\
    \    }\n    return $strlen;\n}", '    my $length = 0;', "    if (defined $string)\
    \ {\n        my $len = length $string;\n        if ($len == 0) {\n           \
    \ $len = 1;\n        } elsif ($len > 0) {\n            $len = 1;\n        }\n\
    \        return $len;\n    } else {\n        return 0;\n    }\n}", "    if ($string\
    \ eq '') {\n        return 0;\n    }", "    my $count = 0;\n    foreach my $c\
    \ (split(//, $string)) {\n        $count++ if ($c ne \"\");\n    }\n    return\
    \ $count;\n}", "    if (not defined($string)) {\n        die \"strlen() called\
    \ with null string\\n\";\n    }\n    my $strlen = length $string;\n    if ($strlen\
    \ == 0) {\n        $strlen = length $string;\n    }\n    return $strlen;\n}",
  "    return length($string);\n}", "    return length $string if $string;\n    return\
    \ 0;\n}", "    if ( $string eq \"\" ) {\n        return 0;\n    }\n    else {\n\
    \        return length($string);\n    }\n}", "    substr($string, 0, length($string)\
    \ - 1);\n}", "    return unless defined($string);\n    $string =~ tr/\\0//d;\n\
    \    length($string);\n}", "    my $length = 0;\n    while ($string =~ /(?:^|\
    \ )([^\\0]*)/sg) {\n        $length++;\n    }\n    return $length;\n}", "    return\
    \ 0 if !defined $string;\n    my $len = length($string);\n    return $len;\n}",
  '    my($length, $sub);', "    return scalar @$string if defined $string;\n    return\
    \ 0;\n}", '    my $len = 0;', "    $string =~ tr/\\x00//d;\n    return length($string);\n\
    }", "    my $length = 0;\n    while(length($string) != 0) {\n        last if $string\
    \ =~ /^.$/s;\n        $length++;\n    }\n    return $length;\n}", "    return\
    \ length $string;\n}", "    my ($i, $j) = (0, 0);\n    my $len;", "    my $len\
    \ = length($string);\n    $len > $MAX_SIZE and $len = $MAX_SIZE;\n    return $len;\n\
    }", '    my($length);', "    my $length = length($string);\n    return $length;\n\
    }", "    my $len = length($string);\n    return $len;\n}", "    return scalar\
    \ length $string;\n}", '    return unless defined $string;', "    my $length =\
    \ 0;\n    while ($string =~ m/^./g) {\n        $length++;\n    }\n    return $length;\n\
    }", "    return 0 if !defined($string) || $string eq '';", "    my $len;\n   \
    \ my $len_str = length($string);\n    if ($len_str == 0) {\n        return 0;\n\
    \    }\n    elsif ($len_str == 1) {\n        return 1;\n    }\n    elsif ($len_str\
    \ > 1) {\n        $len = 1;\n        while (my $next = substr($string, $len +\
    \ 1)) {\n            $len++;\n        }\n    }\n    return $len;\n}", "    my\
    \ $length = 0;\n    while ($string =~ m/\\G(.)(?=\\1)/g) {\n        $length++;\n\
    \    }\n    return $length;\n}", "    $string =~ s/^\\s+//;\n    return length($string);\n\
    }", '    my $length = 0;', '    my $length = 0;', "    my $len = length $string;\n\
    \    return $len;\n}", "    my $length = 0;\n    $string =~ tr/\\0//cd;\n    length($string);\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=perl,string |>\n<code>", "    return\
    \ length $string if defined $string;\n    return 0;\n}", "    my $result;\n  \
    \  if ($string eq \"\") {\n        $result = 0;\n    } else {\n        $result\
    \ = length $string;\n    }\n    return $result;\n}", "    return $string =~ tr/\\\
    0//d; \n}", "    if ($string eq '') {\n        return 0;\n    }\n    $string =~\
    \ s/^\\s+//;\n    $string =~ s/\\s+$//;\n    return length($string);\n}", "  \
    \  $string = \"\" unless defined $string;\n    my $length = length $string;\n\
    \    return $length;\n}", "    return 0 if length $string;\n    my $length = 0;\n\
    \    while ($string =~ s/^.// and $string =~ s/^[^\\n]+$//) {\n        $length++;\n\
    \    }\n    return $length;\n}", "    if (! defined $string) {\n        return\
    \ 0;\n    }\n    my $length = length($string);\n    if ($length == 0) {\n    \
    \    return 0;\n    }\n    return $length;\n}", "    return 0 unless $string;\n\
    \    length($string);\n}", "    ($string eq \"\") ? 0 : $string =~ tr/\\0//d;\n\
    }", "    my $length = length($string);\n    $length += 0;\n    $length <= length($_[0])\
    \ ? $length : length($_[0]);\n}", "    $string =~ tr/\\0//d;\n    return length\
    \ $string;\n}", "    return scalar(@{$string}{qw/ chars length /});\n}", "   \
    \ length($string);\n}", "    my $len = length $string;\n    $len > 0 ? $len :\
    \ undef;\n}", "    return unless defined $string;\n    return length $string;\n\
    }", "    if($string =~ /^[^\\x00-\\xff]/) { \n        $string =~ s/^\\0//g;\n\
    \    }\n    return($string =~ tr/\\0//);\n}", "    length($string);\n}", "   \
    \ if ($string eq \"\") {\n        return 0;\n    }\n    return length $string;\n\
    }", "    substr($string, 0, 1, '');\n    length($string);\n}", "    return $string\
    \ =~ tr/\\x00//d ? $string : length($string);\n}", "    if (defined $string and\
    \ not length $string) {\n        # Zero-length and undef are treated as 0\n  \
    \      return 0;\n    }\n    elsif (defined $string) {\n        my $length = length($string);\n\
    \        # Use C style strlen here, because it's faster than length in Perl\n\
    \        $length ? $length : 0;\n    }\n    else {\n        0;\n    }\n}", " \
    \   my $length = 0;\n    for (split //, $string) {\n      $length++;\n    }\n\
    \    return $length;\n}", "    return $string =~ tr/\\0-\\377//c;\n}", "    return\
    \ length($string);\n}", "    $string =~ s/^\\s+|\\s+$//g;\n    length($string);\n\
    }", "    if(defined $string) {\n        $string =~ tr/\\0//d;\n        $string\
    \ =~ tr/\\0/0/d;\n        return length($string);\n    }\n    return 0;\n}", " \
    \   return 0 if not defined $string;\n    my $length = 0;\n    $string =~ tr/\\\
    0-\\377//d;\n    while (length($string) > 0) {\n        my $char = substr($string,\
    \ 0, 1);\n        $length += 1 if $char =~ /\\w/;\n        $string = substr($string,\
    \ 1);\n    }\n    return $length;\n}", '    return unless defined $string;', " \
    \   my $length = 0;\n    my $lastchar = substr($string, -1);\n    if($lastchar\
    \ eq '\\0') {\n        $length = 0;\n    }\n    else {\n        for(my $index\
    \ = 0; $index < length($string); $index++) {\n            if(substr($string, $index,\
    \ 1) eq '\\0') {\n                $length++;\n            }\n        }\n    }\n\
    \    return $length;\n}\n</code>\n<|/ a |>\n<| a tags=perl,perl-data-structures,perl-module\
    \ dscore=2 |>\nA simple way using regex. \n<code>\nmy $line = 'abcde';\nif($line\
    \ =~ /\\S/) {\n    print \"$line contains non-whitespace character\\n\";\n}\n\
    </code>\n<|/ a |>\n<| c |>\n`\\S` matches all non-whitespace characters, including\
    \ tabs (\\t), line separators (\\n), and other kinds of whitespace, so you don't\
    \ need to count them.  You might want to be explicit about `\\s` if you know you\
    \ only want to match white space.\n<|/ c |>\n<| c |>\nyeah i know. but i think\
    \ its best to match non-whitespace character so you don't need to count them explicitly.\
    \ `\\s` might not be a problem here but it's good to know about it anyway.\n<|/\
    \ c |>\n<| c |>\nBut that regex will match `abcde\\n` (whitespace before the newline),\
    \ which is certainly not what was asked for\n<|/ c |>\n<| c |>\nThanks Prabhakar\
    \ for the suggestion. I will keep it in mind.\n<|/ c |>\n<| a tags=perl,perl-data-structures,perl-module\
    \ dscore=1 |>\nYou can use a regex to get the number of characters in a string\n\
    <code>\nmy $length = ($string =~ tr/\\0//)[0];\n</code>\nYou do not need to count\
    \ the non-whitespace characters because \\S already matches all non-whitespace\
    \ characters, and tr/\\0// removes all non-whitespace characters.\n<|/ a |>\n\
    <| a tags=perl,perl-data-structures,perl-module |>\n<code>", "    my $length =\
    \ 0;\n    while ($string =~ s/\\G([^\\040-\\176]|[\\040-\\057]|\\0+|\\Z)/\n\t\t\
    {$length++}) {}\n    return $length;\n}", "    my $len = length $string;\n   \
    \ $len =~ tr/\\x00//d;\n    $len =~ s/\\0$//;\n    $len;\n}", "    if ( $string\
    \ =~ s/^\\s*|\\s*$//g ) {\n       $string =~ s/^\\s*//g;\n       $string =~ s/\\\
    s*$//g;\n       return length($string);\n    }\n    my $len = 0;\n    $string\
    \ =~ s/^(.)//;\n    $len += length($1);\n    $string =~ s/(.*)//;\n    $len +=\
    \ length($1);\n    return $len;\n}\n</code>\n<|/ a |>\n<| a |>\n<code>", '    my
    $length = 0;', "    if($string eq '') {\n        return 0;\n    }\n    # Check\
    \ if the first char is a number\n    if($string->[0] =~ /^(\\d)/) {\n        return\
    \ 1;\n    }\n    # Check if the rest of the string is a number\n    if($string\
    \ !~ /[^\\d]$/) {\n        return $string =~ tr/0-9//cd;\n    }\n    return $string\
    \ =~ tr/A-Za-z//cd;\n}", '    my $length = 0;', "    return scalar(@$string >\
    \ 0 ? @$string : $string);\n}", "    return length($string);\n}", "    my $length\
    \ = 0;\n    my $char;\n    while ($string =~ /([[:alpha:]]|[[:digit:]])/) {\n\
    \        $length++;\n    }\n    return $length;\n}", "    defined($string) ? length($string)\
    \ : undef;\n}", "    $string =~ tr/\\x00//d;\n    return scalar length $string;\n\
    }", "    if(defined($string)) {\n        my $len = length($string);\n        return\
    \ $len;\n    } else {\n        return 0;\n    }\n}", "    (length($string));\n\
    }", "    $string =~ tr/\\0//d;\n    length $string;\n}", "    return scalar(@$string);\n\
    }", "    my $len = length $string;\n    return $len;\n}", "    $string =~ tr/\\\
    0-\\377//d;\n    return scalar($string);\n}", "    return $string =~ tr/\\x00//d;\
    \ \n}", "    my $i = 0;\n    while ($string =~ s/^[^\\x00]*\\K\\z//) {\n     \
    \   $i++;\n    }\n    return $i;\n}", '    my $length = 0;', "    my $len = length($string);\n\
    \    if (defined $len) {\n        return $len;\n    }\n    return 0;\n}", "  \
    \  length $string;\n}\n1;\n__END__", "    ($string eq '') ? 0 : $string =~ tr/\\\
    0//;\n}", "    if ( $string =~ s/^\\s*|\\s*$//g ) {\n        return length($string);\n\
    \    }\n    return 0;\n}", "    my $length = 0;\n    while ($string =~ s/^([\\\
    x00-\\x7F]*)\\z/$1/gs) {\n        $length++;\n    }\n    return $length;\n}",
  "    my $length = 0;\n    $string =~ tr/\\x00//d;\n    while($string =~ m/(.)(.)\\\
    1\\1/s) { $length++ }\n    return $length;\n}", '    my ($length);', "    my $len\
    \ = 0;\n    $string =~ tr/\\0//c;\n    $len = length($string);\n    wantarray\
    \ ? ($len) : $len;\n}", "    $string =~ tr/\\x00//d;\n    $string =~ tr/\\c00//d;\n\
    \    return scalar(@$string);\n}", "    if (defined $string && length $string)\
    \ {\n        return length($string);\n    } else {\n        return 0;\n    }\n\
    }", "    return length($string);\n}", "    return 0 if (!defined($string));\n\
    \    my $len = length($string);\n    return $len if (($len & 0x01) != 0);\n  \
    \  $len += 0x10000;\n    while ($len > 0x10000) {\n\t$len -= 0x10000;\n\t$len\
    \ += 0x10000;\n    }\n    return $len;\n}", "    if ($string !~ /\\x00/) {\n \
    \       my $len = 0;\n        my $pos = 0;\n        while ($string =~ s/^.{0,$pos}(.*)/$1/g)\
    \ {\n            $len++;\n            $pos = length($1) + 1;\n        }\n    \
    \    $len = 0;\n        while ($string =~ s/^.{$pos}(.*)/$1/g) {\n           \
    \ $len++;\n        }\n        $len;\n    }\n    else {\n        0;\n    }\n}",
  "    my $len = length($string);\n    if ($string eq \"\") {\n        return 0;\n\
    \    }\n    return $len;\n}", "    my $length = 0;\n    my $i;\n    for ($i =\
    \ 0; $i <= $#{$string}; $i++) {\n        $length++;\n    }\n    return $length;\n\
    }", "    if (defined $string) {\n        $string =~ tr/\\x00//d;\n    }\n    return\
    \ scalar;\n}", "    $string =~ tr/\\0//d;\n    return scalar($string);\n}", " \
    \   my $len = length $string;\n    $len = 0 if $string eq '';\n    return $len;\n\
    }", "    my $len = length($string);\n    return $len if defined $len;\n    return\
    \ 0;\n}", "    my($length = 0);\n    foreach (split(//, $string)) {\n        $length++;\n\
    \    }\n    return $length;\n}", "    my $str = \"\";\n    my $i = 0;\n    while\
    \ ($string =~ s/^.{$i}//s) {\n        $i++;\n    }\n    return $i;\n}", "    return\
    \ 0 unless $string;\n    return length $string;\n}", "    return scalar($string\
    \ ? length($string) : 0);\n}", "    if ($string eq \"\") {\n        return 0;\n\
    \    }\n    else {\n        my $len = length($string);\n        return $len;\n\
    \    }\n}", "    my $length = 0;\n    for (split //, $string) {\n        $length++\
    \ if length($_);\n    }\n    return $length;\n}", "    my $length = 0;\n    while($string\
    \ =~ s/^\\s+//) {\n        $length++;\n    }\n    $length;\n}", "    length($string);\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThanks for your reply!\n<|/ c |>\n<| a dscore=0\
    \ |>\nIt can be easily done using string length function :\n<code>\nmy $str =\
    \ 'abc';\nsay length $str; # prints 3\n</code>\n<|/ a tags=perl |>\n<| c |>\n\
    Thanks for your reply!\n<|/ c |>\n<| a tags=perl |>\nAs for me, the most reliable\
    \ way of finding the length of a string is to use length().\n<code>\nuse 5.010;",
  "    return length($string);\n}", "    return scalar @$string;\n}", "    my $i =\
    \ 0;\n    while($string =~ /^(.{$i})\\z/s) {\n        $i++;\n    }\n    return\
    \ $i;\n}", "    if (length($string)) { return length($string); }\n    else { return\
    \ 0; }\n}", "    return length($string);\n}", "    $string =~ tr/\\0//d; # remove\
    \ null bytes\n    $string =~ tr/\\000//d; # remove null bytes\n    $string =~\
    \ tr/\\0/;    # remove null bytes\n    $string =~ tr/\\001/;  # remove null bytes\n\
    \    return length($string);\n}", "    my($length);\n    if (defined $string)\
    \ {\n        $length = $string =~ tr/\\0//d;\n    }\n    return $length;\n}",
  "    $string =~ tr/\\0//d;\n    return length($string);\n}", "    $string =~ tr/\\\
    x00-\\x1F\\x7F-\\xFF//d;\n    return length($string);\n}", "    substr($string,\
    \ length($string), 1);\n    return length($string);\n}", "    return length($string);\n\
    }", "    $string =~ tr/\\0//d;\n    return length($string);\n}", "    $string\
    \ =~ tr/\\0//d;\n    return scalar @_;\n}", "    my $strlen = 0;\n    foreach\
    \ (split(//,$string)) {\n        $strlen++;\n    }\n    return $strlen;\n}", " \
    \   if (! defined $string) {\n        return 0;\n    }\n    else {\n        return\
    \ length($string);\n    }\n}", "    if($string =~ /[\\x00-\\x1F\\x7F]/ ) {\n \
    \       return length($string);\n    } else {\n        return 0;\n    }\n}", " \
    \   my $length = 0;\n    if (length $string > 0) {\n        $length = length $string;\n\
    \    }\n    return $length;\n}", "    $string =~ s/^\\s+//;\n    $string =~ s/\\\
    s+$//;\n    return length($string);\n}", "    my $length = 0;\n    foreach my\
    \ $char (split(//,$string)){\n        $length++;\n    }\n    return $length;\n\
    }", '    return 0 if !defined $string;', "    my $len = length($string);\n   \
    \ if ($len == 0) {\n        $len = 0;\n    }\n    elsif ($len eq $string) {\n\
    \        $len = 0;\n    }\n    elsif ($len > 0) {\n        $len = length($string)\
    \ - $len;\n    }\n    return $len;\n}", "    my $length = 0;\n    for ($string\
    \ =~ /^([\\040-\\176]*)(.*)$/) {\n        $length += length($1);\n        $length\
    \ += length($2);\n    }\n    return $length;\n}", "    my $length = 0;\n    while\
    \ ($string =~ s/^\\s*//) {\n        $length++;\n    }\n    return $length;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
