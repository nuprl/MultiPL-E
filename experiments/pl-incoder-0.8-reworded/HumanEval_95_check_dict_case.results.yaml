language: pl
name: HumanEval_95_check_dict_case
results:
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    return 1 if (scalar keys %$dict) == 0;\n    foreach\
    \ my $key (keys %$dict) {\n        return 1 if (lc($key) eq uc($key));\n    }\n\
    \    return '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    \n    foreach my $key (sort keys %$dict) {\n   \
    \     if(ref($dict->{$key}) eq 'HASH') {\n            return check_dict_case($dict->{$key});\n\
    \        }\n        elsif(ref($dict->{$key}) eq 'ARRAY') {\n            return\
    \ 1 if check_dict_case(@{$dict->{$key}});\n        }\n        elsif(ref($dict->{$key})\
    \ eq 'SCALAR') {\n            if($dict->{$key} =~ m/^[a-zA-Z0-9]+$/) {\n     \
    \           return 1;\n            }\n        }\n    }\n    return '';\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my($upper_case, $lower_case) = (\"A\", \"B\");\n\
    \    \n    my $result = \"\";\n    \n    foreach my $key (sort keys %$dict) {\n\
    \        if ($key =~ /^[a-z]/i || $key =~ /^[A-Z]/i) {\n            $result .=\
    \ 1;\n        }\n    }\n    \n    return $result;\n}\n</cell>\n<text>\nExercise\
    \ 9\nCreate a function that takes a string and returns the number of times the\
    \ word \"Cat\" appears in the string and returns the number of times the word\
    \ \"Dog\" appears in the string. Don't count the string \"CatDogCatDog\" as a\
    \ cat and dog if it appears more than once.\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Number found where operator expected at /tmp/tmp18pmz3e3.pl line 31, near\
    \ \"Exercise 9\"\n\t(Do you need to predeclare Exercise?)\nSemicolon seems to\
    \ be missing at /tmp/tmp18pmz3e3.pl line 31.\nBareword found where operator expected\
    \ at /tmp/tmp18pmz3e3.pl line 32, near \"times the\"\n\t(Do you need to predeclare\
    \ times?)\nBareword found where operator expected at /tmp/tmp18pmz3e3.pl line\
    \ 32, near \"\"Cat\" appears\"\n\t(Missing operator before appears?)\nBareword\
    \ found where operator expected at /tmp/tmp18pmz3e3.pl line 32, near \"times the\"\
    \n\t(Do you need to predeclare times?)\nBareword found where operator expected\
    \ at /tmp/tmp18pmz3e3.pl line 32, near \"\"Dog\" appears\"\n\t(Missing operator\
    \ before appears?)\nBareword found where operator expected at /tmp/tmp18pmz3e3.pl\
    \ line 32, near \"\"CatDogCatDog\" as\"\n\t(Missing operator before as?)\nsyntax\
    \ error at /tmp/tmp18pmz3e3.pl line 31, near \"Exercise 9\"\n\"use\" not allowed\
    \ in expression at /tmp/tmp18pmz3e3.pl line 33, at end of line\nExecution of /tmp/tmp18pmz3e3.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660126781
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    \n    my $return = '';\n    foreach my $key (keys(%$dict))\
    \ {\n\tmy $lowerkey = lc($key);\n\tmy $upperkey = uc($key);\n\tnext if exists\
    \ $dict->{$lowerkey} && exists $dict->{$upperkey};\n\t$return = $key;\n    }\n\
    \    \n    return $return;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $flag = '';\n    my $is_in_upper_case = 0;\n\
    \    my $is_in_lower_case = 0;\n    foreach my $key ( sort keys %$dict ) {\n \
    \       my $value = $dict->{$key};\n        $is_in_upper_case = ($key =~ /^[A-Z]+$/)\
    \ ? 1 : 0;\n        $is_in_lower_case = ($key =~ /^[a-z]+$/) ? 1 : 0;\n      \
    \  $flag = ($flag eq '') ? $is_in_upper_case && $is_in_lower_case : \n       \
    \     $is_in_upper_case || $is_in_lower_case;\n        $flag = ($flag eq '1')\
    \ ? $flag : '';\n    }\n    return $flag;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $hash_case = 0;\n    \n    foreach my $key (sort\
    \ keys %$dict) {\n        if (is_string($key)) {\n            $hash_case += uc($key)\
    \ eq $key;\n        }\n        elsif (is_string($key) && is_string($dict->{$key}))\
    \ {\n            $hash_case += uc($key) eq uc($dict->{$key});\n        }\n   \
    \ }\n    \n    return $hash_case ? '' : '1';\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_string called at /tmp/tmp9p799rfl.pl line
    20.

    '
  stdout: ''
  timestamp: 1660126782
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = '';\n    foreach my $key (keys %$dict)\
    \ {\n        if($key =~ /^[a-z]$/i) {\n            $result++;\n        }\n   \
    \     elsif(lc($key) eq lc($key)) {\n            $result++;\n        }\n    }\n\
    \    return $result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\nThis works in Perl6:\n\
    <code>\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'syntax error at /tmp/tmpu_edfxmc.pl line 29, near "<|"

    Search pattern not terminated at /tmp/tmpu_edfxmc.pl line 29.

    '
  stdout: ''
  timestamp: 1660126781
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    $dict = { %$dict };\n    for my $k (keys %$dict)\
    \ {\n        return $dict->{$k} =~ m/^[a-z][a-z]$/ ? 1 : '';\n    }\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my($result) = '';\n    \n    foreach my $key ( keys\
    \ %$dict ) {\n        if ($key =~ /^[a-z]+$/i or $key =~ /^[A-Z]+$/i) {\n    \
    \        $result .= \"1\";\n            last;\n        } \n    }\n    \n    return\
    \ $result;\n}\n</code>\n<|/ a |>\n<| c |>\n`return (scalar grep(/.../i, keys(%$dict)))\
    \ ? \"1\" : \"0\";` will suffice if the keys were all strings.\n<|/ c |>\n<| c\
    \ |>\n`return (scalar grep(/.../i, keys %$dict)) ? \"1\" : \"0\"` is shorter and\
    \ works even with hashes that didn't have keys. `scalar` is necessary because\
    \ `grep` returns a list and the `?` operator returns the first element of an array.\n\
    <|/ c |>\n<| c |>\n`return (scalar grep(/.../i, values %$dict)) ? \"1\" : \"0\"\
    ;` will also work, assuming that all values are strings.\n<|/ c |>\n<| c |>\n\
    `return (scalar grep(/.../i, keys %$dict)) ? \"1\" : \"0\"` is shorter and works\
    \ even with hashes that didn't have keys. `scalar` is necessary because `grep`\
    \ returns a list and the `?` operator returns the first element of an array.\n\
    <|/ c |>\n<| a dscore=3 |>\n<code>\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Backticks found where operator expected at /tmp/tmpjeggyjjm.pl line 31,\
    \ near \"because `grep`\"\n\t(Do you need to predeclare because?)\nBackticks found\
    \ where operator expected at /tmp/tmpjeggyjjm.pl line 31, near \"the `?`\"\n\t\
    (Do you need to predeclare the?)\nBackticks found where operator expected at /tmp/tmpjeggyjjm.pl\
    \ line 37, near \"because `grep`\"\n\t(Do you need to predeclare because?)\nBackticks\
    \ found where operator expected at /tmp/tmpjeggyjjm.pl line 37, near \"the `?`\"\
    \n\t(Do you need to predeclare the?)\nsyntax error at /tmp/tmpjeggyjjm.pl line\
    \ 29, near \"<|\"\n\"use\" not allowed in expression at /tmp/tmpjeggyjjm.pl line\
    \ 41, at end of line\nExecution of /tmp/tmpjeggyjjm.pl aborted due to compilation\
    \ errors.\n"
  stdout: ''
  timestamp: 1660126781
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $case = 0;\n    foreach my $key (keys %$dict)\
    \ {\n        next if $dict->{$key}->[0] =~ /^[[:lower:]]/;\n        $case += 1;\n\
    \    }\n    return $case;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my($lowercase_keys);\n    my($uppercase_keys);\n\
    \    my($count);\n    my($result);\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmps8mjzvej.pl line 56, at
    end of line

    syntax error at /tmp/tmps8mjzvej.pl line 56, at EOF

    Execution of /tmp/tmps8mjzvej.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    foreach my $key (keys(%$dict)) {\n        my $case_insensitive\
    \ = $key =~ tr/a-zA-Z//cd;\n        $case_insensitive or $case_insensitive = \"\
    x\" if $key =~ tr/A-Z//cd;\n        return $case_insensitive ? 1 : '';\n    }\n\
    \    return '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660126782
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    $dict = to_hash($dict);\n    my @keys = keys %$dict;\n\
    \    my $result = $keys[0] =~ /^[a-z]+$/i;\n    my $result = $keys[0] =~ /^[A-Z]+$/i;\n\
    \    return ($result == 1) ? '' : $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::to_hash called at /tmp/tmp0miss087.pl line
    17.

    '
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my %counts;\n    \n    foreach my $key (keys %$dict)\
    \ {\n        if ($dict->{$key}) {\n            $counts{$key}++;\n        }\n \
    \   }\n    \n    my $result = 0;\n    foreach my $key (keys %counts) {\n     \
    \   if ($counts{$key} > 1) {\n            $result = '' if ($counts{$key} > 2);\n\
    \        }\n    }\n    \n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = '';\n    foreach my $key (keys %$dict)\
    \ {\n        $result = $key if ($key =~ /^[a-zA-z]+$/);\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 2
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    \n    my @keys = keys(%$dict);\n    my $len = @keys;\n\
    \    \n    my $str = '';\n    \n    for (my $i = 0; $i < $len; $i++) {\n     \
    \   my $key = $keys[$i];\n        \n        # Only strings in lower case\n   \
    \     if ($dict->{$key} =~ /^[a-z]+$/) {\n            $str = $key . $str;\n  \
    \      }\n        \n        # Only strings in upper case\n        else {\n   \
    \         $str = $key . lc($str);\n        }\n    }\n    \n    return $str if\
    \ $str != '';\n    \n    return 1;\n}\n</code>\n<|/ a tags=perl,hash,case-insensitive,case-sensitive\
    \ |>\n<| c |>\nPlease don't post code without an explanation.\n<|/ c |>\n<| c\
    \ |>\nI wouldn't call `check_dict_case()` a hash function.  It returns a value,\
    \ but it's not a hash function.  I think you meant \"case-sensitive hash\" (or\
    \ \"hash function\").\n<|/ c |>\n<| c |>\nI've edited the answer to explain why\
    \ I made this answer. Thanks for the suggestions.\n<|/ c |>\n<| c |>\nYes, I meant\
    \ hash function. Thanks for clarifying.\n<|/ c |>\n<| c |>\nThank you for writing\
    \ this answer.  Your answer is awesome.  I like that `map { lc } keys %h` was\
    \ mentioned.  It makes it a lot clearer what you're doing.\n<|/ c |>\n<| a tags=perl,hash,case-insensitive,case-sensitive\
    \ dscore=5 |>\nI know the original poster is only looking for case insensitivity,\
    \ but this approach could be useful to others with case-sensitive hashing needs:\n\
    <code>\nmy %hash = (\n  \"key1\" => \"value1\",\n  \"key2\" => \"value2\",\n \
    \ \"Key3\" => \"Value3\",\n);\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Backticks found where operator expected at /tmp/tmp0yu0vplj.pl line 44,\
    \ near \"call `check_dict_case()`\"\n\t(Do you need to predeclare call?)\nBackticks\
    \ found where operator expected at /tmp/tmp0yu0vplj.pl line 53, near \"that `map\
    \ { lc } keys %h`\"\n\t(Do you need to predeclare that?)\nsyntax error at /tmp/tmp0yu0vplj.pl\
    \ line 42, near \"<|\"\nBEGIN not safe after errors--compilation aborted at /tmp/tmp0yu0vplj.pl\
    \ line 63.\n"
  stdout: ''
  timestamp: 1660126781
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    if (keys %$dict == 0) {\n        return '';\n  \
    \  }\n    my $case_status = check_dict_case_recursive($dict);\n    if ($case_status\
    \ eq '1') {\n        return 1;\n    }\n    return '';\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::check_dict_case_recursive called at /tmp/tmpd5q648a1.pl
    line 20.

    '
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    $dict ||= {};\n    \n    my $ret = scalar(grep(m{([A-Z]+|[a-z]+)},\
    \ keys %$dict));\n    \n    return $ret ? 1 : '';\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $key;\n    my $value;\n    my $found;\n    for\
    \ (sort keys %$dict) {\n\t$found = 0;\n\t$key = $_;\n\t$value = $dict->{$_};\n\
    \tfor (sort keys %$dict) {\n\t    next unless $_ eq $key;\n\t    next if $_ eq\
    \ $key;\n\t    $found = 1;\n\t}\n\tif ($found && !$value =~ /^[A-z0-9]+$/) {\n\
    \t    return 1;\n\t}\n    }\n    return '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $hash_case = 1;\n    my @keys = keys %$dict;\n\
    \    foreach my $key (@keys) {\n        my $value = $dict->{$key};\n        return\
    \ '' if !defined $value || $value !~ /^[A-z]+$/ \n                 || !defined\
    \ $key || $key !~ /^[A-z]+$/;\n        my $value_lower = lc($value);\n       \
    \ my $key_lower = lc($key);\n        my $value_upper = uc($value);\n        my\
    \ $key_upper = uc($key);\n        if ($value_lower ne $value_upper) {\n      \
    \      $hash_case = 0;\n            return '';\n        }\n        if ($key_lower\
    \ ne $key_upper) {\n            $hash_case = 0;\n            return '';\n    \
    \    }\n    }\n    return $hash_case ? 1 : 0;\n}\n</code>\n<|/ a tags=perl,hash,case\
    \ |>\n<| a dscore=1 tags=perl,hash,case |>\nI needed to check a hash against a\
    \ case insensitive hash. I needed the keys and values were lowercased and uppercased.\
    \ In case anyone needs it, here's my solution.\n<code>\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'syntax error at /tmp/tmpf7fus0jp.pl line 39, near "<|"

    Search pattern not terminated at /tmp/tmpf7fus0jp.pl line 39.

    '
  stdout: ''
  timestamp: 1660126781
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $return_str = '';\n    \n    foreach my $key\
    \ (keys %$dict) {\n        return $return_str if \n            !is_string($key)\
    \ or !is_string($dict->{$key});\n        return $return_str if $key =~ /^[a-z]+$/i;\n\
    \        return $return_str if $key =~ /^[A-Z]+$/i;\n    }\n    return $return_str;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_string called at /tmp/tmpvp4fk138.pl line
    21.

    '
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    foreach my $key (sort keys %$dict) {\n        return\
    \ 1 if (lc($key) eq lc($dict->{$key}));\n    }\n    return '';\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my @cases = map { uc($_) } keys %$dict;\n    if\
    \ (@cases == 1 && $cases[0] =~ /^[a-z]/) {\n        return 1;\n    }\n    if (@cases\
    \ == 1 && $cases[0] =~ /^[A-Z]/) {\n        return '';\n    }\n    if (@cases\
    \ <= 1) {\n        return '';\n    }\n    return '';\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my ($key, @values) = each %$dict;\n    my $result;\n\
    \    foreach $key (sort(keys %$dict)) {\n        my $value = $dict->{$key};\n\
    \        foreach my $value (@values) {\n            if(lc($key) eq lc($value)\
    \ || uc($key) eq uc($value)) {\n                next;\n            }\n       \
    \ }\n        return $result if $result != '';\n    }\n    return '';\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    return '' unless $dict;\n    for (sort keys %$dict)\
    \ {\n\treturn '' if $dict->{$_} eq '' && (lc($_) eq lc($_)); \n\treturn '' if\
    \ $dict->{$_} eq '' && (uc($_) eq uc($_));\n\treturn 0 if $dict->{$_} ne $dict->{$_};\
    \ \n    }\n    return 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    if (keys %$dict == 0) {\n        return '';\n  \
    \  }\n    my($keys) = keys %$dict;\n    my $strings = '';\n    my($strings_upper)\
    \ = $keys ~~ /^[A-Z]+$/i;\n    my($strings_lower) = $keys ~~ /^[a-z]+$/i;\n  \
    \  if ($strings_lower && $strings_upper) {\n        return '';\n    }\n    if\
    \ ($strings_lower) {\n        $strings = $strings_lower;\n    }\n    else {\n\
    \        $strings = $strings_upper;\n    }\n    return $strings;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Smartmatch is experimental at /tmp/tmpaykr2lez.pl line 22.

    Smartmatch is experimental at /tmp/tmpaykr2lez.pl line 23.

    '
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    \n    my $ret = '';\n    foreach my $key (keys %$dict)\
    \ {\n        my $value = $dict->{$key};\n        if($key =~ /^[a-z][A-Z]/i ||\
    \ $key =~ /^[A-Z][a-z]/i) {\n            $ret = 1;\n            last;\n      \
    \  }\n    }\n    return $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    \n    if ( keys %$dict ) {\n        for my $key\
    \ ( keys %$dict ) {\n            next if ( !$dict->{$key} || $dict->{$key} !~\
    \ /[a-z]/i || $dict->{$key} !~ /[A-Z]/i );\n            return '';\n        }\n\
    \        return 1;\n    }\n    return '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    \n    if (exists($dict) || !exists($dict)) {\n \
    \       return '';\n    }\n    \n    for my $key (keys(%$dict)) {\n        if\
    \ ($key !~ /^[A-Z_]/) {\n            return '1';\n        } elsif ($key !~ /^[a-z]/)\
    \ {\n            return '1';\n        }\n    }\n    return '';\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'exists argument is not a HASH or ARRAY element or a subroutine at /tmp/tmp3mpgfqtf.pl
    line 18.

    '
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = ' ';\n    foreach my $key (sort keys %$dict)\
    \ {\n        return $ret if ($key eq $dict->{$key});\n    }\n    return $ret;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    $dict = \\%$dict;\n    \n    my $case = \"1\";\n\
    \    foreach my $key (keys(%$dict)) {\n        if($key eq $key or $key eq $key)\
    \ { $case = \"1\"; }\n        else {\n            $case = \"0\";\n           \
    \ last;\n        }\n    }\n    \n    return $case;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660126782
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my($first_key, $first_val);\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpkn9kbh0j.pl line 53, at
    end of line

    syntax error at /tmp/tmpkn9kbh0j.pl line 53, at EOF

    Execution of /tmp/tmpkn9kbh0j.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = '';\n    foreach my $key (sort keys\
    \ %$dict) {\n        if($dict->{$key} =~ /^([A-Z]*\\s)*$/) {\n            $result\
    \ = 1;\n            last;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 2
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    \n    my @keys = keys %$dict;\n    \n    return\
    \ '' unless (scalar(@keys) == scalar @keys);\n    \n    # Make sure all the keys\
    \ are in lower case\n    foreach my $key (@keys) {\n        my $val = ${$dict}{$key};\n\
    \        return '' unless ($key =~ /^([a-z]|[A-Z])$/);\n    }\n    \n    # Make\
    \ sure all the keys are in upper case\n    foreach my $key (@keys) {\n       \
    \ my $val = ${$dict}{$key};\n        return '' unless ($key =~ /^([A-Z])$/);\n\
    \    }\n    \n    return 1;\n}\n</textarea></form>\n    <script>\n      var editor\
    \ = CodeMirror.fromTextArea(document.getElementById(\"code\"), {\n        lineNumbers:\
    \ true,\n        matchBrackets: true,\n        mode: \"text/x-perl\",\n      \
    \  readOnly: true\n      });\n    </script>\n    <h3>The Perl Mode</h3>\n    <table\
    \ id=\"perl-table\">\n      <tr>\n        <td>\n          <textarea id=\"code\"\
    \ name=\"code\">#!/usr/bin/perl\nuse warnings;\nuse strict;\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Unmatched ( in regex; marked by <-- HERE in m/form>\n    <script>\n   \
    \   var editor = CodeMirror.fromTextArea( <-- HERE document.getElementById(\"\
    code\"), {\n        lineNumbers: true,\n        matchBrackets: true,\n       \
    \ mode: \"text/ at /tmp/tmpw2bqpzgy.pl line 41.\n"
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result;\n    \n    foreach my $key (sort(keys(%$dict)))\
    \ {\n        return $result if ref($dict->{$key}) ne \"HASH\";\n        if ($key\
    \ eq lc($key) && $dict->{$key} eq $dict->{$key}) {\n            $result = 1;\n\
    \        }\n    }\n    $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $case = &_check_dict_case($dict);\n    return\
    \ $case;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\",\
    \ \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::_check_dict_case called at /tmp/tmpuq2ckftf.pl
    line 17.

    '
  stdout: ''
  timestamp: 1660126782
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    return 1 unless keys(%$dict);\n    return '' unless\
    \ $dict->{\"a\"} = \"apple\" ||\n                     $dict->{\"A\"} = \"banana\"\
    \ ||\n                     $dict->{\"B\"} = \"banana\";\n    return 1;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t modify constant item in scalar assignment at /tmp/tmpavhmf6ec.pl
    line 20, near ""banana";"

    BEGIN not safe after errors--compilation aborted at /tmp/tmpavhmf6ec.pl line 23.

    '
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    \n    my $case = 0;\n    foreach my $key (sort keys\
    \ %$dict) {\n        my $val = lc($dict->{$key});\n        if ($val eq '' || $val\
    \ eq $key || lc($key) eq uc($val)) {\n            $case++;\n        }\n    }\n\
    \    \n    if ($case == 0) {\n        return '';\n    } elsif ($case == keys(%$dict))\
    \ {\n        return 1;\n    } else {\n        return '';\n    }\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = 1;\n    my $key;\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp2e5jzph9.pl line 54, at
    end of line

    syntax error at /tmp/tmp2e5jzph9.pl line 54, at EOF

    Execution of /tmp/tmp2e5jzph9.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660126782
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my($lower, $upper);\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpdw8lpwpe.pl line 53, at
    end of line

    syntax error at /tmp/tmpdw8lpwpe.pl line 53, at EOF

    Execution of /tmp/tmpdw8lpwpe.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    return '' unless %$dict;\n    my %lower = map {\
    \ lc $_ => 1 } keys %$dict;\n    foreach my $key (sort keys %$dict) {\n      \
    \  return 1 if ($lower{$key} and !exists $lower{$key}) or (!$lower{$key} and exists\
    \ $lower{$key});\n    }\n    return;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    \n    foreach my $key (keys\
    \ %$dict) {\n\tmy $value = $dict->{$key};\n\t\n\tif (ref($value) eq 'HASH') {\n\
    \t    $result = check_dict_case($value)\n\t\tif $result and check_dict_case($value);\n\
    \t} elsif ($value =~ /^[A-Z]/) {\n\t    $result = $result && 1;\n\t} else {\n\t\
    \    $result = '';\n\t}\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    \n    if(scalar(keys %$dict) == 0){\n        return\
    \ '';\n    }\n    \n    foreach my $key (sort keys %$dict){\n        return 1\
    \ if ($key !~ /^[a-z]/i && $key !~ /^[A-Z]/i);\n    }\n    \n    return '';\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    \n    # Only one parameter\n    unless (ref $dict)\
    \ {\n        return $dict;\n    }\n    # Multiple parameters \n    unless (ref\
    \ $dict eq \"HASH\") {\n        return undef;\n    }\n    \n    my $key;\n   \
    \ foreach $key (sort keys %$dict) {\n        return 1 if ($key !~ /^[0-9.]/) ||\
    \ ($key !~ /^[a-z]/i && $key !~ /^[A-Z]/i);\n    }\n    \n    return '';\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    foreach my $key (sort(keys %$dict)) {\n\treturn\
    \ 1 if ($key =~ /^[a-z]+$/i) or $key =~ /^[A-Z]+$/i;\n    }\n    return '';\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    if (scalar keys %$dict) {\n        return 0 if (scalar\
    \ keys %{ map lc, $dict}) == scalar keys %$dict;\n        return 1;\n    }\n \
    \   return '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    \n    # if the hash has keys but no values, return\
    \ ''\n    return '' unless keys %{$dict};\n    \n    # if the keys are all strings\
    \ in upper case, return 1\n    return 1 if (keys %{$dict} == map { uc } keys %{$dict});\n\
    \    \n    # if the keys are all strings in lower case, return 1\n    return 1\
    \ if (keys %{$dict} == map { lc } keys %{$dict});\n    \n    # otherwise return\
    \ ''\n    return '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660126782
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $is_case_correct = 0;\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp16v5t2ev.pl line 53, at
    end of line

    syntax error at /tmp/tmp16v5t2ev.pl line 53, at EOF

    Execution of /tmp/tmp16v5t2ev.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660126782
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    foreach my $key (keys(%$dict)) {\n        if (lc($key)\
    \ eq lc($key)) {\n            my ($value) = each($dict{$key});\n            $value\
    \ = [$$value] if ref($value) eq 'ARRAY';\n            return 1;\n        }\n \
    \   }\n    return '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Experimental each on scalar is now forbidden at /tmp/tmpzdakbive.pl line
    19.

    Type of arg 1 to each must be hash or array (not hash element) at /tmp/tmpzdakbive.pl
    line 19, near "})"

    BEGIN not safe after errors--compilation aborted at /tmp/tmpzdakbive.pl line 26.

    '
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = '';\n    for (keys %$dict) {\n       \
    \ if (ref($dict->{$_}) && $dict->{$_} ne '') {\n            $ret .= 1;\n     \
    \   }\n    }\n    return $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my @keys = keys(%$dict);\n    if (@keys == 0) {\n\
    \        return '';\n    }\n    for my $key (@keys) {\n        if ($key =~ /^[a-z]+$/i)\
    \ {\n            return 1;\n        }\n        if ($key =~ /^[A-Z]+$/i) {\n  \
    \          return 1;\n        }\n    }\n    return '';\n}\n</code>\n<|/ a tags=hash,perl\
    \ |>\n<| c |>\nAh yes, I just realized it too.\n<|/ c |>\n<| a tags=hash,perl\
    \ |>\nI love the perl module Data::Digester, so I wrote one that does this and\
    \ more:\n<code>\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'syntax error at /tmp/tmpd9fm6oc4.pl line 32, near "<|"

    "use" not allowed in expression at /tmp/tmpd9fm6oc4.pl line 36, at end of line

    Execution of /tmp/tmpd9fm6oc4.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    \n    my $case_string = '';\n    foreach my $key\
    \ (keys %$dict) {\n        my $value = $dict->{$key};\n        if (ref $value)\
    \ {\n            $case_string = check_dict_case($value);\n        }\n        else\
    \ {\n            if (lc($key) eq lc($key)) {\n                if ($case_string\
    \ ne '') {\n                    $case_string .= ', ';\n                }\n   \
    \             $case_string .= lc($key) . ' must be all in lowercase or all in\
    \ uppercase';\n            }\n        }\n    }\n    \n    return $case_string;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my(@keys) = keys(%$dict);\n    my $str = 0;\n  \
    \  for (@keys) {\n        $str = $str ? (lc($_) eq lc($dict->{$_})) : (lc($_)\
    \ eq $dict->{$_});\n    }\n    return $str ? '' : 1;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    if (not defined $dict) {\n\treturn '';\n    }\n\
    \    my @keys = sort keys %$dict;\n    my $is_upper = 0;\n    foreach my $key\
    \ (@keys) {\n\tif (lc($key) eq $key) {\n\t    $is_upper = 0;\n\t    last;\n\t\
    }\n\tif (lc($key) eq uc($key)) {\n\t    $is_upper = 1;\n\t    last;\n\t}\n   \
    \ }\n    return $is_upper ? 1 : 0;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = \"\";\n    foreach my $key (keys %$dict)\
    \ {\n        next if($dict->{$key} eq \"NULL\");\n        $result = (lc($key)\
    \ eq lc($dict->{$key})) ? 1 : 0;\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = \"\";\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp697nxl3h.pl line 53, at
    end of line

    syntax error at /tmp/tmp697nxl3h.pl line 53, at EOF

    Execution of /tmp/tmp697nxl3h.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660126782
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    return '' unless @$dict;\n    \n    my $key = '',\
    \ $value = \"\";\n    for my $key (sort keys %$dict) {\n        if ($key eq '')\
    \ {\n            $key = '' unless $key =~ /^[a-z]/i;\n            $key = '' unless\
    \ $key =~ /^[A-Z]/i;\n        } else {\n            $key = '' unless $key =~ /^[a-z]/i;\n\
    \            $key = '' unless $key =~ /^[A-Z]/i;\n        }\n    }\n    \n   \
    \ return $key eq '' ? 1 : '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Not an ARRAY reference at /tmp/tmp81tzscaw.pl line 17.

    '
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $case_ok = 1;\n    foreach my $key (keys %$dict)\
    \ {\n        if ($key eq $key) {\n            $case_ok = 0;\n            last;\n\
    \        }\n        if (lc $key eq lc $dict->{$key}) {\n            $case_ok =\
    \ 0;\n            last;\n        }\n        if (uc $key eq uc $dict->{$key}) {\n\
    \            $case_ok = 0;\n            last;\n        }\n    }\n    return $case_ok\
    \ ? 0 : 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\",\
    \ \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my($lowercase_keys) = 1;\n    my($uppercase_keys)\
    \ = 1;\n    my($key) = ();\n    while (my ($key, $value) = each %$dict) {\n  \
    \      my($val) = $value;\n        if (ref $val) {\n            $val->is_a(\"\
    HASH\") ? $val = $val->{CODE} : $val = sub {\n                $val->();\n    \
    \        };\n        }\n        $key = $key->{CODE} if ref $key;\n        if ($key\
    \ =~ /[A-Z]/) {\n            $uppercase_keys++;\n        } elsif ($key =~ /[a-z]/)\
    \ {\n            $lowercase_keys++;\n        } else {\n            $lowercase_keys\
    \ = 0;\n            $uppercase_keys = 0;\n        }\n    }\n    return '' if !$lowercase_keys\
    \ && !$uppercase_keys && !keys %$dict;\n    return $lowercase_keys ? '' : 1;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    if ( !exists($dict) || !exists($dict->{__DATA__})\
    \ )\n    {\n        return '';\n    }\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'exists argument is not a HASH or ARRAY element or a subroutine at /tmp/tmpsw2c398l.pl
    line 17.

    '
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = '';\n    foreach my $key (sort keys\
    \ %$dict) {\n        if (ref $key eq 'HASH') {\n            $result = (check_dict_case($key)\
    \ || $result);\n        } elsif (defined $key && $key =~ /^[a-z]$/i || $key =~\
    \ /^[A-Z]$/i) {\n            $result++;\n        }\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my(@keys);\n    my($val);\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpou7wt9h0.pl line 54, at
    end of line

    syntax error at /tmp/tmpou7wt9h0.pl line 54, at EOF

    Execution of /tmp/tmpou7wt9h0.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660126782
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my %string_keys = ();\n    \n    for (my $i = 0;\
    \ $i < @$dict; $i++) {\n        my $key = $dict->[$i];\n        $string_keys{$key}\
    \ = 1;\n    }\n    \n    if (scalar(@string_keys) > 0) {\n        return 1;\n\
    \    }\n    \n    for my $key (keys(%string_keys)) {\n        $key = $key . '';\n\
    \        if (lc($key) == lc($key)) {\n            return '';\n        }\n    }\n\
    \    \n    return '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Not an ARRAY reference at /tmp/tmpomb2qg4p.pl line 19.

    '
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my %hash;\n    foreach my $key (keys %$dict) {\n\
    \        $hash{$key} = $dict->{$key};\n    }\n    foreach my $key (keys %hash)\
    \ {\n        if ($hash{$key} =~ /^[a-z]*$/i) {\n            return 1;\n      \
    \  }\n    }\n    foreach my $key (keys %hash) {\n        if ($hash{$key} =~ /^[A-Z]*$/i)\
    \ {\n            return 1;\n        }\n    }\n    return \"\";\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660126782
- exit_code: 2
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $flag = '';\n    foreach my $key (keys(%$dict))\
    \ {\n        if(lc($key) eq lc($key)) {\n            $flag = '1';\n        }\n\
    \        elsif(uc($key) eq uc($key)) {\n            $flag = '1';\n        }\n\
    \        else {\n            $flag = '0';\n        }\n    }\n    return $flag;\n\
    }\n</code>\n<|/ a tags=perl |>\n<| c |>\nThe question was about a case-insensitive\
    \ hash key. That is what it looked like.\n<|/ c |>\n<| c |>\nThis fails for `'a'=>'A'`\
    \ and `'A'=>'a'`. You need a case-aware comparison function.\n<|/ c |>\n<| c |>\n\
    What do you mean it fails for `'a'=>'A'` and `'A'=>'a'`? The OP wanted it to return\
    \ an empty string if the case of `key` is incorrect.\n<|/ c |>\n<| c |>\nI did\
    \ not mean it fails because that's a valid input to the function. But your test\
    \ case: `check_dict_case({\"a\" => \"apple\", \"a\" => \"apple\"})` passes.\n\
    <|/ c |>\n<| c |>\nMy bad, you are correct. I meant that the function should return\
    \ an empty string, which is the result I was getting when I tested it.\n<|/ c\
    \ |>\n<| a dscore=0 |>\n<code>\nuse utf8;\nuse warnings;\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Backticks found where operator expected at /tmp/tmpwxrzl4hs.pl line 37,\
    \ near \"of `key`\"\n\t(Do you need to predeclare of?)\nsyntax error at /tmp/tmpwxrzl4hs.pl\
    \ line 32, near \"<|\"\n\"use\" not allowed in expression at /tmp/tmpwxrzl4hs.pl\
    \ line 47, at end of line\nBEGIN not safe after errors--compilation aborted at\
    \ /tmp/tmpwxrzl4hs.pl line 48.\n"
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    return '' unless %$dict;\n    my $ok = 1;\n    foreach\
    \ my $key (sort keys %$dict) {\n        my $v = $dict->{$key};\n        if (ref\
    \ $v or ref $v and ref $v->{class}) {\n            $ok = 0;\n            last;\n\
    \        }\n        elsif ($key !~ /[A-Z]/) {\n            $ok = 0;\n        \
    \    last;\n        }\n    }\n    return $ok ? 1 : '';\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    foreach my $key (keys %$dict) {\n        my $value\
    \ = $dict->{$key};\n        my $lower = uc($key) if lc($key) eq uc($key);\n  \
    \      my $upper = uc($key) if uc($key) eq uc($key);\n        if ($lower && $upper\
    \ && $key ne $lower) {\n            return '';\n        }\n        elsif (!$lower\
    \ && !$upper && $key ne $key) {\n            return '';\n        }\n    }\n  \
    \  return 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    if ( keys %$dict == 0 ) {\n        return '';\n\
    \    }\n    my($upper_case) = 0;\n    my($lower_case) = 0;\n    foreach my $key\
    \ ( keys %$dict ) {\n        my $value = $dict->{$key};\n        my $value_lower\
    \ = lc($value);\n        my $value_upper = uc($value);\n        if ( $value_lower\
    \ ne $value_upper ) {\n            if ( $value_lower =~ /^[A-Z]+$/ ) {\n     \
    \           $upper_case++;\n            } else {\n                $lower_case++;\n\
    \            }\n        }\n    }\n    if ( $upper_case == keys %$dict && $lower_case\
    \ == keys %$dict ) {\n        return 1;\n    }\n    return '';\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my($result) = '';\n    foreach my $key (keys ($dict))\
    \ {\n        my $lowerkey = $key;\n        $lowerkey =~ s/^./lc/;\n        $lowerkey\
    \ =~ s/\\W//g;\n        if ($lowerkey eq 'state') {\n            my $lowerval\
    \ = $dict{$key};\n            $lowerval =~ s/^./lc/;\n            $lowerval =~\
    \ s/\\W//g;\n            $result = 1 if ($lowerval eq $lowerkey);\n        } else\
    \ {\n            $result = 1 if ($dict{$key} eq $lowerkey);\n        }\n    }\n\
    \    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Experimental keys on scalar is now forbidden at /tmp/tmph0yku7nm.pl line
    18.

    Type of arg 1 to keys must be hash or array (not private variable) at /tmp/tmph0yku7nm.pl
    line 18, near "$dict)"

    BEGIN not safe after errors--compilation aborted at /tmp/tmph0yku7nm.pl line 33.

    '
  stdout: ''
  timestamp: 1660126782
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    return '' if (!keys %$dict);\n    return 1 if (keys\
    \ %$dict == keys map { uc $_ } keys %$dict);\n    return '';\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Experimental keys on scalar is now forbidden at /tmp/tmpnfaczwgi.pl line
    18.

    Type of arg 1 to keys must be hash or array (not map iterator) at /tmp/tmpnfaczwgi.pl
    line 18, near "$dict)"

    BEGIN not safe after errors--compilation aborted at /tmp/tmpnfaczwgi.pl line 21.

    '
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $return = '';\n    foreach my $key (keys %$dict)\
    \ {\n        if (defined($key) && ($key =~ /^[a-z]+$/)) {\n            $return++;\n\
    \        } elsif (!defined($key)) {\n            $return++;\n        } elsif ($key\
    \ =~ /^[A-Z]+$/) {\n            $return++;\n        } elsif (defined($key)) {\n\
    \            $return++;\n        }\n    }\n    return $return;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    return 1 if $dict->size > 0;\n    my $result = 1;\n\
    \    my $key;\n    foreach $key (sort keys %$dict) {\n        my $value = $dict->{$key};\n\
    \        return 1 if (not ref $value);\n        my $is_string = defined $value\
    \ && (ref $value eq 'HASH') or ref $value eq 'ARRAY';\n        return 1 if ($is_string);\n\
    \        my $is_lower = lc($key) eq lc($value);\n        return 1 if (!$is_lower);\n\
    \    }\n    return '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t call method "size" on unblessed reference at /tmp/tmpfejcjm3m.pl
    line 17.

    '
  stdout: ''
  timestamp: 1660126782
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $str = $dict->{\"key\"};\n    if (exists $dict->{\"\
    key\"} and exists $dict->{\"key\"} =~ /^string$/) {\n        my $lower = lc($str);\n\
    \        my $upper = uc($str);\n        if ($lower eq $upper and $lower eq '0')\
    \ {\n            return '';\n        } elsif ($lower ne $upper and $lower eq '1')\
    \ {\n            return '';\n        }\n        return 1;\n    }\n    return '';\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'exists argument is not a HASH or ARRAY element or a subroutine at /tmp/tmpjzh5lqtb.pl
    line 18.

    '
  stdout: ''
  timestamp: 1660126782
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    $dict ||= {};\n    foreach my $key (sort keys %$dict)\
    \ {\n        if (not (is_string($key) or is_string($dict[$key]))) {\n        \
    \    return '';\n        }\n    }\n    return 1;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_string called at /tmp/tmpcztt884a.pl line
    19.

    '
  stdout: ''
  timestamp: 1660126782
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my(@keys) = keys %$dict;\n    my($result) = '';\n\
    \    \n    if (@keys == 0) {\n        return $result;\n    }\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpsups7gcf.pl line 58, at
    end of line

    syntax error at /tmp/tmpsups7gcf.pl line 58, at EOF

    Execution of /tmp/tmpsups7gcf.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660126782
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my @keys;\n    foreach my $key (keys(%$dict)) {\n\
    \        if (defined($dict->{$key}) && \n            !$dict->{$key} =~ /^\\d/)\
    \ {\n            push(@keys, $key);\n        }\n    }\n    if (scalar(@keys) >=\
    \ 1) {\n        foreach my $key (@keys) {\n            if ($dict->{$key} =~ /^[a-z]/i)\
    \ {\n                return 1;\n            } elsif ($dict->{$key} =~ /^[A-Z]/i)\
    \ {\n                return 1;\n            }\n        }\n        return '';\n\
    \    } else {\n        return '';\n    }\n}\n</code>\n<|/ a tags=perl,hash |>\n\
    <| a tags=perl,hash |>\nThis is my solution to this problem, I used the 'keys'\
    \ function to get only the keys of the hash I needed.  \n<code>\nuse strict;\n\
    use warnings;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\",\
    \ \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'syntax error at /tmp/tmpa0qznl18.pl line 38, near "<|"

    Search pattern not terminated at /tmp/tmpa0qznl18.pl line 38.

    '
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    foreach my $key (keys %$dict) {\n        if (!defined\
    \ $dict->{$key} || $dict->{$key} !~ /^[A-Z]{1}$/ &&\n            $dict->{$key}\
    \ !~ /^[a-z]{1}$/) {\n            return '';\n        }\n    }\n    return 1;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $case_flag = shift() ? \"L\" : \"U\";\n    for\
    \ my $key (keys(%$dict)) {\n\tnext if $key eq \"ID\"\n\tor !defined $dict->{$key};\n\
    \tif ($dict->{$key} =~ /^[A-Z]/ && $case_flag eq \"U\") {\n\t    return 1;\n\t\
    }\n\telsif ($dict->{$key} =~ /[A-Z]/ && $case_flag eq \"L\") {\n\t    return 1;\n\
    \t}\n\telse {\n\t    return '';\n\t}\n    }\n    return '';\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result;\n    foreach my $key (sort keys %$dict)\
    \ {\n        if (exists($dict->{$key}) && lc($key) eq lc($dict->{$key})) {\n \
    \           $result = \"1\";\n            last;\n        } elsif (exists($dict->{$key})\
    \ && uc($key) eq uc($dict->{$key})) {\n            $result = \"1\";\n        \
    \    last;\n        } else {\n            $result = '';\n        }\n    }\n  \
    \  return $result;\n}\n</cell>\n<cell>\n%matplotlib inline\nimport matplotlib.pyplot\
    \ as plt\nimport matplotlib.colors as colors\nimport numpy.random\nimport numpy\
    \ as np\n</cell>\n<cell>\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpct3l4zfi.pl line 33,\
    \ near \"%matplotlib inline\"\n\t(Missing operator before inline?)\nsyntax error\
    \ at /tmp/tmpct3l4zfi.pl line 34, near \"%matplotlib inline\nimport \"\nSearch\
    \ pattern not terminated at /tmp/tmpct3l4zfi.pl line 38.\n"
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    foreach my $key (sort keys %$dict) {\n        if($dict->{$key}\
    \ eq $dict->{$key}) {\n            return '';\n        }\n    }\n    return 1;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my @keys = keys %$dict;\n    my $lowercase_keys\
    \ = 0;\n    my $uppercase_keys = 0;\n    foreach my $key (@keys) {\n\tmy $value\
    \ = '';\n\tif (exists $dict->{$key}) {\n\t    $value = $dict->{$key};\n\t}\n\t\
    if ($key =~ /^[a-z]+$/i) {\n\t    $lowercase_keys = 1;\n\t} elsif ($key =~ /^[A-Z]+$/i)\
    \ {\n\t    $uppercase_keys = 1;\n\t}\n\tif ($value !~ /^(?:[A-Z]+|[a-z]+)/) {\n\
    \t    $lowercase_keys = 1;\n\t}\n\tif ($value !~ /^[A-Z]+$/) {\n\t    $uppercase_keys\
    \ = 1;\n\t}\n    }\n    if ($lowercase_keys == 1 && $uppercase_keys == 1) {\n\t\
    return 1;\n    }\n    return '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    if(!%$dict) {\n        return '';\n    }\n    my\
    \ @keys = (sort keys %$dict)[0..4];\n    if(@keys == 0) {\n        return 1;\n\
    \    }\n    my $len = @keys;\n    for(my $i = 0; $i < $len; $i++) {\n        if(!lc($keys->[$i])\
    \ eq lc($keys->[$i])) {\n            return '';\n        }\n    }\n    return\
    \ 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    \n    # All keys must be in\
    \ lowercase (unless all keys are in uppercase)\n    for my $key (keys %$dict)\
    \ {\n        my $val = lc($dict->{$key});\n        $result =~ m/$key/ || $result\
    \ =~ m/$key/;\n    }\n    return $result ? 1 : 0;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660126782
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my($checkcase);\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp6eckq5so.pl line 53, at
    end of line

    syntax error at /tmp/tmp6eckq5so.pl line 53, at EOF

    Execution of /tmp/tmp6eckq5so.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    if (not defined $dict) {\n\
    \        return $result;\n    }\n    foreach my $key (keys %$dict) {\n       \
    \ if (defined $dict->{$key} and $dict->{$key} eq ref($dict->{$key})) {\n     \
    \       if ($dict->{$key} eq 'HASH') {\n                $result = check_dict_case($dict->{$key});\n\
    \                if ($result eq '') {\n                    return $result;\n \
    \               }\n            } elsif ($dict->{$key} eq 'ARRAY') {\n        \
    \        $result = check_dict_case($dict->{$key}[0]);\n                if ($result\
    \ eq '') {\n                    return $result;\n                }\n         \
    \   }\n        } else {\n            $result = check_dict_case($dict->{$key});\n\
    \            if ($result eq '') {\n                return $result;\n         \
    \   }\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660126782
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    \n    # handle empty hash\n    return '' if (scalar\
    \ keys %$dict == 0);\n    \n    foreach my $key (sort keys %$dict) {\n       \
    \ next unless is_string($key);\n        my $value = $dict->{$key};\n        $dict->{$key}\
    \ = $value if ($value =~ /^[a-z]$/i || $value =~ /^[A-Z]$/i);\n    }\n    \n \
    \   return $dict->{NONE} if scalar keys %$dict == 0;\n    \n    return 1;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_string called at /tmp/tmpu8epc1up.pl line
    22.

    '
  stdout: ''
  timestamp: 1660126782
- exit_code: 0
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my($lowercase) = 0;\n    my($uppercase) = 0;\n \
    \   \n    foreach my $key (sort(keys(%$dict))){\n        next if ( !defined($dict->{$key})\
    \ || !$dict->{$key});\n        $lowercase = 1 if $key eq lc($key);\n        $uppercase\
    \ = 1 if $key eq uc($key);\n    }\n    \n    if ($lowercase && !$uppercase){\n\
    \        return 1;\n    }\n    elsif ($uppercase && !$lowercase){\n        return\
    \ 1;\n    }\n    elsif ($uppercase && $lowercase){\n        return '';\n    }\n\
    \    \n    return '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my($result) = '';\n    foreach my $key (keys(%$dict))\
    \ {\n        (my $val = ${$dict}{$key}) =~ s/(^|\\.)//;\n        $result .= $key\
    \ if $val !~ /([A-Z]+|[0-9]+)/;\n    }\n    return $result ? 1 : '';\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660126782
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my @keys = keys %$dict;\n    \n    my $value = $dict->{$_}\
    \ for; # could also use each()\n    \n    # this handles both upper and lower\
    \ case\n    return '' if !@keys;\n    \n    for my $key (@keys) {\n        if($key\
    \ eq 'Name' || $key eq 'Age' || $key eq 'City')\n            return 1;\n     \
    \   if($key =~ /([A-Z])/) {\n            # this handles upper and lower case\n\
    \            return 1 if $value =~ m/$key/;\n        } else {\n            # this\
    \ handles upper and lower case\n            return 1 if $value =~ m/$key/i; \n\
    \        }\n    }\n    return 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "syntax error at /tmp/tmpx8gh09io.pl line 19, near \"for;\"\nsyntax error\
    \ at /tmp/tmpx8gh09io.pl line 26, near \")\n            return\"\nBEGIN not safe\
    \ after errors--compilation aborted at /tmp/tmpx8gh09io.pl line 37.\n"
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    return '' if !keys %$dict;\n    my $lower_case_keys\
    \ = keys %{$dict};\n    my $upper_case_keys = keys %{$dict};\n    foreach my $key\
    \ (sort keys %$dict) {\n        my $value = $dict->{$key};\n        if (lc $key\
    \ ne lc $value) {\n            $lower_case_keys--;\n            $upper_case_keys--;\n\
    \        }\n    }\n    \n    my $keys_in_lower_case = $lower_case_keys > 0;\n\
    \    my $keys_in_upper_case = $upper_case_keys > 0;\n    \n    return '' if !$keys_in_lower_case\
    \ && !$keys_in_upper_case;\n    \n    if ($keys_in_lower_case && $keys_in_upper_case)\
    \ {\n        return '';\n    }\n    elsif ($keys_in_lower_case) {\n        return\
    \ '1';\n    }\n    elsif ($keys_in_upper_case) {\n        return '1';\n    }\n\
    \    else {\n        return '0';\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my @keys = keys %$dict;\n    my $str = '';\n   \
    \ \n    for (@keys) {\n\treturn 1 if ($_ eq 'Name' || $_ eq 'State' || $_ eq 'Zip'\
    \ || \n\t\t\t $_ eq 'Age' || $_ eq 'City' || $_ eq 'Name');\n\t$str = $str &&\
    \ $_ eq 'A' || $_ eq 'B';\n    }\n    return $str;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $case;\n    foreach my $key (keys(%$dict)) {\n\
    \        if (not defined($case)) {\n            $case = lc($key) eq uc($key) ?\
    \ 1 : '';\n        }\n        else {\n            $case = $case ? $case : lc($key)\
    \ eq uc($key) ? 1 : '';\n        }\n    }\n    return $case;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    foreach my $key (sort keys %$dict) {\n        if\
    \ (not is_string($key)) {\n            return '';\n        }\n        if (is_string($key)\
    \ and lc($key) eq lc($key)) {\n            return 1;\n        }\n    }\n    return\
    \ '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_string called at /tmp/tmp3z3vjcbr.pl line
    18.

    '
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    foreach my $key (keys %$dict) {\n        if(lc($dict->{$key})\
    \ ) {\n            return 1;\n        }\n    }\n    return '';\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    return '' unless keys %$dict;\n    my $found = 0;\n\
    \    foreach my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/i) {\n   \
    \         $found = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/i) {\n    \
    \        $found = 1;\n        }\n    }\n    return $found ? 1 : '';\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my %case = map { (lc($_),$_) } keys %$dict;\n  \
    \  foreach my $key (keys %$dict) {\n        if (exists $case{$key}) {\n      \
    \      return \"1\" if lc($dict{$key}) eq $case{$key};\n        }\n    }\n   \
    \ return '' if keys %$dict == 0;\n    return '';\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    \n    if ( !defined($dict) || !is_hash($dict) )\
    \ {\n        return '';\n    }\n    \n    my @keys = keys %{$dict};\n    my $has_case\
    \ = grep { lc($_) eq lc($_) } @keys;\n    \n    return $has_case ? '1' : '' unless\
    \ @keys;\n    \n    $has_case = '1';\n    return '1';\n}\n</code>\n<|/ a tags=hash,perl\
    \ |>\n<| c |>\nNote that you can make your solution more efficient by avoiding\
    \ the need to iterate through the keys.\n<|/ c |>\n<| c |>\nYes, you're right.\
    \ But I think that it's worth to implement both versions since the author asked\
    \ for both versions. And it's fun to play with Perl :)\n<|/ c |>\n<| c |>\nThe\
    \ question asks for two different things -- it asks how to check whether all keys\
    \ are strings and it asks how to check whether all keys are upper or all keys\
    \ are lower. This solution is for only the first problem.\n<|/ c |>\n<| c |>\n\
    Ah okay. Yes, I agree, it's good to have two different solutions for two different\
    \ problems. It's a bit more fun to play with Perl than to read other people's\
    \ solutions ;)\n<|/ c |>\n<| a |>\n<code>\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'syntax error at /tmp/tmpw4__014m.pl line 31, near "<|"

    Search pattern not terminated at /tmp/tmpw4__014m.pl line 37.

    '
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    return '' unless (defined $dict);\n    my($lower,\
    \ $upper);\n    foreach my $key (sort keys %$dict) {\n        $lower = lc($key);\n\
    \        $upper = uc($key);\n        last if ($lower eq $upper || $lower eq \"\
    \\0\");\n    }\n    if ($lower eq $upper) {\n        return 1;\n    }\n    return\
    \ '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my($case) = '';\n    foreach my $key (keys(%$dict))\
    \ {\n        my $value = $dict->{$key};\n        my(@vals) = split(//, $value);\n\
    \        if ($case eq 'lower' && @vals) {\n            @vals = map {lc($_)} @vals;\n\
    \        }\n        elsif ($case eq 'upper' && @vals) {\n            @vals = map\
    \ {uc($_)} @vals;\n        }\n        if (!@vals) {\n            $case = '';\n\
    \        }\n        elsif ($case ne 'lower' && !$case eq 'upper') {\n        \
    \    $case = '';\n        }\n    }\n    $case;\n}\n</code>\n<|/ a dscore=1 tags=perl,hash,case-sensitive,case-insensitive\
    \ |>\n<| a |>\n<code>\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'syntax error at /tmp/tmp5lk7gy5_.pl line 37, near "<|"

    Search pattern not terminated at /tmp/tmp5lk7gy5_.pl line 37.

    '
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my %hashkeys;\n    my $result;\n    \n    # Convert\
    \ all keys to lower case to simplify logic.\n    # Keys that are already all lower\
    \ case will remain untouched.\n    # For example, the following hash will remain\
    \ unmodified:\n    # {NAME => \"John\", AGE => \"36\", CITY => \"Houston\"}\n\
    \    %hashkeys = (%$dict);\n    \n    foreach my $key (keys %hashkeys) {\n   \
    \     if ($key eq 'state' or $key eq 'zip') {\n            $result = 1;\n    \
    \    }\n        else {\n            if ($key =~ /^[A-Z]+$/) {\n              \
    \  $result = 1;\n            }\n            else {\n                $result =\
    \ '';\n            }\n        }\n    }\n    \n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    foreach my $key (sort(keys(%$dict))) {\n       \
    \ my $lower = uc($key);\n        my $upper = uc($key);\n        next if $lower\
    \ eq $upper;\n        return '';\n    }\n    return 1;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    # Iterate through hash keys to find string keys\n\
    \    my $is_lower = '';\n    my $is_upper = '';\n    for (keys %$dict) {\n   \
    \     my $key = lc ($_);\n        $is_lower .= $key if $key =~ /[a-z]/i;\n   \
    \     $is_upper .= $key if $key =~ /[A-Z]/i;\n    }\n    return '' if (!$is_lower\
    \ && !$is_upper);\n    return $is_lower ? '1' : '0';\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    foreach my $key (keys %$dict)\
    \ {\n        $result = $result && $key =~ /^[A-Z]+$/;\n        $result = $result\
    \ && ($key !~ /^[A-Z]+$/);\n    }\n    return $result ? 1 : 0;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $str = $dict->{keys}->[0];\n    if ( !ref $str\
    \ ) {\n        # all keys are in lower case\n        return $str =~ tr/a-z/A-Z/;\n\
    \    }\n    elsif ( $str =~ tr/A-Z/a-z/i ) {\n        # all keys are in upper\
    \ case\n        return $str =~ tr/A-Z/a-z/i;\n    }\n    else {\n        return\
    \ \"\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Bareword found where operator expected at /tmp/tmptv2dk8va.pl line 22,
    near "tr/A-Z/a-z/i"

    syntax error at /tmp/tmptv2dk8va.pl line 22, near "tr/A-Z/a-z/i "

    syntax error at /tmp/tmptv2dk8va.pl line 26, near "else"

    Execution of /tmp/tmptv2dk8va.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my (%str_lower,%str_upper);\n    foreach my $key\
    \ (keys %$dict) {\n        $str_lower{$key} = uc($dict->{$key});\n        $str_upper{$key}\
    \ = lc ($dict->{$key});\n    }\n    my $ret = 1 if (keys(%str_lower) == keys(%str_upper));\n\
    \    $ret = '';\n    return $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    \n    my $flag = 0;\n    for (keys %$dict) {\n \
    \       return '' if $dict->{$_} !~ /string/i; \n        $flag = 1; \n    }\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp0zn6bwce.pl line 58, at
    end of line

    syntax error at /tmp/tmp0zn6bwce.pl line 58, at EOF

    Execution of /tmp/tmp0zn6bwce.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660126782
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    if (! defined $dict) {\n        return '';\n   \
    \ }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpdpc5t3_a.pl line 55, at
    end of line

    syntax error at /tmp/tmpdpc5t3_a.pl line 55, at EOF

    Execution of /tmp/tmpdpc5t3_a.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    foreach my $key ( keys %$dict ) {\n        my $value\
    \ = $dict->{$key};\n        if( $key !~ / ^([a-z]|[A-Z])$/ ) { # no change case\n\
    \            return 0;\n        }\n        if( $value !~ / ^([a-z]|[A-Z])$/ )\
    \ { # value is string but not in lower or upper case\n            return '';\n\
    \        }\n    }\n    return 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = '';\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpzwovuqpo.pl line 53, at
    end of line

    syntax error at /tmp/tmpzwovuqpo.pl line 53, at EOF

    Execution of /tmp/tmpzwovuqpo.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    foreach my $key (keys %$dict)\
    \ {\n        my $value = $dict->{$key};\n        $result .= 1 if ($value =~ /^[A-Z]/i\
    \ || $value =~ /^[a-z]/i);\n    }\n    return $result ? $dict->{'STATE'} : '';\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my($firstkey) = keys %$dict;\n    my $result;\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp8b2u1ere.pl line 54, at
    end of line

    syntax error at /tmp/tmp8b2u1ere.pl line 54, at EOF

    Execution of /tmp/tmp8b2u1ere.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    return '' if (keys %$dict) == 0;\n    return ''\
    \ if (keys %$dict) == 1;\n    my @keys = keys %$dict;\n    my $first_key = shift\
    \ @keys;\n    my $first_key_lower = lc($first_key);\n    my $first_key_upper =\
    \ uc($first_key);\n    return '' if ($first_key_lower eq $first_key_upper);\n\
    \    my $result = 1;\n    foreach my $key (@keys) {\n        $result = 0 unless\
    \ (lc($dict->{$key}) eq uc($dict->{$key}));\n    }\n    return $result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $case_val = \"\";\n    foreach my $key (keys\
    \ %$dict) {\n        if(defined($dict->{$key}) && $dict->{$key} =~ /^(string|number|boolean|hash)$/i)\
    \ {\n            $case_val .= \"1\";\n        } else {\n            $case_val\
    \ .= \"\";\n        }\n    }\n    return $case_val;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    return '' unless (keys %$dict);\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpr5nv4ike.pl line 53, at
    end of line

    syntax error at /tmp/tmpr5nv4ike.pl line 53, at EOF

    Execution of /tmp/tmpr5nv4ike.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my($ret);\n    foreach my $key (keys %$dict) {\n\
    \        my $value = $dict->{$key};\n        if($value eq $key || $value eq $key\
    \ =~ /^[A-Z]+$/) {\n            $ret = 1;\n        } else {\n            $ret\
    \ = '';\n        }\n    }\n    return $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    foreach my $key (keys %$dict)\
    \ {\n        my $value = $dict->{$key};\n        if( $value !~ /^[a-zA-Z]+$/ )\
    \ {\n            $result = '';\n        }\n    }\n    return $result;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nNice! I like this. I did a version of this before I saw yours,\
    \ but yours is much simpler and more elegant.\n<|/ c |>\n<| a |>\nJust a slight\
    \ tweak of the same answer to return 1 if the hash has keys that are in lower\
    \ case and 0 if there are not.\n<code>\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'syntax error at /tmp/tmpn260cicm.pl line 27, near "<|"

    "use" not allowed in expression at /tmp/tmpn260cicm.pl line 31, at end of line

    Execution of /tmp/tmpn260cicm.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $flag;\n    for (keys %$dict) {\n        $flag++;\n\
    \        my $key = $dict->{$_};\n        if ($key =~ /^[A-Z]+$/) {\n         \
    \   return 1;\n        }\n        elsif ($key =~ /^[a-z]+$/) {\n            return\
    \ \"\";\n        }\n        else {\n            return \"unrecognised dictionary\
    \ key '$key'\";\n        }\n    }\n    return $flag;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    foreach my $key (sort keys %$dict) {\n        return\
    \ 1 if ($key !~ /^[a-z0-9A-Z]$/ && $key !~ /^[A-Z][a-z0-9A-Z]$/);\n    }\n   \
    \ return '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $case = lc scalar(keys(%$dict));\n    return\
    \ 1 if ($case eq \"all\" || $case eq \"lower\" || $case eq \"upper\");\n    return\
    \ '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpqnstpha5.pl line 53, at
    end of line

    syntax error at /tmp/tmpqnstpha5.pl line 53, at EOF

    Execution of /tmp/tmpqnstpha5.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660126782
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $case_ok = 1;\n    for my $key (sort keys %$dict)\
    \ {\n        if (not is_string($key) or not is_string($dict->{$key})) {\n    \
    \        $case_ok = \"\";\n        }\n    }\n    return $case_ok;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_string called at /tmp/tmpln2qprrd.pl line
    19.

    '
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $lower = 1;\n    my $upper = 1;\n    foreach\
    \ my $key (sort keys %$dict) {\n        if ($lower && lc $key ne $key) {\n   \
    \         $lower = 0;\n        } elsif ($upper && uc $key ne $key) {\n       \
    \     $upper = 0;\n        }\n    }\n    if ($lower && $upper) {\n        return\
    \ '';\n    } elsif ($lower) {\n        return 1;\n    } elsif ($upper) {\n   \
    \     return '';\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my @keys = keys %$dict;\n    my $result = '';\n\
    \    foreach my $key (@keys) {\n        my $upper = uc($key);\n        my $lower\
    \ = lc($key);\n        if ($key eq $lower) {\n            $result = 1;\n     \
    \   }\n        elsif ($key eq $upper) {\n            $result = '';\n        }\n\
    \        else {\n            $result = '';\n        }\n        return $result;\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $key;\n    my $case_ok = 1;\n    # Check for\
    \ empty hash\n    if (%$dict) {\n        # Check for keys not beginning with lower\
    \ or upper case\n        for (sort keys %$dict) {\n            $key = $_;\n  \
    \          if (lc($key) eq lc($key)) {\n                # Key is lower case\n\
    \                $case_ok = 0;\n            }\n            elsif (upc($key) eq\
    \ upc($key)) {\n                # Key is upper case\n                $case_ok\
    \ = 0;\n            }\n            else {\n                # Key is neither lower\
    \ nor upper case\n                $case_ok = 0;\n            }\n        }\n  \
    \  }\n    return $case_ok;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    return '' unless keys %$dict;\n    my $cased = $dict;\n\
    \    for my $key (sort keys %$cased) {\n\tmy $val = lc($cased->{$key});\n\treturn\
    \ '' unless $val eq $val and $val =~ /^[a-z_]+$/i;\n    }\n    return 1;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $case = 1;\n    foreach my $key (sort keys %$dict)\
    \ {\n        my $value = $dict->{$key};\n        if (defined $value && $value\
    \ eq '')\n        {\n            return 1;\n        }\n        $case = 1 if !defined\
    \ $value || $value eq '_';\n        $case = 0 if $value =~ /^[A-Z_]/;\n      \
    \  $case = 0 if $value =~ /^[a-z]/;\n    }\n    return $case;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    \n    if ( !%$dict || scalar(keys(%$dict)) <= 1\
    \ ) {\n        return '';\n    } \n    \n    if ( scalar keys %$dict == scalar\
    \ keys( lc(%$dict) ) ) {\n        return 1;\n    } \n    else {\n        return\
    \ '';\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Experimental keys on scalar is now forbidden at /tmp/tmp1mf3kvgy.pl line
    22.

    Type of arg 1 to keys must be hash or array (not lc) at /tmp/tmp1mf3kvgy.pl line
    22, near ") ) "

    BEGIN not safe after errors--compilation aborted at /tmp/tmp1mf3kvgy.pl line 29.

    '
  stdout: ''
  timestamp: 1660126782
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    return '' unless (defined $dict);\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpymj5cj90.pl line 53, at
    end of line

    syntax error at /tmp/tmpymj5cj90.pl line 53, at EOF

    Execution of /tmp/tmpymj5cj90.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660126782
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $case_ok = 1;\n    foreach my $key (keys(%$dict))\
    \ {\n        my $key_lowercase = $key;\n        $key_lowercase =~ s/^[a-z]//;\n\
    \        my $key_uppercase = $key;\n        $key_uppercase =~ s/^[A-Z]//;\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpc5kbqmjl.pl line 58, at
    end of line

    syntax error at /tmp/tmpc5kbqmjl.pl line 58, at EOF

    Execution of /tmp/tmpc5kbqmjl.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660126782
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    return '' if (empty($dict));\n    my @keys = keys\
    \ %$dict;\n    foreach my $key (@keys) {\n        if ($key =~ /^[[:upper:]]/)\
    \ {\n            return '' if ($key =~ /^[[:lower:]]/);\n        } elsif ($key\
    \ =~ /^[[:lower:]]/) {\n            return 1 if ($key =~ /^[[:upper:]]/);\n  \
    \      }\n    }\n    return 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::empty called at /tmp/tmpljrulih8.pl line 17.

    '
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    if (scalar keys %$dict == 0) { return ''; }\n  \
    \  my @keys = sort keys %$dict;\n    my $is_upper_case = 1;\n    my $is_lower_case\
    \ = 1;\n    for (my $i = 0; $i < scalar @keys; $i++) {\n        my $key = $keys[$i];\n\
    \        if ($key =~ /^[a-z]/) {\n            $is_lower_case = 0;\n        }\n\
    \        elsif ($key =~ /^[A-Z]/) {\n            $is_upper_case = 0;\n       \
    \ }\n        else {\n            return '';\n        }\n    }\n    return $is_upper_case\
    \ ? 1 : '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660126782
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my($ret) = '';\n    my($i, $key, $value);\n    my($len,\
    \ @keys, @values);\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmptnszpiqj.pl line 55, at
    end of line

    syntax error at /tmp/tmptnszpiqj.pl line 55, at EOF

    Execution of /tmp/tmptnszpiqj.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    \n    my @keys = keys %$dict;\n    my $key;\n  \
    \  my $str;\n    \n    if (@keys == 0) { return ''; }\n    foreach $key (@keys)\
    \ {\n        $str =~ /\\b$key\\b/i;\n        if ($str =~ /[a-z]/i || $str =~ /[A-Z]/i)\
    \ {\n            return 1;\n        }\n    }\n    \n    return '';\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    foreach my $key (sort keys\
    \ %$dict) {\n        my $value = $dict->{$key};\n        if($key =~ /^[a-z]+$/i)\
    \ { \n            if ($value !~ /^[a-z]+$/i) {\n                $result = '';\n\
    \            }\n        }\n        elsif ($key =~ /^[A-Z]+$/i) {\n           \
    \ if ($value !~ /^[A-Z]+$/i) {\n                $result = '';\n            }\n\
    \        }\n        else {\n            $result = '';\n        }\n    }\n    return\
    \ $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\",\
    \ \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660126782
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = '';\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpzwovuqpo.pl line 53, at
    end of line

    syntax error at /tmp/tmpzwovuqpo.pl line 53, at EOF

    Execution of /tmp/tmpzwovuqpo.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    foreach my $key (sort keys\
    \ %$dict) {\n        if (lc($key) eq lc($dict->{$key})) {\n        } else {\n\
    \            $result = '';\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = '';\n    foreach my $key (sort keys %$dict)\
    \ {\n        my $val = $dict->{$key};\n        if ($key eq '' || $key eq \"NULL\"\
    ) {\n            return $key;\n        }\n        if ($val eq '') {\n        \
    \    return $key;\n        }\n        if ($val eq 'NULL') {\n            return\
    \ $key;\n        }\n        if ($key eq lc($key)) {\n            return $val;\n\
    \        }\n        $ret .= $key . \"/\";\n    }\n    return $ret;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    $dict = shift if @_ == 1;\n    my @keys = keys %$dict;\n\
    \    return '' if (@keys == 0) or (@keys == 1 and not lc($keys->[0]) eq uc($keys->[0]));\n\
    \    my $is_same = lc($keys->[0]) eq uc($keys->[0]);\n    foreach my $key (@keys)\
    \ {\n        $is_same ||= lc($key) eq uc($key);\n    }\n    return $is_same;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret = join '', map { exists $dict->{$_} ? (lc($dict->{$_})\
    \ == uc($dict->{$_}) ? 1 : '') : ''; } keys %$dict;\n    return $ret ? 1 : 0;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    foreach my $key (sort keys %$dict) {\n        my\
    \ $value = $dict->{$key};\n        if (ref($value) eq 'HASH') {\n            if\
    \ (check_dict_case($value)) {\n                return 1;\n            }\n    \
    \    }\n        elsif (ref($value) eq 'ARRAY') {\n            return check_dict_case(@$value)\
    \ if (@$value && check_dict_case($value));\n        }\n        if (! $value ||\
    \ $value =~ /^([A-Z]+)|([a-z]+)$/) {\n            return 1;\n        }\n    }\n\
    \    return '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my ($key, @keys) = keys(%$dict);\n    foreach $key\
    \ (@keys) {\n        my $v = $dict->{$key};\n        my $v_lower = lc($v);\n \
    \       my $v_upper = uc($v);\n        if ($v_lower eq $v_upper) {\n         \
    \   return 1;\n        }\n        elsif ($v_lower ne $v_upper) {\n           \
    \ return '';\n        }\n    }\n    return 0;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $keys = keys %{$dict};\n    \n    unless ($keys)\
    \ {\n        return '';\n    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpi94yb873.pl line 57, at
    end of line

    syntax error at /tmp/tmpi94yb873.pl line 57, at EOF

    Execution of /tmp/tmpi94yb873.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $keylist = keys %$dict;\n    my $flag;\n    $flag\
    \ = 0 unless (@$keylist);\n    my $key_len = 0;\n    foreach my $key (@$keylist)\
    \ {\n        $key_len += length($key) if ($key =~ /^[0-9]/);\n    }\n    if ($key_len)\
    \ {\n        if ($key_len eq @$keylist) {\n            my $i;\n            for\
    \ $i (0 .. $#keylist) {\n                my $l = length($keylist[$i]);\n     \
    \           if ($l == 1) {\n                    $flag += 0 if $keylist[$i] =~\
    \ /^[a-z]/;\n                    $flag += 0 if $keylist[$i] =~ /^[A-Z]/;\n   \
    \             } else {\n                    $flag += 0;\n                }\n \
    \           }\n        } else {\n            $flag = 0;\n        }\n    } else\
    \ {\n        $flag = 0;\n    }\n    return $flag;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my($result);\n    foreach my $key (sort(keys %$dict))\
    \ {\n        if($key =~ /^[a-z]$/i) {\n            $result = 1;\n            last;\n\
    \        }\n        else {\n            $result = '';\n            last;\n   \
    \     }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    \n    # Check for empty hash\n    return '' unless\
    \ %$dict;\n    \n    my($key) = \"\";\n    \n    # Check for all keys in lower-case.\n\
    \    foreach $key (sort keys %$dict) {\n        return 1 if ($key =~ /^[a-z]+$/i);\n\
    \    }\n    \n    # Check for all keys in upper-case.\n    foreach $key (sort\
    \ keys %$dict) {\n        return 1 if ($key =~ /^[A-Z]+$/i);\n    }\n    \n  \
    \  # Return '' if all keys are in either case.\n    return '';\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    if (not defined $dict) {\n       return '';\n  \
    \  }\n    my $result = 1;\n    foreach my $key (sort keys %$dict) {\n        if\
    \ (not exists $keys{$key} || $keys{$key} !~ /^[A-Z]+$/) {\n            $result\
    \ = '';\n            last;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660126782
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    return '' if keys %$dict == 0;\n    my(@result)\
    \ = (keys);\n    foreach my $key (@result){\n        if(lc($dict->{$key}) ne $dict->{$key}){\n\
    \            @result = (keys %$dict);\n            return ''\n        } elsif(lc($dict->{$key})\
    \ eq $dict->{$key}){\n            return '';\n        }\n    }\n    return @result\
    \ == 1 ? 1 : '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Not enough arguments for keys at /tmp/tmpn0lufj5_.pl line 18, near "keys)"

    BEGIN not safe after errors--compilation aborted at /tmp/tmpn0lufj5_.pl line 29.

    '
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $lower = 1;\n    my $upper = 1;\n    my $lower_in\
    \ = \"\";\n    my $upper_in = \"\";\n    \n    foreach my $key (keys %$dict) {\n\
    \        if ($lower) {\n            if (lc($key) eq $key) {\n                $lower_in\
    \ = $key;\n            } else {\n                $lower = \"\";\n            }\n\
    \        }\n        elsif ($upper) {\n            if (uc($key) eq $key) {\n  \
    \              $upper_in = $key;\n            } else {\n                $upper\
    \ = \"\";\n            }\n        }\n    }\n    if ($lower and $upper) {\n   \
    \     return \"\";\n    }\n    elsif ($lower_in) {\n        return $lower_in;\n\
    \    }\n    elsif ($upper_in) {\n        return $upper_in;\n    }\n    else {\n\
    \        return \"\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = \"\";\n    foreach my $key (keys %$dict)\
    \ {\n        if ($dict->{$key} =~ /^[a-z]*$/i) {\n            $result .= 1;\n\
    \        }\n        elsif ($dict->{$key} =~ /^[A-Z]*$/i) {\n            $result\
    \ .= 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    \n    my $case = '';\n    \n    for (sort keys %$dict)\
    \ {\n        my $string = lc($dict->{$_});\n        \n        if ($case eq ''\
    \ && $string =~ /^[a-z]$/) {\n            $case = '1';\n            last;\n  \
    \      }\n        elsif ($case eq '' && $string =~ /^[A-Z]$/) {\n            $case\
    \ = '1';\n            last;\n        }\n    }\n    \n    return $case;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=perl |>\nMy solution for your case:\n<code>\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'syntax error at /tmp/tmpdimhc1ay.pl line 36, near "<|"

    Search pattern not terminated at /tmp/tmpdimhc1ay.pl line 36.

    '
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    if (keys %$dict) { # check if there are any keys\n\
    \        my($key) = keys %$dict;\n        my @keys = sort keys %$dict;\n     \
    \   for (my $i = 0; $i < @keys; $i++) {\n            if ($keys[$i] !~ /^[A-Z_]$/)\
    \ {\n                return '';\n            }\n        }\n        for (my $i\
    \ = 0; $i < @keys; $i++) {\n            if ($keys[$i] !~ /^[a-z]$/) {\n      \
    \          return '';\n            }\n        }\n        return 1;\n    }\n  \
    \  return 0;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result;\n    if(scalar keys %$dict == 0) {\n\
    \        $result = '';\n    }\n    elsif(scalar keys %$dict == 1) {\n        $result\
    \ = $dict->{$_} eq '' || lc($_) eq uc($_) ? 0 : 1;\n    }\n    else {\n      \
    \  $result = '';\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    foreach my $key (sort keys %$dict) {\n        if($dict->{$key}\
    \ =~ /^[Aa][A-z]$/i) {\n            return 1;\n        }\n        if($dict->{$key}\
    \ =~ /^[A-Z][A-Z]$/i) {\n            return 1;\n        }\n        if($dict->{$key}\
    \ =~ /^[0-9]*$/) {\n            return 1;\n        }\n    }\n    return '';\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    if(!$dict) {\n        return '';\n    }\n    my\
    \ $result;\n    my @keys = sort keys %$dict;\n    foreach my $key (@keys) {\n\
    \        next if($key =~ /^\\d+$/);\n        if($key eq $key or $key eq $key->[0])\
    \ {\n            $result = '1';\n            last if($key eq $key->[0]);\n   \
    \     } else {\n            $result = '';\n            last if($key eq $key->[0]);\n\
    \        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $ret;\n    for (keys %$dict) {\n        if (!\
    \ exists $strings_low{$_}) { $ret = 1 }\n        if (! exists $strings_upp{$_})\
    \ { $ret = 1 }\n    }\n    return $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    foreach my $key (keys %$dict)\
    \ {\n        my $value = $dict->{$key};\n        if (lc($key) eq lc($value)) {\n\
    \        }\n        else {\n            $result = '';\n            last;\n   \
    \     }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result;\n    foreach my $key (sort keys %$dict)\
    \ {\n        if (!ref($dict->{$key}) || !ref($dict->{$key}->{key})) {\n      \
    \      $result = 1;\n            last;\n        }\n        elsif ($dict->{$key}->{key}\
    \ =~ /^[A-Z]$/i) {\n            $result = 1;\n            last;\n        }\n \
    \       elsif ($dict->{$key}->{key} =~ /^[a-z]$/i) {\n            $result = 1;\n\
    \            last;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    \n    if(!ref($dict)) {\n        $dict = {'' =>\
    \ ($dict)};\n    }\n    foreach my $key (keys %$dict) {\n        return 1 if($key\
    \ =~ m/^[A-Z]$/);\n    }\n    return '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my(@keys) = keys(%$dict);\n    my($is_lower_case_keys);\n\
    \    my($is_upper_case_keys);\n    \n    return '' if !scalar(keys %$dict);\n\
    \    foreach my $key (@keys) {\n        return '' if !$dict->{$key};\n       \
    \ my $value = $dict->{$key};\n        return '' if !defined($value);\n       \
    \ return '' if !defined($value) && $value !~ /^[+-]?\\d+$/;\n        return ''\
    \ if !defined($value) && $value !~ /^[+-]?\\d*\\.\\d+$/;\n        return '' if\
    \ !defined($value) && $value !~ /^[+-]?\\d*\\.\\d*$/;\n        \n        $is_lower_case_keys\
    \ = 1 if lc($key) eq $key;\n        $is_upper_case_keys = 1 if uc($key) eq $key;\n\
    \    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpal256mlc.pl line 68, at
    end of line

    syntax error at /tmp/tmpal256mlc.pl line 68, at EOF

    Execution of /tmp/tmpal256mlc.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $check = 1;\n    foreach my $key (sort keys %$dict)\
    \ {\n        if(lc($key) eq lc($key->[0])) {\n            $check = 0;\n      \
    \      last;\n        }\n    }\n    return $check;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my($hash_case) = 0;\n    my($keys_list) = keys %$dict;\n\
    \    for my $key (@$keys_list) {\n        if(ref $dict->{$key} eq 'HASH') {\n\
    \            $hash_case = $hash_case | check_dict_case($dict->{$key});\n     \
    \   } elsif($dict->{$key} =~ /^[[:upper:]]+$/) {\n            $hash_case = $hash_case\
    \ | 1;\n        } else {\n            $hash_case = $hash_case | 0;\n        }\n\
    \    }\n    return $hash_case;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    $dict = 0 unless (defined $dict);\n    my %lowercase;\n\
    \    my %uppercase;\n    foreach my $key (sort keys %$dict) {\n        $lowercase{$key}\
    \ = uc($dict->{$key});\n        $uppercase{$key} = lc($dict->{$key});\n    }\n\
    \    return '' unless (keys %lowercase == keys %uppercase);\n    foreach my $key\
    \ (sort keys %lowercase) {\n        return 1 if (lc($dict->{$key}) eq $lowercase{$key});\n\
    \    }\n    foreach my $key (sort keys %uppercase) {\n        return 1 if (uc($dict->{$key})\
    \ eq $uppercase{$key});\n    }\n    return '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660126782
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $has_lower = 0;\n    my $has_upper = 0;\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpg5hstyrs.pl line 54, at
    end of line

    syntax error at /tmp/tmpg5hstyrs.pl line 54, at EOF

    Execution of /tmp/tmpg5hstyrs.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660126782
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    if (not %$dict) {\n        return '';\n    }\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpp_eafsyd.pl line 55, at
    end of line

    syntax error at /tmp/tmpp_eafsyd.pl line 55, at EOF

    Execution of /tmp/tmpp_eafsyd.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660126782
- exit_code: -1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $case = check_dict_case($dict);\n    return $case;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660161349
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $key = \"\";\n    my $ret = 0;\n    for (keys\
    \ %$dict) {\n        if ($dict->{$key} eq '' or !ref($dict->{$key}) ) {\n    \
    \        $key = '';\n        } else {\n            $key = lc $key;\n        }\n\
    \        $ret = $ret && (length($key) > 0);\n    }\n    return $ret;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660161334
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $status = 0;\n    \n    # Check for both lowercase\
    \ and uppercase keys\n    foreach my $key (keys %$dict) {\n        if ($dict->{$key}\
    \ !~ /^string$/i) {\n            $status = 0;\n            last;\n        }\n\
    \    }\n    \n    # Return empty string if dictionary is empty\n    return $status\
    \ ? '' : 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660161334
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    \n    if (@$dict) {\n        foreach my $key (sort\
    \ keys %$dict) {\n            next if $dict->{$key}->isa(__PACKAGE__) || ref($dict->{$key})\
    \ && $dict->{$key}->isa(__PACKAGE__);\n            if (is_string($key)) {\n  \
    \              return 1;\n            } else {\n                return '';\n \
    \           }\n        }\n    }\n    \n    return 0;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Not an ARRAY reference at /tmp/tmpf66j2xs7.pl line 18.

    '
  stdout: ''
  timestamp: 1660161334
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result;\n    for(keys(%$dict)) {\n        my\
    \ $value = $dict->{$_};\n        if(ref($value) eq \"HASH\") {\n            $result\
    \ = check_dict_case($value);\n        } elsif(ref($value) eq \"ARRAY\") {\n  \
    \          $result = check_dict_case(\\@{$value});\n        } elsif(ref($value)\
    \ eq \"SCALAR\") {\n            $result = check_dict_case($value);\n        }\
    \ else {\n            $result = '';\n        }\n        return $result if $result;\n\
    \    }\n    return '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660161334
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    \n    # Hash has only one element.\n    return ''\
    \ if (keys %$dict) == 1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpulqhjwtn.pl line 55, at
    end of line

    syntax error at /tmp/tmpulqhjwtn.pl line 55, at EOF

    Execution of /tmp/tmpulqhjwtn.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660161334
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    if ($dict) {\n        my($key) = keys %$dict;\n\
    \        if ($key =~ /^[a-z0-9]+$/i) {\n            $key = \"1\";\n        }\n\
    \        else {\n            $key = \"0\";\n        }\n    }\n    else {\n   \
    \     $key = \"0\";\n    }\n    return $key;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660161334
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    $dict = ref($dict) ? $dict->{HASH} : $dict;\n  \
    \  \n    return '' if !keys %$dict;\n    return 1 unless grep(!ref($_), keys %$dict);\n\
    \    return '' if grep( !m/^[a-z\\s]+$/, keys %$dict);\n    return '' if grep(\
    \ !m/^[A-Z\\s]+$/, keys %$dict);\n    \n    return;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660161334
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $return = '';\n    \n    foreach my $key (keys\
    \ %$dict) {\n        my $value = $dict->{$key};\n        $return .= $value if\
    \ ($value eq '' || $value =~ /^[A-Z]/);\n    }\n    \n    return $return if $return;\n\
    \    \n    return '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660161334
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my($case) = 'none';\n    if (keys %$dict == 0) {\n\
    \        return '';\n    }\n    $case = (lc keys %$dict);\n    $case = (uc keys\
    \ %$dict);\n    if ($case eq 'none') {\n        return '';\n    }\n    return\
    \ $case;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\",\
    \ \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660161334
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my($result) = '';\n    foreach my $key (sort keys\
    \ %$dict) {\n        next if (not defined $dict->{$key});\n        if ($key =~\
    \ /\\w/) {\n            $result .= $key;\n        } elsif ($key =~ /^\\W\\w$/)\
    \ {\n            $result .= $key;\n        }\n    }\n    return $result ? $result\
    \ : '';\n}\n</code>\n<|/ a tags=perl,regex |>\n<| c |>\nWhile this may answer\
    \ the question it's always better to include an explanation to your answer than\
    \ just a code dump.\n<|/ c |>\n<| c |>\n: Thanks. My first question on Stack Overflow\
    \ was answered by someone who's very new to Perl, so I used some code fragments.\n\
    <|/ c |>\n<| c |>\nThe OP asked for a way to get to the empty string when there\
    \ are no non-alphanumeric characters, so a zero length string would not be an\
    \ appropriate value.\n<|/ c |>\n<| c |>\n: You're right. I fixed the answer.\n\
    <|/ c |>\n<| a tags=perl,regex |>\nI'd say that this is more an algorithm problem.\
    \ \nYou don't specify what behavior should be in these cases:\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'syntax error at /tmp/tmpkyt_dl_p.pl line 29, near "<|"

    "no" not allowed in expression at /tmp/tmpkyt_dl_p.pl line 34, at end of line

    "use" not allowed in expression at /tmp/tmpkyt_dl_p.pl line 42, at end of line

    Execution of /tmp/tmpkyt_dl_p.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660161334
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $str = defined($dict) ? to_json($dict) : '';\n\
    \    my $case = check_dict_case($str);\n    return $case;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::to_json called at /tmp/tmpw09wpi_e.pl line
    17.

    '
  stdout: ''
  timestamp: 1660161334
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my(@values) = @{$dict};\n    my $check = 0;\n  \
    \  foreach my $value (@values) {\n        if(not defined $value or $value eq ''\
    \ || $value eq 'NULL') {\n            return '';\n        }\n        elsif(lc($value)\
    \ eq uc($value)) {\n            $check = 1;\n            last;\n        }\n  \
    \  }\n    return $check;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Not an ARRAY reference at /tmp/tmpipvn65_h.pl line 17.

    '
  stdout: ''
  timestamp: 1660161334
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $case_check = 0;\n    my($key, $value);\n   \
    \ foreach $key (sort keys %$dict) {\n\t$value = $dict->{$key};\n\tif ($value eq\
    \ $key or (ref($value) eq \"HASH\"\n\t\tand !check_dict_case($value))) {\n\t \
    \   $case_check++;\n\t}\n    }\n    return '' unless $case_check;\n    return\
    \ 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660161334
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = '';\n    foreach my $key (keys(%$dict))\
    \ {\n        my $value = $dict->{$key};\n        if ($value eq '')\n        {\n\
    \            $result = '';\n        }\n        elsif (length($value) > 0 && $value\
    \ =~ /[A-Z]/)\n        {\n            $result = 1;\n        }\n        elsif (length($value)\
    \ > 0 && $value =~ /[a-z]/)\n        {\n            $result = 1;\n        }\n\
    \        else\n        {\n            $result = '';\n        }\n    }\n    return\
    \ $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\",\
    \ \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660161334
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    \n    my $result = \"\";\n    foreach my $key (keys\
    \ %$dict) {\n        if(not is_scalar($key)) {\n            $result = 1;\n   \
    \         last;\n        }\n        elsif(lc($key) eq uc($key)) {\n          \
    \  $result = 0;\n            last;\n        }\n    }\n    \n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_scalar called at /tmp/tmp1vz21z_r.pl line
    20.

    '
  stdout: ''
  timestamp: 1660161334
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my($key, $value);\n    my @list = ();\n    foreach\
    \ $key (keys %$dict) {\n        $value = $dict->{$key};\n        push(@list, $value);\n\
    \    }\n    foreach $value (@list) {\n        return \"\" unless $value =~ /[A-Za-z]+/;\n\
    \    }\n    return 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660161334
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    my %tmp = ( %$dict );\n   \
    \ for my $key (sort keys %tmp) {\n        my $value = $tmp{$key};\n        if\
    \ ($key =~ /^[a-z]$/i || $key =~ /^[A-Z]$/i) {\n            $result = $result\
    \ && ($value == $key);\n        }\n    }\n    return $result ? 1 : 0;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660161334
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    return '' unless scalar(keys %$dict);\n    my @keys;\n\
    \    foreach my $key (keys %$dict) {\n        push(@keys, lc($key)) if lc($key)\
    \ =~ /^[a-z]/i;\n        push(@keys, uc($key)) if uc($key) =~ /^[A-Z]/i;\n   \
    \ }\n    return '' if @keys == 0;\n    if (@keys == 1) {\n        return $keys[0]\
    \ if $keys[0] =~ /^[a-z]/i || $keys[0] =~ /^[A-Z]/i;\n        return $keys[0]\
    \ if $keys[0] =~ /^[A-Z]/i;\n        return $keys[0] if $keys[0] =~ /^[a-z]/i;\n\
    \    } else {\n        return 1; # All keys are in upper case or lower case.\n\
    \    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660161334
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my($lowercase_key) = \"\";\n    my($uppercase_key)\
    \ = \"\";\n    foreach my $key (keys %$dict) {\n        $lowercase_key .= lc $key;\n\
    \        $uppercase_key .= uc $key;\n    }\n    return $lowercase_key eq $uppercase_key\
    \ ? 1 : '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660161334
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $flag = '';\n    foreach my $key (sort keys %$dict)\
    \ {\n        my $value = $dict->{$key};\n        my $lower = lc($key);\n     \
    \   $flag = $flag if $lower eq $key;\n        $flag = $flag if $upper eq $key;\n\
    \    }\n    return $flag;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660161334
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $hashsize = scalar keys %$dict;\n    my $case_count\
    \ = @_ ? @_ : 1;\n    my $case_ok = $case_count > 1 ? '' : (length($dict) > 1\
    \ ? 1 : 0);\n    my $case_ok = @_ ? @$_[0] == @_ : $case_ok;\n    \n    if ($case_ok)\
    \ {\n        foreach my $key (sort keys %$dict) {\n            my $value = $dict->{$key};\n\
    \            if (defined $value) {\n                return 0 if $value eq $key;\n\
    \                return 0 if $value eq $key->[0]; # handle hashref values\n  \
    \          }\n        }\n    } else {\n        return '';\n    }\n    \n    return\
    \ $case_ok ? 0 : '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660161334
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    return '' unless $dict;\n    \n    my @keys = keys\
    \ %$dict;\n    my $ok = 1;\n    foreach my $key (@keys) {\n        return 1 if\
    \ $key =~ /^([a-z]|[A-Z])/;\n        $ok = '' if $key =~ /^\\d/;\n    }\n    return\
    \ $ok;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660161334
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    return '' if (keys %{$dict} == ());\n    return\
    \ '' if (grep {$_ eq \"\"}(keys %{$dict}));\n    return '' if (grep {$_ eq \"\"\
    }(keys %{$dict}, lc));\n    return 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660161334
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    \n    # Determine if there are any keys in lower\
    \ case. If there are not,\n    # then we consider all keys to be in upper case.\n\
    \    my $str_lower = join('', map { uc $_ } keys %$dict);\n    return '' if ($str_lower\
    \ =~ /^$/);\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\",\
    \ \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpmc4lx784.pl line 57, at
    end of line

    syntax error at /tmp/tmpmc4lx784.pl line 57, at EOF

    Execution of /tmp/tmpmc4lx784.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660161334
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my($str);\n    my(@strings);\n    foreach $str (keys\
    \ %$dict) {\n\tnext unless ($str =~ /^[a-z]+$/i); \n\tpush(@strings,$str);\n \
    \   }\n    foreach $str (keys %$dict) {\n\tnext unless ($str =~ /^[A-Z]+$/i);\
    \ \n\tpush(@strings,$str);\n    }\n    return '' if (scalar(@strings) == 0);\n\
    \    return 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660161334
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $str = \"\";\n    foreach my $key (sort keys\
    \ %$dict) {\n        if ($dict->{$key}) {\n            $str = lc($key) if lc($key)\
    \ eq $key;\n        }\n    }\n    return $str if $str;\n    return '';\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660161334
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result = 1;\n    foreach my $key (keys(%$dict))\
    \ {\n        if(!is_string($key)) {\n            $result = '';\n            last;\n\
    \        }\n        elsif($key =~ /^[A-Z]+$/) {\n            $result = 1;\n  \
    \          last;\n        }\n        else {\n            $result = '';\n     \
    \       last;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_string called at /tmp/tmp4wf83d59.pl line
    19.

    '
  stdout: ''
  timestamp: 1660161334
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $result;\n    foreach my $key (keys %$dict) {\n\
    \        my $value = $dict->{$key};\n        if ($value eq '' || ! $value->isa('HASH'))\
    \ {\n            $result = '1';\n        } else {\n            my $dict_case =\
    \ check_dict_case($value);\n            $result = '' unless $dict_case;\n    \
    \    }\n        return $result;\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660161334
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    return '' if (keys %$dict) == 0;\n    my($key) =\
    \ keys %$dict;\n    return '' if ($key ne 'Age' and $key ne 'Name' and $key ne\
    \ 'State' and $key ne 'Zip');\n    my($value) = $dict->{$key};\n    my(@keys);\n\
    \    foreach (keys %$dict) {\n        push(@keys, $_) if ($_ =~ m/^$key/);\n \
    \   }\n    my @ret = map {\n        if (lc($dict->{$_}->[0]) eq lc($value)) {\n\
    \            $_;\n        }\n        else {\n            '';\n        }\n    }\
    \ @keys;\n    if (scalar(@ret) == 0) {\n        '';\n    }\n    else {\n     \
    \   scalar(@ret) == 1 ? $ret[0] : @ret;\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660161334
- exit_code: 255
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my(@keys) = keys %$dict;\n    my($string_keys) =\
    \ 0;\n    my($all_string_keys) = 0;\n    my(@bad_case_keys) = ();\n    my($result)\
    \ = '';\n    \n    foreach my $key (@keys) {\n        if (lc($key) eq lc($key))\
    \ {\n            $string_keys++;\n        }\n        elsif ($key =~ /^[A-Z]+$/i)\
    \ {\n            $all_string_keys++;\n        }\n        else {\n            $bad_case_keys{$key}++;\n\
    \        }\n    }\n    \n    if ($string_keys == $all_string_keys) {\n       \
    \ $result = '1';\n    }\n    else {\n        if ($string_keys <= $all_string_keys)\
    \ {\n            $result = '';\n        }\n        else {\n            $result\
    \ = '1';\n        }\n    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpfrbe5027.pl line 81, at
    end of line

    syntax error at /tmp/tmpfrbe5027.pl line 81, at EOF

    Execution of /tmp/tmpfrbe5027.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660161334
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my $str = \"\";\n    foreach my $key (keys %$dict)\
    \ {\n        if (exists $dict->{$key}) {\n            if ( !ref($dict->{$key}))\
    \ {\n                if ($dict->{$key} =~ /^[A-Z]+$/i) {\n                   \
    \ $str .= $dict->{$key};\n                }\n                else {\n        \
    \            $str .= \"?\";\n                }\n            }\n            else\
    \ {\n                $str .= $dict->{$key};\n            }\n        }\n    }\n\
    \    if ($str != \"\") {\n        return 1;\n    }\n    else {\n        return\
    \ \"\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660161334
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    \n    my @keys = sort keys %$dict;\n    \n    foreach\
    \ my $key (@keys) {\n        if( !defined $dict->{$key} ) {\n            return\
    \ '';\n        } elsif( $dict->{$key} !~ /^[Aa][Bb][Cc][Dd][Ee][Ff][Gg][Hh][Ii][Jj][Kk][Ll][Mm][Nn][Oo][Pp][Qq][Rr][Ss][Tt][Uu][Vv][Ww][Xx][Yy][Zz]/\
    \ ) {\n            return '1';\n        }\n    }\n    \n    return '';\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
    \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
    }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660161334
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    my(@results);\n    \n    @results = (\n        grep(\n\
    \            /\\A[a-z]|[A-Z]/,\n            keys %{$dict}\n        ),\n      \
    \  grep(\n            /\\A[a-z]|[A-Z]/,\n            values %{$dict}\n       \
    \ )\n    );\n    \n    return $results[0] == $results[1] ? 1 : 0;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660161334
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    return 1 if scalar(keys %$dict);\n    return ''\
    \ if scalar(keys %$dict) == 0 && !keys %$dict;\n    return 1;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660161334
- exit_code: 1
  program: "# Given a hash, return 1 if all keys are strings in lower \n# case or\
    \ all keys are strings in upper case, else return ''.\n# The function should return\
    \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
    \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
    \ {\n    my($dict) = @_;\n    return '' unless %$dict;\n    \n    my $res = 1;\n\
    \    \n    foreach my $key (sort(keys(%$dict))) {\n        if ($key =~ /^([A-Z_])/)\
    \ {\n            $res .= 1;\n        } elsif ($key =~ /^([a-z])/) {\n        \
    \    $res .= 1;\n        } elsif ($key =~ /^([0-9])/) {\n            $res .= 1;\n\
    \        }\n    }\n    \n    return $res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"\
    p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\"\
    , \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
    Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660161334
