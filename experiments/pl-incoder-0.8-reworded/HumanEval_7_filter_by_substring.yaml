name: HumanEval_7_filter_by_substring
language: pl
prompt: "# Filter an input array of strings only for ones that contain given substring\n\
  # >>> filter_by_substring([], \"a\")\n# []\n# >>> filter_by_substring([\"abc\",\
  \ \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"]\nsub filter_by_substring\
  \ {\n    my($strings, $substring) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_by_substring;\n\
  \        if(eq_deeply($candidate->([], \"john\"),[])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"xxx\", \"asd\"\
  , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"\
  xxx\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
  xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\"\
  , \"aaaxxy\", \"xxxAAA\", \"xxx\"])) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->([\"grunt\", \"trumpet\", \"prune\"\
  , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @strings = @$strings;\n    my @found = grep { /$substring/ }\
    \ @strings;\n    @strings = @found;\n    return @strings;\n}", "    my @filterd;\n\
    \    $strings = reverse sort $strings;\n    foreach my $s (@$strings) {\n    \
    \    if($s =~ /$substring/) {\n            push @filterd, $s;\n        }\n   \
    \ }\n    return @filterd;\n}", "    my $filtered_strings = ();\n    my $index\
    \ = -1;\n    $index++ while $strings->[$index] =~ m/$substring/;\n    $filtered_strings\
    \ = @$strings;\n    $index-- while $strings->[$index] =~ m/$substring/;\n    return\
    \ @$filtered_strings;\n}", "    my($filtered) = ();\n    for my $str (@$strings)\
    \ {\n        if (index($str, $substring) != -1) {\n            $filtered += [$str];\n\
    \        }\n    }\n    return @$filtered;\n}", '    $substring = quotemeta($substring);',
  "    my @result = ();\n    foreach my $s (@$strings) {\n        push(@result, $s)\
    \ if index($s, $substring) != -1;\n    }\n    @$strings = @result;\n}", "    return\
    \ grep { $_ =~ /$substring/ } @$strings;\n}", '    my @result;', "    my $found_strings\
    \ = 0;\n    my @strings_with_substring;\n    foreach my $string ($strings) {\n\
    \        if (index($string, $substring) != -1) {\n            $found_strings =\
    \ 1;\n        }\n        push @strings_with_substring, $string;\n    }\n    return\
    \ @strings_with_substring;\n}", "    return @$strings =~ /\\b$substring\\b/ig\
    \ ? @$strings : ();\n}", "    @$strings = grep { /$substring/ } @$strings;\n \
    \   return @$strings;\n}", "    my(@found) = ();\n    foreach my $string ($strings)\
    \ {\n        if(grep { /$substring/ } @$strings) {\n            push(@found, $string);\n\
    \        }\n    }\n    return @found;\n}", '    my $filtered_strings;', "    grep\
    \ { $_ ~ $substring };\n}", '    my @filtered = ();', "    my @filtered;\n   \
    \ foreach my $string (@$strings) {\n        if (grep /$substring/,$string) {\n\
    \            push(@filtered, $string);\n        }\n    }\n    return @filtered;\n\
    }", "    my(@filtered) = [];\n    foreach my $string (@$strings) {\n        push\
    \ @filtered, $string if $string =~ /$substring/;\n    }\n    @$strings = @filtered;\n\
    }", "    return []\n        if scalar($strings) <= 0;\n    my $i = 0;\n    for\
    \ (@$strings) {\n        if (index($_, $substring) >=0) {\n            splice(@$strings,\
    \ $i, 1);\n        }\n        $i++;\n    }\n    return @$strings;\n}", "    my\
    \ @result;\n    foreach my $string (@$strings) {\n        if (index($string, $substring)\
    \ > -1) {\n            push @result, $string;\n        }\n    }\n    return @result;\n\
    }", "    my $filtered = ();\n    $filtered = grep { $_ ~~ /\\Q$substring\\E/s\
    \ };\n    return $filtered;\n}", "    return $strings if $substring eq \"\" ||\
    \ !length $substring;\n    return grep { $_ ~~ $substring };\n}", "    my($filtered)\
    \ = $strings;\n    foreach my $string (@$strings) {\n        foreach my $search\
    \ (split(' ', $substring)) {\n            next if $string =~ /$search/i;\n   \
    \     }\n        $filtered->[$_] = undef for grep(!defined($filtered->[$_]), 0..$#$strings);\n\
    \    }\n    return $filtered;\n}", '    my(@new_strings);', '    my @filtered_strings
    = ();', "    my @returns = ();\n    foreach my $element (@$strings) {\n      \
    \  if (index($element, $substring) != -1) {\n            push(@returns, $element);\n\
    \        }\n    }\n    return @returns;\n}", "    my($filtered) = [];\n    foreach\
    \ my $string (@$strings) {\n        $filtered .= $string if ($string =~ /$substring/);\n\
    \    }\n    return $filtered;\n}", "    my @result = ();\n    foreach my $string\
    \ (@$strings) {\n        if (index($string, $substring) !== -1) {\n          \
    \  push(@result, $string);\n        }\n    }\n    return @result;\n}", "    my\
    \ = grep {\n        $strings =~ /\\b$_\\b/ ? 1 : 0\n    } @$substring;\n    return\
    \ @strings;\n}", "    return unless @$strings;\n    my(@matches);\n    foreach\
    \ my $string (@$strings) {\n        next unless index($string, $substring) !=\
    \ -1;\n        push(@matches, $string);\n    }\n    return @matches;\n}", "  \
    \  return grep { !/$substring/ } @$strings;\n}", '    my @result = ();', "   \
    \ return @$strings unless @$strings > 0;\n    my $i = 0;\n    while ($i < @$strings)\
    \ {\n        return @$strings[0..$i] unless $strings[$i] =~ /$substring/;\n  \
    \      $i++;\n    }\n    return [];\n}", '    my(@strings) = @$strings;', "  \
    \  return grep { $_ ~~ $substring } @$strings;\n}", "    return grep {\n     \
    \   not /^$substring/;\n    } @$strings;\n}", "    return @$strings if @$strings\
    \ == 0;\n    foreach my $string (@$strings) {\n        return @$strings if $string\
    \ =~ /$substring/;\n    }\n    return @$strings;\n}", '    my(@filtered);', '    $substring
    =~ tr/A-Z/a-z/;', "    my $regexp = qr/$substring/;\n    return grep { $_ !~ /$regexp/\
    \ } @$strings;\n}", "    \n    my @result;", "    grep { $_ ~~ /$substring/ }\
    \ @$strings;\n}", "    my($ret);\n    for (my $i = 0; $i < @$strings; ++$i) {\n\
    \        if ($strings[$i] =~ /$substring/) {\n            $ret .= $strings[$i];\n\
    \        }\n    }\n    return $ret;\n}", '    my @filtered = ();', '    my($filtered)
    = [];', "    my $filter = 0;\n    $strings = [ @$strings ] unless ref $strings;\n\
    \    foreach my $string (@$strings) {\n        if (index($string, $substring))\
    \ {\n            $filter = 1;\n            last;\n        }\n    }\n    return\
    \ $filter ? @$strings : [];\n}", '    my(@filtered);', "    $substring .= \"\"\
    \ if length $substring <= 0;\n    return map { $_ unless grep /$substring/,; };\
    \ # Filter all elements of $strings for ones that do not contain substring\n}",
  '    my @result = ();', "    \n    my @filtered_strings;\n    foreach my $string\
    \ (@$strings) {\n        push @filtered_strings,\n            if substr $string,\
    \ 0, length $substring;\n    }\n    return @filtered_strings;\n}", "    my @found\
    \ = grep /$substring/,;\n    return @found unless @_ == 1;\n    return @found;\n\
    }", "    return grep { /$substring/i } @$strings;\n}", "    $substring =~ s/\\\
    W//g;\n    my($filter_out = []);", "    return unless @$strings;\n    foreach\
    \ my $string (@$strings) {\n        return if $string =~ /^$substring/i;\n   \
    \ }\n    return;\n}", "    my $sub = substr($substring,0,1) eq \"~\" ? \"!\" :\
    \ \"%\";\n    my $regex = qr/$substring/$sub/;", '    my @list = @$strings;',
  '    my(@filtered);', "    return grep { /$substring/ } @$strings;\n}", "    my\
    \ @return = $strings;\n    grep { /$substring/ } @$strings;\n}", '    return ()
    if scalar(@$strings) <= 1;', '    my @filtered = ();', "    my $count = 0;\n \
    \   my $result = ();\n    my $length = @$strings;\n    foreach my $string (@$strings)\
    \ {\n        chomp $string;\n        $string =~ s/^\\s+//;\n        $string =~\
    \ s/\\s+$//;\n        foreach my $str (split /\\s*,\\s*/, $string) {\n       \
    \     my $index = index($str, $substring);\n            if ($index != -1) {\n\
    \                push @$result, $strings[$count++];\n            }\n        }\n\
    \    }\n    @$result = @$strings;\n    return @$result;\n}", "    return map {\
    \ $_ } grep { index($_, $substring) != -1 } @$strings;\n}", "    my @filtered_strings;\n\
    \    foreach my $string (@$strings) {\n        if (index($string, $substring))\
    \ {\n            push(@filtered_strings, $string);\n        }\n    }\n    return\
    \ \\@filtered_strings;\n}", "    my $length = length($substring);\n    my @strings_to_keep\
    \ = ();\n    my @strings_to_discard = ();\n    for (my $i = 0; $i < @$strings;\
    \ $i++) {\n        next unless length $strings[$i] >= $length;\n        my $string\
    \ = $strings[$i];\n        if (index($string, $substring) >= 0) {\n          \
    \  push @strings_to_keep, $i;\n        } else {\n            push @strings_to_discard,\
    \ $i;\n        }\n    }\n    return @$strings[@strings_to_keep];\n}", "    my\
    \ @filtered = ();\n    foreach my $string ( @$strings ) {\n        if (index($string,\
    \ $substring) >= 0) {\n            push(@filtered, $string);\n        }\n    }\n\
    \    @filtered;\n}", "    return @$strings =~ m|$substring|g;\n}", "    if ($strings\
    \ == []) {\n        return [];\n    }\n    my($string);\n    foreach $string (@$strings)\
    \ {\n        if (index($string, $substring) >= 0) {\n            push, $string;\n\
    \        }\n    }\n    return @$strings;\n}", "    return @$strings[grep {\n \
    \       /(?<!^)\\Q$substring\\E(?!^)/ ? $_ : ()\n    } @$strings];\n}", "    return\
    \ grep { index($_, $substring) != -1 } @$strings;\n}", "    my $result = ();\n\
    \    foreach my $string (@$strings) {\n        if ($string =~ /$substring/) {\n\
    \            push(@$result, $string);\n        }\n    }\n    return @$result;\n\
    }", "    my @result = ();\n    foreach my $string ($strings) {\n        if (index($string,\
    \ $substring) > -1) {\n            push(@result, $string);\n        }\n    }\n\
    \    return @result;\n}", "    \n    foreach my $string (@$strings) {\n      \
    \  if (index($string, $substring) != -1) {\n            push @$strings, $string;\n\
    \        }\n    }\n    return @$strings;\n}", "    @$strings = grep { !index($_,\
    \ $substring) } @$strings;\n    return @$strings;\n}", "    my @strings = @$strings;\n\
    \    my $return = ();\n    for (my $i = 0; $i < @strings; ++$i) {\n        if\
    \ (index($strings->[$i], $substring)) {\n            $return->[$i] = $strings->[$i];\n\
    \        }\n    }\n    return @$return;\n}", "    grep { /$substring/ } @$strings;\n\
    }", "    grep {\n        my ($match) = /^(.*?)$substring/;\n        defined $match\
    \ && $match eq $_\n    } @$strings;\n}", "    my %found_strings;\n    \n    foreach\
    \ my $s (@$strings) {\n        my $matched = 0;\n        if ($s =~ m/$substring/i)\
    \ {\n            $found_strings{$s} = 1;\n            $matched = 1;\n        }\n\
    \        if ($matched == 0) {\n            delete $found_strings{$s};\n      \
    \  }\n    }", "    my @result = ();\n    for my $string (@$strings) {\n      \
    \  if (index($string, $substring) >= 0) {\n            push(@result, $string);\n\
    \        }\n    }\n    @$strings = @result;\n}", "    grep { $_ !~ /$substring/\
    \ } @$strings;\n}", "    $substring .= \"/\" unless $substring =~ m{\\A/};\n \
    \   my @result = ();\n    foreach my $string ( @$strings ) {\n        push @result,\
    \ $string unless $string =~ /$substring/;\n    }\n    return @result;\n}", " \
    \   my $filtered = grep(!index($_, qr/\\b$substring\\b/), @$strings);\n    return\
    \ @$filtered if @$filtered > 0;\n    return [];\n}", "    my @results = ();\n\
    \    foreach my $string ($strings) {\n        if ( index($string, $substring)\
    \ != -1 ) {\n            push(@results, $string);\n        }\n    }\n    return\
    \ @results;\n}", "    my $result = ();\n    foreach my $string (@$strings) {\n\
    \        push (@$result, $string) if index($string, $substring) != -1;\n    }\n\
    \    return @$result;\n}", "    my $search_regex = quotemeta($substring);\n  \
    \  my @filtered;\n    for my $string (@$strings) {\n        if ($string =~ /$search_regex/)\
    \ {\n            push(@filtered, $string);\n        }\n    }\n    return @filtered;\n\
    }", "    my $count = 0;\n    foreach my $string ( @$strings ) {\n        next\
    \ unless $string =~ m/$substring/;\n        push (@$strings, $string) if $count++;\n\
    \    }\n    @$strings;\n}", "    grep {\n        /(?<substr>$substring)/ and /(?<substr>)[^$substring]/\
    \ and /(?<substr>)$substring/;\n    } @$strings;\n}", '    my @return = ();',
  '    my $result = ();', "    my @out;\n    my $i = 0;\n    foreach my $string ($strings)\
    \ {\n        if (index($string, $substring) !== -1) {\n            $out[$i++]\
    \ = $string;\n        }\n    }\n    return @out;\n}", "    my @filtered;\n   \
    \ foreach my $string (@$strings) {\n        if (index($string, $substring) !=\
    \ -1) {\n            push(@filtered, $string);\n        }\n    }\n    return @filtered;\n\
    }", '    $substring = lc $substring;', "    my @result = ();\n    foreach my $s\
    \ (@$strings) {\n        if (index($s, $substring) != -1) {\n            push(@result,\
    \ $s);\n        }\n    }\n    return @result;\n}", "    return unless @$strings;\n\
    \    return @$strings if !defined($substring);", "    my @result;\n    for my\
    \ $string ($strings) {\n        if (index($string, $substring) >= 0) {\n     \
    \       push @result, $string;\n        }\n    }\n    @result;\n}", "    my @results\
    \ = ();\n    foreach my $string (@$strings) {\n        if (index($string, $substring)\
    \ >= 0) {\n            push(@results, $string);\n        }\n    }\n    return\
    \ @results;\n}", '    my @filtered_strings = ();', "    my $result = @$strings;\n\
    \    foreach my $item (@$strings) {\n        if (index($item, $substring) != -1)\
    \ {\n            $result = [$item];\n            last;\n        }\n    }\n   \
    \ return $result;\n}", "    $substring = $substring->to_string if ref $substring;\n\
    \    grep { index($_, $substring) != -1 } @$strings;\n}", "    my @return = ();\n\
    \    foreach my $string (@$strings) {\n        if( index($string, $substring)\
    \ != -1 ) {\n            push(@return, $string);\n        }\n    }\n    return\
    \ @return;\n}", "    my(@strings) = $strings;\n    my @strings_with_substring\
    \ = ();", '    return () unless $strings;', "    return unless @$strings;\n  \
    \  return grep {\n        my($string) = @$strings;\n        return index($string,\
    \ $substring);\n    } @$strings;\n}", "    my @result;\n    foreach my $s (@$strings)\
    \ {\n        push @result, $s if index($s, $substring) != -1;\n    }\n    return\
    \ @result;\n}", "    my @result;\n    foreach my $string ($strings) {\n      \
    \  if ($string =~ /$substring/) {\n            push @result, $string;\n      \
    \  }\n    }\n    return @result;\n}", "    my(@filtered) = [];\n    for(my $i\
    \ = 0; $i < @$strings; $i++) {\n        if(index($$strings[$i], $substring) !=\
    \ -1) {\n            push @filtered, $$strings[$i];\n        }\n    }\n    return\
    \ @filtered;\n}", "    my @strings_to_filter;\n    my @filtered_strings;", " \
    \   my @filtered;\n    for(@$strings) {\n        if(index($_, $substring) != -1)\
    \ {\n            push(@filtered, $_);\n        }\n    }\n    return @filtered;\n\
    }", "    return grep { index($_, $substring) != -1 } @$strings;\n}", "    my @strings_with_substring\
    \ = ();\n    foreach my $string (@$strings) {\n        push(@strings_with_substring,\
    \ $string) if ($string =~ /$substring/);\n    }\n    return @strings_with_substring;\n\
    }", "    return @$strings if length $substring == 0;\n    @$strings = grep { index($_,\
    \ $substring) != -1 } @$strings;\n    return @$strings;\n}", "    grep { m/$substring/\
    \ } @$strings;\n}", "    return grep { $_ ~ $substring } @$strings;\n}", '    my
    @filtered = ();', "    return map { $_ if index($_, $substring) != -1 } @$strings;\n\
    }", "    return unless @$strings;\n    my @results = ();\n    foreach my $string\
    \ (@$strings) {\n        if (index($string, $substring) == 0) {\n            push\
    \ @results, $string;\n        }\n    }\n    return @results;\n}", "    return\
    \ @$strings[grep { /$substring/ } @$strings];\n}", "    return grep {\n      \
    \  not grep { index($_, $substring) };\n    };\n}", "    return grep { index($_,\
    \ $substring) != -1 } @$strings;\n}", "    my @filtered;\n    foreach my $string\
    \ (@$strings) {\n        push(@filtered, $string) if index($string, $substring)\
    \ > -1;\n    }\n    return @filtered;\n}", "    my $count = () = $strings =~ /($substring)/ig;\n\
    \    if ($count > 0) {\n        $strings\n    }\n}", "    my $found;\n    $found\
    \ = map { $_ eq $substring ? $_ : ()} @$strings;\n    return @$found;\n}", " \
    \   return grep { index($_, $substring) != -1 } @$strings;\n}", '    my(@results);',
  "    return @$strings[grep {$_ ~~ $substring} @$strings];\n}", "    $strings = [$strings]\
    \ if ref $strings;\n    return grep { $_ eq $substring } @$strings;\n}", '    my
    @filtered = ();', "    $substring ||= \"\";\n    my $filtered_strings;\n    my\
    \ $filtered_string = \"\";\n    foreach my $string (@$strings) {\n        next\
    \ if $string =~ /$substring/;\n        $filtered_string .= \"$string, \";\n  \
    \  }\n    $filtered_string = $filtered_string\n      ? substr($filtered_string,\
    \ 0, -2) # Remove trailing comma\n      : $filtered_string;\n    return $filtered_strings;\n\
    }", "    my ($matches) = map {\n        exists $strings_to_substrings[$_] and\
    \ /$substring/;\n        } @$strings;\n    return @$matches;\n}", "    return\
    \ unless defined($substring);\n    my @result = ();\n    foreach my $string (@$strings)\
    \ {\n        if (($string =~ m/$substring/) && $string !~ /^\\s*$/) {\n      \
    \      push(@result, $string);\n        }\n    }\n    return @result;\n}", " \
    \   my @result = ();\n    my $i = 0;\n    foreach my $string (@$strings) {\n \
    \       if (index($string, $substring) !== -1) {\n            $result[$i] = $string;\n\
    \        }\n        $i++;\n    }\n    return @result;\n}", "    if ($substring)\
    \ {\n        $strings = grep { /$substring/ } @$strings;\n    }\n    return $strings;\n\
    }", "    return grep { !($_ =~ /^($substring)$/s) } @$strings;\n}", '    return
    unless @$strings && $substring;', '    my @strings;', "    my $i = 0;\n    my\
    \ @output = ();\n    while(scalar @$strings) {\n        my $found = 0;\n     \
    \   for my $s (@$strings) {\n            next unless ($s =~ /$substring/);\n \
    \           $found = 1;\n            push @output, $$strings[$i++];\n        }\n\
    \        if (!$found) {\n            push @output, $_;\n        }\n    }\n   \
    \ return @output;\n}", "    my @result = ();\n    my $i = 0;\n    $strings[$i]\
    \ =~ /(?:^|\\s)$substring\\b(?:$|\\s)/g;\n    $i++;\n    while($i < @$strings)\
    \ {\n        my $s = $strings[$i];\n        my $sub = $substring;\n        my\
    \ $length = 0;\n        my $i = 0;\n        while($i < @$strings) {\n        \
    \    my $s2 = $strings[$i];\n            $length += length($s2) - length($s);\n\
    \            $i++;\n        }\n        while($i < @$strings && $length >= 0) {\n\
    \            my $s2 = $strings[$i];\n            if(length($s2) > $length) {\n\
    \                push (@result, $s2);\n            }\n            $length--;\n\
    \            $i++;\n        }\n        $i++;\n    }\n    return @result;\n}",
  "    my @filtered_strings = ();\n    foreach my $string (@$strings) {\n        if\
    \ (index($string, $substring) > -1) {\n            push(@filtered_strings, $string);\n\
    \        }\n    }\n    return @filtered_strings;\n}", "    my $result = ArrayRef->new;\n\
    \    foreach my $str (@$strings) {\n        next if $str =~ $substring;\n    \
    \    $result->[$_] = $str for ++$i;\n    }\n    $result;\n}", "    my @filter;\n\
    \    foreach my $string (values @$strings) {\n        if (index($string, $substring)\
    \ != -1) {\n            push @filter, $string;\n        }\n    }\n    return @filter;\n\
    }", '    my $result = ();', "    return grep(/$substring/,@$strings);\n}", " \
    \   my @return_array = ();\n    foreach my $string ( @$strings ) {\n        next\
    \ unless $string =~ /$substring/i;\n        push(@return_array, $string);\n  \
    \  }\n    return @return_array;\n}", "    my(@filtered, $filtered) = (0, 0);\n\
    \    foreach my $string (@$strings) {\n        next if index($string, $substring)\
    \ == -1;\n        $filtered++;\n        push @filtered, $string;\n    }\n    return\
    \ wantarray ? @filtered : $filtered[0];\n}", "    return @$strings if 0 == @$strings;\n\
    \    return grep { $substring eq $_} @$strings;\n}", "    foreach my $string ($strings)\
    \ {\n        if (index($string, $substring) != -1) {\n            push(@{$strings},\
    \ $string);\n        }\n    }\n    return @$strings;\n}", "    return if scalar\
    \ @$strings == 0;\n    my(@filtered);\n    foreach my $s (@$strings) {\n     \
    \   if (index($s, $substring) >= 0) {\n            push(@filtered, $s);\n    \
    \    }\n    }\n    return @filtered;\n}", "    my $len = length $substring;\n\
    \    my @result = ();\n    foreach my $s (@$strings) {\n        push @result,\
    \ $s unless $s =~ /\\b$substring\\b/i;\n    }\n    return \\@result;\n}", "  \
    \  my($results);\n    foreach my $string (@$strings) {\n        if (index($string,\
    \ $substring) != -1) {\n            $results .= $string;\n        }\n    }\n \
    \   return $results;\n}", "    my @matches = map {\n        /$substring/ ? $_\
    \ : \"${_}[substring]\"\n    } @$strings;\n    return @matches ? @matches : ();\n\
    }", '    my @result;', "    return grep { ! index($_, $substring) } @$strings;\n\
    }", "    my @result;\n    for (@$strings) {\n        next unless index($_, $substring);\n\
    \        push(@result, $_);\n    }\n    @result;\n}", "    my = ();\n    foreach\
    \ my $string ($strings) {\n        if (index($string, $substring) != -1) {\n \
    \           push(@result, $string);\n        }\n    }\n    return;\n}", "    my\
    \ @results;\n    foreach my $string (@$strings) {\n        if (index($string,\
    \ $substring) != -1) {\n            push(@results, $string);\n        }\n    }\n\
    \    @results;\n}", "    return grep {\n        ! grep { /$substring/ } @$strings\n\
    \    } @$strings;\n}", "    my $result = ();\n    foreach(@$strings) {\n     \
    \   if(index($_, $substring) != -1) {\n            $result->($_);\n        }\n\
    \    }\n    return @$result;\n}", "    return grep{!index($_, $substring)} @$strings;\n\
    }", '    my @return = ();', "    return grep($strings->[0] !~ /($substring)/g,\
    \ $strings);\n}", "    my @output;\n    foreach my $string (@$strings) {\n   \
    \     next unless index($string, $substring) != -1;\n        push(@output, $string);\n\
    \    }\n    return @output;\n}", "    my $count = 0;\n    my @filtered = ();\n\
    \    foreach my $string ( @$strings ) {\n        next unless $string =~ /\\b$substring\\\
    b/;\n        $count++;\n        push @filtered, $string;\n    }\n    return $count\
    \ ? @filtered : ();\n}", "    my @result = ();\n    foreach my $s (@$strings)\
    \ {\n        if (index($s, $substring)) {\n            push(@result, $s);\n  \
    \      }\n    }\n    return @result;\n}", '    my(@filtered) = [];', "    return\
    \ @$strings if scalar @$strings == 0;\n    my @filter = $strings;\n    my @filtered\
    \ = ();\n    foreach (@filter) {\n        next if $_ =~ m/$substring/i;\n    \
    \    push(@filtered, $_);\n    }\n    return @filtered;\n}", "    my @results\
    \ = ();\n    foreach my $string (@$strings) {\n        if (index($string, $substring)\
    \ != -1) {\n            push(@results, $string);\n        }\n    }\n    return\
    \ @results;\n}", "    my @filtered;\n    $substring = \"\" if not defined $substring;\n\
    \    # Avoid creating a new array if there's only one element to filter\n    return\
    \ @filtered if 1 == @$strings;\n    foreach my $s (@$strings) {\n        push\
    \ (@filtered, $s) if index($s, $substring) > -1;\n    }\n    return @filtered;\n\
    }", "    my $filtered = [];\n    grep {\n        my $item = $_;\n        my $flag\
    \ = 0;\n        for my $ss (@$strings) {\n            $flag++ if index($ss, $item)\
    \ != -1;\n        }\n        push(@$filtered, $item) if $flag == @$strings;\n\
    \    } @$strings;\n    return @$filtered if @$filtered > 0;\n    return $strings;\n\
    }", "    my($matches) = grep /$substring/,;\n    chomp($matches);\n    return\
    \ $matches;\n}\n</code>\n<|/ a |>\n<| c |>\nThe OP's original code was much more\
    \ efficient than the regex version. I suspect that the regex version would perform\
    \ better, too, but the OP didn't say how long it took to run each one.\n<|/ c\
    \ |>\n<| c |>\n: Ah, yeah, that makes sense. Thanks for the benchmark info.\n\
    <|/ c |>\n<| a |>\n<code>\nmy $string = 'abc';", "    grep { /$substring/i } @$strings;\n\
    }", "    my $result = grep { $_ ~~ $substring };\n    return @$result\n}", " \
    \   $substring =~ s/^\\s+//;\n    $substring =~ s/\\s+$//;\n    $substring =~\
    \ s/^.+\\Q$substring\\E.+$//;\n    return grep { /$substring/ } @$strings;\n}",
  "    my(@filtered_strings) = ();\n    my($start_index);\n    my($end_index);\n \
    \   foreach my $string ( @$strings ) {\n        if ($string =~ /$substring/) {\n\
    \            $start_index = $-[0];\n            $end_index = $-[1];\n        }\n\
    \        push (@filtered_strings, $string) if ($start_index != $end_index);\n\
    \    }\n    return @filtered_strings;\n}", "    my @filtered = ();\n    foreach\
    \ my $string (@$strings) {\n        if (index($string, $substring) > -1) {\n \
    \           push(@filtered, $string);\n        }\n    }\n    return @filtered;\n\
    }", "    my @ret;\n    foreach my $string ($strings) {\n        if (index($string,\
    \ $substring)) {\n            push(@ret, @$strings);\n        }\n    }\n    return\
    \ @ret;\n}", "    if (scalar @$strings == 0) {\n        return ();\n    }\n  \
    \  my $i = 0;\n    my $filtered = ();\n    while ($i < scalar @$strings) {\n \
    \       if (index($$strings[$i], $substring) != -1) {\n            $filtered->push($$strings[$i]);\n\
    \        }\n        $i++;\n    }\n    return $filtered;\n}", "    my($keep, @filtered)\
    \ = ();\n    foreach my $string (@$strings) {\n        if (index($string, $substring)\
    \ > -1) {\n            push @filtered, $string;\n        } else {\n          \
    \  push @$keep, $string;\n        }\n    }\n    if ($@) {\n        $@ =~ s/ at\
    \ .*/ in (@$strings)/e;\n        croak $@;\n    }\n    return @filtered;\n}",
  "    my(@results);\n    foreach my $string (@$strings) {\n        push (@results,\
    \ $string) if (index($string, $substring) > 0);\n    }\n    @results;\n}", " \
    \   return if @$strings == 0;\n    my @result = grep { index($_, $substring) !=\
    \ -1 } @$strings;\n    return @result;\n}", "    my @matches = ();\n    foreach\
    \ my $string ($strings) {\n        if (index($string, $substring)) {\n       \
    \     push(@matches, $string);\n        }\n    }\n    return @matches;\n}", " \
    \   my @filtered_strings;\n    foreach my $string (@$strings) {\n        if (index($string,\
    \ $substring) != -1) {\n            push(@filtered_strings, $string);\n      \
    \  }\n    }\n    @filtered_strings;\n}", "    return grep {$_ ~~ $substring} @$strings;\n\
    }", "    if (@$strings == 0) {\n        return;\n    }", "    \n    return @$strings\
    \ if scalar @$strings == 0;\n    \n    return grep { $_ ~~ $substring } @$strings;\n\
    }", "    my @filtered = ();\n    foreach my $string (@$strings) {\n        push(@filtered,\
    \ $string) unless $string =~ /$substring/;\n    }\n    @filtered;\n}", "    if\
    \ (@$strings == 0) {\n        return [];\n    }\n    my($string) = shift;\n  \
    \  my(@resulting_strings) = [];\n    for (@$strings) {\n        if (index($string,\
    \ $substring) != -1) {\n            push(@resulting_strings, $string);\n     \
    \   }\n    }\n    return @resulting_strings;\n}", '    my @result;', "    my @result\
    \ = (grep { /$substring/ } (@$strings));\n    return @result;\n}", "    my(@results)\
    \ = ();\n    foreach my $s (@$strings) {\n        if($s =~ m/$substring/){\n \
    \           push(@results, $s);\n        }\n    }\n    return @results;\n}", " \
    \   @$strings = map {\n        grep { /$substring/ } @$_\n    } @$strings;\n}",
  "    my @filtered = ();\n    foreach my $s (@$strings) {\n        push(@filtered,\
    \ $s) if grep($substring, $s);\n    }\n    return @filtered;\n}", "    my @strings_with_substring\
    \ = ();\n    foreach my $string (@$strings) {\n        if (index($string, $substring)\
    \ != -1) {\n            push(@strings_with_substring, $string);\n        }\n \
    \   }\n    return @strings_with_substring;\n}", "    my(@result) = ();\n    foreach\
    \ my $string ($strings) {\n        if(index($string, $substring)) {\n        \
    \    push(@result, $string);\n        }\n    }\n    return @result;\n}", "   \
    \ return @$strings if !defined $substring || $substring eq \"\";\n    my @return\
    \ = ();\n    for my $string (@$strings) {\n        push (@return, $string) unless\
    \ $string =~ /$substring/i;\n    }\n    return @return;\n}", "    my(@filtered)\
    \ = ($strings);\n    while (my $string = shift @strings) {\n        next if $string\
    \ =~ /\\Q$substring/;\n        push(@filtered, $string);\n    }\n    return @filtered;\n\
    }", "    my($results);\n    if (@$strings == 0) {\n        return [];\n    } elsif\
    \ (@$strings == 1) {\n        if ($strings[0] =~ /$substring/) {\n           \
    \ return $strings;\n        } else {\n            return [];\n        }\n    }\
    \ else {\n        my $count = 0;\n        $results = ();\n        foreach my $string\
    \ (@$strings) {\n            my $index = index($string, $substring);\n       \
    \     if ($index >= 0) {\n                push (@$results, $string) if $count\
    \ >= 1;\n                $count++;\n            }\n        }\n        return @$results;\n\
    \    }\n}", "    my $found = 0;\n    foreach my $string ($strings) {\n       \
    \ if(index($string, $substring) != -1) {\n            $found = 1;\n          \
    \  last;\n        }\n    }\n    if($found == 1){\n        return $strings;\n \
    \   } else {\n        return undef;\n    }\n}", "    my @out;\n    foreach my\
    \ $str (@$strings) {\n        if (index($str, $substring) != -1) {\n         \
    \   push(@out, $str);\n        }\n    }\n    @out;\n}", "    \n    return map\
    \ { $_ unless /\\b$substring\\b/ } @$strings;\n}", "    if (ref($strings) eq \"\
    ARRAY\") {\n        return map { $_ eq $substring ? $strings : () } @$strings;\n\
    \    }\n    return;\n}", '    my @result;']
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
