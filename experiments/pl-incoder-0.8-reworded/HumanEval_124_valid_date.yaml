name: HumanEval_124_valid_date
language: pl
prompt: "# You have to write a function which validates a given date string and\n\
  # returns 1 if the date is valid otherwise .\n# The date is valid if all of the\
  \ following rules are satisfied:\n# 1. The date string is not empty.\n# 2. The number\
  \ of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12.\
  \ And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11.\
  \ And, the number of days is not less than 1 or higher than 29 for the month 2.\n\
  # 3. The months should not be less than 1 or higher than 12.\n# 4. The date should\
  \ be in the format: mm-dd-yyyy\n# >>> valid_date(\"03-11-2000\")\n# 1\n# >>> valid_date(\"\
  15-01-2012\")\n# \"\"\n# >>> valid_date(\"04-0-2040\")\n# \"\"\n# >>> valid_date(\"\
  06-04-2020\")\n# 1\n# >>> valid_date(\"06/04/2020\")\n# \"\"\nsub valid_date {\n\
  \    my($date) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&valid_date;\n\
  \        if(eq_deeply($candidate->(\"03-11-2000\"),1)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15-01-2012\"\
  ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  04-0-2040\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"06-04-2020\"),1)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"01-01-2007\"\
  ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  03-32-2011\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"04-31-3000\"),\"\
  \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  06-06-2005\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"21-31-2000\"),\"\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"04-12-2003\"\
  ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  04122003\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"20030412\"),\"\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2003-04\"\
  ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  2003-04-12\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"04-2003\"),\"\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my %year = (1 => \"31\", 3 => \"30\", 5 => \"29\", 7 => \"28\"\
    , 10 => \"31\", 12 => \"30\", 0 => \"29\");\n    my(@months, @days, @year) = split('-',\
    \ $date);\n    my(@day, @month, @year) = split('-', $date);\n    if (@day < 1\
    \ or @day > @days[0]) {\n        return \"\";\n    }\n    if (@month < 1 or @month\
    \ > @months[0]) {\n        return \"\";\n    }\n    if (@year < 1 or @year > $year{$month[0]})\
    \ {\n        return \"\";\n    }\n    return 1;\n}", "    chomp($date);\n    my\
    \ ($mon, $day, $year) = split(\"-\", $date);\n    return (length($date) && $day\
    \ <= 31 && $day > 0 && $month <= 12 &&\n            ($day < 31 && $day > 30 ||\
    \ $day < 29 || ($month != 1 && $month != 4));\n}", "    die \"Invalid date: $date\"\
    \ unless length $date;\n    my @date = (split /-/, $date);", '    my($valid) =
    shift;', "    # validate the date string\n    if ($date !~ /^\\s*$/ ||\n     \
    \   $date !~ /^(\\d{1,2}-\\d{1,2}-\\d{4})$/) {\n        $date = \"\";\n    }\n\
    \    # validate the month\n    if ($date !~ /^\\d{1,2}-\\d{1,2}-\\d{1,4}$/) {\n\
    \        $date = \"\";\n    }\n    # validate the number of days\n    if ($date\
    \ !~ /^\\d{1,2}-\\d{1,2}-\\d{1,2}$/) {\n        $date = \"\";\n    }\n    # validate\
    \ the month\n    if ($date !~ /^\\d{1,2}$/) {\n        $date = \"\";\n    }\n\
    \    # validate the number of days\n    if ($date !~ /^\\d{1,2}$/) {\n       \
    \ $date = \"\";\n    }\n    return $date;\n}", "    my($valid) = 0;\n    my(@valid_date)\
    \ = (\"31-12-9999\",\"29-12-9999\",\"28-12-9999\",\"27-12-9999\",\"26-12-9999\"\
    ,\"25-12-9999\",\"24-12-9999\",\"23-12-9999\",\"22-12-9999\",\"21-12-9999\",\"\
    20-12-9999\",\"19-12-9999\",\"18-12-9999\",\"17-12-9999\",\"16-12-9999\",\"15-12-9999\"\
    ,\"14-12-9999\",\"13-12-9999\",\"12-12-9999\",\"11-12-9999\",\"10-12-9999\",\"\
    9-12-9999\",\"8-12-9999\",\"7-12-9999\",\"6-12-9999\",\"5-12-9999\",\"4-12-9999\"\
    ,\"3-12-9999\",\"2-1-9999\",\"1-4-9999\",\"0-5-9999\",\"0-6-9999\",\"0-7-9999\"\
    ,\"0-8-9999\",\"0-9-9999\",\"0-10-9999\",\"0-11-9999\",\"0-12-9999\");", "   \
    \ $date =~ /^([0-9]{2}-[0-9]{1,2}-[0-9]{4})$/i;\n    return $date unless $date\
    \ ne \"\" && $date =~ m!^([0-9]{2}-[0-9]{1,2}-[0-9]{4})$!i;\n    my(@months) =\
    \ qw( January February March April May June July August September October November\
    \ December );\n    my(@days) = qw( 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18\
    \ 19 20 21 22 23 24 25 26 27 28 29 30 31 );\n    my(@years) = qw( 2000 2001 2002\
    \ 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018\
    \ 2019 );\n    my %valid = map { $_ => 1 } qw(\n        01 02 03 04 05 06 07 08\
    \ 09 10 11 12\n        13 14 15 16 17 18 19 20 21 22 23\n        24 25 26 27 28\
    \ 29 30 31 01 02 03 04 05 06 07\n        08 09 10 11 12 13 14 15 16 17 18 19 20\
    \ 21 22 23\n        24 25 26 27 28 29 30 31\n        01 02 03 04 05 06 07 08 09\
    \ 10 11 12 13 14 15 16 17 18 19 20 21 22 23\n        24 25 26 27 28 29 30 31\n\
    \    );\n    $date =~ /^([0-9]{2})-([0-9]{1,2})-([0-9]{4})$/i;\n    my $year \
    \ = $3;\n    my $month = $1;\n    my $day   = $2;", "    if(!$date) {\n      \
    \  die \"Date string cannot be empty\";\n    } elsif(!length($date)) {\n     \
    \   die \"Date string cannot be empty\";\n    } elsif(!($date =~ m!^\\d{2}-\\\
    d{2}-\\d{4}$!)) {\n        die \"Incorrect format for date\";\n    } elsif(!($date\
    \ =~ m!^(0[1-9]|[12]\\d|3[01])-(0[1-9]|1[012])-(\\d{4})$!)) {\n        die \"\
    Incorrect format for date\";\n    } elsif(!($date =~ m!^(0[1-9]|[12]\\d|3[01])-(0[1-9]|1[012])-(\\\
    d{4})$!)) {\n        die \"Incorrect format for date\";\n    }", "    my @date_string\
    \ = split('-', $date);\n    my $year = $date_string[0];\n    my $month = $date_string[1];\n\
    \    my $day = $date_string[2];\n    my $valid_day = 1;\n    my $valid_month =\
    \ 1;\n    foreach my $m (@months) {\n        if ((($m == 1) || ($m == 3) || \n\
    \            (($m == 5) || ($m == 7) || \n            (($m == 8) || ($m == 10)\
    \ || \n            (($m == 12)))) {\n            $valid_month++;\n        }\n\
    \        if ($m == 2) {\n            my $count = 0;\n            my $count_m =\
    \ 0;\n            foreach my $d (@days) {\n                $d++;\n           \
    \     if ($d == 29) {\n                    $d = 0;\n                    $count_m++;\n\
    \                }\n                if ($d == 28) {\n                    $d =\
    \ 0;\n                    $count++;\n                }\n                if ($count_m\
    \ == 2) {\n                    $valid_day = 1;\n                    $count = 1;\n\
    \                    break;\n                }\n            }\n            if\
    \ ($count == 1) {\n                $valid_day = 1;\n            }\n        }\n\
    \        if ($day == $count_m) {\n            $valid_day = 1;\n        }\n   \
    \ }\n    if ($day == 29 && $month == 3 && $year == 2020) {\n        $valid_day\
    \ = 1;\n    }\n    if ($day == 28 && $month == 4 && $year == 2040) {\n       \
    \ $valid_day = 1;\n    }\n    if ($day > 29 && $month > 12 && $year > 2040) {\n\
    \        $valid_day = 0;\n    }\n    if ($day < 1 && $month < 1 && $year < 1)\
    \ {\n        $valid_day = 0;\n    }\n    if ($valid_day == 1) {\n        return\
    \ $date;\n    }\n    return \"\";\n}\n</code>\n<|/ a |>\n<| a |>\nHere's a version\
    \ using regex that I think will work:\n<code>\n$date = \"05-21-2001\";\n$date\
    \ =~ /^(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])-(20[01][0-9])$/;\n</code>\n\
    The regex checks that the first two digits of the year are in the range 1-12,\
    \ the first two digits of the month are in the range 1-12, then the third digits\
    \ are in the range 20-99.\n<|/ a dscore=0 tags=regex,perl |>\n<| a |>\nI wrote\
    \ this regex to validate dates in format mm/dd/yyyy\n<code>\n/^(0?[1-9]|[12]\\\
    d|3[01])\\/(0?[1-9]|1[012])\\/(19\\d{2}|20[01]\\d)$/\n</code>\nIt also allows\
    \ dates from 19", "    chomp($date);\n    my $days;\n    my $months;\n    my $years;\n\
    \    my $valid_days = 0;\n    my $valid_months = 0;\n    my $valid_years = 0;\n\
    \    chomp($date);\n    my $valid_days_regex = qr/1[0-2]|(?:0?[1-9])|(?:1[0-2])/;\n\
    \    my $valid_months_regex = qr/1[0-2]|(?:0?[1-9])|(?:1[0-2])|(?:JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC)/;\n\
    \    my $valid_years_regex = qr/1[0-2]|(?:0?[1-9])|(?:1[0-2])|(?:2012|2013|2014|2015|2016|2017|2018|2019|2020)/;\n\
    \    if ($date =~ /^$valid_days_regex$/) {\n        $days = 1;\n    } elsif ($date\
    \ =~ /^$valid_months_regex$/) {\n        $months = 1;\n    } elsif ($date =~ /^$valid_years_regex$/)\
    \ {\n        $years = 1;\n    } elsif ($date =~ /^$valid_days_regex|$valid_months_regex|$valid_years_regex/)\
    \ {\n        $valid_days = 1;\n    }\n    if ($valid_days == 1 && $months == 1\
    \ && $years == 1) {\n        return 1;\n    }\n    return 0;\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nThat would give a false positive on `01-00-2012`. And that's\
    \ also a reasonable result for a date of January 1st of 2012, but not a valid\
    \ one.\n<|/ c |>\n<| c |>\nYeah, I was going to suggest that too.\n<|/ c |>\n\
    <| a |>\nI took this from the Perlmonks page for the DateTime module. I think\
    \ it's actually a better date validation than what you have.\n<code>", "    if($date\
    \ eq \"\") {\n        return 0;\n    }", "    return 0 unless length($date);\n\
    \    return 0 unless $date =~ m/^(\\d\\d-\\d\\d-\\d\\d\\d\\d)$/;\n    return 0\
    \ unless $date =~ m/(\\d\\d)-(\\d\\d)-(\\d\\d\\d\\d)/;\n    return 0 unless (\
    \ ( $2 > 0 && $2 <= 12 ) || ( $2 <= 1 && $2 >= 31 ) || ( $2 <= 4 && $2 >= 30 )\
    \ || ( $2 <= 2 && $2 >= 29 ) );\n    return 1;\n}", "    my $valid_date = 1;\n\
    \    \n    my $day = substr($date, 0, 2);\n    my $month = substr($date, 3, 2);\n\
    \    my $year = substr($date, 6, 4);", "    # Your code goes here:\n    my $ret\
    \ = 0;\n    if ( $date eq \"\" ) {\n        $ret = 0;\n    } elsif ( $date =~\
    \ m/([0-9]{2})-([0-9]{2})-([0-9]{4})/ ) {\n        my $year = $1;\n        my\
    \ $month = $2;\n        my $day = $3;\n        if ( $month < 1 || $month > 12\
    \ ) {\n            $ret = 0;\n        } elsif ( $day < 1 ) {\n            $ret\
    \ = 0;\n        } elsif ( $day > 29 ) {\n            $ret = 0;\n        } elsif\
    \ ( $day > 31 ) {\n            $ret = 0;\n        } elsif ( $day > 30 ) {\n  \
    \          $ret = 0;\n        } elsif ( $day > 31 ) {\n            $ret = 0;\n\
    \        } elsif ( $day > 30 ) {\n            $ret = 0;\n        } elsif ( $day\
    \ > 31 ) {\n            $ret = 0;\n        } elsif ( $day > 30 ) {\n         \
    \   $ret = 0;\n        } elsif ( $day > 31 ) {\n            $ret = 0;\n      \
    \  } elsif ( $day > 29 ) {\n            $ret = 0;\n        } elsif ( $day > 31\
    \ ) {\n            $ret = 0;\n        } elsif ( $day > 30 ) {\n            $ret\
    \ = 0;\n        } elsif ( $day > 31 ) {\n            $ret = 0;\n        } elsif\
    \ ( $day > 30 ) {\n            $ret = 0;\n        } elsif ( $day > 31 ) {\n  \
    \          $ret = 0;\n        } elsif ( $day > 30 ) {\n            $ret = 0;\n\
    \        } elsif ( $day > 31 ) {\n            $ret = 0;\n        } elsif ( $day\
    \ > 30 ) {\n            $ret = 0;\n        } elsif ( $day > 31 ) {\n         \
    \   $ret = 0;\n        } elsif ( $day > 30 ) {\n            $ret = 0;\n      \
    \  } elsif ( $day > 31 ) {\n            $ret = 0;\n        } elsif ( $day > 30\
    \ ) {\n            $ret = 0;\n        } elsif ( $day > 31 ) {\n            $ret\
    \ = 0;\n        } elsif ( $day > 30 ) {\n            $ret = 0;\n        } elsif\
    \ ( $day > 31 ) {\n            $ret = 0;\n        } elsif ( $day > 30 ) {\n  \
    \          $ret = 0;\n        } elsif ( $day > 31 ) {\n            $ret = 0;\n\
    \        } elsif ( $day > 30 ) {\n            $ret = 0;\n        } elsif ( $day\
    \ > 31 ) {\n", "    my($day, $month, $year) = split \"/\", $date;\n    my(@months)\
    \ = (\"1\", \"3\", \"5\", \"7\", \"8\", \"10\", \"12\", \"4\", \"6\", \"9\", \"\
    11\", \"2\");\n    my(@days) = (\"31\", \"30\", \"29\");", "    $date =~ s/^\\\
    s+//;\n    if ($date eq \"\") {\n        return 0;\n    }\n    my($days_temp,\
    \ $months_temp, $years_temp) = split \"/\", $date;\n    # Split the date into\
    \ individual parts for checking\n    my($days, $months, $years) = ($days_temp\
    \ =~ /([0-9]+)/); #split the date into days, months and years.\n    my($month_length,\
    \ $days_length, $years_length) = ();\n    my $month_length = ($months_temp =~\
    \ /([0-9]+)/); #split the date into months, days and years.\n    my $days_length\
    \ = ($days_temp =~ /([0-9]+)/);\n    my $years_length = ($years_temp =~ /([0-9]+)/);\n\
    \    # If the years are not valid, return 0\n    if ($years_length > 12) {\n \
    \       return 0;\n    }\n    if ($years_length < 1 || $years_length > 12) {\n\
    \        return 0;\n    }\n    my $invalid_day = 0;\n    # If the number of days\
    \ are not valid, return 0\n    my $invalid_month = 0;\n    my $invalid_year =\
    \ 0;\n    # If the number of months are not valid, return 0\n    foreach my $i\
    \ ( 1 .. $months_length ) {\n        # Increment the invalid month counter if\
    \ the month is invalid.\n        # Set the invalid_day to 0 and invalid_year to\
    \ 0 if the month is not valid.\n        if (($i + 1) > $months_length) {\n   \
    \         $invalid_month = $i + 1;\n            $invalid_day = invalid_day($days_length,\
    \ $month_length);\n            $invalid_year = invalid_year($years_length);\n\
    \        } else {\n            $invalid_month = 0;\n            $invalid_day =\
    \ invalid_day($days_length, $month_length);\n            $invalid_year = 0;\n\
    \        }\n        # Check if the month is valid based on the number of days\
    \ and years\n        if ($months_length eq $invalid_month) {\n            # If\
    \ the month is not valid, return 0\n            return 0;\n        }\n    }\n\
    \    # If the number of days and months are valid, return 1\n    if ($invalid_day\
    \ > 31 || $invalid_day < 1 ) {\n        return 0;\n    }\n    if ($invalid_year\
    \ > 30 || $invalid_year < 1 ) {\n        return 0;\n    }\n    # If the months\
    \ are valid, return 1\n    if ($invalid_month > 12 || $invalid_month < 1 ) {\n\
    \        return 0;\n    }\n    if ($invalid_day == 31) {\n        if ($invalid_month\
    \ == 1) {\n            if ($years_length eq 4 || $years_length eq 5) {\n     \
    \           if ($years_length eq 4 && $invalid_year eq 0) {\n                \
    \    return 1;\n", "    chomp($date);\n    $date =~ /^(\\d\\d)-(\\d\\d)-(\\d\\\
    d\\d\\d)$/;\n    if(length($1) != 2) {\n        return 0;\n    }\n    if($2 <=\
    \ 12 && $2 >= 1) {\n        return 0;\n    }\n    if($2 <= 31 && $2 >= 1) {\n\
    \        return 0;\n    }\n    if($2 <= 30 && $2 >= 1) {\n        return 0;\n\
    \    }\n    if($2 <= 29 && $2 >= 1) {\n        return 0;\n    }\n    if($2 <=\
    \ 12 && $2 >= 1) {\n        return 0;\n    }\n    return 1;\n}", "    # Check\
    \ if date string is empty or not\n    chomp($date);\n    return 1 unless $date;",
  "    if ($date eq \"\") {\n        return 0;\n    }\n    if ($date =~ m/^\\d{1,2}-\\\
    d{1,2}-\\d{4}$/) {\n        my $months = 30;\n        if ($date =~ m/^(?:01|03|05|07|08|10|12)(?:3[0-1]|[12][0-9]|0[1-4])$/)\
    \ {\n            $months = 29;\n        }\n        my $days = $date =~ m/^(\\\
    d{1,2})$/;\n        return 1 if ($days > 0 and $days < 32 and $months > 0 and\
    \ $months < 12);\n        return 1 if ($days > 0 and $days < 31 and $months >\
    \ 0 and $months < 13);\n        return 1 if ($days > 0 and $days < 30 and $months\
    \ > 0 and $months < 14);\n        return 1 if ($days > 0 and $days < 29 and $months\
    \ > 0 and $months < 15);\n    }\n    return \"\";\n}\n</code>\n<|/ a dscore=0\
    \ tags=validation,regex,perl |>\n<| c |>\nThis code only works if I write `my\
    \ $date = '12-31-2000';`. It won't work with any other input such as `my $date\
    \ = '12-34-2000';` for example\n<|/ c |>\n<| c |>\nThat is because you did not\
    \ provide that requirement in the question. I will update my answer to reflect\
    \ that\n<|/ c |>\n<| c |>\nI just edited my question to add the requirement. Sorry\
    \ about that\n<|/ c |>\n<| a tags=validation,regex,perl |>\nThis regex should\
    \ do the trick:\n<code>\n^(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])-\\d{4}$\n</code>\n\
    Here's a live example.\nEDIT: I changed the regex to allow 1-31 days in months\
    \ and 1-29 days in months. Now, it will work in the example you gave.\nEDIT 2:\
    \ I updated this answer to include the additional requirements given in the comment\
    \ by\n<|/ a dscore=0 |>\n<| c |>\nThis regex will allow 30 days in months and\
    \ 29 days in months. I changed it to match both requirements.\n<|/ c |>\n<| c\
    \ |>\nYour regex will allow 30 and 29 days in months. That's not what the OP wants.\n\
    <|/ c |>\n<| c |>\nYes, but my regex will allow 30 days in months and 29 days\
    \ in months. That is what I want, no?\n<|/ c |>\n<| c |>\nNo. Your regex ", " \
    \   my @months = qw(January February March April May June July August September\
    \ October November December);\n    my @days = qw(31 30 29 28 31 30 31 30 31 30\
    \ 31);", "    return 1 if (defined $date) && (length($date) > 0);\n    if ($date\
    \ =~ /^(\\d{0,4})-(\\d{1,2})-(\\d{1,2})$/) {\n        return 1 if ($3 >= 1 &&\
    \ $3 <= 12);\n        return 1 if ($2 >= 1 && $2 <= 12);\n        return 1 if\
    \ ($1 >= 1 && $1 <= 31);\n        return 1 if ($4 >= 4 && $4 <= 6);\n        return\
    \ 1 if ($6 >= 4 && $6 <= 6);\n        return 1 if ($2 > 29 || ($3 > 29 || ($4\
    \ > 29 || ($6 > 29))));\n        return 1;\n    }\n    return 1;\n}", "    if\
    \ ($date eq \"\") {\n        1;\n    }\n    elsif ($date =~ /^\\d{4}-\\d{2}-\\\
    d{2}/) {\n        1;\n    }\n    elsif ($date =~ /^([1-2][1-9]{1}|[3][1-9]{1}|[5][1-9]{1}|[7][1-9]{1}|[8][1-9]{1}|[10][1-9]{1}|[12][1-9]{1})-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])$/)\
    \ {\n        1;\n    }\n    elsif ($date =~ /^([4][1-9]{1}|6[1-9]{1}|9[1-9]{1}|11[1-9]{1}|[12][1-9]{1})-(0?[1-9]|1[0-2])-(0?[1-9]|[12][0-9]|3[01])$/)\
    \ {\n        1;\n    }\n    elsif ($date =~ /^([6][1-9]{1}|9[1-9]{1}|11[1-9]{1}|[3][1-9]{1}|[5][1-9]{1}|[7][1-9]{1}|[8][1-9]{1}|[10][1-9]{1}|[12][1-9]{1})-(0?[1-9]|1[0-2])-(0?[1-9]|[12][0-9]|3[01])$/)\
    \ {\n        1;\n    }\n    elsif ($date =~ /^([9][1-9]{1}|11[1-9]{1}|[2-9]{1}|1[1-9]{1}|[3][1-9]{1}|[5][1-9]{1}|[7][1-9]{1}|[8][1-9]{1}|[10][1-9]{1}|[12][1-9]{1})-(0?[1-9]|1[0-2])-(0?[1-9]|[12][0-9]|3[01])$/)\
    \ {\n        1;\n    }\n    elsif ($date =~ /^(0?[1-9]|1[0-2])-(0?[1-9]|[12][0-9]|3[01])-\\\
    d{4}$/) {\n        1;\n    }\n    elsif ($date =~ /^(0?[1-9]|1[0-2])-(0?[1-9]|[12][0-9]|3[01])\\\
    /(0?[1-9]|1[0-2])-(0?[1-9]|[12][0-9]|3[01])$/) {\n        1;\n    }\n    elsif\
    \ ($date =~ /^(0?[1-9]|1[0-2])\\/(0?[1-9]|1[0-2])\\/\\d{4}$/) {\n        1;\n\
    \    }\n    elsif ($date =~ /^(0?[1-9]|1[0-2])\\/(0?[1-9]|1[0-2])\\/(0?[1-9]|[12][0-9]|3[01])$/)\
    \ {\n        1;\n    }\n    else {\n        \"\";\n", "    return \"\" if $date\
    \ eq \"\";\n    my(@mm) = split(\"-\", $date);\n    my $d = $mm[2];\n    my $m\
    \ = $mm[1];\n    my $y = $mm[0];\n    my $months = array(\"\", \"January\", \"\
    February\", \"March\", \"April\", \"May\", \"June\",\n                       \"\
    July\", \"August\", \"September\", \"October\", \"November\", \"December\");\n\
    \    my $month_lengths = array(31, 28, 31, 30, 31, 30, 29, 31, 31, 30, 31, 30,\
    \ 31);\n    my $days;\n    my $invalid_date = \"\";\n    if ($d < 1 || ($d < 31\
    \ && $m == 0) || ($d > $month_lengths[$m-1]) || ($d > 29 && $m == 2)) {\n    \
    \    $invalid_date = 1;\n    }\n    for my $m (@mm) {\n        if ($m >= 1 &&\
    \ ($m <= 12) && ($m != $d)) {\n            $invalid_date = 1;\n        }\n   \
    \ }\n    return $invalid_date ? \"\" : 1;\n}\n</code>\n<|/ a dscore=3 |>\n<| c\
    \ |>\n`date` only accepts `YYYY-MM-DD` format. If you want to use `dd-mm-yyyy`,\
    \ use `date_format` from [Date::Manip](http://search.cpan.org/perldoc?Date%3A%3ADict%3A%3AManip#date_format-TTM-string_002c-format_string-args-)\n\
    <|/ c |>\n<| c |>\n: Thanks for pointing that out, I must have missed that. I\
    \ edited the post accordingly.\n<|/ c |>\n<| c |>\nThank you for sharing this.\
    \ But how would you implement the function `valid_date`?\n<|/ c |>\n<| c |>\n\
    I updated the post with an implementation. Note that the `valid_date` function\
    \ isn't very efficient (it iterates through all months and days even though it\
    \ only needs to check the month and day).\n<|/ c |>\n<| c |>\nThanks, I used your\
    \ code as a basis for my implementation which I'll post below. But thank you for\
    \ all your help and your time.\n<|/ c |>\n<| a dscore=3 |>\nI wanted to add my\
    \ own implementation using code from the answer from and some other sources. I\
    \ chose to validate a date in dd/mm/yyyy format which should be invalid on 12/31/99\
    \ or 12/31/9999 etc.\n<code>", '    my($days_before_days_in_month) = @_;', " \
    \   if ($date =~ /\\A\\s*$/ && $date =~ /(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])\\\
    -(\\d{4})\\z/ ) {\n        return 1;\n    }\n    return \"\";\n}", "    my($day,\
    \ $month, $year) = (0,0,0);\n    my($years) = 0;\n    my($months) = 0;\n    my($days)\
    \ = 0;\n    my($valid) = 0;\n    $date =~ /^([0-9]+-){1}([0-9]+-){2}([0-9]+)$/;\n\
    \    if (defined $1 and $1 ne \"\" and $1 < 1 and $1 > 31 and\n           defined\
    \ $2 and $2 ne \"\" and $2 < 1 and $2 > 31 and\n           defined $3 and $3 ne\
    \ \"\" and $3 < 1 and $3 > 31 and\n           defined $4 and $4 ne \"\" and $4\
    \ < 1 and $4 > 31) {\n        $valid = 1;\n    } else {\n        $valid = \"\"\
    ;\n    }\n    $day = $1;\n    $month = $2;\n    $year = $3;\n    if ($day eq \"\
    \" and $month eq \"\" and $year eq \"\") {\n        $valid = \"\";\n    }\n  \
    \  if ($day ne \"\") {\n        $days = $day < 1 ? 0 : $day;\n    }\n    if ($month\
    \ ne \"\") {\n        $months = $month < 1 ? 0 : $month;\n    }\n    if ($year\
    \ ne \"\") {\n        $years = $year < 1 ? 0 : $year;\n    }\n    if ($days ne\
    \ \"\" and $months ne \"\" and $years != 0 and\n       $days < 1 or $months <\
    \ 1 or $years < 1) {\n        $valid = \"\";\n    }\n    if ($days ne \"\" and\
    \ $months ne \"\" and $years == 0 and\n       $days > 31 or $months > 12 or $years\
    \ > 11) {\n        $valid = \"\";\n    }\n    if ($days ne \"\" and $months ne\
    \ \"\" and $years == 0 and\n       $days > 29 or $months > 12) {\n        $valid\
    \ = \"\";\n    }\n    if ($valid eq \"\" and $day ne \"\" and $month ne \"\" and\
    \ $year ne \"\") {\n        $valid = 1;\n    }\n    if ($valid eq \"\" and $day\
    \ ne \"\" and $month ne \"\" and $year ne \"\") {\n        $valid = 1;\n    }\n\
    \    if ($valid eq \"\" and $day ne \"\" and $month ne \"\" and $year ne \"\"\
    ) {\n        $valid = 1;\n    }\n    if ($valid eq \"\" and $day ne \"\" and $month\
    \ ne \"\" and $year ne \"\") {\n        $valid = 1;\n    }\n    if ($valid eq\
    \ \"\" and $day ne \"\" and $month ne \"\" and $year ne \"\") {\n        $valid\
    \ = 1;\n    }\n    if ($valid eq \"\" and $", "    $date =~ /^([0-9]{2})-([0-9]{2})-([0-9]{4})$/;\n\
    \    ($month, $day, $year) = ('01', '-31', '-99');\n    if (length($1) && $1 <\
    \ '01') {\n        ($month, $day) = ('01', '-29');\n    } elsif (length($1) &&\
    \ $1 > '12') {\n        ($month, $day) = ('12', '-31');\n    } elsif ($1 > '12'\
    \ || !($1 =~ /^([0-9]){0,1}\\-/)) {\n        ($month, $day) = ('01', '-30');\n\
    \    } elsif ($2 > '31' || !($2 =~ /^([0-9]){0,1}\\-/)) {\n        ($month, $day)\
    \ = ('01', '-29');\n    } elsif ($3 > '30' || !($3 =~ /^([0-9]){0,1}\\-/)) {\n\
    \        ($month, $day) = ('01', '-28');\n    } elsif ($4 > '29' || !($4 =~ /^([0-9]){0,1}\\\
    -/)) {\n        ($month, $day) = ('01', '-27');\n    } else {\n        return\
    \ 0;\n    }\n    if ($month > '12' || $month < '01' || $day > '29' || $day < '01')\
    \ {\n        return 0;\n    }\n    return 1;\n}", "    return $date if ($date\
    \ eq '');\n    my $year = $date =~ /(\\d\\d?)\\-(\\d\\d?)\\-(\\d\\d\\d\\d)/;\n\
    \    $year = ($year + 1900) if ($year == 0);\n    my @months = (\"01\", \"03\"\
    , \"05\", \"07\", \"08\", \"10\", \"12\");\n    my @days = (\"01\", \"03\", \"\
    05\", \"07\", \"08\", \"10\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\",\
    \ \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\"\
    , \"28\", \"29\", \"30\", \"31\");\n    my @days_29 = (\"04\", \"06\", \"09\"\
    , \"11\", \"12\");\n    my @months_29 = (\"04\", \"06\", \"09\", \"11\", \"12\"\
    );\n    my @months_30 = (\"02\", \"04\", \"06\", \"09\", \"11\", \"12\");\n  \
    \  my @months_31 = (\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\");\n\
    \    my @months_12 = (\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\",\
    \ \"08\", \"09\", \"10\", \"11\", \"12\");\n    return 1 if ($date !~ /^\\d+$/);\n\
    \    my($day, $month, $year) = ($1, $2, $3);\n    $month--;\n    $month++ if ($month\
    \ > 12);\n    $day--;\n    $day++ if ($day > 30);\n    $month--; $month++ if ($month\
    \ < 1);\n    $day--; $day++ if ($day < 1);\n    if ($month < 1){\n        $month\
    \ = 1; $year--;\n    } elsif ($month > 12) {\n        $month = 12; $year++;\n\
    \    }\n    foreach my $m (@months) {\n        if ($day > $months[$m]) { $day\
    \ = 1; }\n        if ($day <= $months[$m]) {\n            $day = 59;\n       \
    \     $month++;\n            if ($month > 12) {\n                $month = 1;\n\
    \                $year++;\n            } elsif ($month == 1) {\n             \
    \   $month++;\n                if ($day > $months[0]) { $day = 1; }\n        \
    \        if ($day <= $months[0]) {\n                    $day = 59;\n         \
    \           $month--;\n                }\n            }\n        }\n    }\n  \
    \  if ($month > 12) {\n        $month = 12; $year++;\n    } elsif ($month == 1)\
    \ {\n        $month++;\n        if ($day > $months[0]) { $day = 1; }\n       \
    \ if ($day <= $months[0]) {\n            $day = 59;\n", "    if ($date) {\n  \
    \      $date =~ /^((0[1-9]|1[012])[-/]){2,}(0[1-9]|[12][0-9]|3[01])[-/](19|20)\\\
    d\\d$/;\n    }\n    elsif ($_[0]) {\n        $_[0] =~ /^((0[1-9]|1[012])[-/]){2,}(0[1-9]|[12][0-9]|3[01])[-/](19|20)\\\
    d\\d$/;\n    }\n    else {\n        return \"\";\n    }\n    \n    if ($date)\
    \ {\n        return 1;\n    }\n    else {\n        return \"\";\n    }\n}", " \
    \   my($valid_date, $day, $month, $year) = split('-',$date);\n    # Check the\
    \ date string is not empty.\n    if ($date eq \"\") {\n        return \"0\";\n\
    \    }\n    # Check the number of days is not less than 1 or higher than 31 days\
    \ for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher\
    \ than 30 days for months 4,6,9,11. And, the number of days is not less than 1\
    \ or higher than 29 for the month 2.\n    if ($day < 1 || $day > 31 || ($month\
    \ == 2 && $day > 29)) {\n        return \"0\";\n    }\n    # Check the months\
    \ should not be less than 1 or higher than 12.\n    if ($month < 1 || $month >\
    \ 12) {\n        return \"0\";\n    }\n    # Check the date should be in the format:\
    \ mm-dd-yyyy\n    if ($month == 2 && $day > 29 && $day < 31 && ($year == $date_formats[$month]\
    \ || $year < $date_formats[$month])) {\n        return \"0\";\n    }\n    # Return\
    \ 1 if the date is valid otherwise \"\".\n    return \"1\";\n}", "    return unless\
    \ ($date);\n    my($days,$month,$year) = split '-', $date;\n    my @errors;\n\
    \    if (length($date)) {\n        if ($days < 1 || $days > 31 || $month < 1 ||\
    \ $month > 12) {\n            push(@errors, $date.' is not a valid date string.');\n\
    \        }\n    }\n    if (scalar(@errors) == 0) {\n        if ($days > 0 && $days\
    \ > 29) {\n            push(@errors, $date.' is not a valid date string.');\n\
    \        }\n        if ($month > 0 && $month > 12) {\n            push(@errors,\
    \ $date.' is not a valid date string.');\n        }\n    }\n    if (scalar(@errors)\
    \ == 0) {\n        if ($year =~ /^\\d{1,4}$/) {\n            if ($month >= 1 &&\
    \ $month <= 12) {\n                if ($days > 0 && $days > 29) {\n          \
    \          push(@errors, $date.' is not a valid date string.');\n            \
    \    }\n            } else {\n                push(@errors, $date.' is not a valid\
    \ date string.');\n            }\n        } else {\n            push(@errors,\
    \ $date.' is not a valid date string.');\n        }\n    }\n    if (scalar(@errors)\
    \ == 0) {\n        return 1;\n    }\n    my $err = $errors[0];\n    if ($err =~\
    \ /^((\\d{1,2})-(\\d{1,2})-\\d{4})$/) {\n        $err .= \" ('\".$3.\"' and '\"\
    .$4.\"')\";\n    }\n    my $message = 'The date string \\'$date\\' is not valid:\
    \ $err';\n    if (scalar(@errors) == 1) {\n        $message .= '.';\n    }\n \
    \   elsif (scalar(@errors) == 2) {\n        $message .= ', please check your date\
    \ string';\n    }\n    elsif (scalar(@errors) == 3) {\n        $message .= ',\
    \ and please check your date string';\n    }\n    return $message;\n}", "    return\
    \ 1 unless $date;\n    $date =~ m/^(\\d)\\-(\\d{2})\\-(\\d{4})$/;\n    my $month\
    \ = $1;\n    my $day   = $2;\n    my $year  = $3;", "    $date =~ s/^\\s*|\\s*$//g;\n\
    \    $date =~ s/^([0-9]{2})(-([0-9]{2}))?\\1([0-9]{2})(-([0-9]{2}))?$/\\1\\3\\\
    4\\5/g;\n    my($mon, $day, $year) = ($1, $2, $3);\n    return 0 unless $date\
    \ =~ /^([0-9]{2})(-([0-9]{2}))?\\1([0-9]{2})(-([0-9]{2}))?$/;\n    my(@mon) =\
    \ ($1, $2, $3);\n    return 0 unless @mon == 1 && @mon > 1 && @mon <= 12;\n  \
    \  my(@day) = ($1, $2, $3);\n    return 0 unless @day == 1 && @day > 1 && @day\
    \ <= 31;\n    my(@year) = ($1, $2, $3);\n    return 0 unless @year == 1 && @year\
    \ > 0 && @year <= 99;\n    return 1 if ($day == $mon && $year == $day+1900);\n\
    \    return 0 if ($day > $mon || $day > $year);\n    return 1 if ($day < $mon\
    \ || $day < $year);\n    return 0 if ($day == $mon && $day == $year);\n    return\
    \ 1 if ($day == $year && $day == $mon+1);\n    return 0 if ($day == $year+1);\n\
    \    return 1;\n}", "    if(!length($date)) {\n        return 1;\n    }", "  \
    \  # Write your code here.\n}\n</code>\n<|/ a |>\n<| a tags=perl,date,regex |>\n\
    <code>\nmy $date = '12-27-2015'; \nif ($date =~ m/^(?:1[0-2]|0?[1-9])-(?:30|[12][0-9]|0?[1-9])-(?:19|[2-9][0-9]|0?[1-9])$/\
    \ ) {\nprint \"Valid\\n\";\n}\nelse {\nprint \"Invalid\\n\";\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=perl,date,regex |>\nPerl's core module DateTime will\
    \ let you do this\n<code>\nuse strict;\nuse warnings;\nuse DateTime;", "    if\
    \ ($date eq \"\") {\n        return \"\";\n    }\n    my $day = parse_date($date);\n\
    \    if ($day == 0) {\n        return \"\";\n    }\n    if ($day < 1 || $day >\
    \ 31) {\n        return \"\";\n    }\n    my $month = parse_month($date);\n  \
    \  if ($month == -1) {\n        return \"\";\n    }\n    if ($month < 1 || $month\
    \ > 12) {\n        return \"\";\n    }\n    $date = add_days($date, $day);\n \
    \   $date = add_months($date, $month);\n    return $date;\n}", "    return 1 unless\
    \ $date;\n    my ($day, $month, $year) = split '-', $date;\n    return 1 unless\
    \ length($date);\n    return 1 unless $day =~ /^([1-9]|[1-9][0-9]|1[0-2])$/;\n\
    \    return 1 unless $month =~ /^((1[0-2])|([1-3][0-1]))$/;\n    return 1 unless\
    \ $month =~ /^(1[0-1]|[1-9])$/;\n    return 1 unless $year =~ /^[1-9]$/;\n   \
    \ return 1 unless $year =~ /^([1-9]\\d|[1-9][0-9][0-1])(\\d)(\\d)$/;\n    return\
    \ 1;\n}", "    my $month_check_ok = validate_month($date);\n    if ( $month_check_ok\
    \ == 0 ) {\n        my $day_check_ok = validate_day($date);\n        if ( $day_check_ok\
    \ == 0 ) {\n            my $year_check_ok = validate_year($date);\n          \
    \  if ( $year_check_ok == 0 ) {\n                return 1;\n            }\n  \
    \      }\n    }\n    return 0;\n}", "    my(@months) = qw(Jan Feb Mar Apr May\
    \ Jun Jul Aug Sep Oct Nov Dec);\n    my(@days) = qw(31 30 29 28 27 26 25 24 23\
    \ 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1);", "    my($days);\n\
    \    my($months);\n    my($year) = ($date =~ /^(\\d+)-(\\d+)-(?:\\d+)$/);\n  \
    \  my($day1,$day2,$day3) = ($date =~ /^(\\d+)-(\\d+)-(\\d+)$/);\n    my($date2);\n\
    \    my($month,$day,$year);\n    $month = $day = $year = 0;\n    # Check the date\
    \ string is not empty.\n    if (length($date) == 0) {\n        return \"\";\n\
    \    }\n    # Check the number of days.\n    $days = ($day2 > $day1) ? $day2 :\
    \ $day1;\n    $days += $day3;\n    if ($days > 30) {\n        return \"\";\n \
    \   }\n    # Check the months.\n    $months = $days / 30;\n    $months += $day3\
    \ / 30;\n    if ($months > 12) {\n        return \"\";\n    }\n    # Check the\
    \ year.\n    if ($month < 1 || $month > 12) {\n        return \"\";\n    }\n \
    \   if ($month == 3 && $day > 31) {\n        return \"\";\n    }\n    if ($month\
    \ == 4 && $day > 30) {\n        return \"\";\n    }\n    if ($month == 2 && $day\
    \ > 29) {\n        return \"\";\n    }\n    return 1;\n}", "    # Validate date\
    \ string\n    if ( $date !~/^\\s*$/ ) {\n        return \"\";\n    }", "    my\
    \ $err = \"\";\n    if(!($date =~ /\\A\\s*\\Z/))\n    {\n        $err =\"The date\
    \ must be provided.\\n\";\n    }\n    if($date =~ /\\A\\s*\\d+\\s*\\Z/)\n    {\n\
    \        if(!($date =~ /\\A\\d{1,2}-\\d{1,2}-\\d{4}\\Z/))\n        {\n       \
    \     $err =\"The date must be in the format: mm-dd-yyyy\\n\";\n        }\n  \
    \  }\n    elsif(!($date =~ /\\A\\d{1,2}-\\d{1,2}-\\d{2}/))\n    {\n        $err\
    \ =\"The date must be in the format: mm-dd-yyyy\\n\";\n    }\n    elsif(!($date\
    \ =~ /\\A\\d{1,2}\\/\\d{1,2}\\/\\d{4}/))\n    {\n        $err =\"The date must\
    \ be in the format: mm/dd/yyyy\\n\";\n    }\n    elsif(!($date =~ /\\A\\d{4}/))\n\
    \    {\n        $err =\"The date must be in the format: yyyy\\n\";\n    }\n  \
    \  elsif(!($date =~ /\\A\\d{4}-\\d{2}-\\d{2}/))\n    {\n        $err =\"The date\
    \ must be in the format: yyyy-mm-dd\\n\";\n    }\n    if(!($date =~ /\\A\\d{1,2}-\\\
    d{1,2}-\\d{1,2}\\Z/))\n    {\n        $err =\"The date must be in the format:\
    \ mm-dd-yyyy\\n\";\n    }\n    if($err != \"\")\n    {\n        die($err);\n \
    \   }\n    my $days_between = ()= localtime(time);\n    if($days_between[3] >\
    \ $days_between[1])\n    {\n        die \"Days are more than 30 days!\";\n   \
    \ }\n    elsif($days_between[3] < $days_between[1])\n    {\n        die \"Days\
    \ are less than 1 days!\";\n    }\n    elsif($days_between[3] != $days_between[1])\n\
    \    {\n        die \"Days are different for both months!\";\n    }\n    if($days_between[2]\
    \ > $days_between[0])\n    {\n        die \"Months are more than 12 months!\"\
    ;\n    }\n    elsif($days_between[2] < $days_between[0])\n    {\n        die \"\
    Months are less than 1 month!\";\n    }\n    elsif($days_between[2] != $days_between[0])\n\
    \    {\n        die \"Months are different for both years!\";\n    }\n    return\
    \ 1;\n}", "    if(!$date) {\n        return 0;\n    }\n    if(!length($date))\
    \ {\n        return 0;\n    }\n    if($date =~ /^\\d+-\\d+-\\d+$/) {\n       \
    \ return 1;\n    }\n    if($date =~ /^\\d+-\\d+-\\d+$/) {\n        return 1;\n\
    \    }\n    if($date =~ /^\\d+-\\d+-\\d+$/) {\n        return 1;\n    }\n    if($date\
    \ =~ /^\\d+-\\d+-\\d+$/) {\n        return 1;\n    }\n    if($date =~ /^\\d+-\\\
    d+-\\d+$/) {\n        return 1;\n    }\n    if($date =~ /^\\d+-\\d+-\\d+$/) {\n\
    \        return 1;\n    }\n    if($date =~ /^\\d+-\\d+-\\d+$/) {\n        return\
    \ 1;\n    }\n    if($date =~ /^\\d+-\\d+-\\d+$/) {\n        return 1;\n    }\n\
    \    if($date =~ /^\\d+-\\d+-\\d+$/) {\n        return 1;\n    }\n    if($date\
    \ =~ /^\\d+-\\d+-\\d+$/) {\n        return 1;\n    }\n    if($date =~ /^\\d+-\\\
    d+-\\d+$/) {\n        return 1;\n    }\n    if($date =~ /^\\d+-\\d+-\\d+$/) {\n\
    \        return 1;\n    }\n    if($date =~ /^\\d+-\\d+-\\d+$/) {\n        return\
    \ 1;\n    }\n    if($date =~ /^\\d+-\\d+-\\d+$/) {\n        return 1;\n    }\n\
    \    if($date =~ /^\\d+-\\d+-\\d+$/) {\n        return 1;\n    }\n    if($date\
    \ =~ /^\\d+-\\d+-\\d+$/) {\n        return 1;\n    }\n    if($date =~ /^\\d+-\\\
    d+-\\d+$/) {\n        return 1;\n    }\n    if($date =~ /^\\d+-\\d+-\\d+$/) {\n\
    \        return 1;\n    }\n    if($date =~ /^\\d+-\\d+-\\d+$/) {\n        return\
    \ 1;\n    }\n    if($date =~ /^\\d+-\\d+-\\d+$/) {\n        return 1;\n    }\n\
    \    if($date =~ /^\\d+-\\d+-\\d+$/) {\n        return 1;\n    }\n    if($date\
    \ =~ /^\\d+-\\d+-\\d+$/) {\n        return 1;\n    }\n    if($date =~ /^\\d+-\\\
    d+-\\d+$/) {\n        return 1;\n    }\n    if($date =~ /^\\d+-\\d+-\\d+$/) {\n\
    \        return 1;\n    }\n    if($date =~ /^\\d+-\\d+-\\d+$/) {\n        return\
    \ 1;\n    }\n    if($date =~ /^\\d+-\\d+-\\d+$/) {\n        return ", '    my($day,
    $month, $year) = split("-", $date);', "    # Write your code here.\n    if ($date\
    \ ne \"\" && $date !~ /^([12]\\d\\d)\\-(0[1-9]|1[0-2])\\-(20[6-9]|2[0-9]|3[01])$/)\
    \ {\n        die \"Invalid date: $date\\n\";\n    }\n    if ($date eq \"\") {\n\
    \        return 1;\n    }\n    if ($date !~ /^([12]\\d\\d)\\-(0[1-9]|1[0-2])\\\
    -(20[6-9]|2[0-9]|3[01])$/) {\n        die \"Invalid date: $date\\n\";\n    }\n\
    \    if ($date !~ /^([12]\\d\\d)\\-(0[1-9]|1[0-2])\\-(20[6-9]|2[0-9]|3[01])$/)\
    \ {\n        die \"Invalid date: $date\\n\";\n    }\n    if ($date !~ /^([12]\\\
    d\\d)\\-(0[1-9]|1[0-2])\\-(20[6-9]|2[0-9]|3[01])$/) {\n        die \"Invalid date:\
    \ $date\\n\";\n    }\n    if ($date !~ /^([12]\\d\\d)\\-(0[1-9]|1[0-2])\\-(20[6-9]|2[0-9]|3[01])$/)\
    \ {\n        die \"Invalid date: $date\\n\";\n    }\n    if ($date !~ /^([12]\\\
    d\\d)\\-(0[1-9]|1[0-2])\\-(20[6-9]|2[0-9]|3[01])$/) {\n        die \"Invalid date:\
    \ $date\\n\";\n    }\n    if ($date !~ /^([12]\\d\\d)\\-(0[1-9]|1[0-2])\\-(20[6-9]|2[0-9]|3[01])$/)\
    \ {\n        die \"Invalid date: $date\\n\";\n    }\n    if ($date !~ /^([12]\\\
    d\\d)\\-(0[1-9]|1[0-2])\\-(20[6-9]|2[0-9]|3[01])$/) {\n        die \"Invalid date:\
    \ $date\\n\";\n    }\n    if ($date !~ /^([12]\\d\\d)\\-(0[1-9]|1[0-2])\\-(20[6-9]|2[0-9]|3[01])$/)\
    \ {\n        die \"Invalid date: $date\\n\";\n    }\n    if ($date !~ /^([12]\\\
    d\\d)\\-(0[1-9]|1[0-2])\\-(20[6-9]|2[0-9]|3[01])$/) {\n        die \"Invalid date:\
    \ $date\\n\";\n    }\n    if ($date !~ /^([12]\\d\\d)\\-(0[1-9]|1[0-2])\\-(20[6-9]|2[0-9]|3[01])$/)\
    \ {\n        die \"Invalid date: $date\\n\";\n    }\n    if ($date !~ /^([12]\\\
    d\\d)\\-(0[1-9]|1[0-", "    my $month_str = $date =~ /^(\\d+)-(\\d+)-(\\d+)/;\n\
    \    my $year      = $month_str->[3];\n    my $month     = $month_str->[1];\n\
    \    my $day       = $month_str->[2];\n    my $valid_year = 1;\n    my $valid_month\
    \ = 1;\n    my $valid_day   = 1;", '    return $date if !defined($date);', " \
    \   my($mm,$dd,$yyyy) = split('-',$date);\n    my($days_count,$days_count_temp,$month_diff,$year,$month);",
  "    my $valid = '';\n    if ( $date =~ /[ ]/ ) {\n        $valid = 1;\n    } else\
    \ {\n        $valid = 0;\n    }\n    if ( $valid ) {\n        my @months = qw(1\
    \ 3 5 7 8 10 12);\n        my @days = qw(31 30 29 28 27 26 25 24 23 22 21 20 19\
    \ 18 17 16 15 14 13 12 11 10);\n        my @years = qw(2000 2002 2004 2008 2012\
    \ 2016);\n        my $months = scalar(@months);\n        my $days = scalar(@days);\n\
    \        my $years = scalar(@years);\n        my $valid = $months == 12 && $days\
    \ == 31 && ( $months + $days > 31 || $months + $days > 30 || $months + $days >\
    \ 29 || $months + $days > 28 || $months + $days > 27 || $months + $days > 26 ||\
    \ $months + $days > 25 || $months + $days > 24 || $months + $days > 23 || $months\
    \ + $days > 22 || $months + $days > 21 || $months + $days > 20 || $months + $days\
    \ > 19 || $months + $days > 18 || $months + $days > 17 || $months + $days > 16\
    \ || $months + $days > 15 || $months + $days > 14 || $months + $days > 13 || $months\
    \ + $days > 12 || $months + $days > 11 || $months + $days > 10);\n        if ($valid)\
    \ {\n            my $years_ago = localtime;\n            $years_ago->add(days\
    \ => $years);\n            my $new_year = strftime(\"%m-%d-%Y\", $years_ago);\n\
    \            return $new_year;\n        } else {\n            return \"\";\n \
    \       }\n    } else {\n        return \"\";\n    }\n}", "    my($day, $month,\
    \ $year) = split('-', $date);\n    my($day_in_month, $days_in_month, @months_array)\
    \ = split('-');\n    my(@months_array_check);\n    $months_array_check[0] = $months_array[0];\n\
    \    $months_array_check[1] = $months_array[1];\n    $months_array_check[2] =\
    \ $months_array[2];\n    # check the date is valid for the first month\n    if($months_array_check[0]\
    \ < 1 || $months_array_check[0] > 12 || $months_array_check[0] > $months_array_check[1])\
    \ {\n        $months_array_check[0] = \"\";\n    }\n    # check the month is valid\
    \ for the first month\n    if($months_array_check[0] < 1 || $months_array_check[0]\
    \ > 12 || $months_array_check[0] > $months_array_check[1] || $months_array_check[1]\
    \ < 1 || $months_array_check[1] > 12) {\n        $months_array_check[0] = $months_array_check[1]\
    \ = \"\";\n    }\n    # check the year is valid for the first month\n    if($months_array_check[0]\
    \ < 1 || $months_array_check[0] > 12 || $months_array_check[0] > $months_array_check[1]\
    \ || $months_array_check[1] < 1 || $months_array_check[1] > 12 || $months_array_check[2]\
    \ < 1) {\n        $months_array_check[0] = $months_array_check[1] = $months_array_check[2]\
    \ = \"\";\n    }\n    # check the date is not empty\n    if($day == \"\" || $day\
    \ > 31 || $day > $day_in_month || $day > $days_in_month) {\n        $months_array_check[0]\
    \ = $months_array_check[1] = $months_array_check[2] = \"\";\n        return \"\
    \";\n    }\n    # check the month is not less than 1 or higher than 12\n    if($month\
    \ < 1 || $month > 12) {\n        $months_array_check[0] = $months_array_check[1]\
    \ = $months_array_check[2] = \"\";\n        return \"\";\n    }\n    # check the\
    \ date is not in the wrong format\n    if(!$date =~ m/([0-9]{2})-([0-9]{2})-([0-9]{4})/)\
    \ {\n        $months_array_check[0] = $months_array_check[1] = $months_array_check[2]\
    \ = \"\";\n        return \"\";\n    }\n    # check the date is valid\n    if($months_array_check[0]\
    \ > $months_array_check[1]) {\n        if($day > $day_in_month) {\n          \
    \  $months_array_check[0] = $months_array_check[1] = $months_array_check[2] =\
    \ \"\";\n            return \"\";\n        } else {\n            $months_array_check",
  "    # Check the date validity\n    return \"\" if (!$date or !$date =~ /^[0-9]{2}\\\
    /[0-9]{2}\\/[0-9]{4}/);\n    # Check if the months are correct\n    if ($date\
    \ =~ m/([0-9]{2})\\/([0-9]{2})\\/([0-9]{4})/) {\n        $month = $1;\n      \
    \  $day = $2;\n        $year = $3;\n        # Check if valid month\n        unless\
    \ ($month > 1 or $month < 13) {\n            return \"\";\n        }\n       \
    \ # Check if the days are correct\n        unless ($day > 1 or $day < 29) {\n\
    \            return \"\";\n        }\n        # Check if the years are correct\n\
    \        unless ($year >= 1900 and $year <= 2040) {\n            return \"\";\n\
    \        }\n        # All are ok, return 1\n        return 1;\n    } else {\n\
    \        return \"\";\n    }\n}", "    \n    my $valid_date = $date;\n    \n \
    \   if ($date =~ /^$NONWORD_REGEX$/) {\n        $valid_date = \"\";\n    }", " \
    \   my $day_of_month = 1;\n    my $day_of_year = 1;\n    my ($year, $month, $day)\
    \ = split(/\\-/, $date, 2);\n    $year -= $year % 100;\n    $month -= $month >\
    \ 12 ? 0 : $month;\n    $day -= $day > 31 || $day < 1 ? 0 : $day;", '    return
    1 if $date eq "";', "    my ($date_string, $day, $month, $year) = ($date) =~ /^(\\\
    d{1,2}-\\d{1,2}-\\d{4})$/;\n    # Split the date string into a day and a month\n\
    \    my ($day, $month) = split \"-\", $date_string;\n    # Validate the date\n\
    \    my ($valid_day, $valid_month) = (1, 12);\n    # Check if the date is valid\
    \ before trying to validate the month\n    if ($day =~ /^\\d{1,2}$/) {\n     \
    \   $valid_day = $1;\n    } elsif ($day =~ /^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$/) {\n\
    \        # Split the date string into a month and year\n        my ($month, $year)\
    \ = split \"-\", $date_string;\n        # Validate the year\n        my ($valid_year)\
    \ = grep {/^\\d{1,2}$/} split \"/\", $year;\n        # Validate the month\n  \
    \      my ($valid_month) = $month;\n        # Check if the month is valid before\
    \ trying to validate the day\n        if ($month =~ /^\\d{1,2}$/) {\n        \
    \    $valid_month = $1;\n        } elsif ($month =~ /^\\d{1,2}\\/\\d{1,2}$/) {\n\
    \            # Split the date string into a year and a month\n            my ($year,\
    \ $month) = split \"-\", $date_string;\n            # Validate the year\n    \
    \        my ($valid_year) = $year;\n            # Validate the month\n       \
    \     my ($valid_month) = $month;\n        }\n    }\n    if ($valid_day =~ /^\\\
    d{1,2}$/) {\n        $valid_day = $1;\n    } elsif ($valid_day =~ /^\\d{1,2}\\\
    /\\d{1,2}$/) {\n        # Split the date string into a month and year\n      \
    \  my ($month, $year) = split \"-\", $date_string;\n        # Validate the year\n\
    \        my ($valid_year) = $year;\n        # Validate the month\n        my ($valid_month)\
    \ = $month;\n    }\n    my $is_valid;\n    if ($valid_month < $valid_month) {\n\
    \        $is_valid = 0;\n    } elsif ($valid_month > 12) {\n        $is_valid\
    \ = 1;\n    } elsif ($valid_day < 1) {\n        $is_valid = 0;\n    } elsif ($valid_day\
    \ > 29) {\n        $is_valid = 1;\n    } else {\n        $is_valid = 0;\n    }\n\
    \    return $is_valid;\n}", "    chomp($date);\n    $date =~ /^([0-9]+-[0-9]+-[0-9]+|[0-9]+-[0-9]+-[0-9]+\\\
    /[0-9]+-[0-9]+|[0-9]+\\/[0-9]+-[0-9]+-[0-9]+|[0-9]+\\/[0-9]+-[0-9]+-[0-9]+\\/[0-9]+-[0-9]+)/;\n\
    \    if ($date =~ /^([0-9]+-[0-9]+-[0-9]+|[0-9]+-[0-9]+-[0-9]+\\/[0-9]+-[0-9]+|[0-9]+\\\
    /[0-9]+-[0-9]+-[0-9]+|[0-9]+\\/[0-9]+-[0-9]+-[0-9]+\\/[0-9]+-[0-9]+)/){\n    \
    \    $date = -1;\n    }\n    if ($date =~ /^([0-9]+)/){\n        $date = 1;\n\
    \    }\n    if ($date =~ /^([0-9]+)\\/(\\d+)$/){\n        $date = ($1 * $2);\n\
    \    }\n    if ($date =~ /^([0-9]+)\\/(\\d+)\\/(\\d+)$/){\n        $date = ($1\
    \ * $2 * $3);\n    }\n    return $date;\n}\n</code>\nAnd now we can use that function\
    \ within our subroutines to validate the dates as follows:\n<code>", "    my @tokens\
    \ = split /-/, $date;\n    my $days;\n    my $month;\n    my $year;\n    my $month_name;\n\
    \    if (@tokens > 3) {\n       @tokens = split /\\./, $date;\n    }\n    $year\
    \ = $tokens[0];\n    $month = $tokens[1];\n    $days = $tokens[2];\n    if ($month\
    \ < 1 || $month > 12) {\n        return \"\";\n    }\n    if ($days < 1 || $days\
    \ > 31) {\n        return \"\";\n    }\n    if ($month == 2) {\n       if ($days\
    \ > 29) {\n           return \"\";\n       }\n    }\n    if ($days > 30) {\n \
    \       return \"\";\n    }\n    return 1;\n}", "    my($days) = 0;\n    my($months)\
    \ = 0;\n    my($year) = 0;\n    my(@date_string) = split /-/, $date;\n    my(@months_string)\
    \ = split /-/, scalar(localtime)[0];\n    my(@days_string) = split /-/, scalar(localtime)[2];",
  "    # Write your code here\n    return 1;\n}", "    return undef if !$date;\n \
    \   $date =~ /^([0-9]{2})\\-([0-9]{2})\\-([0-9]{4})$/;\n    return undef if $date\
    \ !~ /^([0-9]{2})\\-([0-9]{2})\\-([0-9]{4})$/;\n    my ($day, $month, $year) =\
    \ split('-', $date);\n    return undef if $day < 1 || $day > 31 || $month < 1\
    \ || $month > 12;\n    return undef if $month == 2;\n    return undef if $year\
    \ % 4 != 0 && $year % 400 == 0;\n    return $date if $day == 29 || ($day == 29\
    \ && $month == 2 && ($year % 100 != 0 || $year % 400 == 0));\n    return 1;\n}",
  "    my($day,$month,$year) = split('-',$date);", "    if ($date !~ m/$date_pattern/)\
    \ {\n        return 0;\n    }\n    my($day) = split(/\\-/,$date,2);\n    if ($day\
    \ !~ m/([0-9]{1,2})/) {\n        return 0;\n    }\n    my($month) = split(/\\\
    -/,$date,1,2);\n    if ($month !~ m/([0-9]{1,2})/) {\n        return 0;\n    }\n\
    \    my($year) = split(/\\-/,$date,3,2);\n    if ($year !~ m/([0-9]{4})/) {\n\
    \        return 0;\n    }\n    if ($day <= 0) {\n        return 0;\n    }\n  \
    \  if ($day > 31) {\n        return 0;\n    }\n    if ($month < 1) {\n       \
    \ return 0;\n    }\n    if ($month > 12) {\n        return 0;\n    }\n    if ($year\
    \ < 1) {\n        return 0;\n    }\n    if ($year > 9999) {\n        return 0;\n\
    \    }\n    return 1;\n}", "    if(length($date) == 0 ) {\n        return 0;\n\
    \    }\n    elsif( ($date =~ m/^\\d{1,2}-\\d{1,2}-\\d{4}$/ && (length($date) ==\
    \ 8 || length($date) == 10)) && (($date =~ m/[0-9]{1,2}/) && ($date =~ m/[0-9]{1,2}/)\
    \ && ($date =~ m/[0-9]{4}/) ) ) {\n        return 1;\n    }\n    else {\n    \
    \    return \"\";\n    }\n}", "    my(@months,@days,@years) = split '-',$date;\n\
    \    my ($day1,$month1,$year1) = split /-/,$months[0];\n    $month1 = $month1+1;\n\
    \    my $days1 = days_in_month($month1,$year1);\n    foreach my $month2 (@months)\
    \ {\n        if ($month1 > 12) { $month1 = $month1 - 12; }\n        elsif ($month1\
    \ < 1) { $month1 = $month1 + 12; }\n        my $days2 = days_in_month($month2,$year1);\n\
    \        if ($days2 < $days1) {\n            $days1 = $days2;\n            $month1\
    \ = $month2+1;\n            $days1 = days_in_month($month1,$year1);\n        }\n\
    \    }\n    return 1 if ($days1 < 1 || $days1 > 31 || $day1 != $days2);\n    return\
    \ 1 if ($day1 < 1 || $day1 > 31);\n    return 1 if ($day1 < 1 || $day1 > 30);\n\
    \    return 1 if ($day1 < 1 || $day1 > 29);\n    return 1 if ($day1 < 1 || $day1\
    \ > 28);\n    return 1;\n}", "    my($day, $month, $year) = split(\"-\",$date);\n\
    \    my($day1, $day2, $day3, $day4, $day5, $day6, $day7, $day8, $day9, $day10,\
    \ $day11, $day12, $day13, $day14, $day15, $day16, $day17, $day18, $day19, $day20,\
    \ $day21, $day22, $day23, $day24, $day25, $day26, $day27, $day28, $day29, $day30,\
    \ $day31, $day32, $day33, $day34, $day35, $day36, $day37, $day38, $day39, $day40,\
    \ $day41, $day42, $day43, $day44, $day45, $day46, $day47, $day48, $day49, $day50,\
    \ $day51, $day52, $day53, $day54, $day55, $day56, $day57, $day58, $day59, $day60,\
    \ $day61, $day62, $day63, $day64, $day65, $day66, $day67, $day68, $day69, $day70,\
    \ $day71, $day72, $day73, $day74, $day75, $day76, $day77, $day78, $day79, $day80,\
    \ $day81, $day82, $day83, $day84, $day85, $day86, $day87, $day88, $day89, $day90,\
    \ $day91, $day92, $day93, $day94, $day95, $day96, $day97, $day98, $day99, $day100,\
    \ $day101, $day102, $day103, $day104, $day105, $day106, $day107, $day108, $day109,\
    \ $day110, $day111, $day112, $day113, $day114, $day115, $day116, $day117, $day118,\
    \ $day119, $day120, $day121, $day122, $day123, $day124, $day125, $day126, $day127,\
    \ $day128, $day129, $day130, $day131, $day132, $day133, $day134, $day135, $day136,\
    \ $day137, $day138, $day139, $day140, $day141, $day142, $day143, $day144, $day",
  "    my(@month) = ();\n    my(@date) = ();", "    chomp($date);\n    if ($date eq\
    \ \"\") {\n        return \"\";\n    }\n    \n    if ($date !~ /^(0[1-9]|1[012])[-\
    \ \\/](0[1-9]|[12][0-9]|3[01])[- \\/]\\d{4}$/) {\n        return \"\";\n    }\n\
    \    \n    # Validate month\n    if ($date !~ /^(0[1-9]|1[012])[- \\/](0[1-9]|[12][0-9]|3[01])[-\
    \ \\/]\\d{4}$/) {\n        return \"\";\n    }\n    \n    # Validate year\n  \
    \  if ($date !~ /^(0[1-9]|1[012])[- \\/](0[1-9]|[12][0-9]|3[01])[- \\/]\\d{4}$/)\
    \ {\n        return \"\";\n    }\n    \n    # Validate date\n    if ($date !~\
    \ /^(0[1-9]|1[012])[- \\/](0[1-9]|[12][0-9]|3[01])[- \\/]\\d{4}$/) {\n       \
    \ return \"\";\n    }\n    \n    return 1;\n}\n</code>\n<|/ a tags=perl,regex\
    \ |>\n<| c |>\nThank you, this is helpful. I am looking to validate the date that\
    \ the user provides. So if the user inputs a date as \"04-00-2040\", it should\
    \ return \"\". Thanks again!\n<|/ c |>\n<| c |>\nI have added the code for validating\
    \ dates in the format \"mm-dd-yyyy\" to the answer. Can you please check if this\
    \ helps ?\n<|/ c |>\n<| a dscore=0 |>\nA more efficient way of doing this is to\
    \ use the DateTime::Format::Strptime module from CPAN. This module is really handy\
    \ and does a lot of the heavy lifting for you. Here is a sample code snippet that\
    \ illustrates the use of DateTime::Format::Strptime\n<code>\nuse strict;\nuse\
    \ warnings;\nuse DateTime::Format::Strptime;\nuse Data::Dumper;", "    return\
    \ undef if ($date eq '');\n    my @date_info = split(/\\-/, $date);\n    my $day\
    \ = scalar(@date_info);\n    my $month = scalar(@date_info) - 1;\n    my $year\
    \ = @date_info;\n    # Valid date if:\n    # 1. $day is not empty\n    # 2. $month\
    \ is in range 1-12\n    # 3. $year is in range 1900-2020\n    return undef if\
    \ ($day eq '');\n    return undef if ($month < 1 || $month > 12);\n    return\
    \ undef if ($year < 1900 || $year > 2020);\n    return undef if ($day < 1 || $day\
    \ > 31);\n    return undef if ($month < 4 || $month > 6);\n    return undef if\
    \ ($day < 1 || $day > 30);\n    return undef if ($month == 2);\n    return 1;\n\
    }", "    return 1 unless ($date);\n    my($days,$month,$year) = my($day,$month,$year);\n\
    \    my($days,$month,$year) = split(/\\-/,$date);\n    $month = 0 if $month <\
    \ 1 || $month > 12;\n    $day = 0 if $day < 1 || $day > 31;\n    $year = 0 if\
    \ $year < 1 || $year > 9999;\n    $month = $month + $year % 4 == 0 ? ($month +\
    \ $year) % 4 : 12 + $month + $year % 4;\n    $day = $day + $month > 1 ? ($day\
    \ + $month - 1) % 8 : $day + $month;\n    $day = $day + ($year - 1) < 100 && $year\
    \ < 9999 ? ($year - 1) : 365;\n    return $day > $month || $day > $year;\n}",
  "    my($valid_date);\n    $date = \"$date\" if ($date !~ /^[\\d]+$/);\n    $valid_date\
    \ = 0;\n    if($date !~ /^[\\d]+-[\\d]+-[\\d]+$/){\n        $valid_date = 1;\n\
    \    }\n    elsif ($date =~ /^[\\d]+-[\\d]+-[\\d]+$/){\n        if($date =~ /[\\\
    d]+-[\\d]+-[\\d]+/){\n            $valid_date = 1;\n        }\n    }\n    return\
    \ $valid_date;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nTry This\n<code>",
  "    my $daysInMonth = daysInMonth(@month);\n    my $err;\n    if($date =~ /^\\\
    s*$/){\n        $err = \"\";\n    }\n    elsif(length($date) < 1 || length($date)\
    \ > 29){\n        $err = \"Date is invalid. Check the length of the date field.\
    \ Must be between 1 and 29\";\n    }\n    elsif($date !~ /^\\d{2}-\\d{2}-\\d{4}$/){\n\
    \        $err = \"Date is invalid. Check the format of the date field. Must be\
    \ in the format: mm-dd-yyyy\";\n    }\n    elsif($date !~ /^($month)-\\d+-(\\\
    d{4})$/){\n        $err = \"Date is invalid. Check the format of the date field.\
    \ Must be in the format: mm-dd-yyyy\";\n    }\n    elsif($daysInMonth != (length($date)\
    \ - length($date) - 3)){\n        $err = \"Date is invalid. Check the number of\
    \ days in the date field. Must be 31-30 days for months: $month\";\n    }\n  \
    \  elsif($daysInMonth != (length($date) - length($date) - 2)){\n        $err =\
    \ \"Date is invalid. Check the number of days in the date field. Must be 29-28\
    \ days for months: $month\";\n    }\n    elsif($month[0] != $month[1]){\n    \
    \    $err = \"Date is invalid. Check the format of the date field. Month must\
    \ be in the format: mm-dd-yyyy\";\n    }\n    else{\n        return 1;\n    }\n\
    \    return $err;\n}", "    # Check if date is not empty\n    return 1 if length\
    \ $date == 0;\n    # Check if date is valid day\n    return 1 unless $date =~\
    \ /^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$/;\n    # Check if date is valid month\n    return\
    \ 1 unless $date =~ /^\\d{1,2}\\/\\d{1,2}\\/\\d{2,4}$/;\n    # Check if date is\
    \ valid year\n    return 1 unless $date =~ /^\\d{1,2}\\/\\d{1,2}$/;\n    # Check\
    \ if date is valid month\n    return 1 unless $date =~ /^\\d{1,2}\\/\\d{1,2}\\\
    /\\d{2,4}$/;\n    # Check if date is valid year\n    return 1 unless $date =~\
    \ /^\\d{1,2}\\/\\d{1,2}$/;\n    # Check if date is valid month\n    return 1 unless\
    \ $date =~ /^\\d{1,2}\\/\\d{1,2}\\/\\d{2,4}$/;\n    # Check if date is valid year\n\
    \    return 1 unless $date =~ /^\\d{1,2}\\/\\d{1,2}$/;\n    # Check if date is\
    \ valid month\n    return 1 unless $date =~ /^\\d{1,2}\\/\\d{1,2}\\/\\d{2,4}$/;\n\
    \    # Check if date is valid year\n    return 1 unless $date =~ /^\\d{1,2}\\\
    /\\d{1,2}$/;\n    # Check if date is valid month\n    return 1 unless $date =~\
    \ /^\\d{1,2}\\/\\d{1,2}\\/\\d{2,4}$/;\n    # Check if date is valid year\n   \
    \ return 1 unless $date =~ /^\\d{1,2}\\/\\d{1,2}$/;\n    # Check if date is valid\
    \ month\n    return 1 unless $date =~ /^\\d{1,2}\\/\\d{1,2}\\/\\d{2,4}$/;\n  \
    \  # Check if date is valid year\n    return 1 unless $date =~ /^\\d{1,2}\\/\\\
    d{1,2}$/;\n    # Check if date is valid month\n    return 1 unless $date =~ /^\\\
    d{1,2}\\/\\d{1,2}\\/\\d{2,4}$/;\n    # Check if date is valid year\n    return\
    \ 1 unless $date =~ /^\\d{1,2}\\/\\d{1,2}$/;\n    # Check if date is valid month\n\
    \    return 1 unless $date =~ /^\\d{1,2}\\/\\d{1,2}\\/\\d{2,4}$/;\n    # Check\
    \ if date is valid year\n    return 1 unless $date =~ /^\\d{1,2}\\/\\d{1,2}$/;\n\
    \    # Check if date is valid month\n    return 1 unless $date =~ /^\\d{1,2}\\\
    /\\d{1,2}\\/\\d{2,4}$/;\n    # Check if date is valid year\n    return 1 unless\
    \ $date =~ /^\\d{1,2}\\/\\d{1,2}$/;\n    # Check if date is valid month\n    return\
    \ 1 unless $date =~ /^\\d{1,2}\\/\\d{1,2}\\/\\d{2,4}$/;\n    # Check if date is\
    \ valid year\n    return 1 unless $date =~ /^\\d{1,2}\\/\\d{1,2}$/;\n    # Check\
    \ if date is valid month\n    return 1 unless $date =~ /^\\d{1,2}\\/\\d{1,2}\\\
    /\\d{2,4}$/;\n    # Check if date is valid year\n    return 1 unless $date ",
  "    return 1 if($date eq '');\n    my($day, $month, $year) = split \"-\", $date;\n\
    \    return 1 if((length($day) != 2) || (length($month) != 2) || (length($year)\
    \ != 4));\n    if($month < 1 || $month > 12) {\n        return \"\";\n    }\n\
    \    if($day < 1 || $day > 31) {\n        return \"\";\n    }\n    if($day ==\
    \ 31) {\n        return 1 if(($month == 2) || ($month == 4) || ($month == 6) ||\
    \ ($month == 9) || ($month == 11));\n    }\n    if($day == 30) {\n        return\
    \ 1 if(($month == 1) || ($month == 3) || ($month == 5) || ($month == 7) || ($month\
    \ == 8) || ($month == 10) || ($month == 12));\n    }\n    if($day == 29) {\n \
    \       return 1 if(($month == 2) || ($month == 4) || ($month == 6) || ($month\
    \ == 9) || ($month == 11));\n    }\n    return 0;\n}", "    $date = $_[0] =~ /^\\\
    d{2}-\\d{2}-\\d{4}/;\n    if ($date) {\n        $date =~ /^\\d{1,2}-\\d{1,2}-\\\
    d{4}$/g;\n        if(!$date) {\n            $date =~ /^\\d{1,2}\\/\\d{1,2}\\/\\\
    d{4}$/g;\n        }\n        if ($date) {\n            if ($date =~ /^\\d{1,2}-\\\
    d{1,2}-\\d{4}$/g) {\n                return 1;\n            }\n            if\
    \ ($date =~ /^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$/g) {\n                return 1;\n\
    \            }\n            if ($date =~ /^\\d{1,2}\\/\\d{1,2}$/g) {\n       \
    \         return 1;\n            }\n            if ($date =~ /^\\d{1,2}$/g) {\n\
    \                return 1;\n            }\n        }\n    }\n    return 0;\n}",
  "    my(@months) = qw(Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec);\n    my(@valid_dates)\
    \ = ($date !~ /^\\s+$/ &&\n                        $date !~ /^(\\d{1,2})[-\\/](\\\
    d{1,2})[-\\/](\\d{4})$/);\n    if (@valid_dates == 1) {\n        if ($months[$1]\
    \ >= 1 && $months[$1] <= 12) {\n            if ($months[$2] >= 1 && $months[$2]\
    \ <= 12) {\n                if ($months[$3] < 1 || $months[$3] > 12 || $months[$2]\
    \ < 1 || $months[$2] > 12) {\n                    return \"\";\n             \
    \   }\n                if ($months[$1] < 1 || $months[$1] > 12 || $months[$2]\
    \ < 1 || $months[$2] > 12) {\n                    return \"\";\n             \
    \   }\n                if ($months[$3] < 1 || $months[$3] > 12 || $months[$1]\
    \ < 1 || $months[$1] > 12) {\n                    return \"\";\n             \
    \   }\n                if ($months[$3] < 1 || $months[$3] > 12 || $months[$2]\
    \ < 1 || $months[$2] > 12) {\n                    return \"\";\n             \
    \   }\n                return 0;\n            }\n        }\n    }\n    return\
    \ \"\";\n}\n</code>\nOutput:\n<code>\nuser@host:/tmp$ cat datevalidator.pl", " \
    \   $date =~ /(\\d{2})-(\\d{2})-(\\d{4})/;\n    return 0 if $3 eq '00';\n    $3\
    \ =~ s/^(0{0,2})|(0{0,2})\\Z//;\n    $3 -= 1900;\n    return 1 if $2 > 29 || ($2\
    \ < 1 && $3 > 31);\n    $1 || ($2 > 12);\n    return 1;\n}", "    if ($date) {\n\
    \        $date =~ /^([12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]|[12]\\d)$)/;\n\
    \        return 1 if ($date != \"\" && $date ne \"\");\n        if ($date =~ /^([12]\\\
    d{3}-0[1-9]0-[12]\\d{3}|0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])-(2000)$/) {\n  \
    \          return 1;\n        } elsif ($date =~ /^(0[1-9]|[12]\\d|3[01])-(2000)$/)\
    \ {\n            return 1;\n        } elsif ($date =~ /^(0[1-9]|[12]\\d|3[01])-(00[1-9]|0[1-9]\\\
    d|[12]\\d\\d)$/) {\n            return 1;\n        } elsif ($date =~ /^(0[1-9]|[12]\\\
    d|3[01])-(00[1-9]|0[1-9]\\d|[12]\\d|0[1-9]|3[01])$/) {\n            return 1;\n\
    \        } elsif ($date =~ /^(0[1-9]|[12]\\d|3[01])-(00[1-9]|0[1-9]\\d|[12]\\\
    d)$/) {\n            return 1;\n        } elsif ($date =~ /^(0[1-9]|[12]\\d)-(00[1-9]|0[1-9]\\\
    d|[12]\\d|0[1-9]|3[01])$/) {\n            return 1;\n        } elsif ($date =~\
    \ /^(0[1-9]|[12]\\d)-(00[1-9]|0[1-9]\\d|[12]\\d|0[1-9]|3[01])$/) {\n         \
    \   return 1;\n        } elsif ($date =~ /^(0[1-9]|[12]\\d)-(00[1-9]|0[1-9]\\\
    d|[12]\\d\\d)$/) {\n            return 1;\n        } elsif ($date =~ /^(0[1-9]|[12]\\\
    d)-(00[1-9]|0[1-9]\\d|[12]\\d|0[1-9]|3[01])$/) {\n            return 1;\n    \
    \    } elsif ($date =~ /^(0[1-9]|[12]\\d)-(00[1-9]|0[1-9]\\d|[12]\\d|0[1-9]|3[01])$/)\
    \ {\n            return 1;\n        } elsif ($date =~ /^(0[1-9]|[12]\\d)-(00[1-9]|0[1-9]\\\
    d|[12]\\d|0[1-9]|3[01])$/) {\n            return 1;\n        } elsif ($date =~\
    \ /^(0[1-9]|[12]\\d)-(00[1-9]|0[1-9]\\d|[12]\\d|0[1-9]|3[01])$/) {\n         \
    \   return 1;\n        }\n        return \"\";\n    }\n    return \"\";\n}", " \
    \   chomp($date);\n    \n    # No empty date.\n    if(!$date) {\n        return\
    \ 1;\n    }", "    if ( $date eq \"\" ) { \n\treturn 1;\n    } elsif ( $date !~\
    \ /^[0-9]{1,2}\\/[0-9]{1,2}\\/[0-9]{4}$/ ) {\n\treturn \"\";\n    } elsif ( $date\
    \ !~ /^([1][3-9]\\d)|([0][3-9]\\d)|([3-9]\\d)|([1][0]\\d)|([1-9]\\d)$/ ) {\n\t\
    return \"\";\n    } elsif ( $date !~ /^([1-9]\\d)|([3-9]\\d)$/ ) {\n\treturn \"\
    \";\n    } elsif ( $date !~ /^([1-9]\\d)|([1-9]\\d)|([1-9]\\d)|([1-9]\\d)|([1-9]\\\
    d)|([1-9]\\d)|([1-9]\\d)|([1-9]\\d)$/ ) {\n\treturn \"\";\n    } elsif ( $date\
    \ !~ /^([1][0-2])|([3][0-2])|([5][0-2])|([7][0-2])|([8][0-2])|([10][0-2])|([12][0-2])$/\
    \ ) {\n\treturn \"\";\n    } elsif ( $date !~ /^([4][0-2])|([6][0-2])|([9][0-2])|([11][0-2])$/\
    \ ) {\n\treturn \"\";\n    } elsif ( $date !~ /^([2][0-8])|([3][0-8])|([5][0-8])|([7][0-8])|([8][0-8])|([10][0-8])|([12][0-8])$/\
    \ ) {\n\treturn \"\";\n    } elsif ( $date !~ /^([2][0-3])|([3][0-3])|([5][0-3])|([7][0-3])|([8][0-3])|([10][0-3])|([12][0-3])$/\
    \ ) {\n\treturn \"\";\n    } elsif ( $date !~ /^([3][1-9])|([6][1-9])|([9][1-9])|([11][1-9])$/\
    \ ) {\n\treturn \"\";\n    } elsif ( $date !~ /^([1-9][0-8])|([1-9][0-2])|([1-9][3][0-2])|([1-9][5][0-2])|([1-9][7][0-2])|([1-9][8][0-2])|([1-9][10][0-2])",
  "    return $date unless $date =~ /^(?:\\s*$)?$/;\n    my($month,$day,$year) = split(\"\
    -\", $date);\n    return $date unless $month =~ /^\\d{1,2}$/;\n    return $date\
    \ unless $day =~ /^\\d{1,2}$/;\n    return $date unless $month =~ /^(1[012]|0[1-9]\\\
    d)$/;\n    return $date unless $day =~ /^(\\d\\d|[01]\\d|[12]\\d|3[01])$/;\n \
    \   return $date unless $day =~ /^([1-9]\\d)$/;\n    return $date unless $day\
    \ =~ /^([1-9]\\d)$/;\n    return $date unless $day =~ /^([1-9]\\d)$/;\n    return\
    \ $date unless $day =~ /^(30)$/;\n    return $date unless $day =~ /^(31)$/;\n\
    \    return $date unless $day =~ /^(29)$/;\n    return $date unless $day =~ /^(29)$/;\n\
    \    return $date unless $day =~ /^(29)$/;\n    return $date unless $day =~ /^(29)$/;\n\
    \    return $date unless $day =~ /^(30)$/;\n    return $date unless $day =~ /^(29)$/;\n\
    \    return $date unless $day =~ /^(29)$/;\n    return $date unless $day =~ /^(29)$/;\n\
    \    return $date unless $day =~ /^(30)$/;\n    return $date unless $day =~ /^(29)$/;\n\
    \    return $date unless $day =~ /^(29)$/;\n    return $date unless $day =~ /^(29)$/;\n\
    \    return $date unless $day =~ /^(29)$/;\n    return $date unless $day =~ /^(29)$/;\n\
    \    return $date unless $day =~ /^(29)$/;\n    return $date unless $day =~ /^(30)$/;\n\
    \    return $date unless $day =~ /^(29)$/;\n    return $date unless $day =~ /^(29)$/;\n\
    \    return $date unless $day =~ /^(29)$/;\n    return $date unless $day =~ /^(29)$/;\n\
    \    return $date unless $day =~ /^(29)$/;\n    return $date unless $day =~ /^(29)$/;\n\
    \    return $", "    chomp($date);\n    $date = lc($date);\n    return 1 unless\
    \ length($date);\n    $date = -0 unless $date =~ /^-?\\d/;\n    $date =~ tr/-/\
    \ /;\n    $date =~ s/^(0?[1-9]|[12][0-9]|3[01])/01/i;\n    $date =~ s/^(0?[1-9]|1[0-2])/02/i;\n\
    \    $date =~ s/^(0?[1-9]|1\\d|2\\d|3[01])/03/i;\n    $date =~ s/^(0?[1-9]|1[0-2])/\\\
    d{2}/i;\n    $date =~ s/^(0?[1-9]|[12][0-9]|3[01])\\/(04|06|09|11)/i;\n    $date\
    \ =~ s/^(0?[1-9]|1[0-2])\\/(04|06|09|11)/i;\n    $date =~ s/^(0?[1-9]|1[0-2])\\\
    /(04|06|09|11)$/i;\n    $date =~ s/^(0?[1-9]|1[0-2])\\/(0[1-9]|1[0-2])\\/(20(0|1)|21(0|1))$/i;\n\
    \    return $date eq \"\" ? \"\" : $date;\n}", "    \n    return \"\" if(!$date);\n\
    \    $date =~ /^([0-9]{2}\\/[0-9]{2}\\/[0-9]{4})$/;\n    \n    # Check the date\
    \ format\n    if(!$1 || $1 !~ m/([0-9]{2}\\-[0-9]{2}\\-[0-9]{4})/) {\n       \
    \ return \"\";\n    }\n    \n    # Check the number of days of the month\n   \
    \ my $num_days = 0;\n    $num_days +=  (28 + 29 + (31 - $1))%31  if($1 !~ m/([0-9]{1,2})/);\n\
    \    $num_days +=  (31 - ($1 + 1))%31  if($1 =~ m/([0-9]{1,2})/);\n    $num_days\
    \ +=  (29 - $1)%31  if($1 !~ m/([0-9]{1,2})/);\n    \n    # Check the months of\
    \ the year\n    $num_days +=  $1 < 1 ?  30 : 29;\n    $num_days +=  ($1 > 12 ?\
    \  $1-12 : $1)%12  if($1 !~ m/([0-9]{1,2})/);\n    \n    return $num_days;\n}",
  "    my $valid = 1;\n    # No empty strings\n    return $valid if ( $date =~ /^$/\
    \ );", "    my ($day, $month, $year) = (\"\",\"\",\"\");\n    if($date eq \"\"\
    ) {\n\treturn \"1\";\n    }\n    \n    $date =~ /(\\d+)-(\\d+)-(\\d+)/;\n    $day\
    \   = $1;\n    $month = $2;\n    $year  = $3;\n    \n    if($day eq \"\" || $month\
    \ eq \"\" || $year eq \"\") {\n\treturn \"1\";\n    }\n    \n    if($day < 1 ||\n\
    \t$month < 1 || $month > 12 ||\n\t$year < 1 || $year > 9999) {\n\treturn \"1\"\
    ;\n    }\n    \n    if($day > 29) {\n\treturn \"1\";\n    }\n    \n    if($day\
    \ > 31 || ($month == 4 && $day > 30) || ($month == 6 && $day > 30)) {\n\treturn\
    \ \"1\";\n    }\n    \n    if($month == 2 && $day > 29) {\n\treturn \"1\";\n \
    \   }\n    \n    if($month > 12) {\n\treturn \"1\";\n    }\n    \n    return \"\
    1\";\n}", "    return 0 unless $date;\n    my $day_count = 0;\n    my $month_count\
    \ = 0;\n    my $year = 0;\n    my $date_length = length($date);\n    while($date_length\
    \ >= 4) {\n        if($date =~ /^([0-9]{2})-([0-9]{2})-([0-9]{4})$/) {\n     \
    \       $day_count = $1;\n            $month_count = $2;\n            $year =\
    \ $3;\n        } elsif($date =~ /^([0-9]{2})\\/([0-9]{2})\\/([0-9]{4})$/) {\n\
    \            $day_count = $2;\n            $month_count = $3;\n            $year\
    \ = $4;\n        }\n        else {\n            return 0;\n        }\n       \
    \ $date_length -= 4;\n        if($day_count == 1 or $day_count == 31 or $day_count\
    \ == 30) {\n            if($month_count == 1 or $month_count == 3 or $month_count\
    \ == 5 or $month_count == 7 or $month_count == 8 or $month_count == 10 or $month_count\
    \ == 12 or $month_count == 4) {\n                if($year > 1900 or $year < 2020)\
    \ {\n                    return 1;\n                }\n                else {\n\
    \                    return 0;\n                }\n            }\n           \
    \ elsif($month_count == 4 or $month_count == 6 or $month_count == 9 or $month_count\
    \ == 11) {\n                if($year > 1900 or $year < 2020) {\n             \
    \       return 1;\n                }\n                else {\n               \
    \     return 0;\n                }\n            }\n            elsif($month_count\
    \ == 2) {\n                if($year > 1900 or $year < 2020) {\n              \
    \      return 1;\n                }\n                else {\n                \
    \    return 0;\n                }\n            }\n            else {\n       \
    \         return 0;\n            }\n        }\n        else {\n            return\
    \ 0;\n        }\n    }\n    if($date_length > 0) {\n        return 0;\n    }\n\
    \    else {\n        return 1;\n    }\n}\n</code>\n<|/ a |>\n<| c |>\nPlease add\
    \ some explanation to your answer.\n<|/ c |>\n<| c |>\nI didn't know about this\
    \ perl function before. Thank you!\n<|/ c |>\n<| c |>\nIt's a perl function, not\
    \ a function in any programming language I know of. I thought you might find it\
    \ useful.\n<|/ c |>\n<| c |>\nIt is also a bad idea. As mentioned in the comments,\
    \ your solution breaks if the date is more than 30 days in any month. You should\
    \ check every month to ensure it conforms to the rules.\n<|/ c |>\n<| c |>\nI\
    \ totally agree with you, my solution should be used only when validating date\
    \ in mm-dd-yyyy format, otherwise your solution might be better.\n<|/ c |>\n<|\
    \ a |>\nHere is my solution", "    # Extract the month, day, and year. \n    chomp\
    \ $date;\n    my ($day, $month, $year) = split \"-\", $date;\n    $day   -= 1;\n\
    \    $month -= 1;\n    return unless ($month < 1 || $month > 12);\n    return\
    \ unless ($day < 1 || $day > 30);\n    return unless ($day > 29 || ($month ==\
    \ 2 && $day > 29));\n    return $day;\n}", "    return '' if $date eq '';\n  \
    \  my $error = '';\n    my $daysInMonth = GetDaysInMonth(scalar(split(\"-\",$date)));\n\
    \    my $dayCount = 1;\n    my $day = '';\n    my $month = GetMonth($date);\n\
    \    my $year = '';\n    my $daysInMonth = 0;\n    my $validDays = 1;\n    my\
    \ $validMonths = 1;\n    my $validYears = 1;\n    my $days = '31';\n    my $months\
    \ = '12';\n    my $years = '9999';\n    if ($date =~ /^\\d{4}-\\d{2}-\\d{2}/)\
    \ {\n        ($day, $month, $year) = split('-', $date);\n    }\n    else {\n \
    \       $error = $date . ' is an invalid date format.';\n    }\n    if ($date\
    \ =~ /^\\d{4}-\\d{2}-\\d{2}/) {\n        ($daysInMonth, $validMonths, $validYears)\
    \ = GetDaysInMonth(scalar(split(\"-\",$date)));\n    }\n    elsif ($date =~ /^\\\
    d{2}/) {\n        ($daysInMonth, $validMonths, $validYears) = GetDaysInMonth(scalar(split(\"\
    -\", $date)));\n    }\n    elsif ($date =~ /^\\d{2}/) {\n        ($validDays,\
    \ $validMonths, $validYears) = GetDaysInMonth(scalar(split(\"-\", $date)));\n\
    \    }\n    if ($month < 0) {\n        $error = $date . ' is an invalid date format.';\n\
    \    }\n    elsif ($month > 12) {\n        $error = $date . ' is an invalid date\
    \ format.';\n    }\n    elsif ($month == 2) {\n        if ($date =~ /^\\d{2}-(0?[1-9]|1[0-2])-\\\
    d{4}/) {\n            $daysInMonth = 1;\n        }\n        else {\n         \
    \   $error = $date . ' is an invalid date format.';\n        }\n    }\n    elsif\
    \ ($daysInMonth == 0) {\n        $error = $date . ' is an invalid date format.';\n\
    \    }\n    if ($day < 0) {\n        $error = $date . ' is an invalid date format.';\n\
    \    }\n    elsif ($day > $daysInMonth) {\n        $error = $date . ' is an invalid\
    \ date format.';\n    }\n    if ($year < 0) {\n        $error = $date . ' is an\
    \ invalid date format.';\n    }\n    elsif ($year > $years) {\n        $error\
    \ = $date . ' is an invalid date format.';\n    }\n    if ($error eq '') {\n \
    \       return $day;\n    }\n    else {\n        return $error;\n    }\n}", " \
    \   $date =~ /(^(((0?[1-9]|1[012])[\\- \\/])*(0?[1-9]|[12][0-9]|3[01])))|(((0?[1-9]|[12][0-9]|30)[\\\
    - \\/])*(0?[1-9]|1[012])))|(((0?[1-9]|1[012])[\\- \\/])*(29|30)|((0?[1-9]|[12][0-9]|30)[\\\
    - \\/])*(29|29)))|(29\\/02\\/(([0-9]{2}(01|02|03|04|05|06|07|08|09|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30)))$/;\n\
    \    return $date;\n}", "    $date =~ /^([0-9]{2})-([0-9]{2})-([0-9]{4})$/;\n\
    \    return 0 if $1 eq \"\" || $2 eq \"\" || $3 eq \"\";\n    return 0 if (($1\
    \ >= 1 || $1 <= 31) && ($2 >= 1 || $2 <= 30) && ($3 >= 1 || $3 <= 29));\n    return\
    \ 0 if (($1 >= 4 || $1 <= 12) && ($2 >= 4 || $2 <= 12) && ($3 >= 4 || $3 <= 12));\n\
    \    return 1;\n}", "    my $check = 0;\n    if ($date ne \"\" && length($date)\
    \ > 0) {\n        $date = split '-', $date;\n        for my $m (1..12) { \n  \
    \          if ($date >= \"01-$m-$date[2]\") { $check++; }\n        }\n    }\n\
    \    if ($check == 12) { $check = 0; }\n    if ($check < 1 || $check > 29) { $check\
    \ = \"\"; }\n    return $check;\n}", "    return 1 unless $date ne '';", "   \
    \ \n    if (!$date) {\n\tdie \"Date is mandatory\";\n    }\n    \n    my ($day,\
    \ $month, $year) = split(/\\-/, $date);\n    \n    if ($day <= 0) {\n\tdie \"\
    Days should not be less than 1 or higher than 31 days for months 1,3,5,7,8,10,12\"\
    ;\n    }\n    \n    if ($day > 31) {\n\tdie \"Days should not be less than 1 or\
    \ higher than 31 days for months 4,6,9,11\";\n    }\n    \n    if ($month < 1\
    \ || $month > 12) {\n\tdie \"Months should not be less than 1 or higher than 12\"\
    ;\n    }\n    \n    if ($year % 400 == 0) {\n\tif ($day < 1) {\n\t    die \"Days\
    \ should not be less than 1 or higher than 30 days for month 2\";\n\t}\n    }\n\
    \    \n    if ($year % 100 == 0) {\n\tif ($day < 1) {\n\t    die \"Days should\
    \ not be less than 1 or higher than 29 for the month 2\";\n\t}\n    }\n    \n\
    \    if ($year % 4 == 0) {\n\tif ($day < 1) {\n\t    die \"Days should not be\
    \ less than 1 or higher than 29 for the month 2\";\n\t}\n    }\n    \n    return\
    \ 1;\n}", "    my(@date) = split(/\\-/,$date);\n    my(@months) = ('January','February','March','April','May','June','July','August','September','October','November','December');\n\
    \    my(@days) = ('01','02','03','04','05','06','07','08','09','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31');\n\
    \    my(@years) = ('2000','2001','2002','2003','2004','2005','2006','2007','2008','2009','2010','2011','2012');\n\
    \    my(@century_dates) = ('01-29-2000', '01-31-2000', '02-29-2000', '02-31-2000',\
    \ '03-29-2000', '03-31-2000', '04-29-2000', '04-31-2000', '05-29-2000', '05-31-2000',\
    \ '06-29-2000', '06-31-2000', '07-29-2000', '07-31-2000', '08-31-2000', '09-29-2000',\
    \ '09-31-2000', '10-31-2000', '11-29-2000', '11-30-2000', '12-31-2000', '12-31-2001',\
    \ '01-29-2001', '01-31-2001', '02-29-2001', '02-31-2001', '03-29-2001', '03-31-2001',\
    \ '04-29-2001', '04-31-2001', '05-29-2001', '05-31-2001', '06-29-2001', '06-31-2001',\
    \ '07-29-2001', '07-31-2001', '08-31-2001', '09-29-2001', '09-31-2001', '10-31-2001',\
    \ '11-29-2001', '11-29-2002', '01-31-2002', '02-29-2002', '02-31-2002', '03-29-2002',\
    \ '03-31-2002', '04-29-2002', '04-29-2003', '05-31-2002', '06-29-2002', '06-29-2003',\
    \ '07-31-2002', '07-31-2003', '08-31-2002', '09-31-2002', '09-31-2003', '10-31-2002',\
    \ '11-29-2002', '11-29-2003', '12", '    my($day, $month, $year) = (0, 0, 0);',
  "    # You have to complete this function\n    return 0 unless $date;", "    return\
    \ $date if !defined($date) || $date eq \"\";\n    my($d,$m,$y) = split /-/, $date;\n\
    \    my($maxDays) = 31;\n    my($maxMonth) = 12;\n    my($minDays) = 1;\n    my($minMonth)\
    \ = 1;", "    my ($day, $month, $year) = $date =~ /^(\\d\\d)-(\\d\\d)-(\\d\\d\\\
    d\\d)$/;\n    my $days_in_month = [31,28,31,30,31,30,31,31,30,31,30,31];\n   \
    \ my $max_days_in_month = max(@$days_in_month);\n    if($day == \"\" || $day >\
    \ 31 || $day < 1 || $day > $max_days_in_month) {\n        return \"\";\n    }\n\
    \    if($month == \"\" || $month > 12 || $month < 1 || $month > $max_days_in_month)\
    \ {\n        return \"\";\n    }\n    if($year == \"\") {\n        return \"\"\
    ;\n    }\n    return 1;\n}\n</code>\n<|/ a tags=date,perl,datetime |>\n<| c |>\n\
    I love this solution, but it's too restrictive in that it's not exactly what the\
    \ OP asked for. I'm guessing that's not a problem, since he said \"My date range\
    \ is between two dates. For example: Jan 15 - Jan 31. Jan 29 - Jan 31\". With\
    \ this solution, that would result in Jan 15 - Jan 15, which isn't what he asked\
    \ for.\n<|/ c |>\n<| c |>\nI added a function to my answer. Now it should work\
    \ as expected.\n<|/ c |>\n<| c |>\nSure, now it's a much better solution. Just\
    \ be aware that it's not really a Perl problem at all, but a pure logic problem\
    \ :-)\n<|/ c |>\n<| c |>\nYour answer isn't quite right. For the dates listed\
    \ in the question, the function returns `1`, but in fact they should be valid.\
    \ For example, `valid_date('15-01-2012')` should be `1`, and not `0`.\n<|/ c |>\n\
    <| c |>\nYes, I forgot to update the code. Now it should work.\n<|/ c |>\n<| a\
    \ tags=date,perl,datetime |>\nThis is another approach that uses DateTime::Format::Strptime\
    \ and its strptime function to parse dates and times. It uses the same regular\
    \ expression as suggested by Sobrique, except that it uses capturing parentheses\
    \ around the time part. This allows the date to be parsed twice, once to check\
    \ that it is valid and once to check that the time is valid. \n<code>\nuse warnings;\n\
    use strict;\nuse feature 'say';", "    chomp($date);\n    $date =~ /^(\\d+)-(\\\
    d+)-(\\d+)$/;\n    my $valid_days_in_month = [31, 29, 31, 30, 31, 30, 31, 31,\
    \ 30, 31, 30, 31];\n    my ($days, $month, $year) = split('-', $date);", "   \
    \ return \"\" unless $date;\n    my($day,$month,$year) = split '-', $date;\n \
    \   return 1 if ($day =~ /^[0-1]{1}[0-9]$/);\n    return 1 if ($day =~ /^[1-31]{1}$/);\n\
    \    return 1 if ($day =~ /^[1-30]{1}$/);\n    return 1 if ($day =~ /^[12]{1}$/);\n\
    \    return 1 if ($month=~/^[0-1]{1}[0-9]$/);\n    return 1 if ($month=~/^[1-31]{1}$/);\n\
    \    return 1 if ($month=~/^[1-30]{1}$/);\n    return 1 if ($month=~/^[12]{1}$/);\n\
    \    return 0 if ($month < 1 || $month > 12);\n    return 0 if ($day < 1 || $day\
    \ > 31);\n    return 0 if ($year < 1 || $year > 9999);\n    return 1;\n}\n</code>\n\
    <|/ a tags=validation,date,perl |>\n<| a dscore=2 |>\nA solution to your problem\
    \ would be to convert your dates to Julian days, then compare the numbers to see\
    \ if they are valid.  \n<code>", "    my $valid_months = qw(1 3 5 7 8 10 12);\n\
    \    my $valid_days_1 = qw(31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15\
    \ 14 13 12 11 10 9 8 7 6 5 4 3 2 1);\n    my $valid_days_2 = qw(31 30 29 28 27\
    \ 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1);\n   \
    \ my $valid_days_3 = qw(31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14\
    \ 13 12 11 10 9 8 7 6 5 4 3 2 1);\n    my $valid_days_4 = qw(31 30 29 28 27 26\
    \ 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1);\n    my\
    \ $valid_days_5 = qw(31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13\
    \ 12 11 10 9 8 7 6 5 4 3 2 1);\n    my $valid_days_6 = qw(31 30 29 28 27 26 25\
    \ 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1);\n    my $valid_days_7\
    \ = qw(31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7\
    \ 6 5 4 3 2 1);\n    my $valid_days_8 = qw(31 30 29 28 27 26 25 24 23 22 21 20\
    \ 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1);\n    my $valid_days_9 = qw(31\
    \ 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3\
    \ 2 1);\n    my $valid_days_10 = qw(31 30 29 28 27 26 25 24 23 22 21 20 19 18\
    \ 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1);\n    my $valid_days_11 = qw(31 30\
    \ 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2\
    \ 1);\n    my $valid_days_12 = qw(31 30 29 28 27 26 25 24 23 22 21 20 19 18 17\
    \ 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1);\n    my $valid_day", "    my($year,\
    \ %dates);\n    my($valid) = 1;\n    my(@errors) = ();\n    \n    if ($date) {\n\
    \        $date = $self->sanitize($date);\n    }\n    \n    # Split the date into\
    \ month, date and year.\n    my($month, $date, $year) = split '-', $date;\n  \
    \  \n    # We can only validate a date if the month is in the right range.\n \
    \   # For example, we cannot validate a date if the month is less than one or\
    \ greater than 12.\n    if (!$year) {\n        push(@errors, \"Missing date\"\
    );\n        $valid = 0;\n    }\n    \n    # If the month is less than one or greater\
    \ than 12, we cannot validate it.\n    if (!($month >= 1 && $month <= 12)) {\n\
    \        push(@errors, \"Invalid month\");\n        $valid = 0;\n    }\n    \n\
    \    # We can only validate a date if the date is in the right range.\n    # For\
    \ example, we cannot validate a date if the date is less than one or greater than\
    \ 31.\n    if (!$date) {\n        push(@errors, \"Missing date\");\n        $valid\
    \ = 0;\n    }\n    \n    # If the date is less than one or greater than 31, we\
    \ cannot validate it.\n    if (!($date >= 1 && $date <= 31)) {\n        push(@errors,\
    \ \"Invalid date\");\n        $valid = 0;\n    }\n    \n    # We can only validate\
    \ a date if the year is in the right range.\n    # For example, we cannot validate\
    \ a date if the year is less than one or greater than 12.\n    if (!$year) {\n\
    \        push(@errors, \"Missing year\");\n        $valid = 0;\n    }\n    \n\
    \    # If the year is less than one or greater than 12, we cannot validate it.\n\
    \    if (!($year >= 1 && $year <= 12)) {\n        push(@errors, \"Invalid year\"\
    );\n        $valid = 0;\n    }\n    \n    # We cannot validate a date if the date\
    \ is invalid if the month is invalid or the year is invalid.\n    if (!$valid\
    \ && (!$month || !$year || !$date)) {\n        push(@errors, \"Invalid date\"\
    );\n        $valid = 0;\n    }\n    \n    # If the date is invalid, we cannot\
    \ validate it.\n    if (!$valid) {\n        push(@errors, \"Invalid date\");\n\
    \        $valid = 0;\n    }\n    \n    # If there were no errors, we return 1.\n\
    \    if (@errors == 0) {\n        return 1;\n    }\n    \n    # We return an empty\
    \ string if there are errors (@errors) otherwise we return 0.\n    if (@errors\
    \ != 0) {\n        return \"\";\n    }\n}", "    return 1 if ($date && $date ne\
    \ '');\n    my($days) = @_;\n    return \"\" if ($days);\n    my($months) = @_;\n\
    \    return \"\" if ($months);\n    my($year) = $date =~ m!^(\\d{4})$!;\n    return\
    \ \"\" if ($year < 2000);\n    my($month) = $date =~ m!^(\\d{2})-(\\d{2})-([12]\\\
    d{3})$!;\n    return \"\" if ($month < 1 || $month > 12);\n    my($day) = $date\
    \ =~ m!^(\\d{2})-(\\d{2})$!;\n    return \"\" if ($day < 1 || $day > 31);\n  \
    \  return 1;\n}", "    $date ||= 0;\n    \n    if ( $date =~ /^\\s*$/ ) {\n  \
    \      return 0;\n    }\n    \n    $date =~ /^(\\d{1,2}\\-\\d{1,2}\\-\\d{4})$/;\n\
    \    \n    return 1 \n        if $date !~ /^\\d{1,2}\\-\\d{1,2}\\-\\d{4}$/;\n\
    \    \n    my($days) = ($date =~ /^(\\d{1,2}-\\d{1,2}-\\d{4})\\s/);\n    $days\
    \ =~ s/^\\s+//;\n    $days =~ s/\\s+$//;\n    \n    my($months) = ($date =~ /^(\\\
    d{1,2}-\\d{1,2}-\\d{4})-(\\d{1,2})\\s/);\n    $months =~ s/^\\s+//;\n    $months\
    \ =~ s/\\s+$//;\n    \n    if ( $months =~ /^(\\d{1,2})\\-(\\d{1,2})\\-(\\d{4})$/\
    \ ) {\n        $months = $1 . \"-\" . $2 . \"-\" . $3;\n    }\n    \n    my($months_array)\
    \ = ($months =~ /^(\\d{1,2})\\s(\\d{1,2})\\s(\\d{4})$/ );\n    \n    if ( !defined\
    \ $months_array ) {\n        return 0;\n    }\n    \n    for my $month ($months_array[0]\
    \ .. $months_array[1] ) {\n        my $days_in_month = $days_in_months[$months_array[0]];\n\
    \        if ( !defined $days_in_month ) {\n            $days_in_month = $days_in_months[$months_array[1]];\n\
    \        }\n        \n        if ( $days != $days_in_month ) {\n            return\
    \ 0;\n        }\n    }\n    \n    return 1;\n}", "    chomp $date;\n    return\
    \ 0 if $date eq \"\" or length $date < 2;\n    return 1 if $date !~ /^([0-9]{2})-([0-9]{2})-([0-9]{4})$/;\n\
    \    my $days_left = $2 - $1 - 1;\n    if ($days_left < 1 or $days_left > 31)\
    \ {\n        return 0;\n    }\n    my $month_left = $3 - 1;\n    if ($month_left\
    \ < 1 or $month_left > 12) {\n        return 0;\n    }\n    return 1;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nI agree that your code is more readable, but I disagree that\
    \ it is the more efficient.  When you take out the leap years you are now checking\
    \ each day in two loops.  This can be optimized if you use a hash of months instead\
    \ of an array.  And finally, a for loop using $i and $j as iterators is more efficient\
    \ than a while loop using $i-- and $j++ because of the special case of a leap\
    \ year.\n<|/ c |>\n<| c |>\n: I agree that my code does more checks than yours.\
    \ I did notice that the leap years loop was only checking the days up to 30, not\
    \ 31. I'm going to fix that (though I'm still unsure whether the OP was also worried\
    \ about February or only valid dates on leap years). I'll try to find a time when\
    \ I'll use your code to see if I can optimize it more, but I'm pretty sure that\
    \ my code will be faster because a hash lookup is much more efficient than a linear\
    \ search.\n<|/ c |>\n<| a tags=perl,validation,date dscore=2 |>\nThis code will\
    \ validate dates entered in any order and any number of times. I used a hash of\
    \ month names because I assume that the first entry of the hash will be the month\
    \ number for the last entry in the hash. Since you didn't specify what to do if\
    \ a month is not present in the hash, I assumed you just want to return \"\" for\
    \ any non-valid date. \n<code>", "    chomp($date);\n    my ($day, $month, $year)\
    \ = $date =~ /(\\d+)-(\\d+)-(\\d+)/;\n    if ($day < 1 or $day > 31) or $month\
    \ < 1 or $month > 12 or $year < 1000 or $year > 9999 or $month == 2) {\n     \
    \   return 0;\n    }\n    if ($month == 1 || $month == 3 || $month == 5 || $month\
    \ == 7 || $month == 8 || $month == 10 || $month == 12) {\n        return $day\
    \ > 30;\n    }\n    if ($month == 4 || $month == 6 || $month == 9 || $month ==\
    \ 11) {\n        return $day > 29;\n    }\n    return 1;\n}", "    die \"Date\
    \ is invalid\" if length $date;\n    $date =~ /^(\\d{2})-?(\\d{2})-?(\\d{4})$/;\n\
    \    my($day,$month,$year) = ($1,$2,$3);\n    # Check if $day and $month are valid\
    \ integers\n    $day =~ /^\\d+$/ or die \"Invalid day '$day'\";\n    $month =\
    \ $month+1 if $month >= 1;\n    $month = $month+2 if $month >= 3;\n    $month\
    \ = $month+4 if $month >= 5;\n    $month = $month+6 if $month >= 7;\n    $month\
    \ = $month+8 if $month >= 9;\n    $month = $month+10 if $month >= 11;\n    $month\
    \ = $month+12 if $month >= 13;\n    # Check if $day and $month are valid for given\
    \ $year\n    $year =~ /^\\d+$/ or die \"Invalid year '$year'\";\n    return 1\
    \ if ($day > 31 && $day < 1 || ($month > 12 && $month < 1) || ($year < 1900 ||\
    \ $year > 2100));\n    return '';\n}", "    my($day, $month, $year) = split( /\\\
    -/, $date, 2);\n    return 1 if ($day && $month && $year);\n    return 1 if (($day\
    \ == 1) || ($day == 31));\n    return 1 if (($day == 2) || ($day == 29));\n  \
    \  return 1 if (($month == 0) || ($month == 12));\n    return 1 if ($month < 1\
    \ || $month > 12);\n    return 1 if ($day < 1 || $day > 30);\n    return 1 if\
    \ ($day < 1 || $day > 31);\n    return 1;\n}", "    my($valid_date_format) = qw/\n\
    \        %m\n        %-d\n        %Y\n        /;\n    return 1 if ($date eq \"\
    \" || $date !~ /^$valid_date_format$/i);\n    # 1. month should be between 1 and\
    \ 12.\n    # 2. day should always be between 1 and 31\n    # 3. year should be\
    \ between 1900 and 2099.\n    return \"\" if ($date !~ /^(\\d{1,2}\\-\\d{1,2}\\\
    -\\d{4})$/);\n    my($mm,$dd,$yyyy) = split('-', $date);\n    if ($mm < 1 || $mm\
    \ > 12) { # Invalid month.\n        return \"\";\n    }\n    if ($dd < 1 || $dd\
    \ > 31) { # Invalid month.\n        return \"\";\n    }\n    if ($yyyy < 1900\
    \ || $yyyy > 2099) { # Invalid month.\n        return \"\";\n    }\n    # All\
    \ the conditions above have been verified, return the valid date.\n    return\
    \ $date;\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\n`^\\d{1,2}-\\d{1,2}-\\d{4}$`\
    \ matches anything that matches this pattern `\\d{2}-\\d{2}-\\d{4}`. Not really\
    \ sure if this is what OP wants.\n<|/ c |>\n<| c |>\n: That is correct, but OP\
    \ has mentioned that `mm-dd-yyyy` can be used. So, I thought he may want to do\
    \ that and I have done that.\n<|/ c |>\n<| c |>\nThat is correct. But OP mentioned\
    \ that `mm-dd-yyyy` can also be used. So, I thought to make it as general as possible.\n\
    <|/ c |>\n<| a tags=perl,date |>\n<code>\nuse Date::Valid;\nmy $datestring = '06-31-2040';\n\
    my $date = Date::Valid->new( $datestring );\nif ($date->is_valid) {\n    say \"\
    The date is valid\";\n} else {\n    say \"The date is invalid\";\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a |>\nMy suggestion is to use Date::Validate\n<code>\nuse\
    \ Date::Validate;\nmy $datestring = '06-31-2040';\nmy $date = Date::Validate->new(\
    \ $datestring );\nif ($date->is_valid) {\n    say \"The date is valid\";\n} else\
    \ {\n    say \"The date is invalid\";\n}\n</code>\n<|/ a tags=perl,date dscore=1\
    \ |>\n<| a tags=perl,date dscore=1 |>\nThe answers given so far don't consider\
    \ the fact ", "    \n    # check for valid date string\n    if ($date =~ /[A-Za-z\\\
    /\\-]/) {\n        if ($date !~ /^\\-?\\d\\d$/) {\n            # invalid date\
    \ string\n            return \"\";\n        }\n    }", "    return unless (defined\
    \ $date);\n    # Check if the date string is empty\n    return 1 if ($date eq\
    \ \"\"); \n    # Check if the month is valid\n    if ($date =~ /^(\\d+)-(\\d+)-(\\\
    d+)$/) {\n        return 1 if ($3 <= 12 && $3 >= 1 && $2 <= 31 && $2 >= 1 && $1\
    \ <= 30);\n    }\n    # Check if the year is valid\n    return 1 if ($date =~\
    \ /^(\\d+)-(\\d+)$/);\n    # Check if the day is valid\n    return 1 if ($date\
    \ =~ /^(\\d+)$/);\n    return \"\";\n}", '    my (@months,$year,$month,$day,$day,$date,$month,$day,$day1,$day2,$day3,$day4,$day5,$day6,$day7);',
  "    chomp($date);\n    $date =~ /^(\\d{2})-(([0][1-9]|[1][0-2])-([12]\\d|[3][01]))$/;\n\
    \    my $days_total = 0;\n    my $months_total = 0;\n    if ($2 > 12) {\n    \
    \    $months_total++;\n    }\n    if ($3 == 1) {\n        $days_total++;\n   \
    \ }\n    if ($3 > 31 && $3 != 12) {\n        $months_total++;\n    }\n    if ($3\
    \ > 31 && $3 == 12) {\n        $days_total++;\n    }\n    if ($3 > 30 && $3 ==\
    \ 31) {\n        $months_total++;\n    }\n    if ($3 > 29 && $3 == 31) {\n   \
    \     $months_total++;\n    }\n    if ($months_total > 12) {\n        $months_total\
    \ = 12;\n    }\n    if ($days_total > 31 || $days_total < 1) {\n        $days_total\
    \ = 1;\n    }\n    if ($days_total > 30 && $days_total != 31) {\n        $days_total\
    \ = 30;\n    }\n    if ($days_total > 29 && $days_total != 31) {\n        $days_total\
    \ = 29;\n    }\n    if ($days_total > 12 && $days_total != 31) {\n        $days_total\
    \ = 31;\n    }\n    if ($months_total > 12) {\n        $months_total = 12;\n \
    \   }\n    if ($days_total == 0 || $months_total == 0) {\n        $date = \"\"\
    ;\n    }\n    if ($days_total == 2 || $months_total == 2 && $2 == 1) {\n     \
    \   $date = \"\";\n    }\n    if ($days_total > 12 || $months_total > 12) {\n\
    \        $date = \"\";\n    }\n    return $date;\n}", "    return undef unless\
    \ $date;\n    chomp($date);\n    my $days;\n    my($month, $year) = split(/\\\
    -/, $date);\n    if ($month < 1 || ($month > 12 && $month != 2)) {\n        return\
    \ \"\";\n    }\n    if ($month == 1 && ($year % 4 != 0 || $year % 100 == 0 &&\
    \ $year % 400 != 0)) {\n        if ($year % 4 == 0 && $month == 1) {\n       \
    \     $month += 12;\n        }\n    }\n    my $days_in_month;\n    if ($month\
    \ == 2) {\n        if ($year % 400 == 0) {\n            $days_in_month = 31;\n\
    \        }\n        elsif ($year % 100 == 0) {\n            $days_in_month = 30;\n\
    \        }\n        else {\n            $days_in_month = 31;\n        }\n    }\n\
    \    else {\n        if ($month == 1) {\n            $days_in_month = 29;\n  \
    \      }\n        else {\n            $days_in_month = [1 .. 12];\n        }\n\
    \    }\n    if ($month != 2) {\n        if ($days_in_month != $month) {\n    \
    \        return \"\";\n        }\n        $days = $days_in_month;\n    }\n   \
    \ else {\n        if ($days < 1 || $days > 31) {\n            return \"\";\n \
    \       }\n        if ($days < 31) {\n            $days += 31;\n        }\n  \
    \      else {\n            $days += 30;\n        }\n    }\n    return $days;\n\
    }", "    my($month,$day,$year) = parse_date($date);\n    if ( !defined($month)\
    \ || $month < 1 || $month > 12 ) {\n        return \"\";\n    }\n    if ( !defined($day)\
    \ || $day < 1 || $day > 31 ) {\n        return \"\";\n    }\n    if ( !defined($year)\
    \ || $day < 1 || $day > 30 ) {\n        return \"\";\n    }\n    \n    my $day\
    \ = sprintf(\"%02d\", $day);\n    my $month = sprintf(\"%02d\", $month);\n   \
    \ my $year = sprintf(\"%04d\", $year);\n    my $formatted_date = $year . \"-\"\
    \ . $month . \"-\" . $day;\n    if ( $formatted_date == $date ) {\n        return\
    \ 0;\n    }\n    else {\n        return 1;\n    }\n}", '    my($days,$months,$years)
    = split(/\-/,$date);', "    my(@date) = split(\"-\", $date);\n    my($year) =\
    \ shift(@date);\n    my($month) = shift(@date);\n    my($day) = shift(@date);\n\
    \    # print STDERR \"date=$date,year=$year,month=$month,day=$day\\n\";\n    if\
    \ ($day < 1 || $day > 31 || ($month == 1 && $day <= 31) || ($month == 3 && $day\
    \ <= 31) || ($month == 5 && $day <= 31) || ($month == 7 && $day <= 31) || ($month\
    \ == 8 && $day <= 31) || ($month == 10 && $day <= 31) || ($month == 12 && $day\
    \ <= 31) || ($month == 2 && $day <= 30)) {\n        $day = \"\";\n        $year\
    \ = \"\";\n        $month = \"\";\n        $year = \"\";\n    }\n    if ($month\
    \ < 1 || $month > 12) {\n        $month = \"\";\n        $year = \"\";\n    }\n\
    \    if ($year < 1 || ($month == 1 || $month == 3 || $month == 5 || $month ==\
    \ 7 || $month == 8 || $month == 10 || $month == 12) && $day < 1) {\n        $day\
    \ = \"\";\n        $month = \"\";\n        $year = \"\";\n    }\n    if ($year\
    \ < 1 || $year > 9999) {\n        $day = \"\";\n        $month = \"\";\n     \
    \   $year = \"\";\n    }\n    if ($day < 1) {\n        $day = \"\";\n        $month\
    \ = \"\";\n        $year = \"\";\n    }", "    return $date if !$date || $date\
    \ eq \"\";\n    my(@months) = (\"January\", \"February\", \"March\", \"April\"\
    , \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\"\
    , \"December\");\n    my(@days) = (\"01\", \"02\", \"03\", \"04\", \"05\", \"\
    06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\",\
    \ \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\"\
    , \"26\", \"27\", \"28\", \"29\", \"30\", \"31\");", "    my($month,$day,$year)\
    \ = (0,0,0);\n    my(@date);\n    chomp($date);\n    my @date_arr = split(/\\\
    -/,$date);\n    for($i = 0; $i < 3; $i++){\n        $year += $date_arr[$i] * 365;\n\
    \    }\n    for($i = 0; $i < 12; $i++){\n        $month += $date_arr[$i] * 30;\n\
    \    }\n    for($i = 0; $i < 3; $i++){\n        $day += $date_arr[$i];\n    }\n\
    \    for($i = 0; $i < 3; $i++){\n        $month += $date_arr[$i] * 30;\n    }\n\
    \    if($day >= 1 && $day <= 31) {\n        if($month >= 1 && $month <= 12) {\n\
    \            if($year >= 1900 && $year <= 2040) {\n                return 1;\n\
    \            }\n        }\n    }\n    return 0;\n}\n</code>\n<|/ a dscore=0 tags=perl\
    \ |>\n<| a tags=perl |>\n<code>", "    if ($date) {\n        my $day;\n      \
    \  my $month;\n        my $year;\n        my $mm;\n        my $dd;\n        my\
    \ $yy;\n        ($day, $month, $year) = split /\\-/, $date;\n        $mm = substr($month,\
    \ 0, 2);\n        $dd = substr($day, 2, 2);\n        $yy = substr($year, 2, 2);\n\
    \        if ($yy < 50) {\n            $yy += 2000;\n        }\n        if ($yy\
    \ < 1900) {\n            $yy += 1900;\n        }\n        if ($mm < 10) {\n  \
    \          $mm = \"0\".$mm;\n        }\n        if ($dd < 10) {\n            $dd\
    \ = \"0\".$dd;\n        }\n        if ($mm < 1 || $mm > 12 || $dd < 1 || $dd >\
    \ 31 ||\n            $mm > 12 || $yy < 1 || $yy > 2020 || $yy < 1900) {\n    \
    \        return '';\n        }\n        if ($mm == $dd && $day > 31) {\n     \
    \       return '';\n        }\n        if ($mm == $dd && $day == 31) {\n     \
    \       return '';\n        }\n        if ($mm == $dd && $day == 30) {\n     \
    \       return '';\n        }\n        if ($mm == $dd && $day == 29) {\n     \
    \       return '';\n        }\n        if ($mm == $dd && $day > 29) {\n      \
    \      return '';\n        }\n        return 1;\n    }\n    return '';\n}\n</code>\n\
    This code validates the given date string and returns the number of days between\
    \ the specified month and a specific date. If your date string is not in the format\
    \ mm-dd-yyyy, you should use valid_date() function to validate the date string.\n\
    <code>\nuse strict;\nuse warnings;", '    my($year, $month, $day) = split "-",
    $date;', "    \n    # If the date string has some character(s) in it, then return\
    \ immediately\n    if ($date =~ /[^0-9]/) {\n        return \"\";\n    }\n   \
    \ \n    # If the date string has no characters in it, then the date is invalid\n\
    \    return 1 if $date eq \"\";\n    \n    my ($day, $month, $year) = split(/\\\
    -/,$date);\n    \n    # Months should be between 1 to 12\n    return 1 if $month\
    \ < 1 or $month > 12;\n    \n    # Days should be between 1 to 31\n    return\
    \ 1 if $day < 1 or $day > 31;\n    \n    # Years should be between 1000 to 2099\n\
    \    return 1 if $year < 1000 or $year > 2099;\n    \n    return 1;\n}", "   \
    \ \n    if (length($date) < 1) {\n        return \"\";\n    }\n    elsif (length($date)\
    \ > 13) {\n        return \"\";\n    }\n    else {\n        my $days_in_month\
    \ = @{$_[0]} / 31;\n        if ($days_in_month < 1) {\n            return \"\"\
    ;\n        }\n        elsif ($days_in_month > 31) {\n            return \"\";\n\
    \        }\n        else {\n            my $days_in_year = @{$_[0]} / 30;\n  \
    \          if ($days_in_year < 1) {\n                return \"\";\n          \
    \  }\n            elsif ($days_in_year > 30) {\n                return \"\";\n\
    \            }\n            else {\n                my $days_in_days_in_year =\
    \ @{$_[0]} % 30;\n                if ($days_in_days_in_year < 1) {\n         \
    \           return \"\";\n                }\n                elsif ($days_in_days_in_year\
    \ > 29) {\n                    return \"\";\n                }\n             \
    \   else {\n                    my $days_in_days_in_month = @{$_[0]} % 31;\n \
    \                   if ($days_in_days_in_month < 1) {\n                      \
    \  return \"\";\n                    }\n                    elsif ($days_in_days_in_month\
    \ > 31) {\n                        return \"\";\n                    }\n     \
    \               else {\n                        my $days_in_month = @{$_[0]} %\
    \ 30;\n                        if ($days_in_month < 1) {\n                   \
    \         return \"\";\n                        }\n                        elsif\
    \ ($days_in_month > 12) {\n                            return \"\";\n        \
    \                }\n                        else {\n                         \
    \   $days_in_month = @{$_[0]} % 12;\n                            if ($days_in_month\
    \ < 1) {\n                                return \"\";\n                     \
    \       }\n                            elsif ($days_in_month > 12) {\n       \
    \                         return \"\";\n                            }\n      \
    \                      else {\n                                return 1;\n   \
    \                         }\n                        }\n                    }\n\
    \                }\n            }\n        }\n    }\n}", "    my ($day, $month,\
    \ $year) = split \"-\", $date;\n    my @months = (\"01\", \"03\", \"05\", \"07\"\
    , \"08\", \"10\", \"12\");\n    my @days = (\"01\", \"03\", \"05\", \"07\", \"\
    08\", \"10\", \"12\", \"14\", \"16\", \"18\", \"21\", \"24\", \"27\", \"29\");\n\
    \    my @years = (\"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\",\
    \ \"2008\", \"2009\", \"2010\", \"2011\", \"2012\", \"2014\", \"2015\", \"2016\"\
    , \"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\"\
    , \"2025\", \"2026\", \"2027\", \"2028\", \"2029\", \"2030\", \"2031\", \"2032\"\
    , \"2033\", \"2034\", \"2035\", \"2036\", \"2037\", \"2038\", \"2039\", \"2040\"\
    , \"2041\", \"2042\", \"2043\", \"2044\", \"2045\", \"2046\", \"2047\", \"2048\"\
    , \"2049\", \"2050\", \"2051\", \"2052\", \"2053\", \"2054\", \"2055\", \"2056\"\
    , \"2057\", \"2058\", \"2059\", \"2060\", \"2061\", \"2062\", \"2063\", \"2064\"\
    , \"2065\", \"2066\", \"2067\", \"2068\", \"2069\", \"2070\", \"2071\", \"2072\"\
    , \"2073\", \"2074\", \"2075\", \"2076\", \"2077\", \"2078\", \"2079\", \"2080\"\
    , \"2081\", \"2082\", \"2083\", \"2084\", \"2085\", \"2086\", \"2087\", \"2088\"\
    , \"2089\", \"2090\", \"2091\", \"2092\", \"2093\", \"2094\", \"2095\", \"2096\"\
    , \"2097\", \"2098\", \"2099\", \"2100\", \"2101\", \"2102\", \"2103\", \"2104\"\
    , \"2105\", \"2106\", \"2107\", \"2108\", \"2109\", \"2110\", \"2111\", \"2112\"\
    , \"2113\", \"2114\", \"2115\", \"2116\", \"2117\", \"2118\", \"2119\", \"2120\"\
    , \"2121\", \"2122\", \"2123\", \"2124\", \"2125\", \"2126\", \"2127\", \"2128\"\
    , \"2129\", \"2130\", \"2131\", \"2132\", \"2133\", \"2134\", \"2135\", \"2136\"\
    , \"2137\", \"2138\", \"2139\", \"2140\", \"2141\", \"2142\", \"2143\", \"2144\"\
    , \"2145\", \"2146\", \"2147\", \"2148\", \"2149\", \"2150\", \"2151\", \"2152\"\
    , \"2153\", \"2154\", \"2155\", \"2156\", \"2157\", \"2158\", \"2159\", \"2160\"\
    , \"2161\", \"2162\", \"2163\", \"2164\", \"2165\", \"2166", "    if ( $date =~\
    \ /^ /)\n    {\n        return $date;\n    }\n    elsif ( $date =~ /^\\d+-\\d+-\\\
    d+/)\n    {\n        return $date;\n    }\n    elsif ( $date =~ /^\\d+-\\d+-\\\
    d{4}/ )\n    {\n        return $date;\n    }\n    elsif ( $date =~ /^\\d{4}-\\\
    d{2}-\\d{2}/)\n    {\n        return $date;\n    }\n    else\n    {\n        return\
    \ \"\";\n    }\n}", "    $date =~ /^(\\d\\d)\\/(\\d\\d)\\/(\\d{4})$/;\n    return\
    \ (!$date ? 0 : 1);\n}", "    my $error = \"\";\n    if ( !length($date) ) {\n\
    \        $error .= \"'$date' is not valid\\n\";\n    } elsif ( $date !~ /^([12]\\\
    d|3[01])[-\\/](0?[1-9]|1[012])[-\\/](\\d{4})$/ ) {\n        $error .= \"'$date'\
    \ is not in the correct format\\n\";\n    } elsif ( $date !~ /^([0]\\d|1[0-2])[-\\\
    /]([1-2]?[0-9])[-\\/](\\d{4})$/ ) {\n        $error .= \"'$date' is not in the\
    \ correct format\\n\";\n    }", "    $date =~ /^[0-9]{2}-[0-9]{2}-[0-9]{4}$/;\n\
    \    if(!$date){\n        return \"\";\n    }\n    my($day, $month, $year) = split(/\\\
    -/,$date);\n    if(!$day || !$month || !$year){\n        return \"\";\n    }\n\
    \    $month--;\n    if($month<1 || $month>12){\n        return \"\";\n    }\n\
    \    if($day<1 || $day>31){\n        return \"\";\n    }\n    if($month==2){\n\
    \        if($day>30){\n            return \"\";\n        }\n    }\n    return\
    \ 1;\n}\n</code>\n<|/ a tags=perl dscore=1 |>\n<| c |>\n`valid_date('01-02-2021')`\
    \ returns an empty string while it should be `1`. And as I said \"The date is\
    \ valid if all of the following rules are satisfied:\" rule #1\n<|/ c |>\n<| c\
    \ |>\nYes, it returns an empty string. But it's wrong because day 02 exists in\
    \ the year of 2021. That's why i told you to write your own code before checking\
    \ it.\n<|/ c |>\n<| c |>\nOh I see, yes you are right. As long as I do not know\
    \ what date format OP will use, I can't provide a solution. I'll edit my answer\
    \ in a few seconds.\n<|/ c |>\n<| c |>\nThe date format that I want is `mm-dd-yyyy`.\n\
    <|/ c |>\n<| c |>\nIf OP doesn't have any specific date format, then he should\
    \ just use [DateTime](http://search.cpan.org/~jdunov/Time-Piece-0.23/lib/Time/Piece.pm)\n\
    <|/ c |>\n<| a tags=perl |>\nI like using the DateTime module. It has the advantage\
    \ that it will handle localization for you, and also gives you a nice method for\
    \ parsing dates and times to avoid having to write your own regex (which can be\
    \ difficult to debug).\n<code>\nuse v5.10;\nuse DateTime;", "    my (@months,@days,@years,@years_length,@months_length,@days_length)\
    \ = @_;\n    my $month_str = \"\";\n    my $day_str = \"\";\n    my $year = 0;\n\
    \    my $month = 0;\n    my $day = 0;\n    \n    \n    # Check if the given date\
    \ string is not empty\n    if ($date ne \"\") {\n        # Check if the given\
    \ date string is in the right format\n        if ($date =~ m/-(\\d+)-(\\d+)-\\\
    d+/) {\n            $month = $1;\n            $day = $2;\n            $year =\
    \ $3;\n        }\n        else {\n            return \"\";\n        }\n    }\n\
    \    \n    # Check if the date has valid months and days\n    if ($months == 0\
    \ && $days == 0 && $years == 0) {\n        return \"\";\n    }\n    if ($months\
    \ == 0 && $days == 0 && $years != 0) {\n        $months = 12;\n        $days_length\
    \ = 31;\n        $years_length = 30;\n    }\n    elsif ($days == 0 && $months\
    \ == 0) {\n        return \"\";\n    }\n    elsif ($days == 0 && $months != 0)\
    \ {\n        $months = 12;\n        $months_length = 31;\n        $days_length\
    \ = 30;\n    }\n    elsif ($months == 0 && $years == 0) {\n        $months = 12;\n\
    \        $months_length = 31;\n        $years_length = 30;\n    }\n    elsif ($months\
    \ != 0 && $days == 0) {\n        return \"\";\n    }\n    elsif ($months != 0\
    \ && $days != 0) {\n        return \"\";\n    }\n    \n    # Check if the month\
    \ string is not empty\n    if ($month_str ne \"\") {\n        # Check if the given\
    \ month string is not in the right format\n        if ($month_str =~ m/[0-9]+/)\
    \ {\n            $months = $month_str - 1;\n        }\n        else {\n      \
    \      return \"\";\n        }\n    }\n    \n    # Check if the day string is\
    \ not empty\n    if ($day_str ne \"\") {\n        # Check if the given day string\
    \ is not in the right format\n        if ($day_str =~ m/[0-9]+/) {\n         \
    \   $days = $day_str - 1;\n        }\n        else {\n            return \"\"\
    ;\n        }\n    }\n    \n    \n    # Check if the year string is not empty\n\
    \    if ($year ne \"\") {\n        # Check if the given year string is not in\
    \ the right format\n        if ($year =~ m/[0-9]+/) {\n            $year = $year\
    \ - 1900;\n        }\n        else {\n            return \"\";\n        }\n  \
    \  }\n    \n    \n    # Check if the given dates are correct\n    if ($months\
    \ >= 1 && $months <= 12 && $days > 0 && $days ", "    my($day, $month, $year)\
    \ = split(\"-\", $date);\n    my $valid_day = 0;\n    my $valid_month = 0;\n \
    \   my $valid_year = 0;", "    return \"\" if !$date;\n    my($d, $m, $y) = split(/\\\
    -/, $date);\n    my($year, $month, $day) = split(/\\//, $date);", "    my($day,\
    \ $month, $year) = split(\" \", $date);\n    my $valid = 1;\n    my $daysInMonth\
    \ = 0;\n    if ($year < 1000 || $year > 9999) { $valid = 0; $daysInMonth = 0;\
    \ return $valid; }\n    if ($month < 1 || $month > 12) { $valid = 0; $daysInMonth\
    \ = 0; return $valid; }\n    if ($month == 2) {\n        if ($day < 1 || $day\
    \ > 29) { return $valid; }\n    } else {\n        if ($day < 1 || $day > 31) {\
    \ return $valid; }\n    }\n    my $daysInMonth = 0;\n    my $daysInMonthMonth\
    \ = 0;\n    if ($month == 1) {\n        $daysInMonth = 31;\n        $daysInMonthMonth\
    \ = 31;\n    } elsif ($month == 3) {\n        $daysInMonth = 30;\n        $daysInMonthMonth\
    \ = 30;\n    } elsif ($month == 5) {\n        $daysInMonth = 29;\n        $daysInMonthMonth\
    \ = 29;\n    }\n    if ($day < 1 || $day > $daysInMonth) {\n        $valid = 0;\n\
    \    } elsif ($day < $daysInMonthMonth) {\n        $valid = 0;\n    }\n    return\
    \ $valid;\n}\n</code>\n<|/ a dscore=2 tags=perl,date |>\n<| a dscore=2 |>\nI like's\
    \ answer best.  In some edge cases, though, it's useful to know that there's two\
    \ ways of writing dates: single-day (day-month-year) and multiple-day (day-month-year-seconds-minutes-hours-days-months-years).\n\
    If you have a single day, you can use the DateTime library as such:\n<code>\n\
    use DateTime;", "    return if ($date !~ /^$|^\\s*(\\d*\\s*\\D*)*\\s*(\\d*-\\\
    d*-\\d*\\s*$)/);\n    my(@months) = ('Jan', 'Mar', 'May', 'Jul', 'Aug', 'Oct',\
    \ 'Dec');\n    my(@days)   = ('01', '02', '03', '04', '05', '06', '07', '08',\
    \ '09', '10', '11', '12');\n    my(@digits) = ('0', '1', '2', '3', '4', '5', '6',\
    \ '7', '8', '9');\n    my(@date) = split /-/, $date;\n    my($day, $month, $year)\
    \ = (@date[0], $date[1], $date[2]);\n    my $year = sprintf \"%04d\", $year;\n\
    \    return if ($month < 1 or $month > 12);\n    return if ($day < 1 or $day >\
    \ 31);\n    return if ($day == 31 and $month == 1);\n    return if ($day == 31\
    \ and $month == 2);\n    return if ($day == 31 and $month == 3);\n    return if\
    \ ($day == 31 and $month == 4);\n    return if ($day == 31 and $month == 5);\n\
    \    return if ($day == 31 and $month == 6);\n    return if ($day == 31 and $month\
    \ == 7);\n    return if ($day == 31 and $month == 8);\n    return if ($day ==\
    \ 31 and $month == 9);\n    return if ($day == 31 and $month == 10);\n    return\
    \ if ($day == 31 and $month == 11);\n    return if ($day == 31 and $month == 12);\n\
    \    my $days;\n    foreach (@months) {\n        if ($month == $_) {\n       \
    \     $days = $days[$_] if (exists $days[$_]);\n            $days += 1;\n    \
    \    }\n    }\n    return $days ? $days : 0;\n}", "    return 1 if $date eq \"\
    \"; # empty date\n    return 1 if ($date =~ /^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$/);\
    \ # valid date\n    return 1 if (($date =~ /^\\d{1,2}-\\d{1,2}-\\d{4}$/) && ($date\
    \ =~ /^\\d{1,2}-\\d{1,2}$/));\n    return 1 if (($date =~ /^\\d{1,2}\\/\\d{1,2}-\\\
    d{4}$/) && ($date =~ /^\\d{1,2}\\/\\d{1,2}$/));\n    return 1 if (($date =~ /^\\\
    d{1,2}-\\d{1,2}-\\d{4}$/) && ($date =~ /^\\d{1,2}\\/\\d{1,2}$/));\n    return\
    \ 1 if (($date =~ /^\\d{1,2}-\\d{1,2}-\\d{4}$/) && ($date =~ /^\\d{1,2}-\\d{1,2}$/));\n\
    \    return 0 if (($date =~ /^\\d{1,2}\\/\\d{1,2}-\\d{4}$/) && ($date =~ /^\\\
    d{1,2}\\/\\d{1,2}$/));\n    return 0 if (($date =~ /^\\d{1,2}-\\d{1,2}-\\d{4}$/)\
    \ && ($date =~ /^\\d{1,2}\\/\\d{1,2}$/));\n    return 0 if (($date =~ /^\\d{1,2}-\\\
    d{1,2}-\\d{4}$/) && ($date =~ /^\\d{1,2}-\\d{1,2}$/));\n    return 1 if (($date\
    \ =~ /^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$/) && ($date =~ /^\\d{1,2}\\/\\d{1,2}$/));\n\
    \    return 1 if (($date =~ /^\\d{1,2}-\\d{1,2}\\/\\d{4}$/) && ($date =~ /^\\\
    d{1,2}-\\d{1,2}$/));\n    return 1 if (($date =~ /^\\d{1,2}-\\d{1,2}\\/\\d{4}$/)\
    \ && ($date =~ /^\\d{1,2}-\\d{1,2}$/));\n    return 0;\n}", "    my(@date_parts);\n\
    \    my(@valid_parts);\n    my($day);\n    my($month);\n    my($year);\n    my(@valid_parts);\n\
    \    $date =~ s/^\\s+//;", "    my $pattern = qr{^\\d{1,2}-\\d{1,2}-\\d{4}$};\n\
    \    return 1 if !$date || !$date =~ /$pattern/i;\n    if ($date !~ /(^|\\/)0\\\
    d/0\\d/0\\d/) {\n        return 1;\n    }\n    my $year = $date;\n    return 1\
    \ if $year =~ /(^|\\/)0\\d/[13579]\\d\\d/\\d{4}/;\n    return 1 if $year =~ /(^|\\\
    /)0\\d/3[01]\\d\\d/\\d{4}/;\n    return 1 if $year =~ /(^|\\/)0\\d/[12]\\d\\d\\\
    d/\\d{4}/;\n    return 1;\n}", "    my(@months) = qw(1 3 5 7 8 10 12);\n    my(@days)\
    \ = qw(1 30 29 1 30 29 1 30 29);\n    my(@ymd_valid) = qw(1 2 4 6 9 11 12 1 2\
    \ 4 6 9 11 12);", "    \n    # If the input is a number or a letter then we return\
    \ empty string\n    if($date =~ /^(\\+|\\-|\\_|\\(\\+|\\-|\\_|\\)|\\$)$/) {\n\
    \       return \"\";\n    }", "    my($day, $month, $year) = split(/\\-/, $date);\n\
    \    # validate year\n    die \"Invalid Year\" unless ($year =~ /^[0-9]{4,4}$/);\n\
    \    my $century_year = $year % 100;\n    if ($century_year != 0) {\n        $century_year\
    \ += 1900;\n    }\n    die \"Invalid Year\" unless ($year == $century_year);\n\
    \    my $year_length = length($year);\n    # validate month\n    die \"Invalid\
    \ Month\" unless ($month == 1 or $month == 3 or $month == 5 or $month == 7 or\
    \ $month == 8 or $month == 10 or $month == 12 and $day == 0 or $month == 4 or\
    \ $month == 6 or $month == 9 or $month == 11);\n    die \"Invalid Month\" unless\
    \ ($month == 2 and not ($day == 1 or $day == 31 or $day == 29));\n    die \"Invalid\
    \ Month\" unless ($month == 2 and (not ($day == 1 or $day == 30)));\n    # validate\
    \ day\n    die \"Invalid Day\" unless ($day == 0 or $day == 1 or $day == 31 or\
    \ $day == 30 or $day == 29);\n    die \"Invalid Day\" unless ($day == 2 and not\
    \ ($month == 1 or $month == 3 or $month == 5 or $month == 7 or $month == 8 or\
    \ $month == 10 or $month == 12));\n    die \"Invalid Day\" unless ($day == 2 and\
    \ ($month == 4 or $month == 6 or $month == 9 or $month == 11));\n    return 1;\n\
    }\n</code>\nAnd here is how you can use it :\n<code>\nmy $date = \"30-01-2000\"\
    ;\nprint valid_date($date) ? \"Valid Date\" : \"Not a valid Date\\n\";\n</code>\n\
    Output :\n<code>\nValid Date\n</code>\n<|/ a dscore=3 |>\n<| c |>\nHi, the function\
    \ fails for invalid dates like \"30-01-2000\".\n<|/ c |>\n<| c |>\nI updated the\
    \ answer, it now allows invalid dates like `\"30-01-2000\"`.\n<|/ c |>\n<| c |>\n\
    You still have `return 1` at the end which means you are returning 1 for invalid\
    \ dates, right?\n<|/ c |>\n<| c |>\nYes, it means invalid date. :) `1` means valid\
    \ date, `\"\"` means invalid date.\n<|/ c |>\n<| c |>\nHi, ", "    my($day, $month,\
    \ $year) = split \"/\", $date;\n    return 0 unless ($date =~ /^$|^[\\s\\W]$|^\\\
    d{1,2}-\\d{1,2}-\\d{4}/);\n    # Rule 1\n    return 0 unless ($date ne '');\n\
    \    # Rule 2\n    return 0 unless ($day < 1 || $day > 31);\n    # Rule 3\n  \
    \  return 0 unless ($month < 1 || $month > 12);\n    # Rule 4\n    return 0 unless\
    \ ($year >= 1900 && $year <= 2038);\n    return 1;\n}", "    return if !$date\
    \ || $date !~ /^\\d\\d-\\d\\d-\\d\\d\\d\\d$/;\n    return if $date =~ /^\\d\\\
    d-\\d\\d-\\d\\d$/;\n    return if $date =~ /^\\d\\d-\\d\\d-\\d\\d\\d$/;\n    return\
    \ if $date =~ /^\\d\\d-\\d\\d-\\d\\d$/;\n    return if $date =~ /^\\d\\d-\\d\\\
    d-\\d\\d$/;\n    return if $date !~ /^\\d\\d-\\d\\d-\\d\\d\\d\\d$/;\n    return\
    \ if $date !~ /^\\d\\d-\\d\\d-\\d\\d\\d$/;\n    return if $date !~ /^\\d\\d-\\\
    d\\d-\\d\\d$/;\n    return if $date !~ /^\\d\\d-\\d\\d-\\d\\d$/;\n    return if\
    \ $date !~ /^\\d\\d-\\d\\d-\\d\\d\\d$/;\n    return if $date !~ /^\\d\\d-\\d\\\
    d-\\d\\d$/;\n    return if $date !~ /^\\d\\d-\\d\\d-\\d\\d\\d$/;\n    return if\
    \ $date !~ /^\\d\\d-\\d\\d-\\d\\d$/;\n    return if $date !~ /^\\d\\d-\\d\\d-\\\
    d\\d\\d$/;\n    return if $date !~ /^\\d\\d-\\d\\d-\\d\\d$/;\n    return if $date\
    \ !~ /^\\d\\d-\\d\\d-\\d\\d\\d$/;\n    return if $date !~ /^\\d\\d-\\d\\d-\\d\\\
    d$/;\n    return if $date !~ /^\\d\\d-\\d\\d-\\d\\d$/;\n    return if $date !~\
    \ /^\\d\\d-\\d\\d-\\d\\d\\d$/;\n    return if $date !~ /^\\d\\d-\\d\\d-\\d\\d$/;\n\
    \    return if $date !~ /^\\d\\d-\\d\\d-\\d\\d$/;\n    return if $date !~ /^\\\
    d\\d-\\d\\d-\\d\\d\\d$/;\n    return if $date !~ /^\\d\\d-\\d\\d-\\d\\d$/;\n \
    \   return if $date !~ /^\\d\\d-\\d\\d-\\d\\d\\d$/;\n    return if $date !~ /^\\\
    d\\d-\\d\\d-\\d\\d$/;\n    return if $date !~ /^\\d\\d-\\d\\d-\\d\\d\\d$/;\n \
    \   return if $date !~ /^\\d\\d-\\d\\d-\\d\\d$/;\n    return if $date !~ /^\\\
    d\\d-\\d\\d-\\d\\d$/;\n    return if $date !~ /^\\d\\d-\\d\\d-\\d\\d\\d$/;\n \
    \   return if $date !~ /^\\d\\d-\\d\\d-\\d\\d$/;\n    return if $date !~ /^\\\
    d\\d-\\d\\d-\\d\\d\\d$/;\n    return if $date !~ /^\\d\\d-\\d\\d-\\d\\", '    my
    $valid = 1;', "    if ($date ne \"\" && $date ne \"-\" && $date ne \"-\" && $date\
    \ ne \"-\" && $date ne \"/\" && $date ne \"/\") {\n        if ($date =~ m/^([1-9]|0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[012])-([0-9]{2,4})$/)\
    \ {\n            if ($4 < $3 || $4 > $5 || $2 < $1 || $2 > $3 || $1 < $1 || $1\
    \ > $3) {\n                return \"\";\n            }\n            else {\n \
    \               return 1;\n            }\n        }\n    }\n    else {\n     \
    \   return \"\";\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nIf there are\
    \ some invalid dates they will be handled like \"01-31-2012\", or \"03-1-2040\"\
    . So, the code will return a string that says that it is invalid if the format\
    \ is invalid.\n<|/ c |>\n<| c |>\nI see. I will try and fix it now.\n<|/ c |>\n\
    <| c |>\n: Fixed the code as per your suggestions.\n<|/ c |>\n<| a dscore=0 tags=perl,validation,date\
    \ |>\nI took's code and changed it up a bit to handle month > 12 and day > 31.\
    \ Also, made it case insensitive.\n<code>\nuse strict;\nuse warnings;\nuse POSIX\
    \ qw(strftime);", "    my $date_regex = qr{^\\d{2}-\\d{2}-\\d{4}$};\n    if (\
    \ !($date !~ m/$date_regex/) ) { \n        return \"\";\n    }\n    my $month_regex\
    \ = qr{^\\d{1,2}$};\n    my $day_regex = qr{^\\d{1,2}$};\n    my $year_regex =\
    \ qr{^\\d{2}$};\n    if ( $date =~ m/$date_regex/ ) {\n        if ( $date =~ m/$month_regex/\
    \ && $date =~ m/$day_regex/ && $date =~ m/$year_regex/ ) {\n            return\
    \ 1;\n        }\n    } else {\n        return \"\";\n    }\n}", "    # 1. Validating\
    \ the date is not empty.\n    unless ( !length($date) ) {\n        return \"\"\
    ;\n    }\n    # 2. Validating the number of days.\n    if ( $date =~ m{^(\\d+)-(\\\
    d+)-(\\d+)$} ) {\n        # Validating the number of days for months 1,3,5,7,8,10,12.\
    \ And the number of days for months 4,6,9,11. And, the number of days for months\
    \ 2.\n        if ( !($3 <= 12 || $3 > 31) || !($1 <= 12 || $1 > 31) || !($4 <=\
    \ 12 || $4 > 31) ) {\n            return \"\";\n        }\n        # Validating\
    \ the months.\n        if ( !($1 <= 12 || $1 > 12) ) {\n            return \"\"\
    ;\n        }\n    } else {\n        return \"\";\n    }\n    # 3. Validating the\
    \ date is in the format: mm-dd-yyyy\n    if ( $date =~ m{^(\\d+)-(\\d+)-(\\d+)$}\
    \ ) {\n        return 1;\n    }\n    return \"\";\n}", "    my %patterns = (\n\
    \        mon => /^(0?[1-9]|[12][0-9]|3[01])-(0?[1-9]|1[0-2])-\\d{4}/, \n     \
    \   day => /^\\d{1,2}-\\d{1,2}-\\d{4}/, \n        year => /^\\d{4}/,\n       \
    \ month => /^(1[0-2]|0?[1-9])/,\n        day => /^(0?[1-9]|[1-2][0-9]|3[0-1])/,\n\
    \        year => /^(0?[1-9]|[1-2][0-9]|3[0-1])/,\n    );\n    \n    foreach my\
    \ $key (keys %patterns) {\n        if ($date =~ m/$patterns{$key}/) {\n      \
    \      return 1;\n        }\n    }\n    return \"\";\n}", "    chomp($date);\n\
    \    $date =~ /(^\\s*)|(\\s*$)/g;\n    $date =~ /(\\d{4})-(\\d{2})-(\\d{2})/;",
  '    return unless (defined $date);', "    if($date eq \"\") {\n        return 0;\n\
    \    }\n    if($date =~ /^([0-9]+[-][0-9]+[-][0-9]{4})/) {\n        my $year =\
    \ $1;\n        if($year !~ /([0-9])$/) {\n            return 0;\n        }\n \
    \       my $month = $2;\n        if($month !~ /([0-9])$/) {\n            return\
    \ 0;\n        }\n        my $day = $3;\n        if($day !~ /([0-9])$/) {\n   \
    \         return 0;\n        }\n        if($month eq \"01\") {\n            if($day\
    \ > 29) {\n                return 0;\n            }\n        }\n        else {\n\
    \            if($day > 30) {\n                return 0;\n            }\n     \
    \   }\n        if($month > 12) {\n            return 0;\n        }\n        if($month\
    \ == 2) {\n            if($day > 29) {\n                return 0;\n          \
    \  }\n        }\n        else {\n            if($day > 28) {\n               \
    \ return 0;\n            }\n        }\n        if($month > 1) {\n            if($day\
    \ > 28) {\n                return 0;\n            }\n        }\n        else {\n\
    \            if($day > 31) {\n                return 0;\n            }\n     \
    \   }\n        return 1;\n    }\n    return 0;\n}", "    $date =~ /([0-9]{2}\\\
    -[0-9]{2}\\-[0-9]{4})/;\n    return $1 if $1 > 0 && $1 <= 29 && $2 > 0 && $2 <=\
    \ 31 && $3 > 1 && $3 <= 12;\n    return \"\";\n}", "    return 1 if length($date)\
    \ == 0;\n    if ($date !~ /^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01]|[1-9])-[0-9]{4}$/)\
    \ {\n        return \"\";\n    }\n    if ( $date =~ /^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01]|[1-9])-[0-9]{4}$/\
    \ && $date !~ /^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01]|[1-9])-[0-9]{3}$/ && $date\
    \ !~ /^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01]|[1-9])-[0-9]{2}$/ && $date !~ /^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01]|[1-9])$/\
    \ ) {\n        return 1;\n    }\n    if ( $date =~ /^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01]|[1-9])-[0-9]{3}$/\
    \ && $date !~ /^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01]|[1-9])-[0-9]{2}$/ && $date\
    \ !~ /^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01]|[1-9])$/ && $date !~ /^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01]|[1-9])-[0-9]{1}$/\
    \ ) {\n        return \"\";\n    }\n    if ( $date =~ /^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01]|[1-9])-[0-9]{2}$/\
    \ && $date !~ /^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01]|[1-9])-[0-9]{1}$/ && $date\
    \ !~ /^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01]|[1-9])$/ ) {\n        return 1;\n\
    \    }\n    if ( $date =~ /^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01]|[1-9])$/ )\
    \ {\n        return \"\";\n    }\n    return 1;\n}", "    return \"\" if (!$date);\n\
    \    my(@month) = split(' ', $date);\n    my(@day) = split('-', @month);\n   \
    \ my(@year) = split('-', @month);\n    my(@days);\n    my($month);\n    my($year);\n\
    \    my($daysofmonth);\n    my($daysofyear);\n    my($daysofmonthtemp);\n    my($daysofyeartemp);\n\
    \    my($daysofmonth);\n    my($daysofyear);\n    my($daysofmonth);\n    my($daysofyear);\n\
    \    my($daysofmonth);\n    my($daysofyear);\n    my($daysofmonth);\n    my($daysofyear);\n\
    \    my($daysofmonth);\n    my($daysofyear);\n    my($daysofmonth);\n    my($daysofyear);\n\
    \    my($daysofmonth);\n    my($daysofyear);\n    my($daysofmonth);\n    my($daysofyear);\n\
    \    my($daysofmonth);\n    my($daysofyear);\n    my($daysofmonth);\n    my($daysofyear);\n\
    \    my($daysofmonth);\n    my($daysofyear);\n    my($daysofmonth);\n    my($daysofyear);\n\
    \    my($daysofmonth);\n    my($daysofyear);\n    my($daysofmonth);\n    my($daysofyear);\n\
    \    my($daysofmonth);\n    my($daysofyear);\n    my($daysofmonth);\n    my($daysofyear);\n\
    \    my($daysofmonth);\n    my($daysofyear);\n    my($daysofmonth);\n    my($daysofyear);\n\
    \    my($daysofmonth);\n    my($daysofyear);\n    my($daysofmonth);\n    my($daysofyear);\n\
    \    my($daysofmonth);\n    my($daysofyear);\n    my($daysofmonth);\n    my($daysofyear);\n\
    \    my($daysofmonth);\n    my($daysofyear);\n    my(", '    return 1 unless $date;',
  "    \n    # Your code goes here\n    \n    return $date;\n}\n</cell>\n<cell>",
  "    chomp $date;\n    if ($date eq '') {\n        return 0;\n    } elsif ($date\
    \ =~ m/\\s+/) {\n        return 0;\n    } elsif ($date !~ /^\\d{1,2}\\-\\d{1,2}\\\
    -\\d{4}$/) {\n        return 0;\n    } elsif ($date =~ m/\\d{2}/) {\n        if\
    \ ($date =~ m/\\d{1}/) {\n            return 0;\n        }\n    } elsif ($date\
    \ =~ m/\\d{1}/) {\n        return 0;\n    }\n    my $days_in_month = (31, 28,\
    \ 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);\n    my $current_year = (localtime(time))[5];\n\
    \    if ($date =~ m/$current_year\\-\\d{1}/) {\n        if ($date =~ m/\\d{2}\\\
    -\\d{2}/) {\n            if ($date =~ m/\\d{2}\\-\\d{2}/) {\n                if\
    \ ($date =~ m/\\d{2}\\-\\d{1}/) {\n                    if ($date =~ m/\\d{2}\\\
    -\\d{2}/) {\n                        if ($date =~ m/\\d{1}/) {\n             \
    \               if ($date =~ m/\\d{2}/) {\n                                if\
    \ ($date =~ m/\\d{1}/) {\n                                    return 0;\n    \
    \                            }\n                            } else {\n       \
    \                         return 0;\n                            }\n         \
    \               } else {\n                            return 0;\n            \
    \            }\n                    } else {\n                        return 0;\n\
    \                    }\n                } else {\n                    return 0;\n\
    \                }\n            } else {\n                return 0;\n        \
    \    }\n        } else {\n            return 0;\n        }\n    } else {\n   \
    \     return 0;\n    }\n}", "    my($date_str, $month, $day, $year) = split(/\\\
    //, $date);\n    my($days, $months);", "    $date =~ /^\\d{1,2}-\\d{1,2}-\\d{4}$/;\n\
    \    return 1;\n}", "    \n    chomp($date);\n    \n    # empty date\n    if($date\
    \ eq \"\") {\n        return 0;\n    }\n    \n    # date string validation\n \
    \   if($date !~ /^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$/) {\n        return 0;\n    }\n\
    \    \n    my %months = (\"01\"=>1, \"03\"=>3, \"05\"=>5, \"07\"=>7, \"08\"=>8,\
    \ \"10\"=>10, \"12\"=>12);\n    my $num_days = scalar(scalar(split('-', ${date})));\n\
    \    my $month = ${date} =~ /(\\d+)-(\\d+)-(\\d+)$/;\n    if($num_days > 31 ||\
    \ $num_days < 1 || ($months[$month] > 31 || $months[$month] < 1)) {\n        return\
    \ 0;\n    }\n    \n    return 1;\n}\n</code>\n<|/ a |>\n<| c |>\nI edited the\
    \ code above to account for the first day of the month being 1-31. It wasn't clear\
    \ at the time, but I added a test for that to the answer.\n<|/ c |>\n<| a dscore=1\
    \ tags=date,validation,perl,validation |>\nI realized an interesting fact: leap\
    \ years have one additional day. So this program will work:\n<code>", "    my($day,\
    \ $month, $year) = split \"-\", $date;\n    my($days) = (31, 28, 31, 30, 31, 30,\
    \ 31, 31, 30, 31, 30, 31);\n    my($months) = (0, 31, 60, 91, 122, 153, 184, 212,\
    \ 244, 274, 305, 335, 366);\n    my(@months) = (\"JAN\",\"FEB\",\"MAR\",\"APR\"\
    ,\"MAY\",\"JUN\",\"JUL\",\"AUG\",\"SEP\",\"OCT\",\"NOV\",\"DEC\");", "    if (\
    \ $date ne '' ) {\n        if ( ($date =~ /^([0-9]{2})\\-([0-9]{2})\\-([0-9]{4})$/)\
    \ || ($date =~ /^([0-9]{2})\\/([0-9]{2})\\/([0-9]{4})$/) ) {\n            my $year\
    \ = $1;\n            my $month = $2;\n            my $day = $3;\n            if\
    \ ( ($month =~ /^(1|3|5|7|8|10|12)$/) && ($day =~ /^(1|2|3|4|5|6|7|8|9|10|11|12|0)$/)\
    \ && ($month != 2) && ($month != 4) && ($month != 6) && ($month != 9) ) {\n  \
    \              return ($1);\n            }\n            if ( ($month =~ /^(04|06|09)$/)\
    \ && ($day =~ /^(0|1|2)$/) && ($month != 2) && ($month != 4) && ($month != 6)\
    \ && ($month != 9) ) {\n                return ($1);\n            }\n        }\n\
    \    }\n    return ($date);\n}", "    my($day, $month, $year) = split(/\\//, $date);\n\
    \    $month--; $day--; $year--;\n    # Validate month range 1..12.\n    if ($month\
    \ < 1 or $month > 12) {\n        return \"\";\n    }\n    # Validate day range\
    \ 1..31 and month range 1..12.\n    if ($day < 1 or $day > 31 or $month < 1 or\
    \ $month > 12) {\n        return \"\";\n    }\n    # Validate year.\n    if ($year\
    \ < 1900 or $year > 2099) {\n        return \"\";\n    }\n    return 1;\n}", " \
    \   return \"\" unless $date;\n    my($day, $month, $year) = split(/\\D/, $date);\n\
    \    return 1 if ($day < 1 || $day > 31 || $month < 1 || $month > 12 || $year\
    \ < 100 || $year > 9999);\n    return \"\" if ($month < 4 || $month > 11);\n \
    \   return \"\" if ($month == 2);\n    return 1 if ($day == 29);\n    if ($day\
    \ > 30) {\n        return 1;\n    }\n    if ($day > 31) {\n        return 0;\n\
    \    }\n    return 1;\n}", "    chomp($date);\n    if ($date) {\n        $date\
    \ =~ m/(\\d{2}\\-\\d{2}\\-\\d{4})/;\n        $days_in_month = [31,28,31,30,31,30,31,30,31,30,31,30,31];\n\
    \        $days_in_month[$_ - 1] for $_ in\n            0 .. $days_in_month[$1\
    \ .. $3]\n            and $_ <= $days_in_month[$4];\n        $days_without_0 =\
    \ 0 if ($days_in_month[$1] == 0);\n        $days_without_0 += 1 if ($days_in_month[$4]\
    \ == 0);\n        $days_without_0 += 1 if ($days_in_month[$7] == 0);\n       \
    \ return 0 if (($days_without_0 <= 1) and ($days_without_0 > 31));\n        return\
    \ 0 if (($days_without_0 <= 1) and ($days_without_0 > 30));\n        return 0\
    \ if (($days_without_0 <= 1) and ($days_without_0 > 29));\n        $date++;\n\
    \        return 0 if (($day <= 1) and ($day > 31));\n        return 0 if (($day\
    \ <= 1) and ($day > 30));\n        return 0 if (($day <= 1) and ($day > 29));\n\
    \    }\n    return 1;\n}", "    my $day = length($date) - 2;\n    my $month =\
    \ substr($date, -2, 2);\n    my $year = substr($date, 0, 4);\n    if ($day > 31\
    \ || $month > 12 || $day < 1 || $month < 1) {\n        my $err = \"Please enter\
    \ a date in the format mm/dd/yyyy.\";\n        die $err;\n    } else {\n     \
    \   return 1;\n    }\n}", "    return undef if !$date;\n    my $date_str = &to_date($date);\n\
    \    return undef unless $date_str;\n    my $days_str = &days_since($date_str);\n\
    \    return undef unless $days_str;\n    my $days_num = &to_int($days_str);\n\
    \    return undef unless $days_num;\n    my $month_str = &months_since($date_str);\n\
    \    return undef unless $month_str;\n    my $month_num = &to_int($month_str);\n\
    \    return undef unless $month_num;\n    my $is_valid_date = 1;\n    if ($days_num\
    \ < 1 || ($days_num > 31 && ($month_num == 1 || $month_num == 3))\n          \
    \  || ($days_num > 30 && ($month_num == 4 || $month_num == 6))\n            ||\
    \ ($days_num > 29 && ($month_num == 2 || $month_num == 6))) {\n        $is_valid_date\
    \ = 0;\n    }\n    return $is_valid_date;\n}", "    my($year, $month, $day) =\
    \ split(\"-\", $date, 2);\n    if ($month == 0)\n    {\n        $month = 12\n\
    \    }\n    if ($day == 0)\n    {\n        $day = days_in_month($month);\n   \
    \ }\n    if ($year == 0)\n    {\n        $year = 1900;\n    }\n    if ($month\
    \ < 1 || $month > 12)\n    {\n        return 1;\n    }\n    if ($day < 1 || $day\
    \ > $days_in_month($month))\n    {\n        return 1;\n    }\n    if ($day ==\
    \ days_in_month($month))\n    {\n        if ($month == 1)\n        {\n       \
    \     if ($day == 31)\n            {\n                return 1;\n            }\n\
    \        }\n        else\n        {\n            if ($day == 30)\n           \
    \ {\n                return 1;\n            }\n        }\n    }\n    return \"\
    \";\n}", "    my $ret = 0;\n    if (defined $date) {\n        ($date) = convert_date($date);\n\
    \    }\n    if ($date =~ /^\\W*$/ && $date !~ /\\d/) {\n        $ret = 1;\n  \
    \  } elsif ($date =~ /^\\W*$/ && $date =~ /\\d/) {\n        ($date) = convert_date($date);\n\
    \        if ($date =~ /^\\W*$/ && $date !~ /\\d/) {\n            $ret = 1;\n \
    \       }\n    } elsif ($date !~ /^\\W*$/ && $date =~ /\\d/) {\n        $ret =\
    \ 1;\n    } elsif ($date !~ /^\\W*$/ && $date =~ /\\d/ && $date !~ /\\d/) {\n\
    \        $ret = 1;\n    } elsif ($date !~ /^\\W*$/ && $date =~ /\\d/ && $date\
    \ =~ /\\d/ && $date !~ /\\d/) {\n        $ret = 1;\n    }\n    return $ret;\n}",
  "    if($date eq \"\"){\n        return 0;\n    }\n    if(length($date) <1 ){\n\
    \        return 0;\n    }\n    my ($day, $month, $year) = split /\\-/, $date;\n\
    \    return 0 if ($day < 1 || $day > 31);\n    return 0 if ($month < 1 || $month\
    \ > 12);\n    return 0 if ($year % 4 != 0 && $year % 100 != 0 || $year % 400 ==\
    \ 0);\n    return 1 if ($day == 31);\n    return 1 if ($day == 30);\n    return\
    \ 1 if ($day == 29);\n    return 1;\n}", "    my($days,$months,$year) = parse_date($date);\n\
    \    # 1. The date string is not empty.\n    if(!$date) {\n        return \"Date\
    \ can not be empty.\";\n    }\n    # 2. The number of days is not less than 1\
    \ or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is\
    \ not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    if($months\
    \ == 1 && ($days > 31 || $days < 1)) {\n        return \"Invalid month.\";\n \
    \   }\n    elsif ($months == 2 && ($days > 30 || $days < 1)) {\n        return\
    \ \"Invalid month.\";\n    }\n    elsif ($months == 3 && ($days > 29 || $days\
    \ < 1)) {\n        return \"Invalid month.\";\n    }\n    # 3. The months should\
    \ not be less than 1 or higher than 12.\n    elsif ($months < 1 || $months > 12)\
    \ {\n        return \"Invalid month.\";\n    }\n    # 4. The date should be in\
    \ the format: mm-dd-yyyy\n    if($date =~ /[0-9]{2}-[0-9]{2}-[0-9]{4}/) {\n  \
    \      return 1;\n    }\n    else {\n        return \"Invalid date.\";\n    }\n\
    }", "    my(@date) = split(m|/|, $date);\n    # Checking the length of date string\n\
    \    if(scalar(@date) > 3) {\n        # Checking the values of months\n      \
    \  if($date[0] <= 12 && $date[2] <= 12) {\n            my $daysInMonth = cal_days_in_month($date[0],\
    \ $date[1]);\n            if ($date[2] <= $daysInMonth) {\n                my\
    \ $dayInMonth = cal_days_in_month($date[0], $date[1]);\n                if ($date[2]\
    \ <= $dayInMonth) {\n                    if($date[2] <= 29) {\n              \
    \          # Checking date string\n                        return $date;\n   \
    \                 } else {\n                        # Checking date string\n \
    \                       return \"\";\n                    }\n                }\
    \ else {\n                    # Checking date string\n                    return\
    \ \"\";\n                }\n            } else {\n                # Checking date\
    \ string\n                return \"\";\n            }\n        } else {\n    \
    \        # Checking date string\n            return \"\";\n        }\n    } else\
    \ {\n        # Checking date string\n        return \"\";\n    }\n}\n</code>\n\
    <|/ a tags=perl |>\n<| c |>\n`if(scalar(@date) > 3) {` can be written more simply\
    \ as `if(@date) {`\n<|/ c |>\n<| c |>\nThanks for sharing this useful script.\
    \ I just need to add a comment that it doesn't work for date strings like `13-02-2012`.\n\
    <|/ c |>\n<| c |>\nIn that case, you can change the condition to `if(scalar(@date)\
    \ > 2 && $date[0] <= 12 && $date[2] <= 31)` .\n<|/ c |>\n<| a tags=perl dscore=1\
    \ |>\nThe accepted answer has the right idea. But there are several things to\
    \ consider when you write your own.", "    return 1 if !$date;\n    my($day, $month,\
    \ $year) = (split /-/, $date)[0,1,2];\n    return 0 unless ($day and $month and\
    \ $year);\n    my(@days) = qw(31 28 31 30 31 30 31 30 31 30 31 30 31);\n    return\
    \ 0 unless (@days >= $month and $days <= $days[$month - 1]);\n    my $month_of_year\
    \ = @days / 30;\n    return 0 unless ($month == $month_of_year);\n    return 0\
    \ unless (@days < $month_of_year);\n    return 1;\n}", "    my($day, $month, $year)\
    \ = split(/\\-/, $date);\n    if ($day == \"\" || $day == \"0\" || $day > 31)\
    \ {\n        return 0;\n    }\n    if ($month == \"\" || $month == \"0\" || $month\
    \ > 12) {\n        return 0;\n    }\n    $year =~ s/^(-?[0-9]+)//;\n    if ($year\
    \ < 1 || $year > 9999 || $year == 0) {\n        return 0;\n    }\n    $year -=\
    \ 1900;\n    if ($month == 2) {\n        if ($day == 29) {\n            return\
    \ 0;\n        }\n    }\n    if ($month > 2) {\n        if ($day > 30) {\n    \
    \        return 0;\n        }\n    }\n    if ($month > 1) {\n        if ($day\
    \ > 31) {\n            return 0;\n        }\n    }\n    if ($month == 1) {\n \
    \       if ($day > 31) {\n            return 0;\n        }\n    }\n    return\
    \ 1;\n}", "    my $date_regex = \"^(((0[1-9]|[12]\\d|3[01])\\-(0[13578]|1[02])\\\
    -((19|[2-9]\\d)\\d{2}))|((0[1-9]|[12]\\d|30)\\-(0[13456789]|1[012])\\-((19|[2-9]\\\
    d)\\d{2}))|((0[1-9]|1\\d|2[0-8])\\-(0[1-9]|[12]\\d|30)\\-((19|[2-9]\\d)\\d{2}))|(29)\\\
    -(0[13578]|1[02])\\-((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))))$\"\
    ;\n    return unless ($date =~ m/$date_regex/);\n    return 1;\n}", "    my $valid_date\
    \ = 0;\n    \n    if(!length($date)) {\n        $valid_date = 1;\n    } elsif(($date\
    \ =~ /^([0-9]{2,2})\\-([0-9]{2,2})\\-([0-9]{4,4})$/) == 0) {\n        $valid_date\
    \ = 1;\n    } else {\n        my $num_days = $1;\n        my $num_months = $2;\n\
    \        my $year = $3;\n        # Check the number of days\n        if($num_days\
    \ < 1 or $num_days > 31) {\n            $valid_date = 1;\n        } else {\n \
    \           if(($num_months == 1 or $num_months == 3 or $num_months == 5 or $num_months\
    \ == 7 or $num_months == 8 or $num_months == 10 or $num_months == 12)) {\n   \
    \             if($num_days < 1 or $num_days > 30) {\n                    $valid_date\
    \ = 1;\n                } else {\n                    if(($num_months == 4 and\
    \ $num_days > 29) or ($num_months == 6 and $num_days > 29) or ($num_months ==\
    \ 9 and $num_days > 29) or ($num_months == 11 and $num_days > 29)) {\n       \
    \                 $valid_date = 1;\n                    }\n                }\n\
    \            } else {\n                if($num_days < 1 or $num_days > 29) {\n\
    \                    $valid_date = 1;\n                } else {\n            \
    \        $valid_date = 0;\n                }\n            }\n        }\n    }",
  '    chomp($date);', "    my($day, @days_month, @months_day, @months_month);\n \
    \   $day = $date =~ /(\\d)/;\n    die \"Invalid date $date\" if $day !~/^[1-31]{1,2}-/;\n\
    \    $days_month = $day;\n    $days_month[0] -= 1;\n    for(my $i = 1;$i < @days_month;$i++)\
    \ {\n        $days_month[$i] -= 1;\n        $months_day[$i] = $months_day[$i -\
    \ 1] + 1;\n        my $month_num = $months_month[$i];\n        if ($month_num\
    \ == 1) {\n            $months_month[$i] = 12;\n            $months_day[$i] =\
    \ $months_day[$i - 1];\n        } elsif ($month_num == 3) {\n            $months_month[$i]\
    \ = 11;\n            $months_day[$i] = $months_day[$i - 1];\n        } elsif ($month_num\
    \ == 5) {\n            $months_month[$i] = 10;\n            $months_day[$i] =\
    \ $months_day[$i - 1];\n        } elsif ($month_num == 7) {\n            $months_month[$i]\
    \ = 9;\n            $months_day[$i] = $months_day[$i - 1];\n        } elsif ($month_num\
    \ == 8) {\n            $months_month[$i] = 8;\n            $months_day[$i] = $months_day[$i\
    \ - 1];\n        } elsif ($month_num == 10) {\n            $months_month[$i] =\
    \ 7;\n            $months_day[$i] = $months_day[$i - 1];\n        } elsif ($month_num\
    \ == 12) {\n            $months_month[$i] = 6;\n            $months_day[$i] =\
    \ $months_day[$i - 1];\n        }\n    }\n    return $day == $days_month[0] &&\n\
    \           $months_day[0] == 1 &&\n           $months_month[0] == 1 &&\n    \
    \       $months_month[1] == 3 &&\n           $months_month[2] == 5 &&\n      \
    \     $months_month[3] == 7 &&\n           $months_month[4] == 8 &&\n        \
    \   $months_month[5] == 10 &&\n           $months_month[6] == 12;\n}", "    if(defined\
    \ $date) {\n        if(length($date) > 0) {\n            if($date =~ m!^(\\d+)/(\\\
    d+)/(\\d+)!) {\n                if($3 >= 1 && $3 <= 31) {\n                  \
    \  if($1 >= 1 && $1 <= 12) {\n                        if($2 >= 1 && $2 <= 31)\
    \ {\n                            return 1;\n                        }\n      \
    \              }\n                }\n            }\n        }\n    }\n    return\
    \ 0;\n}\n</code>\n<|/ a |>\n<| c |>\nYou should check whether $1 contains '-'\
    \ and then set $3 to the month and $2 to the day if $1 does not. This would also\
    \ allow '06-04-2020' to be accepted as valid.\n<|/ c |>\n<| c |>\nThat's true.\
    \ But I think it is easier to check it right now than to check for it later. :)\n\
    <|/ c |>\n<| c |>\nOkay, I like your 'cleaner' solution better than mine. It avoids\
    \ having to remember to check for the '-' in the month field and it is easier\
    \ to maintain IMO.\n<|/ c |>\n<| c |>\nI've been reading about this and you actually\
    \ don't need the $1 variable at all :D\n<|/ c |>\n<| c |>\nWell, I used $1 because\
    \ I thought it is easier to read and understand than $3.\n<|/ c |>\n<| a tags=date,perl,validation,regex\
    \ dscore=2 |>\nYou could do this\n<code>\nuse strict;\nuse warnings;\nuse Date::Validate;",
  "    my($year, $month, $day) = split(/\\-/, $date);\n    my $month_array;\n    my\
    \ @months = qw(1 3 5 7 8 10 12);\n    my @days  = qw(31 30 29 28);\n    my @months_array\
    \ = ();\n    my $i;\n    \n    # Check the number of days in month\n    foreach\
    \ my $days_in_month (@days) {\n        if ($days_in_month == 1) {\n          \
    \  $month_array[$i] = $month;\n        }\n        elsif ($month == $month_array[$i])\
    \ {\n            $month_array[$i] = $month + 1 if $month < 11;\n        }\n  \
    \      else {\n            $month_array[$i] = 0;\n        }\n        $i++;\n \
    \   }\n    \n    # Check the number of month\n    foreach my $months_count (@months)\
    \ {\n        if ($months_count == 1) {\n            $month_array[$i] = $month;\n\
    \        }\n        elsif ($month == $month_array[$i]) {\n            $month_array[$i]\
    \ = $month + 1 if $month < 11;\n        }\n        else {\n            $month_array[$i]\
    \ = 0;\n        }\n        $i++;\n    }", "    return 1 if !($date =~ /^[\\d\\\
    -\\/\\s]+$/) || @$_ < 1 || @$_ > 31 || @$_ % 31 || @$_ < 1 || @$_ > 29 || @$_\
    \ != 1;\n    return 1 if @$_ != 4;\n    return 1 if @$_ != 6;\n    return 1 if\
    \ @$_ != 9;\n    return 1 if @$_ != 11;\n    return 1 if @$_ != 12;\n    return\
    \ 1 if @$_ != 2;\n    return 1 if $date =~ /^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$/;\n\
    \    return 1;\n}\n</code>\n<|/ a tags=perl dscore=3 |>\n<| c |>\nIt returns 1\
    \ if the date is in the valid date format, else it returns an empty string.  If\
    \ you want the date to be valid, check it against the above regex and return a\
    \ 1 if you find one, and an empty string otherwise.\n<|/ c |>\n<| c |>\nSorry\
    \ but this regex does not work, if you want it to work, change the last part of\
    \ the regex to `return 1 if ($date =~ /^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$/);`\n\
    <|/ c |>\n<| c |>\nI changed your regex for my needs and it now works as expected\
    \ - [here is the regex](http://pastebin.com/5ufGz9jV)\n<|/ c |>\n<| a |>\nThis\
    \ is my solution:\n<code>\nuse strict;\nuse warnings;\nuse Date::Parse;", "  \
    \  my($day,$month,$year) = split(/\\-/,$date,-1);\n    my($day,$month) = split(/\\\
    //,$day,-1);\n    my($months) = split(/\\//,$month,-1);\n    my($year) = int($year);\n\
    \    my($month,$day) = split(/\\//,$day,-1);\n    my($month,$day) = split(/\\\
    //,$day,-1);\n    my($day,$month) = split(/\\//,$day,-1);\n    my($month,$day)\
    \ = split(/\\//,$day,-1);\n    my($day,$month) = split(/\\//,$day,-1);\n    my($day,$month)\
    \ = split(/\\//,$day,-1);\n    my($day,$month) = split(/\\//,$day,-1);\n    my($day,$month)\
    \ = split(/\\//,$day,-1);\n    my($day,$month) = split(/\\//,$day,-1);\n    my($day,$month)\
    \ = split(/\\//,$day,-1);\n    my($day,$month) = split(/\\//,$day,-1);\n    my($day,$month)\
    \ = split(/\\//,$day,-1);\n    my($day,$month) = split(/\\//,$day,-1);\n    my($day,$month)\
    \ = split(/\\//,$day,-1);\n    my($day,$month) = split(/\\//,$day,-1);\n    my($day,$month)\
    \ = split(/\\//,$day,-1);\n    my($day,$month) = split(/\\//,$day,-1);\n    my($day,$month)\
    \ = split(/\\//,$day,-1);\n    my($day,$month) = split(/\\//,$day,-1);\n    my($day,$month)\
    \ = split(/\\//,$day,-1);\n    my($day,$month) = split(/\\//,$day,-1);\n    my($day,$month)\
    \ = split(/\\//,$day,-1);\n    my($day,$month) = split(/\\//,$day,-1);\n    my($day,$month)\
    \ = split(/\\//,$day,-1);\n    my($day,$month) = split(/\\//,$day,-1);\n    my($day,$month)\
    \ = split(/\\//,$day,-1);\n    my($day,$month) = split(/\\//,$day,-1);\n    my($day,$month)\
    \ = split(/\\//,$day,-1);\n    my($day,$month) = split(/\\//,$day,-1);\n    my($day,$month)\
    \ = split(/\\//,$day,-1);\n    my($day,$month) = ", "    chomp($date);\n    my\
    \ ($day,$month,$year) = split(/\\-/,$date);\n    $year < 1 ||\n    $month < 1\
    \ ||\n    $day < 1 ||\n    ($day == 31 && $month == 1 && $year % 4 == 0 &&\n \
    \    $year % 100 != 0 || $year % 400 == 0) ? \"1\" : \"\";\n}", "    return 1\
    \ if $date eq \"\";\n    chomp $date;\n    my @days;\n    my @months;\n    my\
    \ @month_days;\n    my @year_month;\n    my @valid;\n    my @validdays;\n    my\
    \ @validmonths;\n    my @validmonthdays;\n    my @validyearmonth;\n    my $days_month\
    \ = substr($date,0,2);\n    my $days_year = substr($date,2,2);\n    my @month_days_year\
    \ = split(/\\//,$days_month);\n    my @month_days_month = split(/\\//,$days_year);\n\
    \    my $months_year = substr($date,5,2);\n    my $months_month = substr($date,8,2);\n\
    \    my @year_month_year = split(/\\//,$months_year);\n    my @year_month_month\
    \ = split(/\\//,$months_month);\n    my $years_month = substr($date,10,2);\n \
    \   my $years_year = substr($date,12,2);\n    my @month_years_year = split(/\\\
    //,$years_month);\n    my @month_years_month = split(/\\//,$years_year);\n   \
    \ my @years_month = substr($date,15,2);\n    my @years_year = substr($date,17,2);",
  "    my $is_valid = 1;\n    my $month = 0;\n    my $day = 0;\n    my ($year) = split(/\\\
    -/,$date);\n    if(!$date || !length $date) {\n        $is_valid = 0;\n    } elsif($day\
    \ < 1 || ($month == 1 && $day < 1)) {\n        $is_valid = 0;\n    } elsif(($month\
    \ == 2 && $day > 29) || ($day > 31)) {\n        $is_valid = 0;\n    } elsif ($month\
    \ == 1 && $day > 31) {\n        $is_valid = 0;\n    } elsif ($month == 2 && $day\
    \ > 30) {\n        $is_valid = 0;\n    } elsif ($month > 12) {\n        $is_valid\
    \ = 0;\n    }\n    return $is_valid;\n}", "    return 1 if($date eq '');\n   \
    \ # Checking the number of days is ok\n    return 1 if($date =~ /^((31[\\/])|(30[\\\
    /])|(29[\\/]))-((1[012])|(0?[1-9])|([12]\\d)|(3[01]))-(\\d{4})$/);\n    # Checking\
    \ the months is ok\n    return 1 if($date =~ /^((1[012])|(0?[1-9])|([12]\\d)|(3[01]))-(\\\
    d\\d)-(\\d{4})$/);\n    # Checking the date format is ok\n    return 1 if($date\
    \ =~ /^((1[012])|(0?[1-9])|([12]\\d)|(3[01]))-(\\d\\d)-(\\d{4})$/);\n    return\
    \ \"\";\n}\n</code>\n<|/ a |>\n<| c |>\nThe date format `mm/dd/yyyy` is _not_\
    \ a standard. This is not a bug, it's a feature. `mm/dd/yyyy` is the format for\
    \ \"03 November 2000\" for example. But \"03/11/2000\" is the standard format\
    \ for \"November 3, 2000\". And \"10/11/2000\" is the standard format for \"November\
    \ 10, 2000\". And \"10/11/2000\" is the standard format for \"November 10, 2000\"\
    .\n<|/ c |>\n<| c |>\nIn other words, you should be able to parse \"03/11/2000\"\
    \ without issue, if the OP does not need to parse \"11/3/2000\". And the OP should\
    \ also be able to parse \"11/10/2000\" without issue, if the OP does not need\
    \ to parse \"10/11/2000\".\n<|/ c |>\n<| c |>\n, you are right. I fixed the answer\
    \ accordingly.\n<|/ c |>\n<| c |>\nThe `m/d/Y` format can parse _anything_ you\
    \ throw at it. It will fail on the \"wrong\" date. `m/d/Y` is a perl-specific\
    \ extension. [perldoc perlretut](http://perldoc.perl.org/perlretut.html) says\
    \ _The format m/d/y can parse almost any date format, not just those in Unix format._\
    \ If it's something you find yourself needing more than once, it's probably time\
    \ to write a module for it.\n<|/ c |>\n<| c |>\n, yes you are right, i forgot\
    \ to add the missing \"m\". It works now. Thanks for the comment.\n<|/ c |>\n\
    <| a tags=date,validation,perl dscore=2 |>\nThe most appropriate tool for the ",
  "    my(@months,$day,$year);\n    my(@valid);", '    my($day_count, $days_valid,
    $months, $years_valid, $month, $day, $year) = (0,0,0);', "    my $flag = 0;\n\
    \    my %days_in_month = (1, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);\n  \
    \  my %days_in_month_after_1 = (29, 30, 31);\n    my %days_in_month_after_3 =\
    \ (31, 30);", "    if (length($date) != 0) {\n        if ($date =~ /^[0-9]{2}-[0-9]{1,2}-[0-9]{4}$/)\
    \ {\n            return 1;\n        } elsif ($date =~ /^[0-9]{2}\\/[0-9]{1,2}\\\
    /[0-9]{4}$/) {\n            return 1;\n        } elsif ($date =~ /^[0-9]{1,2}\\\
    /[0-9]{1,2}\\/[0-9]{4}$/) {\n            return 1;\n        } elsif ($date =~\
    \ /^[0-9]{1,2}\\/[0-9]{4}$/) {\n            return 1;\n        } elsif ($date\
    \ =~ /^[0-9]{1,2}\\/[0-9]{1,2}$/) {\n            return 1;\n        } elsif ($date\
    \ =~ /^[0-9]{1,2}\\/[0-9]{1,2}-[0-9]{1,2}$/) {\n            return 1;\n      \
    \  } elsif ($date =~ /^[0-9]{1,2}\\/[0-9]{1,2}\\/[0-9]{1,2}$/) {\n           \
    \ return 1;\n        } elsif ($date =~ /^[0-9]{1,2}\\/[0-9]{1,2}\\/[0-9]{2}$/)\
    \ {\n            return 1;\n        } elsif ($date =~ /^[0-9]{1,2}\\/[0-9]{1,2}\\\
    /[0-9]{2}-[0-9]{1,2}$/) {\n            return 1;\n        } elsif ($date =~ /^[0-9]{1,2}\\\
    /[0-9]{1,2}\\/[0-9]{2}\\/[0-9]{1,2}$/) {\n            return 1;\n        } elsif\
    \ ($date =~ /^[0-9]{1,2}\\/[0-9]{1,2}\\/[0-9]{2}\\/[0-9]{2}$/) {\n           \
    \ return 1;\n        } elsif ($date =~ /^[0-9]{1,2}\\/[0-9]{1,2}\\/[0-9]{2}\\\
    /[0-9]{2}-[0-9]{1,2}$/) {\n            return 1;\n        } elsif ($date =~ /^[0-9]{1,2}\\\
    /[0-9]{1,2}\\/[0-9]{2}\\/[0-9]{2}\\/[0-9]{2}$/) {\n            return 1;\n   \
    \     } elsif ($date =~ /^[0-9]{1,2}\\/[0-9]{1,2}\\/[0-9]{2}\\/[0-9]{2}\\/[0-9]{2}-[0-9]{1,2}$/)\
    \ {\n            return 1;\n        } elsif ($date =~ /^[0-9]{1,2}\\/[0-9]{1,2}\\\
    /[0-9]{2}\\/[0-9]{2}\\/[0-9]{2}\\/[0-9]{2}$/) {\n            return 1;\n     \
    \   } elsif ($date =~ /^[0-9]{1,2}\\/[0-9]{1,2}\\/[0-9]{2}\\/[0-9]{2}\\/[0-9]{2}\\\
    /[0-9]{2}-[0-9]{1,2}$/) {\n            return 1;\n        } elsif ($date =~ /^[0-9]{1,2}\\\
    /[0-9]{1,2}\\/[0-9]{2}\\/[0-9]{2}\\/[0-9]{2}\\/[0-9]{2}", "    if(!$date) {\n\
    \        return \"1\";\n    }", "    if ( $date =~ /^\\s*$/ ) {\n        return\
    \ 1;\n    }\n    if ( !($date =~ /^(\\d\\d)-(\\d\\d)-(\\d\\d\\d\\d)$/ ) ){\n \
    \       return \"\";\n    }\n    my $m1 = $1;\n    my $d1 = $2;\n    my $y = $3;\n\
    \    my $m2 = $1;\n    my $d2 = $2;\n    my $y2 = $2;\n    my $d = $1;\n    my\
    \ $m = $2;\n    my $d2 = $2;\n    my $y = $3;\n    my $d3 = $3;", '    my ($day,
    $month, $year) = split(/\-/, $date);', "    return 1 unless $date;\n    $date\
    \ =~ /^\\d\\d-\\d\\d-\\d\\d\\d\\d$/;\n    return 1 if $date =~ /^\\d$/;\n    $date\
    \ =~ /\\d/;\n    $date =~ /^\\d\\d$/;\n    $date =~ /\\d/;\n    return 1 if $date\
    \ !~ /^\\d\\d-\\d\\d-\\d\\d\\d\\d$/;\n    return 1 if $date !~ /^\\d$/;\n    return\
    \ 1 if $date !~ /\\d/;\n    return 1 if $date !~ /^\\d\\d$/;\n    return 1 if\
    \ $date !~ /\\d/;\n    return 1;\n}", "    my %months = (\n        1 => 0, 3 =>\
    \ 1, 5 => 2, 7 => 3, 8 => 4, 10 => 5, 12 => 6, 4 => 4, 6 => 6, 9 => 6, 11 => 6,\n\
    \        2 => 0, 29 => 2,);\n    \n    my %months_key = (\n        1 => 1, 3 =>\
    \ 4, 5 => 7, 8 => 10, 10 => 12, 12 => 2,\n        4 => 4, 6 => 6, 9 => 9, 11 =>\
    \ 11,\n        2 => 0,);", "    if ( $date =~ /^\\s*$/ ) {\n        return \"\"\
    ;\n    }\n    if ( length($date) < 8 ) {\n        return \"\";\n    }", '    $date
    =~ /(\d{2})-(\d{2})-(\d{4})/;', "    \n    my($days, $months, $years) = dateparts($date);\n\
    \    my $months = 12*$months;\n    \n    if ($months < 1 ||\n        $months >\
    \ 12 ||\n        $days < 1 ||\n        $days > 31 ||\n        $years < 1 ||\n\
    \        $years > 3000\n    ) {\n        return '';\n    } else {\n        return\
    \ 1;\n    }\n}", "    $date ||= \"\";\n    my($day, $month, $year) = split \"\
    -\", $date;\n    my %days_of = (1 => 31, 3 => 30, 5 => 29, 7 => 28, 8 => 28, 10\
    \ => 29, 11 => 29);\n    $days_of{$month} + $days_of{$year} = $day;", "    my\
    \ $year = substr($date,5,4);\n    my $month = substr($date,0,2);\n    my $day\
    \ = substr($date,3,2);", "    return undef if !defined($date);\n    my($day,$month,$year)\
    \ = split(m!-!,$date,-1);\n    $year = $year+1900;\n    if ($day eq '' || $month\
    \ eq '' || $year eq '') {\n        return undef;\n    }\n    $day = int($day);\n\
    \    $month = int($month);\n    $year = int($year);\n    my %months = (1 => 'January',\
    \ 3 => 'March', 5 => 'May', 7 => 'July', 8 => 'August', 10 => 'October', 12 =>\
    \ 'December');\n    if ($month < 1 || $month > 12) {\n        return \"\";\n \
    \   }\n    return undef if !defined($months{$month}) || $month > 12;\n    return\
    \ undef if $month == 1 && $day == 1 && $year % 400 == 0 || ($month == 1 && $day\
    \ == 31 && $year % 400 != 0 || ($month == 2 && $day == 29 && $year % 4 != 0));\n\
    \    return undef if $month == 2 && $day == 29 && $year % 4 != 0 && $year % 100\
    \ == 0 && $year % 400 == 0;\n    return undef if $month == 4 && $day == 29 &&\
    \ $year % 4 != 0 && $year % 100 == 0 && $year % 400 != 0;\n    return undef if\
    \ $month == 6 && $day == 29 && $year % 4 != 0 && $year % 100 != 0 && $year % 400\
    \ == 0;\n    return undef if $month == 9 && $day == 29 && $year % 100 != 0 &&\
    \ $year % 400 == 0;\n    return undef if $month == 11 && $day == 29 && $year %\
    \ 4 != 0 && $year % 100 != 0 && $year % 400 != 0;\n    return undef if $month\
    \ == 1 && $day == 1 && $year % 400 == 0 && $year % 100 != 0 && $year % 4 == 0;\n\
    \    return undef if $month == 3 && $day == 1 && $year % 400 != 0 && $year % 100\
    \ != 0 && $year % 4 == 0;\n    return undef if $month == 5 && $day == 1 && $year\
    \ % 400 != 0 && $year % 100 != 0 && $year % 4 != 0;\n    return undef if $month\
    \ == 7 && $day == 1 && $year % 400 != 0 && $year % 100 == 0 && $year % 4 != 0;\n\
    \    return undef if $month == 8 && $day == 1 && $year % 400 != 0 && $year % 100\
    \ == 0 && $year % 4 == 0;\n    return undef if $month == 10 && $day == 1 && $year\
    \ % 400 != 0 && $year % 100 == 0 && $year % 4 != 0;\n    return undef if $month\
    \ == 12 && $day == 1 && $year % 400 == 0 && $year % 100 != 0 && $", "    my $retval;\n\
    \    \n    # 1. check date\n    if ( $date eq \"\" ) {\n        return 0;\n  \
    \  }\n    \n    # 2. check number of days\n    $retval = 0;\n    if ( $date !~\
    \ /^\\d+$/ ) {\n        $retval = 1;\n    }\n    if ( $date !~ /^\\d{1,2}$/ )\
    \ {\n        $retval = 1;\n    }\n    if ( $date !~ /^\\d{1,2}\\-\\d{1,2}$/ )\
    \ {\n        $retval = 1;\n    }\n    \n    # 3. check months\n    if ( $date\
    \ !~ /^\\d{1,2}\\-\\d{1,2}$/ ) {\n        $retval = 1;\n    }\n    if ( $date\
    \ !~ /^\\d{1,2}\\-\\d{1,2}$/ ) {\n        $retval = 1;\n    }\n    if ( $date\
    \ !~ /^\\d{1,2}\\-\\d{1,2}$/ ) {\n        $retval = 1;\n    }\n    \n    # 4.\
    \ check year\n    if ( $date !~ /^\\d{1,2}\\-\\d{1,2}$/ ) {\n        $retval =\
    \ 1;\n    }\n    if ( $date !~ /^\\d{1,2}\\-\\d{1,2}$/ ) {\n        $retval =\
    \ 1;\n    }\n    if ( $date !~ /^\\d{1,2}\\-\\d{1,2}$/ ) {\n        $retval =\
    \ 1;\n    }\n    \n    return $retval;\n}", "    my @date = split(/\\//, $date);\n\
    \    my @months = split(\"-\", $date[0]);\n    my @days =\n        map { $_ -\
    \ 1 } split //, $months[0] . \"-\" . $months[1] . \"-\" . $date[1];"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
