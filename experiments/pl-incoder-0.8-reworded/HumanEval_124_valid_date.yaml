name: HumanEval_124_valid_date
language: pl
prompt: "# You have to write a function which validates a given date string and\n\
  # returns 1 if the date is valid otherwise ''.\n# The date is valid if all of the\
  \ following rules are satisfied:\n# 1. The date string is not empty.\n# 2. The number\
  \ of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12.\
  \ And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11.\
  \ And, the number of days is not less than 1 or higher than 29 for the month 2.\n\
  # 3. The months should not be less than 1 or higher than 12.\n# 4. The date should\
  \ be in the format: mm-dd-yyyy\n# >>> valid_date(\"03-11-2000\")\n# 1\n# >>> valid_date(\"\
  15-01-2012\")\n# \"\"\n# >>> valid_date(\"04-0-2040\")\n# \"\"\n# >>> valid_date(\"\
  06-04-2020\")\n# 1\n# >>> valid_date(\"06/04/2020\")\n# \"\"\nsub valid_date {\n\
  \    my($date) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&valid_date;\n\
  \        if(eq_deeply($candidate->(\"03-11-2000\"),1)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15-01-2012\"\
  ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  04-0-2040\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"06-04-2020\"),1)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"01-01-2007\"\
  ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  03-32-2011\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"04-31-3000\"),\"\
  \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  06-06-2005\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"21-31-2000\"),\"\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"04-12-2003\"\
  ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  04122003\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"20030412\"),\"\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2003-04\"\
  ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  2003-04-12\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"04-2003\"),\"\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    return '' unless $date;\n    my ($day, $month, $year) = (split(/\\\
    D/,$date))[0,1,2,3];\n    return 1 unless ($day and $month and $year);\n    return\
    \ 1 unless ($month =~ /^[1|3|5|7|8|10|12]$/);\n    return 1 unless ($day =~ /^[1-31]$/);\n\
    \    return 1 unless ($day =~ /^[30]$/);\n    return 1 unless ($day =~ /^[29]$/);\n\
    \    return 1 unless ($month =~ /^[12]$/);\n    return 1;\n}", "    # You have\
    \ to write a function which validates a given date string and\n    # returns 1\
    \ if the date is valid otherwise ''.\n    # The date is valid if all of the following\
    \ rules are satisfied:\n    # 1. The date string is not empty.\n    # 2. The number\
    \ of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12.\
    \ And the number of days is not less than 1 or higher than 30 days for months\
    \ 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the\
    \ month 2.\n    # 3. The months should not be less than 1 or higher than 12.\n\
    \    # 4. The date should be in the format: mm-dd-yyyy\n    # >>> valid_date(\"\
    03-11-2000\")\n    # 1\n    # >>> valid_date(\"15-01-2012\")\n    # \"\"\n   \
    \ # >>> valid_date(\"04-0-2040\")\n    # \"\"\n    # >>> valid_date(\"06-04-2020\"\
    )\n    # 1\n    # >>> valid_date(\"06/04/2020\")\n    # \"\"\n}", "    my $is_valid\
    \ = 0;\n    \n    # Empty date.\n    $date =~ s/^\\s*$//;\n    \n    # Validation\
    \ of month.\n    my $m = 1;\n    $date =~ s/^([0-9]{2})-([0-9]{2})-([0-9]{4})$/$m--$1-$2/;\n\
    \    $m += 0;\n    \n    # Validation of day.\n    my $d = 1;\n    $date =~ s/^([0-9]{2})-([0-9]{2})-([0-9]{4})/--$1-$2/;\n\
    \    $d += 0;\n    \n    # Validation of year.\n    $date =~ s/^([0-9]{2})-([0-9]{2})-([0-9]{4})/--$2-$3/;\n\
    \    $date =~ s/^([0-9]{4})/--$1/;\n    \n    my $today = localtime();\n    my\
    \ $year = $today > str2time($date) ? $today : str2time($date);\n    \n    # Validation\
    \ of date\n    $is_valid = 1 if ($m == 1 && $d == 1 && $year > str2time(\"2011-01-01\"\
    ) && $year < str2time(\"2100-01-01\"));\n    $is_valid += 0 if ($m == 1 && $d\
    \ == 31 && $year > str2time(\"2011-03-31\") && $year < str2time(\"2100-03-31\"\
    ));\n    $is_valid += 0 if ($m == 2 && $d == 31 && $year > str2time(\"2012-03-31\"\
    ) && $year < str2time(\"2013-03-31\"));\n    $is_valid += 0 if ($m == 2 && $d\
    \ == 31 && $year > str2time(\"2013-03-31\") && $year < str2time(\"2014-03-31\"\
    ));\n    $is_valid += 0 if ($m == 3 && $d == 31 && $year > str2time(\"2012-03-31\"\
    ) && $year < str2time(\"2013-03-31\"));\n    $is_valid += 0 if ($m == 3 && $d\
    \ == 31 && $year > str2time(\"2013-03-31\") && $year < str2time(\"2014-03-31\"\
    ));\n    $is_valid += 0 if ($m == 4 && $d == 31 && $year > str2time(\"2012-03-31\"\
    ) && $year < str2time(\"2013-03-31\"));\n    $is_valid += 0 if ($m == 4 && $d\
    \ == 31 && $year > str2time(\"2013-03-31\") && $year < str2time(\"2014-03-31\"\
    ));\n    $is_valid += 0 if ($m == 5 && $d == 31 && $year > str2time(\"2012-03-31\"\
    ) && $year < str2time(\"2013-03-31\"));\n    $is_valid += 0 if ($m == 5 && ",
  '    my ($day, $month, $year) = split(/\-/, $date);', "    return '' unless defined\
    \ $date;\n    return 1 if $date eq ''; # 1\n    my @month = (0=>1,1=>1,3=>3,5=>5,7=>7,8=>8,10=>10,12=>12);\n\
    \    return '' if $date =~ /^(0[1-9]|[12][0-9]|3[01])[- /.-](0[1-9]|1[012])[-\
    \ /.-](19\\d\\d)$/;\n    my $day_len = ($date =~ /^(19|20)\\d\\d/);\n    return\
    \ '' if $day_len != 4;\n    return '' if $date !~ /^[01]\\d[- /.-]\\d[- /.-](19\\\
    d\\d)$/;\n    for my $month (@month) {\n        return '' if $date =~ /^$month-\\\
    d\\d-\\d\\d$/;\n    }\n    return 1;\n}", "    my $year  = substr($date, 0, 4);\n\
    \    my $month = int(substr($date, 5, 2));\n    my $day   = int(substr($date,\
    \ 8, 2));\n    if ($day < 1 || $day > 31 || $month < 1 || $month > 12 || $year\
    \ < 1000 || $year > 2030) {\n        return \"\";\n    }\n    else {\n       \
    \ my $day_of_month = $day;\n        if ($month == 2) {\n            $day_of_month\
    \ = $day + 29;\n        }\n        return $day > 0 && $day <= $day_of_month;\n\
    \    }\n}", '    my($dateParts) = $date =~ m!^(\d{2})-?(\d{2})-?(\d{4})$!;', " \
    \   # Empty date string\n    return '' if ($date eq '');\n    # Check if the date\
    \ is valid.\n    # Check if the date string is in the format: mm-dd-yyyy\n   \
    \ # Check if the months are in the range 1-12\n    # Check if the days are in\
    \ the range 1-31 or higher\n    # Check if the years are in the range 1900-2020\n\
    \    # Check if the last 2 digits are in the range 0-2\n    if ($date =~ /^\\\
    d{2}-\\d{2}-\\d{4}/) {\n        # Convert the date string into the number of days\n\
    \        my(@months) = split('-', $date);\n        my(@days) = split(' ', \"$months[1]-$months[0]-$months[2]\"\
    );\n        my(@years) = split('-', $months[2] . \"-$months[1]-$months[0]\");\n\
    \        my(@years) = split(' ', \"$years[2]-$years[1]-$years[0]\");\n       \
    \ my $date_in_months = $days[2] . $days[1] . $days[0];\n        my $date_in_years\
    \ = $years[2] . $years[1] . $years[0];\n        if ($date_in_months >= 1 && $date_in_months\
    \ < 31) {\n            if ($date_in_years >= 1900 && $date_in_years <= 2020) {\n\
    \                # If the number of days in the month and the year are within\
    \ the range, return 1\n                return 1;\n            }\n        }\n \
    \       if ($date_in_months >= 31 || $date_in_months == 31) {\n            if\
    \ ($date_in_years >= 1900 && $date_in_years <= 2020) {\n                # If the\
    \ number of days in the month and the year are within the range, return 1\n  \
    \              return 1;\n            }\n        }\n        if ($date_in_months\
    \ >= 29) {\n            if ($date_in_years >= 1900 && $date_in_years <= 2020)\
    \ {\n                # If the number of days in the month and the year are within\
    \ the range, return 1\n                return 1;\n            }\n        }\n \
    \   }\n    return '';\n}", "    $date =~ /^[0-9]{2}\\/[0-9]{2}\\/[0-9]{4}/;\n\
    \    return 1 if (length($date));\n    if ($date =~ /^[0-9]{2}\\/[0-9]{2}\\/[0-9]{4}/)\
    \ {\n        my $d = DateTime->new($date);\n        if ($d->month < 1 || $d->month\
    \ > 12) {\n            return '';\n        }\n        if ($d->day < 1 || $d->day\
    \ > 31 || $d->day != $d->month) {\n            return '';\n        }\n       \
    \ return 1;\n    }\n    if ($date =~ /^[0-9]{2}\\/[0-9]{2}\\/[0-9]{4}/) {\n  \
    \      my $d = DateTime->new($date);\n        if ($d->month < 1 || $d->month >\
    \ 12) {\n            return '';\n        }\n        if ($d->day < 1 || $d->day\
    \ > 30 || $d->day != $d->month) {\n            return '';\n        }\n       \
    \ return 1;\n    }\n    if ($date =~ /^[0-9]{2}\\/[0-9]{2}\\/[0-9]{4}/) {\n  \
    \      my $d = DateTime->new($date);\n        if ($d->month < 1 || $d->month >\
    \ 12) {\n            return '';\n        }\n        if ($d->day < 1 || $d->day\
    \ > 29 || $d->day != $d->month) {\n            return '';\n        }\n       \
    \ return 1;\n    }\n    return '';\n}", "    chomp($date);\n    $date =~ /^([0-9]{2})-([0-9]{2})-([0-9]{4})$/;\n\
    \    if ($3 > $2 || ($3 > $2 && $3 <= $2 && $2 <= $1)) {\n        return 1;\n\
    \    }\n    return '';\n}", "    \n    #If no date then return ''\n    if(not\
    \ defined $date) {\n        return '';\n    }\n    \n    #If empty string return\
    \ ''\n    if($date eq \"\") {\n        return \"\";\n    }", "    my $month;\n\
    \    my $day;\n    my $year;", "    chomp($date);\n    if ( $date eq \"\") {\n\
    \        return \"\";\n    }\n    if ( !((length($date) >= 2) && (length($date)\
    \ <= 10))) {\n        return \"\";\n    }\n    my @months = split /-/, $date;\n\
    \    foreach my $i (@months) {\n        if (($i <= 1) || ($i > 12)) {\n      \
    \      return \"\";\n        }\n    }\n    my @days_array = split /-/, $date;\n\
    \    if ((scalar @days_array) != 3) {\n        return \"\";\n    }\n    my @days\
    \ = @days_array;\n    foreach my $i (@days) {\n        if (($i <= 0) || ($i >\
    \ 29)) {\n            return \"\";\n        }\n    }\n    # month\n    if (scalar\
    \ @months != 3) {\n        return \"\";\n    }\n    # day\n    if (scalar @days\
    \ < 1 || scalar @days > 29) {\n        return \"\";\n    }\n    # date\n    return\
    \ 1;\n}", "    return 1 if($date eq '');\n    my($month,$day,$year) = split /-/,\
    \ $date;\n    my ($error) = validate_month($month);\n    $error =~ s/^.//g if($error\
    \ !~ /^$/);\n    my $days_diff = 31+ int($month/3);\n    $days_diff += int($month/3)\
    \ if ($month > 12);\n    $days_diff += $day - 1;\n    return $error if($days_diff\
    \ > 29 || $days_diff < 1);\n    return $error if($day > $days_diff);\n    my $month\
    \ = sprintf(\"%03d\", $month);\n    return $error if($month > 12);\n    return\
    \ $error if($day > $days_diff);\n    return $error if($month < 1 || ($month ==\
    \ 2 && $day <= 29));\n    return $error if($day < 1 || ($day > $days_diff));\n\
    \    return $error;\n}", "    my ($month,$day,$year) = split(\"-\", $date);\n\
    \    # Rule 1\n    return '' if (!$date);", "    if (! length($date)) {\n    \
    \    return '';\n    }\n    my($day,$month,$year) = split(/\\-/, $date);\n   \
    \ if ($day < 1 || $day > 31) {\n        return '';\n    }\n    if ($month < 1\
    \ || $month > 12) {\n        return '';\n    }\n    if ($day >= $month) {\n  \
    \      if ($day >= 29) {\n            return '';\n        }\n        return 1;\n\
    \    }\n    if ($month == 2) {\n        return ($day >= 27 ? 1 : '');\n    }\n\
    \    if ($month == 4 || $month == 6 || $month == 9 || $month == 11) {\n      \
    \  return ($day >= 30 ? 1 : '');\n    }\n    if ($month == 1) {\n        return\
    \ ($day >= 28 ? 1 : '');\n    }\n    return 0;\n}", "    $date =~ /^([12]\\d\\\
    d)-(0[1-9]|1[0-2])-\\d{4}$/;\n    return 1 unless $date =~ /^([12]\\d\\d)-(0[1-9]|1[0-2])-\\\
    d{4}$/;", "    return 1 if(length $date eq 0);\n    my($day, $month, $year) =\
    \ split(/\\D/, $date);\n    my($day_valid) = validate_day($day);\n    my($month_valid)\
    \ = validate_month($month);\n    my($year_valid) = validate_year($year);\n   \
    \ return 1 if($day_valid eq \"\" || $month_valid eq \"\" || $year_valid eq \"\"\
    );\n    my($days_valid) = validate_days($year, $month, $day);\n    return 1 if($days_valid\
    \ eq \"\");\n    return 1 if($days_valid > 29);\n    return 1 if($days_valid >\
    \ 28);\n    my($month_valid) = validate_month($month);\n    return 1 if($month_valid\
    \ > 12);\n    return 1;\n}", "    my($month, $day, $year) = split \"/\", $date;\n\
    \    my(@months) = (1..12);\n    my(@days) = (1..31);\n    my(@dates) = (1..29);\n\
    \    my($datevalid) = 1;\n    my($month, @months) = split \"-\", $month;\n   \
    \ my($year, @years) = split \"-\", $year;\n    my($monthday) = join \"\", @months[0..$#months];\n\
    \    my($datevalid) = 1;\n    my(@daysinmonth) = (31, 28, 31, 30, 31, 30, 31,\
    \ 31, 30, 31, 30, 31);\n    if ($day < 1 or $day > @days) {\n        $datevalid\
    \ = 0;\n    }\n    if ($month < 1 or $month > @months) {\n        $datevalid =\
    \ 0;\n    }\n    if ($monthday = 0) {\n        $datevalid = 0;\n    }\n    if\
    \ ($year < 2000 or $year > 2040) {\n        $datevalid = 0;\n    }\n    foreach\
    \ $month (@months) {\n        if ($month == @months) {\n            $datevalid\
    \ = 0;\n        }\n        if ($monthday < $months[$month-1] or $monthday > @daysinmonth[$month-1])\
    \ {\n            $datevalid = 0;\n        }\n    }\n    if ($datevalid) {\n  \
    \      return 1;\n    } else {\n        return \"\";\n    }\n}", "    my(@date)\
    \ = split( /-/, $date );\n    my($day, $month, $year) = @date;\n    my($days,$months,$years)\
    \ = @_;\n    \n    # check for empty string\n    return 1 unless length $date;\n\
    \    \n    # check for invalid dates\n    return \"\" if $day < 1 || $day > 31;\n\
    \    \n    # check for invalid month\n    return \"\" if $month < 1 || $month\
    \ > 12;\n    \n    # check for invalid year\n    return \"\" if $months == $year;\n\
    \    \n    return 1 unless $days < 1 || $days > 30;\n    \n    # check for invalid\
    \ dates in leap years\n    return \"\" if (($year % 4) == 0) && (( ( ($year %\
    \ 100) == 0) && (( (($year % 400) == 0) or ( (($year % 4) == 0 and ($month ==\
    \ 2) ) ) ) );\n    \n    return 1;\n}", "    my $is_valid = 1;\n    # 1. date\
    \ string is not empty\n    my $day_count = ( substr($date,0,2) =~ /(\\d+)/) ||\
    \ 1;\n    $day_count = ( $day_count->{1} > 31 ) ? 31 : $day_count->{1};\n    $day_count\
    \ = ( $day_count->{1} > 30 ) ? 30 : $day_count->{1};\n    $day_count = ( $day_count->{1}\
    \ > 29 ) ? 29 : $day_count->{1};\n    my $month_count = ( substr($date,3,1) =~\
    \ /(\\d+)/) || 1;\n    $month_count = ( $month_count->{1} > 12 ) ? 12 : $month_count->{1};\n\
    \    $month_count = ( $month_count->{1} > 12 ) ? 12 : $month_count->{1};\n   \
    \ # 2. month is not less than 1 or higher than 12\n    $is_valid = ( $month_count->{1}\
    \ <= 12 ) ? 0 : 1; \n    # 3. date should be in the format: mm-dd-yyyy\n    if(\
    \ !( $day_count > 0 && $month_count > 0 && $day_count > 0 ) ) {\n        $is_valid\
    \ = 0;\n    }\n    return $is_valid;\n}", "    my($month,$day,$year) = split(/\\\
    //,$date);\n    my($day_of_month);", '    my($check);', "    \n    return '' unless\
    \ length $date;\n    \n    my(@month) = split '-', $date;\n    \n    return 1\
    \ unless (@month >= 1 && @month <= 12);\n    \n    my(@year) = split '-', $date;\n\
    \    \n    return 1 unless (@year[2] <= 4);\n    \n    return 1 unless (@month[2]\
    \ <= 2);\n    \n    my(@days) = split '-', $date;\n    \n    return 1 unless (@days\
    \ >= 1 && @days <= 31);\n    \n    return 1 unless (@days >= 1 && @days <= 30);\n\
    \    \n    return 1 unless (@days >= 1 && @days <= 29);\n    \n    return 1;\n\
    }", "    return '' unless $date;\n    my $day = `date -d $date +%j`;\n    return\
    \ '' unless $day =~ m/^[1-9][0-9]?$/;\n    my $days_in_month = [31,28,31,30,31,30,31,30,31,30,31];\n\
    \    my $days_passed = $day - 1;\n    my $invalid_days = 0;\n    my $month = 0;\n\
    \    my $year = 0;\n    while ($invalid_days == 0) {\n        if (($month == 3\
    \ && $days_passed > $days_in_month[3]) ||\n            ($month == 6 && $days_passed\
    \ > $days_in_month[6]) ||\n            ($month == 9 && $days_passed > $days_in_month[9])\
    \ ||\n            ($month == 11 && $days_passed > $days_in_month[11]) ||\n   \
    \         ($month == 0 && $days_passed > $days_in_month[0]) ||\n            ($month\
    \ == 2 && $days_passed > $days_in_month[2])) {\n            $invalid_days = 1;\n\
    \        }\n        my $temp_days_passed = $days_passed;\n        $month++;\n\
    \        if ($month == 12) {\n            $year++;\n            $month = 0;\n\
    \        }\n        $days_passed -= $temp_days_passed;\n    }\n    if ($invalid_days)\
    \ {\n        return 1;\n    }\n    return '';\n}", "    return '' unless $date;\n\
    \    return 1 unless length $date;\n    return 1 unless $date =~ /^[0-9]*$/ &&\
    \ $date > 1 && $date < 31;\n    return 1 unless $date =~ /^[0-9]*$/ && $date >\
    \ 1 && $date < 30;\n    return 1 unless $date =~ /^[0-9]*$/ && $date > 1 && $date\
    \ < 29;\n    return 1 unless $date =~ /^[0-9]*$/ && $date > 0 && $date < 12;\n\
    \    return '';\n}", "    return '' unless $date =~ /^\\d{4}-\\d{1,2}-\\d{1,2}/;\n\
    \    $date =~ /(\\d{1,2})(\\d{1,2})(\\d{1,2})/;\n    my $month = $1;\n    my $day\
    \ = $2;\n    my $year = $3;\n    my $month_days_table = [ 1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12 ];\n    my $month_days_table_2 = [\n        1 => 31,\n    \
    \    3 => 30,\n        5 => 29,\n        7 => 31,\n        8 => 31,\n        10\
    \ => 30,\n        12 => 31,\n    ];\n    my $month_days_table_3 = [\n        1\
    \ => 31,\n        2 => 28,\n        3 => 31,\n        4 => 31,\n        5 => 30,\n\
    \        6 => 31,\n        7 => 30,\n        8 => 31,\n        9 => 31,\n    \
    \    10 => 30,\n        11 => 31,\n        12 => 31,\n    ];\n    my $month_days_table_4\
    \ = [\n        1 => 31,\n        2 => 31,\n        3 => 30,\n        4 => 31,\n\
    \        5 => 31,\n        6 => 30,\n        7 => 31,\n        8 => 31,\n    \
    \    9 => 30,\n        10 => 31,\n        11 => 30,\n        12 => 31,\n    ];\n\
    \    my $is_valid_date = 1;\n    if ( $month > 12 ) { $is_valid_date = 0; $month\
    \ = 1; } # If the month is greater than 12 then it should be set to 1 otherwise\
    \ it should be set to 0.\n    if ( $month < 1 ) { $is_valid_date = 0; $month =\
    \ 1; } # If the month is less than 1 then it should be set to 1 otherwise it should\
    \ be set to 0.\n    if ( !( $month_days_table_2->{$month} > $day or $month_days_table_3->{$month}\
    \ > $day or $month_days_table_4->{$month} > $day ) ) {\n        $is_valid_date\
    \ = 0;\n    }\n    if ( $day > $month_days_table->{$month} ) { $is_valid_date\
    \ = 0; $day = $month_days_table->{$month}; } # If the number of days is greater\
    \ than the number of days in that month then it should be set to 1 otherwise it\
    \ should be set to 0.\n    if ( $day < 1 ) { $is_valid_date = 0; $day = 1; }\n\
    \    if ( $day == 0 or $is_valid_date == 0 ) { $is_valid_date = ''; }\n    return\
    \ $is_valid_date;\n}", "    $date = lc($date);\n    $date =~ /^([0-9]+)-([0-9]+)-([0-9]+)\\\
    z/ and \n    my $day1 = $1;\n    my $day2 = $2;\n    my $year = $3;\n    my $months_since_day1\
    \ = (31 + (($day1%4)==0)) + (($day1%7)==0);\n    my $months_since_day2 = ((29-$months_since_day1)\
    \ + $day2 - ($day1 - ($day1%7)));\n    my $months_since_day3 = ((28-$months_since_day2)\
    \ + ($day2%2) - ($day1 - ($day1%7)));", "    # Check for empty string\n    return\
    \ '' unless $date;\n    # Get the number of days in the month\n    my(@daysInMonth)\
    \ = &get_days_in_month(@months);\n    # Get the number of days in the year\n \
    \   my($daysInYear) = &get_days_in_year();\n    # Validate that all the required\
    \ date conditions are satisfied\n    return 1 unless $date ne '';\n    # Make\
    \ sure that the number of days is between 0 and 31\n    return '' unless $daysInMonth[0]\
    \ <= 31 && $daysInMonth[1] <= 31;\n    # Make sure that the number of days is\
    \ between 1 and 29\n    return '' unless $daysInMonth[0] <= 29 && $daysInMonth[1]\
    \ <= 29;\n    # Make sure that the number of days is between 1 and 365\n    return\
    \ '' unless $daysInYear <= 365;\n    # Validate date format\n    my ($mm, $dd,\
    \ $yyyy) = &get_date($date);\n    return '' unless $mm && $dd && $yyyy;\n    #\
    \ Check if the date is valid\n    my $valid = 1;\n    for (my $i = 0; $i <= 7;\
    \ $i++) {\n        my $day = $mm * 30 + $dd;\n        $valid &= $daysInMonth[$i]\
    \ == $day if $i > 0;\n        $valid &= $daysInYear >= $day if $i < 6;\n     \
    \   $day = $yyyy;\n        $valid &= $day >= 1 && $day <= 365 if $i >= 6;\n  \
    \  }\n    return $valid ? 1 : 0;\n}\n</code>\nThe function get_date can validate\
    \ a date string by using the regexp /^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/, e.g.\n\
    <code>", "    my($day, $month, $year) = (0, 0, 0);\n    if ($date =~ /^\\s*$/)\
    \ {\n        return \"\";\n    } elsif ($date !~ /-/) {\n        return 1;\n \
    \   } elsif ($date !~ /^([0-9]{1,2}\\-){2}[0-9]{1,2}$/) {\n        return \"\"\
    ;\n    } elsif ($date !~ /([12]\\d)|(0?[1-9])|(30)\\/([12]\\d)|([1-9])$/) {\n\
    \        return \"\";\n    } elsif ($date !~ /^([1]?\\d?\\d|1[12])\\-(0?[1-9]\\\
    d|[12]\\d|3[01])$/) {\n        return \"\";\n    }\n    foreach my $i (1..12)\
    \ {\n        $day+=$1 if $i eq $month;\n        $month+=$1 if $i =~ /12$/;\n \
    \   }\n    return 1 if ($month < 1 || $month > 12 || $day < 1 || $day > 31 ||\
    \ $year < 1950 || $year > 2050);\n    return \"\";\n}", "    # Make sure $date\
    \ is not empty\n    if ($date !~ /^\\s*$/) {\n        # Make sure number of days\
    \ is in range [1,31]\n        if ($date !~ /^\\d\\d$/) {\n            return '1';\n\
    \        }\n        elsif ($date !~ /^\\d\\d(\\d\\d)$/) {\n            return\
    \ '1';\n        }\n        elsif ($date !~ /^\\d\\d(\\d\\d)-(\\d\\d)$/) {\n  \
    \          return '1';\n        }\n        elsif ($date !~ /^\\d\\d(\\d\\d)-(\\\
    d\\d)-(\\d\\d\\d\\d)$/) {\n            return '1';\n        }\n        else {\n\
    \            return '1';\n        }\n    }\n    else {\n        return '';\n \
    \   }", "    chomp $date;\n    if (length $date == 0) {\n        return 0;\n \
    \   } elsif ($date =~ /^\\s*$/) {\n        return 0;\n    } elsif ($date =~ /^\\\
    d\\d?[-\\/]\\d\\d?[-\\/]\\d\\d\\d?$/) {\n        $date = \"$1$2$3\";\n       \
    \ return 1;\n    } elsif ($date =~ /^\\d\\d?[-\\/]\\d\\d?[-\\/](\\d{4})$/) {\n\
    \        $date = \"$1$2\";\n        return 1;\n    } else {\n        return '';\n\
    \    }\n}", '    $date ||= "";', "    return '' unless $date;\n    my($month,$day,$year)\
    \ = split('-',$date);\n    my($days_in_month,$days_in_year);\n    my($valid) =\
    \ 1;\n    my($valid_month) = 1;\n    my($valid_day) = 1;\n    my($valid_year)\
    \ = 1;\n    \n    # day check\n    if($day >= 1 && $day <= 31) {\n        $valid_day\
    \ = 1;\n    }\n    else {\n        $valid_day = 0;\n    }\n    \n    # month check\n\
    \    if($month >= 1 && $month <= 12) {\n        $valid_month = 1;\n    }\n   \
    \ else {\n        $valid_month = 0;\n    }\n    \n    # year check\n    if($year\
    \ >= 1900 && $year <= 2030) {\n        $valid_year = 1;\n    }\n    else {\n \
    \       $valid_year = 0;\n    }\n    \n    # check if all rules are satisfied\n\
    \    if($valid_day == 1 && $valid_month == 1 && $valid_year == 1) {\n        return\
    \ 1;\n    }\n    else {\n        return '';\n    }\n}", "    return '' if ($date\
    \ eq '');", "    $date = lc($date);\n    if($date =~ /(?:^\\s*|\\s*$)/g){\n  \
    \      return '';\n    }\n    if($date =~ /(?:^\\d{1,2}-\\d{1,2}-\\d{1,4})$/g){\n\
    \        my $days = 0;\n        my ($month, $day, $year) = (0, 0, 0);\n      \
    \  $day =~ /^([0-2]\\d|3[01])$/;\n        $day++ if ($day < 1 && $day > 30);\n\
    \        $month =~ /^(?:1|2|3|4|5|6|7|8|9|10|11|12)$/;\n        $month++ if ($month\
    \ < 1 || $month > 12);\n        $year++ if ($year < 1);\n        $days += $day;\n\
    \        $days += ($month <= 2) ? 29 : 28;\n        $days += $year;\n        return\
    \ 1 if ($days >= 1 && $days <= 31);\n        return 1 if ($days >= 41 && $days\
    \ <= 59);\n        return 1 if ($days >= 61 && $days <= 90);\n        return 1\
    \ if ($days >= 101 && $days <= 122);\n        return '';\n    }\n    return '';\n\
    }", "    my($year, $month, $day) = split(/\\-/, $date);\n    my($days) = $month\
    \ < 1 ? 31 : $month < 3 ? 29 : 30;\n    my($month, @days) = split('\\D', $month);\n\
    \    my($day, $year) = $day < 1 ? 29 : $day < 3 ? 30 : 31;\n    my($year) = $year\
    \ < 1 ? '19' + $year : $year;\n    my($months) = $month < 1 ? 12 : $month < 3\
    \ ? 6 : 9;\n    my($months) = $months < 1 ? $month : $months;\n    $day <1 ||\
    \ $day > $days || $month < 1 || $month > $months || $year < 1 || $year > $years\
    \ || $day < 1 || $day > $day || $day > 31 || ($day > 30 && $day < 60) || $day\
    \ > 30;\n    return $day < 1 ? 1 : '';\n}", "    chomp($date);\n    $date =~ s/^\\\
    s+//;\n    if ($date eq '') {\n       return 1;\n    }\n    # remove all spaces\
    \ and dash from the date string to leave only the numbers\n    my @date = split(//,\
    \ $date);\n    \n    \n    \n    # check the month\n    return '' if ($date[0]\
    \ <= 12 or $date[0] >= 1);\n    \n    # check the day in the month\n    return\
    \ '' if ($date[1] <= 31 or $date[1] >= 30);\n    \n    # check the year\n    return\
    \ '' if ($date[2] <= 9999 or $date[2] >= 1900);\n    \n    return 1;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nPlease add some explanation to your answer, and include\
    \ some sample code so people can see how it's done.\n<|/ c |>\n<| c |>\n- I am\
    \ having difficulty understanding what you are saying\n<|/ c |>\n<| c |>\nI mean\
    \ that people who are new to this site might misinterpret your answer. When I\
    \ first read your answer, I thought you were asking people to explain how they\
    \ should implement the function. That is why I asked you to add some explanation,\
    \ and also why you chose the specific functions instead of writing your own subroutine\
    \ that did this same thing which I did below.\n<|/ c |>\n<| c |>\n- Ok thanks\
    \ for explaining. I will add an explanation.\n<|/ c |>\n<| a tags=date,validation,perl,datetime,regex\
    \ |>\nI suggest using DateTime::Format::DateManip (which includes several other\
    \ formatting modules available) to parse and validate your dates. You will need\
    \ to install that module using CPAN or via some other means. DateTime::Format::DateManip\
    \ is available on any recent Perl distribution. For example, on my machine I have\
    \ it installed with:\n<code>\ncpan DateTime::Format::DateManip\n</code>\nThen,\
    \ in your program, you can do this:\n<code>\nuse DateTime::Format::DateManip qw(parse_date);",
  '    return undef unless ($date);', "    my($year, $month, $day) = split (/\\-/,\
    \ $date);\n    $month = $month - 1;\n    $day -= 1;\n    $year += 1900;\n    if\
    \ ($month > 12) { $year -= 1900; $month -= 12; }\n    if ($month < 1 || $day <\
    \ 1 ||\n        ($day > 31 && $month > 1) ||\n        ($day > 30 && $month ==\
    \ 2) ||\n        ($day > 29 && $month == 4) ) {\n        return '';\n    }\n \
    \   return 1;\n}", '    return $date if !defined($date) || length($date) < 1 ||
    length($date) > 31;', "    return 1 if ( !defined $date || !length($date) || $date\
    \ =~ /^([0][1-9]|[12][0-9]|3[01])\\-(0?[1-9]|1[012])\\-(20[0-9]{2}|19[0-9]{2})$/\
    \ );\n    return \"\";\n}", "    return 1 if ($date ne '');", "    return '' if\
    \ ($date eq '');", "    if($date eq '') {\n        return '';\n    }\n    my ($day,\
    \ $month, $year) = split /\\-/, $date;\n    # check if year is leap year\n   \
    \ if($year % 4 == 0) {\n        if($year % 100 == 0) {\n            if($year %\
    \ 400 == 0) {\n                my $leap = '1';\n            } else {\n       \
    \         $leap = '0';\n            }\n        } else {\n            $leap = '1';\n\
    \        }\n    } else {\n        $leap = '0';\n    }\n    if($day < 1 || $day\
    \ > 29) {\n        return '';\n    }\n    if($month < 1 || $month > 12) {\n  \
    \      return '';\n    }\n    if($leap == '1') {\n        if($month == 4 || $month\
    \ == 6 || $month == 9 || $month == 11) {\n            if($day >= 1 && $day <=\
    \ 29) {\n                return 1;\n            } else {\n                return\
    \ '';\n            }\n        }\n    }\n    if($month == 2) {\n        if($day\
    \ >= 1 && $day <= 28) {\n            return 1;\n        } else {\n           \
    \ return '';\n        }\n    }\n    if($month == 1 || $month == 3 || $month ==\
    \ 5 || $month == 7 || $month == 8 || $month == 10 || $month == 12) {\n       \
    \ if($day >= 1 && $day <= 31) {\n            return 1;\n        } else {\n   \
    \         return '';\n        }\n    }\n    if($month == 4 || $month == 6 || $month\
    \ == 9 || $month == 11) {\n        if($day >= 1 && $day <= 30) {\n           \
    \ return 1;\n        } else {\n            return '';\n        }\n    }\n    return\
    \ 0;\n}", "    return 1 if $date eq '';\n    my %months = (1 => 1, 3 => 3, 5 =>\
    \ 5, 7 => 7, 8 => 8, 10 => 10, 12 => 12);\n    my %days   = (1 => 31, 3 => 30,\
    \ 5 => 29, 7 => 28, 8 => 27, 10 => 26, 12 => 25);\n    return 1 if $date =~ /^\\\
    s*$/;\n    return '' if $date =~ /^\\s*(-|\\.|\\/)\\s*(31|30|29|28|27|26|25)\\\
    s*$/;\n    my $days_in_month = ${$months{$_}};\n    return '' if $date =~ /^(\\\
    d\\d-\\d\\d-\\d\\d)$/;\n    my $day_in_year = $date =~ /^(\\d\\d)-(\\d\\d)-(\\\
    d\\d)$/;\n    return '' if $date =~ /^(\\d\\d)\\-(\\d\\d)\\-(\\d\\d)$/;\n    my\
    \ $month = $date =~ /^(\\d\\d)\\-(\\d\\d)$/;\n    return '' if $day > $days_in_month\
    \ || $month > 12;\n    return '' if $date =~ /^(\\d\\d)\\-(\\d\\d)-(\\d\\d)$/;\n\
    \    return 1;\n}", "    return \"\" if !$date or $date =~ /^\\s*$/;\n    $date\
    \ =~ /[/-]/;\n    ($year, $month, $day) = split($date, '-');\n    return \"\"\
    \ if $year < 1 or $year > 9999 or $month < 1 or $month > 12 or $day < 1 or $day\
    \ > 31 || ($month == 2 && $day > 29);\n    return $date;\n}\n</code>\n<|/ a tags=perl\
    \ dscore=1 |>\n<| c |>\nPlease consider adding some explanation to your code.\
    \ Stack Overflow is about learning, and this answer would benefit from it.\n<|/\
    \ c |>\n<| a tags=perl |>\nI suggest you check out the Perl module DateTime. \n\
    It is a core module that is part of the standard Perl distribution, so it is already\
    \ installed.\nThe DateTime module provides classes and methods for handling date\
    \ and time, and it has a simple interface that can parse many different date formats.\n\
    Here is an example showing how to parse a date using a custom format string, and\
    \ extract the date:\n<code>\nuse strict;\nuse warnings;", "    chomp($date);\n\
    \    \n    #1 The date string is not empty.\n    my $dateString = $date;\n   \
    \ chomp($dateString);\n    \n    #2 The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    return 1 if $dateString\
    \ =~ /^\\s*$|(^\\s*[1-3]{3}\\s[0-2]?[1-9]|[1]{3}-[0-3]{2})$|^\\s*$|(^\\s*[4-6]{3}\\\
    s[0-2]?[1-9]|[1]{3}-[0-3]{2})$|^\\s*$|(^\\s*[7-9]{3}\\s[0-2]?[1-9]|[1]{3}-[0-3]{2})$|^\\\
    s*$|(^\\s*[10-12]{3}\\s[0-2]?[1-9]|[1]{3}-[0-3]{2})$|^\\s*$|(^\\s*[12]{3}\\s[0-2]?[1-9]|[1]{3}-[0-3]{2})$/;\n\
    \    \n    #3 The months should not be less than 1 or higher than 12.\n    return\
    \ 1 if $dateString =~ /^\\s*$|(^\\s*1[0-2]|[1-2][0-9]|3[0-1]|[1-9]\\d)$|^\\s*$|(^\\\
    s*0?[12]\\d|[1-2][0-8])$/;\n    \n    #4 The date should be in the format: mm-dd-yyyy\n\
    \    return 1 if $dateString =~ /^[0-2]{1}[0-9]{1}-[0-2]{1}[0-9]{1}-[0-2]{1}[0-9]{4}$/;\n\
    \    return 1;\n}", "    return 1 if ($date =~ /^$/ || ! (length($date) > 0 &&\
    \ $date =~ /-/));\n    my $month = substr($date, 4, 2);\n    my $day = substr($date,\
    \ 6, 2);\n    my $year = substr($date, 0, 4);\n    return (1 if ($month <= 12\
    \ && $day <= 31 && $year <= 9999 && $year >= 0);\n    \"Invalid date\";\n}", " \
    \   my $err = \"\";\n    \n    $date =~ tr/\\n/ /;\n    \n    if ($date eq \"\"\
    ) {\n        $err = \"Date is empty\";\n    }\n    \n    if ($date =~ /^\\s*$/)\
    \ {\n        $err = \"Date is empty\";\n    }\n    \n    if ($date =~ /[^0123][0-9]\\\
    -[0123][0-9]\\-[012][0-9][0-9][0-9]/ || $date =~ /[^0123][0-9]\\/[0123][0-9]\\\
    /[012][0-9][0-9][0-9]/ || $date =~ /[012][0-9][0-9]\\-[0123][0-9]\\-[012][0-9][0-9][0-9]/\
    \ || $date =~ /[012][0-9][0-9]\\/[0123][0-9]\\/[012][0-9][0-9][0-9]/) {\n    \
    \    $err = \"Date is not valid\";\n    }\n    \n    if ($date =~ /(0[1-9]|1[0-2])\\\
    /(0[1-9]|1\\d|2\\d|3[01])/) {\n        $err = \"Date is not valid\";\n    }\n\
    \    \n    if ($date =~ /(0[1-9]|1[0-2])\\-(0[1-9]|1\\d|2\\d|3[01])/) {\n    \
    \    $err = \"Date is not valid\";\n    }\n    \n    if ($date =~ /(0[1-9]|1[0-2])\\\
    /(0[1-9]|1[0-2])\\/((19|20)\\d\\d)/) {\n        $err = \"Date is not valid\";\n\
    \    }\n    \n    return $err if $err;\n    \n    return 1;\n}", "    my(@months)\
    \ = qw(1 3 5 7 8 10 12);\n    my(@valid_months) = qw(1 4 6 9 11);\n    my(@days)\
    \ = qw(1 2 3 4 5 6 7);\n    my(@valid_days) = qw(1 2 3 4 5 6 7 8 9 10 11 12);\n\
    \    my(@months_end) = qw(1 3 5 7 8 10 12 01 02 03 04 05 06 07 08 09 10 11 12);\n\
    \    my(@days_end) = qw(31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14\
    \ 13 12 11 10 09 08 07 04 03 02 01);\n    my(@years) = qw(2000 2001 2002 2003\
    \ 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017);\n  \
    \  my(@valid_years) = qw(2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010\
    \ 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020);\n    \n    # date must be\
    \ specified\n    if ( ! $date) {\n        die \"Please specify a valid date. Usage:\
    \ $0 date\";\n    }\n    \n    # date must be of the format mm-dd-yyyy\n    if\
    \ ( ! $date =~ /^(\\d{2}-\\d{2}-\\d{4})$/) {\n        die \"The date must be in\
    \ the format: mm-dd-yyyy. Usage: $0 date\";\n    }\n    \n    # date should be\
    \ in the range 1 through 31\n    if ( ! $date =~ /^(1[012]|0?[1-9])-(3[01]|0?[1-9])-(\\\
    d{4})$/) {\n        die \"The date should be in the range 1 through 31. Usage:\
    \ $0 date\";\n    }\n    \n    # number of days must be within the range 1 through\
    \ 31\n    if ( ! ($date =~ /(^1[0-31]$)|(^[0-2]\\d$)|(^3[01]\\d$)/i) ) {\n   \
    \     die \"The number of days must be within the range 1 through 31. Usage: $0\
    \ date\";\n    }\n    \n    # date should be valid for the month\n    if ( ! grep($date\
    \ =~ /(^\\d{1,2}$)|(^\\d{2}$)|(^\\d{3}$)|(^\\d{4}$)/, @months)) {\n        die\
    \ \"The date must be valid for the month. Usage: $0 date\";\n    }\n    \n   \
    \ # date should be valid for the ", "    chomp($date);\n    \n    # Check if the\
    \ string is empty\n    if ($date eq '') {\n        return '';\n    }", "    my(@date)\
    \ = split('-',$date);", "    \n    # 1\n    if($date eq '') {\n        return\
    \ \"1\";\n    }\n    \n    # 2\n    if($date =~ m/^([1-9]|0[1-9]|[12][0-9]|3[01])\\\
    -(0[1-9]|1[012])\\-(19|20)\\d\\$/) {\n        my $year = $+{year};\n        my\
    \ $month = $+{month};\n        my $day = $+{day};\n        my $check_day = 1;\n\
    \        my $check_month = -1;\n        my $check_year = -1;\n        if($month\
    \ =~ m/0[1-9]|[12][0-9]|3[01]/) {\n            $check_day = -1;\n            $check_month\
    \ = -1;\n        }\n        if($day =~ m/0[1-9]|1[012]/) {\n            $check_day\
    \ = -1;\n        }\n        if($year =~ m/19|20\\d\\d/) {\n            $check_year\
    \ = -1;\n        }\n        if(($day > 31) || ($day < 1) || ($month > 12) || ($month\
    \ < 1) || ($year > 99) || ($year < 1) || ($day > 29) || ($day < 1)) {\n      \
    \      $check_day = -1;\n            $check_month = -1;\n            $check_year\
    \ = -1;\n        }\n        if(($day > 30) || ($day < 1) || ($month > 12) || ($month\
    \ < 1) || ($year > 99) || ($year < 1) || ($day > 29) || ($day < 1)) {\n      \
    \      $check_day = -1;\n            $check_month = -1;\n            $check_year\
    \ = -1;\n        }\n        if($check_day == -1) {\n            return \"1\";\n\
    \        }\n        if($check_month == -1) {\n            $check_month = -1;\n\
    \        }\n        if($check_year == -1) {\n            $check_year = -1;\n \
    \       }\n        if($month == 2) {\n            $check_month = 31;\n       \
    \ }\n        if($check_month == 1 && (($year + $day) > 29)) {\n            return\
    \ \"1\";\n        }\n        if($month == 3) {\n            $check_month = 30;\n\
    \        }\n        if($check_month == 4 && (($year + $day) > 30)) {\n       \
    \     return \"1\";\n        }\n        if($month == 5) {\n            $check_month\
    \ = 31;\n        }\n        if($check_month == 6 && (($year + $day) > 31)) {\n\
    \            return \"1\";\n        }\n        if($month == 7) {\n           \
    \ $check_month = 31;\n        }\n        if($check_month == 8 && (($year + $day)\
    \ > 31)) {\n            return \"1\";\n        }\n        if($month == 9) {\n\
    \            $check_month = 30;\n        }\n        if($check_month == 10 && (($year\
    \ + $day) > 30)) {\n            return \"1\";\n        }\n        if($month ==\
    \ 11) {\n            $", "    $date =~ s/^\\s+//;\n    $date =~ s/\\s+$//;\n \
    \   \n    my($day,$month,$year) = $date =~ m/(\\d+)-(\\d+)-(\\d+)/g;\n    \n \
    \   $day = $day ? $day : 1;\n    $month = $month ? $month : 1;\n    $year = $year\
    \ ? $year : 2000;\n    \n    if (($year > 3000) or ($month > 12) or ($day > 29)\
    \ or ($month < 1) or ($day < 1) or \n        (($month == 2 and $day >= 31) or\
    \ ($month == 1 and $day >= 31) or ($month == 1 and $day <= 30) or ($month == 3\
    \ && $day >= 31) or ($month == 0 and $day >= 30) or ($month == 4 && $day >= 29))\n\
    \    ) {\n       return \"\";\n    }\n    \n    return 1;\n}", '    my $valid
    = 1;', "    my @months = (1,3,5,7,8,10,12);\n    my @days = (1,29,30,31,31,30,31,30,31);\n\
    \    # Check if date is empty\n    my $empty = '';\n    if ($date eq '') {\n \
    \       $empty = 1;\n    }\n    elsif ($date ne '0000-00-00') {\n        return\
    \ $date;\n    }", '    return 1 if (length($date) == 0);', "    my($day,$month,$year)\
    \ = split(\" \",$date);\n    my($m1,$m2,$m3,$m4,$m5,$m6,$m7,$m8,$m9,$m10,$m11,$m12,$y1,$y2,$y3,$y4,$y5)\
    \ = split(\"-\",$month);\n    my($day1,$day2,$day3,$day4,$day5,$day6,$day7,$day8,$day9,$day10,$day11,$day12,$y1,$y2,$y3,$y4,$y5)\
    \ = split(\"-\",$year);\n    my($day1,$day2,$day3,$day4,$day5,$day6,$day7,$day8,$day9,$day10,$day11,$day12,$y1,$y2,$y3,$y4,$y5)\
    \ = split(\"\",$month);\n    $month[0] = 0;\n    $day[1] = 0;\n    $year[2] =\
    \ 0;\n    $y1 = $y2 =\n    $y3 = $y4 =\n    $y5 = 0;\n    if (($year[0] > 0) &&\
    \ ($year[1] > 0) && ($year[2] > 0) &&\n       ($month[0] > 0) && ($month[1] >\
    \ 0) && ($month[2] > 0) &&\n       ($day[0] > 0) && ($day[1] > 0) && ($day[2]\
    \ > 0) &&\n       ($day[3] > 0) && ($day[4] > 0) && ($day[5] > 0) &&\n       ($day[6]\
    \ > 0) && ($day[7] > 0) && ($day[8] > 0) &&\n       ($day[9] > 0) && ($day[10]\
    \ > 0) && ($day[11] > 0) &&\n       ($day[12] > 0) && ($day[3] > 0) && ($day[4]\
    \ > 0) && ($day[5] > 0) &&\n       ($day[6] > 0) && ($day[7] > 0) && ($day[8]\
    \ > 0) &&\n       ($day[9] > 0) && ($day[10] > 0) && ($day[11] > 0) &&\n     \
    \  ($day[12] > 0) && ($day[3] > 0) && ($day[4] > 0) && ($day[5] > 0) &&\n    \
    \   ($day[6] > 0) && ($day[7] > 0) && ($day[8] > 0) &&\n       ($day[9] > 0) &&\
    \ ($day[10] > 0) && ($day[11] > 0) &&\n       ($day[12] > 0)) {\n        if ($day[3]\
    \ > $day[4]) {\n            if ($day[3] > $day[5]) {", "    return '' unless $date;\n\
    \    $date =~ /^\\d\\d-\\d\\d-\\d\\d\\d\\d$/;\n    # Not sure how we would test\
    \ the months - but we could loop over all valid months\n    # and see if any date\
    \ falls into a valid month.\n    return 1 unless $date =~ /^\\d\\d-\\d\\d-\\d\\\
    d$/;\n    my ($m, $d, $y) = split(/-/, $date);\n    return '' unless $m =~ /^\\\
    d\\d$/;\n    return '' unless $d =~ /^\\d\\d$/;\n    return '' unless $y =~ /^\\\
    d\\d\\d\\d$/;\n    my $is_valid = 1;\n    if ( $m >= 12 ) {\n        return '';\n\
    \    }\n    if ( $m < 1 ) {\n        $m = 1;\n        $is_valid &= 0;\n    }\n\
    \    elsif ( $m > 12 ) {\n        $m = 12;\n        $is_valid &= 0;\n    }\n \
    \   if ( $d >= 31 ) {\n        return '';\n    }\n    if ( $d < 1 ) {\n      \
    \  $d = 1;\n        $is_valid &= 0;\n    }\n    elsif ( $d > 31 ) {\n        $d\
    \ = 31;\n        $is_valid &= 0;\n    }\n    if ( $y >= 2018 ) {\n        return\
    \ '';\n    }\n    if ( $y < 1 ) {\n        $y = 2018;\n        $is_valid &= 0;\n\
    \    }\n    elsif ( $y > 2018 ) {\n        $y = 2013;\n        $is_valid &= 0;\n\
    \    }\n    return $is_valid;\n}", "    my $valid_date = 0;\n    my $month = substr($date,6,2);\n\
    \    my $day = substr($date,8,2);\n    my $year = substr($date,0,4);\n    if($month\
    \ !~ /^([0-9]{2})$/){\n        $valid_date = 0;\n    }\n    elsif($day !~ /^([0-9]{1,2})$/){\n\
    \        $valid_date = 0;\n    }\n    elsif($month < 1 || $month > 12){\n    \
    \    $valid_date = 0;\n    }\n    elsif($day < 1 || $day > 30){\n        $valid_date\
    \ = 0;\n    }\n    elsif($month == 2){\n        if($day > 29){\n            $valid_date\
    \ = 0;\n        }\n    }\n    if($valid_date == 1){\n        return 1;\n    }\n\
    \    return \"\";\n}", "    if($date !~ /^\\s*$/){\n        return 1;\n    }\n\
    \    $date =~ /^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})/;\n    if($3 > 12 || $3 <\
    \ 1 || $2 > 12 || $2 < 1 || $1 > 31 || $1 < 31){\n        return '';\n    }\n\
    \    if($2 == 2){\n        $date =~ /^([0-9]{1,2})-(0?[1-9]|1[012])-([0-9]{4})/;\n\
    \        if($3 > 31 || $3 < 1 || $2 > 31 || $2 < 1 || $1 > 31){\n            return\
    \ '';\n        }\n    }\n    if($2 == 1){\n        $date =~ /^(0?[1-9]|1[012])-([0-9]{1,2})-([0-9]{4})/;\n\
    \        if($3 > 30 || $3 < 1 || $2 > 30 || $2 < 1 || $1 > 29){\n            return\
    \ '';\n        }\n    }\n    if($2 == 4){\n        $date =~ /^(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])-([0-9]{4})/;\n\
    \        if($3 > 29 || $3 < 1 || $2 > 29 || $2 < 1 || $1 > 28){\n            return\
    \ '';\n        }\n    }\n    if($2 == 6){\n        $date =~ /^(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])-(0?[1-9]|[1-2][0-9]|3[0-1])/;\n\
    \        if($3 > 28 || $3 < 1 || $2 > 28 || $2 < 1 || $1 > 27){\n            return\
    \ '';\n        }\n    }\n    if($2 == 9){\n        $date =~ /^(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])-(0?[1-9]|[1-2][0-9]|3[0-1])/;\n\
    \        if($3 > 27 || $3 < 1 || $2 > 27 || $2 < 1 || $1 > 26){\n            return\
    \ '';\n        }\n    }\n    if($2 == 11){\n        $date =~ /^(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])-(0?[1-9]|[1-2][0-9]|3[0-1])/;\n\
    \        if($3 > 26 || $3 < 1 || $2 > 26 || $2 < 1 || $1 > 25){\n            return\
    \ '';\n        }\n    }\n    if($2 == 12){\n        $date =~ /^(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])-(0?[1-9]|[1-2][0-9]|3[0-1])/;\n\
    \        if($3 > 25 || $3 < 1 || $2 > 25 || $2 < 1 || $1 > 24){\n", "    if(!defined\
    \ $date) {\n        return '';\n    }\n    my $month = $1;\n    my $day = $2;\n\
    \    my $year = $3;\n    if($month > 12 || $month < 1) {\n        return '';\n\
    \    }\n    if($day < 1 || $day > 30) {\n        return '';\n    }\n    if($day\
    \ == 29 && $month == 2) {\n        return '';\n    }\n    if($day > 30) {\n  \
    \      return '';\n    }\n    if($day == 31) {\n        if($month == 12) {\n \
    \           return '';\n        }\n        if($month == 2) {\n            return\
    \ 1;\n        }\n    }\n    if($day == 31) {\n        if($month == 3) {\n    \
    \        return '';\n        }\n        if($month == 1) {\n            return\
    \ 1;\n        }\n    }\n    if($day == 30) {\n        if($month == 3) {\n    \
    \        return '';\n        }\n        if($month == 2) {\n            return\
    \ 1;\n        }\n    }\n    if($day == 31) {\n        if($month == 2) {\n    \
    \        return '';\n        }\n        if($month == 1) {\n            return\
    \ 1;\n        }\n    }\n    if($day == 30) {\n        if($month == 2) {\n    \
    \        return '';\n        }\n        if($month == 1) {\n            return\
    \ 1;\n        }\n    }\n    if($day == 31) {\n        if($month == 1) {\n    \
    \        return '';\n        }\n        if($month == 2) {\n            return\
    \ 1;\n        }\n    }\n    if($day == 30 && $month == 2) {\n        return '';\n\
    \    }\n    if($day > 31) {\n        return '';\n    }\n    if($day == 31) {\n\
    \        if($month == 12) {\n            return '';\n        }\n        if($month\
    \ == 2) {\n            return 1;\n        }\n    }\n    if($day == 30) {\n   \
    \     if($month == 3) {\n            return '';\n        }\n        if($month\
    \ == 1) {\n            return 1;\n        }\n    }\n    if($day == 31) {\n   \
    \     if($month == 1) {\n            return '';\n        }\n        if($month\
    \ == 2) {\n            return 1;\n        }\n    }\n    if($day == 30) {\n   \
    \     if($month == 3) {\n            return '';\n        }\n        if($month\
    \ == 1) {\n            return 1;\n        }\n    }\n    if($day == 31) {\n   \
    \     if($month == 2) {\n            return '';\n        }\n        if($month\
    \ == 1) {\n            return 1;\n        }\n    }\n    if($day == 31) {\n   \
    \     if($month == 1) {\n            return '';\n        }\n        if($month\
    \ == 2) {\n            return 1;\n        }\n    }\n    if($day > 30) {\n    \
    \    return '';\n    }\n    if($day == 31) {\n        if($month == 12", "    \n\
    \    # Check for empty string and return 1 if empty.\n    if($date eq \"\") {\
    \ return 1; }", "    return '' if ($date eq '');\n    \n    my($days,$month,$year)\
    \ = split('-',$date);\n    $month = ($month < 1) ? 1 : $month;\n    $month = ($month\
    \ > 12) ? 12 : $month;\n    $year = ($year < 1) ? $year + 1 : $year;\n    $year\
    \ = ($year > 3000) ? $year + 1 : $year;\n    $days = ($DAYS < 1) ? $DAYS + 1 :\
    \ $DAYS;\n    $days = ($DAYS > 30) ? $DAYS : $DAYS;\n    $month = ($MONTHS < 1)\
    \ ? $MONTHS + 1 : $MONTHS;\n    $month = ($MONTHS > 12) ? $MONTHS : $MONTHS;\n\
    \    \n    my(@days_in_month) = ();\n    for (my $i = 1; $i <= $month; $i++) {\n\
    \        push(@days_in_month, $i);\n    }\n    \n    my(@days_in_year) = ();\n\
    \    for (my $i = 1; $i <= $year; $i++) {\n        push(@days_in_year, $i);\n\
    \    }\n    \n    my(@bad_dates) = ();\n    if ($days_in_month[$month-1] + $days\
    \ > 31) {\n        push(@bad_dates,\"31\");\n    }\n    if ($days_in_month[$month-1]\
    \ + $days > 30) {\n        push(@bad_dates,\"30\");\n    }\n    \n    if ($days_in_month[$month-1]\
    \ + $days > 29) {\n        push(@bad_dates,\"29\");\n    }\n    \n    if ($days_in_year[$year-1]\
    \ + $days > 365) {\n        push(@bad_dates,\"365\");\n    }\n    \n    if (scalar(@bad_dates)\
    \ == 0) {\n        return 1;\n    }\n    \n    return '';\n}", "    $date =~ s/^\\\
    s*|\\s*$//g;\n    if ($date =~ /^\\s*$/)\n    {\n        return '';\n    }\n \
    \   elsif ($date !~ /^(\\d{1,2})\\-(\\d{1,2})\\-(\\d{4})$/) {\n        return\
    \ '';\n    }\n    elsif ($date !~ /^((0?[1-9])|(1[0-2]))\\-((0?[1-9])|([1-2][0-9])|(3[0-1]))\\\
    -((19|20)\\d\\d)$/) {\n        return '';\n    }\n    else {\n        return 1;\n\
    \    }\n}", "    return '' if ($date eq '');\n    my @day = (split '-', $date);\n\
    \    my $day = $day[0];\n    my $month = $day[1];\n    my $year = $day[2];\n \
    \   return '' if ($day eq '0'); # date without day\n    return '' if ($month eq\
    \ '0'); # date without month\n    my $mm = 12 * ($year - 1901 + $month - 1);\n\
    \    if ($mm < 1 || $mm > 12){\n        return '';\n    }\n    my $dd = 31 * ($year\
    \ - 1901 + $month - 1) + $day - 1;\n    if ($dd < 1 || $dd > 31){\n        return\
    \ '';\n    }\n    if ($month == 12){\n        $month = 1;\n        $year++;\n\
    \    }\n    return $mm;\n}", "    if ( ! $date) { \n        return '';\n    }\n\
    \    chomp($date);\n    if ( ! length($date)) {\n        return '';\n    }\n \
    \   my @date;\n    my @year;\n    my @month;\n    my @day;\n    my($day,$month,$year,$dateLength);\n\
    \    if ( $date =~ /-/ ) { # split date by - and get day, month and year\n   \
    \     ($dateLength,$day,$month,$year) = split(/\\-/,$date,-1);\n    } \n    else\
    \ { # split date by / and get day, month and year\n        ($dateLength,$day,$month,$year)\
    \ = split(/\\//,$date,-1);\n    }\n    if ( length($day) < 1 ) { \n        return\
    \ '';\n    }\n    if ( length($month) < 1 ) { \n        return '';\n    }\n  \
    \  if ( length($year) < 1 ) { \n        return '';\n    }\n    if ( $day > 29\
    \ ) { \n        return '';\n    }\n    if ( $month > 12 ) { \n        return '';\n\
    \    }\n    if ( $month < 1 ) {\n        return '';\n    }\n    if ( $day < 1\
    \ ) {\n        return '';\n    }\n    if ( $month == 2 && $day < 29 ) {\n    \
    \    return '';\n    }\n    if ( $month == 3 && $day > 31 ) {\n        return\
    \ '';\n    }\n    if ( $month == 4 && $day > 30 ) {\n        return '';\n    }\n\
    \    if ( $month == 5 && $day > 31 ) {\n        return '';\n    }\n    if ( $month\
    \ == 6 && $day > 30 ) {\n        return '';\n    }\n    if ( $month == 7 && $day\
    \ > 31 ) {\n        return '';\n    }\n    if ( $month == 8 && $day > 31 ) {\n\
    \        return '';\n    }\n    if ( $month == 9 && $day > 31 ) {\n        return\
    \ '';\n    }\n    if ( $month == 10 && $day > 31 ) {\n        return '';\n   \
    \ }\n    if ( $month == 11 && $day > 31 ) {\n        return '';\n    }\n    if\
    \ ( $month == 1 && $day > 31 ) {\n        return '';\n    }\n    if ( $month ==\
    \ 1 && $day > 30 ) {\n        return '';\n    }\n    if ( $month == 3 && $day\
    \ > 31 ) {\n        return '';\n    }\n    if ( $month == 5 && $day > 31 ) {\n\
    \        return '';\n    }\n    if ( $month == 7 && $day > 31 ) {\n        return\
    \ '';\n    }\n    if ( $month == 9 && $day > 31 ) {\n        return '';\n    }\n\
    \    if ( $month == 11 && $day > 31 ) {\n        return '';\n    }\n    return\
    \ 1;\n}", "    my ($day, $month, $year) = $date =~ /^([0-9]+)\\-([0-9]+)\\-([0-9]+)$/;\n\
    \    my $days_in_month = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n \
    \   if ($days_in_month[$month] > $day + 1) {\n        return \"\";\n    }\n  \
    \  if ($days_in_month[$month] == 1) {\n        return 1;\n    }\n    if (($month\
    \ == 2) & ($day < 1)) {\n        return \"\";\n    }\n    if (($month == 2) &\
    \ ($day > 29)) {\n        return \"\";\n    }\n    if (($month == 1) & ($day <\
    \ 1)) {\n        return \"\";\n    }\n    if (($month == 1) & ($day > 12)) {\n\
    \        return \"\";\n    }\n    if (($year % 4) == 0 & ($year % 100) != 0) {\n\
    \        return 1;\n    }\n    if (($year % 4) == 0 & ($year % 100) != 0) {\n\
    \        return \"\";\n    }\n    if (($year % 4) == 0) {\n        return 1;\n\
    \    }\n    if (($year % 4) == 0) {\n        return \"\";\n    }\n    if (($year\
    \ % 100) == 0 & ($year % 400) == 0) {\n        return 1;\n    }\n    if (($year\
    \ % 100) == 0 & ($year % 400) == 0) {\n        return \"\";\n    }\n    if (($year\
    \ % 100) == 0) {\n        return 1;\n    }\n    if (($year % 100) == 0) {\n  \
    \      return \"\";\n    }\n    if (($year % 400) == 0 & ($year % 100) == 0) {\n\
    \        return 1;\n    }\n    if (($year % 400) == 0 & ($year % 100) == 0) {\n\
    \        return \"\";\n    }\n    if (($year % 400) == 0) {\n        return 1;\n\
    \    }\n    if (($year % 400) == 0) {\n        return \"\";\n    }\n}", "    my\
    \ $day;\n    my $month;\n    my $year;\n    my $flag = 1;\n    $day = $date =~\
    \ tr/-/-/;\n    $month = $date =~ tr/-/-/;\n    $year = substr($date,0,4);", " \
    \   my $invalid = undef;\n    my ($day, %month) = ();", "    my($year,$month,$day)\
    \ = split(/\\-/,$date);\n    my($days_in_month,$days_in_month_days) = split(/\\\
    //,$month,2);", "    if($date eq \"\") {\n        return 1;\n    }\n    if($date\
    \ =~ /^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-[0-9]{4}$/) {\n        return\
    \ 1;\n    }\n    if($date =~ /^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\\/[0-9]{4}$/)\
    \ {\n        return 1;\n    }\n    if($date =~ /^(0[1-9]|1[0-2])\\/(0[1-9]|[12][0-9]|3[01])-[0-9]{4}$/)\
    \ {\n        return 1;\n    }\n    if($date =~ /^(0[1-9]|1[0-2])\\/(0[1-9]|[12][0-9]|3[01])\\\
    /[0-9]{4}$/) {\n        return 1;\n    }\n    if($date =~ /^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[0-2])$/)\
    \ {\n        return 1;\n    }\n    if($date =~ /^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\\\
    /(0[1-9]|1[0-2])$/) {\n        return 1;\n    }\n    if($date =~ /^(0[1-9]|1[0-2])\\\
    /(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[0-2])$/) {\n        return 1;\n    }\n   \
    \ if($date =~ /^(0[1-9]|1[0-2])\\/(0[1-9]|[12][0-9]|3[01])\\/(0[1-9]|1[0-2])$/)\
    \ {\n        return 1;\n    }\n    if($date =~ /^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-(0[1-9]|[12][0-9]|3[01])$/)\
    \ {\n        return 1;\n    }\n    if($date =~ /^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\\\
    /(0[1-9]|[12][0-9]|3[01])$/) {\n        return 1;\n    }\n    if($date =~ /^(0[1-9]|1[0-2])\\\
    /(0[1-9]|[12][0-9]|3[01])-(0[1-9]|[12][0-9]|3[01])$/) {\n        return 1;\n \
    \   }\n    if($date =~ /^(0[1-9]|1[0-2])\\/(0[1-9]|[12][0-9]|3[01])\\/(0[1-9]|[12][0-9]|3[01])$/)\
    \ {\n        return 1;\n    }\n    if($date =~ /^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-(0[1-9]|[12][0-9]|3[01])(0[1-9]|1[0-2])$/)\
    \ {\n        return 1;\n    }\n    if($date =~ /^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\\\
    /(0[1-9]|[12][0-9]|3[01])(0[1-9]|1[0-2])$/) {\n        return 1;\n    }\n    if($date\
    \ =~ /^(0[1-9]|1[0-2])\\/(0[1-9]|[12][0-9]|3[01])(0", "    # Empty string check\n\
    \    return '' unless length($date);\n    # Months are greater than 12\n    if\
    \ ($date =~ /^([1-2][0-9])-(0[1-9]|1[0-2])-\\d{4}/) {\n        return 1;\n   \
    \ }\n    # Year is less than 1 or greater than 9999\n    return '' if ($date =~\
    \ /^[1-9]$/);\n    # Invalid format\n    return '';\n}", "    my (@months) = (\"\
    01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\");\n    my (@days) = (\"01\"\
    , \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"13\", \"14\", \"15\", \"16\"\
    , \"17\", \"18\", \"19\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\"\
    , \"28\", \"29\", \"30\", \"31\");", "    # If the date string is empty, return\
    \ ''.\n    return '' if $date eq '';\n    # If the date is invalid, return ''.\n\
    \    return '' if $date !~ /^((01|03|05|07|08|10|12)(\\-|/)[0-3]?[0-9](\\-|/)[1-2]?[0-9]{4})$/;\n\
    \    # If the number of days is not less than 1 but higher than 31, return ''.\n\
    \    return '' if $date !~ /^((01|03|05|07|08|10|12)(\\-|/)[1-3]?[0-9](\\-|/)[1-2]?[0-9]{4})$/;\n\
    \    # If the number of days is not less than 1 but higher than 30, return ''.\n\
    \    return '' if $date !~ /^((01|03|05|07|08|10|12)(\\-|/)[4-6]?[0-9](\\-|/)[1-2]?[0-9]{4})$/;\n\
    \    # If the number of days is not less than 1 but higher than 29, return ''.\n\
    \    return '' if $date !~ /^((01|03|05|07|08|10|12)(\\-|/)[7-8]?[0-9](\\-|/)[1-2]?[0-9]{4})$/;\n\
    \    # If the months are not less than 1 and higher than 12, return ''.\n    return\
    \ '' if $date !~ /^((01|03|05|07|08|10|12)(\\-|/)[2-9]?[0-9](\\-|/)[1-2]?[0-9]{4})$/;\n\
    \    # If the format is not mm-dd-yyyy, return ''.\n    return '' if $date !~\
    \ /^((01|03|05|07|08|10|12)(\\-|/)[0-1]?[0-9](\\-|/)[0-3]?[0-9](\\-|/)[1-2]?[0-9]{4})$/;\n\
    \    my $valid_date = 1;\n    return $valid_date;\n}", "    return '' unless $date;\n\
    \    my($year,$month,$day) = split /-/, $date;\n    return '' unless length($year)\
    \ and length($month) and length($day) and $month =~ /^[1-12]$/ and $day =~ /^[1-31]$/\
    \ and $day =~ /^[1-31]$/ and $day =~ /^[1-31]$/ and $day =~ /^[1-29]$/ and $day\
    \ =~ /^[1-29]$/;\n    return 1;\n}", "    return '' unless $date;\n    if ($date\
    \ !~/^\\s*$/) {\n        return '' if $date !~ /^0[1-9]|[1-2]\\d|3[0-1]\\-\\d\\\
    d?$/;\n        return '' if $date !~ /^0[1-9]|[1-2]\\d|3[0-1]\\-\\d\\d?$/;\n \
    \       return '' if $date !~ /^0[1-9]|[1-2]\\d|3[0-1]\\-\\d\\d?$/;\n        return\
    \ '' if $date !~ /^0[1-9]|[1-2]\\d|3[0-1]\\-\\d\\d?$/;\n        return '' if $date\
    \ !~ /^0[1-9]|[1-2]\\d|3[0-1]\\-\\d\\d?$/;\n        return '' if $date !~ /^0[1-9]|[1-2]\\\
    d|3[0-1]\\-\\d\\d?$/;\n        return '' if $date !~ /^0[1-9]|[1-2]\\d|3[0-1]\\\
    -\\d\\d?$/;\n        return '' if $date !~ /^0[1-9]|[1-2]\\d|3[0-1]\\-\\d\\d?$/;\n\
    \        return '' if $date !~ /^0[1-9]|[1-2]\\d|3[0-1]\\-\\d\\d?$/;\n       \
    \ return '' if $date !~ /^0[1-9]|[1-2]\\d|3[0-1]\\-\\d\\d?$/;\n        return\
    \ '' if $date !~ /^0[1-9]|[1-2]\\d|3[0-1]\\-\\d\\d?$/;\n        return '' if $date\
    \ !~ /^0[1-9]|[1-2]\\d|3[0-1]\\-\\d\\d?$/;\n        return '' if $date !~ /^0[1-9]|[1-2]\\\
    d|3[0-1]\\-\\d\\d?$/;\n        return '' if $date !~ /^0[1-9]|[1-2]\\d|3[0-1]\\\
    -\\d\\d?$/;\n        return '' if $date !~ /^0[1-9]|[1-2]\\d|3[0-1]\\-\\d\\d?$/;\n\
    \        return '' if $date !~ /^0[1-9]|[1-2]\\d|3[0-1]\\-\\d\\d?$/;\n       \
    \ return '' if $date !~ /^0[1-9]|[1-2]\\d|3[0-1]\\-\\d\\d?$/;\n        return\
    \ '' if $date !~ /^0[1-9]|[1-2]\\d|3[0-1]\\-\\d\\d?$/;\n        return '' if $date\
    \ !~ /^0[1-9]|[1-2]\\d|3[0-1]\\-\\d\\d?$/;\n        return '' if $date !~ /^0[1-9]|[1-2]\\\
    d|3[0-1]\\-\\d\\d?$/;\n        return '' if $date !~ /^0[1-9]|[1-2]\\d|3[0-1]\\\
    -\\d\\d?$/;\n        return '' if $date !~ /^0[1-9]|[1-2]\\d|3[0-1]\\-\\d\\d?$/;\n\
    \        return '' if $date !~ /^0[1-9]|[1-2]\\d|3[0-1]\\-\\d\\d?$/;\n       \
    \ return '' if $date !~ /^0[1-9]|[1-2]\\d|", "    return 1 if !$date;\n    my($day,\
    \ $month, $year) = split(/\\-/, $date);\n    return 1 unless !$day && !$month\
    \ && !$year;\n    my(@days) = ();\n    my(@months) = ();\n    my(@years) = ();\n\
    \    if ($day && $day =~ /^\\d+$/) {\n        push(@days, $day);\n    }\n    if\
    \ ($month && $month =~ /^\\d+$/) {\n        push(@months, $month);\n    }\n  \
    \  if ($year && $year =~ /^\\d+$/) {\n        push(@years, $year);\n    }\n  \
    \  my @not_valid = (@days, @months, @years);\n    for (@not_valid) {\n       \
    \ return 1 unless ($_ > 0 and $_ < 31);\n    }\n    for (@not_valid) {\n     \
    \   return 1 unless ($_ > 0 and $_ < 30);\n    }\n    for (@not_valid) {\n   \
    \     return 1 unless ($_ > 0 and $_ < 29);\n    }\n    if (@months == 12) {\n\
    \        push(@months, 1);\n    }\n    if (@months == 3) {\n        if (@months\
    \ == 12) {\n            push(@months, 2);\n        }\n    }\n    if (@months ==\
    \ 2 && @days == 29) {\n        push(@months, 1);\n    }\n    if (@months == 1)\
    \ {\n        push(@months, 2);\n    }\n    return 1;\n}", "    my ($year,$month,$day)\
    \ = split(/\\-/, $date);\n    if($month < 1 || $month > 12) {\n\treturn \"\";\n\
    \    }\n    if($day < 1 || $day > 31 || $day > $month) {\n\treturn \"\";\n   \
    \ }\n    if($day > 29 && $month == 2) {\n\treturn \"\";\n    }\n    return 1;\n\
    }", '    $date =~ /^\s*$/ or return "";', "    if($date =~ /^\\s*$/) {\n     \
    \   return 1;\n    }\n    if($date !~ /([0-9]{2}-[0-9]{2}-[0-9]{4})/) {\n    \
    \    return \"\";\n    }\n    my($day, $month, $year) = split('-',$date);\n  \
    \  if($month < 1 || $month > 12) {\n        return \"\";\n    }\n    if($day <\
    \ 1 || $day > 31 || $day > 30) {\n        return \"\";\n    }\n    if($month ==\
    \ 2) {\n        if($day > 29) {\n            return \"\";\n        }\n    }\n\
    \    return 1;\n}", "    chomp($date);\n    return 1 if $date eq '';", "    #\
    \ Your code here\n}", "    my($mm, $dd, $yyyy);\n    my($month, $day, $year) =\
    \ ($date =~ /^(\\d{1,2})-(\\d{1,2})-(\\d{4})/);\n    if ($month > 12) {\n    \
    \    return \"\";\n    }\n    if ($month == 1) {\n        if ($day == 0) {\n \
    \           return \"\";\n        }\n        if ($day == 1) {\n            return\
    \ 1;\n        }\n    }\n    if ($month == 3 or $month == 5 or $month == 7 or $month\
    \ == 8 or $month == 10 or $month == 12) {\n        if ($day == 0 or $day == 1\
    \ or $day == 31) {\n            return 1;\n        }\n    }\n    if ($month ==\
    \ 4 or $month == 6 or $month == 9 or $month == 11) {\n        if ($day == 0 or\
    \ $day == 1 or $day == 30) {\n            return 1;\n        }\n    }\n    if\
    \ ($month == 2 or $month == 2) {\n        if ($day == 0 or $day == 1 or $day ==\
    \ 29) {\n            return 1;\n        }\n    }\n    return \"\";\n}", "    return\
    \ 1 if ($date !~ /^\\s*$/);\n    $date =~ /^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/;\n\
    \    if ($1 !~ /^[1-9]$/) {\n        return '';\n    }\n    my $month = $1;\n\
    \    my $day = $2;\n    my $year = $3;\n    my $dateStr = $year . \"-\" . $month\
    \ . \"-\" . $day;\n    if ($day < 1 || $day > 29) {\n        return '';\n    }\n\
    \    if ($month < 1 || $month > 12) {\n        return '';\n    }\n    if ($day\
    \ > 31 || ($day == 31 && $month != 2 && $month != 4 && $month != 6 && $month !=\
    \ 9 && $month != 11)) {\n        return '';\n    }\n    if ($month == 2 && $day\
    \ > 29) {\n        return '';\n    }\n    return 1;\n}", "    \n    return 1 if\
    \ length $date == 0;\n    return 1 if $date !~ /^[0-9]{4}-[0-9]{2}-[0-9]{2}$/;\n\
    \    return 1 if $date =~ /^[0-3][0-9]/;\n    return 1 if $date =~ /^[0-1][0-9]/;\n\
    \    return 1 if $date =~ /^[0-3][0-9]/;\n    return 1 if $date =~ /^[0-2][0-9]/;\n\
    \    return 1 if $date =~ /^[0-3][0-9]/;\n    return 1 if $date =~ /^[0-2][0-9]/;\n\
    \    return 1 if $date =~ /^[0-3][0-9]/;\n    return 1 if $date =~ /^[0-2][0-9]/;\n\
    \    return 1 if $date =~ /^[0-2][0-9]/;\n    return 1 if $date =~ /^[0-3][0-9]/;\n\
    \    return 1 if $date =~ /^[0-2][0-9]/;\n    return 1 if $date =~ /^[0-3][0-9]/;\n\
    \    return 1 if $date =~ /^[0-2][0-9]/;\n    return 1 if $date =~ /^[0-3][0-9]/;\n\
    \    return 1 if $date =~ /^[0-2][0-9]/;\n    return 1 if $date =~ /^[0-3][0-9]/;\n\
    \    return 1 if $date =~ /^[0-2][0-9]/;\n    return 1 if $date =~ /^[0-3][0-9]/;\n\
    \    return 1 if $date =~ /^[0-2][0-9]/;\n    return 1 if $date =~ /^[0-3][0-9]/;\n\
    \    return 1 if $date =~ /^[0-2][0-9]/;\n    return 1 if $date =~ /^[0-3][0-9]/;\n\
    \    return 1 if $date =~ /^[0-2][0-9]/;\n    return 1 if $date =~ /^[0-3][0-9]/;\n\
    \    return 1 if $date =~ /^[0-2][0-9]/;\n    return 1 if $date =~ /^[0-3][0-9]/;\n\
    \    return 1 if $date =~ /^[0-2][0-9]/;\n    return 1 if $date =~ /^[0-3][0-9]/;\n\
    \    return 1 if $date =~ /^[0-2][0-9]/;\n    return 1 if $date =~ /^[0-3][0-9]/;\n\
    \    return 1 if $date =~ /^[0-2][0-9]/;\n    return 1 if $date =~ /^[0-3][0-9]/;\n\
    \    return 1 if $date =~ /^[0-2][0-9]/;\n    return 1 if $date =~ /^[0-3][0-9]/;\n\
    \    return 1 if $date =~ /^[0-2][0-9]/;\n    return 1 if $date =~ /^[0-3][0-9]/;\n\
    \    return 1 if $date =~ /^[0-2][0-9]/;\n    return 1 if $date =~ /^[0-3][0-9]/;\n\
    \    return 1 if $date =", "    return 1 if ($date =~ /^\\s*$/ or $date =~ /^\\\
    s*$/);\n    my($days,$month,$year) = split '-',$date;\n    my($days_1,$days_3,$days_5,$days_7,$days_8,$days_10,$days_12)\
    \ = map {$_ * 31}, (1 .. 12);\n    my($days_4,$days_6,$days_9,$days_11) = map\
    \ {$_ * 30}, (4 .. 12);\n    my($days_2) = map {$_ * 29}, 2 .. 12;\n    my($month_1,$month_3,$month_5,$month_7,$month_8,$month_10,$month_12)\
    \ = (1 .. 12);\n    my($month_4,$month_6,$month_9,$month_11) = (4 .. 12);\n  \
    \  my($month_2) = 2 .. 12;\n    return '' if (($days_2 < $days_1) or ($days_2\
    \ < $days_3) or ($days_2 < $days_5) or ($days_2 < $days_7) or ($days_2 < $days_8)\
    \ or ($days_2 < $days_10) or ($days_2 < $days_12));\n    return '' if (($days_2\
    \ > $days_1) or ($days_2 > $days_3) or ($days_2 > $days_5) or ($days_2 > $days_7)\
    \ or ($days_2 > $days_8) or ($days_2 > $days_10) or ($days_2 > $days_12));\n \
    \   return '' if (($days_3 > $days_1) or ($days_3 > $days_2) or ($days_3 > $days_4)\
    \ or ($days_3 > $days_6) or ($days_3 > $days_9) or ($days_3 > $days_11));\n  \
    \  return '' if (($days_4 > $days_1) or ($days_4 > $days_2) or ($days_4 > $days_3)\
    \ or ($days_4 > $days_5) or ($days_4 > $days_7) or ($days_4 > $days_8) or ($days_4\
    \ > $days_10) or ($days_4 > $days_12));\n    return '' if (($days_5 > $days_1)\
    \ or ($days_5 > $days_2) or ($days_5 > $days_3) or ($days_5 > $", "    return\
    \ undef unless $date =~ /^(?(DEFINE)\n                                       \
    \    (?P<day>3[01]|[12][0-9]|0?[1-9])\n                                      \
    \     (?P<month>1[0-2]|0?[1-9])\n                                           (?P<year>[0-9][0-9][0-9][0-9])\n\
    \                                           (?P<tz_hour>2[0-3]|[01][0-9])\n  \
    \                                         (?P<tz_min>[0-5][0-9])\n           \
    \                                (?P<tz_sec>[0-5][0-9])\n                    \
    \                       (?P<tz_sign>[-+])\n                                  \
    \         (?P<hour>[0-1][0-9])\n                                           (?P<min>[0-5][0-9])\n\
    \                                           (?P<sec>[0-5][0-9])\n            \
    \                               (?P<sign>[-+])\n                             \
    \              (?P<mday>[12][0-9])\n                                         \
    \  (?P<yday>[1-9][0-9])\n                                           (?P<isdst>[0-1])\n\
    \                                           (?P<wday>[0-6])\n                \
    \                           (?P<yday>[1-9][0-9])\n                           \
    \                (?P<month>[0-1][0-9])\n                                     \
    \      (?P<mmonth>[1-3][0-9])\n                                           (?P<mmonth>[1-9][0-9])\n\
    \                                           (?P<wmonth>[0-6])\n              \
    \                             (?P<wmonth>[1-9][0-9])\n                       \
    \                    (?P<year>[0-9][0-9][0-9][0-9]))$/ix;", "    my(@years) =\
    \ map {(2017..2018) ~ (0..19)} 0 .. 11;\n    my(@months) = map {(1..12)} 0 ..\
    \ 11;\n    my(@days) = map {(1..31)} 0 .. 31;\n    my($daysInMonth, $month, $year)\
    \ = (31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);\n    my($day, $month, $year)\
    \ = (0, 0, 0);\n    my($yearLength) = 0;\n    my($dayLength) = 0;\n    my($isLeapYear)\
    \ = 0;\n    my($checkDate) = &checkDate($date);", "    chomp($date);\n    if(length($date)\
    \ < 1 || length($date) > 31) { return(\"\"); }\n    my %month = (1 => 0, 3 =>\
    \ 0, 5 => 0, 7 => 0, 8 => 0, 10 => 0, 12 => 0);\n    my %day = (1 => 0, 3 => 0,\
    \ 5 => 0, 7 => 0, 8 => 0, 10 => 0, 12 => 0);\n    my %year = (1 => 0, 4 => 0,\
    \ 6 => 0, 9 => 0, 11 => 0, 13 => 0, 14 => 0, 15 => 0, 16 => 0);", "    chomp($date);\n\
    \    my @date = split('-', $date);\n    return 1 unless ($date[0] && $date[1]\
    \ && $date[2] && $date[2] < 31 && $date[2] > 30);\n    return 1 unless ($date[1]\
    \ < 1 || $date[1] > 12);\n    return 1 unless ($date[0] < 1 || $date[0] > 12);\n\
    \    return 1;\n}", "    if ($date =~ /^[\\d]+-[\\d]+-[\\d]+$/) {\n        if\
    \ ($date <= $max_date && $date >= $min_date) {\n            return 1;\n      \
    \  } else {\n            return '';\n        }\n    }\n    return '';\n}\n</code>\n\
    <|/ a tags=perl,datetime,date,validation dscore=0 |>\n<| c |>\nYes, but you said\
    \ *The date is valid if all of the following rules are satisfied:* ... but the\
    \ OP also said *The date is valid if all of the following rules are satisfied:\n\
    1. The date string is not empty.*\n<|/ c |>\n<| c |>\n: I did not read that rule\
    \ in the OP's description; I read *The date is valid if all of the following rules\
    \ are satisfied:\n1. The date string is not empty*. Which is what the code does.\n\
    <|/ c |>\n<| c |>\n: I edited the OP's question to make it more clear, though\
    \ I am not sure what the OP really wants.\n<|/ c |>\n<| c |>\n: It could be that\
    \ he needs two separate conditions -- one that checks for empty strings and one\
    \ that checks the format. The OP didn't specify that he wants *all* of those conditions\
    \ to be satisfied, just the format. If this is the case, then I suggest writing\
    \ two separate conditions.\n<|/ c |>\n<| c |>\n: I am not sure about what OP wants;\
    \ and I think your suggested solution would be inaccurate for the OP's case as\
    \ well. I have mentioned that my code does not check the format.\n<|/ c |>\n<|\
    \ a dscore=0 |>\nThis is my first answer in SO, so I am a little rusty on Perl.\
    \ Please don't bash me if it doesn't work :)\n<code>", '    return unless ($date);',
  "    return '' if ($date eq '');\n    my(@date_array) = split('-',$date);\n    return\
    \ '' if (@date_array == 0 || @date_array == 3);", "    \n    my $valid_date =\
    \ '';\n    if(!defined($date) || $date eq '') {\n        \n    }\n    elsif($date\
    \ !~ /^[0-9]{2}\\-[0-9]{2}\\-[0-9]{4}$/) {\n        $valid_date = '';\n    }\n\
    \    elsif($date !~ /^[0-9]{2}\\-[0-9]{2}\\-[0-9]{4}$/ ||\n           !($date\
    \ =~ /[0-9]{2}\\-[0-9]{2}\\-[0-9]{4}/) ||\n           !($date =~ /[0-9]{2}\\/[0-9]{2}\\\
    /[0-9]{4}/)) {\n        \n    }\n    else {\n        $valid_date = 1 if $date\
    \ =~ /[0-9]{1,2}\\/[0-9]{1,2}\\/[0-9]{4}/ && $date !~ /[1-3][0-9]{2}\\/[1-3][0-9]{2}\\\
    /[0-9]{4}/;\n    }\n    return $valid_date;\n}", "    my($day,$month,$year) =\
    \ split(/\\//,$date,2);\n    my(@days);\n    my(@months);\n    my(@years);\n \
    \   my(@days_months);\n    my $is_valid = 1;\n    if($date ne '') {\n        $is_valid\
    \ = 0;\n        if(length($date) < 8) {\n            $is_valid = 0;\n        }\n\
    \        else {\n            if($date ne \"01\") {\n                if($date ne\
    \ \"01-31\") {\n                    $is_valid = 0;\n                }\n      \
    \          else {\n                    $is_valid = 1;\n                    ($day,$month,$year)\
    \ = split(/\\-/,$date,2);\n                    if(length($day) < 1 || length($day)\
    \ > 31) {\n                        $is_valid = 0;\n                    }\n   \
    \                 if($month > 2) {\n                        $is_valid = 0;\n \
    \                   }\n                    if($month < 1) {\n                \
    \        $is_valid = 0;\n                    }\n                    if($month\
    \ < 12) {\n                        $is_valid = 0;\n                    }\n   \
    \                 if($day < 1) {\n                        $is_valid = 0;\n   \
    \                 }\n                    if($day > 31) {\n                   \
    \     $is_valid = 0;\n                    }\n                    if($month > 11)\
    \ {\n                        $is_valid = 0;\n                    }\n         \
    \           if($month > 12) {\n                        $is_valid = 0;\n      \
    \              }\n                }\n            }\n            else {\n     \
    \           $is_valid = 1;\n            }\n        }\n    }\n    return $is_valid;\n\
    }", "    return '' if ($date eq '');\n    my($days,$month,$year) = split('-',$date);\n\
    \    my(@months) = qw(1 3 5 7 8 10 12);\n    my(@days) = qw(1 30 29 1 29);\n \
    \   if ($days < 1 ) {\n        $valid = 0;\n    } else {\n        for (@months)\
    \ {\n            for (@days) {\n                if ($month eq $_ && $day eq $_)\
    \ {\n                    $valid = 1;\n                    last;\n            \
    \    }\n            }\n        }\n    }\n    return $valid ? 1 : 0;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis is not correct. An invalid date would also satisfy\
    \ the first rule, but not satisfy the second rule. Hence the function would return\
    \ 0.\n<|/ c |>\n<| c |>\nHe didn't specify that he wants an invalid date to return\
    \ an empty string instead of 0\n<|/ c |>\n<| c |>\nYeah he did, he said \"valid\"\
    , not \"invalide\". So he wants \"08-25-2015\" to return 1.\n<|/ c |>\n<| c |>\n\
    The function is validating against the rules you described. I only changed the\
    \ variable names.\n<|/ c |>\n<| c |>\nHe did say \"valid\", but he said \"invalid\"\
    \ in the title. He didn't say \"invalid\" in the question body. You're confused.\n\
    <|/ c |>\n<| a dscore=1 tags=perl,validation,date |>\nI believe that using a regex\
    \ is overkill for this, and I recommend not doing so. Since this is Perl you should\
    \ use the built-in DateTime module to validate a date. See the below code:\n<code>\n\
    use strict;\nuse warnings;", "    return 1 if($date eq '');", "    chomp $date;\n\
    \    if ($date =~ /^\\s*$/) {\n        return 1;\n    }\n    if ($date !~ /^[0-9]{1,2}-[0-9]{1,2}-[0-9]{4}$/)\
    \ {\n        return '';\n    }\n    if ($date =~ /^[0-9]{1,2}\\/[0-9]{1,2}\\/[0-9]{4}$/)\
    \ {\n        if ($date !~ /^[0-3][0-9]|[1-9][1-9]|[1-3][0-9]{3}$/) {\n       \
    \     return '';\n        }\n    }\n    if ($date =~ /^[0-3][0-9]|[1-9][1-9]|[1-3][0-9]{3}-[0-2][0-9]{2}-[0-3][0-9]{4}$/)\
    \ {\n        if ($date !~ /^[0-3][0-9]|[1-9][1-9]|[1-3][0-9]{3}$/) {\n       \
    \     return '';\n        }\n    }\n    if ($date !~ /^[0-9]{4}-[0-1][0-9]-[0-3][0-9]$/)\
    \ {\n        return '';\n    }\n    return 1;\n}", "    $date =~ /^(\\d{1,2}-\\\
    d{1,2}-\\d{1,4}|\\d{1,2}\\/\\d{1,2}\\/\\d{4})$/;\n    my $date_parts = split \"\
    /\", $date;\n    my $month = $date_parts[0];\n    my $day = $date_parts[1];\n\
    \    my $year = $date_parts[2];\n    my $days_in_month = @month_to_month_days_hash{$month};\n\
    \    if ($day <= 1 or $day > $days_in_month or $month > 12) {\n        return\
    \ '';\n    }\n    return 1;\n}", "    my $month = $date->month;\n    my $day =\
    \ $date->day;\n    my $year = $date->year;\n    my $daysInMonth = getDaysInMonth($month);\n\
    \    if ($day == 0 || $day > $daysInMonth) {\n        return '';\n    }\n    if\
    \ ($month == 1 || $month == 3 || $month == 5 || $month == 7 || $month == 8 ||\
    \ $month == 10 || $month == 12) {\n        if ($day > $daysInMonth) {\n      \
    \      return '';\n        }\n    }\n    if ($month == 4 || $month == 6 || $month\
    \ == 9 || $month == 11) {\n        if ($day > $daysInMonth) {\n            return\
    \ '';\n        }\n    }\n    if ($month == 2) {\n        if ($day > $daysInMonth)\
    \ {\n            return '';\n        }\n    }\n    return 1;\n}", "    $date =~\
    \ /^\\s*$/ or $date =~ /^\\d/ or $date =~ /^\\d\\d$/ or $date =~ /^\\d\\d(?:\\\
    /|$)/;\n    $date =~ /^(\\d+)-(\\d+)-(\\d+)\\s*$/ or $date =~ /^(\\d+)\\/(\\d+)\\\
    /(\\d+)\\s*$/;\n    if ($4 > 12 or $4 < 1 or $2 > 12 or $2 < 1 or $1 < 1 or $1\
    \ > 31 or $1 < 30 or $1 < 29 or $2 > 12) {\n        return '';\n    }\n    my\
    \ $month = `date -d $1 +%m`;\n    if ($month < 1 or $month > 12 or $2 > 31 ||\
    \ $2 < 30 or $1 < 1 or $1 > 30 || $1 < 29) {\n        return '';\n    }\n    my\
    \ $day = `date -d $1 +%d`;\n    if ($day < 1 or $day > 31 || $2 > 31 || $2 < 30\
    \ or $1 < 1 or $1 > 30 || $1 < 29) {\n        return '';\n    }\n    my $year\
    \ = `date -d $1 +%Y`;\n    if ($year < 1900 or $year > 2099) {\n        return\
    \ '';\n    }\n    my $ret = $month == $2 and $day == $3;\n    return $ret;\n}",
  "    return '' if ($date eq '');\n    my($year, $month, $day) = split /\\-/, $date;\n\
    \    my %months = ( 1 => 1, 3 => 3, 5 => 5, 7 => 7, 8 => 8, 10 => 10, 12 => 12,\
    \ 2 => 2 );\n    return '' if ($month !~ m/[1-9][0-9]/ || $day !~ m/[0-1][0-9]/);\n\
    \    my $d = $day;\n    $d += ($month{1} <= $month{2}) ? 29 : 28;\n    $d += ($month{1}\
    \ <= $month{3}) ? 30 : 31;\n    $d += ($month{1} <= $month{5}) ? 30 : 31;\n  \
    \  $d += ($month{1} <= $month{7}) ? 30 : 31;\n    $d += ($month{1} <= $month{10})\
    \ ? 30 : 31;\n    $d += ($month{1} <= $month{12}) ? 30 : 31;\n    my $month_count\
    \ = @{$months{$_}} for keys %months;\n    if ($month_count >= 1 && $month_count\
    \ <= 12) {\n        return 1;\n    }\n    return '';\n}", "    return 0 if ( !$date\
    \ || $date eq '');\n    my ($m,$d,$y,$m,$d,$y) = split /-/, $date;\n    # checking\
    \ the validity of the month\n    my $valid_month = 1;\n    # checking the validity\
    \ of the date\n    my $valid_date = 1;\n    for(my $i=1;$i<=12;$i++)\n    {\n\
    \        if($m <= $i)\n        {\n            $valid_month = 0;\n            last;\n\
    \        }\n    }\n    for(my $i=1;$i<=31;$i++)\n    {\n        if($d <= $i)\n\
    \        {\n            $valid_date = 0;\n            last;\n        }\n    }\n\
    \    if($valid_month && $valid_date)\n    {\n        return 1;\n    }\n    return\
    \ '';\n}\n</code>\n<|/ a |>\n<| a tags=perl,date |>\n<code>", '    my $result
    = 1;', "    return 1 if $date eq \"\";\n    return 1 if $date =~ /^[0-9]$/;\n\
    \    return 1 if $date =~ /^0[0-9]$/;\n    return 1 if $date =~ /^[0-3][0-9]$/;\n\
    \    return 1 if $date =~ /^[12][0-1][0-9]$/;\n    return 1 if $date =~ /^[12]0[0-1][0-9]$/;\n\
    \    return 1 if $date =~ /^[12]0[2-9][0-9]$/;\n    return 1 if $date =~ /^[12]0[3-9][0-9]$/;\n\
    \    return 1 if $date =~ /^[12]0[4-9][0-9]$/;\n    return 1 if $date =~ /^[12]0[5-9][0-9]$/;\n\
    \    return 1 if $date =~ /^[12]0[6-9][0-9]$/;\n    return 1 if $date =~ /^[12]0[7-9][0-9]$/;\n\
    \    return 1 if $date =~ /^[12]0[8-9][0-9]$/;\n    return 1 if $date =~ /^[12]0[9-9][0-9]$/;\n\
    \    return 1 if $date =~ /^[12]0[10-9][0-9]$/;\n    return 1 if $date =~ /^[12]0[11-9][0-9]$/;\n\
    \    return 1 if $date =~ /^[12]0[12-9][0-9]$/;\n    return 1;\n}", "    chomp($date);\n\
    \    if(length($date) != 0 ) {\n        $date =~ s/^\\s+//;\n        $date =~\
    \ s/\\s+$//;\n        if($date =~ m/^((0[1-9]|[12][0-9]|3[01])\\-(0[1-9]|1[012])\\\
    -(19|20)\\d\\d?)$/) {\n            $date =~ m/(\\d+)-(\\d+)-(\\d+)/;\n       \
    \     if($3 <= 29 && $3 >= 1 && $2 <= 12 && $2 >= 1 && $1 <= 31) {\n         \
    \       return 1;\n            }\n            else {\n                return \"\
    \";\n            }\n        }\n        else {\n            return \"\";\n    \
    \    }\n    }\n    else {\n        return \"\";\n    }\n}", "    my(@valid_months)\
    \ = ('01','02','03','04','05','06','07','08','09','10','11','12');\n    my(@valid_days)\
    \ = ('01','02','03','04','05','06','07','08','09','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31');\n\
    \    my(@valid_years) = ('1900','1910','1920','1930','1940','1950','1960','1970','1980','1990','2000','2010','2020','2030','2040','2050','2060','2070','2080','2090','2100');\n\
    \    my($year, $month, $day);\n    $year = $year{$_[0]} if (!$year{$_[0]});\n\
    \    if (length($date) == 0) {\n        return '';\n    }\n    $month = substr($date,\
    \ 0, 2);\n    $day = substr($date, 3, 2);\n    my $month_no = $month{substr($date,\
    \ 0, 2)};\n    my $day_no = $day{substr($date, 0, 2)};\n    if (length($month)\
    \ != 2 || length($day) != 2) {\n        return '';\n    }\n    if ($month{substr($date,\
    \ 0, 2)} < 1 ||\n            $month{substr($date, 0, 2)} > 12) {\n        return\
    \ '';\n    }\n    if ($month{substr($date, 0, 2)} < 2 ||\n            $month{substr($date,\
    \ 0, 2)} > 12) {\n        return '';\n    }\n    return $year{substr($date, 0,\
    \ 4)} if ($year{substr($date, 0, 4)} =~ /^([1-9]|10|11|12)(\\d{2})$/);\n    return\
    \ '' if ($day_no < 1 || $day_no > 31);\n    return '' if ($month_no < 1 || $month_no\
    \ > 12);\n    return $year{substr($date, 0, 4)} if ($year{substr($date, 0, 4)}\
    \ =~ /^([1-9]|10|11|12)(\\d{2})$/);\n    return '' if ($day_no < 1 || $day_no\
    \ > 30);\n    return '' if ($month_no < 1 || $month_no > 12);\n    return 1;\n\
    }\n</code>\nTo test the code above, run the following test:\n<code>\nuse strict;\n\
    use warnings;", "    chomp($date);\n    if (length($date) != 10) {\n        return\
    \ '$date';\n    }\n    my ($date_array) = split(/\\-/,$date);\n    if ($date_array->[0]\
    \ >= 1 && $date_array->[0]<=12 && $date_array->[1] >= 1 && $date_array->[1]<=31\
    \ && $date_array->[2] >= 1 && $date_array->[2]<=30) {\n        return '1';\n \
    \   }\n    if ($date_array->[0] >= 1 && $date_array->[0]<=12 && $date_array->[1]\
    \ >= 4 && $date_array->[1]<=6 && $date_array->[2] >= 1 && $date_array->[2]<=29)\
    \ {\n        return '1';\n    }\n    if ($date_array->[0] >= 1 && $date_array->[0]<=12\
    \ && $date_array->[1] >= 1 && $date_array->[1]<=12) {\n        return '1';\n \
    \   }\n    return '$date';\n}", "    my($days,$months,$year) = split(\"-\",$date);\n\
    \    my $result = 0;\n    \n    if ( $day && $days > 0 and $days < 31 and $months\
    \ && $months > 0 and $months < 12 and $year && $year >= 1900 and $year < 2020\
    \ ) {\n        $result = 1;\n    }\n    \n    return $result;\n}", "    \n   \
    \ my $valid_year = 0;\n    my $valid_month = 0;\n    my $valid_day = 0;\n    my\
    \ $invalid_day = 0;\n    my $invalid_month = 0;\n    \n    # Validate the year\n\
    \    if($date ne '') {\n        if($date =~ /^\\d{4}$/) {\n            $valid_year\
    \ = 1;\n        } else {\n            $valid_year = 0;\n        }\n    }\n   \
    \ \n    # Validate the month\n    if($valid_year && $date ne '') {\n        if($date\
    \ =~ /^\\d{1,2}$/) {\n            $valid_month = 1;\n        } else {\n      \
    \      $valid_month = 0;\n        }\n    }\n    \n    # Validate the day\n   \
    \ if($valid_month && $date ne '') {\n        if($date =~ /^\\d{1,2}-\\d{1,2}$/)\
    \ {\n            $valid_day = 1;\n        } else {\n            $valid_day = 0;\n\
    \        }\n    }\n    \n    if($valid_year && $valid_month && $valid_day) {\n\
    \        if($valid_day > 0 && $valid_day < 31) {\n            if($valid_month\
    \ > 0 && $valid_month < 13) {\n                if($valid_day > 0 && $valid_day\
    \ <= 29) {\n                    return 1;\n                }\n            }\n\
    \        }\n    }\n    \n    return '';\n}", "    return 1 if !$date || !($date\
    \ =~ /^\\S+$/);\n    return 1 if !$date || ($date =~ /^\\d+$/) && ($date < 1 ||\
    \ $date > 29);\n    return 1 if !$date || ($date =~ /^(\\d+)-(\\d+)-(\\d+)$/)\
    \ && ($3 <= $2 || $2 > 12);\n    return 1 if !$date || ($date =~ /^(\\d+)-(((0[13578]|10|12)(01|02|03|04|05|06|07|08|09))|((1[0-2]))|30|31)-(\\\
    d+)$/) && ($5 <= $3 || $3 > 31);\n    return 1;\n}", "    my $day;\n    my @month;\n\
    \    my @date;\n    my $days_of_month;\n    my $months_left;\n    my $year;\n\
    \    my $err = \"\";\n    my $date_is_valid = 0;\n    $days_of_month = 31;\n \
    \   $months_left = 12;\n    $year = $date =~ /^\\d+/;\n    if ($day =~ /^\\d+$/)\
    \ {\n        $days_of_month = $day;\n    }\n    if ($month = $date =~ /-/) {\n\
    \        if ($month =~ /^\\d+$/) {\n            $months_left = $month;\n     \
    \   }\n    }\n    if ($date =~ /-/) {\n        if ($day =~ /-/) {\n          \
    \  if ($day =~ /^\\d+$/) {\n                $day = $day;\n            }\n    \
    \    }\n        else {\n            die($date);\n        }\n    }\n    foreach\
    \ my $m (1 .. 12) {\n        if ($months_left == $m) {\n            $months_left\
    \ -= 1;\n            $months_left += $m == 1 ? 31 : 30;\n        }\n        else\
    \ {\n            if ($m == 2) {\n                for (my $i = 0; $i <= $m - 1;\
    \ $i++) {\n                    if ($month[$i] > $month[$i + 1]) {\n          \
    \              $months_left -= 1;\n                    }\n                }\n\
    \            }\n            else {\n                $months_left -= 1;\n     \
    \       }\n        }\n    }\n    if ($day == 0) {\n        $days_of_month -= 1;\n\
    \    }\n    if ($months_left == 0) {\n        $months_left += 12;\n    }\n   \
    \ if ($year == 0) {\n        $year += 2000;\n    }\n    my $num_days_this_month\
    \ = days_in_month($month);\n    my $num_days_this_year = $days_of_month;\n   \
    \ my $is_leap = is_leap_year($year);\n    foreach my $m (0 .. 11) {\n        if\
    \ ($m == 0) {\n            $num_days_this_month -= 1;\n        }\n        elsif\
    \ ($m == 11) {\n            $num_days_this_month += 1;\n        }\n        elsif\
    \ ($m == 12) {\n            $num_days_this_year -= 1;\n        }\n        elsif\
    \ ($m == 1) {\n            $num_days_this_year += 1;\n        }\n    }\n    $day\
    \ = 0;\n    my $curr_month = $month;\n    $curr_month -= $year / 100;\n    $year\
    \ -= $year / 400;\n    foreach my $m (0 .. 11) {\n        if ($m == 11) {\n  \
    \          $num_days_this_month += 1;\n", "    my($day, $month, $year) = (-1,\
    \ -1, -1);\n    if($date =~ /^\\s*$/){\n        return '';\n    }\n    chomp($date);\n\
    \    $date =~ /^([0-9]+)-(.*?)-(.*?)/;\n    ($day, $month, $year) = split('-',\
    \ $1, 3);\n    my $num_days = cal_days_month($month, $year, $day);\n    if($num_days\
    \ < 1 || $num_days > 30){\n        return '';\n    }\n    if($num_days < 4 ||\
    \ $num_days > 29){\n        return '';\n    }\n    if($month < 1 || $month > 12){\n\
    \        return '';\n    }\n    if($day < 1 || $day > 31){\n        return '';\n\
    \    }\n    return 1;\n}", "    if ( $date eq \"\" ) {\n        return \"\";\n\
    \    }", "    my($day, $month, $year) = split(/\\-/, $date);\n    my($days) =\
    \ $month * 30 + $day;\n    my($months) = $month + 12;\n    my($years) = $year\
    \ + 1900;", "    if ( $date =~ /^ *$/ ) {\n        return 1;\n    }", "    my($valid);\n\
    \    if ($date eq \"\") {\n        $valid = 0;\n    }\n    if ($date ne \"\")\
    \ {\n        $valid = 1;\n        if ($date =~ /^\\d\\d$/ || $date =~ /^\\d\\\
    d(\\d)/) {\n            if ($date =~ /^\\d\\d$/) {\n                $valid = 1;\n\
    \            }\n            else {\n                $valid = 1;\n            \
    \    if ($date =~ /^\\d\\d(\\d)/) {\n                    $valid = 0;\n       \
    \         }\n            }\n        }\n        if ($date =~ /^\\d\\d-\\d\\d-\\\
    d\\d\\d\\d$/) {\n            $valid = 1;\n        }\n    }\n    if ($valid ==\
    \ 1) {\n        return $valid;\n    }\n    else {\n        return '';\n    }\n\
    }", "    my $check = 1;\n    my $valid_day;\n    my $month;\n    my $date;", " \
    \   \n    my ($year, $month, $day) = split '-', $date;\n    my $date_string =\
    \ \"$month-$day-$year\";\n    if ($date =~ /^\\d\\d+\\-\\d\\d+\\-\\d\\d\\d\\d/)\
    \ {\n        # Date is valid, print it!\n        my $year1 = $1;\n        my $month1\
    \ = $2;\n        my $day1 = $3;\n        my $date_string1 = \"$month1-$day1-$year1\"\
    ;\n        print \"$date_string1 is a valid date.\\n\";\n        return 1;\n \
    \   }\n    else {\n        # Date is not valid, return ''\n        return '';\n\
    \    }\n}", "    $date =~ /^([0-9]{2})-([0-9]{2})-([0-9]{4})$/;\n    return ($1<1)\
    \ || ($1> 12) || ($2<1) || ($2> 31) || ($3<1) || ($3> 30) || ($4<1) || ($4> 29)\
    \ || ($5<1) || ($5> 12);\n}\n</code>\n<|/ a tags=perl,validation,date |>\n<| a\
    \ tags=perl,validation,date |>\nThis is my solution:\n<code>\nuse strict;\nuse\
    \ warnings;\nuse List::Util qw(max);", "    my($day) = $date =~ /^(\\d{1,2}-\\\
    d{1,2}-\\d{1,4})$/;\n    my($month) = $date =~ /^(\\d{1,2}\\/\\d{1,2}\\/\\d{1,4})$/;\n\
    \    my($year) = $date =~ /^(\\d{1,4})$/;\n    my $days_in_month = &days_in_month($month);\n\
    \    $days_in_month = $days_in_month if $day =~ /^([1-31]|[12]\\d|30)$/;\n   \
    \ $days_in_month = $days_in_month if $day =~ /^([1-31]|[12]\\d|30)$/;\n    $days_in_month\
    \ = $days_in_month if $day =~ /^([1-31]|[12]\\d|29)$/;\n    $days_in_month = $days_in_month\
    \ if $day =~ /^([1-31]|[12]\\d|29)$/;\n    $days_in_month = $days_in_month if\
    \ $day =~ /^([1-31]|[12]\\d|29)$/;\n    $days_in_month = $days_in_month if $day\
    \ =~ /^([1-31]|[12]\\d|29)$/;\n    $days_in_month = $days_in_month if $day =~\
    \ /^([1-31]|[12]\\d|29)$/;\n    $days_in_month = $days_in_month if $day =~ /^([1-31]|[12]\\\
    d|29)$/;\n    $days_in_month = $days_in_month if $day =~ /^([1-31]|[12]\\d|29)$/;\n\
    \    $days_in_month = $days_in_month if $day =~ /^([1-31]|[12]\\d|29)$/;\n   \
    \ $days_in_month = $days_in_month if $day =~ /^([1-31]|[12]\\d|29)$/;\n    $days_in_month\
    \ = $days_in_month if $day =~ /^([1-31]|[12]\\d|29)$/;\n    $days_in_month = $days_in_month\
    \ if $day =~ /^([1-31]|[12]\\d|29)$/;\n    $days_in_month = $days_in_month if\
    \ $day =~ /^([1-31]|[12]\\d|29)$/;\n    $days_in_month = $days_in_month if $day\
    \ =~ /^([1-31]|[12]\\d|29)$/;\n    $days_in_month = $days_in_month if $day =~\
    \ /^([1-31]|[12]\\d|29)$/;\n    $days_in_month = $days_in_month if $day =~ /^([",
  "    return '' unless $date;\n    chomp($date);\n    return '' if $date eq '';\n\
    \    if ($date =~ /^\\d{4}\\-\\d{2}\\-\\d{2}/) {\n        return 1 if $date <=\
    \ 31 &&\n                     $date >= 1;\n    }\n    if ($date =~ /^(1[012]|0?[1-9])\\\
    -(0?[1-9]|[12][0-9]|3[01])\\-\\d{4}/) {\n        return 1 if $date <= 29 &&\n\
    \                     $date >= 1;\n    }\n    if ($date =~ /^(0?[1-9]|[12][0-9]|3[01])\\\
    -(0?[1-9]|1[012])\\-\\d{4}/) {\n        return 1 if $date <= 31 &&\n         \
    \            $date >= 1;\n    }\n    if ($date =~ /^(0?[1-9]|1[012])\\-(0?[1-9]|[12][0-9]|3[01])\\\
    -\\d{4}/) {\n        return 1 if $date <= 30 &&\n                     $date >=\
    \ 1;\n    }\n    return '';\n}", "    my $day = $date + 0;\n    if($day <= 0 or\
    \ $day > 31) {\n        return '';\n    }\n    my $days;\n    $days += $day /\
    \ 30;\n    $days += $day % 30;\n    my $month = 0;\n    for(my $i = 2 ; $i <=\
    \ 12 ; $i++) {\n        if($i < 10 && $month == 0) {\n            $month++;\n\
    \        } elsif($month != 0 && $month != 1 && $month != 2 && $month != 3 && $month\
    \ != 4 && $month != 5 && $month != 6 && $month != 7 && $month != 8 && $month !=\
    \ 9 && $month != 10 && $month != 11) {\n            return '';\n        }\n  \
    \      if($i > $day + 29) {\n            return '';\n        }\n        if($days\
    \ <= 1 or $days > 31) {\n            return '';\n        }\n    }\n    return\
    \ 1;\n}", "    $date =~ /^([0-9]+-[0-9]+-[0-9]+)\\z/;\n    die \"Invalid date\
    \ '$date'\" unless $date ne '';\n    my $months = $1;\n    die \"Invalid month\
    \ '$months'\" unless $months !~ /([0-9]+)$/;\n    my $days = $2;\n    die \"Invalid\
    \ number of days for month '$months'\" unless $days !~ /([0-9]+)$/;\n    my $year\
    \ = $3;\n    die \"Invalid year '$year'\" unless $year !~ /([0-9]+)\\z/;", " \
    \   my ($month, $day, $year) = $date =~ m{^(\\d+)-(\\d+)-(\\d+)$};\n    my $mm\
    \ = sprintf(\"%02d\",$month);\n    my $dd = sprintf(\"%02d\",$day);\n    my $yyyy\
    \ = $year;", '    my($year, $month, $day) = split(/\//, $date);', "    my($check)\
    \ = \"\";\n    if (length($date) == 0) {\n        $check = 1;\n    }\n    elsif\
    \ ($date =~ /^\\d{4}-\\d\\d-\\d\\d$/) {\n        $check = 1;\n    }\n    elsif\
    \ ($date =~ /^\\d{4}-\\d\\d/) {\n        $check = $date =~ /^(\\d\\d)-(\\d\\d)-(\\\
    d\\d\\d\\d)$/;\n        $check = $1 !~ /^[0-3]$/ && $2 !~ /^[1-9]$/ && $3 !~ /^[12]$/;\n\
    \    }\n    elsif ($date =~ /^(\\d\\d)-(\\d\\d)$/) {\n        $check = $1 !~ /^[0-3]$/\
    \ && $2 !~ /^[1-9]$/;\n    }\n    elsif ($date =~ /^(\\d\\d)$/) {\n        $check\
    \ = $1 !~ /^[0-3]$/;\n    }\n    elsif ($date =~ /^\\d\\d-\\d\\d-\\d\\d\\d\\d$/)\
    \ {\n        $check = 1;\n    }\n    elsif ($date =~ /^\\d\\d-\\d\\d/) {\n   \
    \     $check = $date =~ /^(\\d\\d)-(\\d\\d)-(\\d\\d\\d\\d)$/;\n        $check\
    \ = $1 !~ /^[0-3]$/ && $2 !~ /^[1-9]$/ && $3 !~ /^[12]$/;\n    }\n    elsif ($date\
    \ =~ /^\\d\\d-\\d\\d$/) {\n        $check = $date =~ /^(\\d\\d)-(\\d\\d)$/;\n\
    \    }\n    elsif ($date =~ /^\\d\\d/) {\n        $check = $date =~ /^(\\d\\d)$/;\n\
    \    }\n    elsif ($date =~ /^\\d\\d-\\d\\d-\\d\\d$/) {\n        $check = 1;\n\
    \    }\n    elsif ($date =~ /^\\d\\d-\\d\\d/) {\n        $check = $date =~ /^(\\\
    d\\d)-(\\d\\d)-(\\d\\d\\d\\d)$/;\n        $check = $1 !~ /^[0-3]$/ && $2 !~ /^[1-9]$/\
    \ && $3 !~ /^[12]$/;\n    }\n    elsif ($date =~ /^\\d\\d-\\d\\d$/) {\n      \
    \  $check = $date =~ /^(\\d\\d)-(\\d\\d)$/;\n    }\n    elsif ($date =~ /^\\d\\\
    d/) {\n        $check = $date =~ /^(\\d\\d)$/;\n    }\n    elsif ($date =~ /^\\\
    d\\d-\\d\\d-\\d\\d$/) {\n        $", "    my($year, $month, $day) = split(/\\\
    -/, $date);\n    my($days_in_month) = @VALID_MONTHS_IN_YEAR;\n    $month += $days_in_month;\n\
    \    return '' unless $month > 12 || $month < 1 || $day > 31 || $day < 1;\n  \
    \  $year += 2000;\n    return '' unless $day > $days_in_month;\n    my($days_in_year)\
    \ = $VALID_YEARS_IN_DAYS - 1;\n    return '' unless $day > $days_in_year;\n  \
    \  return 1;\n}", "    my ($mm, $dd_y, $yyyy, $day) = split('-', $date);\n   \
    \ if ($day > 29 || $day < 1 ) {\n      return \"\";\n    }\n    elsif ($day >\
    \ 30) {\n      return \"\";\n    }\n    elsif ($day > 31) {\n      return \"\"\
    ;\n    }\n    elsif ($day < 1) {\n      return \"\";\n    }\n    elsif ($day >\
    \ 30) {\n      return \"\";\n    }\n    elsif ($day > 31) {\n      return \"\"\
    ;\n    }\n    elsif ($day > 29) {\n      return \"\";\n    }\n    elsif ($mm >\
    \ 12) {\n      return \"\";\n    }\n    elsif ($mm < 1) {\n      return \"\";\n\
    \    }\n    elsif ($mm > 12) {\n      return \"\";\n    }\n    elsif ($mm > 12)\
    \ {\n      return \"\";\n    }\n    elsif ($mm < 1) {\n      return \"\";\n  \
    \  }\n    elsif ($mm < 1) {\n      return \"\";\n    }\n    elsif ($yyyy != $date)\
    \ {\n      return \"\";\n    }\n    else {\n      return 1;\n    }\n}\n</code>\n\
    <|/ a |>\n<| a |>\nI used this regular expression and it worked for me\n<code>\n\
    ^(((0[1-9]|[12]\\d|3[01])\\/(0[13578]|1[02])\\/((20\\d{2})|(19\\d{2})))|((0[1-9]|[12]\\\
    d|30)\\/02/((20\\d{2})|(19\\d{2})))|((0[1-9]|1\\d|2[0-8])\\/02\\/((19\\d{2})))|(29\\\
    /02\\/((20\\d{2})|(19\\d{2}))))$\n</code>\n<|/ a tags=date,perl,validation,regex\
    \ dscore=3 |>\n<| a |>\nThe best solution:\n<code>", "    my($day, @month) = split(m!-!,\
    \ '$date');\n    my($day2, @month2) = split(m!-!, '$day');\n    my($day3, @month3)\
    \ = split(m!/!, '$day2');\n    my($day4, @month4) = split(m!-!, '$day3');\n  \
    \  my($day5, @month5) = split(m!-!, '$day4');\n    my($day6, @month6) = split(m!-!,\
    \ '$day5');\n    my($day7, @month7) = split(m!-!, '$day6');\n    my($day8, @month8)\
    \ = split(m!-!, '$day7');\n    my($day9, @month9) = split(m!-!, '$day8');\n  \
    \  my($day10, @month10) = split(m!-!, '$day9');\n    my($day11, @month11) = split(m!-!,\
    \ '$day10');\n    my($day12, @month12) = split(m!-!, '$day11');\n    my $err =\
    \ '';\n    if(!length $date) {\n        $err ++;\n    }\n    if($err != 6) {\n\
    \        return 1;\n    }\n    if($month[2] < 1 || $month[2] > 12) {\n       \
    \ $err ++;\n    }\n    if($err != 7) {\n        return 1;\n    }\n    if($month[1]\
    \ < 1 || $month[1] > 12) {\n        $err ++;\n    }\n    if($err != 6) {\n   \
    \     return 1;\n    }\n    if($month[3] < 1 || $month[3] > 31 || $month[3] ==\
    \ 30 || $month[3] == 29) {\n        $err ++;\n    }\n    if($err != 6) {\n   \
    \     return 1;\n    }\n    if($month[4] < 1 || $month[4] > 12) {\n        $err\
    \ ++;\n    }\n    if($err != 6) {\n        return 1;\n    }\n    if($month[5]\
    \ < 1 || $month[5] > 31 || $month[5] == 30 || $month[5] == 29) {\n        $err\
    \ ++;\n    }\n    if($err != 6) {\n        return 1;\n    }\n    if($month[6]\
    \ < 1 || $month[6] > 30 || $month[6] == 29) {\n        $err ++;\n    }\n    if($err\
    \ != 6) {\n        return 1;\n    }\n    if($month[7] < 1 || $month[7] > 31 ||\
    \ $month[7] == 30 || $month[7] == 29) {\n        $err ++;\n    }\n    if($", " \
    \   $date =~ s/\\s+//g;\n    $date =~ s/^\\s*//g;\n    $date =~ s/\\s*$//g;\n\
    \    $date =~ /^\\d{1,2}-\\d{1,2}-\\d{4}$/ and $date =~ /^0?[13579]\\d{2}(0[1-9]|1[012])\\\
    2\\d{4}$/ and $date !~ /^0?[13579]\\d{2}(0[1-9]|[12]\\d|3[01])$/ and $date !~\
    \ /^29(0[1-9]|1[0-2])$/;\n}", "    return '' unless ($date);\n    my($day, $month,\
    \ $year) = split(/\\-/, $date);\n    # check month validity\n    if ($month <\
    \ 1 || $month > 12) {\n        return '';\n    }\n    # check day validity\n \
    \   if ($day < 1 || $day > 31) {\n        return '';\n    }\n    # check year\
    \ validity\n    if ($month < 3 || $month > 11) {\n        return '';\n    }\n\
    \    if ($month == 2) {\n        if ($day < 1 || $day > 29) {\n            return\
    \ '';\n        }\n    }\n    return 1;\n}", "    return if ( $date eq '');\n \
    \   my($days,$month,$year,@months);\n    $months = split( '-',$date );\n    $year\
    \ = $months[2] = $months[3] = 0;\n    if ( $months[1] > 12 || $months[1] < 1 )\
    \ { $months[1] += 12; $year--; }\n    if ( $months[2] > 12 || $months[2] < 1 )\
    \ { $months[2] += 12; $year--; }\n    \n    if ( $months[0] < 1 || $months[0]\
    \ > 12 ) { return 0; }\n    if ( $months[1] < 1 || $months[1] > 31 ) { return\
    \ 0; }\n    if ( $months[2] < 1 || $months[2] > 30 ) { return 0; }\n    \n   \
    \ foreach my $i (1 .. $months[1]){\n        push(@months,$i,0);\n    }\n    \n\
    \    foreach my $i (4 .. $months[2]){\n        push(@months,$i,0);\n    }\n  \
    \  \n    if ( $months[0] == $months[1] ){\n        return if ( $months[0] < 1\
    \ || $months[0] > 12 );\n        return if ( $months[1] < 1 || $months[1] > 31\
    \ );\n        return if ( $months[2] < 1 || $months[2] > 30 );\n    }\n    if\
    \ ( $months[0] == $months[2] ){\n        return if ( $months[0] < 1 || $months[0]\
    \ > 12 );\n        return if ( $months[1] < 1 || $months[1] > 31 );\n        return\
    \ if ( $months[2] < 1 || $months[2] > 30 );\n    }\n    if ( $months[1] == $months[2]\
    \ ){\n        return if ( $months[1] < 1 || $months[1] > 31 );\n        return\
    \ if ( $months[2] < 1 || $months[2] > 30 );\n    }\n    \n    $days    = $months[0]*31*31+$months[1]*30*30+$months[2]*31*30;\n\
    \    foreach my $i (1 .. $months[1]){\n        $days+= $months[0]*31+$i;\n   \
    \ }\n    foreach my $i (4 .. $months[2]){\n        $days+= $months[0]*30+$i;\n\
    \    }\n    if ( $days > 29 ){\n        return 0;\n    }\n    return 1;\n}", " \
    \   return 1 unless length($date);\n    my($month,$day,$year) = (0,31,31,365);\n\
    \    if ( $date =~ m/([0-9]+)/) {\n        $year += $1;\n    } elsif ( $date =~\
    \ m/([0-9]+)\\-([0-9]+)/) {\n        $year += $1;\n        $month = $2;\n    }\
    \ elsif ( $date =~ m/([0-9]+)\\/([0-9]+)\\-([0-9]+)/) {\n        $year += $1;\n\
    \        $month = $2;\n        $day = $3;\n    } else {\n        return '';\n\
    \    }\n    my $days_into_month = [31,30,31,30,31,31,30,31,30,31];\n    $month\
    \ -= 1 if ( $month > 12 );\n    for my $m ( 1 .. 12 ) {\n        last if ( $days_into_month[$m-1]\
    \ <= $day );\n    }\n    $day++;\n    return 1 if ( $year > $MAX_YEAR || $year\
    \ < $MINYEAR );\n    return 1 if ( $month < 1 || $month > 12 );\n    return 1\
    \ if ( $day < 1 || $day > 31 );\n    return 1;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=regex,date,perl,datetime |>\nI did something similar (but for a single\
    \ year) by adding one to each month and then adding one day to each of the days\
    \ in the year.  I then added one day to each day in the month and then subtracted\
    \ a day for each day in the year.  Here is a sample code:\n<code>\nmy $date =\
    \ sprintf \"%04d%02d%02d%04d%02d%02d\", 1900 + $year,\n    $month + 1, $day +\
    \ 1, $year, $month + 1, $day + 1;\n</code>\nThen I used the regex from another\
    \ solution:\n<code>\n$date = $1 . ($2 > 29 ? '29' : ($2 > 30 ? '30' : $2 . '/'\
    \ . $3));\n</code>\n<|/ a dscore=0 |>\n<| a |>\nYou can use this regex with perl\
    \ to match the date you want:\n<code>\n'^\\d{4}-(0?[1-9]|1[12])-(0?[1-9]|[12]\\\
    d|3[01])$'\n</code>\n<|/ a tags=regex,date,perl,datetime dscore=0 |>\n<| c |>\n\
    This regex will not match '1999-00-00' which is what I'm looking for\n<|/ c |>\n\
    <| c |>\nIf you have another requirement, then your original question should be\
    \ edited to explain it. As it stands, your question doesn't make sense.", "  \
    \  return '' if !defined $date || $date eq '';", "    # check if the date is not\
    \ empty\n    my $invalid_date = '';\n    if ($date ne '') {\n        # check if\
    \ the date has invalid characters\n        if ($date =~ /[^0-9]{0,8}/g) {\n  \
    \          $invalid_date = 1;\n        }\n        # check if there are invalid\
    \ characters in the year\n        if ($date =~ /[^0-9]{2,4}/g) {\n           \
    \ $invalid_date = 1;\n        }\n        # check if the date has invalid characters\n\
    \        if ($date =~ /[^0-9]{3,5}/g) {\n            $invalid_date = 1;\n    \
    \    }\n        # check if there are invalid characters in the month\n       \
    \ if ($date =~ /[^0-9]{5,8}/g) {\n            $invalid_date = 1;\n        }\n\
    \        # check if the date has invalid characters\n        if ($date =~ /[^0-9]{8,9}/g)\
    \ {\n            $invalid_date = 1;\n        }\n        # check if there are invalid\
    \ characters in the day\n        if ($date =~ /[^0-9]{10,12}/g) {\n          \
    \  $invalid_date = 1;\n        }\n        # check if there are invalid characters\
    \ in the year\n        if ($date =~ /[^0-9]{12,13}/g) {\n            $invalid_date\
    \ = 1;\n        }\n        # check if the date has invalid characters\n      \
    \  if ($date =~ /[^0-9]{14,15}/g) {\n            $invalid_date = 1;\n        }\n\
    \        # check if there are invalid characters in the month\n        if ($date\
    \ =~ /[^0-9]{15,16}/g) {\n            $invalid_date = 1;\n        }\n        #\
    \ check if the date has invalid characters\n        if ($date =~ /[^0-9]{18,19}/g)\
    \ {\n            $invalid_date = 1;\n        }\n        # check if the date has\
    \ invalid characters\n        if ($date =~ /[^0-9]{20,21}/g) {\n            $invalid_date\
    \ = 1;\n        }\n        # check if there are invalid characters in the year\n\
    \        if ($date =~ /[^0-9]{22,23}/g) {\n            $invalid_date = 1;\n  \
    \      }\n        # check if the date has invalid characters\n        if ($date\
    \ =~ /[^0-9]{24,25}/g) {\n            $invalid_date = 1;\n        }\n        #\
    \ check if the date has invalid characters\n        if ($date =~ /[^0-9]{26,27}/g)\
    \ {\n            $invalid_date = 1;\n        }\n        # check if the date has\
    \ invalid characters\n        if ($date =~ /[^0-9]{28,29}/g) {\n            $invalid_date\
    \ = 1;\n        }\n        # check if the date has invalid characters\n      \
    \  if ($date =~ /[^0-9]{30,31}/g) {\n            $invalid_date = 1;\n        }\n\
    \        # check if the date has invalid characters\n        if ($date =~ /[^0-9]{32,33}/g)\
    \ {\n            $invalid_", "    if ($date eq \"\") {\n        return \"\";\n\
    \    }\n    chomp($date);\n    if ($date =~ /^([0-9]{4})-([0-9]{2})-([0-9]{2})$/)\
    \ {\n        my($year, $month, $day) = split(\"-\", $date);\n        if ($month\
    \ <= 12 && $month <= 11 && $day <= 31 && $day <= 30) {\n            return 1;\n\
    \        }\n        elsif ($month <= 3 && $day <= 31 && $day <= 30) {\n      \
    \      return 1;\n        }\n        elsif ($month > 12 || $day > 31) {\n    \
    \        return \"\";\n        }\n    }\n    return \"\";\n}", "    return 1 if($date\
    \ =~ /\\s+/);\n    return 1 if($date =~ /^\\W*$/);\n    return 1 if($date =~ /^\\\
    W*(\\d)\\W*(\\d)\\W*(\\d\\d\\d\\d)\\W*$/);\n    return 1 if($date !~ /^(29|30|31|1)-(1|2)-(\\\
    d\\d\\d\\d)$/);\n    return 1 if($date !~ /^(29|30)-(1|2)-(\\d\\d\\d\\d)$/);\n\
    \    return 1 if($date !~ /^(29|30)-(1|2)-(\\d\\d)$/);\n    return 1 if($date\
    \ !~ /^(29|30)-(1|2)$/);\n    return 1 if($date !~ /^(29|30)-(\\d\\d)$/);\n  \
    \  return 1 if($date !~ /^(29|30)-(\\d\\d)-(\\d\\d\\d\\d)$/);\n    return 1 if($date\
    \ !~ /^(29|30)-(\\d\\d)-(\\d\\d)$/);\n    return 1 if($date !~ /^(29|30)-(\\d\\\
    d)-(\\d\\d)-(\\d\\d\\d\\d)$/);\n    return 1;\n}", "    chomp($date);\n    return\
    \ (!empty($date) && !($date =~ /^\\d$/) && ($date =~ /^\\d{1,2}\\/\\d{1,2}\\/\\\
    d{4}$/ || $date =~ /^\\d{1,2}-\\d{1,2}-\\d{4}$/ || $date =~ /^\\d{1,2}\\/\\d{1,2}\\\
    /\\d{4}$/ || $date =~ /^\\d{1,2}-\\d{1,2}-\\d{4}$/ || $date =~ /^\\d{1,2}\\/\\\
    d{1,2}\\/\\d{4}$/ || $date =~ /^\\d{1,2}-\\d{1,2}-\\d{4}$/ || $date =~ /^\\d{1,2}\\\
    /\\d{1,2}\\/\\d{4}$/ || $date =~ /^\\d{1,2}-\\d{1,2}-\\d{4}$/) && $date =~ /^\\\
    d{1,2}\\/\\d{1,2}\\/\\d{4}$/ && $date =~ /^\\d{1,2}-\\d{1,2}-\\d{4}$/) && $date\
    \ =~ /^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$/ && $date =~ /^\\d{1,2}-\\d{1,2}-\\d{4}$/)\
    \ && $date =~ /^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$/ && $date =~ /^\\d{1,2}-\\d{1,2}-\\\
    d{4}$/) && $date =~ /^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$/ && $date =~ /^\\d{1,2}-\\\
    d{1,2}-\\d{4}$/) && $date =~ /^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$/ && $date =~ /^\\\
    d{1,2}-\\d{1,2}-\\d{4}$/ && $date =~ /^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$/ && $date\
    \ =~ /^\\d{1,2}-\\d{1,2}-\\d{4}$/) && $date =~ /^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$/\
    \ && $date =~ /^\\d{1,2}-\\d{1,2}-\\d{4}$/) && $date =~ /^\\d{1,2}\\/\\d{1,2}\\\
    /\\d{4}$/ && $date =~ /^\\d{1,2}-\\d{1,2}-\\d{4}$/) && $date =~ /^\\d{1,2}\\/\\\
    d{1,2}\\/\\d{4}$/ && $date =~ /^\\d{1,2}-\\d{1,2}-\\d{4}$/) && $date =~ /^\\d{1,2}\\\
    /\\d{1,2}\\/\\d{4}$/ && $date =~ /^\\d{1,2}-\\d{1,2}-\\d{4}$/) && $date =~ /^\\\
    d{1,2}\\/\\d{1,2}\\/\\d{4}$/ && $date =~ /^\\d{1,2}-\\d{1,2}-\\d{4}$/) && $date\
    \ =~ /^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$/ && $date =~ /^\\d{1,2}-\\d{1,2}-\\d{4}$/)\
    \ && $date =~ /^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$/ && $date =~ /^\\d{1,2}-\\d{1,2}-\\\
    d{4}$/) && $date =~ /^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$/ && $date =~ /^\\d{1,2}-\\\
    d{1,2}-\\d{4}$/) && $", "    \n    die \"Please specify a valid date\" if $date\
    \ !~ /^\\d{4}\\-\\d{1,2}\\-\\d{1,2}$/;\n    die \"Invalid date format\" if $date\
    \ !~ /^\\d{2}\\-\\d{2}\\-\\d{4}$/;\n    \n    my @date_details = my($year, $month,\
    \ $day) = my($1, $2, $3);\n    \n    # 1. Date is not empty\n    die \"Please\
    \ specify a valid date\" if $date eq \"\";\n    \n    # 2. Number of days is not\
    \ less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number\
    \ of days is not less than 1 or higher than 30 days for months 4,6,9,11. And,\
    \ the number of days is not less than 1 or higher than 29 for the month 2.\n \
    \   die \"Number of days should be greater than 1 or less than 31\" if $day <\
    \ 1 || $day > 31;\n    die \"Number of days should be greater than 1 or less than\
    \ 30\" if $day < 1 || $day > 30;\n    die \"Number of days should be greater than\
    \ 1 or less than 29\" if $day < 1 || $day > 29;\n    \n    # 3. Months should\
    \ not be less than 1 or higher than 12.\n    die \"Number of months should be\
    \ greater than 1 or less than 12\" if $month < 1 || $month > 12;\n    \n    #\
    \ 4. Date should be in the format: mm-dd-yyyy\n    die \"Invalid date format\"\
    \ if $date !~ /^\\d{2}\\-\\d{2}\\-\\d{4}$/;\n    \n    # 4. Date should be in\
    \ the format: mm-dd-yyyy\n    die \"Invalid date format\" if $date !~ /^\\d{2}\\\
    -\\d{2}\\-\\d{4}$/;\n    \n    # 4. Date should be in the format: mm-dd-yyyy\n\
    \    return 1 if ($day == 0 && $month == 0);\n    \n    die \"Invalid date format\"\
    \ if $month < 1 || $month > 12;\n    \n    # 4. Date should be in the format:\
    \ mm-dd-yyyy\n    die \"Invalid date format\" if $month < 1 || $month > 12;\n\
    \    \n    # 4. Date should be in the format: mm-dd-yyyy\n    die \"Invalid date\
    \ format\" if $month < 1 || $month > 12;\n    \n    # 5. Date should be in the\
    \ format: mm-dd-yyyy\n    return 1 if ($day < 1);\n    \n    # 5. Date should\
    \ be in the format: mm-dd-yyyy\n    return 1 if ($day > 31);\n    \n    # 5. Date\
    \ should be in the format: mm-dd-yyyy\n    return 1 if ($day > 30);\n    \n  \
    \  # 5. Date should be in the ", "    my($days,$month,$year,$rep_date);\n    $days\
    \ = 0;\n    $month = 0;\n    $year = 2040;\n    $rep_date = $date;", "    \n \
    \   if ($date !~ /^\\s*$/) {\n        if ($date !~ /^\\d{1,2}-\\d{1,2}-\\d{4}$/)\
    \ {\n            return \"\";\n        }\n        my $dates = ();\n        $dates\
    \ = split /\\-/, $date;\n        \n        my $numDays = 0;\n        my $months\
    \ = 0;\n        my $month;\n        my $day;\n        my $year;\n        \n  \
    \      if (@$dates == 3) {\n            $months = $dates[2] - 1;\n           \
    \ $day = $dates[1];\n            $year = $dates[0];\n        }\n        elsif\
    \ (@$dates == 4) {\n            $months = $dates[2] - 1;\n            $day = $dates[1];\n\
    \            $year = $dates[0];\n        }\n        elsif (@$dates == 2) {\n \
    \           $month = $dates[1] - 1;\n            $day = $dates[0];\n         \
    \   $year = $dates[0];\n        }\n        else {\n            return \"\";\n\
    \        }\n        \n        if ($days >= 1 && $days <= 31) {\n            $numDays\
    \ = $days;\n        }\n        elsif ($days >= 31 && $days <= 30) {\n        \
    \    $numDays = $days + ($months > 0 ? 29 : 28);\n        }\n        else {\n\
    \            return \"\";\n        }\n        \n        if ($months == 1) {\n\
    \            $months = $month;\n        }\n        elsif ($months == 3 || $months\
    \ == 5) {\n            $months = $month + 1;\n        }\n        elsif ($months\
    \ == 7) {\n            $months = $month + 1;\n        }\n        elsif ($months\
    \ == 8 || $months == 10) {\n            $months = $month + 1;\n        }\n   \
    \     elsif ($months == 12) {\n            $months = $month + 1;\n        }\n\
    \        else {\n            return \"\";\n        }\n        \n        if ($month\
    \ >= 1 && $month <= 12) {\n            if ($numDays == 31 || $numDays == 30) {\n\
    \                return 1;\n            }\n        }\n        else {\n       \
    \     return \"\";\n        }\n    }\n    else {\n        return \"\";\n    }\n\
    }", "    # $date is a string, not a regular expression\n    $date =~ s/^\\s+//;\n\
    \    $date =~ s/\\s+$//;\n    $date =~ s/^\\s+//;\n    $date =~ s/\\s+$//;\n \
    \   $date =~ s/^\\s+//;\n    $date =~ s/\\s+$//;\n    $date =~ s/^\\s+//;\n  \
    \  $date =~ s/\\s+$//;\n    $date =~ s/^\\s+//;\n    $date =~ s/\\s+$//;\n   \
    \ $date =~ s/^\\s+//;\n    $date =~ s/\\s+$//;\n    $date =~ s/^\\s+//;\n    $date\
    \ =~ s/\\s+$//;\n    $date =~ s/^\\s+//;\n    $date =~ s/\\s+$//;\n    $date =~\
    \ s/^\\s+//;\n    $date =~ s/\\s+$//;\n    $date =~ s/^\\s+//;\n    $date =~ s/\\\
    s+$//;\n    $date =~ s/^\\s+//;\n    $date =~ s/\\s+$//;\n    $date =~ s/^\\s+//;\n\
    \    $date =~ s/\\s+$//;\n    $date =~ s/^\\s+//;\n    $date =~ s/\\s+$//;\n \
    \   $date =~ s/^\\s+//;\n    $date =~ s/\\s+$//;\n    $date =~ s/^\\s+//;\n  \
    \  $date =~ s/\\s+$//;\n    $date =~ s/^\\s+//;\n    $date =~ s/\\s+$//;\n   \
    \ $date =~ s/^\\s+//;\n    $date =~ s/\\s+$//;\n    $date =~ s/^\\s+//;\n    $date\
    \ =~ s/\\s+$//;\n    $date =~ s/^\\s+//;\n    $date =~ s/\\s+$//;\n    $date =~\
    \ s/^\\s+//;\n    $date =~ s/\\s+$//;\n    $date =~ s/^\\s+//;\n    $date =~ s/\\\
    s+$//;\n    $date =~ s/^\\s+//;\n    $date =~ s/\\s+$//;\n    $date =~ s/^\\s+//;\n\
    \    $date =~ s/\\s+$//;\n    $date =~ s/^\\s+//;\n    $date =~ s/\\s+$//;\n \
    \   $date =~ s/^\\s+//;\n    $date =~ s/\\s+$//;\n    $date =~ ", "    my($day,\
    \ $month, $year) = split(/\\-/, $date);\n    return '' unless ($date);\n    return\
    \ '' if ($day < 1 || $day > 31); # month 1 to 12\n    return '' if ($month < 1\
    \ || $month > 12);\n    return '' if ($month == 2);\n    return '' if ($day ==\
    \ 29);\n    return 1;\n}", "    return '' if ($date eq '');\n    my($m, $d, $y)\
    \ = split('-', $date);\n    $y -= 1900;\n    $d = $1 if $1 =~ /^(\\d+)/;\n   \
    \ $m = $1 if $1 =~ /^(\\d+)/;\n    $y = $1 if $1 =~ /^(\\d+)/;\n    return $d\
    \ if ($d < 1 || $d > 31 || ($d > 29 && $m < 2));\n    return $d if ($d < 1 ||\
    \ $d > 30);\n    return $d if ($d < 1 || $d > 31);\n    return $d if ($d < 1 ||\
    \ $d > 30 && $m < 4);\n    return $d if ($d < 1 || $d > 29);\n    return $d if\
    \ ($d < 1 || $d > 28);\n    return $d if ($d < 1 || $d > 27);\n    return $d if\
    \ ($d < 1 || $d > 26);\n    return $d if ($d < 1 || $d > 25);\n    return $d if\
    \ ($d < 1 || $d > 24);\n    return $d if ($d < 1 || $d > 23);\n    return $d if\
    \ ($d < 1 || $d > 22);\n    return $d if ($d < 1 || $d > 21);\n    return $d if\
    \ ($d < 1 || $d > 20);\n    return $d if ($d < 1 || $d > 19);\n    return $d if\
    \ ($d < 1 || $d > 18);\n    return $d if ($d < 1 || $d > 17);\n    return $d if\
    \ ($d < 1 || $d > 16);\n    return $d if ($d < 1 || $d > 15);\n    return $d if\
    \ ($d < 1 || $d > 14);\n    return $d if ($d < 1 || $d > 13);\n    return $d if\
    \ ($d < 1 || $d > 12);\n    return $d if ($d < 1 || $d > 11);\n    return $d if\
    \ ($d < 1 || $d > 10);\n    return $d if ($d < 1 || $d > 9);\n    return $d if\
    \ ($d < 1 || $d > 8);\n    return $d if ($d < 1 || $d > 7);\n    return $d if\
    \ ($d < 1 || $d > 6);\n    return $d if ($d < 1 || $d > 5);\n    return $d if\
    \ ($d < 1 || $d > 4);\n    return $d if ($d < 1 || $d > 3);\n    return $d if\
    \ ($d < 1 || $d > 2);\n", "    if($date ne '') {\n        $date =~ /(^(?!\\s*$).+$)/;\n\
    \        if($2 !~ /^\\d{1,2}\\-\\d{1,2}\\-\\d{4}$/ &&\n           $2 !~ /^\\d{1,2}\\\
    /\\d{1,2}\\/\\d{4}$/ &&\n           $2 !~ /^\\d{1,2}-\\d{1,2}-\\d{1,2}$/ &&\n\
    \           $2 !~ /^\\d{2}\\-\\d{2}\\-\\d{4}$/ &&\n           $2 !~ /^\\d{2}\\\
    /\\d{2}\\/\\d{4}$/ &&\n           $2 !~ /^\\d{2}\\-\\d{2}\\-\\d{1,2}$/ &&\n  \
    \         $2 !~ /^\\d{1,2}\\-\\d{1,2}\\/\\d{4}$/ &&\n           $2 !~ /^\\d{1,2}\\\
    /\\d{1,2}\\/\\d{1,2}$/ &&\n           $2 !~ /^\\d{2}\\-\\d{1,2}\\-\\d{1,2}$/ &&\n\
    \           $2 !~ /^\\d{2}\\-\\d{2}\\-\\d{1,2}$/ &&\n           $2 !~ /^\\d{1,2}\\\
    -\\d{1,2}\\/\\d{1,2}$/ &&\n           $2 !~ /^\\d{1,2}\\/\\d{1,2}\\/\\d{2}$/)\
    \ {\n            return '';\n        }\n        if($2 =~ /^\\d{1,2}$/ &&\n   \
    \        $2 !~ /^\\d{1,2}\\-\\d{1,2}$/ &&\n           $2 !~ /^\\d{1,2}\\-\\d{1,2}\\\
    /\\d{1,2}$/ &&\n           $2 !~ /^\\d{1,2}\\-\\d{1,2}\\/\\d{2}$/ &&\n       \
    \    $2 !~ /^\\d{1,2}\\-\\d{1,2}\\/\\d{4}$/ &&\n           $2 !~ /^\\d{1,2}\\\
    /\\d{1,2}\\/\\d{1,2}$/ &&\n           $2 !~ /^\\d{1,2}\\/\\d{1,2}\\/\\d{1,2}$/)\
    \ {\n            return '';\n        }\n    }\n    return 1;\n}", "    my($year,\
    \ $month, $day) = split \"/\", $date;\n    # Validate year\n    my $year_regex\
    \ = qr{^[0-9]+$};\n    die \"Invalid Year\" unless $year =~ /$year_regex/;\n \
    \   # Validate month\n    my($month_regex, $days_regex) = (\n        1 => qr{^(1[012]|0?[1-9])$},\n\
    \        3 => qr{^(4|6|9|11)$},\n        2 => qr{^(0?2)$}\n    );\n    die \"\
    Invalid Month\" unless $month =~ /$month_regex/;\n    die \"Invalid days\" unless\
    \ $day =~ /$days_regex/;\n    # Validate date\n    return 0 if (($year != 0) &&\
    \ ($month != 0) && ($day != 0));\n    return 1;\n}", "    my($valid) = \"\";\n\
    \    my($mm,$dd,$yyyy);\n    if ($date eq \"\"){\n        $valid = 1;\n    }\n\
    \    elsif ($date =~ m/[^0-9]/g){\n        $valid = 0;\n    }\n    elsif ($date\
    \ =~ m/^[0-9]{2}-[0-9]{2}-[0-9]{4}$/) {\n        ($mm,$dd,$yyyy) = $date =~ m/([0-9]{2})-([0-9]{2})-([0-9]{4})/;\n\
    \        unless ( $mm =~ m/[012]/ || $dd =~ m/[01]/ || $yyyy =~ m/[0-9]{4}/ ){\n\
    \            $valid = 0;\n        }\n    }\n    elsif ($date =~ m/^[0-9]{2}\\\
    /[0-9]{2}\\/[0-9]{4}$/) {\n        ($mm,$dd,$yyyy) = $date =~ m/([0-9]{2})\\/([0-9]{2})\\\
    /([0-9]{4})/;\n        unless ( $mm =~ m/[012]/ || $dd =~ m/[01]/ || $yyyy =~\
    \ m/[0-9]{4}/ ){\n            $valid = 0;\n        }\n    }\n    else {\n    \
    \    $valid = 0;\n    }\n    return $valid;\n}", "    return '' if ($date eq '');\n\
    \    my($mm,$dd,$yyyy) = split(/\\-/,$date);\n    my($months) = [31,30,29][1+$mm-0];\n\
    \    my($days)  = [1-($dd-$mm*30),30,31][$mm-1];\n    my($days_in_month) = [21,31,30,31,30,31,31,30,31,30,31][$mm-1];\n\
    \    my($days_in_year) = [31,30,31,30,31,30,31,30,31,30,31,31][$yyyy-$mm-1];\n\
    \    return 0 if (($mm < 1 || ($mm == 1 && $mm < 31)) || ($days > $days_in_month)\
    \ || ($days > $days_in_year));\n    return 1;\n}", '    my($day, $month, $year)
    = (0, 0, 0);', "    return '' unless ($date);\n    my($day, $month, $year) = split(/-/,\
    \ $date);\n    my($day1, $day3, $day5, $day7, $day8, $day10, $day12);\n    my($month1,\
    \ $month3, $month5, $month7, $month8, $month10, $month12);\n    my($year1, $year3,\
    \ $year5, $year7, $year8, $year10, $year12);\n    if ($month < 1 || $month > 12)\
    \ {\n        return '';\n    }\n    if ($year < 2000 || $year > 2040) {\n    \
    \    return '';\n    }\n    $year1 = $year - 2000;\n    $year3 = $year1 + 151;\n\
    \    $year5 = $year1 + 153;\n    $year7 = $year1 + 175;\n    $year8 = $year1 +\
    \ 177;\n    $year10 = $year1 + 201;\n    $year12 = $year1 + 204;\n    $day1 =\
    \ $month1 * 30 + $day;\n    $day3 = $month3 * 30 + $day;\n    $day5 = $month5\
    \ * 30 + $day;\n    $day7 = $month7 * 30 + $day;\n    $day8 = $month8 * 30 + $day;\n\
    \    $day10 = $month10 * 30 + $day;\n    $day12 = $month12 * 30 + $day;\n    if\
    \ ($day1 < 1 || $day1 > 31) {\n        return '';\n    }\n    if ($day3 < 1 ||\
    \ $day3 > 31) {\n        return '';\n    }\n    if ($day5 < 1 || $day5 > 31) {\n\
    \        return '';\n    }\n    if ($day7 < 1 || $day7 > 30) {\n        return\
    \ '';\n    }\n    if ($day8 < 1 || $day8 > 31) {\n        return '';\n    }\n\
    \    if ($day10 < 1 || $day10 > 31) {\n        return '';\n    }\n    if ($day12\
    \ < 1 || $day12 > 31) {\n        return '';\n    }\n    if ($day1 < 0 || $day1\
    \ > 29) {\n        return '';\n    }\n    if ($day3 < 0 || $day3 > 29) {\n   \
    \     return '';\n    }\n    if ($day5 < 0 || $day5 > 29) {\n        return '';\n\
    \    }\n    if ($day7 < 0 || $day7 > 29) {\n        return '';\n    }\n    if\
    \ ($day8 < 0 || $day8 > 31) {\n        return '';\n    }\n    if ($day10 < 0 ||\
    \ $day10 > 31) {\n        return '';\n    }\n    if ($day12", "    my $d = DateTime->new(\n\
    \        year        => $date =~ /^\\d{4}$/,\n        month       => $date =~\
    \ /^\\d{2,}(-\\d{2,})?$/,\n        day         => $date =~ /^\\d{2,}(-\\d{2,})?$/,\n\
    \    );", "    if(!$date || $date eq '') {\n        return '';\n    }\n    chomp($date);\n\
    \    my($y,$m,$d) = split('-',$date,3);\n    my $days;\n    my $months;\n    if($d\
    \ =~ /^\\d{10}$/) {\n        $days = 1;\n    }\n    elsif($d =~ /^\\d{12}$/) {\n\
    \        $days = 31;\n    }\n    elsif($d =~ /^\\d{9}$/) {\n        $days = 30;\n\
    \    }\n    elsif($d =~ /^\\d{8}$/) {\n        $days = 29;\n    }\n    else {\n\
    \        return '';\n    }\n    my $is_valid_date = 0;\n    if(($m == 2 || $m\
    \ == 4) && $d > 29) {\n        return '';\n    }\n    elsif($m == 1 || $m == 3\
    \ || $m == 5 || $m == 7 || $m == 8 || $m == 10 || $m == 12 && $d > 31) {\n   \
    \     return '';\n    }\n    elsif($m == 4 || $m == 6 || $m == 9 || $m == 11 &&\
    \ $d > 30) {\n        return '';\n    }\n    else {\n        $months = 12;\n \
    \   }\n    if($months == 12) {\n        $months = $m;\n    }\n    elsif($d > $days\
    \ * $months) {\n        return '';\n    }\n    else {\n        $is_valid_date\
    \ = 1;\n    }\n    return $is_valid_date;\n}", "    \n    # Write your code below\
    \ this line", "    if ( $date !~ / ^\\s*$/ ) {\n        return '';\n    }", " \
    \   my $valid_date = 1 if ($date eq '');\n    my @months = (1,2,3,4,5,6,7,8,9,10,11,12);\n\
    \    my @days = (1,2,31,30,29,28,31,30,31,30,31,30,31);\n    my %months = ();\n\
    \    my %days = ();\n    if ($date =~ m/^([0-9]{2})-([0-9]{2})-([0-9]{4})$/) {\n\
    \        $months = %months;\n        my $year = $3;\n        my $month = $1;\n\
    \        my $day = $2;\n        my $max_day = 31;\n        my $min_day = 1;\n\
    \        if ($month > 12) {\n            $valid_date = '';\n        } elsif ($month\
    \ == 1) {\n            $months[0]++;\n        } elsif ($month > 1 && $month <=\
    \ 12 && $day < $min_day) {\n            $valid_date = '';\n        } elsif ($month\
    \ > 1 && $month <= 12 && $day > $max_day) {\n            $valid_date = '';\n \
    \       } elsif ($month <= 1 && $day < $min_day) {\n            $valid_date =\
    \ '';\n        } elsif ($month <= 1 && $day > $max_day) {\n            $valid_date\
    \ = '';\n        } elsif ($month == 2 && $day < $min_day) {\n            $valid_date\
    \ = '';\n        } elsif ($month == 2 && $day > $max_day) {\n            $valid_date\
    \ = '';\n        } elsif ($month == 3) {\n            if ($day < $min_day) {\n\
    \                $valid_date = '';\n            } elsif ($day > $max_day) {\n\
    \                $valid_date = '';\n            } elsif ($day == $min_day) {\n\
    \                $months[3]++;\n            } elsif ($day == $max_day) {\n   \
    \             $months[3] = 0;\n            }\n        } elsif ($month == 4) {\n\
    \            if ($day < $min_day) {\n                $valid_date = '';\n     \
    \       } elsif ($day > $max_day) {\n                $valid_date = '';\n     \
    \       } elsif ($day == $min_day) {\n                $months[4]++;\n        \
    \    } elsif ($day == $max_day) {\n                $months[4] = 0;\n         \
    \   }\n        } elsif ($month == 5) {\n            if ($day < $min_day) {\n \
    \               $valid_date = '';\n            } elsif ($day > $max_day) {\n \
    \               $valid_date = '';\n            } elsif ($day == $min_day) {\n\
    \                $months[5]++;\n            } elsif ($day == $max_day) {\n   \
    \             $months[5] = 0;\n            }\n        } elsif ($month == 6) {\n\
    \            if (", "    # If the date string is empty, return ''.\n    return\
    \ '' unless ($date);\n    # If the number of days is less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12, return ''.\n    return '' unless ( !($date\
    \ =~ /^0?[1-9]|[12][0-9]|3[01]\\/[12]\\/[0-9]{4}$/ ) &&\n                    \
    \    !($date =~ /^0?[1-9]|[12][0-9]|3[01]\\/[0]\\/[0-9]{4}$/ ) &&\n          \
    \              !($date =~ /^0?[1-9]|[12][0-9]|3[01]\\/[1]\\/[0-9]{4}$/ ) &&\n\
    \                        !($date =~ /^0?[1-9]|[12][0-9]|3[01]\\/[2]\\/[0-9]{4}$/\
    \ ) &&\n                        !($date =~ /^0?[1-9]|[12][0-9]|3[01]\\/[3][0-1]\\\
    /[0-9]{4}$/ ) &&\n                        !($date =~ /^0?[1-9]|[12][0-9]|3[01]\\\
    /[3][0-1]\\/[0-9]{2}$/ ) &&\n                        !($date =~ /^0?[1-9]|[12][0-9]|3[01]\\\
    /[3][0-1]\\/[0-9]{2}$/ ) );", '    my %valid_date_format = ("%m%d%y" => 1, "%m/%d/%Y"
    => 1, "%m/%d/%y" => 1, "%m/%d/%Y" => 1, "%m-%d-%Y" => 1);', "    if(!defined($date)){\n\
    \        return 'The date is empty';\n    }\n    elsif($date eq \"\"){\n     \
    \   return 'The date is empty';\n    }", "    $date =~ /^\\d{0,2}\\-\\d{0,2}\\\
    -\\d{0,4}$/;\n    if ($date =~ /([02468][048]|[13579][26])\\-(0?[1-9]|[12][0-9]|3[01])\\\
    -\\d{0,4}/) { # validate date\n        my $valid_date = 1;\n        return $valid_date\
    \ if ($date =~ /^\\d\\-\\d\\-\\d\\d\\d\\d$/);\n        $valid_date = '';\n   \
    \     return $valid_date;\n    }\n    else { return ''; }\n}", '    # Your code
    goes here.', "    $date =~ /^([0-9]{2}|[0-9]{2})\\-([0-9]{2}|[0-9]{2})\\-([0-9]{4})$/;\n\
    \    $date = $1;\n    $month = $2;\n    $year = $3;\n    if ($month == '') {\n\
    \        $month = \"1\";\n    }\n    if ($month < 1 || $month > 12) {\n      \
    \  return \"Invalid month\";\n    }\n    if ($date < 1 || $date > 29) {\n    \
    \    return \"Invalid date\";\n    }\n    if (($month == 1 || $month == 3 || $month\
    \ == 5 || $month == 7 || $month == 8 || $month == 10 || $month == 12) && ($date\
    \ < 1 || $date > 30)) {\n        return \"Invalid date\";\n    }\n    if (($month\
    \ == 4 || $month == 6 || $month == 9 || $month == 11) && ($date < 1 || $date >\
    \ 31)) {\n        return \"Invalid date\";\n    }\n    if ($date != $month-$date-$year)\
    \ {\n        return \"Invalid date\";\n    }\n    return 1;\n}", "    if($date\
    \ eq \"\") {\n        return \"\";\n    }\n    if($date =~ m!^(\\d+)-(\\d+)-(\\\
    d+)$!) {\n        if($3 > 12 || $3 < 0) {\n            return \"\";\n        }\n\
    \        if($4 > 31 || $4 < 0) {\n            return \"\";\n        }\n      \
    \  if($2 > 31 || $2 < 0) {\n            return \"\";\n        }\n    }\n    if($date\
    \ =~ m!^(\\d+)-(\\d+)-(\\d+)$!) {\n        if($3 > 31 || $3 < 0) {\n         \
    \   return \"\";\n        }\n        if($4 > 31 || $4 < 0) {\n            return\
    \ \"\";\n        }\n        if($2 > 31 || $2 < 0) {\n            return \"\";\n\
    \        }\n    }\n    if($date =~ m!^(\\d+)-(\\d+)$!) {\n        if($3 > 12 ||\
    \ $3 < 0) {\n            return \"\";\n        }\n        if($2 > 31 || $2 < 0)\
    \ {\n            return \"\";\n        }\n    }\n    if($date =~ m!^(\\d+)-(\\\
    d+)-(\\d+)$!) {\n        if($3 > 31 || $3 < 0) {\n            return \"\";\n \
    \       }\n        if($4 > 31 || $4 < 0) {\n            return \"\";\n       \
    \ }\n        if($2 > 30 || $2 < 0) {\n            return \"\";\n        }\n  \
    \  }\n    if($date =~ m!^(\\d+)-(\\d+)-(\\d+)$!) {\n        if($3 > 31 || $3 <\
    \ 0) {\n            return \"\";\n        }\n        if($4 > 31 || $4 < 0) {\n\
    \            return \"\";\n        }\n        if($2 > 29 || $2 < 0) {\n      \
    \      return \"\";\n        }\n    }\n    if($date =~ m!^(\\d+)-(\\d+)$!) {\n\
    \        if($3 > 12 || $3 < 0) {\n            return \"\";\n        }\n      \
    \  if($2 > 31 || $2 < 0) {\n            return \"\";\n        }\n    }\n    if($date\
    \ =~ m!^(\\d+)-(\\d+)-(\\d+)$!) {\n        if($3 > 31 || $3 < 0) {\n         \
    \   return \"\";\n        }\n        if($4 > 31 || $4 < 0) {\n            return\
    \ \"\";\n        }\n        if($2 > 30 || $2 < 0) {\n            return \"\";\n\
    \        }\n    }\n    if($date =~ m!^(\\d+)-(\\d+)$!) {\n        if($3 > 12 ||\
    \ $3 < 0) {\n            return \"\";\n        }\n        if($2 > 31 || $2 < 0)\
    \ {\n            return \"\";\n        }\n    }\n    if($date =~ m!^(\\d+)-(\\\
    d+)-(\\d+)$", "    my $day;\n    if ($date =~ /^$/) {\n        return \"\";\n\
    \    }\n    if ($date =~ /^(0?[1-9]|[12][0-9]|3[01])-(0?[1-9]|1[012])-\\d{4}/)\
    \ {\n        if ($date =~ /^(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])-\\d{4}/)\
    \ {\n            if ($date =~ /^(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])-\\\
    d{4}/) {\n                $day = $1;\n                $date =~ /^(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])-\\\
    d{4}/;\n            }\n        }\n    }\n    if ($date =~ /^(0?[1-9]|[12][0-9]|3[01])-(0?[1-9]|1[012])-(20|19|20)\\\
    d{2}/) {\n        if ($date =~ /^(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])-(20|19|20)\\\
    d{2}/) {\n            $day = $1;\n            $date =~ /^(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])-(20|19|20)\\\
    d{2}$/;\n        }\n    }\n    if ($date =~ /^(0?[1-9]|[12][0-9]|3[01])-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])/)\
    \ {\n        if ($date =~ /^(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])-(0?[1-9]|1[012])/)\
    \ {\n            $day = $1;\n            $date =~ /^(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])-(0?[1-9]|1[012])/;\n\
    \        }\n    }\n    if ($date =~ /^(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])-(0?[1-9]|[12][0-9]|3[01])/)\
    \ {\n        if ($date =~ /^(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])-(0?[1-9]|[12][0-9]|3[01])/)\
    \ {\n            $day = $1;\n            $date =~ /^(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])-(0?[1-9]|[12][0-9]|3[01])/;\n\
    \        }\n    }\n    if ($date =~ /^(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])-(0?[1-9]|[12][0-9]|3[01]|0?[1-9]|1[012])/)\
    \ {\n        if ($date =~ ", "    if ($date eq \"\") {\n        return '';\n \
    \   }\n    my @date_list = split(//,$date);\n    my @month_list = (\"January\"\
    ,\"February\",\"March\",\"April\",\"May\",\"June\",\n      \"July\",\"August\"\
    ,\"September\",\"October\",\"November\",\"December\");\n    my $is_valid_date\
    \ = 1;\n    if (scalar(@date_list) != 3) {\n        $is_valid_date = 0;\n    }\n\
    \    elsif ($date_list[1] =~ /\\d/ && $date_list[2] =~ /\\d/) {\n        if ($date_list[1]\
    \ > 12 || $date_list[2] > 31 || $date_list[2] < 1) {\n            $is_valid_date\
    \ = 0;\n        }\n    }\n    elsif ($date_list[2] ne \"02\") {\n        if ($date_list[1]\
    \ > 12 || $date_list[1] < 1 || $date_list[2] > 31 || $date_list[2] < 1) {\n  \
    \          $is_valid_date = 0;\n        }\n    }\n    else {\n        if ($date_list[2]\
    \ > 29 || $date_list[2] < 1) {\n            $is_valid_date = 0;\n        }\n \
    \   }\n    if (!$is_valid_date) {\n        return '';\n    }\n    my $is_valid_month\
    \ = 1;\n    for (my $i=0;$i<scalar(@month_list);$i++) {\n        if ($month_list[$i]\
    \ ne $date_list[1]) {\n            $is_valid_month = 0;\n        }\n    }\n  \
    \  if (!$is_valid_month) {\n        return '';\n    }\n    my $month = $date_list[1];\n\
    \    my $day = $date_list[2];\n    my $year = $date_list[3];\n    if ($month <\
    \ 1 || $month > 12) {\n        $is_valid_date = 0;\n    }\n    if ($day < 1 ||\
    \ $day > 31) {\n        $is_valid_date = 0;\n    }\n    if ($year < 1000 || $year\
    \ > 9999) {\n        $is_valid_date = 0;\n    }\n    return $is_valid_date;\n}",
  "    my($days);\n    my($months);\n    my($year);", "    if ( !($date) )\n    {\n\
    \        return '';\n    }\n    chomp($date);\n    $date =~ s/^\\s+//;\n    $date\
    \ =~ s/\\s+$//;", "    return $date if $date eq '';\n    my(@months) = qw(January\
    \ February March April May June July August September October November December);\n\
    \    my(@days) = qw(1 2 3 4 5 6 7 8 9 10 11 12);\n    my(@days_in_month) = qw(31\
    \ 28 31 30 31 30 31 30 31 30 31);\n    my(@days_in_prev_month) = qw(31 30 31 30\
    \ 31 30 31 30 31 30 31);\n    my(@days_in_next_month) = qw(31 30 31 30 31 30 31\
    \ 30 31 30 31);\n    my(@date) = split '-', $date;\n    my($year,$month,$day)\
    \ = @date[0,3];\n    my($year) = $year + 1900;\n    if ($month =~ /^1[3-5]$/)\
    \ {\n        return $days_in_month[$month-1];\n    }\n    elsif ($month =~ /^4[6-9]$/)\
    \ {\n        return $days_in_prev_month[$month-1];\n    }\n    elsif ($month =~\
    \ /^2[0-1]$/) {\n        return $days_in_next_month[$month-1];\n    }\n    elsif\
    \ ($month =~ /^[1-9][0-9]?$/) {\n        return $days[$month-1];\n    }\n    return\
    \ '';\n}", "    $date     =~ /^([0-9]{2})-([0-9]{2})-([0-9]{4})$/;\n    $year\
    \     =~ /^([0-9]{4})$/;", "    my $day = 0;\n    my $month = 0;\n    my $year\
    \ = 0;", "    return 1 if length($date) == 0;\n    return 1 if $date !~ /^(\\\
    d{2}-\\d{2}-\\d{4})$/;\n    return 1 if $date !~ /^(\\d{2}\\/\\d{2}\\/\\d{4})$/;\n\
    \    return 1 if $date !~ /^(\\d{2}\\-\\d{2}\\-\\d{4})$/;\n    return 1 if $date\
    \ !~ /^(\\d{4}\\-\\d{1,2}\\-\\d{1,2})$/;\n    return 1 if $date !~ /^(\\d{1,4}\\\
    -\\d{1,2}\\-\\d{1,2})$/;\n    return 1 if $date !~ /^(\\d{1,4}\\-\\d{1,2}\\/\\\
    d{1,2})$/;\n    return 1 if $date !~ /^(\\d{1,2}\\-\\d{1,2}\\-\\d{1,2})$/;\n \
    \   return 1 if $date !~ /^(\\d{1,2}\\-\\d{1,2}\\/\\d{1,2})$/;\n    return 1 if\
    \ $date !~ /^(\\d{1,2}\\/\\d{1,2}\\-\\d{1,2})$/;\n    return 1 if $date !~ /^(\\\
    d{1,2}\\/\\d{1,2}\\/\\d{1,2})$/;\n    return 1 if $date !~ /^(\\d{1,2})\\-(\\\
    d{1,2})\\-(\\d{1,4})$/;\n    return 1 if $date !~ /^(\\d{1,2})\\-(\\d{1,2})\\\
    -(\\d{1,4})$/;\n    return 1 if $date !~ /^(\\d{1,2})\\-(\\d{1,2})\\/\\d{1,4}$/;\n\
    \    return 1 if $date !~ /^(\\d{1,2})\\-(\\d{1,2})\\/\\d{1,2}$/;\n    return\
    \ 1 if $date !~ /^(\\d{1,2})\\-\\d{1,2}\\-\\d{1,2}$/;\n    return 1 if $date !~\
    \ /^(\\d{1,2})\\-\\d{1,2}\\/\\d{1,2}$/;\n    return 1 if $date !~ /^(\\d{1,2})\\\
    -\\d{1,2}\\/\\d{1,2}$/;\n    return 1 if $date !~ /^(\\d{1,2})\\-\\d{1,2}\\/\\\
    d{1,2}$/;\n    return 1 if $date !~ /^(\\d{1,2})\\/\\d{1,2}\\-\\d{1,2}$/;\n  \
    \  return 1 if $date !~ /^(\\d{1,2})\\/\\d{1,2}\\-\\d{1,2}$/;\n    return 1 if\
    \ $date !~ /^(\\d{1,2})\\/\\d{1,2}\\/\\d{1,2}$/;\n    return 1 if $date !~ /^(\\\
    d{1,2})\\/\\d{1,2}\\/\\d{1,2}$/;\n    return 1;\n}", "    my ($day, $month, $year);\n\
    \    \n    if($date eq '') {\n        return '';\n    }\n    \n    ($day, $month,\
    \ $year) = split(/\\//, $date);\n    \n    my %months = map { $_ => 1 } (1 ..\
    \ 12);\n    my %leap  = map { $_ => 1 } (1 .. 31);\n    my %days  = map { $_ =>\
    \ 1 } (1 .. 31);\n    \n    if($month < 1 || $month > 12 || $day < 1 || $day >\
    \ 31 || (!exists($months{$month}) || !$months{$month}) || (!exists($days{$day})\
    \ || !$days{$day})) {\n        return '';\n    }\n    \n    my $yearcheck = (($year\
    \ % 4 == 0) && ($year % 100 != 0)) || ($year % 400 == 0);\n    \n    if ($month\
    \ == 2 && !$yearcheck) {\n        return '';\n    }\n    \n    return 1;\n}",
  "    $date =~ /^[0-9]{2}-[0-9]{2}-[0-9]{4}$/ || return '';\n    my %months = qw(\
    \ 1 3 5 7 8 10 12 );\n    my %days = qw( 1 30 29 );\n    my %years = qw( 01 02\
    \ 04 2006 );\n    my %months_count = qw( 01 01 01 01 01 01 01 01 01 01 01 01 01\
    \ 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01\
    \ 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01\
    \ 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01\
    \ 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01\
    \ 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01\
    \ 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01\
    \ 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01\
    \ 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01\
    \ 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01\
    \ 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01\
    \ 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01\
    \ 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01\
    \ 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01\
    \ 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01\
    \ 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01\
    \ 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01\
    \ 01 01 01 01 01 01 01 ", "    # Write your code here\n    # return '' if $date\
    \ eq '';\n    my($year, $month, $day) = split '-', $date;\n    my($days_in_month)\
    \ = @days_in_month;\n    my $daysInMonth = daysInMonth($month);\n    \n    $day\
    \ =~ /^\\d{1,6}$/;\n    \n    $year =~ /^\\d{4}$/;\n    \n    $day <= $days_in_month;\n\
    \    $day >= 1 && $day <= $daysInMonth;\n    \n    $month >= 1 && $month <= 12;\n\
    \    \n    return 1;\n}\n</code>\n<|/ a tags=perl,date |>\n<| c |>\nThat worked\
    \ for valid dates but for invalid dates it's showing error as \"Out of bound index\"\
    . can you please help me out with it.\n<|/ c |>\n<| c |>\nI added some checks\
    \ for valid dates and invalid dates. Let me know if that works.\n<|/ c |>\n<|\
    \ c |>\nYes it worked thank you so much. I was stuck on this since last 2 days.\
    \ Thanks again for your help.\n<|/ c |>\n<| c |>\nGreat, glad I could help. Happy\
    \ coding!\n<|/ c |>\n<| c |>\n, `daysInMonth` should be `@days_in_month`. Also\
    \ I think you meant `@month_names`.\n<|/ c |>\n<| a |>\nI wrote a short and simple\
    \ module for validating dates.  It does not use any external libraries or modules.\
    \  It works in perl5.\n<code>", "    $date =~ s/^\\s+//;\n    $date =~ s/\\s+$//;\n\
    \    $date =~ s/^0+//;\n    $date =~ s/^-?(\\d+)-(\\d+)-(\\d+)$/\\1-\\2-\\3/;\n\
    \    my ($m, $d, $y) = $date =~ m/(\\d+)-(\\d+)-(\\d+)$/;\n    $m <= 12 && $d\
    \ < 31 && $d > 29 && $y >= $min_year && $y <= $max_year;\n}", "    \n    if(!defined\
    \ $date) {\n        carp \"Invalid date '$date'.\\n\";\n        return \"-1\"\
    ;\n    }\n    \n    if($date =~ /\\A\\s*$/ || !$date){\n        return \"0\";\n\
    \    }\n    \n    my @d = split(/\\-/,$date);\n    \n    if(@d < 3 || @d > 6){\n\
    \        return \"-1\";\n    }\n    \n    $d[2] -= 1;\n    \n    if($d[0] > 12\
    \ || $d[1] > 31 || $d[2] > 30 || $d[1] > 29 || $d[0] > 12 || $d[0] < 1 || $d[1]\
    \ < 1 || $d[2] < 1 || $d[0] > 12 || $d[0] < 1 || $d[1] > 12 || $d[1] < 1) {\n\
    \        return \"-1\";\n    }\n    \n    return 1;\n}", "    \n    if ( $date\
    \ !~ /^\\s*$/ ) {\n        return 1;\n    }\n    \n    # Valid date rules\n  \
    \  if ( !$date ) {\n        return '';\n    }\n    \n    # Checking month\n  \
    \  if ( $date =~ /^(1[012]|0?[1-9])-[0-3]?[0-9](\\-(0?[0-9]{2}|1[0-4]))?$/ ) {\n\
    \        return 1;\n    }\n    \n    if ( $date =~ /^(04|06|09|11)-[0-3]?[0-9](\\\
    -(0?[0-9]{2}|1[0-4]))?$/ ) {\n        return 1;\n    }\n    \n    if ( $date =~\
    \ /^[0-1](\\-(0?[0-9]{2}|1[0-4]))?$/ ) {\n        return 1;\n    }\n    \n   \
    \ # Checking days\n    if ( $date =~ /^[0-3][0-9]\\-(0?[0-9]{2}|1[0-4])?$/ ) {\n\
    \        return 1;\n    }\n    \n    if ( $date =~ /^[0-1](\\-(0?[0-9]{2}|1[0-4]))?$/\
    \ ) {\n        return 1;\n    }\n    \n    # Checking year\n    if ( $date =~\
    \ /^[0-3]?\\d(\\-(0?[0-9]{2}|1[0-4]))?$/ ) {\n        return 1;\n    }\n    \n\
    \    if ( $date =~ /^[0-1](\\-(0?[0-9]{2}|1[0-4]))?$/ ) {\n        return 1;\n\
    \    }\n    \n    # Invalid date rules\n    return '';\n}", "    if (length($date)\
    \ == 0) {\n        return '';\n    }", "    my $result = 1;\n    if($date ne \"\
    \") {\n        $result = validate(\"mmddyyyy\", $date);\n        if($result eq\
    \ '') {\n            $result = validate(\"mmdd\", $date);\n        }\n       \
    \ if($result eq '') {\n            $result = validate(\"yyyy\", $date);\n    \
    \    }\n    }\n    return $result;\n}", "    chomp($date);\n    my($date1,$date2,$year,$month,$day)\
    \ = split(/\\-/, $date);\n    my $result = 1;\n    if($date !~ /^\\s*$/ || $day\
    \ < 1 || $day > 31)\n    {\n        $result = \"\";\n    }\n    elsif($day < 29\
    \ && $month < 2)\n    {\n        $result = \"\";\n    }\n    elsif($day > 29 &&\
    \ $month > 12)\n    {\n        $result = \"\";\n    }\n    elsif($month < 1 ||\
    \ $month > 12)\n    {\n        $result = \"\";\n    }\n    return $result;\n}",
  "    $date =~ /(\\d{2})-?(\\d{2})-?(\\d{4})/;\n    if ($#_ >= 0) {\n        $date\
    \ = \"$1-$2-$3\";\n        $date =~ s/^-?(\\d+)/$1/;\n        $date =~ s/\\D//g;\n\
    \        return ($date eq '') ? 1 : '';\n    } else {\n        return '';\n  \
    \  }\n}", "    my($valid) = 0;\n    my($d, $m, $y);\n    my($valid_month, %month);\n\
    \    my($valid_days, %day);", "    return 1 if $date eq ''; # Not Empty\n    return\
    \ '' if $date eq '0'; # Not a valid date\n    $date =~ /^(\\d\\d)-(\\d\\d)-(\\\
    d\\d\\d\\d)$/; # Check format\n    return 1 if ($3 <= 12 && $3 >= 31) && ($2 >=\
    \ 1 && $2 <= 12); # Months must be in 1 to 12\n    return 1 if ($2 <= 12 && $2\
    \ >= 31);\n    return 1 if ($2 <= 30);\n    return 1 if $2 <= 29;\n    return\
    \ 1 if $3 <= 12;\n    return '';\n}\n</code>\n<|/ a |>\n<| c |>\nThank you for\
    \ answering my question.  Your code is very helpful.  I've been struggling with\
    \ this problem for a while now and I appreciate your help.\n<|/ c |>\n<| a dscore=1\
    \ |>\nThe first problem you have is with your regex which you are using to validate\
    \ the date. The correct regex is : ^(0[1-9]|1[012])-(3[01]|[12][0-9]|0[1-9])-(20[0-9]{2})$\
    \ This regex would match date format as 03/11/2000 but won't match 04/11/2000.\
    \ Also, note that this regex would match 03/11/2016 and 03/11/2016 (notice the\
    \ extra space in between dates). To avoid that you can add another check in your\
    \ regex to check number of days. \nYour regex would look like : ^(0[1-9]|1[012])-(3[01]|[12][0-9]|0[1-9])-(20[0-9]{2})$|^(0[1-9]|1[012])-(3[01]|[12][0-9]|0[1-9])-(20[0-9]{2})$|^(0[1-9]|1[012])-(3[01]|[12][0-9]|0[1-9])-(20[0-9]{2})$|^(0[1-9]|1[012])-(3[01]|[12][0-9]|0[1-9])-(20[0-9]{2})$\n\
    Regex Demo\nAnd here is the working code :\n<code>\nuse strict;\nuse warnings;",
  "    my(@months) = qw(January February March April May June July August September\
    \ October November December);\n    my(@days) = qw(1 2 3 4 5 6 7 8 9 10 11 12 13\
    \ 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 );\n    my(@days_days)\
    \ = qw(31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7\
    \ 6 5 4 );\n    my(@day_month) = qw(31 30 31 30 31 31 30 31 30 31 30 31 31 30\
    \ 31 30 31 30 31 30 31 );\n    my($days_months, $days_days);\n    my @months_list;\n\
    \    my @days_list;", "    chomp($date);\n    my @month = split(//, $date);\n\
    \    my $day = int($month[0]);\n    my $year = int($month[1]);\n    if ($month[3]\
    \ < 1 || $month[3] >= 12) { \n\t$day = 1;\n    }\n    if ($month[4] < 1 || $month[4]\
    \ >= 12) {\n\t$day = 1;\n    }\n    my $mm;\n    if ($month[3] < 1 || $month[3]\
    \ >= 12) {\n\t$mm = 1;\n    }\n    elsif ($month[3] < 4) {\n\t$mm = 3;\n    }\n\
    \    else {\n\t$mm = 4;\n    }\n    if ($month[5] < 1 || $month[5] >= 12) {\n\t\
    $day = 1;\n    }\n    elsif ($month[5] < 4) {\n\t$day = 31;\n    }\n    else {\n\
    \t$day = 30;\n    }\n    if ($month[6] < 1 || $month[6] >= 12) {\n\t$day = 1;\n\
    \    }\n    elsif ($month[6] < 4) {\n\t$day = 31;\n    }\n    else {\n\t$day =\
    \ 30;\n    }\n    if ($day < 1 || $day > 31) {\n\t$day = 1;\n    }\n    if ($day\
    \ < 1 || $day > 30) {\n\t$day = 1;\n    }\n    if ($day < 1 || $day > 29) {\n\t\
    $day = 1;\n    }\n    if ($mm < 1 || $mm > 12) {\n\t$mm = 1;\n    }\n    if ($mm\
    \ < 4 || $mm > 12) {\n\t$mm = 3;\n    }\n    if ($mm < 6 || $mm > 12) {\n\t$mm\
    \ = 4;\n    }\n    if ($mm < 9 || $mm > 12) {\n\t$mm = 6;\n    }\n    if ($mm\
    \ < 11 || $mm > 12) {\n\t$mm = 9;\n    }\n    if ($mm < 12 || $mm > 12) {\n\t\
    $mm = 11;\n    }\n    if ($mm < 1 || $mm > 12) {\n\t$mm = 1;\n    }\n    if ($day\
    \ > $year + 1900) {\n\t$day = 1;\n    }\n    elsif ($day > $year + 1999) {\n\t\
    $day = 1;\n    }\n    if ($day > $year + 2001) {\n\t$day = 1;\n    }\n    if ($day\
    \ > $year + 2010) {\n\t$day = 1;\n    }\n    if ($day > $year + 2013) {\n\t$day\
    \ = 1;\n    }\n    if ($day > $year + 2016) {\n\t$day = 1;\n    }\n    if ($day\
    \ > $year + 2017) {\n\t$day = 1;\n    }\n    if ($day > $year + 2019) {\n\t$day\
    \ = 1;\n    }\n    if ($day > $year", "    return 1 if !$date or length($date)\
    \ < 6;\n    return 1 if ($date !~ /^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$/);\n\
    \    return 1 if ($date !~ /^([0-9]{1,2})\\/([0-9]{1,2})\\/([0-9]{4})$/);\n  \
    \  return 1 if ($date !~ /^(([1]{1}[\\3-\\1]{1})|([2-9]{1})|([2-9]{1})\\-([0-9]{4})|([2-9]{1})\\\
    -([0-9]{2})|([2-9]{1})\\-([0-9]{2}))$/);", "    my($month,$day,$year) = split(\"\
    -\",$date);\n    $month = $month - 1;\n    $year += 1900;\n    if ($day < 1 ||\
    \ $day > 31) {\n        $day == \"\";\n    }\n    if ($month < 1 || $month > 12)\
    \ {\n        $month == \"\";\n    }\n    if ($day == \"\") {\n        $day ==\
    \ \"\";\n    }\n    \n    if ($month > 3 && $year >= 2020) {\n        $month ==\
    \ \"\";\n    }\n    \n    if ($month < 3 || $month > 11) {\n        $month ==\
    \ \"\";\n    }\n    \n    if ($month > 1 && $day > 29) {\n        $day == \"\"\
    ;\n    }\n    \n    if ($month == \"\") {\n        $month == \"\";\n    }\n  \
    \  \n    if ($day == \"\") {\n        $day == \"\";\n    }\n    return ($month\
    \ < 3 || $month > 12 || $day < 1 || $day > 31);\n}", "    my(@months) = (\"January\"\
    , \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\"\
    , \"September\", \"October\", \"November\", \"December\");\n    my($month,$days,$year)\
    \ = (0,0,0);", "    my($year, $month, $day) = split /\\-/, $date;\n    # Handle\
    \ \"mm-dd-yyyy\" format\n    if ($day == 0) { $day = 1; }\n    if ($month == 0)\
    \ { $month = 1; }\n    if ($month > 12) {\n        my $msg = $month > 12 ? 'months'\
    \ : 'months';\n        return \"$msg greater than 12\";\n    }\n    if ($day <\
    \ 1 || ($day > 31 && ($month == 0 || $month == 2))) {\n        my $msg = $day\
    \ < 1 ? 'days' : 'days';\n        return \"$msg greater than or equal to 1 $msg\"\
    ;\n    }\n    if ($month < 1 || ($month > 12 && $day < 1)) {\n        my $msg\
    \ = $month < 1 ? 'months' : 'months';\n        return \"$msg greater than or equal\
    \ to 12\";\n    }\n    if ($year < 1000 || $year > 3000 || $year < $month || $year\
    \ > $month+11) {\n        return \"invalid year\";\n    }\n    return 1;\n}",
  "    my %yearmonthDays = (1 => 31, 3 => 30, 5 => 29, 7 => 28, 8 => 28, 10 => 30,\
    \ 12 => 31);\n    my %invalidMonths = (0 => 1, 4 => 1, 6 => 1, 9 => 1, 11 => 1,\
    \ 2 => 0, 5 => 0, 7 => 0, 8 => 0, 10 => 0, 12 => 0);\n    my %validMonths = (1,\
    \ 3, 5, 7, 8, 10, 12);", "    my(@valid) = (\"01-01-2000\", \"02-03-2000\", \"\
    03-05-2000\", \"07-08-2000\", \"08-10-2000\", \"10-12-2000\", \"12-02-2000\",\
    \ \"12-31-2000\", \"01-01-2001\", \"03-05-2001\", \"07-08-2001\", \"08-10-2001\"\
    , \"10-12-2001\", \"12-02-2001\", \"12-31-2001\", \"01-01-1991\", \"03-05-1991\"\
    , \"07-08-1991\", \"08-10-1991\", \"10-12-1991\", \"12-02-1991\", \"12-31-1991\"\
    );\n    my(@invalid) = (\"02-31-2000\", \"03-1-5000\", \"03-5-2000\", \"04-1-1001\"\
    , \"04-1-1991\", \"04-1-2000\", \"04-01-2000\", \"06-00-2012\", \"06-00-2015\"\
    , \"06-00-2020\", \"06-04-2020\", \"06-00-2001\", \"06-04-2001\", \"06-04-2015\"\
    , \"06-01-2001\", \"06-01-2002\", \"06-01-2015\", \"06-01-2019\", \"06-01-2020\"\
    , \"06-01-2020\", \"06-01-2020\", \"06-01-2020\", \"06-01-2020\", \"06-01-2020\"\
    , \"06-01-2020\", \"06-01-2020\", \"06-01-2020\", \"06-01-2020\", \"06-01-2020\"\
    , \"06-01-2020\", \"06-01-2020\", \"06-01-2020\", \"06-01-2020\", \"06-01-2020\"\
    , \"06-01-2020\", \"06-01-2020\", \"06-01-2020\", \"06-01-2020\", \"06-01-2020\"\
    , \"06-01-2020\", \"06-01-2020\", \"06-01-2020\", \"06-01-2020\", \"06-01-2020\"\
    , \"06-01-2020\", \"06-01-2020\", \"06-01-2020\", \"06-01-2020\", \"06-01-2020\"\
    , \"06-01-2020\", \"06-01-2020\", \"06-01-2020\", \"06-01-2020\", \"06-01-2020\"\
    , \"06-01-2020\", \"06-01-2020\", \"06-01-2020\", \"06-01-2020\", \"06-01-2020\"\
    , \"06-01-2020\", \"06-01-2020\", \"06-01-2020\", \"06-01-2020\", \"06-01-2020\"\
    , \"06-01-2020\", \"06-01-2020\", \"06-01-2020\", \"06-01-2020\", \"06-01-2020\"\
    , \"06-01-2020\", \"06-01-2020\", \"06-01-2020\", \"06-01-2020\", \"06-01-2020\"\
    , \"06-01-2020\", \"06-01-2020\", \"06-01-2020\", \"06-01-2020", "    my ($days,\
    \ $month, $year) = split '-', $date;\n    if ($days > 31) {\n        $days = \"\
    31\";\n    } elsif ($days < 1) {\n        $days = \"1\";\n    } elsif ($days >\
    \ 30) {\n        $days = \"30\";\n    } elsif ($days < 1) {\n        $days = \"\
    1\";\n    }\n    if ($month > 12) {\n        $month = \"12\";\n    } elsif ($month\
    \ < 1) {\n        $month = \"1\";\n    }\n    if ($year < 100 || $year > 9999)\
    \ {\n        $year = \"0000\";\n    }\n    return ($days . \"-\" . $month . \"\
    -\" . $year);\n}", "    $date =~ /^[0-9]{2}-[0-9]{1,2}-[0-9]{4}$/ or return '';\n\
    \    my $day = $1;\n    my $month = $2;\n    my $year = $3;", "    my($day) =\
    \ $date{day};\n    my($month) = $date{month};\n    my($year) = $date{year};\n\
    \    my($months_map) = (\n        1 => [ 1 => 31, 3 => 30, 5 => 29, 7 => 28, 8\
    \ => 28 ],\n        2 => [ 1 => 31, 3 => 30, 5 => 29, 7 => 28, 8 => 28 ],\n  \
    \      4 => [ 1 => 31, 3 => 30, 5 => 29, 7 => 28, 8 => 28 ],\n        6 => [ 1\
    \ => 31, 3 => 30, 5 => 29, 7 => 28, 8 => 28 ]\n    );\n    \n    # Return empty\
    \ string if the date string is empty.\n    return $date if ($date !~ /^\\s*$/);",
  "    $date =~ /^\\d{4}-\\d{1,2}-\\d{1,2}$/;\n    return $date if $date !~ /^\\s*$/;\n\
    \    $date =~ m!^\\d{1,2}-\\d{1,2}-\\d{4}$!;\n    return $date if $date !~ /^\\\
    d{1,2}-\\d{1,2}-\\d{4}$/;\n    $date =~ m!^\\d{1,2}\\.\\d{1,2}\\.\\d{4}$!;\n \
    \   return $date if $date !~ /^\\d{1,2}\\.\\d{1,2}\\.\\d{4}$/;\n    $date =~ m!^\\\
    d{1,2}\\.\\d{1,2}\\.\\d{4}\\s!;\n    return $date if $date !~ /^\\d{1,2}\\.\\\
    d{1,2}\\.\\d{4}\\s$/;\n    return '';\n}", "    my(@months) = qw(1 3 5 7 8 10\
    \ 12);\n    my(@days) = qw(31 30 29 28);", "    return '' unless ( defined($date)\
    \ && (length($date) > 0) );\n    my($day, $month, $year) = split('-', $date);\n\
    \    return '' if ( $month < 1 || $month > 12 );\n    return '' if ( $day < 1\
    \ || $day > 29 );\n    return '' if ( $month == 2 && $day == 29 );\n    return\
    \ '' if ( $month == 2 && $day == 28 );\n    return '' if ( $day > 31 );\n    if\
    \ ( $month == 1 && $day == 29 ) {\n        return '';\n    }\n    if ( $month\
    \ == 3 && $day == 30 ) {\n        return '';\n    }\n    return '1';\n}", "  \
    \  my($check);\n    my(@month) = split '-', $date;\n    my(@day) = split '-',\
    \ $check;\n    \n    my ($year, $month, $day);\n    \n    if (@month > 12) {\n\
    \        return '';\n    }\n    \n    foreach my $m (@month) {\n        if ($m\
    \ < 1 || $m > 12) {\n            return '';\n        }\n    }\n    \n    foreach\
    \ my $d (@day) {\n        if ($d < 1 || $d > 31) {\n            return '';\n \
    \       }\n    }\n    \n    if (($day[2] < 1 ) || ($day[2] > 31)) {\n        return\
    \ '';\n    }\n    \n    if (($day[1] < 1 ) || ($day[1] > 30)) {\n        return\
    \ '';\n    }\n    \n    if (($day[0] < 1 ) || ($day[0] > 29)) {\n        return\
    \ '';\n    }\n    \n    \n    return 1;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
