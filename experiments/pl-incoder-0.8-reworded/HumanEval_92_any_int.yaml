name: HumanEval_92_any_int
language: pl
prompt: "# Create a function that takes 3 numbers.\n# Returns true if one of the numbers\
  \ is equal to the sum of the other two, and all numbers are integers.\n# Returns\
  \ false in any other cases.\n# Examples\n# >>> any_int(5, 2, 7)\n# 1\n# >>> any_int(3,\
  \ 2, 2)\n# \"\"\n# >>> any_int(3, -2, 1)\n# 1\n# >>> any_int(3.6, -2.2, 2)\n# \"\
  \"\nsub any_int {\n    my($x, $y, $z) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&any_int;\n\
  \        if(eq_deeply($candidate->(2, 3, 1),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(2.5, 2, 3),\"\"))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.5,\
  \ 5, 3.5),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
  \       if(eq_deeply($candidate->(2, 6, 2),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 2, 2),1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2.2,\
  \ 2.2, 2.2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(-4, 6, 2),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 1, 1),1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
  \ 4, 7),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
  \  if(eq_deeply($candidate->(3.0, 4, 7),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    return if ($x != $y);\n    return if ($x != $z);\n    return if\
    \ ($y != $z);\n    return 1;\n}", "    return \"\" if $x != $y && $x != $z;\n\
    \    return 1 unless $x =~ /[+-]?\\d+/;\n    return 0 unless $y =~ /[+-]?\\d+/;\n\
    \    return 0 unless $z =~ /[+-]?\\d+/;\n    return $x != $y || $x != $z;\n}",
  "    return 1 if $x == $y + $z && $x != $y && $x != $z;\n    return 0;\n}", "  \
    \  $x =~ /[+-]?\\d+/;\n    if ($x eq $y + $z) {\n\t1;\n    }\n    else {\n\t0;\n\
    \    }\n}", "    my($sum) = &add2($x, $y);\n    return 1 if $sum == $z;\n    return\
    \ 0 if $sum > $z;\n    return 0 if $sum < $z;\n    return 1;\n}\n</cell>\n<cell>",
  "    my $is_int = $x =~ /^[-+]?\\d+$/ && $y =~ /^[-+]?\\d+$/ && $z =~ /^[-+]?\\\
    d+$/;\n    return $is_int ? 1 : 0;\n}", "    my $ret = 0;\n    if ($x>=0 and $y>=0\
    \ and $z>=0) {\n\t$ret = $x + $y + $z =~ /^(\\d+)$/;\n    } elsif ($x>=0 and $y>=0\
    \ and $z<0) {\n\t$ret = $x + $y + $z =~ /^(\\d+)$/;\n    } elsif ($x>=0 and $y<0\
    \ and $z>0) {\n\t$ret = $x + $y + $z =~ /^(\\d+)$/;\n    } elsif ($x<0 and $y>=0\
    \ and $z>=0) {\n\t$ret = $x - $y + $z =~ /^(\\d+)$/;\n    } elsif ($x<0 and $y>=0\
    \ and $z<0) {\n\t$ret = $x - $y + $z =~ /^(\\d+)$/;\n    } elsif ($x<0 and $y<0\
    \ and $z>0) {\n\t$ret = $x - $y + $z =~ /^(\\d+)$/;\n    } elsif ($x<0 and $y<0\
    \ and $z<0) {\n\t$ret = $x - $y + $z =~ /^(\\d+)$/;\n    } elsif ($x>=0 and $y>=0\
    \ and $z>=0) {\n\t$ret = $x + $y + $z =~ /^(\\d+)$/;\n    } elsif ($x>=0 and $y>=0\
    \ and $z<0) {\n\t$ret = $x + $y + $z =~ /^(\\d+)$/;\n    } elsif ($x>=0 and $y<0\
    \ and $z>0) {\n\t$ret = $x + $y + $z =~ /^(\\d+)$/;\n    } elsif ($x<0 and $y>=0\
    \ and $z>=0) {\n\t$ret = $x - $y + $z =~ /^(\\d+)$/;\n    } elsif ($x<0 and $y>=0\
    \ and $z<0) {\n\t$ret = $x - $y + $z =~ /^(\\d+)$/;\n    } elsif ($x<0 and $y<0\
    \ and $z>0) {\n\t$ret = $x - $y + $z =~ /^(\\d+)$/;\n    } elsif ($x<0 and $y<0\
    \ and $z<0) {\n\t$ret = $x - $y + $z =~ /^(\\d+)$/;\n    }\n    if ($ret) {\n\t\
    return 1;\n    } else {\n\treturn 0;\n    }\n}\n1;", "    my($a_x, $a_y, $a_z)\
    \ = @_;\n    if ($x == $a_x || $y == $a_y || $z == $a_z) {\n        return 1;\n\
    \    }\n    else {\n        return 0;\n    }\n}", "    $x != 0 && $y != 0 && $z\
    \ != 0 && $x == $y + $z;\n}", "    return undef if ($x != $y);\n    return undef\
    \ if ($x != $z);\n    return undef if ($y != $z);\n    return undef if ($x !~\
    \ /^\\d+$/);\n    return undef if ($y !~ /^\\d+$/);\n    return undef if ($z !~\
    \ /^\\d+$/);", "    return 0 unless $x->is_int && $y->is_int && $z->is_int;\n\
    \    return 1 if $x == $y + $z;\n    return 1 if $x == $y - $z;\n    return 1\
    \ if $y == $x - $z;\n    return 1;\n}", "    my $sum = abs $x + $y + $z;\n   \
    \ return 1 if $sum == $x || $sum == $y || $sum == $z;\n    return;\n}", "    if\
    \ ($x == $z) { return 1; }\n    if ($x == $y) { return 1; }\n    if ($y == $z)\
    \ { return 1; }\n    if ($x == 0) { return 1; }\n    if ($y == 0) { return 1;\
    \ }\n    if ($z == 0) { return 1; }\n    return '';\n}", "    return $x if defined\
    \ $x and $x == $y and $x =~ /^-?\\d+$/ and $x != 0 and $x != 1;\n    return $y\
    \ if defined $y and $y == $z and $y =~ /^-?\\d+$/ and $y != 0 and $y != 1;\n \
    \   return $z if defined $z and $z == $x and $z =~ /^-?\\d+$/ and $z != 0 and\
    \ $z != 1;\n    return \"\";\n}", "    return $x if $x == $y || $x == $z;\n  \
    \  return $x if $y == $z;\n    return 0;\n}", "    return \"\" if $x==$y||$y==$z||$z==$x||int($x)==int($y)||int($y)==int($z);\n\
    \    return 1;\n}", "    my $sum = $x + $y;\n    return $sum == $z ? 1 : 0;\n}",
  "    if ( $x == $y + $z ) { return 1 }\n    if ( $x == $y - $z ) { return 1 }\n\
    \    if ( $y == $z + $x ) { return 1 }\n    if ( $y == $z - $x ) { return 1 }\n\
    \    return \"\"\n}\n</cell>\n<cell>", "    my $s = $x + $y + $z;\n    if ($s\
    \ == $x or $s == $y or $s == $z) {\n        return 1;\n    }\n    else {\n   \
    \     return 0;\n    }\n}", "    my $sum = $x + $y + $z;\n    return 1 if $x ==\
    \ $sum && $y == $sum && $z == $sum;\n    return 0 if $x == $sum || $y == $sum\
    \ || $z == $sum;\n    return 1;\n}", "    return $x + ($y == $z) ? \"1\" : \"\
    0\";\n}", "    return $x + ($y == $z ? 1 : 0) + ($z == $x ? 1 : 0) > 0;\n}", " \
    \   return 1 unless defined $x && defined $y && defined $z;\n    return $x + $y\
    \ == $z if !$x && !$y && !$z;\n    return $x || $y || $z;\n}", "    return (int($x)\
    \ + int($y) + int($z)) % 10 == 0;\n}", "    return 0 unless $x == $y + $z && $x\
    \ && $y && $z;\n    my($s, $u, $v) = $x + $y;\n    $s == $u || ($s == $v && $u\
    \ == $v) ? 1 : 0;\n}", "    my ($x_int, $y_int, $z_int) = @_;\n    my $sum = $x\
    \ + $y + $z;\n    my $is_x_int = ($x_int =~ /^-?[0-9]+$/);\n    my $is_y_int =\
    \ ($y_int =~ /^-?[0-9]+$/);\n    my $is_z_int = ($z_int =~ /^-?[0-9]+$/);\n  \
    \  my $is_x_plus_y_or_z_int = $x_int + $y_int > $sum;\n    my $is_y_plus_z_or_x_int\
    \ = $y_int + $z_int > $sum;\n    my $is_x_minus_y_or_z_int = $x_int - $y_int >\
    \ $sum;\n    my $is_y_minus_z_or_x_int = $y_int - $z_int > $sum;\n    my $is_x_plus_z_or_x_int\
    \ = $x_int + $z_int > $sum;\n    my $is_y_plus_z_or_y_int = $y_int + $z_int >\
    \ $sum;\n    my $is_x_minus_y_or_z_int = $x_int - $y_int > $sum;\n    my $is_z_minus_x_or_y_int\
    \ = $z_int - $x_int > $sum;\n    return !($is_x_int && !$is_y_int && !$is_z_int)\
    \ ||\n           ($is_x_plus_y_or_z_int && !$is_y_plus_z_or_x_int) ||\n      \
    \     ($is_x_minus_y_or_z_int && !$is_y_minus_z_or_x_int) ||\n           ($is_x_plus_z_or_x_int\
    \ && !$is_y_plus_z_or_y_int) ||\n           ($is_x_minus_y_or_z_int && !$is_z_minus_x_or_y_int);\n\
    }", "    $x =~ s/^-*//;\n    $y =~ s/^-*//;\n    $z =~ s/^-*//;\n    my $sum =\
    \ intval($x) + intval($y) + intval($z);\n    if ($sum == intval($x) + intval($y)\
    \ + intval($z)) {\n        return 1;\n    } else {\n        return \"\";\n   \
    \ }\n}\n</code>\n<|/ a |>\n<| a dscore=0 tags=regex,perl |>\nA quick perl program\
    \ to solve this problem:\n<code>\nuse warnings;\nuse strict;", "    my ($sum,\
    \ $sum_str);\n    if ($x != 0) {\n        $sum_str = $x;\n    }\n    else {\n\
    \        $sum_str = \"0\";\n    }\n    if ($y != 0) {\n        $sum_str .= $y;\n\
    \    }\n    else {\n        $sum_str .= 0;\n    }\n    if ($z != 0) {\n      \
    \  $sum_str .= $z;\n    }\n    else {\n        $sum_str .= 0;\n    }\n    if ($sum_str\
    \ =~ /^[0-9]+$/ && $sum_str =~ /^[0-9]+$/ && $sum_str =~ /^[0-9]+$/) {\n     \
    \   $sum = int($sum_str);\n        if ($sum == $x + $y + $z) {\n            return\
    \ 1;\n        }\n    }\n    return \"\";\n}\n</code>\n<|/ a |>\n<| c |>\nYou might\
    \ want to use `(my $sum = ...) =~ /^[0-9]+$/`\n<|/ c |>\n<| c |>\n: I did that\
    \ to make it clearer that it'd be a string to begin with. Honestly it could be\
    \ confusing to someone new to the code what would happen, though.\n<|/ c |>\n\
    <| c |>\nThe `if ($x != 0) {` check is redundant: it can be replaced with `$sum_str\
    \ = $x;`\n<|/ c |>\n<| c |>\n: I was just thinking of that, although I suppose\
    \ if you're using a version that doesn't allow `return` then you can't have `if\
    \ ($sum_str =~ /^[0-9]+$/ && $sum_str =~ /^[0-9]+$/ && $sum_str =~ /^[0-9]+$/)\
    \ {` anyway, since it'd be an `undef`.\n<|/ c |>\n<| a tags=algorithm,perl |>\n\
    You can use a hash to store the sum of numbers that you have seen. Then, when\
    \ you encounter a new number you calculate the sum and add it to the hash. If\
    \ the sum is already in the hash you can return immediately. Otherwise, you will\
    \ have to keep a pointer to the number that you have seen and return the pointer.\n\
    Here's an example:\n<code>\nuse v5.10;", "    if ($x > $y && $x > $z && $y > $z)\
    \ {\n        1; # True\n    }\n    else {\n        return 0;\n    }\n}", "   \
    \ return $x if !defined $x || $x != int($x) || !defined $y || $y != int($y) ||\
    \ !defined $z || $z != int($z);\n    my $result = $x + $y + ($z || 0);\n    return\
    \ 0 if $result < 0;\n    return 1 if $result == $x || $result == $y || $result\
    \ == $z;\n    return 2;\n}", "    return 0 if !defined $x or !defined $y or !defined\
    \ $z;\n    return $x == $y || $x == $z || $y == $z;\n}", "    return 1 if (($x\
    \ eq $y) && ($x =~ /^[-+]?\\d+$/));\n    return 0 if ($x !~ /^[-+]?\\d+$/);\n\
    \    return 1 if (($x eq $z) && ($x =~ /^[-+]?\\d+$/));\n    return 0 if ($x !~\
    \ /^[-+]?\\d+$/);\n    return 1 if (($y eq $z) && ($y =~ /^[-+]?\\d+$/));\n  \
    \  return 0 if ($y !~ /^[-+]?\\d+$/);\n    return 0;\n}\n</code>\n<|/ a dscore=2\
    \ tags=perl,string |>\n<| c |>\nThanks for the post. Unfortunately, the test case\
    \ provided in the question isn't representative of all possible inputs. I tried\
    \ to find a way to make the example more representative of the general problem\
    \ I was solving, but couldn't come up with any easy solution.\n<|/ c |>\n<| a\
    \ dscore=2 |>\nThe code below uses unpack to split the string into its components\
    \ and then uses those to compare and find whether they are equal.  It also uses\
    \ map to convert the strings to numbers.  It then uses grep to filter out all\
    \ the unwanted cases.  Finally, if there are any unwanted cases, it sets the strings\
    \ to zero.  \n<code>\nuse strict;\nuse warnings;", "    return 1 if ( $x + $y\
    \ == $z || $x + $z == $y || $y + $z == $x || $x + $y + $z == $z || $x + $z + $y\
    \ == $x );\n    return \"\";\n}", "    \n    return (!$x && !$y && !$z) || (!$x\
    \ && !$y && $z) || (!$x && $y && !$z) || (!$x && $y && $z);\n}", "    if ($x ==\
    \ $y || $x == $z || $y == $z) {\n        return 1;\n    } else {\n        return\
    \ 0;\n    }\n}", '    my(@result) = ();', "    my $s = $x + $y + $z;\n    return\
    \ 1 if $s == $x or $s == $y or $s == $z;\n    return 0 if $x ne $y or $x ne $z\
    \ or $y ne $z;\n    return 1 if $x eq $y and $x eq $z;\n    return 0;\n}", " \
    \   return 0 if $x eq '' || $y eq '' || $z eq '' || $x ne $y || $x ne $z || $y\
    \ ne $z;\n    $x =~ /^\\-?\\d+$/ ? $x == ($y + $z) ? 1 : 0 : '';\n}", "    return\
    \ $x eq $z ||\n          $y eq $z ||\n          $x eq $y ||\n          !($x %\
    \ 1) ||\n          !($y % 1) ||\n          !($z % 1) ||\n          ($x % $y !=\
    \ 0) ||\n          ($y % $z != 0) ||\n          ($z % $x != 0);\n}", "    my $s\
    \ = $x + $y;\n    return $z == $s if $z > $s && $z < $s\n               || ($z\
    \ == $s && $x % $y == 0)\n               || ($z == $s && $y % $x == 0);\n    return\
    \ \"\";\n}", "    return undef unless defined $x;\n    return undef unless defined\
    \ $y;\n    return undef unless defined $z;\n    return 0 if $x eq $y || $x eq\
    \ $z;\n    return 0 if $y eq $z;\n    return 1 if $x eq $y + $z;\n    return 1\
    \ if $x eq $z + $y;\n    return 1;\n}", "    return 1 if $x>$y && $x>$z;\n   \
    \ return 1 if $y>$x && $y>$z;\n    return 1 if $z>$x && $z>$y;\n    return 0 if\
    \ !$x && !$y && !$z;\n    return 1;\n}", "    $x if $x == $y;\n    $x if $x ==\
    \ $z;\n    $y if $y == $z;\n    $y if $x lt $z;\n    $z if $x lt $y;\n    $z if\
    \ $y lt $x;\n    $y if $x gt $z;\n    $y if $y gt $x;\n    $z if $z gt $x;\n \
    \   $z if $z gt $y;\n};", "    my $int1 = $x;\n    my $int2 = $y;\n    my $int3\
    \ = $z;\n    return 1 if ($int1 eq $int2 && $int1 eq $int3);\n    my $int_sum\
    \ = $int1 + $int2 + $int3;\n    return 1 if ($int_sum >= 0);\n    return 1 if\
    \ (($int_sum + 1) eq $int_sum);\n    return 0;\n}", "    return 1 unless defined\
    \ $x and defined $y and defined $z;\n    return $x eq $y || $x eq $z || $y eq\
    \ $z;\n}", "    return 1 if $x == $y || $x == $z || $y == $z;\n    return 0;\n\
    }", "    return 1 if $x eq $y || $x eq $z;\n    return $x if $x ne $y;\n    return\
    \ $y if $y ne $z;\n    return 0;\n}", "    return $x if $x =~ /^-?[0-9]+$/;\n\
    \    return $y if $y =~ /^-?[0-9]+$/;\n    return $z if $z =~ /^-?[0-9]+$/;\n\
    \    return $x + $y + ($z - 0);\n}", "    return 1 if $x == $y || $x == $z ||\
    \ $y == $z;\n    return \"\";\n}", "    die \"any_int() takes 3 numbers.\" if\
    \ ref($x) || ref($y) || ref($z);\n    return $x eq ($y + $z) ? 1 : 0 if ($x eq\
    \ $y && $x eq $z);\n    return $x eq $y ? 1 : 0 if ($x eq $y);\n    return $x\
    \ eq $z ? 1 : 0 if ($x eq $z);\n    return 1;\n}", "    return 1 if $x == $y +\
    \ $z; # 5+2 = 9, 3 = 3+2, 7 = 1+2\n    return 1 if $x != $y + $z; # 3!=5+2, 7!=2+1,\
    \ 2+1 != 3-3\n    return \"$x and $y or $z\"; # 3.6 and -2.2 or 2\n}", "    return\
    \ $x != $z && $x != $y && $x != $z;\n}", "    my($a, $b, $c);\n    $a = $x + $y;\n\
    \    $b = $x - $y;\n    $c = $x * $y;\n    if ($a != $b && $a != $c && $b != $c)\
    \ {\n        return 1;\n    }\n    elsif ($a == $b && $a == $c) {\n        return\
    \ 1;\n    }\n    else {\n        return 0;\n    }\n}", "    if(!($x =~ /^-?\\\
    d*$/)){\n        return 0;\n    }\n    if(!($y =~ /^-?\\d*$/)){\n        return\
    \ 0;\n    }\n    if(!($z =~ /^-?\\d*$/)){\n        return 0;\n    }\n    if($x\
    \ == $y + $z){\n        return 1;\n    }\n    return 0;\n}", "    return \"\"\
    \ if $x eq $z || $y eq $z;\n    my $sum = $x + $y;\n    return 0 if $sum lt 0;\n\
    \    my $diff = $x - $z;\n    return 1 if $diff gt 0;\n    my $product = $x *\
    \ $y;\n    return 0 if $product lt 0;\n    my $quotient = $x / $y;\n    return\
    \ 0 if $quotient eq 0;\n    return 1 if $quotient eq 0;\n    return 1;\n}", " \
    \   return $x != 0 || $y != 0 || $z != 0 ? 1 : 0;\n}", "    return 1 unless $x\
    \ || $y || $z;\n    return 0 if !$x && !$y && !$z;\n    return 1 if $x == $y ||\
    \ $x == $z || ($y == $z && $x <=> $z) eq \"==\";\n    return 0;\n}", '    return
    0 if ( not defined $x or defined $y or defined $z);', '    return 0 unless $x
    && $y && $z;', "    # check if all the numbers are integers.\n    return 1 if\
    \ $x->is_integer() && $y->is_integer() && $z->is_integer();\n    # check if any\
    \ of the numbers is equal to the sum of other two numbers\n    my $result = $x\
    \ + $y + $z - $x - ($y - $z);\n    return $x if $result eq $y;\n    return $y\
    \ if $result eq $z;\n    return $z if $result eq $x;\n    return 0;\n}\n</code>\n\
    <|/ a tags=perl |>\n<| c |>\nAhh, I see where you're coming from. Good catch.\
    \ :) But this doesn't take into account the fact that OP wants it to return false\
    \ if *all* are integers, and this can return true for integers (like `any_int(3,\
    \ 2, 2)` which would return true). Also, `any_int(1, 2, 3)` would return true\
    \ (though you probably meant `any_int(1, 1, 3)`).\n<|/ c |>\n<| c |>\nThis approach\
    \ is too inefficient. I don't know what OP wants, but he wants something that\
    \ return true if all the numbers are integers, if one (or more) is equal to the\
    \ sum of the other two.\n<|/ c |>\n<| c |>\n: Good catch, thank you! I updated\
    \ the answer to take into account the integers thing.\n<|/ c |>\n<| a dscore=3\
    \ |>\n<code>", "    my $int_1 = $x->{int} || 0;\n    my $int_2 = $y->{int} ||\
    \ 0;\n    my $int_3 = $z->{int} || 0;\n    my $sum_1 = $int_1 + $int_2;\n    my\
    \ $sum_2 = $int_1 + $int_3;\n    return $sum_1 == $sum_2 && !is_int($sum_1) &&\
    \ !is_int($sum_2);\n}", "    return if ($x eq \"\" && $y eq \"\" && $z eq \"\"\
    );\n    return if (($x eq \"\" || $x eq \"-\") && !($y eq \"\" || $y eq \"-\"\
    ) && !($z eq \"\" || $z eq \"-\"));\n    return if (($x eq \"\" || $x eq \"-\"\
    ) || ($y eq \"\" || $y eq \"-\") || ($z eq \"\" || $z eq \"-\"));\n    return\
    \ if (($x eq \"\" && $y eq \"\") && $z eq \"\");\n    return if (($x eq \"\" &&\
    \ $y eq \"\") || ($x eq \"\" && $y eq \"-\") || ($x eq \"-\" && $y eq \"\") ||\
    \ ($x eq \"-\" && $y eq \"-\") || ($x eq \"-\" && $z eq \"\"));\n    return if\
    \ (($x eq \"\") || ($x eq \"-\") || ($y eq \"\") || ($y eq \"-\") || ($z eq \"\
    \") || ($z eq \"-\"));\n    return if ($x eq $y && $x eq $z);\n    return if (($x\
    \ eq \"\" || $x eq \"-\") || ($x eq \"-\" && ($y eq \"-\" || $y eq \"\" || $y\
    \ eq \"-\")));\n    return if (($y eq \"\" || $y eq \"-\") || ($z eq \"\" || $z\
    \ eq \"-\"));\n    return 1;\n}", "    $x =~ s/^([+-]?\\d+).*/$1/;\n    $y =~\
    \ s/^([+-]?\\d+).*/$1/;\n    $z =~ s/^([+-]?\\d+).*/$1/;\n    return 1 unless\
    \ $x =~ /^\\d+$/ and $y =~ /^\\d+$/ and $z =~ /^\\d+$/;\n    # This is an optimization.\
    \ If any number is 0, return 0.\n    if ($x != 0) {\n        my $s = $y + $z;\n\
    \        return $x if $x == $s or $x eq \"0\" and $s eq \"0\";\n    }\n    return\
    \ 0;\n}", "    if ($x + $y == $z) {\n        1;\n    }\n    elsif ($x > $z ||\
    \ $y > $z) {\n        0;\n    }\n    else {\n        0;\n    }\n}", "    return\
    \ 1 if $x == $y + $z && $x && $y && $z;\n    return '';\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=perl,if-statement |>\nHere's a little bit cleaned up version:\n\
    <code>", "    if ($x != $y || $x != $z) {\n        $x != $z or $y != $z\n    }\n\
    }", "    return 1 if $x == $y || $x == $z || $y == $z;\n    return 0 if !is_int($x)\
    \ || !is_int($y) || !is_int($z);\n    return 1;\n}", "    if (not $x or not $y\
    \ or not $z) {\n        carp(\"Bad argument to any_int(): $_[0]\");\n        return;\n\
    \    }\n    my $sum = 2 * $x + $y + $z;\n    my $found = $sum == $x or $sum ==\
    \ $y or $sum == $z;\n    return $found;\n}", "    return 0 unless $x; return 0\
    \ unless $y; return 0 unless $z;\n    return 0 if $x == $y; return 0 if $x ==\
    \ $z; return 0 if $y == $z;\n    return 1;\n}", "    if (defined $x && defined\
    \ $y && defined $z) {\n        my $a = $x + $y;\n        $a = $a + $z if $a +\
    \ $z == $x;\n        $a = $a + $z if $a + $z == $y;\n        $a = $a + $z if $a\
    \ + $z == $z;\n        return $a ? 1 : 0;\n    }\n    return 0;\n}", "    return\
    \ undef unless defined $x && defined $y && defined $z;\n    return undef if $x\
    \ eq \"\" && $y eq \"\" && $z eq \"\";\n    return undef if $x eq \"\" && $y eq\
    \ \"\" && $z ne \"\";\n    return undef if $x ne \"\" && $y eq \"\" && $z eq \"\
    \";\n    return undef if $x ne \"\" && $y ne \"\" && $z eq \"\";\n    return undef\
    \ if $x ne \"\" && $y ne \"\" && $z ne \"\";\n    $x =~ /^\\-?\\d+$/;\n    $y\
    \ =~ /^\\-?\\d+$/;\n    $z =~ /^\\-?\\d+$/;\n    return undef unless $x && $y\
    \ && $z;\n    return 1 if $x eq $y;\n    return 1 if $x eq $z;\n    return 1 if\
    \ $y eq $z;\n    return $x if ($x + ($y - $z) == $y);\n    return $x if ($x +\
    \ ($z - $y) == $z);\n    return $x if ($y + ($z - $x) == $z);\n    return $x if\
    \ ($x + ($y - $z) == $y);\n    return $x if ($y + ($z - $x) == $z);\n    return\
    \ $x if ($z - ($y - $x) == $y);\n    return $x if ($z - ($x - $y) == $x);\n  \
    \  return $x if ($z - ($y - $x) == $y);\n    return $x if ($z - ($x - $y) == $x);\n\
    \    return $y if ($z - ($x - $y) == $x);\n    return $y if ($z - ($x - $y) ==\
    \ $y);\n    return $y if ($z - ($x - $y) == $x);\n    return $z if ($z - ($x -\
    \ $y) == $x);\n    return $z if ($z - ($x - $y) == $y);\n    return $z if ($z\
    \ - ($x - $y) == $x);\n    return $z if (($x - $y) + ($y - $z) == $x);\n    return\
    \ $z if (($x - $z) + ($z - $y) == $x);\n    return $z if (($y - $z) + ($z - $x)\
    \ == $x);\n    return $z if (($x - $z) + ($y - $z) == $x);\n    return $z if (($x\
    \ - $y) + ($z - $x) == $x);\n    return $z if (($y - $z) + ($x - ", "    my $sum\
    \ = abs($x - $y) + abs($y - $z) + abs($z - $x);\n    if ($sum == $x) {\n     \
    \   return 0;\n    }\n    elsif ($sum < $x) {\n        return 0;\n    }\n    elsif\
    \ ($sum > $x) {\n        return 1;\n    }\n}", "    return '' if $x != $y || $x\
    \ != $z;\n    return 0 if $x != $y && $x != $z;\n    return 0 if $x != $y;\n \
    \   return 1;\n}", "    return 0 unless defined $x && defined $y && defined $z;\n\
    \    return 0 unless $x =~ /^[-+]?[0-9]+$/ && $y =~ /^[-+]?[0-9]+$/ && $z =~ /^[-+]?[0-9]+$/;\n\
    \    return ($x eq $y) || $x eq $z;\n}", "    $x =~ m/^-?\\d+$/i; # Check if x\
    \ is an integer\n    $y =~ m/^-?\\d+$/i; # Check if y is an integer\n    $z =~\
    \ m/^-?\\d+$/i; # Check if z is an integer\n    my $total = $x + $y + $z;\n  \
    \  return 1 if $x == $total && $y == $total && $z == $total;\n    return 0 if\
    \ $x != $total || $y != $total || $z != $total;\n    return \"\";\n}", "    $x\
    \ += $y;\n    $x -= $z;\n    $x -= $y;\n    return $x == $y || $x == $z || $y\
    \ == $z;\n}", "    # Make sure we have integers\n    return 0 unless defined $x\
    \ && defined $y && defined $z;\n    return $x if $x eq $y + $z;\n    return $x\
    \ if $x eq $y - $z;\n    return $x if $x eq $y * $z;\n    return 0;\n}", "   \
    \ return $x || $y || $z ? $z : $x || $y ? $y : $x;\n}", "    return 1 if ($y ==\
    \ $x + $z && $y == $z && $y == $x);\n    return '' if ($y != $x || $z != $x ||\
    \ $z != $y);\n    return '';\n}", "    return 0 unless (defined $x && defined\
    \ $y && defined $z);\n    return 0 if !defined $x || !defined $y || !defined $z;\n\
    \    return $x eq $y || $x eq $z || $y eq $z || $x + ($y || $z) eq $z;\n}", " \
    \   return 1 if $x != $y;\n    return 1 unless $x != 0;\n    return 1 if $x !=\
    \ 0;\n    my $is_integer = int($x % 1 eq \"0\");\n    return 1 if $is_integer\
    \ && !$z || $is_integer && !$y || $is_integer && $z;\n    return 1 if $is_integer\
    \ && !$x || $is_integer && !$y || $is_integer && $x;\n    return 1 if ($x != 0\
    \ && $y != 0 && $z != 0);\n    return 0;\n}", "    if($x == $y || $y == $z) {\n\
    \        return 1;\n    }\n    return 0;\n}\n</code>\n<|/ a tags=perl,if-statement\
    \ dscore=2 |>\n<| a |>\nYou have a few options:", "    my $result = undef;\n \
    \   my $total = undef;\n    if ($x != 0 && $y != 0) {\n        $total = $x + $y;\n\
    \        if ($total != 0) {\n            if ($z != 0) {\n                $result\
    \ = $total != $z;\n            } else {\n                $result = 1;\n      \
    \      }\n        } else {\n            $result = undef;\n        }\n    } else\
    \ {\n        $result = undef;\n    }\n    return $result;\n}", "    return $x\
    \ || $y || $z || 0;\n}", "    if ($x>=$y && $x>=$z && $y>=$z) {\n        return\
    \ 1;\n    }\n    return \"\";\n}", "    if ($x == $y || $x == $z || $y == $z)\
    \ {\n        return \"1\";\n    } else {\n        return \"\";\n    }\n}", " \
    \   return 1 if $x == $y || $x == $z;\n    return 1 if $y == $z || $y == $x;\n\
    \    return 1;\n}", "    return $x if $x == $y || $x == $z || $y == $z;\n    return\
    \ \"\";\n}", "    $x =~ /^-?\\d+$/ or $x eq '0' or $x eq '0.0' ? 1 : 0;\n    $y\
    \ =~ /^-?\\d+$/ or $y eq '0' or $y eq '0.0' ? 1 : 0;\n    $z =~ /^-?\\d+$/ or\
    \ $z eq '0' or $z eq '0.0' ? 1 : 0;\n    return $x or $y or $z;\n}", "    # Bail\
    \ if they're not integers\n    return \"\" unless $x =~ /^\\d+$/ || $y =~ /^\\\
    d+$/ || $z =~ /^\\d+$/;", "    return unless $x->isa('Math::BigInt') and $y->isa('Math::BigInt')\
    \ and $z->isa('Math::BigInt');\n    $x = $x->copy()->bstr();\n    $y = $y->copy()->bstr();\n\
    \    $z = $z->copy()->bstr();", "    return\n        !((not(is_int($x)) && !is_int($y))\
    \ ||\n          not(is_int($z)) ||\n          not(is_int($x)) || !is_int($y))\
    \ ||\n          !(is_int($z)) || !is_int($z)) ||\n          ($x == $y + $z);\n\
    }", "    return 1 if $x != $y || $x != $z;\n    return 0 if $x != $y && $x !=\
    \ $z;\n    return 1;\n}", "    if ($x =~ /^-?\\d+$/ && $y =~ /^-?\\d+$/ && $z\
    \ =~ /^-?\\d+$/) {\n        my $int_sum = Math::BigInt->new($x) + Math::BigInt->new($y)\
    \ + Math::BigInt->new($z);\n        return 1 if ($int_sum == Math::BigInt->new($x)\
    \ + Math::BigInt->new($y) + Math::BigInt->new($z));\n        return \"\";\n  \
    \  } elsif ($x =~ /^-?\\d+\\.\\d*$/ && $y =~ /^-?\\d+\\.\\d*$/ && $z =~ /^-?\\\
    d+\\.\\d*$/) {\n        my $float_sum = Math::BigFloat->new($x) + Math::BigFloat->new($y)\
    \ + Math::BigFloat->new($z);\n        return 1 if ($float_sum == Math::BigFloat->new($x)\
    \ + Math::BigFloat->new($y) + Math::BigFloat->new($z));\n        return \"\";\n\
    \    } else {\n        return 0;\n    }\n}", "    if($x == $z && $y == $z) {\n\
    \treturn 1;\n    }\n    elsif($x < $z && $y < $z) {\n\treturn 0;\n    }\n    else\
    \ {\n\treturn 1;\n    }\n}", "    return 1 if $x == $y + $z;\n    return 0 if\
    \ $x == $y || $x == $z || $y == $z;\n    return 1 if $x != ($y + $z);\n    return\
    \ 1;\n}", "    return 0 unless is_int($x) && is_int($y) && is_int($z);\n    return\
    \ 0 if $x == $y;\n    return 0 if $x == $z;\n    return 1 if $y == $z;\n    return\
    \ 1;\n}", "    return $x != $z if $x != $y;\n    return $x != $y if $x != $z;\n\
    \    return $x != $z if $y != $z;\n    return 0;\n}", "    $x =~ s/-?\\d+//g;\n\
    \    $y =~ s/-?\\d+//g;\n    $z =~ s/-?\\d+//g;\n    if ($x eq $y+$z+$y) {\n \
    \       return 1;\n    } elsif ($y eq $x+$z+$x) {\n        return 1;\n    } elsif\
    \ ($z eq $x+$y+$z) {\n        return 1;\n    } else {\n        return 0;\n   \
    \ }\n}", "    my $result = 0;\n    $result = $x + $y if $x != 0;\n    $result\
    \ = $x - $y if $y != 0;\n    $result = $x * $y if $x != 0 and $y != 0;\n    $result\
    \ = $x / $y if $x != 0 and $y != 0 and $z != 0;\n    $result = $x % $y if $x !=\
    \ 0 and $y != 0 and $z != 0;\n    $result = $x // $y if $x != 0 and $y != 0 and\
    \ $z != 0;\n    $result = $x | $y if $x != 0 and $y != 0 and $z != 0;\n    $result\
    \ = $x & $y if $x != 0 and $y != 0 and $z != 0;\n    $result = $x ^ $y if $x !=\
    \ 0 and $y != 0 and $z != 0;\n    $result = $x >> $y if $x != 0 and $y != 0 and\
    \ $z != 0;\n    $result = $x << $y if $x != 0 and $y != 0 and $z != 0;\n    $result\
    \ = $x >> $y if $x != 0 and $y != 0 and $z != 0;\n    return ($result == $z) ?\
    \ 1 : 0;\n}\n</code>\n<|/ a dscore=2 tags=perl,division |>\n<| c |>\nThanks, this\
    \ works well. Though it fails for negative numbers as well.\n<|/ c |>\n<| c |>\n\
    : I've edited to include negative numbers as well.\n<|/ c |>\n<| c |>\nThis is\
    \ also true for all other integer types. Just not `int` types. `perl5.10.1`'s\
    \ `use integer;` gives an error. `perl5.14.0` does not.\n<|/ c |>\n<| c |>\nThanks,\
    \ this is great. However, I get a compilation error on Perl 5.14.0 when I compile\
    \ the code with the line `use integer;`.  This is the error I get `Undefined subroutine\
    \ &integer::_div_rec` Any ideas?\n<|/ c |>\n<| c |>\n: It seems like `integer`\
    \ was removed in 5.14.0. I've modified the answer to include a solution for Perl\
    \ 5.10.1.\n<|/ c |>\n<| a dscore=2 |>\nI use the following code to test for division\
    \ by zero and negative numbers:\n<code>", "    return 1 if $x == $y || $x == $z;\n\
    \    return 0 if !($x % 1 || $y % 1 || $z % 1);\n    return 1;\n}", "    my $test\
    \ = ( $x + $y ) * $z;\n    if ($test == $x or $test == $y or $test == $z) {\n\
    \        return 1;\n    }\n    return 0;\n}", '    return "" if $x != $y || $x
    != $z;', "    return 0 unless $x =~ m/^\\d+$/ && $y =~ m/^\\d+$/ && $z =~ m/^\\\
    d+$/;\n    my $add = ($x + $y);\n    return 0 if ($add == $z);\n    return 1 if\
    \ ($add == $y);\n    return 1 if ($add == $x);\n    return 0;\n}", "    return\
    \ 0 if $x != $y;\n    return 0 if $x == 0;\n    return 0 if $y == 0;\n    return\
    \ 0 if $z == 0;\n    return 1 if $x == $y;\n    return 1 if $x == $z;\n    return\
    \ 1 if $y == $z;\n    return 1;\n}\n</code>\n<|/ a dscore=4 |>\n<| c |>\nWhy are\
    \ you using global variable instead of passing it as a parameter? The variable\
    \ could change without affecting the function, right? For example if you run this\
    \ on different test and you change the variable in the test without changing the\
    \ variable in the function, it will change the result. How would you solve that?\n\
    <|/ c |>\n<| c |>\n: Passing a parameter would remove the need for the global\
    \ variable, but you would still need to declare it global everywhere. A global\
    \ variable is generally bad, and passing parameters is also generally bad.\n<|/\
    \ c |>\n<| c |>\nThis solution uses global variables in order to return a value\
    \ from the function. The solutions proposed so far do not. Which is better? I\
    \ don't know. I think passing parameters to a function is also bad, since it is\
    \ generally bad practice to do it this way.\n<|/ c |>\n<| c |>\nPassing parameters\
    \ to a function is bad, because it makes it less reusable. You can't reuse the\
    \ same function for different variables. Also, it makes it less testable.\n<|/\
    \ c |>\n<| c |>\nI personally find this solution more elegant and easier to understand\
    \ than the others. It's also much faster (~6%) than the other solutions proposed\
    \ here. [This benchmark](https://gist.github.com/ahovd/11bffed933d09499812e) shows\
    \ the difference.\n<|/ c |>\n<| a dscore=4 |>\nThere are more ways to do it:",
  "    return 1 if $x eq ($y + $z);\n    return '' if not($x =~ /^-?\\d+$/);\n   \
    \ return 1 if $x eq $y; \n    return 1 if $x eq $z;\n    return 0;\n}\n</code>\n\
    The third one (any_odd) was my first go-around, but it felt too verbose.\n<|/\
    \ a tags=if-statement,conditional-statements,perl,regex |>\n<| a tags=if-statement,conditional-statements,perl,regex\
    \ |>\nHow about this one:\n<code>\n/^([+-]?)\\d+$/\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nThis is better than my original regex, because it's slightly shorter\
    \ and doesn't use alternations. It's also a tad clearer that all numbers need\
    \ to be integers, since it's a direct translation of \"at least one digit in each\
    \ number\".\n<|/ c |>\n<| c |>\n: Actually, it does use alternations (`|`) so\
    \ it's no shorter than my original regex. It also uses more characters than my\
    \ original regex. (And it would be shorter with character classes, which I didn't\
    \ even mention because I didn't want to confuse the issue with the alternation\
    \ operator, which also uses `|`). However, I'm glad you like my original regex\
    \ better, even though I like the simplicity of yours better.\n<|/ c |>\n<| c |>\n\
    : You're right, I misread the documentation, and I actually tested it a little\
    \ while ago. I guess I should really stop testing my regex :P\n<|/ c |>\n<| a\
    \ tags=if-statement,conditional-statements,perl,regex |>\nIf your first test fails,\
    \ don't bother with the other tests. If the first test succeeds, it means you\
    \ can safely assume that the numbers are all integers.\nIn fact, the only reason\
    \ to test for any other case is if you know that the numbers are all integer and\
    \ only need to distinguish between empty and non-integers. In that case, you can\
    \ just use your original test and don't bother with the other cases. In that case,\
    \ I'd suggest using your original test and writing a subroutine that tests for\
    \ integers:\n<code>", "    return 1 if $y == $z + $x && $x =~ /^\\d+$/ && $y =~\
    \ /^\\d+$/ && $z =~ /^\\d+$/;\n    return $x if $y == $z + $x;\n    return $x\
    \ if $y == $z - $x;\n    return $x if $y == $z + $x;\n    return $x if $y == $z\
    \ - $x;\n    return $x if $y == $z * $x;\n    return $x if $y == $z / $x;\n  \
    \  return $x if $y == $z % $x;\n    return $x if $y == $z - $x;\n    return $x\
    \ if $y == $z + $x;\n    return $x if $y == $z * $x;\n    return $x if $y == $z\
    \ / $x;\n    return $x if $y == $z % $x;\n    return $x if $y == $z + $x;\n  \
    \  return $x if $y == $z + $x;\n    return $x if $y == $z + $x;\n    return $x\
    \ if $y == $z + $x;\n    return $x if $y == $z + $x;\n    return $x if $y == $z\
    \ + $x;\n    return $x if $y == $z + $x;\n    return $x if $y == $z + $x;\n  \
    \  return $x if $y == $z + $x;\n    return $x if $y == $z + $x;\n    return $x\
    \ if $y == $z + $x;\n    return $x if $y == $z + $x;\n    return $x if $y == $z\
    \ + $x;\n    return $x if $y == $z + $x;\n    return $x if $y == $z + $x;\n  \
    \  return $x if $y == $z + $x;\n    return $x if $y == $z + $x;\n    return $x\
    \ if $y == $z + $x;\n    return $x if $y == $z + $x;\n    return $x if $y == $z\
    \ + $x;\n    return $x if $y == $z + $x;\n    return $x if $y == $z + $x;\n  \
    \  return $x if $y == $z + $x;\n    return $x if $y == $z + $x;\n    return $x\
    \ if $y == $z + $x;\n    return $x if $y == $z + $x;\n    return $x if $y == $z\
    \ + $x;\n    return $x if $y == $", "    return undef if ($x != $y && $x != $z\
    \ && $y != $z);\n    return 1 if $x == $y && $x == $z;\n    return 0 if $x !=\
    \ $y;\n    return 1 if $x == $z;\n    return 0;\n}", "    return $x != 0 || $y\
    \ != 0 || $z != 0 ||\n           $x == $y && $x == $z;\n}", '    my @result =
    ();', "    if(ref($x) && ref($y) && ref($z)) {\n        return (defined $x) &&\
    \ (defined $y) && (defined $z) && $x && $y && $z && $x != $y + $z && $x != $z\
    \ && $y != $z;\n    }\n    if(defined $x) { $x = int($x); }\n    if(defined $y)\
    \ { $y = int($y); }\n    if(defined $z) { $z = int($z); }\n    return ($x && $y)\
    \ || $z || ($x && $z) || ($y && $z) || ($x && $y && $z);\n}", "    return $x unless\
    \ defined $x;\n    return $y unless defined $y;\n    return $z unless defined\
    \ $z;\n    if ($x eq $y) {\n        return $z unless defined $z;\n        return\
    \ 1;\n    }\n    return $z unless defined $z;\n    return 1;\n}", "    $x    =\
    \ int($x);\n    $y    = int($y);\n    $z    = int($z);\n    # Return true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    # Return false in any other cases.\n    # Example input - true, true, true\n\
    \    # Example output - true\n    return 1 if $x + $y == $z || $y + $z == $x ||\
    \ $z + $x == $y;\n    return;\n}", "    return 1 if $x == $y + $z && $x =~ /^\\\
    d+$/;\n    return 1 if $y == $z + $x && $y =~ /^\\d+$/;\n    return 1 if $z ==\
    \ $x + $y && $z =~ /^\\d+$/;\n    return 0;\n}", '    local $_ = shift;', "  \
    \  return 1 if $x != $y + $z or $x != $y - $z or $x != $z + $y or $x != $z - $y\
    \ or $y != $z + $x or $y != $z - $x;\n    return 0;\n}", "    return 0 if !defined\
    \ $x || !defined $y || !defined $z;\n    return 1 if $x == $y;\n    return 0 if\
    \ $x != $y && !$x % $z;\n    return 1;\n}\n</code>\n<|/ a tags=integer,perl,division\
    \ dscore=1 |>\n<| a dscore=1 |>\nHow about using modulo?\n<code>\nuse strict;\n\
    use warnings;", "    my @numbers = ($x, $y, $z);\n    my $sum = 0;\n    my $result\
    \ = 0;\n    foreach my $number (@numbers) {\n        if ($number =~ /^-?[0-9]+$/)\
    \ {\n            $sum += $number;\n        }\n    }\n    if ($sum == $x) {\n \
    \       $result = 1;\n    } elsif ($sum == $y) {\n        $result = 1;\n    }\
    \ elsif ($sum == $z) {\n        $result = 1;\n    }\n    return $result;\n}",
  "    return undef unless defined $x && defined $y && defined $z && $x =~ /^-?\\\
    d+$/;\n    return undef unless defined $y && defined $z && $y =~ /^-?\\d+$/;\n\
    \    return undef unless defined $z && defined $x && $z =~ /^-?\\d+$/;\n    return\
    \ $x + ($y == $z ? 1 : 0) + ($y != $z ? 1 : 0);\n}", "    return $x if $x eq $z\
    \ && $y eq $z;\n    return 1;\n}", "    $x =~ tr/./Dd; # Convert strings to integers\n\
    \    $y =~ tr/./Dd; # Convert strings to integers\n    $z =~ tr/./Dd; # Convert\
    \ strings to integers\n    return 1 if $x == 7+$y && $x == 7+$z && !$x eq \"\"\
    \ && $y eq \"\" && $z eq \"\";\n    return 0 if !($x == 7+$y && $x == 7+$z) ||\
    \ $x ne \"\" || $y ne \"\" || $z ne \"\";\n}\n</code>\n<|/ a tags=perl,math,algorithm,if-statement\
    \ |>\n<| c |>\nI think this is exactly what I was looking for. Thanks so much.\n\
    <|/ c |>\n<| c |>\nPlease note that all your solutions fail for `any_int(3.6,\
    \ -2.2, 2)`\n<|/ c |>\n<| a tags=perl,math,algorithm,if-statement |>\nHere's a\
    \ perl one-liner which checks if one of the three numbers is equal to the sum\
    \ of the other two numbers, and return 1 if they are, return 0 if they're not\
    \ and if they are equal:\n<code>\necho \"3 -2 1\" | perl -nE 'BEGIN{ %a=@ARGV;\
    \ say \"1\\n\" if $a=@ARGV+[2] } say \"0\\n\" unless ($a[$_] and $a[2-$_] and\
    \ $a[$ARGV[0]-$_] and $a[2-$ARGV[0]-$_] eq $a[$_]); say \"1\\n\" if $a[$_] and\
    \ $a[2-$_] and $a[$ARGV[0]-$_] and $a[2-$ARGV[0]-$_] eq $a[$_]; say \"0\\n\" unless\
    \ ($a[$_] and $a[2-$_] and $a[$ARGV[0]-$_] and $a[2-$ARGV[0]-$_] eq $a[$_]); say\
    \ \"1\\n\" if $a[$_] and $a[2-$_] and $a[$ARGV[0]-$_] and $a[2-$ARGV[0]-$_] eq\
    \ $a[$_]'\n</code>\nOutput:\n<code>\n0\n1\n1\n0\n</code>\nExplanation:", "   \
    \ return((defined $x && defined $y && defined $z) || $x || $y || $z) ? ((defined\
    \ $x ? $x : (defined $y ? $y : (defined $z ? $z : 0))) == ($x + $y + $z) ? \"\
    1\" : \"0\") : \"\";\n}", "    return '' if $x eq '' && $y eq '' && $z eq '';\n\
    \    return $x eq '' || $y eq '' || $z eq '' ? '' : $x eq $x + $y + $z ? '1' :\
    \ '0';\n}", "    return $x if $x || $y || $z;\n    return $y if $x || $y || $z;\n\
    \    return $z if $x || $y || $z;\n    return $x if $x || $y;\n    return $y if\
    \ $x || $y;\n    return $z if $x || $y;\n    return $x if $x;\n    return $y if\
    \ $x;\n    return $z if $x;\n    return 1;\n}", "    $x if $x eq \"\" && $x ne\
    \ $y;\n    $x if $x eq \"\" && $x ne $z;\n    return $x if $x eq $y || $x eq $z;\n\
    \    return $x if $x eq $y;\n    return $x if $x eq $z;\n    return;\n}", "  \
    \  if($x<0){ $x=-$x; $y=-$y; $z=-$z; }\n    return 1 if $x==$y || $x==$z || $y==$z;\n\
    \    return 0 if $x==$y || $y==$z;\n    return 1;\n}", "    return 1 if $x ==\
    \ $y + $z && $x =~ /^\\d+$/ && $y =~ /^\\d+$/ && $z =~ /^\\d+$/;\n    return 0\
    \ if $x == $y + $z || $x == $y - $z || $x == $z + $y || $x == $z - $y || $y ==\
    \ $z - $x;\n    return 1;\n}", "    return 1 if $x == $y || $x == $z || $y ==\
    \ $z;\n    return 0 if $x eq \"\" || $y eq \"\" || $z eq \"\";\n    return 0;\n\
    }", "    return $x + ($y == $z) \n        && ($x ~~ $x) || \n        (($x ~~ $y)\
    \ && $y ~~ $z);\n}", "    return -1 if $x eq $y;\n    return -1 unless $x =~ /^\\\
    d+$/;\n    return -1 unless $y =~ /^\\d+$/;\n    return -1 unless $z =~ /^\\d+$/;\n\
    \    return 0 unless $x + $y == $z;\n    return 1;\n}", "    return ($x + $y)\
    \ == $z && $x % 1 == 0 && $y % 1 == 0 && $z % 1 == 0;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nI don't see the point of the `return` statement in this case, when\
    \ `!$x` will already be false if `$x ne \"\"` (an empty string is false).\n<|/\
    \ c |>\n<| c |>\nI suppose that is true, in that there is no reason to return\
    \ something when all the operands are false.\n<|/ c |>\n<| c |>\nThat is true,\
    \ just as you can do: my $y = $x if $x !~ m/\\d/; I find this easier to read than\
    \ a bunch of nested ifs.\n<|/ c |>\n<| c |>\nPerhaps I misunderstood what you\
    \ meant. Did you mean I should return false when any of the operands are false?\
    \ If so, I agree, that makes more sense.\n<|/ c |>\n<| c |>\nIf none of the operands\
    \ are false, then you can return false immediately instead of returning something\
    \ that doesn't make sense. It isn't necessary to return true or false or \"\"\
    .\n<|/ c |>\n<| a dscore=0 |>\n<code>\nif ( $x !~ /^([A-Za-z]|-?[A-Za-z0-9]+)($|-?[A-Za-z0-9]+)$/\
    \ ) {\n  $x = \"\";\n}\n</code>\nThis regex will match a series of either letters,\
    \ numbers or hyphens, followed by another series of either letters, numbers or\
    \ hyphens, followed optionally by a series of numbers, followed optionally by\
    \ a series of letters.\nIt does this in three steps, first matching the first\
    \ series of letters, numbers or hyphens, and returning the whole string if there\
    \ is no match. The second match is matching the second series of letters, numbers\
    \ or hyphens, returning the whole string if there is no match, and the third match\
    \ is matching the third series of numbers, returning the whole string if there\
    \ is no match.\n<|/ a tags=perl,regex |>\n<| c |>\nI think the OP wants the regex\
    \ to match the first series of letters, numbers or hyphens, followed by the second\
    \ series of letters, numbers or hyphens, followed by the third series of numbers,\
    \ followed by the fourth series of letters. But you're also not matching hyphens\
    \ in your regex.\n<|/ c |>\n<| c |>\nThe regex does match the first three series\
    \ of letters, numbers or hyphens, followed by the second series of letters, numbers\
    \ or hyphens, followed by the third series of numbers, followed by the fourth\
    \ series of letters. The hyphens are optional, and are included in ", "    return\
    \ 1 if ($x->is_integer && $y->is_integer && $z->is_integer);\n    return 1 if\
    \ ($y->is_integer && $x->is_integer && $z->is_integer);\n    return 0 if ($y->is_integer\
    \ && $x->is_integer && $z->is_integer);\n    return 1 if (($y->is_integer || $z->is_integer)\
    \ && ($x->is_integer || $y->is_integer || $z->is_integer));\n    return 1 if $x->is_integer\
    \ || $y->is_integer || $z->is_integer;\n    return 1;\n}", "    return if !defined\
    \ $x || !defined $y || !defined $z;\n    return if $x != $y || $y != $z;\n   \
    \ return if !is_int($x) || !is_int($y) || !is_int($z);\n    return 0 if $x ==\
    \ $y || $x == $z;\n    return 0 if $y == $z || $y == $x;\n    return 0 if $z ==\
    \ $x || $z == $y;\n    return $x == $y || $x == $z;\n    return $y == $z || $y\
    \ == $x;\n    return $z == $x || $z == $y;\n}", "    my $sum = $x + $y;\n    return\
    \ if !defined($z) || $sum != $z;\n    return if !defined($x) || !defined($y);\n\
    \    return if !defined($x) || !defined($z);\n    return if $x ne $z || $y ne\
    \ $z;\n    return if !$x || !$y || !$z;\n    return 1;\n}", "    my $result =\
    \ $x + ($y - $z) == $z && $x eq $y;\n    if ($result) {\n        my $a = $x +\
    \ $y;\n        $result = $a > $z;\n    }\n    return $result;\n}", "    return\
    \ 0 unless $x =~ m/^-?\\d+$/;\n    return 0 unless $y =~ m/^-?\\d+$/;\n    return\
    \ 0 unless $z =~ m/^-?\\d+$/;\n    return 0 if $x eq $y || $x eq $z || $y eq $z;\n\
    \    return 1;\n}", "    my @nums = $x, $y, $z;\n    for my $num (@nums) {\n\t\
    return 1 if $num eq ($x + $y + $z);\n\treturn 0 if !defined $num or !$num || !$num\
    \ =~ /^[0-9]+$/;\n\treturn 0;\n    }\n    return 1;\n}\n</code>\n<|/ a dscore=1\
    \ tags=perl,logic,algorithm |>\n<| c |>\nThis does not meet the requirement that\
    \ the numbers must be integers.\n<|/ c |>\n<| c |>\nThanks for your comments.\
    \ I fixed it now.\n<|/ c |>\n<| c |>\nI think it's an improvement over `if ($x\
    \ + $y + $z == $z + $y + $x)` but I'm not sure it satisfies the requirement.\n\
    <|/ c |>\n<| c |>\nThanks for the note. I changed it to my final solution.\n<|/\
    \ c |>\n<| a tags=perl,logic,algorithm |>\nI hope I'm understanding your question\
    \ correctly. I've included some Perl code which generates a set of random integers\
    \ and performs various checks. I believe this satisfies your requirements.\n<code>\n\
    use strict;\nuse warnings;\nuse feature 'say';", "    my $sum = +$x + +$y + +$z;\n\
    \    my $len  = length($x) + length($y) + length($z);\n    return 1 if $len ==\
    \ 0;\n    return 0 if ($sum != $len && $len != 0);\n    return $sum == $len;\n\
    }", "    \n    $x *= 1;\n    $y *= 1;\n    $z *= 1;\n    \n    my $found = 0;\n\
    \    return $found if $x == $y + $z;\n    return $found if $x == $y - $z;\n  \
    \  return $found if $x == $y + $z;\n    return $found if $x == $y - $z;\n    \n\
    \    return 0;\n}", "    return $x if $x eq 0 || $y eq 0 || $z eq 0;\n    return\
    \ 0 if $x lt 0 || $y lt 0 || $z lt 0;\n    $x -= 0;\n    $y -= 0;\n    $z -= 0;\n\
    \    $x += $y;\n    $y += $z;\n    $z += $x;\n    return 1 if $x ge $y;\n    return\
    \ 1 if $x ge $z;\n    return 1 if $y ge $z;\n    return 1;\n}", "    my $result\
    \ = $x + $y + $z;\n    my $is_int = defined $result && $result % 1 == 0;\n   \
    \ if ($is_int) {\n        return $result;\n    }\n    my $x_int = $x + 0;\n  \
    \  my $y_int = $y + 0;\n    my $z_int = $z + 0;\n    return $x_int == $y_int &&\
    \ $x_int == $z_int || $y_int == $z_int && $y_int == $x_int;\n}", "    return 0\
    \ unless $x =~ /^-?\\d+$/;\n    return 0 unless $y =~ /^-?\\d+$/;\n    return\
    \ 0 unless $z =~ /^-?\\d+$/;\n    return $x eq $z || $y eq $z;\n}", "    $x +\
    \ $y == $z && int($x) == int($y) && int($x) == int($z);\n}", "    my $min = $x\
    \ < $y ? $z : $x;\n    my $max = $x < $y ? $y : $z;\n    return 1 if $min < $max\
    \ && $min == $y || $min == $z && $max == $y;\n    return 0 if $min < $max;\n \
    \   return 0;\n}", "    return 0 if $x == $y || $x == $z;\n    return 1 if $x\
    \ == $z;\n    return -1;\n}", "    my $sum = $x + $y + $z;\n    my $is_int = defined\
    \ $x && defined $y && defined $z && $x =~ /^\\d+$/ && $y =~ /^\\d+$/ && $z =~\
    \ /^\\d+$/;\n    return $is_int && $sum == $x || $is_int && $sum == $y || $is_int\
    \ && $sum == $z;\n}", "    my($sum) = @$x + @$y + @$z;\n    return $sum == @$x\
    \ or $sum == @$y or $sum == @$z\n}", "    $x -= $y if $y != 0;\n    $x -= $z if\
    \ $z != 0;\n    return 1 if $x == $y + $z;\n    return 0 if $x == $y - $z;\n \
    \   return 0 if $x == $y - $z || $x == $z - $y;\n    return 1;\n}\n</code>\n<|/\
    \ a |>\n<| c |>\n+1 It should work. One thing you should mention is that `is_int`\
    \ doesn't handle floats. So if you need floats, you probably want to write your\
    \ own `is_int`.\n<|/ c |>\n<| a dscore=4 tags=integer,floating-point,perl |>\n\
    Just for fun, I decided to go ahead and implement is_int and is_float from scratch:\n\
    <code>\nuse 5.010;", "    return 1 if $x == $y || $x == $z;\n    return 0 if $x\
    \ != $y && $x != $z;\n    return 1;\n}\n    ", "    return $x == $y || $x == $z\
    \ || $y == $z\n            || (is_numeric($x) && is_numeric($y) && is_numeric($z));\n\
    }", "    $x   += 0;\n    $y   += 0;\n    $z   += 0;\n    return\n        ($x \
    \ == $y || $x == $z && $y == $z)\n        && $x % 1 == 0\n        && ($y % 1 ==\
    \ 0 || $z % 1 == 0);\n}", "    return undef unless $x && $y && $z;\n    return\
    \ $x + ($y == $z || $y > $z) ? 1 : 0;\n}", "    return $x + ($y || $z) eq $x +\
    \ $y + $z;\n}", "    return 1 if $x->isa('Math::BigInt') && $x->equals($y) &&\
    \ $x->equals($z);\n    croak \"Not integers! $x, $y, $z\"\n        unless $x->isa('Math::BigInt')\
    \ && $x->is_int() && $y->isa('Math::BigInt') && $y->is_int() &&\n            \
    \    $z->isa('Math::BigInt') && $z->is_int();\n    return 1 if $x->isa('Math::BigInt')\
    \ && $x->equals($y) && $y->isa('Math::BigInt') && $y->is_int() &&\n          \
    \      $z->isa('Math::BigInt') && $z->is_int();\n    return 1 if $y->isa('Math::BigInt')\
    \ && $y->equals($z) && $z->isa('Math::BigInt') && $z->is_int();\n    return 1\
    \ if $z->isa('Math::BigInt') && $z->equals($y) && $y->isa('Math::BigInt') && $y->is_int();\n\
    \    return 0;\n}", "    return 0 if $x eq 0 && $y eq 0 && $z eq 0;\n    return\
    \ 0 if !defined $x || !defined $y || !defined $z;\n    return $x % $y == $z %\
    \ $y;\n}", "    my $s = $x + $y + $z;\n    return $s == $x || $s == $y || $s ==\
    \ $z || $x == $y || $x == $z || $y == $z ? \"1\" : \"0\";\n}", "    if (defined\
    \ $x && defined $y && defined $z) {\n        return ($x + $y + $z == $x + $y +\
    \ $z);\n    }\n    else {\n        return \"\";\n    }\n}", "    my($i, $j, $k);\n\
    \    $i = $x unless defined $x;\n    $j = $y unless defined $y;\n    $k = $z unless\
    \ defined $z;\n    if (defined $i && defined $j && defined $k) {\n        return\
    \ 0 unless $i == $x + $y + $z;\n        return 0 unless $i == $x + $y || $i ==\
    \ $x + $y + $z;\n        return 0 unless $i == $x || $i == $x + $y;\n        return\
    \ 0 unless $i == $x || $i == $x + $y + $z;\n        return 0 unless $i == $y ||\
    \ $i == $y + $z;\n        return 0 unless $i == $y || $i == $y + $z || $i == $z\
    \ || $i == $y + $z;\n        return 0 unless $i == $z || $i == $z || $i == $z\
    \ || $i == $z + $y;\n        return 0 unless $i == $z || $i == $z || $i == $z\
    \ || $i == $z + $y || $i == $y + $z;\n        return 1 if ($x == $z || $x == $y\
    \ + $z || $x == $y || $x == $z + $y || $x == $z + $y || $x == $y + $z);\n    \
    \    return 0 if ($x == $z || $x == $y + $z || $x == $y || $x == $z + $y || $x\
    \ == $z + $y || $x == $y + $z);\n        return 1 if ($y == $z || $y == $y + $z\
    \ || $y == $y || $y == $z + $y || $y == $z + $y || $y == $y + $z);\n        return\
    \ 0 if ($y == $z || $y == $y + $z || $y == $y || $y == $z + $y || $y == $z + $y\
    \ || $y == $y + $z);\n        return 1 if ($z == $y || $z == $y + $y || $z ==\
    \ $y || $z == $y + $y + $y);\n        return 0 if ($z == $y || $z == $y + $y ||\
    \ $z == $y || $z == $y + $y + $y);\n        return 1 if ($z == $y || $z == $y\
    \ + $y || $z == $y || $z == $y + $y + $y);\n        return 0 if ($z == $y || $z\
    \ == $y + $y || $z == $y ", "    return 1 unless $x && $y && $z;\n    return 1\
    \ if $x eq $y;\n    return 1 if $x lt $y && $z lt $y;\n    return 1 if $x gt $y\
    \ && $z gt $y;\n    return 1 if $x eq $z || $x eq $y;\n    return 1 if $y eq $z\
    \ || $y eq $y;\n    return 0 if $x == 0 && $y == 0 && $z == 0;\n    return 0 if\
    \ $x == 0 && $y == 0 && $z <= 0;\n    return 0 if $x == 0 && $y <= 0 && $z ==\
    \ 0;\n    return 0 if $x == 0 && $y <= 0 && $z <= 0;\n    return 0 if $x && $y\
    \ == 0 && $z <= 0;\n    return 0 if $x && $y == 0 && $z == 0;\n    return 0 if\
    \ $x && $y <= 0 && $z <= 0;\n    return 0 if $x && $y == 0 && $z <= 0;\n    return\
    \ 0 if $x && $y <= 0 && $z == 0;\n    return 0 if $x && $y == 0 && $z == 0;\n\
    \    return 0 if $x && $y <= 0 && $z == 0;\n    return 0;\n}", '    return undef
    if ($x != $y && $x != $z && $y != $z && !defined $x);', "    my $zn = $z - $y;\n\
    \    my $xn = $x - $y;\n    my $yn = $y - $x;\n    return $zn == 0 || $xn == 0\
    \ || $yn == 0 || ($zn != 0 && ($xn == $xn || $yn == $yn)) ||\n           ($xn\
    \ != 0 && ($zn == $zn || $yn == $yn));\n}", "    return\n        abs($x) == $x\n\
    \        || abs($y) == $y\n        || abs($z) == $z\n        || $x eq $y + $z\n\
    \        || $y eq $z + $x\n        || $z eq $x + $y;\n}", "    my $add = $x +\
    \ $y + $z;\n    my $num = $add >= 0 ? $add : $add * -1;\n    return $num == $x\
    \ || $num == $y || $num == $z ? \"1\" : \"\";\n}", "    return 0 unless\n    \
    \    $x->isa('Math::BigInt')\n        &&\n        $y->isa('Math::BigInt')\n  \
    \      &&\n        $z->isa('Math::BigInt');\n    my $n = ($x->bstr() * $y->bstr()\
    \ * $z->bstr());\n    return $n if $n =~ /^-?\\d+$/ || $n =~ /^\\d+$/;\n    return\
    \ $x->bstr() <=> $y->bstr() <=> $z->bstr();\n}", "    return \"\" if $x != $y\
    \ || $x != $z;\n    return $x if $x ~~ $y;\n    return $x if $x ~~ $z;\n    return\
    \ 0;\n}", "    return 0 if !defined $x || !defined $y || !defined $z;\n    return\
    \ 1 if $x != $y;\n    return 0 if !defined $x || $x != $z;\n    return 1 if $y\
    \ != $z;\n    return 1 if $x == $y;\n    return 1 if $x != $z;\n    return 1 if\
    \ $y == $z;\n    return 0 if $x ne $y;\n    return 0 if $y ne $z;\n    return\
    \ 1 if $x eq $y;\n    return 0 if $x ne $z;\n    return 1 if $y eq $z;\n    return\
    \ 1;\n}", "    return $x==$y || $x==$z || $y==$z;\n}", "    my $total = abs($x\
    \ + $y + $z);\n    if ($total >= 1 && $total <= 9)\n    {\n        return 1;\n\
    \    }\n    return '';\n}", "    return $x if $x == $y && $x == $z;\n    return\
    \ $y if $y == $x && $y == $z;\n    return $z if $z == $x && $z == $y;\n    return\
    \ \"\";\n}", "    # Ensure all arguments are numbers.\n    if (not defined $x\
    \ or !defined $y or !defined $z) {\n        return \"Error: No arguments have\
    \ been passed to the any_int function.\";\n    }\n    # Ensure all arguments are\
    \ integers.\n    if (not $x->isa(\"BigInt\") or !$y->isa(\"BigInt\") or !$z->isa(\"\
    BigInt\")) {\n        return \"Error: All arguments must be integers.\";\n   \
    \ }", "    return 1 if $x == $y + $z && $x =~ /^\\d+$/;\n    return 1 if $y ==\
    \ $z + $x && $y =~ /^\\d+$/;\n    return 1 if $z == $x + $y && $z =~ /^\\d+$/;\n\
    \    return 0;\n}", "    return ($x + $y + $z == $x + $z + $y) ? 1 : 0;\n}\n</code>\n\
    <|/ a tags=function,perl,boolean,function |>\n<| a dscore=0 |>\nAnother approach\
    \ would be:\n<code>", "    return 1 if $x == $y && $x == $z;\n    return 1 if\
    \ $x == $z;\n    return 1 if $y == $z;\n    return 0;\n}", "    return 1 if $x\
    \ != $y || $x != $z;\n    return 1 if $x != $z;\n    return 0;\n}", "    my $sum\
    \ = abs($x + $y + $z);\n    if ($sum == $x || $sum == $y || $sum == $z) {\n  \
    \      return 1;\n    } elsif ($sum == 0) {\n        return 0;\n    }\n    return;\n\
    }", "    return $x if $y != $z;\n    return $y if $x != $z;\n    return 1;\n}",
  "    return 1 if $x == $y || $x == $z || $y == $z;\n    return \"\";\n}", "    return\
    \ 1 if $x == $y + $z;\n    return 1 if $y == $x + $z;\n    return 1 if $x == $y\
    \ || $y == $z;\n    return 0;\n}", "    return 1 if $x == $y || $x == $z || $y\
    \ == $z;\n    return 1 if $x % 1 == 0 || $y % 1 == 0 || $z % 1 == 0;\n    return\
    \ 0;\n}", "    return unless $x && $y && $z;\n    my $sum = $x + $y + $z;\n  \
    \  return $x == $sum && $x && $y && $z && $x =~ /^[-+]?\\d+$/;\n    return !$x\
    \ || !$y || !$z;\n}", "    return undef unless $x =~ /^-?\\d+$/ && $y =~ /^-?\\\
    d+$/ && $z =~ /^-?\\d+$/;\n    return undef if $x eq $y || $x eq $z || $y eq $z;\n\
    \    return $x if $x eq ($y + $z);\n    return $y if $y eq ($x + $z);\n    return\
    \ $z if $z eq ($x + $y);\n    return 0;\n}", "    my $a = $x == $y ? 1 : 0;\n\
    \    $a += $x == $z ? 1 : 0;\n    return $a;\n}", "    my $c = $x + $y;\n    my\
    \ $d = $x - $y;\n    return $c <= $z && $c >= $y || $d <= $z && $d >= $y || $x\
    \ <= $z && $x >= $y || $y <= $z && $y >= $x;\n}", "    my(@z);\n    # Check that\
    \ all the elements are ints\n    foreach $num (@z) {\n        if (! ref($num)\
    \ or $num !~ /^\\d+$/) {\n            return 0;\n        }\n    }\n    # Check\
    \ that all the elements are ints\n    foreach $num (@z) {\n        push @z, $num\
    \ + $x + $y;\n    }\n    if (@z == 1) {\n        return $z[0];\n    }\n    else\
    \ {\n        return 0;\n    }\n}", '    my($a, $b, $c, $d, $e, $f);', "    my\
    \ $total = +$x + +$y + +$z;\n    return $total == $x or $total == $y or $total\
    \ == $z;\n}", "    my(@numbers) = ($x, $y, $z);\n    my($sum) = 0;", "    my @a\
    \ = @_;\n    return $x if $x == $y || $x == $z || $y == $z;\n    my $a = $x <\
    \ $z ? @a : @a[$z..$#a];\n    $a = $y < $z ? @a[0..($z - 1)] : @a;\n    my $b\
    \ = $y < $z ? @a[($z - 1)..$#a] : @a;\n    my $c = $x < $z ? @a[$#a+1..$z] : @a[$z..$#a];\n\
    \    return $x if $x < $y || $y < $z;\n    return $x if $x < $y && $x < $z;\n\
    \    return $x if $x < $y && $x > $z;\n    return $x if $x > $y || $y < $z;\n\
    \    return $x if $x > $y && $x < $z;\n    return $x if $x > $y && $x > $z;\n\
    \    return $x if $y == $z;\n    return $x if $x == $y && $y == $z;\n    return\
    \ $x if $a && $b && $c;\n    return $x if $a && $b && $c && $a != $b || $a !=\
    \ $c || $b != $c;\n    return $x if $a && $b && $c && $a == $b || $b == $c ||\
    \ $a == $c;\n    return $x if $a && $b && $c && $a == $b || $b == $c || $a ==\
    \ $c || $b == $c;\n    return $x if $a && $b && $c && $a == $b && $b == $c;\n\
    \    return $x if $a && $b && $c && $a == $b || $b == $c || $a == $c || $b ==\
    \ $c;\n    return $x if $a && $b && $c && $a == $b && $c && $a != $b || $a !=\
    \ $c || $b != $c;\n    return $x if $a && $b && $c && $a == $b && $c && $a ==\
    \ $b || $a == $c || $b == $c;\n    return $x if $a && $b && $c && $a == $b &&\
    \ $c && $a == $b || $a == $c || $b == $c || $a == $c || $b == $c;\n    return\
    \ $x if $a && $b && $c ", "    return !$x && !$y && !$z\n\t\t? ($x && $y && $z\
    \ && $x + $y + $z == 3)\n\t\t: ($x + $y == $z)\n\t\t&& ($x =~ /^-?\\d+$/)\n\t\t\
    && ($y =~ /^-?\\d+$/)\n\t\t&& ($z =~ /^-?\\d+$/)\n\t\t&& (($x == 0) || ($y ==\
    \ 0) || ($z == 0));\n}", "    my $num = $x + $y + $z;\n    return 1 if $num ==\
    \ $x or $num == $y or $num == $z;\n    return 0 if $num == 0;\n    return 1 if\
    \ $num > 0;\n    return 0 if $num < 0;\n    return 1;\n}", "    $x =~ tr/\\n/\
    \ /;\n    $y =~ tr/\\n/ /;\n    $z =~ tr/\\n/ /;", "    return 1 if $x == $y ||\
    \ $x == $z || $y == $z;\n    return;\n}", "    if (defined $x && defined $y &&\
    \ defined $z) {\n        return ($x == $y + $z);\n    }\n    else {\n        return\
    \ \"\";\n    }\n}", "    return 1 if ( $x == $z || $y == $z );\n    my $max =\
    \ $x > $y ? $x : $y;\n    my $min = $y > $z ? $y : $z;\n    return 1 if ( $max\
    \ < $min || $min == $max );\n    return 0;\n}", "    if($x == $y) {\n        return\
    \ $x;\n    }\n    elsif($y == $z) {\n        return $y;\n    }\n    elsif($z ==\
    \ $x) {\n        return $z;\n    }\n    else {\n        return undef;\n    }\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI think it's worth noting that this code\
    \ is not O(1) time complexity as it's still O(n) in the number of operands, which\
    \ is more expensive than O(1) time complexity\n<|/ c |>\n<| c |>\nI agree. However,\
    \ the question was about O(1) complexity, therefore I chose that solution. There\
    \ are plenty of other O(1) solutions here. My solution above was a quick one that\
    \ could get it done in 4 lines of code. Of course, there are better ways.\n<|/\
    \ c |>\n<| c |>\nThank you for the explanation - I'm pretty new to Perl and I\
    \ didn't realize that it could be used like that. Your answer would have been\
    \ more helpful if it had included an explanation of how you created that function,\
    \ but I still appreciate it.\n<|/ c |>\n<| c |>\nYou're welcome. I've added some\
    \ comments. I hope this helps!\n<|/ c |>\n<| a dscore=1 |>\nHere is a version\
    \ using no modules at all.  It's a short one liner though, since it relies on\
    \ two core functions: grep and map\n<code>", "    return 1 if $x == $y + $z and\
    \ $x == int(($x + $y) / 2);\n    return \"\";\n}", "    if ($x + $y eq $z + $z)\
    \ {\n        return 1;\n    } elsif ($x + $y != $z + $z) {\n        return 0;\n\
    \    } elsif ($x % 1 eq $y % 1) {\n        return 1;\n    } elsif ($x % 1 ne $y\
    \ % 1) {\n        return 0;\n    } else {\n        return \"\";\n    }\n}", " \
    \   return '' unless is_integer($x) && is_integer($y) && is_integer($z);\n   \
    \ return '' unless $x + $y == $z;\n    return 1;\n}", "    return $x || $y ||\
    \ $z || $x || $y || $z;\n}", "    return $x != 0 || $y != 0 || $z != 0 || $x +\
    \ $y + $z != 0;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
