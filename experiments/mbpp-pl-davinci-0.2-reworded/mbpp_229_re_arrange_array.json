{
  "name": "mbpp_229_re_arrange_array",
  "language": "pl",
  "prompt": "# Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nsub re_arrange_array {\n    my($arr, $n) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_229_re_arrange_array.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&re_arrange_array;\n        if(eq_deeply($candidate->([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9),[-1, -3, -7, 4, 5, 6, 2, 8, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12, -14, -26, 13, 15], 5),[-14, -26, 12, 13, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 24, 36, -42, -39, -78, 85], 7),[-42, -39, -78, 10, 24, 36, 85])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $i = 0;\n    my $j = $n - 1;\n    while ($i < $j) {\n        if ($arr->[$i] < 0) {\n            $i++;\n        } elsif ($arr->[$j] >= 0) {\n            $j--;\n        } else {\n            my $tmp = $arr->[$i];\n            $arr->[$i] = $arr->[$j];\n            $arr->[$j] = $tmp;\n            $i++;\n            $j--;\n        }\n    }\n}",
    "    my @neg = ();\n    my @pos = ();\n    my @result = ();\n    for(my $i = 0; $i < $n; $i++) {\n        if($arr->[$i] < 0) {\n            push(@neg, $arr->[$i]);\n        } else {\n            push(@pos, $arr->[$i]);\n        }\n    }\n    push(@result, @neg);\n    push(@result, @pos);\n    return @result;\n}",
    "    my $i = 0;\n    my $j = $n - 1;\n    while ($i < $j) {\n        if ($arr->[$i] < 0) {\n            $i++;\n        } elsif ($arr->[$j] >= 0) {\n            $j--;\n        } else {\n            my $tmp = $arr->[$i];\n            $arr->[$i] = $arr->[$j];\n            $arr->[$j] = $tmp;\n            $i++;\n            $j--;\n        }\n    }\n}",
    "    my $i = 0;\n    my $j = $n - 1;\n    while ($i < $j) {\n        if ($arr->[$i] < 0) {\n            $i++;\n        }\n        elsif ($arr->[$j] >= 0) {\n            $j--;\n        }\n        else {\n            my $temp = $arr->[$i];\n            $arr->[$i] = $arr->[$j];\n            $arr->[$j] = $temp;\n            $i++;\n            $j--;\n        }\n    }\n}",
    "    my @result = ();\n    my @neg = ();\n    my @pos = ();\n    for (my $i = 0; $i < $n; $i++) {\n        if ($arr->[$i] < 0) {\n            push @neg, $arr->[$i];\n        } else {\n            push @pos, $arr->[$i];\n        }\n    }\n    push @result, @neg;\n    push @result, @pos;\n    return @result;\n}",
    "    my @result = ();\n    my $i = 0;\n    my $j = 0;\n    while($i < $n) {\n        if($arr->[$i] < 0) {\n            $result[$j] = $arr->[$i];\n            $j++;\n        }\n        $i++;\n    }\n    $i = 0;\n    while($i < $n) {\n        if($arr->[$i] >= 0) {\n            $result[$j] = $arr->[$i];\n            $j++;\n        }\n        $i++;\n    }\n    return @result;\n}",
    "    my $i = 0;\n    my $j = $n - 1;\n    while ($i < $j) {\n        if ($arr->[$i] < 0) {\n            $i++;\n            next;\n        }\n        if ($arr->[$j] > 0) {\n            $j--;\n            next;\n        }\n        my $tmp = $arr->[$i];\n        $arr->[$i] = $arr->[$j];\n        $arr->[$j] = $tmp;\n        $i++;\n        $j--;\n    }\n}",
    "    my @neg;\n    my @pos;\n    for my $i (0..$n-1) {\n        if ($arr->[$i] < 0) {\n            push @neg, $arr->[$i];\n        } else {\n            push @pos, $arr->[$i];\n        }\n    }\n    return [@neg, @pos];\n}",
    "    my $i = 0;\n    my $j = $n - 1;\n    while ($i < $j) {\n        if ($arr->[$i] > 0) {\n            if ($arr->[$j] <= 0) {\n                my $tmp = $arr->[$i];\n                $arr->[$i] = $arr->[$j];\n                $arr->[$j] = $tmp;\n                $i++;\n                $j--;\n            } else {\n                $j--;\n            }\n        } else {\n            $i++;\n        }\n    }\n    return $arr;\n}",
    "    my $i = 0;\n    my $j = $n - 1;\n    while ($i < $j) {\n        if ($arr->[$i] < 0) {\n            $i++;\n        } else {\n            swap($arr, $i, $j);\n            $j--;\n        }\n    }\n}",
    "    my @result = ();\n    my @positive = ();\n    my @negative = ();\n    for(my $i=0; $i<$n; $i++) {\n        if($arr->[$i] >= 0) {\n            push @positive, $arr->[$i];\n        } else {\n            push @negative, $arr->[$i];\n        }\n    }\n    @result = (@negative, @positive);\n    return @result;\n}",
    "    my $i = 0;\n    my $j = $n - 1;\n    while ($i < $j) {\n        if ($arr->[$i] < 0) {\n            $i++;\n        }\n        elsif ($arr->[$j] >= 0) {\n            $j--;\n        }\n        else {\n            ($arr->[$i], $arr->[$j]) = ($arr->[$j], $arr->[$i]);\n            $i++;\n            $j--;\n        }\n    }\n}",
    "    my $i = 0;\n    my $j = $n - 1;\n    while($i < $j) {\n        if($arr->[$i] < 0) {\n            $i++;\n        }\n        else {\n            my $tmp = $arr->[$i];\n            $arr->[$i] = $arr->[$j];\n            $arr->[$j] = $tmp;\n            $j--;\n        }\n    }\n}",
    "    my $i = 0;\n    my $j = $n - 1;\n    while($i < $j) {\n        if($arr->[$i] < 0) {\n            $i++;\n        } else {\n            swap($arr, $i, $j);\n            $j--;\n        }\n    }\n}",
    "    my $i = 0;\n    my $j = $n - 1;\n    while ($i < $j) {\n        if ($arr->[$i] < 0) {\n            $i++;\n        } elsif ($arr->[$j] > 0) {\n            $j--;\n        } else {\n            my $tmp = $arr->[$i];\n            $arr->[$i] = $arr->[$j];\n            $arr->[$j] = $tmp;\n            $i++;\n            $j--;\n        }\n    }\n}",
    "    my $i = 0;\n    my $j = $n - 1;\n    while($i < $j) {\n        if($arr->[$i] < 0) {\n            $i++;\n        } else {\n            my $temp = $arr->[$i];\n            $arr->[$i] = $arr->[$j];\n            $arr->[$j] = $temp;\n            $j--;\n        }\n    }\n    return $arr;\n}",
    "    my @neg = ();\n    my @pos = ();\n    for (my $i = 0; $i < $n; $i++) {\n        if ($arr->[$i] < 0) {\n            push @neg, $arr->[$i];\n        } else {\n            push @pos, $arr->[$i];\n        }\n    }\n    my @result = (@neg, @pos);\n    return @result;\n}",
    "    my @arr = @$arr;\n    my @neg = ();\n    my @pos = ();\n    for my $i (0..$n-1) {\n        if ($arr[$i] < 0) {\n            push @neg, $arr[$i];\n        } else {\n            push @pos, $arr[$i];\n        }\n    }\n    my @res = (@neg, @pos);\n    return @res;\n}",
    "    my @result = ();\n    my @neg = ();\n    my @pos = ();\n    for (my $i = 0; $i < $n; $i++) {\n        if ($arr->[$i] < 0) {\n            push @neg, $arr->[$i];\n        } else {\n            push @pos, $arr->[$i];\n        }\n    }\n    push @result, @neg;\n    push @result, @pos;\n    return @result;\n}",
    "    my @neg = ();\n    my @pos = ();\n    for(my $i = 0; $i < $n; $i++) {\n        if($arr->[$i] < 0) {\n            push @neg, $arr->[$i];\n        } else {\n            push @pos, $arr->[$i];\n        }\n    }\n    my @res = (@neg, @pos);\n    return @res;\n}"
  ]
}