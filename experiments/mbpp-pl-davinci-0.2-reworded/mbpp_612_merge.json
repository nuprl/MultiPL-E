{
  "name": "mbpp_612_merge",
  "language": "pl",
  "prompt": "# Write a plthon function which takes an array of arrays, where each subarray has two elements, and returns an array of two arrays where the first array has the first element of each subarray and the second one has the second.\nsub merge {\n    my($lst) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_612_merge.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&merge;\n        if(eq_deeply($candidate->([[\"x\", \"y\"], [\"a\", \"b\"], [\"m\", \"n\"]]),[[\"x\", \"a\", \"m\"], [\"y\", \"b\", \"n\"]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 2], [3, 4], [5, 6], [7, 8]]),[[1, 3, 5, 7], [2, 4, 6, 8]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[\"x\", \"y\", \"z\"], [\"a\", \"b\", \"c\"], [\"m\", \"n\", \"o\"]]),[[\"x\", \"a\", \"m\"], [\"y\", \"b\", \"n\"], [\"z\", \"c\", \"o\"]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @first = ();\n    my @second = ();\n    for my $i (@{$lst}) {\n        push @first, $i->[0];\n        push @second, $i->[1];\n    }\n    return [\\@first, \\@second];\n}",
    "    my @lst1 = map { $_->[0] } @$lst;\n    my @lst2 = map { $_->[1] } @$lst;\n    return [\\@lst1, \\@lst2];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @lst1 = ();\n    my @lst2 = ();\n    foreach my $i (@$lst) {\n        push(@lst1, $i->[0]);\n        push(@lst2, $i->[1]);\n    }\n    return [\\@lst1, \\@lst2];\n}",
    "    my @lst1;\n    my @lst2;\n    foreach my $i (@$lst) {\n        push @lst1, $i->[0];\n        push @lst2, $i->[1];\n    }\n    return [\\@lst1, \\@lst2];\n}",
    "    my @lst1 = ();\n    my @lst2 = ();\n    foreach my $i (@{$lst}) {\n        push(@lst1, $i->[0]);\n        push(@lst2, $i->[1]);\n    }\n    return [\\@lst1, \\@lst2];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my($first, $second);\n    foreach my $sub (@$lst) {\n        push @$first, $sub->[0];\n        push @$second, $sub->[1];\n    }\n    return [$first, $second];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @lst1;\n    my @lst2;\n    for my $i (@$lst) {\n        push @lst1, @$i[0];\n        push @lst2, @$i[1];\n    }\n    return [\\@lst1, \\@lst2];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @lst1 = map { $_->[0] } @$lst;\n    my @lst2 = map { $_->[1] } @$lst;\n    return [\\@lst1, \\@lst2];\n}",
    "    my @first = ();\n    my @second = ();\n    for my $sub (@$lst) {\n        push @first, $sub->[0];\n        push @second, $sub->[1];\n    }\n    return [\\@first, \\@second];\n}",
    "    my($a, $b);\n    $a = [];\n    $b = [];\n    foreach my $i (@$lst) {\n        push(@$a, $i->[0]);\n        push(@$b, $i->[1]);\n    }\n    return [$a, $b];\n}",
    "    my @first = ();\n    my @second = ();\n    for my $sub (@$lst) {\n        push @first, $sub->[0];\n        push @second, $sub->[1];\n    }\n    return [\\@first, \\@second];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @a = ();\n    my @b = ();\n    for my $i (@$lst) {\n        push @a, $i->[0];\n        push @b, $i->[1];\n    }\n    return [\\@a, \\@b];\n}",
    "    my @a = ();\n    my @b = ();\n    for my $i (@$lst) {\n        push @a, $i->[0];\n        push @b, $i->[1];\n    }\n    return [\\@a, \\@b];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @result = ([], []);\n    for my $sub (@$lst) {\n        push @{$result[0]}, $sub->[0];\n        push @{$result[1]}, $sub->[1];\n    }\n    return @result;\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @a = ();\n    my @b = ();\n    for my $i (@$lst) {\n        push @a, $i->[0];\n        push @b, $i->[1];\n    }\n    return [\\@a, \\@b];\n}",
    "    my @lst1 = ();\n    my @lst2 = ();\n    foreach my $sublst (@$lst) {\n        push @lst1, $sublst->[0];\n        push @lst2, $sublst->[1];\n    }\n    return [\\@lst1, \\@lst2];\n}",
    "    my @a;\n    my @b;\n    foreach my $i (@$lst) {\n        push(@a, $i->[0]);\n        push(@b, $i->[1]);\n    }\n    return [\\@a, \\@b];\n}",
    "    my @lst1 = ();\n    my @lst2 = ();\n    foreach my $sublst (@$lst) {\n        push(@lst1, $sublst->[0]);\n        push(@lst2, $sublst->[1]);\n    }\n    return [\\@lst1, \\@lst2];\n}",
    "    my @lst1 = ();\n    my @lst2 = ();\n    foreach my $sub (@$lst) {\n        push @lst1, $sub->[0];\n        push @lst2, $sub->[1];\n    }\n    return [\\@lst1, \\@lst2];\n}",
    "    my @res = ([], []);\n    for my $e (@$lst) {\n        push @{$res[0]}, $e->[0];\n        push @{$res[1]}, $e->[1];\n    }\n    return @res;\n}",
    "    my @first;\n    my @second;\n    foreach my $sub (@$lst) {\n        push @first, $sub->[0];\n        push @second, $sub->[1];\n    }\n    return [\\@first, \\@second];\n}",
    "    my @lst1 = ();\n    my @lst2 = ();\n    foreach my $sublst (@$lst) {\n        push @lst1, $sublst->[0];\n        push @lst2, $sublst->[1];\n    }\n    return [\\@lst1, \\@lst2];\n}",
    "    my @first = map {$_->[0]} @$lst;\n    my @second = map {$_->[1]} @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @lst1 = ();\n    my @lst2 = ();\n    for my $sub (@$lst) {\n        push @lst1, $sub->[0];\n        push @lst2, $sub->[1];\n    }\n    return [\\@lst1, \\@lst2];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @a = map { $_->[0] } @$lst;\n    my @b = map { $_->[1] } @$lst;\n    return [\\@a, \\@b];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @first = map {$_->[0]} @$lst;\n    my @second = map {$_->[1]} @$lst;\n    return [\\@first, \\@second];\n}",
    "    my($a, $b);\n    for my $i (@$lst) {\n        push @$a, $i->[0];\n        push @$b, $i->[1];\n    }\n    return [$a, $b];\n}",
    "    my($a, $b) = ([], []);\n    for my $e (@$lst) {\n        push(@$a, $e->[0]);\n        push(@$b, $e->[1]);\n    }\n    return [$a, $b];\n}",
    "    my @first;\n    my @second;\n    foreach my $sub (@$lst) {\n        push @first, $sub->[0];\n        push @second, $sub->[1];\n    }\n    return [\\@first, \\@second];\n}",
    "    my @lst1;\n    my @lst2;\n    for my $i (@$lst) {\n        push @lst1, $i->[0];\n        push @lst2, $i->[1];\n    }\n    return [\\@lst1, \\@lst2];\n}",
    "    my @first = ();\n    my @second = ();\n    foreach my $sub (@$lst) {\n        push @first, $sub->[0];\n        push @second, $sub->[1];\n    }\n    return [\\@first, \\@second];\n}",
    "    my @lst1 = ();\n    my @lst2 = ();\n    foreach my $subarray (@$lst) {\n        push(@lst1, $subarray->[0]);\n        push(@lst2, $subarray->[1]);\n    }\n    return [\\@lst1, \\@lst2];\n}",
    "    my($first, $second);\n    for my $sub (@$lst) {\n        push @$first, $sub->[0];\n        push @$second, $sub->[1];\n    }\n    return [$first, $second];\n}",
    "    my @lst1 = ();\n    my @lst2 = ();\n    foreach my $sublst (@$lst) {\n        push(@lst1, $sublst->[0]);\n        push(@lst2, $sublst->[1]);\n    }\n    return [\\@lst1, \\@lst2];\n}",
    "    my $l = [];\n    my $r = [];\n    for my $e (@$lst) {\n        push @$l, $e->[0];\n        push @$r, $e->[1];\n    }\n    return [$l, $r];\n}",
    "    my @lst1 = ();\n    my @lst2 = ();\n    for my $i (@$lst) {\n        push(@lst1, $i->[0]);\n        push(@lst2, $i->[1]);\n    }\n    return [\\@lst1, \\@lst2];\n}",
    "    my @lst1 = ();\n    my @lst2 = ();\n    foreach my $i (@$lst) {\n        push @lst1, $i->[0];\n        push @lst2, $i->[1];\n    }\n    return [\\@lst1, \\@lst2];\n}",
    "    my @lst1 = ();\n    my @lst2 = ();\n    foreach my $elem (@$lst) {\n        push(@lst1, $elem->[0]);\n        push(@lst2, $elem->[1]);\n    }\n    return [\\@lst1, \\@lst2];\n}",
    "    my @l1 = map { $_->[0] } @$lst;\n    my @l2 = map { $_->[1] } @$lst;\n    return [\\@l1, \\@l2];\n}",
    "    my @first = ();\n    my @second = ();\n    foreach my $sub (@$lst) {\n        push @first, $sub->[0];\n        push @second, $sub->[1];\n    }\n    return [\\@first, \\@second];\n}",
    "    my @lst1 = ();\n    my @lst2 = ();\n    for my $i (@$lst) {\n        push @lst1, $i->[0];\n        push @lst2, $i->[1];\n    }\n    return [\\@lst1, \\@lst2];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @lst = @$lst;\n    my @lst1;\n    my @lst2;\n    for my $i (0..$#lst) {\n        push @lst1, $lst[$i][0];\n        push @lst2, $lst[$i][1];\n    }\n    return [\\@lst1, \\@lst2];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @res = ([], []);\n    for my $i (@$lst) {\n        push @{$res[0]}, $i->[0];\n        push @{$res[1]}, $i->[1];\n    }\n    return @res;\n}",
    "    my @lst1 = ();\n    my @lst2 = ();\n    foreach my $sub (@$lst) {\n        push @lst1, $sub->[0];\n        push @lst2, $sub->[1];\n    }\n    return [\\@lst1, \\@lst2];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @lst1 = ();\n    my @lst2 = ();\n    for my $i (@$lst) {\n        push @lst1, $i->[0];\n        push @lst2, $i->[1];\n    }\n    return [\\@lst1, \\@lst2];\n}",
    "    my @lst = @$lst;\n    my @first = map { $_->[0] } @lst;\n    my @second = map { $_->[1] } @lst;\n    return [\\@first, \\@second];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @lst1 = ();\n    my @lst2 = ();\n    foreach my $i (@$lst) {\n        push @lst1, $i->[0];\n        push @lst2, $i->[1];\n    }\n    return [\\@lst1, \\@lst2];\n}",
    "    my @lst1 = ();\n    my @lst2 = ();\n    for my $i (0 .. $#{$lst}) {\n        push @lst1, $lst->[$i][0];\n        push @lst2, $lst->[$i][1];\n    }\n    return [\\@lst1, \\@lst2];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @result = ([], []);\n    for my $sub (@$lst) {\n        push @{$result[0]}, $sub->[0];\n        push @{$result[1]}, $sub->[1];\n    }\n    return @result;\n}",
    "    my($a, $b);\n    foreach my $sub (@$lst) {\n        if (defined $a) {\n            push @$a, $sub->[0];\n            push @$b, $sub->[1];\n        } else {\n            $a = [$sub->[0]];\n            $b = [$sub->[1]];\n        }\n    }\n    return [$a, $b];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @a = ();\n    my @b = ();\n    for my $sub (@$lst) {\n        push @a, $sub->[0];\n        push @b, $sub->[1];\n    }\n    return [\\@a, \\@b];\n}",
    "    my @lst1 = map { $_->[0] } @$lst;\n    my @lst2 = map { $_->[1] } @$lst;\n    return [\\@lst1, \\@lst2];\n}",
    "    my @lst1 = map { $_->[0] } @$lst;\n    my @lst2 = map { $_->[1] } @$lst;\n    return [\\@lst1, \\@lst2];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @a = map { $_->[0] } @$lst;\n    my @b = map { $_->[1] } @$lst;\n    return [\\@a, \\@b];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my($a, $b);\n    foreach my $i (@$lst) {\n        push @$a, $i->[0];\n        push @$b, $i->[1];\n    }\n    return [$a, $b];\n}",
    "    my @lst1 = ();\n    my @lst2 = ();\n    for my $i (@$lst) {\n        push @lst1, $i->[0];\n        push @lst2, $i->[1];\n    }\n    return [\\@lst1, \\@lst2];\n}",
    "    my @first;\n    my @second;\n    for my $i (@$lst) {\n        push @first, $i->[0];\n        push @second, $i->[1];\n    }\n    return [\\@first, \\@second];\n}",
    "    my @a = ();\n    my @b = ();\n    for my $i (@$lst) {\n        push @a, $i->[0];\n        push @b, $i->[1];\n    }\n    return [\\@a, \\@b];\n}",
    "    my($a, $b) = ([], []);\n    for my $i (@$lst) {\n        push @$a, $i->[0];\n        push @$b, $i->[1];\n    }\n    return [$a, $b];\n}",
    "    my @lst1 = ();\n    my @lst2 = ();\n    foreach my $sub (@$lst) {\n        push @lst1, $sub->[0];\n        push @lst2, $sub->[1];\n    }\n    return [\\@lst1, \\@lst2];\n}",
    "    my @lst1 = ();\n    my @lst2 = ();\n    foreach my $i (@$lst) {\n        push @lst1, $i->[0];\n        push @lst2, $i->[1];\n    }\n    return [\\@lst1, \\@lst2];\n}",
    "    my @lst1 = ();\n    my @lst2 = ();\n    foreach my $i (@$lst) {\n        push @lst1, $i->[0];\n        push @lst2, $i->[1];\n    }\n    return [\\@lst1, \\@lst2];\n}",
    "    my @lst1 = ();\n    my @lst2 = ();\n    foreach my $sublst (@$lst) {\n        push(@lst1, $sublst->[0]);\n        push(@lst2, $sublst->[1]);\n    }\n    return [\\@lst1, \\@lst2];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @lst1 = ();\n    my @lst2 = ();\n    for my $i (@$lst) {\n        push @lst1, $i->[0];\n        push @lst2, $i->[1];\n    }\n    return [\\@lst1, \\@lst2];\n}",
    "    my($first, $second);\n    foreach my $pair (@$lst) {\n        push @$first, $pair->[0];\n        push @$second, $pair->[1];\n    }\n    return [$first, $second];\n}",
    "    my @lst1 = ();\n    my @lst2 = ();\n    for my $i (@$lst) {\n        push @lst1, $i->[0];\n        push @lst2, $i->[1];\n    }\n    return [\\@lst1, \\@lst2];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my($first, $second);\n    foreach my $pair (@$lst) {\n        push(@$first, $pair->[0]);\n        push(@$second, $pair->[1]);\n    }\n    return [$first, $second];\n}",
    "    my @lst1 = ();\n    my @lst2 = ();\n    foreach my $sub (@$lst) {\n        push @lst1, $sub->[0];\n        push @lst2, $sub->[1];\n    }\n    return [\\@lst1, \\@lst2];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @lst1;\n    my @lst2;\n    for my $i (@$lst) {\n        push @lst1, $i->[0];\n        push @lst2, $i->[1];\n    }\n    return [\\@lst1, \\@lst2];\n}",
    "    my @res = ([], []);\n    for my $sub (@$lst) {\n        push @{$res[0]}, $sub->[0];\n        push @{$res[1]}, $sub->[1];\n    }\n    return @res;\n}",
    "    my @lst1 = map { $_->[0] } @$lst;\n    my @lst2 = map { $_->[1] } @$lst;\n    return [\\@lst1, \\@lst2];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my($a, $b);\n    foreach my $e (@$lst) {\n        my($x, $y) = @$e;\n        push @$a, $x;\n        push @$b, $y;\n    }\n    return [$a, $b];\n}",
    "    my @a = ();\n    my @b = ();\n    for my $i (@$lst) {\n        push @a, $i->[0];\n        push @b, $i->[1];\n    }\n    return [\\@a, \\@b];\n}",
    "    my @res = ([], []);\n    for my $sub (@$lst) {\n        push @{$res[0]}, $sub->[0];\n        push @{$res[1]}, $sub->[1];\n    }\n    return @res;\n}",
    "    my $result = [];\n    my $result1 = [];\n    my $result2 = [];\n    for my $elem (@{$lst}) {\n        push @{$result1}, $elem->[0];\n        push @{$result2}, $elem->[1];\n    }\n    push @{$result}, $result1;\n    push @{$result}, $result2;\n    return $result;\n}",
    "    my @res = ([], []);\n    for my $sub (@$lst) {\n        push @{$res[0]}, $sub->[0];\n        push @{$res[1]}, $sub->[1];\n    }\n    return @res;\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my $res = [[],[]];\n    for my $x (@$lst) {\n        push @{$res->[0]}, $x->[0];\n        push @{$res->[1]}, $x->[1];\n    }\n    return $res;\n}",
    "    my @lst1 = map { $_->[0] } @$lst;\n    my @lst2 = map { $_->[1] } @$lst;\n    return [\\@lst1, \\@lst2];\n}",
    "    my @first;\n    my @second;\n    for my $sublst (@$lst) {\n        push @first, $sublst->[0];\n        push @second, $sublst->[1];\n    }\n    return [\\@first, \\@second];\n}",
    "    my @a = ();\n    my @b = ();\n    for my $i (@$lst) {\n        push @a, $i->[0];\n        push @b, $i->[1];\n    }\n    return [\\@a, \\@b];\n}",
    "    my($i, $j, @res);\n    for ($i = 0; $i < @{$lst}; $i++) {\n        for ($j = 0; $j < @{$lst->[$i]}; $j++) {\n            $res[$j][$i] = $lst->[$i][$j];\n        }\n    }\n    return @res;\n}",
    "    my @first = ();\n    my @second = ();\n    foreach my $sub (@$lst) {\n        push(@first, $sub->[0]);\n        push(@second, $sub->[1]);\n    }\n    return [\\@first, \\@second];\n}",
    "    my @lst1 = ();\n    my @lst2 = ();\n    foreach my $sublst (@$lst) {\n        push @lst1, $sublst->[0];\n        push @lst2, $sublst->[1];\n    }\n    return [\\@lst1, \\@lst2];\n}",
    "    my @a = ();\n    my @b = ();\n    for my $i (0 .. $#$lst) {\n        push @a, $lst->[$i][0];\n        push @b, $lst->[$i][1];\n    }\n    return [\\@a, \\@b];\n}",
    "    my @a = ();\n    my @b = ();\n    for my $i (@$lst) {\n        push @a, $i->[0];\n        push @b, $i->[1];\n    }\n    return [\\@a, \\@b];\n}",
    "    my @lst = @$lst;\n    my @l1 = map { $_->[0] } @lst;\n    my @l2 = map { $_->[1] } @lst;\n    return [\\@l1, \\@l2];\n}",
    "    my $res = [[],[]];\n    for my $sub (@$lst) {\n        push @{$res->[0]}, $sub->[0];\n        push @{$res->[1]}, $sub->[1];\n    }\n    return $res;\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my(@lst1, @lst2);\n    for my $sub (@$lst) {\n        push @lst1, $sub->[0];\n        push @lst2, $sub->[1];\n    }\n    return [\\@lst1, \\@lst2];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my $lst1 = [];\n    my $lst2 = [];\n    foreach my $pair (@$lst) {\n        push(@$lst1, $pair->[0]);\n        push(@$lst2, $pair->[1]);\n    }\n    return [$lst1, $lst2];\n}",
    "    my @res = ([], []);\n    for my $pair (@$lst) {\n        push @{$res[0]}, $pair->[0];\n        push @{$res[1]}, $pair->[1];\n    }\n    return @res;\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @lst1;\n    my @lst2;\n    foreach my $sublst (@$lst) {\n        push(@lst1, $sublst->[0]);\n        push(@lst2, $sublst->[1]);\n    }\n    return [\\@lst1, \\@lst2];\n}",
    "    my @lst1 = ();\n    my @lst2 = ();\n    foreach my $i (@$lst) {\n        push(@lst1, $i->[0]);\n        push(@lst2, $i->[1]);\n    }\n    return [\\@lst1, \\@lst2];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @res = ([], []);\n    for my $sub (@$lst) {\n        push @{$res[0]}, $sub->[0];\n        push @{$res[1]}, $sub->[1];\n    }\n    return @res;\n}",
    "    my @lst1;\n    my @lst2;\n    for my $i (@$lst) {\n        push @lst1, $i->[0];\n        push @lst2, $i->[1];\n    }\n    return [\\@lst1, \\@lst2];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @lst1;\n    my @lst2;\n    foreach my $sub (@$lst) {\n        push @lst1, $sub->[0];\n        push @lst2, $sub->[1];\n    }\n    return [\\@lst1, \\@lst2];\n}",
    "    my($first, $second) = ([], []);\n    for my $sub (@$lst) {\n        push @$first, $sub->[0];\n        push @$second, $sub->[1];\n    }\n    return [$first, $second];\n}",
    "    my @lst1 = ();\n    my @lst2 = ();\n    for my $i (@$lst) {\n        push @lst1, $i->[0];\n        push @lst2, $i->[1];\n    }\n    return [\\@lst1, \\@lst2];\n}",
    "    my @lst1 = map { $_->[0] } @$lst;\n    my @lst2 = map { $_->[1] } @$lst;\n    return (\\@lst1, \\@lst2);\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @first;\n    my @second;\n    for my $i (@$lst) {\n        push @first, $i->[0];\n        push @second, $i->[1];\n    }\n    return [\\@first, \\@second];\n}",
    "    my @lst1;\n    my @lst2;\n    for my $i (0 .. $#{$lst}) {\n        push @lst1, $lst->[$i]->[0];\n        push @lst2, $lst->[$i]->[1];\n    }\n    return [\\@lst1, \\@lst2];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [ \\@first, \\@second ];\n}",
    "    my @lst1 = ();\n    my @lst2 = ();\n    for my $i (@$lst) {\n        push @lst1, $i->[0];\n        push @lst2, $i->[1];\n    }\n    return [\\@lst1, \\@lst2];\n}",
    "    my $lst1 = [];\n    my $lst2 = [];\n    for my $pair (@$lst) {\n        push @$lst1, $pair->[0];\n        push @$lst2, $pair->[1];\n    }\n    return [$lst1, $lst2];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @a = ();\n    my @b = ();\n    for my $i (@$lst) {\n        push @a, $i->[0];\n        push @b, $i->[1];\n    }\n    return [\\@a, \\@b];\n}",
    "    my @lst1 = ();\n    my @lst2 = ();\n    foreach my $sublst (@$lst) {\n        push(@lst1, $sublst->[0]);\n        push(@lst2, $sublst->[1]);\n    }\n    return [\\@lst1, \\@lst2];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @lst1 = map { $_->[0] } @$lst;\n    my @lst2 = map { $_->[1] } @$lst;\n    return [\\@lst1, \\@lst2];\n}",
    "    my @lst1 = ();\n    my @lst2 = ();\n    for my $i (0..$#{$lst}) {\n        push @lst1, $lst->[$i][0];\n        push @lst2, $lst->[$i][1];\n    }\n    return [\\@lst1, \\@lst2];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @lst1;\n    my @lst2;\n    foreach my $i (@$lst) {\n        push @lst1, $i->[0];\n        push @lst2, $i->[1];\n    }\n    return [\\@lst1, \\@lst2];\n}",
    "    my @lst = @$lst;\n    my @a;\n    my @b;\n    for my $i (@lst) {\n        push @a, $i->[0];\n        push @b, $i->[1];\n    }\n    return [\\@a, \\@b];\n}",
    "    my $lst1 = [];\n    my $lst2 = [];\n    for my $sub (@$lst) {\n        push @$lst1, $sub->[0];\n        push @$lst2, $sub->[1];\n    }\n    return [$lst1, $lst2];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @lst1 = ();\n    my @lst2 = ();\n    for my $sublst (@$lst) {\n        push @lst1, $sublst->[0];\n        push @lst2, $sublst->[1];\n    }\n    return [\\@lst1, \\@lst2];\n}",
    "    my @lst1 = map { $_->[0] } @$lst;\n    my @lst2 = map { $_->[1] } @$lst;\n    return [\\@lst1, \\@lst2];\n}",
    "    my @lst1;\n    my @lst2;\n    for my $i (0..$#{$lst}) {\n        push @lst1, $lst->[$i][0];\n        push @lst2, $lst->[$i][1];\n    }\n    return [\\@lst1, \\@lst2];\n}",
    "    my @lst1 = ();\n    my @lst2 = ();\n    foreach my $i (@$lst) {\n        push @lst1, $i->[0];\n        push @lst2, $i->[1];\n    }\n    return [\\@lst1, \\@lst2];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @lst1;\n    my @lst2;\n    for my $i (0..$#{$lst}) {\n        push @lst1, $lst->[$i][0];\n        push @lst2, $lst->[$i][1];\n    }\n    return [\\@lst1, \\@lst2];\n}",
    "    my @a = ();\n    my @b = ();\n    foreach my $pair (@$lst) {\n        push @a, $pair->[0];\n        push @b, $pair->[1];\n    }\n    return [\\@a, \\@b];\n}",
    "    my @res = ([], []);\n    foreach my $pair (@$lst) {\n        push @{$res[0]}, $pair->[0];\n        push @{$res[1]}, $pair->[1];\n    }\n    return @res;\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @lst1 = ();\n    my @lst2 = ();\n    for my $pair (@$lst) {\n        push @lst1, $pair->[0];\n        push @lst2, $pair->[1];\n    }\n    return [\\@lst1, \\@lst2];\n}",
    "    my @lst1 = ();\n    my @lst2 = ();\n    foreach my $i (@$lst) {\n        push(@lst1, $i->[0]);\n        push(@lst2, $i->[1]);\n    }\n    return [\\@lst1, \\@lst2];\n}",
    "    my @res = ([],[]);\n    for my $i (@$lst) {\n        push @{$res[0]}, $i->[0];\n        push @{$res[1]}, $i->[1];\n    }\n    return @res;\n}",
    "    my @res = ([], []);\n    for my $sub (@$lst) {\n        push @{$res[0]}, $sub->[0];\n        push @{$res[1]}, $sub->[1];\n    }\n    return @res;\n}",
    "    my @lst1 = ();\n    my @lst2 = ();\n    foreach my $sublst (@$lst) {\n        push @lst1, $sublst->[0];\n        push @lst2, $sublst->[1];\n    }\n    return [\\@lst1, \\@lst2];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @lst1 = map { $_->[0] } @$lst;\n    my @lst2 = map { $_->[1] } @$lst;\n    return [\\@lst1, \\@lst2];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @lst1 = ();\n    my @lst2 = ();\n    for my $i (0 .. $#{$lst}) {\n        push @lst1, $lst->[$i][0];\n        push @lst2, $lst->[$i][1];\n    }\n    return [\\@lst1, \\@lst2];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @first = ();\n    my @second = ();\n    for my $sub (@$lst) {\n        push @first, $sub->[0];\n        push @second, $sub->[1];\n    }\n    return [\\@first, \\@second];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @res = ([], []);\n    for my $sub (@$lst) {\n        push @{$res[0]}, $sub->[0];\n        push @{$res[1]}, $sub->[1];\n    }\n    return @res;\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @lst1 = ();\n    my @lst2 = ();\n    for my $i (@$lst) {\n        push @lst1, $i->[0];\n        push @lst2, $i->[1];\n    }\n    return [\\@lst1, \\@lst2];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @a = map { $_->[0] } @$lst;\n    my @b = map { $_->[1] } @$lst;\n    return [\\@a, \\@b];\n}",
    "    my $res = [];\n    my $res1 = [];\n    my $res2 = [];\n    for my $sub (@$lst) {\n        push @$res1, $sub->[0];\n        push @$res2, $sub->[1];\n    }\n    push @$res, $res1;\n    push @$res, $res2;\n    return $res;\n}",
    "    my @first = ();\n    my @second = ();\n    for my $sub (@$lst) {\n        push @first, $sub->[0];\n        push @second, $sub->[1];\n    }\n    return [\\@first, \\@second];\n}",
    "    my($a, $b) = ([], []);\n    for my $i (@$lst) {\n        push @$a, $i->[0];\n        push @$b, $i->[1];\n    }\n    return [$a, $b];\n}",
    "    my @lst1 = ();\n    my @lst2 = ();\n    foreach my $l (@$lst) {\n        push(@lst1, $l->[0]);\n        push(@lst2, $l->[1]);\n    }\n    return [\\@lst1, \\@lst2];\n}",
    "    my @first = map {$_->[0]} @$lst;\n    my @second = map {$_->[1]} @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @a = ();\n    my @b = ();\n    for my $i (@$lst) {\n        push @a, $i->[0];\n        push @b, $i->[1];\n    }\n    return [\\@a, \\@b];\n}",
    "    my @lst1 = ();\n    my @lst2 = ();\n    for my $i (@$lst) {\n        push @lst1, $i->[0];\n        push @lst2, $i->[1];\n    }\n    return [\\@lst1, \\@lst2];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @lst1 = ();\n    my @lst2 = ();\n    foreach my $i (@$lst) {\n        push @lst1, $i->[0];\n        push @lst2, $i->[1];\n    }\n    return [\\@lst1, \\@lst2];\n}"
  ]
}