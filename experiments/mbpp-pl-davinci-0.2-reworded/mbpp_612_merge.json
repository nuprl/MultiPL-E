{
  "name": "mbpp_612_merge",
  "language": "pl",
  "prompt": "# Write a plthon function which takes an array of arrays, where each subarray has two elements, and returns an array of two arrays where the first array has the first element of each subarray and the second one has the second.\nsub merge {\n    my($lst) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_612_merge.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&merge;\n        if(eq_deeply($candidate->([[\"x\", \"y\"], [\"a\", \"b\"], [\"m\", \"n\"]]),[[\"x\", \"a\", \"m\"], [\"y\", \"b\", \"n\"]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 2], [3, 4], [5, 6], [7, 8]]),[[1, 3, 5, 7], [2, 4, 6, 8]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[\"x\", \"y\", \"z\"], [\"a\", \"b\", \"c\"], [\"m\", \"n\", \"o\"]]),[[\"x\", \"a\", \"m\"], [\"y\", \"b\", \"n\"], [\"z\", \"c\", \"o\"]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @first = ();\n    my @second = ();\n    for my $i (@{$lst}) {\n        push @first, $i->[0];\n        push @second, $i->[1];\n    }\n    return [\\@first, \\@second];\n}",
    "    my @lst1 = map { $_->[0] } @$lst;\n    my @lst2 = map { $_->[1] } @$lst;\n    return [\\@lst1, \\@lst2];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @lst1 = ();\n    my @lst2 = ();\n    foreach my $i (@$lst) {\n        push(@lst1, $i->[0]);\n        push(@lst2, $i->[1]);\n    }\n    return [\\@lst1, \\@lst2];\n}",
    "    my @lst1;\n    my @lst2;\n    foreach my $i (@$lst) {\n        push @lst1, $i->[0];\n        push @lst2, $i->[1];\n    }\n    return [\\@lst1, \\@lst2];\n}",
    "    my @lst1 = ();\n    my @lst2 = ();\n    foreach my $i (@{$lst}) {\n        push(@lst1, $i->[0]);\n        push(@lst2, $i->[1]);\n    }\n    return [\\@lst1, \\@lst2];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my($first, $second);\n    foreach my $sub (@$lst) {\n        push @$first, $sub->[0];\n        push @$second, $sub->[1];\n    }\n    return [$first, $second];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @lst1;\n    my @lst2;\n    for my $i (@$lst) {\n        push @lst1, @$i[0];\n        push @lst2, @$i[1];\n    }\n    return [\\@lst1, \\@lst2];\n}",
    "    my @first = map { $_->[0] } @$lst;\n    my @second = map { $_->[1] } @$lst;\n    return [\\@first, \\@second];\n}",
    "    my @lst1 = map { $_->[0] } @$lst;\n    my @lst2 = map { $_->[1] } @$lst;\n    return [\\@lst1, \\@lst2];\n}",
    "    my @first = ();\n    my @second = ();\n    for my $sub (@$lst) {\n        push @first, $sub->[0];\n        push @second, $sub->[1];\n    }\n    return [\\@first, \\@second];\n}",
    "    my($a, $b);\n    $a = [];\n    $b = [];\n    foreach my $i (@$lst) {\n        push(@$a, $i->[0]);\n        push(@$b, $i->[1]);\n    }\n    return [$a, $b];\n}",
    "    my @first = ();\n    my @second = ();\n    for my $sub (@$lst) {\n        push @first, $sub->[0];\n        push @second, $sub->[1];\n    }\n    return [\\@first, \\@second];\n}"
  ]
}