{
  "name": "mbpp_249_intersection_array",
  "language": "pl",
  "prompt": "# Write a function to find the intersection of two arrays.\nsub intersection_array {\n    my($array_nums1, $array_nums2) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_249_intersection_array.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&intersection_array;\n        if(eq_deeply($candidate->([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]),[1, 2, 8, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]),[3, 5, 7, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]),[10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my %hash_nums1 = map { $_ => 1 } @$array_nums1;\n    my %hash_nums2 = map { $_ => 1 } @$array_nums2;\n    my @intersection = grep { $hash_nums1{$_} && $hash_nums2{$_} } keys %hash_nums1;\n    return @intersection;\n}",
    "    my %hash_nums1 = map { $_ => 1 } @$array_nums1;\n    my @intersection = grep { $hash_nums1{$_} } @$array_nums2;\n    return @intersection;\n}",
    "    my %hash_nums1 = map { $_ => 1 } @$array_nums1;\n    my @intersection = grep { $hash_nums1{$_} } @$array_nums2;\n    return @intersection;\n}",
    "    my %hash = ();\n    my @intersection = ();\n    foreach my $num (@$array_nums1) {\n        $hash{$num} = 1;\n    }\n    foreach my $num (@$array_nums2) {\n        if(exists $hash{$num}) {\n            push @intersection, $num;\n        }\n    }\n    return \\@intersection;\n}",
    "    my %hash_nums1 = map { $_ => 1 } @$array_nums1;\n    my %hash_nums2 = map { $_ => 1 } @$array_nums2;\n    my @intersection;\n    foreach my $num (keys %hash_nums1) {\n        push @intersection, $num if exists $hash_nums2{$num};\n    }\n    return @intersection;\n}",
    "    my %hash = ();\n    my @intersection = ();\n    foreach my $num (@$array_nums1) {\n        $hash{$num} = 1;\n    }\n    foreach my $num (@$array_nums2) {\n        if (exists $hash{$num}) {\n            push @intersection, $num;\n        }\n    }\n    return \\@intersection;\n}",
    "    my %hash_nums1 = map { $_ => 1 } @$array_nums1;\n    my %hash_nums2 = map { $_ => 1 } @$array_nums2;\n    my @intersection_nums;\n    foreach my $num (keys %hash_nums1) {\n        push @intersection_nums, $num if exists $hash_nums2{$num};\n    }\n    return \\@intersection_nums;\n}",
    "    my %hash_nums1 = map { $_ => 1 } @$array_nums1;\n    my %hash_nums2 = map { $_ => 1 } @$array_nums2;\n    my @intersection = grep { $hash_nums1{$_} } @$array_nums2;\n    return @intersection;\n}",
    "    my %hash = ();\n    my @intersection = ();\n    foreach my $num (@$array_nums1) {\n        $hash{$num} = 1;\n    }\n    foreach my $num (@$array_nums2) {\n        if (exists $hash{$num}) {\n            push @intersection, $num;\n        }\n    }\n    return \\@intersection;\n}",
    "    my %hash_nums1 = map {$_ => 1} @$array_nums1;\n    my %hash_nums2 = map {$_ => 1} @$array_nums2;\n    my @intersection_array = ();\n    foreach my $num (keys %hash_nums1) {\n        if (exists $hash_nums2{$num}) {\n            push @intersection_array, $num;\n        }\n    }\n    return @intersection_array;\n}",
    "    my %hash_nums1 = map { $_ => 1 } @$array_nums1;\n    my %hash_nums2 = map { $_ => 1 } @$array_nums2;\n    my @intersection = grep { $hash_nums1{$_} == 1 && $hash_nums2{$_} == 1 } keys %hash_nums1;\n    return @intersection;\n}",
    "    my %hash_nums1 = map { $_ => 1 } @$array_nums1;\n    my @intersection;\n    for my $num (@$array_nums2) {\n        if (exists $hash_nums1{$num}) {\n            push @intersection, $num;\n        }\n    }\n    return @intersection;\n}",
    "    my %hash_nums1 = map { $_ => 1 } @$array_nums1;\n    my %hash_nums2 = map { $_ => 1 } @$array_nums2;\n    my @intersection = grep { $hash_nums1{$_} && $hash_nums2{$_} } keys %hash_nums1;\n    return @intersection;\n}",
    "    my %hash_nums1 = map {$_ => 1} @$array_nums1;\n    my @intersection_array;\n    for my $num (@$array_nums2) {\n        if (exists $hash_nums1{$num}) {\n            push @intersection_array, $num;\n        }\n    }\n    return \\@intersection_array;\n}",
    "    my %hash_nums1 = map { $_ => 1 } @$array_nums1;\n    my @intersection_array = grep { $hash_nums1{$_} } @$array_nums2;\n    return @intersection_array;\n}",
    "    my %hash_nums1 = map { $_ => 1 } @$array_nums1;\n    my %hash_nums2 = map { $_ => 1 } @$array_nums2;\n    my @intersection = grep { $hash_nums1{$_} && $hash_nums2{$_} } keys %hash_nums1;\n    return @intersection;\n}",
    "    my %hash_nums1 = map { $_ => 1 } @$array_nums1;\n    my %hash_nums2 = map { $_ => 1 } @$array_nums2;\n    my @intersection = grep { $hash_nums1{$_} && $hash_nums2{$_} } keys %hash_nums1;\n    return @intersection;\n}",
    "    my %hash_nums1 = map { $_ => 1 } @$array_nums1;\n    my %hash_nums2 = map { $_ => 1 } @$array_nums2;\n    my @intersection_array;\n    foreach my $num (keys %hash_nums1) {\n        if (exists $hash_nums2{$num}) {\n            push @intersection_array, $num;\n        }\n    }\n    return @intersection_array;\n}",
    "    my %hash_nums1 = map { $_ => 1 } @$array_nums1;\n    my @intersection_array = grep { $hash_nums1{$_} } @$array_nums2;\n    return @intersection_array;\n}",
    "    my %hash_nums1 = map { $_ => 1 } @$array_nums1;\n    my @intersection = grep { $hash_nums1{$_} } @$array_nums2;\n    return @intersection;\n}"
  ]
}