{
  "name": "mbpp_785_tuple_str_int",
  "language": "pl",
  "prompt": "# Write a function to convert array string to integer array.\nsub tuple_str_int {\n    my($test_str) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_785_tuple_str_int.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&tuple_str_int;\n        if(eq_deeply($candidate->(\"(7, 8, 9)\"),[7, 8, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"(1, 2, 3)\"),[1, 2, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"(4, 5, 6)\"),[4, 5, 6])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"(7, 81, 19)\"),[7, 81, 19])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @test_int;\n    my @test_str = split(/\\s+/, $test_str);\n    foreach my $test_str (@test_str) {\n        push(@test_int, int($test_str));\n    }\n    return @test_int;\n}",
    "    my @tuple = ();\n    my @str_arr = split(/,/, $test_str);\n    foreach my $str (@str_arr) {\n        push @tuple, int($str);\n    }\n    return @tuple;\n}",
    "    my @int_array;\n    my @str_array = split(/,/, $test_str);\n    foreach my $str (@str_array) {\n        push @int_array, int($str);\n    }\n    return @int_array;\n}",
    "    my @test_int;\n    foreach my $i (split(/\\s+/, $test_str)) {\n        push @test_int, int($i);\n    }\n    return @test_int;\n}",
    "    my @test_int;\n    my @test_str = split(/\\s+/, $test_str);\n    foreach my $str (@test_str) {\n        push(@test_int, int($str));\n    }\n    return @test_int;\n}",
    "    my @test_int;\n    for my $i (0 .. $#{$test_str}) {\n        push @test_int, $test_str->[$i] + 0;\n    }\n    return \\@test_int;\n}",
    "    my @test_int;\n    foreach my $test_str_elem (@$test_str) {\n        push @test_int, int($test_str_elem);\n    }\n    return @test_int;\n}",
    "    my @test_arr = split(/\\s+/, $test_str);\n    my @test_arr_int = map { int($_) } @test_arr;\n    return @test_arr_int;\n}",
    "    my @test_arr = split(/\\s+/, $test_str);\n    my @int_arr = ();\n    foreach my $str (@test_arr) {\n        push(@int_arr, int($str));\n    }\n    return @int_arr;\n}",
    "    my @test_arr = split(/\\s+/, $test_str);\n    my @test_int = ();\n    foreach my $i (@test_arr) {\n        push(@test_int, int($i));\n    }\n    return @test_int;\n}",
    "    my @test_int;\n    my @test_str = split(/\\s+/, $test_str);\n    foreach my $i (@test_str) {\n        push(@test_int, int($i));\n    }\n    return @test_int;\n}",
    "    my @test_int;\n    my @test_str = split(/\\s+/, $test_str);\n    foreach my $str (@test_str) {\n        push(@test_int, int($str));\n    }\n    return @test_int;\n}",
    "    my @test_int;\n    my @test_str = split(/\\s+/, $test_str);\n    foreach my $t (@test_str) {\n        push(@test_int, int($t));\n    }\n    return @test_int;\n}",
    "    my @test_int;\n    my $i = 0;\n    my $len = length($test_str);\n    while ($i < $len) {\n        my $j = index($test_str, ',', $i);\n        if ($j == -1) {\n            $j = $len;\n        }\n        my $sub_str = substr($test_str, $i, $j - $i);\n        push @test_int, int($sub_str);\n        $i = $j + 1;\n    }\n    return @test_int;\n}",
    "    my @test_int = ();\n    foreach my $test_num (split(/\\s+/, $test_str)) {\n        push @test_int, $test_num;\n    }\n    return @test_int;\n}",
    "    my @test_int;\n    my @test_str = split(/\\s+/, $test_str);\n    foreach my $test_str (@test_str) {\n        push @test_int, int($test_str);\n    }\n    return @test_int;\n}",
    "    my @test_int;\n    my @test_str = split(/\\s+/, $test_str);\n    foreach my $i (@test_str) {\n        push(@test_int, int($i));\n    }\n    return @test_int;\n}",
    "    my @test_arr = split(/\\s+/, $test_str);\n    my @test_int = map {int($_)} @test_arr;\n    return @test_int;\n}",
    "    my @test_arr = split(/\\s+/, $test_str);\n    my @test_int = ();\n    foreach my $i (@test_arr) {\n        push(@test_int, int($i));\n    }\n    return @test_int;\n}",
    "    my @tuple_str = split(/\\s+/, $test_str);\n    my @tuple_int;\n    foreach my $i (@tuple_str) {\n        push @tuple_int, int($i);\n    }\n    return @tuple_int;\n}"
  ]
}