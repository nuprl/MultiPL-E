{
  "name": "mbpp_785_tuple_str_int",
  "language": "pl",
  "prompt": "# Write a function to convert array string to integer array.\nsub tuple_str_int {\n    my($test_str) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_785_tuple_str_int.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&tuple_str_int;\n        if(eq_deeply($candidate->(\"(7, 8, 9)\"),[7, 8, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"(1, 2, 3)\"),[1, 2, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"(4, 5, 6)\"),[4, 5, 6])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"(7, 81, 19)\"),[7, 81, 19])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @test_int;\n    my @test_str = split(/\\s+/, $test_str);\n    foreach my $test_str (@test_str) {\n        push(@test_int, int($test_str));\n    }\n    return @test_int;\n}",
    "    my @tuple = ();\n    my @str_arr = split(/,/, $test_str);\n    foreach my $str (@str_arr) {\n        push @tuple, int($str);\n    }\n    return @tuple;\n}",
    "    my @int_array;\n    my @str_array = split(/,/, $test_str);\n    foreach my $str (@str_array) {\n        push @int_array, int($str);\n    }\n    return @int_array;\n}",
    "    my @test_int;\n    foreach my $i (split(/\\s+/, $test_str)) {\n        push @test_int, int($i);\n    }\n    return @test_int;\n}",
    "    my @test_int;\n    my @test_str = split(/\\s+/, $test_str);\n    foreach my $str (@test_str) {\n        push(@test_int, int($str));\n    }\n    return @test_int;\n}",
    "    my @test_int;\n    for my $i (0 .. $#{$test_str}) {\n        push @test_int, $test_str->[$i] + 0;\n    }\n    return \\@test_int;\n}",
    "    my @test_int;\n    foreach my $test_str_elem (@$test_str) {\n        push @test_int, int($test_str_elem);\n    }\n    return @test_int;\n}",
    "    my @test_arr = split(/\\s+/, $test_str);\n    my @test_arr_int = map { int($_) } @test_arr;\n    return @test_arr_int;\n}",
    "    my @test_arr = split(/\\s+/, $test_str);\n    my @int_arr = ();\n    foreach my $str (@test_arr) {\n        push(@int_arr, int($str));\n    }\n    return @int_arr;\n}",
    "    my @test_arr = split(/\\s+/, $test_str);\n    my @test_int = ();\n    foreach my $i (@test_arr) {\n        push(@test_int, int($i));\n    }\n    return @test_int;\n}",
    "    my @test_int;\n    my @test_str = split(/\\s+/, $test_str);\n    foreach my $i (@test_str) {\n        push(@test_int, int($i));\n    }\n    return @test_int;\n}",
    "    my @test_int;\n    my @test_str = split(/\\s+/, $test_str);\n    foreach my $str (@test_str) {\n        push(@test_int, int($str));\n    }\n    return @test_int;\n}",
    "    my @test_int;\n    my @test_str = split(/\\s+/, $test_str);\n    foreach my $t (@test_str) {\n        push(@test_int, int($t));\n    }\n    return @test_int;\n}",
    "    my @test_int;\n    my $i = 0;\n    my $len = length($test_str);\n    while ($i < $len) {\n        my $j = index($test_str, ',', $i);\n        if ($j == -1) {\n            $j = $len;\n        }\n        my $sub_str = substr($test_str, $i, $j - $i);\n        push @test_int, int($sub_str);\n        $i = $j + 1;\n    }\n    return @test_int;\n}",
    "    my @test_int = ();\n    foreach my $test_num (split(/\\s+/, $test_str)) {\n        push @test_int, $test_num;\n    }\n    return @test_int;\n}",
    "    my @test_int;\n    my @test_str = split(/\\s+/, $test_str);\n    foreach my $test_str (@test_str) {\n        push @test_int, int($test_str);\n    }\n    return @test_int;\n}",
    "    my @test_int;\n    my @test_str = split(/\\s+/, $test_str);\n    foreach my $i (@test_str) {\n        push(@test_int, int($i));\n    }\n    return @test_int;\n}",
    "    my @test_arr = split(/\\s+/, $test_str);\n    my @test_int = map {int($_)} @test_arr;\n    return @test_int;\n}",
    "    my @test_arr = split(/\\s+/, $test_str);\n    my @test_int = ();\n    foreach my $i (@test_arr) {\n        push(@test_int, int($i));\n    }\n    return @test_int;\n}",
    "    my @tuple_str = split(/\\s+/, $test_str);\n    my @tuple_int;\n    foreach my $i (@tuple_str) {\n        push @tuple_int, int($i);\n    }\n    return @tuple_int;\n}",
    "    my @test_int;\n    my @test_str = split(/\\s+/, $test_str);\n    foreach my $str (@test_str) {\n        push @test_int, int($str);\n    }\n    return @test_int;\n}",
    "    my @test_int;\n    my @test_str = split(/\\s+/, $test_str);\n    foreach my $i (@test_str) {\n        push(@test_int, int($i));\n    }\n    return @test_int;\n}",
    "    my @test_int = ();\n    foreach my $str (@{$test_str}) {\n        push @test_int, int($str);\n    }\n    return @test_int;\n}",
    "    my @test_int = ();\n    foreach my $test_str_elem (@$test_str) {\n        push @test_int, int($test_str_elem);\n    }\n    return @test_int;\n}",
    "    my @test_int = ();\n    foreach my $test_str_item (@{$test_str}) {\n        push @test_int, int($test_str_item);\n    }\n    return @test_int;\n}",
    "    my @test_arr = split(/,/, $test_str);\n    my @int_arr;\n    foreach my $i (@test_arr) {\n        push(@int_arr, int($i));\n    }\n    return @int_arr;\n}",
    "    my @test_int;\n    my $i = 0;\n    foreach my $str (@$test_str) {\n        $test_int[$i] = int($str);\n        $i++;\n    }\n    return @test_int;\n}",
    "    my @test_arr = split(/,/, $test_str);\n    my @test_int = map { int($_) } @test_arr;\n    return @test_int;\n}",
    "    my @test_arr = split(/\\s+/, $test_str);\n    my @test_int = map {int($_)} @test_arr;\n    return @test_int;\n}",
    "    my @test_arr = split(/\\s+/, $test_str);\n    return map { int($_) } @test_arr;\n}",
    "    my @tuple = split(/\\s+/, $test_str);\n    my @int_tuple = ();\n    foreach my $i (@tuple) {\n        push @int_tuple, int($i);\n    }\n    return @int_tuple;\n}",
    "    my @test_array = split(/\\s+/, $test_str);\n    my @int_array = ();\n    foreach my $i (@test_array) {\n        push(@int_array, int($i));\n    }\n    return @int_array;\n}",
    "    my @test_int = map { int($_) } split(/\\s+/, $test_str);\n    return @test_int;\n}",
    "    my @test_int;\n    my @test_str = split(/\\s+/, $test_str);\n    foreach my $i (@test_str) {\n        push(@test_int, int($i));\n    }\n    return @test_int;\n}",
    "    my @array = split(/,/, $test_str);\n    my @int_array = ();\n    foreach my $str (@array) {\n        push @int_array, int($str);\n    }\n    return @int_array;\n}",
    "    my @test_int;\n    my @test_str = split(/\\s+/, $test_str);\n    foreach my $test_str (@test_str) {\n        push @test_int, int($test_str);\n    }\n    return @test_int;\n}",
    "    my @arr = split(/\\s+/, $test_str);\n    my @ret;\n    for my $i (@arr) {\n        push @ret, int($i);\n    }\n    return @ret;\n}",
    "    my @test_int;\n    for (my $i = 0; $i < length($test_str); $i++) {\n        $test_int[$i] = ord(substr($test_str, $i, 1));\n    }\n    return @test_int;\n}",
    "    my @test_arr = split(/\\s+/, $test_str);\n    my @test_int = map { int($_) } @test_arr;\n    return @test_int;\n}",
    "    my @test_int = ();\n    my @test_str = split(/\\s+/, $test_str);\n    foreach my $str (@test_str) {\n        push(@test_int, int($str));\n    }\n    return @test_int;\n}",
    "    my @tuple = split(/,/, $test_str);\n    my @int_tuple = ();\n    foreach my $i (@tuple) {\n        push @int_tuple, int($i);\n    }\n    return @int_tuple;\n}",
    "    my @test_int;\n    my $i = 0;\n    my $j = 0;\n    my $len = length($test_str);\n    while ($i < $len) {\n        if (substr($test_str, $i, 1) eq '(') {\n            $i++;\n            $test_int[$j] = 0;\n            while (substr($test_str, $i, 1) ne ')') {\n                $test_int[$j] = $test_int[$j] * 10 + substr($test_str, $i, 1);\n                $i++;\n            }\n            $j++;\n        }\n        $i++;\n    }\n    return @test_int;\n}",
    "    my @test_int;\n    my $i = 0;\n    foreach my $str (@$test_str) {\n        $test_int[$i] = int($str);\n        $i++;\n    }\n    return @test_int;\n}",
    "    my @test_arr = split(/\\s+/, $test_str);\n    my @test_int_arr = map { int($_) } @test_arr;\n    return @test_int_arr;\n}",
    "    my @test_array = split(/\\s+/, $test_str);\n    my @int_array = map { int($_) } @test_array;\n    return @int_array;\n}",
    "    my @test_int = ();\n    my @test_str = split(/,/, $test_str);\n    foreach my $str (@test_str) {\n        push(@test_int, int($str));\n    }\n    return @test_int;\n}",
    "    my @test_int = ();\n    foreach my $str_num (split(',', $test_str)) {\n        push @test_int, int($str_num);\n    }\n    return @test_int;\n}",
    "    my @test_int = ();\n    my @test_str = split(/,/, $test_str);\n    foreach my $str (@test_str) {\n        push @test_int, int($str);\n    }\n    return @test_int;\n}",
    "    my @tuple = split(/\\s+/, $test_str);\n    my @int_tuple = ();\n    foreach my $i (@tuple) {\n        push @int_tuple, int($i);\n    }\n    return @int_tuple;\n}",
    "    my @tuple = split(/\\s+/, $test_str);\n    my @int_tuple = ();\n    foreach my $str (@tuple) {\n        push @int_tuple, int($str);\n    }\n    return @int_tuple;\n}",
    "    my @test_int;\n    my @test_str = split(/,/, $test_str);\n    foreach my $str (@test_str) {\n        push @test_int, int($str);\n    }\n    return @test_int;\n}",
    "    my @test_int = ();\n    foreach my $str (@$test_str) {\n        push @test_int, int($str);\n    }\n    return @test_int;\n}",
    "    my @test_int;\n    foreach my $str (@$test_str) {\n        push @test_int, int($str);\n    }\n    return @test_int;\n}",
    "    my @tuple_str = split(/\\s+/, $test_str);\n    my @tuple_int = ();\n    foreach my $str (@tuple_str) {\n        push @tuple_int, int($str);\n    }\n    return @tuple_int;\n}",
    "    my @test_int;\n    my @test_str = split(/\\s+/, $test_str);\n    foreach my $str (@test_str) {\n        push(@test_int, int($str));\n    }\n    return @test_int;\n}",
    "    my @tuple = split(/\\s+/, $test_str);\n    foreach my $i (@tuple) {\n        $i = int($i);\n    }\n    return @tuple;\n}",
    "    my @test_int = ();\n    my $i = 0;\n    foreach my $str (@$test_str) {\n        $test_int[$i] = int($str);\n        $i++;\n    }\n    return @test_int;\n}",
    "    my @test_int;\n    my @test_str = split(/\\s+/, $test_str);\n    foreach my $i (@test_str) {\n        push(@test_int, int($i));\n    }\n    return @test_int;\n}",
    "    my @test_int;\n    for my $i (split /\\s+/, $test_str) {\n        push @test_int, int($i);\n    }\n    return @test_int;\n}",
    "    my @test_int;\n    my @test_str = split(/\\s+/, $test_str);\n    foreach my $test_str (@test_str) {\n        push(@test_int, int($test_str));\n    }\n    return @test_int;\n}",
    "    my @test_int = ();\n    my $i = 0;\n    my $j = 0;\n    my $len = length($test_str);\n    for($i=0; $i<$len; $i++) {\n        if(substr($test_str, $i, 1) eq ',') {\n            $j++;\n        }\n        else {\n            $test_int[$j] = $test_int[$j]*10 + substr($test_str, $i, 1);\n        }\n    }\n    return @test_int;\n}",
    "    my @test_int;\n    my @test_str = split(/\\s+/, $test_str);\n    foreach my $i (@test_str) {\n        push(@test_int, int($i));\n    }\n    return @test_int;\n}",
    "    my @test_int;\n    for my $i (0 .. $#{$test_str}) {\n        $test_int[$i] = int($test_str->[$i]);\n    }\n    return @test_int;\n}",
    "    my @test_arr = split(/\\s+/, $test_str);\n    my @test_int_arr = map { int($_) } @test_arr;\n    return @test_int_arr;\n}",
    "    my @test_int = ();\n    for my $i (split(/\\s+/, $test_str)) {\n        push @test_int, int($i);\n    }\n    return @test_int;\n}",
    "    my @tuple = split(/,/, $test_str);\n    my @int_tuple = ();\n    foreach my $i (@tuple) {\n        push @int_tuple, int($i);\n    }\n    return @int_tuple;\n}",
    "    my @tuple = split(/,/, $test_str);\n    my @int_tuple = ();\n    foreach my $str (@tuple) {\n        push @int_tuple, int($str);\n    }\n    return @int_tuple;\n}",
    "    my @test_arr = split(/,/, $test_str);\n    my @int_arr = ();\n    foreach my $str (@test_arr) {\n        push(@int_arr, int($str));\n    }\n    return @int_arr;\n}",
    "    my @test_arr = split(/\\s+/, $test_str);\n    my @test_int = map { int($_) } @test_arr;\n    return @test_int;\n}",
    "    my @arr = split(/\\s+/, $test_str);\n    my @ret = ();\n    foreach my $i (@arr) {\n        push @ret, int($i);\n    }\n    return @ret;\n}",
    "    my @test_int;\n    foreach my $test_val (@{$test_str}) {\n        push @test_int, int($test_val);\n    }\n    return @test_int;\n}",
    "    my @tuple = split(/\\s+/, $test_str);\n    my @int_tuple = ();\n    foreach my $i (@tuple) {\n        push @int_tuple, int($i);\n    }\n    return @int_tuple;\n}",
    "    my @test_int;\n    for my $i (0 .. $#{$test_str}) {\n        $test_int[$i] = int($test_str->[$i]);\n    }\n    return @test_int;\n}",
    "    my @tuple = split(/,/, $test_str);\n    my @tuple_int = ();\n    foreach my $tuple_str (@tuple) {\n        push(@tuple_int, int($tuple_str));\n    }\n    return @tuple_int;\n}",
    "    my @test_int = map { int($_) } split(/\\s+/, $test_str);\n    return @test_int;\n}",
    "    my @test_arr = split(/\\s+/, $test_str);\n    my @int_arr;\n    foreach my $i (@test_arr) {\n        push @int_arr, int($i);\n    }\n    return @int_arr;\n}",
    "    my @str_arr = split(/,/, $test_str);\n    my @int_arr = ();\n    foreach my $str (@str_arr) {\n        push(@int_arr, int($str));\n    }\n    return @int_arr;\n}",
    "    my @test_int;\n    my @test_str = split(/,/, $test_str);\n    foreach my $i (@test_str) {\n        push @test_int, int($i);\n    }\n    return @test_int;\n}",
    "    my @tuple = split(/,/, $test_str);\n    my @tuple_int = ();\n    foreach my $i (@tuple) {\n        push(@tuple_int, int($i));\n    }\n    return @tuple_int;\n}",
    "    my @test_int;\n    my @test_str = split(/\\s+/, $test_str);\n    foreach my $str (@test_str) {\n        push(@test_int, int($str));\n    }\n    return @test_int;\n}",
    "    my @test_arr = split(/\\s+/, $test_str);\n    my @test_int_arr = ();\n    foreach my $test_arr_elem (@test_arr) {\n        push(@test_int_arr, int($test_arr_elem));\n    }\n    return @test_int_arr;\n}",
    "    my @test_int = ();\n    my $test_int;\n    my @test_str = split(/,/, $test_str);\n    foreach $test_int (@test_str) {\n        push(@test_int, int($test_int));\n    }\n    return @test_int;\n}",
    "    my @test_arr = split(/\\s+/, $test_str);\n    my @test_int = map { int($_) } @test_arr;\n    return @test_int;\n}",
    "    my @test_int;\n    foreach my $i (split(/\\s+/, $test_str)) {\n        push(@test_int, int($i));\n    }\n    return @test_int;\n}",
    "    my @tuple_str_int = ();\n    foreach my $str(split(/\\s+/, $test_str)) {\n        push @tuple_str_int, int($str);\n    }\n    return @tuple_str_int;\n}",
    "    my @test_int;\n    my @test_str = split(/\\s+/, $test_str);\n    foreach my $test_str (@test_str) {\n        push @test_int, int($test_str);\n    }\n    return @test_int;\n}",
    "    my @test_int = ();\n    my @test_str = split(/,/, $test_str);\n    foreach my $test_str (@test_str) {\n        push(@test_int, int($test_str));\n    }\n    return @test_int;\n}",
    "    my @tuple = split(/\\s+/, $test_str);\n    my @int_tuple = ();\n    foreach my $str (@tuple) {\n        push(@int_tuple, int($str));\n    }\n    return @int_tuple;\n}",
    "    my @int_array;\n    my @str_array = split(/,/, $test_str);\n    foreach my $str (@str_array) {\n        push(@int_array, int($str));\n    }\n    return @int_array;\n}",
    "    my @tuple_str_int = ();\n    my @tuple_str = split(/,/, $test_str);\n    foreach my $tuple_str (@tuple_str) {\n        push(@tuple_str_int, int($tuple_str));\n    }\n    return @tuple_str_int;\n}",
    "    my @test_int;\n    my @test_str = split(/,/, $test_str);\n    foreach my $str (@test_str) {\n        push @test_int, int($str);\n    }\n    return @test_int;\n}",
    "    my @tuple = split(/,/, $test_str);\n    my @int_tuple = ();\n    foreach my $str (@tuple) {\n        push @int_tuple, int($str);\n    }\n    return @int_tuple;\n}",
    "    my @test_array = split(/,/, $test_str);\n    my @int_array;\n    foreach my $str (@test_array) {\n        push(@int_array, int($str));\n    }\n    return @int_array;\n}",
    "    my @test_int;\n    for my $i (0 .. $#{$test_str}) {\n        $test_int[$i] = int($test_str->[$i]);\n    }\n    return @test_int;\n}",
    "    my @test_int;\n    my @test_str = split(/\\s+/, $test_str);\n    foreach my $test_str (@test_str) {\n        push(@test_int, int($test_str));\n    }\n    return @test_int;\n}",
    "    my @test_arr = split(/\\s+/, $test_str);\n    my @test_int = map { int($_) } @test_arr;\n    return \\@test_int;\n}",
    "    my @int_array;\n    my @str_array = split(/,/, $test_str);\n    foreach my $str (@str_array) {\n        push @int_array, int($str);\n    }\n    return @int_array;\n}",
    "    my @test_int;\n    my $i = 0;\n    my $j = 0;\n    my $len = length($test_str);\n    my $str = substr($test_str, 1, $len-2);\n    my @str_arr = split(/,/, $str);\n    foreach my $str_arr (@str_arr) {\n        $test_int[$i++] = int($str_arr);\n    }\n    return @test_int;\n}",
    "    my @test_int;\n    for my $i (0 .. $#{$test_str}) {\n        $test_int[$i] = $test_str->[$i] + 0;\n    }\n    return \\@test_int;\n}",
    "    my @tuple = ();\n    my $tuple_str = substr($test_str, 1, -1);\n    my @tuple_str = split(/,/, $tuple_str);\n    foreach my $tuple_str (@tuple_str) {\n        push @tuple, int($tuple_str);\n    }\n    return \\@tuple;\n}",
    "    my @arr = split(/\\s+/, $test_str);\n    my @ret;\n    foreach my $str (@arr) {\n        push @ret, int($str);\n    }\n    return @ret;\n}",
    "    my @test_int;\n    my @test_str = split(/\\s+/, $test_str);\n    foreach my $str (@test_str) {\n        push(@test_int, int($str));\n    }\n    return @test_int;\n}",
    "    my @test_int = ();\n    foreach my $str (@{$test_str}) {\n        push @test_int, int($str);\n    }\n    return @test_int;\n}",
    "    my @test_arr = split(/\\s+/, $test_str);\n    my @int_arr = ();\n    foreach my $str (@test_arr) {\n        push(@int_arr, int($str));\n    }\n    return @int_arr;\n}",
    "    my @test_int = ();\n    foreach my $test_val (@{$test_str}) {\n        push @test_int, int($test_val);\n    }\n    return @test_int;\n}",
    "    my @test_int;\n    foreach my $test_str_elem (@{$test_str}) {\n        push @test_int, int($test_str_elem);\n    }\n    return @test_int;\n}",
    "    my @test_int;\n    my @test_str = split(/\\s+/, $test_str);\n    for my $i (0 .. $#test_str) {\n        $test_int[$i] = int($test_str[$i]);\n    }\n    return @test_int;\n}",
    "    my @test_int;\n    my @test_str = split(/\\s+/, $test_str);\n    foreach my $i (@test_str) {\n        push(@test_int, int($i));\n    }\n    return @test_int;\n}",
    "    my $test_int = [];\n    foreach my $i (split(/,/, $test_str)) {\n        push @$test_int, int($i);\n    }\n    return $test_int;\n}",
    "    my @test_int;\n    foreach my $str (@$test_str) {\n        push @test_int, int($str);\n    }\n    return @test_int;\n}",
    "    my @test_int;\n    foreach my $i (split(/,/, $test_str)) {\n        push @test_int, int($i);\n    }\n    return @test_int;\n}",
    "    my @test_arr = split(/\\s+/, $test_str);\n    my @int_arr = ();\n    foreach my $elem (@test_arr) {\n        push(@int_arr, int($elem));\n    }\n    return @int_arr;\n}",
    "    my @test_int;\n    for (my $i = 0; $i < length($test_str); $i++) {\n        $test_int[$i] = ord(substr($test_str, $i, 1));\n    }\n    return @test_int;\n}",
    "    my @test_int;\n    my @test_str = split(/,/, $test_str);\n    foreach my $str (@test_str) {\n        push @test_int, int($str);\n    }\n    return @test_int;\n}",
    "    my @test_array = split(/,/, $test_str);\n    my @int_array;\n    foreach my $str (@test_array) {\n        push @int_array, int($str);\n    }\n    return @int_array;\n}",
    "    my @tuple = split(/\\s+/, $test_str);\n    my @int_tuple = map { int($_) } @tuple;\n    return @int_tuple;\n}",
    "    my @test_int = ();\n    foreach my $str (@$test_str) {\n        push @test_int, int($str);\n    }\n    return @test_int;\n}",
    "    my @result = ();\n    foreach my $str (@$test_str) {\n        push @result, int($str);\n    }\n    return @result;\n}",
    "    my @test_int;\n    my @test_str = split(/\\s+/, $test_str);\n    foreach my $str (@test_str) {\n        push @test_int, int($str);\n    }\n    return @test_int;\n}",
    "    my @test_int;\n    my @test_str = split(/\\s+/, $test_str);\n    foreach my $str (@test_str) {\n        push @test_int, int($str);\n    }\n    return @test_int;\n}",
    "    my @test_arr = split(/\\s+/, $test_str);\n    my @test_int = map { int($_) } @test_arr;\n    return @test_int;\n}",
    "    my @test_int = ();\n    foreach my $str (@{$test_str}) {\n        push @test_int, int($str);\n    }\n    return @test_int;\n}",
    "    my @test_arr = split(/\\s+/, $test_str);\n    my @int_arr = ();\n    foreach my $item (@test_arr) {\n        push @int_arr, int($item);\n    }\n    return @int_arr;\n}",
    "    my @test_int;\n    for my $i (split(/\\s+/, $test_str)) {\n        push @test_int, int($i);\n    }\n    return @test_int;\n}",
    "    my @test_arr = split(/\\s+/, $test_str);\n    my @test_int;\n    foreach my $i (@test_arr) {\n        push @test_int, int($i);\n    }\n    return @test_int;\n}",
    "    my @test_int;\n    my @test_str = split(/\\s+/, $test_str);\n    foreach my $test_str (@test_str) {\n        push(@test_int, int($test_str));\n    }\n    return @test_int;\n}",
    "    my @test_int;\n    my @test_str = split(/\\s+/, $test_str);\n    foreach my $item (@test_str) {\n        push(@test_int, int($item));\n    }\n    return @test_int;\n}",
    "    my @int_array;\n    my @str_array = split(/,/, $test_str);\n    foreach my $str (@str_array) {\n        push @int_array, int($str);\n    }\n    return @int_array;\n}",
    "    my @test_int = ();\n    my @test_str = split(/\\s+/, $test_str);\n    foreach my $test_str (@test_str) {\n        push(@test_int, int($test_str));\n    }\n    return @test_int;\n}",
    "    my @test_int;\n    my @test_str = split(/\\s+/, $test_str);\n    foreach my $test_str_i (@test_str) {\n        push(@test_int, int($test_str_i));\n    }\n    return @test_int;\n}",
    "    my @test_int = ();\n    my @test_str = split(/,/, $test_str);\n    foreach my $test_str (@test_str) {\n        push(@test_int, int($test_str));\n    }\n    return @test_int;\n}",
    "    my @tuple = split(/\\s+/, $test_str);\n    my @int_tuple = ();\n    foreach my $i (@tuple) {\n        push @int_tuple, int($i);\n    }\n    return @int_tuple;\n}",
    "    my @tuple_str = split(/,/, $test_str);\n    my @tuple_int;\n    foreach my $str (@tuple_str) {\n        push @tuple_int, int($str);\n    }\n    return @tuple_int;\n}",
    "    my @test_int;\n    my @test_str = split(/,/, $test_str);\n    foreach my $str (@test_str) {\n        push(@test_int, int($str));\n    }\n    return @test_int;\n}",
    "    my @tuple_str_int;\n    my @tuple_str = split(/\\s+/, $test_str);\n    foreach my $str (@tuple_str) {\n        push @tuple_str_int, int($str);\n    }\n    return @tuple_str_int;\n}",
    "    my @test_int;\n    my @test_str = split(/,/, $test_str);\n    for my $i (@test_str) {\n        push @test_int, int($i);\n    }\n    return @test_int;\n}",
    "    my @test_int;\n    for my $i (split(',', $test_str)) {\n        push @test_int, int($i);\n    }\n    return @test_int;\n}",
    "    my @test_int;\n    my @test_str = split(/\\s+/, $test_str);\n    foreach my $test_str (@test_str) {\n        push(@test_int, int($test_str));\n    }\n    return @test_int;\n}",
    "    my @test_int;\n    for my $i (split(/\\s+/, $test_str)) {\n        push @test_int, int($i);\n    }\n    return @test_int;\n}",
    "    my @arr = split(/,/, $test_str);\n    my @int_arr;\n    foreach my $str (@arr) {\n        push(@int_arr, int($str));\n    }\n    return @int_arr;\n}",
    "    my @test_arr = split(/,/, $test_str);\n    my @int_arr = ();\n    foreach my $i (@test_arr) {\n        push(@int_arr, int($i));\n    }\n    return @int_arr;\n}",
    "    my @test_int;\n    my $i = 0;\n    foreach my $str (@{$test_str}) {\n        $test_int[$i++] = int($str);\n    }\n    return @test_int;\n}",
    "    my @test_int;\n    my @test_str = split(/\\s+/, $test_str);\n    foreach my $i (@test_str) {\n        push(@test_int, int($i));\n    }\n    return @test_int;\n}",
    "    my @test_int;\n    my @test_str = split(/\\s+/, $test_str);\n    foreach my $str (@test_str) {\n        push(@test_int, int($str));\n    }\n    return @test_int;\n}",
    "    my @test_array = split(/,/, $test_str);\n    my @int_array;\n    foreach my $i (@test_array) {\n        push @int_array, int($i);\n    }\n    return @int_array;\n}",
    "    my @test_int;\n    my @test_str = split(/\\s+/, $test_str);\n    foreach my $test_str (@test_str) {\n        push(@test_int, int($test_str));\n    }\n    return @test_int;\n}",
    "    my @tuple = split(/\\s+/, $test_str);\n    my @int_tuple = ();\n    foreach my $str (@tuple) {\n        push @int_tuple, int($str);\n    }\n    return @int_tuple;\n}",
    "    my @test_arr = split(/\\s+/, $test_str);\n    my @test_int = map { int($_) } @test_arr;\n    return @test_int;\n}",
    "    my @test_int;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $aa = 0;\n    my $ab = 0;\n    my $ac = 0;\n    my $ad = 0;\n    my $ae = 0;\n    my $af = 0;\n    my $ag = 0;\n    my $ah = 0;\n    my $ai = 0;\n    my $aj = 0;\n    my $ak = 0;\n    my $al = 0;\n    my $am = 0;\n    my $an = 0;\n    my $ao = 0;\n    my $ap = 0;\n    my $aq = 0;\n    my $ar = 0;\n    my $as = 0;\n    my $at = 0;\n    my $au = 0;\n    my $av = 0;\n    my $aw = 0;\n    my $ax = 0;\n    my $ay = 0;\n    my $az = 0;\n    my $ba = 0;\n    my $bb = 0;\n    my $bc = 0;\n    my $bd = 0;\n    my $be = 0;\n    my $bf = 0;\n    my $bg = 0;\n    my $bh = 0;\n    my $bi = 0;\n    my $bj = 0;\n    my $bk = 0;\n    my $bl = 0;\n    my $bm = 0;\n    my $bn = 0;\n    my $bo = 0;\n    my $bp = 0;\n    my $bq = 0;\n    my $br = 0;\n    my $bs =",
    "    my @tuple = split(/\\s+/, $test_str);\n    my @ret = ();\n    foreach my $t (@tuple) {\n        push @ret, int($t);\n    }\n    return @ret;\n}",
    "    my @tuple = split(/\\s+/, $test_str);\n    my @int_tuple = ();\n    foreach my $i (@tuple) {\n        push @int_tuple, int($i);\n    }\n    return @int_tuple;\n}",
    "    my @test_int = ();\n    my @test_str = split(/,/, $test_str);\n    foreach my $test_str (@test_str) {\n        push(@test_int, int($test_str));\n    }\n    return @test_int;\n}",
    "    my @test_int;\n    my @test_str = split(/\\s+/, $test_str);\n    foreach my $i (@test_str) {\n        push(@test_int, int($i));\n    }\n    return @test_int;\n}",
    "    my @test_int;\n    my @test_str = split(/,/, $test_str);\n    foreach my $str (@test_str) {\n        push @test_int, int($str);\n    }\n    return @test_int;\n}",
    "    my @result;\n    my @test_str_array = split(/,/, $test_str);\n    foreach my $test_str_item (@test_str_array) {\n        push @result, int($test_str_item);\n    }\n    return @result;\n}",
    "    my @test_int = ();\n    foreach my $str (@{$test_str}) {\n        push @test_int, int($str);\n    }\n    return @test_int;\n}",
    "    my @test_int;\n    my @test_str = split(/,/, $test_str);\n    foreach my $i (@test_str) {\n        push(@test_int, int($i));\n    }\n    return @test_int;\n}",
    "    my @test_int = ();\n    my @test_str = split(/\\s+/, $test_str);\n    foreach my $test_str (@test_str) {\n        push(@test_int, int($test_str));\n    }\n    return @test_int;\n}",
    "    my @test_arr = split(/,/, $test_str);\n    my @int_arr = ();\n    foreach my $elem (@test_arr) {\n        push(@int_arr, int($elem));\n    }\n    return @int_arr;\n}",
    "    my @tuple = split(/,/, $test_str);\n    my @int_tuple = ();\n    foreach my $i (@tuple) {\n        push @int_tuple, int($i);\n    }\n    return @int_tuple;\n}",
    "    my @test_array = split(/,/, $test_str);\n    my @int_array;\n    foreach my $item (@test_array) {\n        push @int_array, int($item);\n    }\n    return @int_array;\n}",
    "    my @test_int;\n    my @test_str = split(/\\s+/, $test_str);\n    foreach my $test_str (@test_str) {\n        push @test_int, int($test_str);\n    }\n    return @test_int;\n}",
    "    my @test_int;\n    my @test_str = split(/,/, $test_str);\n    foreach my $str (@test_str) {\n        push(@test_int, int($str));\n    }\n    return @test_int;\n}",
    "    my @int_array;\n    my @str_array = split(/,/, $test_str);\n    foreach my $str (@str_array) {\n        push @int_array, int($str);\n    }\n    return @int_array;\n}",
    "    my @test_int;\n    for my $i (0 .. $#{$test_str}) {\n        push @test_int, int($test_str->[$i]);\n    }\n    return @test_int;\n}",
    "    my @test_arr = split(/\\s+/, $test_str);\n    my @int_arr = map { int($_) } @test_arr;\n    return @int_arr;\n}",
    "    my @int_array;\n    my @str_array = split(/,/, $test_str);\n    foreach my $str (@str_array) {\n        push(@int_array, int($str));\n    }\n    return @int_array;\n}",
    "    my @tuple = split(/,/, $test_str);\n    my @tuple_int = ();\n    foreach my $str (@tuple) {\n        push(@tuple_int, int($str));\n    }\n    return @tuple_int;\n}",
    "    my @test_int;\n    my @test_str = split(/\\s+/, $test_str);\n    foreach my $i (@test_str) {\n        push @test_int, int($i);\n    }\n    return @test_int;\n}",
    "    my @test_int;\n    for my $str (split /\\s+/, $test_str) {\n        push @test_int, int($str);\n    }\n    return @test_int;\n}",
    "    my @test_int = ();\n    foreach my $test_str_elem (@{$test_str}) {\n        push @test_int, int($test_str_elem);\n    }\n    return @test_int;\n}",
    "    my @test_arr = split(/\\s+/, $test_str);\n    my @test_int = map { int($_) } @test_arr;\n    return @test_int;\n}",
    "    my @tuple = split(/\\s+/, $test_str);\n    return @tuple;\n}",
    "    my @test_int = ();\n    foreach my $test_num (split(/\\s+/, $test_str)) {\n        push(@test_int, int($test_num));\n    }\n    return @test_int;\n}",
    "    my @test_arr = split(/\\s+/, $test_str);\n    my @test_int = map { int($_) } @test_arr;\n    return @test_int;\n}",
    "    my @int_array;\n    my @str_array = split(/,/, $test_str);\n    foreach my $str (@str_array) {\n        push @int_array, int($str);\n    }\n    return @int_array;\n}",
    "    my @test_arr = split(/,/, $test_str);\n    my @int_arr = map {int($_)} @test_arr;\n    return @int_arr;\n}",
    "    my @test_int;\n    my $i = 0;\n    foreach my $str (@{$test_str}) {\n        $test_int[$i++] = int($str);\n    }\n    return @test_int;\n}",
    "    my @test_int;\n    for my $i (split(/\\s+/, $test_str)) {\n        push @test_int, int($i);\n    }\n    return @test_int;\n}",
    "    my @test_int;\n    my @test_str = split(/\\s+/, $test_str);\n    foreach my $test_str (@test_str) {\n        push(@test_int, int($test_str));\n    }\n    return @test_int;\n}",
    "    my @test_int;\n    for my $i (split(/\\s+/, $test_str)) {\n        push @test_int, int($i);\n    }\n    return @test_int;\n}",
    "    my @test_int;\n    for my $i (split(/,/, $test_str)) {\n        push @test_int, int($i);\n    }\n    return \\@test_int;\n}",
    "    my @test_arr = split(/\\s+/, $test_str);\n    my @int_arr = ();\n    foreach my $i (@test_arr) {\n        push(@int_arr, int($i));\n    }\n    return @int_arr;\n}",
    "    my @tuple = split(/\\s+/, $test_str);\n    return @tuple;\n}",
    "    my @test_int;\n    for my $i (split /,/, $test_str) {\n        push @test_int, int($i);\n    }\n    return @test_int;\n}",
    "    my @str_arr = split(\",\", $test_str);\n    my @int_arr;\n    foreach my $str (@str_arr) {\n        push(@int_arr, int($str));\n    }\n    return @int_arr;\n}",
    "    my @test_int = ();\n    my @test_str = split(/,/, $test_str);\n    foreach my $str (@test_str) {\n        push(@test_int, int($str));\n    }\n    return @test_int;\n}",
    "    my @test_int = ();\n    my @test_str = split(/\\s+/, $test_str);\n    foreach my $test_str (@test_str) {\n        push(@test_int, int($test_str));\n    }\n    return @test_int;\n}",
    "    my @int_array;\n    my @str_array = split(/,/, $test_str);\n    foreach my $str (@str_array) {\n        push @int_array, int($str);\n    }\n    return @int_array;\n}",
    "    my @int_array;\n    my @str_array = split(/,/, $test_str);\n    foreach my $str (@str_array) {\n        push @int_array, int($str);\n    }\n    return @int_array;\n}",
    "    my @test_arr = split(/\\s+/, $test_str);\n    my @test_int_arr;\n    foreach my $test_str (@test_arr) {\n        push(@test_int_arr, int($test_str));\n    }\n    return @test_int_arr;\n}",
    "    my @test_int;\n    my @test_str = split(/\\s+/, $test_str);\n    foreach my $test_str (@test_str) {\n        push(@test_int, int($test_str));\n    }\n    return @test_int;\n}",
    "    my @test_int;\n    foreach my $str (@$test_str) {\n        push @test_int, int($str);\n    }\n    return @test_int;\n}",
    "    my @test_int;\n    my @test_str = split(/\\s+/, $test_str);\n    foreach my $test_str (@test_str) {\n        push @test_int, int($test_str);\n    }\n    return @test_int;\n}",
    "    my @test_int;\n    my @test_str = split(/\\s+/, $test_str);\n    foreach my $test_str (@test_str) {\n        push(@test_int, int($test_str));\n    }\n    return @test_int;\n}",
    "    my @tuple_str_int = ();\n    my @tuple_str = split(/,/, $test_str);\n    foreach my $str (@tuple_str) {\n        push @tuple_str_int, int($str);\n    }\n    return @tuple_str_int;\n}",
    "    my @test_int = ();\n    foreach my $num_str (split(/\\s+/, $test_str)) {\n        push(@test_int, int($num_str));\n    }\n    return @test_int;\n}",
    "    my @test_int;\n    my $i = 0;\n    foreach my $str (@{$test_str}) {\n        $test_int[$i++] = int($str);\n    }\n    return @test_int;\n}",
    "    my @test_arr = split(/\\s+/, $test_str);\n    my @int_arr = ();\n    foreach my $i (@test_arr) {\n        push @int_arr, int($i);\n    }\n    return @int_arr;\n}",
    "    my @test_int;\n    my @test_str = split(/\\s+/,$test_str);\n    foreach my $i (@test_str) {\n        push(@test_int,$i);\n    }\n    return @test_int;\n}"
  ]
}