{
  "name": "mbpp_758_unique_sublists",
  "language": "pl",
  "prompt": "# Write a function to count arrays within an array. The function should return a hash where every array is converted to an array and the value of such array is the number of its occurencies in the original array.\nsub unique_sublists {\n    my($list1) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_758_unique_sublists.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_sublists;\n        if(eq_deeply($candidate->([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]),{[1, 3] => 2, [5, 7] => 2, [13, 15, 17] => 1, [9, 11] => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]]),{[\"green\", \"orange\"] => 2, [\"black\"] => 1, [\"white\"] => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]]),{[10, 20, 30, 40] => 1, [60, 70, 50, 50] => 1, [90, 100, 200] => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[\"john\"]]),{[\"john\"] => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my %hash;\n    foreach my $item (@$list1) {\n        if (ref($item) eq 'ARRAY') {\n            my $key = join(',', @$item);\n            $hash{$key}++;\n        }\n    }\n    return %hash;\n}",
    "    my %hash;\n    foreach my $sublist (@$list1) {\n        my @sublist = @$sublist;\n        my @sublist_sorted = sort {$a <=> $b} @sublist;\n        my $sublist_sorted = join(\",\", @sublist_sorted);\n        $hash{$sublist_sorted}++;\n    }\n    return %hash;\n}",
    "    my %hash = ();\n    foreach my $elem (@{$list1}) {\n        if (ref($elem) eq 'ARRAY') {\n            my $key = join(',', @{$elem});\n            $hash{$key}++;\n        }\n    }\n    return %hash;\n}",
    "    my %hash = ();\n    foreach my $sublist (@$list1) {\n        $hash{$sublist}++;\n    }\n    return \\%hash;\n}",
    "    my %hash;\n    foreach my $item (@$list1) {\n        my @arr = @$item;\n        my $key = join(\",\", @arr);\n        if (exists $hash{$key}) {\n            $hash{$key}++;\n        } else {\n            $hash{$key} = 1;\n        }\n    }\n    return %hash;\n}",
    "    my %hash;\n    foreach my $item (@$list1) {\n        my @sorted = sort {$a <=> $b} @$item;\n        my $key = join(\",\", @sorted);\n        if (exists $hash{$key}) {\n            $hash{$key}++;\n        } else {\n            $hash{$key} = 1;\n        }\n    }\n    return \\%hash;\n}",
    "    my %hash = ();\n    foreach my $list2 (@$list1) {\n        my $key = join(\",\", @$list2);\n        $hash{$key}++;\n    }\n    return %hash;\n}",
    "    my %hash;\n    foreach my $i (@$list1) {\n        my @sorted = sort @$i;\n        my $key = join(\",\", @sorted);\n        $hash{$key}++;\n    }\n    return %hash;\n}",
    "    my %hash;\n    foreach my $i (@$list1) {\n        my @array = @$i;\n        my $key = join(',', @array);\n        $hash{$key}++;\n    }\n    return %hash;\n}",
    "    my %hash = ();\n    foreach my $sublist (@$list1) {\n        my $key = join(',', @$sublist);\n        $hash{$key}++;\n    }\n    return %hash;\n}",
    "    my %hash;\n    foreach my $sublist (@$list1) {\n        my $key = join(\" \", @$sublist);\n        $hash{$key}++;\n    }\n    return %hash;\n}",
    "    my %hash;\n    foreach my $sublist (@$list1) {\n        my @sublist = @$sublist;\n        my $sublist_string = join '', @sublist;\n        $hash{$sublist_string}++;\n    }\n    return %hash;\n}",
    "    my %hash;\n    foreach my $item (@$list1) {\n        my @array = @$item;\n        my $key = join(\",\", @array);\n        if (exists $hash{$key}) {\n            $hash{$key}++;\n        } else {\n            $hash{$key} = 1;\n        }\n    }\n    return %hash;\n}",
    "    my %hash;\n    foreach my $elem (@$list1) {\n        my @sorted = sort { $a <=> $b } @$elem;\n        my $key = join(',', @sorted);\n        $hash{$key}++;\n    }\n    return \\%hash;\n}",
    "    my %uniq;\n    foreach my $sublist (@$list1) {\n        my @sorted = sort @$sublist;\n        $uniq{join(',', @sorted)}++;\n    }\n    return \\%uniq;\n}",
    "    my %hash;\n    foreach my $list2 (@$list1) {\n        my @list2 = sort @$list2;\n        my $key = join(',', @list2);\n        $hash{$key}++;\n    }\n    return \\%hash;\n}",
    "    my %hash;\n    foreach my $i (@$list1) {\n        my @sorted = sort @$i;\n        my $key = join(\",\", @sorted);\n        $hash{$key}++;\n    }\n    return %hash;\n}",
    "    my %hash;\n    foreach my $i (@$list1) {\n        my @sorted = sort @$i;\n        my $key = join(',', @sorted);\n        $hash{$key}++;\n    }\n    return \\%hash;\n}",
    "    my %hash;\n    foreach my $elem (@$list1) {\n        my @sorted = sort @$elem;\n        my $key = join '', @sorted;\n        $hash{$key}++;\n    }\n    return %hash;\n}",
    "    my %hash = ();\n    foreach my $list2 (@$list1) {\n        my $key = join(',', @$list2);\n        $hash{$key}++;\n    }\n    return %hash;\n}"
  ]
}