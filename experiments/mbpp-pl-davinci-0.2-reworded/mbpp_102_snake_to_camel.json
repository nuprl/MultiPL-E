{
  "name": "mbpp_102_snake_to_camel",
  "language": "pl",
  "prompt": "# Write a function to convert a snake case string to camel case string.\nsub snake_to_camel {\n    my($word) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_102_snake_to_camel.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&snake_to_camel;\n        if(eq_deeply($candidate->(\"python_program\"),\"PythonProgram\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"python_language\"),\"PythonLanguage\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"programming_language\"),\"ProgrammingLanguage\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    $word =~ s/(^|_)(.)/\\U$2/g;\n    return $word;\n}",
    "    $word =~ s/(\\_\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/_(.)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/(^|_)(.)/\\U$2/g;\n    return $word;\n}",
    "    $word =~ s/^([a-z])/uc($1)/e;\n    $word =~ s/_([a-z])/uc($1)/ge;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\U$1/g;\n    return $word;\n}",
    "    $word =~ s/_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/_([a-z])/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/^([a-z])/uc($1)/e;\n    $word =~ s/_([a-z])/uc($1)/eg;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/(^|_)([a-z])/$2/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/_([a-z])/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\U$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/_(.)/\\u$1/g;\n    return $word;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    $word =~ s/\\_(\\w)/\\U$1/g;\n    return $word;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    $word =~ s/\\_(\\w)/\\U$1/g;\n    return $word;\n}",
    "    $word =~ s{_(\\w)}{uc($1)}ge;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/^([a-z])/\\u$1/;\n    $word =~ s/_([a-z])/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/_([a-z])/\\u$1/g;\n    return $word;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    $word =~ s/(^|_)(.)/\\U$2/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\U$1/g;\n    return $word;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    $word =~ s/(^|_)([a-z])/$2/g;\n    return $word;\n}",
    "    $word =~ s/_([a-z])/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\U$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $w (@words) {\n        $camel .= ucfirst $w;\n    }\n    return $camel;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\U$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\U$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_([a-z])/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/_(.)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/uc($1)/ge;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/(^|_)([a-z])/$2/g;\n    return $word;\n}",
    "    $word =~ s/_([a-z])/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/^([a-z])/uc($1)/e;\n    $word =~ s/_([a-z])/uc($1)/eg;\n    return $word;\n}",
    "    $word =~ s/_([a-z])/\\U$1/g;\n    return $word;\n}",
    "    $word =~ s/_([a-z])/\\u$1/g;\n    return $word;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    $word =~ s/\\_(\\w)/\\U$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/_(.)/uc($1)/ge;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/^([a-z])/uc($1)/e;\n    $word =~ s/_([a-z])/uc($1)/eg;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\U$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_([a-z])/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/(^|_)(.)/\\U$2/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\b(\\w)/\\U$1/g;\n    return $word;\n}",
    "    $word =~ s/(^|_)(.)/\\U$2/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    my @words = split(/_/, $word);\n    my $camel = shift(@words);\n    foreach my $word (@words) {\n        $camel .= ucfirst($word);\n    }\n    return $camel;\n}",
    "    $word =~ s/\\_(\\w)/\\U$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/(^|_)(.)/\\U$2/g;\n    return $word;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/_(.)/\\u$1/g;\n    return $word;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "\n    # Split the word into words.\n    my @words = split /_/, $word;",
    "    $word =~ s/^([a-z])/\\U$1/;\n    $word =~ s/_([a-z])/\\U$1/g;\n    return $word;\n}",
    "    $word =~ s/_(.)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\U$1/g;\n    return $word;\n}",
    "    $word =~ s/_([a-z])/\\U$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/_(.)/\\U$1/g;\n    return $word;\n}",
    "    $word =~ s/_(.)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/^([a-z])/\\U$1/;\n    $word =~ s/_([a-z])/\\U$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    my $camel = '';\n    my @parts = split(/_/, $word);\n    foreach my $part (@parts) {\n        $camel .= ucfirst($part);\n    }\n    return $camel;\n}",
    "    my @words = split(/_/, $word);\n    my $camel = shift(@words);\n    foreach my $word (@words) {\n        $camel .= ucfirst($word);\n    }\n    return $camel;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/_(.)/\\U$1/g;\n    return $word;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    $word =~ s/\\_(\\w)/\\U$1/g;\n    return $word;\n}",
    "    $word =~ s/_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/_([a-z])/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "\n    $word =~ s/\\_(\\w)/\\u$1/g;",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\U$1/g;\n    return $word;\n}",
    "    $word =~ s/_(.)/\\U$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/_(.)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/_([a-z])/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/_(.)/uc($1)/ge;\n    return $word;\n}",
    "    $word =~ s/(_)(.)/\\U$2/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/(\\_\\w)/\\u$1/g;\n    return $word;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    $word =~ s/_(.)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/^([a-z])/\\u$1/;\n    $word =~ s/_([a-z])/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/_([a-z])/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/^([a-z])/uc($1)/e;\n    $word =~ s/_([a-z])/uc($1)/ge;\n    return $word;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    $word =~ s/_(.)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_([a-z])/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\U$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\U$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/(^|_)(.)/\\U$2/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/_(.)/\\U$1/g;\n    return $word;\n}",
    "    $word =~ s/^([a-z])/\\U$1/;\n    $word =~ s/_([a-z])/\\U$1/g;\n    return $word;\n}",
    "    $word =~ s/_(.)/\\U$1/g;\n    return $word;\n}",
    "    my @words = split(/_/, $word);\n    my $camel = shift(@words);\n    foreach my $word (@words) {\n        $camel .= ucfirst($word);\n    }\n    return $camel;\n}",
    "    my @words = split(/_/, $word);\n    my $camel = shift(@words);\n    foreach my $word (@words) {\n        $camel .= ucfirst($word);\n    }\n    return $camel;\n}",
    "    $word =~ s/_([a-z])/\\u$1/g;\n    return $word;\n}",
    "    my @words = split(/_/, $word);\n    my $camel = shift(@words);\n    foreach my $word (@words) {\n        $camel .= ucfirst($word);\n    }\n    return $camel;\n}",
    "    $word =~ s/\\_(\\w)/\\U$1/g;\n    return $word;\n}",
    "    $word =~ s/^([a-z])/\\U$1/;\n    $word =~ s/_([a-z])/\\U$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_([a-z])/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/_(\\w)/\\U$1/g;\n    return $word;\n}",
    "    $word =~ s/^([a-z])/\\U$1/;\n    $word =~ s/_(.)/\\U$1/g;\n    return $word;\n}",
    "    $word =~ s/(^|_)(.)/\\U$2/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/(_)(.)/$2/g;\n    return $word;\n}",
    "    $word =~ s/(^|_)(.)/\\U$2/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\b(\\w)/\\U$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/(_)(\\w)/\\u$2/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    my $camel = '';\n    for my $part (split /_/, $word) {\n        $camel .= ucfirst $part;\n    }\n    return $camel;\n}",
    "    $word =~ s/\\_(\\w)/\\U$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/_([a-z])/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\U$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/(^|_)(.)/\\U$2/g;\n    return $word;\n}",
    "    my @words = split(/_/, $word);\n    my $camel = shift(@words);\n    foreach my $word (@words) {\n        $camel .= ucfirst($word);\n    }\n    return $camel;\n}",
    "    $word =~ s/\\_(\\w)/\\U$1/g;\n    return $word;\n}",
    "    $word =~ s/(^|_)([a-z])/$2/g;\n    return $word;\n}",
    "    $word =~ s/_(.)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/^([a-z])/uc($1)/e;\n    $word =~ s/_(.)/uc($1)/ge;\n    return $word;\n}",
    "    $word =~ s/_(.)/\\u$1/g;\n    return $word;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    my $camel = '';\n    my $last_was_underscore = 0;\n    for my $char (split //, $word) {\n        if ($char eq '_') {\n            $last_was_underscore = 1;\n        }\n        else {\n            $camel .= $last_was_underscore ? uc $char : $char;\n            $last_was_underscore = 0;\n        }\n    }\n    return $camel;\n}",
    "    $word =~ s/\\_(\\w)/\\U$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\U$1/g;\n    return $word;\n}",
    "    $word =~ s/_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\U$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/(^|_)(.)/\\U$2/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/(^|_)([a-z])/$2/g;\n    return ucfirst $word;\n}",
    "    $word =~ s/\\_(\\w)/\\U$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/(^|_)(.)/\\U$2/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    my @words = split(/_/, $word);\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst($word);\n    }\n    return $camel;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    $word =~ s/_(.)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/(^|_)([a-z])/$2/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}"
  ]
}