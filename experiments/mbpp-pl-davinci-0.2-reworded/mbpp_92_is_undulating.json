{
  "name": "mbpp_92_is_undulating",
  "language": "pl",
  "prompt": "# Write a function to check whether the given number is undulating or not.\nsub is_undulating {\n    my($n) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_92_is_undulating.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_undulating;\n        if(eq_deeply($candidate->(1212121),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1991),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(121),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @digits = split //, $n;\n    my $i = 0;\n    while ($i < $#digits) {\n        return 0 if $digits[$i] == $digits[$i+1];\n        $i++;\n    }\n    return 1;\n}",
    "    my $s = \"$n\";\n    my $len = length($s);\n    for my $i (0 .. $len - 2) {\n        return 0 if substr($s, $i, 1) == substr($s, $i + 1, 1);\n    }\n    return 1;\n}",
    "    my $s = $n;\n    my $d = 0;\n    my $prev = -1;\n    my $curr = -1;\n    while ($s > 0) {\n        $d = $s % 10;\n        $s = int($s / 10);\n        $curr = $d;\n        if ($prev != -1) {\n            if ($prev == $curr) {\n                return 0;\n            }\n        }\n        $prev = $curr;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $len = @digits;\n    my $i = 0;\n    while ($i < $len - 2) {\n        if ($digits[$i] == $digits[$i + 1]) {\n            $i++;\n            next;\n        }\n        if ($digits[$i] > $digits[$i + 1]) {\n            if ($digits[$i + 1] < $digits[$i + 2]) {\n                $i++;\n                next;\n            }\n            else {\n                return 0;\n            }\n        }\n        else {\n            if ($digits[$i + 1] > $digits[$i + 2]) {\n                $i++;\n                next;\n            }\n            else {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my $str = \"$n\";\n    my $len = length($str);\n    my $flag = 0;\n    for(my $i=0; $i<$len-1; $i++) {\n        if(substr($str, $i, 1) == substr($str, $i+1, 1)) {\n            $flag = 1;\n            last;\n        }\n    }\n    if($flag == 0) {\n        return 1;\n    }\n    else {\n        return 0;\n    }\n}",
    "    my $last_digit = $n % 10;\n    my $next_digit = ($n / 10) % 10;\n    my $is_increasing = $last_digit < $next_digit;\n    while ($n > 0) {\n        $n /= 10;\n        $last_digit = $next_digit;\n        $next_digit = $n % 10;\n        if ($is_increasing) {\n            return 0 if $last_digit < $next_digit;\n            $is_increasing = 0 if $last_digit > $next_digit;\n        } else {\n            return 0 if $last_digit > $next_digit;\n            $is_increasing = 1 if $last_digit < $next_digit;\n        }\n    }\n    return 1;\n}",
    "    my $s = $n;\n    my $d = 0;\n    my $last_d = -1;\n    my $last_d_count = 0;\n    my $is_undulating = 1;\n    while ($s > 0) {\n        $d = $s % 10;\n        if ($last_d != -1) {\n            if ($last_d == $d) {\n                $last_d_count++;\n            } else {\n                if ($last_d_count > 1) {\n                    $is_undulating = 0;\n                    last;\n                }\n                $last_d_count = 1;\n            }\n        }\n        $last_d = $d;\n        $s = int($s / 10);\n    }\n    return $is_undulating;\n}",
    "    my $prev_digit = -1;\n    my $prev_diff = 0;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        my $diff = $digit - $prev_digit;\n        if ($prev_diff != 0 && $diff != 0 && $diff != $prev_diff) {\n            return 0;\n        }\n        $prev_digit = $digit;\n        $prev_diff = $diff;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my $last_digit = $n % 10;\n    my $next_digit = undef;\n    $n /= 10;\n    while ($n > 0) {\n        $next_digit = $n % 10;\n        if ($last_digit == $next_digit) {\n            return 0;\n        }\n        $last_digit = $next_digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my $str = \"$n\";\n    my $len = length($str);\n    for my $i (0 .. $len - 2) {\n        return 0 if substr($str, $i, 1) == substr($str, $i + 1, 1);\n    }\n    return 1;\n}",
    "    my $last_digit = $n % 10;\n    $n /= 10;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        return 0 if $digit == $last_digit;\n        $last_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my $last_digit = $n % 10;\n    my $next_digit = ($n / 10) % 10;\n    my $is_increasing = $last_digit < $next_digit;\n    while ($n > 0) {\n        $last_digit = $next_digit;\n        $next_digit = ($n / 10) % 10;\n        if ($last_digit == $next_digit) {\n            return 0;\n        }\n        if ($is_increasing) {\n            if ($last_digit > $next_digit) {\n                $is_increasing = 0;\n            }\n        } else {\n            if ($last_digit < $next_digit) {\n                return 0;\n            }\n        }\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my $last_digit = $n % 10;\n    $n /= 10;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        return 0 if $digit == $last_digit;\n        $last_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my $prev = -1;\n    my $curr = -1;\n    my $next = -1;\n    while ($n > 0) {\n        $prev = $curr;\n        $curr = $next;\n        $next = $n % 10;\n        $n /= 10;\n        if ($curr == -1) {\n            next;\n        }\n        if ($prev == -1) {\n            next;\n        }\n        if ($prev > $curr) {\n            if ($curr > $next) {\n                return 0;\n            }\n        }\n        if ($prev < $curr) {\n            if ($curr < $next) {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my $last_digit = -1;\n    my $last_diff = -1;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        my $diff = $last_digit - $digit;\n        if ($last_diff == -1) {\n            $last_diff = $diff;\n        }\n        elsif ($last_diff != $diff) {\n            return 0;\n        }\n        $last_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $last_digit = pop @digits;\n    my $last_diff = 0;\n    for my $digit (@digits) {\n        my $diff = $last_digit - $digit;\n        return 0 if $diff == 0;\n        return 0 if $last_diff != 0 && $diff != $last_diff;\n        $last_diff = $diff;\n        $last_digit = $digit;\n    }\n    return 1;\n}",
    "    my $prev = undef;\n    for my $d (split //, $n) {\n        return 0 if defined $prev && $prev == $d;\n        $prev = $d;\n    }\n    return 1;\n}",
    "    my @digits = split //, $n;\n    my $prev = $digits[0];\n    for my $i (1 .. $#digits) {\n        return 0 if $digits[$i] == $prev;\n        $prev = $digits[$i];\n    }\n    return 1;\n}",
    "    my $last_digit = $n % 10;\n    my $next_last_digit = ($n / 10) % 10;\n    while ($n > 0) {\n        if ($last_digit != $next_last_digit) {\n            return 0;\n        }\n        $n /= 10;\n        $last_digit = $n % 10;\n        $next_last_digit = ($n / 10) % 10;\n    }\n    return 1;\n}",
    "    my $last_digit = $n % 10;\n    $n /= 10;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        return 0 if $digit == $last_digit;\n        $last_digit = $digit;\n        $n /= 10;\n    }\n    return 1;\n}"
  ]
}