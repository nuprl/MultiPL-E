{
  "name": "mbpp_470_add_pairwise",
  "language": "pl",
  "prompt": "# Write a function to find the pairwise addition of the neighboring elements of the given array.\nsub add_pairwise {\n    my($test_tup) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_470_add_pairwise.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add_pairwise;\n        if(eq_deeply($candidate->([1, 5, 7, 8, 10]),[6, 12, 15, 18])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 6, 8, 9, 11]),[8, 14, 17, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 7, 9, 10, 12]),[10, 16, 19, 22])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @test_arr = @$test_tup;\n    my @result_arr;\n    for (my $i = 0; $i < scalar(@test_arr) - 1; $i++) {\n        push(@result_arr, $test_arr[$i] + $test_arr[$i + 1]);\n    }\n    return \\@result_arr;\n}",
    "    my @test_arr = @$test_tup;\n    my @result_arr;\n    for (my $i = 0; $i < scalar @test_arr - 1; $i++) {\n        push @result_arr, $test_arr[$i] + $test_arr[$i + 1];\n    }\n    return \\@result_arr;\n}",
    "    my @test_list = @$test_tup;\n    my @result_list;\n    for (my $i=0; $i<scalar(@test_list)-1; $i++) {\n        push @result_list, $test_list[$i] + $test_list[$i+1];\n    }\n    return @result_list;\n}",
    "    my @test_arr = @$test_tup;\n    my @result;\n    for (my $i = 0; $i < scalar(@test_arr) - 1; $i++) {\n        push @result, $test_arr[$i] + $test_arr[$i + 1];\n    }\n    return @result;\n}",
    "    my @test_arr = @{$test_tup};\n    my @result_arr = ();\n    for (my $i = 0; $i < scalar(@test_arr) - 1; $i++) {\n        push @result_arr, $test_arr[$i] + $test_arr[$i + 1];\n    }\n    return @result_arr;\n}",
    "    my @test_arr = @{$test_tup};\n    my @result_arr = ();\n    for(my $i=0; $i<scalar(@test_arr)-1; $i++) {\n        push(@result_arr, $test_arr[$i]+$test_arr[$i+1]);\n    }\n    return @result_arr;\n}",
    "    my @test_arr = @$test_tup;\n    my @result_arr;\n    for(my $i = 0; $i < scalar @test_arr; $i++) {\n        if($i == 0) {\n            push(@result_arr, $test_arr[$i] + $test_arr[$i+1]);\n        } elsif($i == scalar @test_arr - 1) {\n            push(@result_arr, $test_arr[$i] + $test_arr[$i-1]);\n        } else {\n            push(@result_arr, $test_arr[$i] + $test_arr[$i-1] + $test_arr[$i+1]);\n        }\n    }\n    return @result_arr;\n}",
    "    my @test_tup = @$test_tup;\n    my @result;\n    for (my $i = 0; $i < scalar(@test_tup) - 1; $i++) {\n        push @result, $test_tup[$i] + $test_tup[$i + 1];\n    }\n    return @result;\n}",
    "    my @test_arr = @$test_tup;\n    my @result = ();\n    for (my $i = 0; $i < scalar @test_arr - 1; $i++) {\n        push @result, $test_arr[$i] + $test_arr[$i + 1];\n    }\n    return @result;\n}",
    "    my @test_arr = @{$test_tup};\n    my @result_arr;\n    for (my $i = 0; $i < scalar(@test_arr) - 1; $i++) {\n        push(@result_arr, $test_arr[$i] + $test_arr[$i + 1]);\n    }\n    return @result_arr;\n}",
    "    my @test_list = @{$test_tup};\n    my @result_list = ();\n    for (my $i = 0; $i < scalar(@test_list) - 1; $i++) {\n        push(@result_list, $test_list[$i] + $test_list[$i + 1]);\n    }\n    return @result_list;\n}",
    "    my @test_arr = @{$test_tup};\n    my $len = scalar(@test_arr);\n    my @result;\n    for (my $i = 0; $i < $len - 1; $i++) {\n        push @result, $test_arr[$i] + $test_arr[$i + 1];\n    }\n    return @result;\n}",
    "    my @test_arr = @{$test_tup};\n    my @result_arr = ();\n    for (my $i = 0; $i < @test_arr - 1; $i++) {\n        push @result_arr, $test_arr[$i] + $test_arr[$i + 1];\n    }\n    return @result_arr;\n}",
    "    my @test_arr = @{$test_tup};\n    my @result_arr;\n    for(my $i = 0; $i < scalar(@test_arr) - 1; $i++) {\n        push(@result_arr, $test_arr[$i] + $test_arr[$i + 1]);\n    }\n    return @result_arr;\n}",
    "    my @test_arr = @{$test_tup};\n    my @result_arr;\n    for (my $i = 0; $i < scalar(@test_arr); $i++) {\n        if ($i == 0) {\n            push(@result_arr, $test_arr[$i] + $test_arr[$i + 1]);\n        } elsif ($i == scalar(@test_arr) - 1) {\n            push(@result_arr, $test_arr[$i] + $test_arr[$i - 1]);\n        } else {\n            push(@result_arr, $test_arr[$i - 1] + $test_arr[$i + 1]);\n        }\n    }\n    return @result_arr;\n}",
    "    my @test_arr = @$test_tup;\n    my @result_arr;\n    for(my $i = 0; $i < scalar(@test_arr) - 1; $i++) {\n        push @result_arr, $test_arr[$i] + $test_arr[$i + 1];\n    }\n    return @result_arr;\n}",
    "    my @test_arr = @$test_tup;\n    my @res_arr;\n    for(my $i = 0; $i < scalar(@test_arr) - 1; $i++) {\n        push(@res_arr, $test_arr[$i] + $test_arr[$i + 1]);\n    }\n    return \\@res_arr;\n}",
    "    my @test_arr = @$test_tup;\n    my @result_arr;\n    for(my $i = 0; $i < scalar @test_arr - 1; $i++) {\n        push(@result_arr, $test_arr[$i] + $test_arr[$i+1]);\n    }\n    return @result_arr;\n}",
    "    my @test_list = @{$test_tup};\n    my @result_list;\n    for(my $i = 0; $i < scalar(@test_list) - 1; $i++) {\n        push @result_list, $test_list[$i] + $test_list[$i + 1];\n    }\n    return @result_list;\n}",
    "    my @test_arr = @$test_tup;\n    my @result;\n    for (my $i = 0; $i < scalar(@test_arr) - 1; $i++) {\n        push @result, $test_arr[$i] + $test_arr[$i + 1];\n    }\n    return @result;\n}"
  ]
}