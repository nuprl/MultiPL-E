{
  "name": "mbpp_754_extract_index_list",
  "language": "pl",
  "prompt": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nsub extract_index_list {\n    my($l1, $l2, $l3) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_754_extract_index_list.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&extract_index_list;\n        if(eq_deeply($candidate->([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]),[1, 7])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]),[1, 6])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]),[1, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @result;\n    my $i = 0;\n    while ($i < @$l1 && $i < @$l2 && $i < @$l3) {\n        push @result, $i if $l1->[$i] eq $l2->[$i] && $l2->[$i] eq $l3->[$i];\n        $i++;\n    }\n    return @result;\n}",
    "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @l3 = @$l3;\n    my @result;\n    for (my $i = 0; $i < scalar @l1; $i++) {\n        if ($l1[$i] eq $l2[$i] && $l2[$i] eq $l3[$i]) {\n            push @result, $l1[$i];\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i (0..$#$l1) {\n        push @result, $i if $l1->[$i] eq $l2->[$i] and $l2->[$i] eq $l3->[$i];\n    }\n    return @result;\n}",
    "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @l3 = @$l3;\n    my @result;\n    for (my $i = 0; $i < @l1; $i++) {\n        if ($l1[$i] eq $l2[$i] && $l2[$i] eq $l3[$i]) {\n            push @result, $l1[$i];\n        }\n    }\n    return @result;\n}",
    "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @l3 = @$l3;\n    my @result = ();\n    for (my $i = 0; $i < scalar(@l1); $i++) {\n        if ($l1[$i] eq $l2[$i] && $l2[$i] eq $l3[$i]) {\n            push @result, $l1[$i];\n        }\n    }\n    return @result;\n}",
    "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @l3 = @$l3;\n    my @result;\n    for (my $i = 0; $i < @l1; $i++) {\n        if ($l1[$i] eq $l2[$i] && $l2[$i] eq $l3[$i]) {\n            push @result, $l1[$i];\n        }\n    }\n    return @result;\n}",
    "    my @index_list;\n    for my $i (0 .. $#{$l1}) {\n        if (defined $l1->[$i] && defined $l2->[$i] && defined $l3->[$i]) {\n            push @index_list, $i;\n        }\n    }\n    return @index_list;\n}",
    "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @l3 = @$l3;\n    my @result;\n    for (my $i = 0; $i < scalar @l1; $i++) {\n        if ($l1[$i] eq $l2[$i] && $l2[$i] eq $l3[$i]) {\n            push @result, $l1[$i];\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i (0 .. $#$l1) {\n        push @result, $i if $l1->[$i] eq $l2->[$i] && $l2->[$i] eq $l3->[$i];\n    }\n    return @result;\n}",
    "    my @result = ();\n    for (my $i = 0; $i < scalar(@$l1); $i++) {\n        if ($l1->[$i] eq $l2->[$i] && $l2->[$i] eq $l3->[$i]) {\n            push(@result, $l1->[$i]);\n        }\n    }\n    return @result;\n}",
    "    my $l1_size = scalar(@$l1);\n    my $l2_size = scalar(@$l2);\n    my $l3_size = scalar(@$l3);\n    my $min_size = min($l1_size, $l2_size, $l3_size);\n    my @result;\n    for(my $i = 0; $i < $min_size; $i++) {\n        my $el1 = $l1->[$i];\n        my $el2 = $l2->[$i];\n        my $el3 = $l3->[$i];\n        if($el1 eq $el2 && $el2 eq $el3) {\n            push(@result, $el1);\n        }\n    }\n    return @result;\n}",
    "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @l3 = @$l3;\n    my @result = ();\n    for (my $i = 0; $i < scalar(@l1); $i++) {\n        if ($l1[$i] eq $l2[$i] && $l2[$i] eq $l3[$i]) {\n            push @result, $l1[$i];\n        }\n    }\n    return @result;\n}",
    "    my @result = ();\n    for (my $i = 0; $i < scalar(@$l1); $i++) {\n        if ($l1->[$i] eq $l2->[$i] and $l2->[$i] eq $l3->[$i]) {\n            push @result, $l1->[$i];\n        }\n    }\n    return \\@result;\n}",
    "    my @result = ();\n    for my $i (0 .. $#{$l1}) {\n        if ($l1->[$i] eq $l2->[$i] && $l2->[$i] eq $l3->[$i]) {\n            push @result, $l1->[$i];\n        }\n    }\n    return \\@result;\n}",
    "    my @result = ();\n    for (my $i = 0; $i < scalar @$l1; $i++) {\n        if ($l1->[$i] == $l2->[$i] && $l2->[$i] == $l3->[$i]) {\n            push @result, $l1->[$i];\n        }\n    }\n    return @result;\n}",
    "    my @l1 = @$l1;\n    my @l2 = @$l2;\n    my @l3 = @$l3;\n    my @result;\n    for (my $i = 0; $i < scalar @l1; $i++) {\n        if ($l1[$i] eq $l2[$i] && $l2[$i] eq $l3[$i]) {\n            push @result, $l1[$i];\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for(my $i = 0; $i < @$l1; $i++) {\n        if(defined($l1->[$i]) && defined($l2->[$i]) && defined($l3->[$i])) {\n            push @result, $i;\n        }\n    }\n    return @result;\n}",
    "    my @index_list;\n    for (my $i = 0; $i < scalar @$l1; $i++) {\n        if ($l1->[$i] eq $l2->[$i] && $l2->[$i] eq $l3->[$i]) {\n            push @index_list, $i;\n        }\n    }\n    return @index_list;\n}",
    "    my @result = ();\n    for (my $i = 0; $i < scalar(@$l1); $i++) {\n        if ($l1->[$i] eq $l2->[$i] && $l1->[$i] eq $l3->[$i]) {\n            push @result, $l1->[$i];\n        }\n    }\n    return @result;\n}",
    "    my @indexes;\n    for (my $i = 0; $i < scalar @$l1; $i++) {\n        if ($l1->[$i] eq $l2->[$i] && $l2->[$i] eq $l3->[$i]) {\n            push @indexes, $i;\n        }\n    }\n    return @indexes;\n}"
  ]
}