{
  "name": "mbpp_752_jacobsthal_num",
  "language": "pl",
  "prompt": "# Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nsub jacobsthal_num {\n    my($n) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_752_jacobsthal_num.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&jacobsthal_num;\n        if(eq_deeply($candidate->(5),11)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(13),2731)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $j = 0;\n    my $j_1 = 0;\n    my $j_2 = 1;\n    for(my $i = 0; $i < $n; $i++) {\n        $j = $j_1 + 2 * $j_2;\n        $j_1 = $j_2;\n        $j_2 = $j;\n    }\n    return $j;\n}",
    "    return 0 if $n == 0;\n    return 1 if $n == 1;\n    return jacobsthal_num($n-1) + 2*jacobsthal_num($n-2);\n}",
    "    return 0 if $n == 0;\n    return 1 if $n == 1;\n    return jacobsthal_num($n-1) + 2 * jacobsthal_num($n-2);\n}",
    "    return 0 if $n == 0;\n    return 1 if $n == 1;\n    return jacobsthal_num($n-1) + 2*jacobsthal_num($n-2);\n}",
    "    return 0 if $n == 0;\n    return 1 if $n == 1;\n    return jacobsthal_num($n-1) + 2 * jacobsthal_num($n-2);\n}",
    "    return 0 if $n == 0;\n    return 1 if $n == 1;\n    return jacobsthal_num($n-1) + 2*jacobsthal_num($n-2);\n}",
    "    my $j = 0;\n    my $j_1 = 0;\n    my $j_2 = 1;\n    for(my $i = 0; $i < $n; $i++) {\n        $j = $j_1 + 2 * $j_2;\n        $j_1 = $j_2;\n        $j_2 = $j;\n    }\n    return $j;\n}",
    "    my($j1, $j2) = (0, 1);\n    for (1..$n) {\n        ($j1, $j2) = ($j2, 2 * $j2 + $j1);\n    }\n    return $j1;\n}",
    "    return 0 if $n == 0;\n    return 1 if $n == 1;\n    return jacobsthal_num($n-1) + 2 * jacobsthal_num($n-2);\n}",
    "    return 0 if $n == 0;\n    return 1 if $n == 1;\n    return jacobsthal_num($n-1) + 2*jacobsthal_num($n-2);\n}",
    "    return 0 if $n == 0;\n    return 1 if $n == 1;\n    return jacobsthal_num($n-1) + 2 * jacobsthal_num($n-2);\n}",
    "    my $a = 0;\n    my $b = 1;\n    for(my $i = 0; $i < $n; $i++) {\n        my $c = $a + 2 * $b;\n        $a = $b;\n        $b = $c;\n    }\n    return $a;\n}",
    "    return 0 if $n == 0;\n    return 1 if $n == 1;\n    return jacobsthal_num($n-1) + 2 * jacobsthal_num($n-2);\n}",
    "    return 0 if $n == 0;\n    return 1 if $n == 1;\n    return jacobsthal_num($n-1) + 2 * jacobsthal_num($n-2);\n}",
    "    return 0 if $n == 0;\n    return 1 if $n == 1;\n    return jacobsthal_num($n-1) + 2*jacobsthal_num($n-2);\n}",
    "    my $j = 0;\n    my $j_1 = 0;\n    my $j_2 = 1;\n    for (my $i = 0; $i < $n; $i++) {\n        $j = $j_1 + 2 * $j_2;\n        $j_1 = $j_2;\n        $j_2 = $j;\n    }\n    return $j;\n}",
    "    my $j = 0;\n    my $j_1 = 0;\n    my $j_2 = 1;\n    for (my $i = 0; $i < $n; $i++) {\n        $j = $j_1 + 2 * $j_2;\n        $j_1 = $j_2;\n        $j_2 = $j;\n    }\n    return $j;\n}",
    "    return 0 if $n == 0;\n    return 1 if $n == 1;\n    return jacobsthal_num($n-1) + 2*jacobsthal_num($n-2);\n}",
    "    return 0 if $n == 0;\n    return 1 if $n == 1;\n    return jacobsthal_num($n-1) + 2 * jacobsthal_num($n-2);\n}",
    "    return 0 if $n == 0;\n    return 1 if $n == 1;\n    return jacobsthal_num($n-1) + 2 * jacobsthal_num($n-2);\n}"
  ]
}