{
  "name": "mbpp_388_highest_Power_of_2",
  "language": "pl",
  "prompt": "# Write a plthon function to find the highest power of 2 that is less than or equal to n.\nsub highest_Power_of_2 {\n    my($n) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_388_highest_Power_of_2.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&highest_Power_of_2;\n        if(eq_deeply($candidate->(10),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(19),16)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(32),32)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $i = 0;\n    while (2**$i <= $n) {\n        $i++;\n    }\n    return 2**($i-1);\n}",
    "    my $i = 0;\n    while(2**$i <= $n){\n        $i++;\n    }\n    return 2**($i-1);\n}",
    "    my $p = 1;\n    while($p < $n) {\n        $p *= 2;\n    }\n    return $p/2;\n}",
    "    my $i = 0;\n    while (2**$i <= $n) {\n        $i++;\n    }\n    return 2**($i-1);\n}",
    "    my $i = 0;\n    my $highest_power = 0;\n    while($i <= $n) {\n        $highest_power = $i;\n        $i = $i * 2;\n    }\n    return $highest_power;\n}",
    "    my $i = 0;\n    while(2**$i <= $n) {\n        $i++;\n    }\n    return 2**($i-1);\n}",
    "    my $x = 1;\n    while($x < $n) {\n        $x *= 2;\n    }\n    return $x;\n}",
    "    my $i = 0;\n    while(2**$i <= $n) {\n        $i++;\n    }\n    return 2**($i-1);\n}",
    "    my $i = 0;\n    while(2**$i <= $n) {\n        $i++;\n    }\n    return 2**($i-1);\n}",
    "    my $i = 0;\n    while(2**$i <= $n) {\n        $i++;\n    }\n    return 2**($i-1);\n}",
    "    my $i = 1;\n    while($i < $n) {\n        $i *= 2;\n    }\n    return $i;\n}",
    "    my $i = 0;\n    while(2**$i <= $n) {\n        $i++;\n    }\n    return 2**($i-1);\n}",
    "    my $i = 0;\n    while(2**$i <= $n) {\n        $i++;\n    }\n    return 2**($i-1);\n}",
    "    my $i = 0;\n    while(2**$i <= $n) {\n        $i++;\n    }\n    return 2**($i-1);\n}",
    "    my $i = 0;\n    while (2**$i <= $n) {\n        $i++;\n    }\n    return 2**($i-1);\n}",
    "    my $i = 0;\n    while(2**$i <= $n) {\n        $i++;\n    }\n    return 2**($i-1);\n}",
    "    my $p = 1;\n    while ($p <= $n) {\n        $p *= 2;\n    }\n    return $p / 2;\n}",
    "    my $p = 0;\n    while (1) {\n        if (2**$p <= $n) {\n            $p++;\n        } else {\n            return 2**($p-1);\n        }\n    }\n}",
    "    my $i = 0;\n    while(2**$i <= $n) {\n        $i++;\n    }\n    return 2**($i-1);\n}",
    "    my $i = 0;\n    my $j = 1;\n    while($j <= $n) {\n        $i++;\n        $j = $j * 2;\n    }\n    return $i - 1;\n}"
  ]
}