{
  "name": "mbpp_424_extract_rear",
  "language": "pl",
  "prompt": "# Write a function to extract only the rear index element of each string in the given array.\nsub extract_rear {\n    my($test_tuple) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_424_extract_rear.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&extract_rear;\n        if(eq_deeply($candidate->([\"Mers\", \"for\", \"Vers\"]),[\"s\", \"r\", \"s\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"Avenge\", \"for\", \"People\"]),[\"e\", \"r\", \"e\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"Gotta\", \"get\", \"go\"]),[\"a\", \"t\", \"o\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @test_array = @$test_tuple;\n    my @result;\n    foreach my $test_string (@test_array) {\n        my $rear_index = length($test_string) - 1;\n        my $rear_element = substr($test_string, $rear_index, 1);\n        push @result, $rear_element;\n    }\n    return \\@result;\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($test_index) = $test_tuple->[1];\n    my(@test_chars) = split(//, $test_string);\n    return $test_chars[$test_index];\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($test_index) = $test_tuple->[1];\n    my($test_length) = length($test_string);\n    my($test_rear_index) = $test_length - $test_index - 1;\n    my($test_rear_char) = substr($test_string, $test_rear_index, 1);\n    return $test_rear_char;\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($rear_index) = $test_string =~ /\\[(\\d+)\\]$/;\n    return $rear_index;\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($rear_index) = $test_string =~ /(.)$/;\n    return $rear_index;\n}",
    "    my @result;\n    foreach my $test (@$test_tuple) {\n        my $rear = $test;\n        $rear =~ s/^.*\\[//;\n        $rear =~ s/\\].*$//;\n        push @result, $rear;\n    }\n    return \\@result;\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($test_index) = $test_tuple->[1];\n    my($test_length) = length($test_string);\n    my($test_rear) = substr($test_string, $test_length - $test_index, 1);\n    return $test_rear;\n}",
    "    my($test_string, $rear_index) = @$test_tuple;\n    my $rear_element = substr($test_string, $rear_index, 1);\n    return $rear_element;\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($test_index) = $test_tuple->[1];\n    my($test_length) = length($test_string);\n    my($test_rear) = substr($test_string, $test_length - $test_index, 1);\n    return $test_rear;\n}",
    "    my @test_tuple = @$test_tuple;\n    my @result;\n    foreach my $test_tuple (@test_tuple) {\n        my @test_tuple = @$test_tuple;\n        my $result = $test_tuple[1];\n        push @result, $result;\n    }\n    return \\@result;\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($test_index) = $test_tuple->[1];\n    my($test_length) = length($test_string);\n    my($test_rear_index) = $test_length - $test_index;\n    return substr($test_string, $test_rear_index, 1);\n}",
    "    my @result;\n    foreach my $tuple (@{$test_tuple}) {\n        my $rear = $tuple->[-1];\n        push @result, $rear;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test (@$test_tuple) {\n        my $rear = $test;\n        $rear =~ s/^.*?\\[//;\n        $rear =~ s/\\].*$//;\n        push(@result, $rear);\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test_string (@$test_tuple) {\n        my $rear_index = $test_string =~ /\\[(\\d+)\\]$/;\n        push @result, $rear_index;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test_string (@$test_tuple) {\n        my $rear_index = length($test_string) - 1;\n        push @result, substr($test_string, $rear_index, 1);\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test_string (@$test_tuple) {\n        my $rear_index = $test_string =~ /\\[(\\d+)\\]/;\n        push @result, $rear_index;\n    }\n    return @result;\n}",
    "    my @result;\n    foreach my $string (@$test_tuple) {\n        my $rear_index = rindex($string, '[');\n        push @result, substr($string, $rear_index + 1, -1);\n    }\n    return \\@result;\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($test_index) = $test_tuple->[1];\n    my($test_length) = length($test_string);\n    my($test_rear_index) = $test_length - $test_index;\n    my($test_rear_element) = substr($test_string, $test_rear_index, 1);\n    return($test_rear_element);\n}",
    "    my @test_array = @$test_tuple;\n    my @result_array;\n    foreach my $test_string (@test_array) {\n        my $result_string = substr($test_string, -1);\n        push @result_array, $result_string;\n    }\n    return \\@result_array;\n}",
    "    my @rear_index = ();\n    foreach my $test_string (@$test_tuple) {\n        my $rear_index = substr($test_string, -1);\n        push @rear_index, $rear_index;\n    }\n    return \\@rear_index;\n}"
  ]
}