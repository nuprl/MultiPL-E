{
  "name": "mbpp_424_extract_rear",
  "language": "pl",
  "prompt": "# Write a function to extract only the rear index element of each string in the given array.\nsub extract_rear {\n    my($test_tuple) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_424_extract_rear.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&extract_rear;\n        if(eq_deeply($candidate->([\"Mers\", \"for\", \"Vers\"]),[\"s\", \"r\", \"s\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"Avenge\", \"for\", \"People\"]),[\"e\", \"r\", \"e\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"Gotta\", \"get\", \"go\"]),[\"a\", \"t\", \"o\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @test_array = @$test_tuple;\n    my @result;\n    foreach my $test_string (@test_array) {\n        my $rear_index = length($test_string) - 1;\n        my $rear_element = substr($test_string, $rear_index, 1);\n        push @result, $rear_element;\n    }\n    return \\@result;\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($test_index) = $test_tuple->[1];\n    my(@test_chars) = split(//, $test_string);\n    return $test_chars[$test_index];\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($test_index) = $test_tuple->[1];\n    my($test_length) = length($test_string);\n    my($test_rear_index) = $test_length - $test_index - 1;\n    my($test_rear_char) = substr($test_string, $test_rear_index, 1);\n    return $test_rear_char;\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($rear_index) = $test_string =~ /\\[(\\d+)\\]$/;\n    return $rear_index;\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($rear_index) = $test_string =~ /(.)$/;\n    return $rear_index;\n}",
    "    my @result;\n    foreach my $test (@$test_tuple) {\n        my $rear = $test;\n        $rear =~ s/^.*\\[//;\n        $rear =~ s/\\].*$//;\n        push @result, $rear;\n    }\n    return \\@result;\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($test_index) = $test_tuple->[1];\n    my($test_length) = length($test_string);\n    my($test_rear) = substr($test_string, $test_length - $test_index, 1);\n    return $test_rear;\n}",
    "    my($test_string, $rear_index) = @$test_tuple;\n    my $rear_element = substr($test_string, $rear_index, 1);\n    return $rear_element;\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($test_index) = $test_tuple->[1];\n    my($test_length) = length($test_string);\n    my($test_rear) = substr($test_string, $test_length - $test_index, 1);\n    return $test_rear;\n}",
    "    my @test_tuple = @$test_tuple;\n    my @result;\n    foreach my $test_tuple (@test_tuple) {\n        my @test_tuple = @$test_tuple;\n        my $result = $test_tuple[1];\n        push @result, $result;\n    }\n    return \\@result;\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($test_index) = $test_tuple->[1];\n    my($test_length) = length($test_string);\n    my($test_rear_index) = $test_length - $test_index;\n    return substr($test_string, $test_rear_index, 1);\n}",
    "    my @result;\n    foreach my $tuple (@{$test_tuple}) {\n        my $rear = $tuple->[-1];\n        push @result, $rear;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test (@$test_tuple) {\n        my $rear = $test;\n        $rear =~ s/^.*?\\[//;\n        $rear =~ s/\\].*$//;\n        push(@result, $rear);\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test_string (@$test_tuple) {\n        my $rear_index = $test_string =~ /\\[(\\d+)\\]$/;\n        push @result, $rear_index;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test_string (@$test_tuple) {\n        my $rear_index = length($test_string) - 1;\n        push @result, substr($test_string, $rear_index, 1);\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test_string (@$test_tuple) {\n        my $rear_index = $test_string =~ /\\[(\\d+)\\]/;\n        push @result, $rear_index;\n    }\n    return @result;\n}",
    "    my @result;\n    foreach my $string (@$test_tuple) {\n        my $rear_index = rindex($string, '[');\n        push @result, substr($string, $rear_index + 1, -1);\n    }\n    return \\@result;\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($test_index) = $test_tuple->[1];\n    my($test_length) = length($test_string);\n    my($test_rear_index) = $test_length - $test_index;\n    my($test_rear_element) = substr($test_string, $test_rear_index, 1);\n    return($test_rear_element);\n}",
    "    my @test_array = @$test_tuple;\n    my @result_array;\n    foreach my $test_string (@test_array) {\n        my $result_string = substr($test_string, -1);\n        push @result_array, $result_string;\n    }\n    return \\@result_array;\n}",
    "    my @rear_index = ();\n    foreach my $test_string (@$test_tuple) {\n        my $rear_index = substr($test_string, -1);\n        push @rear_index, $rear_index;\n    }\n    return \\@rear_index;\n}",
    "    my($test_string, $rear_index) = @$test_tuple;\n    return substr($test_string, $rear_index);\n}",
    "    my @result;\n    foreach my $test_string (@$test_tuple) {\n        my $rear_index = $test_string =~ /\\[(\\d+)\\]/;\n        push @result, $rear_index;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test (@$test_tuple) {\n        my $rear = $test;\n        $rear =~ s/^.*\\[//;\n        $rear =~ s/\\].*$//;\n        push @result, $rear;\n    }\n    return @result;\n}",
    "    my @result = ();\n    foreach my $test_case (@$test_tuple) {\n        my $rear_index = $test_case->[1];\n        push @result, $rear_index;\n    }\n    return \\@result;\n}",
    "    my @rear_indexes = ();\n    foreach my $test_string (@$test_tuple) {\n        my $rear_index = substr($test_string, -1);\n        push @rear_indexes, $rear_index;\n    }\n    return \\@rear_indexes;\n}",
    "    my @test_array = @$test_tuple;\n    my @result;\n    foreach my $test_string (@test_array) {\n        my $rear_index = index($test_string, ']');\n        push @result, substr($test_string, $rear_index + 1);\n    }\n    return @result;\n}",
    "    my @test_array = @{$test_tuple};\n    my @result_array = ();\n    foreach my $test_string (@test_array) {\n        my $result_string = substr($test_string, -1);\n        push(@result_array, $result_string);\n    }\n    return \\@result_array;\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($rear_index) = $test_string =~ /(.)$/;\n    return $rear_index;\n}",
    "    my @result;\n    foreach my $test_string (@$test_tuple) {\n        my $rear_index = length($test_string) - 1;\n        my $rear_element = substr($test_string, $rear_index, 1);\n        push @result, $rear_element;\n    }\n    return \\@result;\n}",
    "    my @test_array = @{$test_tuple};\n    my @result_array;\n    foreach my $test_string (@test_array) {\n        my $result_string = substr($test_string, -1, 1);\n        push(@result_array, $result_string);\n    }\n    return \\@result_array;\n}",
    "    my @result;\n    foreach my $test (@$test_tuple) {\n        my $rear = substr($test, -1);\n        push @result, $rear;\n    }\n    return \\@result;\n}",
    "    my(@test_tuple) = @$test_tuple;\n    my(@result);\n    foreach my $test_tuple (@test_tuple) {\n        my($test_string, $test_index) = @$test_tuple;\n        my($result) = substr($test_string, $test_index);\n        push(@result, $result);\n    }\n    return \\@result;\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($test_index) = $test_tuple->[1];\n    my($test_rear) = $test_string->[$test_index];\n    return $test_rear;\n}",
    "    my @result;\n    foreach my $test (@$test_tuple) {\n        my $rear = $test;\n        $rear =~ s/^.*\\[//;\n        $rear =~ s/\\].*$//;\n        push @result, $rear;\n    }\n    return \\@result;\n}",
    "    my @test_array = @$test_tuple;\n    my @result_array;\n    foreach my $test_string (@test_array) {\n        my $result_string = substr($test_string, -1);\n        push @result_array, $result_string;\n    }\n    return \\@result_array;\n}",
    "    my @result;\n    foreach my $item (@$test_tuple) {\n        push @result, $item->[1];\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test (@$test_tuple) {\n        my $rear = substr($test, -1);\n        push @result, $rear;\n    }\n    return @result;\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($test_index) = $test_tuple->[1];\n    my($test_length) = length($test_string);\n    my($test_rear_index) = $test_length - $test_index;\n    my($test_rear_element) = substr($test_string, $test_rear_index, 1);\n    return $test_rear_element;\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($test_index) = $test_tuple->[1];\n    my($test_length) = length($test_string);\n    my($test_rear_index) = $test_length - $test_index;\n    my($test_rear_element) = substr($test_string, $test_rear_index, 1);\n    return $test_rear_element;\n}",
    "    my @rear_indices = ();\n    foreach my $test_string (@$test_tuple) {\n        my $rear_index = substr($test_string, -1);\n        push @rear_indices, $rear_index;\n    }\n    return \\@rear_indices;\n}",
    "    my @result;\n    foreach my $tuple (@$test_tuple) {\n        my $rear = $tuple->[1];\n        push @result, $rear;\n    }\n    return \\@result;\n}",
    "    my @test_array = @$test_tuple;\n    my @result_array = ();\n    foreach my $test_string (@test_array) {\n        my $result_string = substr($test_string, -1);\n        push @result_array, $result_string;\n    }\n    return \\@result_array;\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($test_index) = $test_tuple->[1];\n    my($test_rear) = $test_string->[$test_index];\n    return($test_rear);\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($expected_result) = $test_tuple->[1];\n    my($actual_result) = $test_string =~ /(.)$/;\n    return $actual_result;\n}",
    "    my @result;\n    foreach my $test (@$test_tuple) {\n        my $rear = substr($test, -1);\n        push @result, $rear;\n    }\n    return @result;\n}",
    "    my($rear_index) = $test_tuple->[1];\n    return $rear_index;\n}",
    "    my @result;\n    foreach my $string (@$test_tuple) {\n        my $rear_index = $string =~ /\\[(\\d+)\\]/;\n        push @result, $rear_index;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $tuple (@$test_tuple) {\n        my $rear = $tuple->[1];\n        push @result, $rear;\n    }\n    return \\@result;\n}",
    "    my($test_array) = $test_tuple->[0];\n    my($expected_array) = $test_tuple->[1];\n    my($actual_array) = [map {substr($_, -1)} @$test_array];\n    is_deeply($actual_array, $expected_array, \"extract_rear\");\n}",
    "    my @result;\n    foreach my $test_string (@$test_tuple) {\n        my $rear_index = length($test_string) - 1;\n        push @result, substr($test_string, $rear_index, 1);\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test (@$test_tuple) {\n        my $rear = $test;\n        $rear =~ s/^.*\\[//;\n        $rear =~ s/\\].*$//;\n        push @result, $rear;\n    }\n    return \\@result;\n}",
    "    my @rear_indexes = ();\n    foreach my $string (@$test_tuple) {\n        my $rear_index = substr($string, -1);\n        push @rear_indexes, $rear_index;\n    }\n    return \\@rear_indexes;\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($test_index) = $test_tuple->[1];\n    my($test_length) = length($test_string);\n    my($test_rear) = substr($test_string, $test_length - $test_index, 1);\n    return $test_rear;\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($test_index) = $test_tuple->[1];\n    my($rear_index) = $test_index->[-1];\n    return $test_string->[$rear_index];\n}",
    "    my @result;\n    foreach my $test (@$test_tuple) {\n        my $rear = $test;\n        $rear =~ s/^.*\\[//;\n        $rear =~ s/\\].*$//;\n        push @result, $rear;\n    }\n    return \\@result;\n}",
    "    my @rear_indexes = ();\n    foreach my $test_string (@{$test_tuple}) {\n        push(@rear_indexes, substr($test_string, -1));\n    }\n    return @rear_indexes;\n}",
    "    my @rear_indexes = ();\n    foreach my $test_string (@$test_tuple) {\n        my $rear_index = substr($test_string, -1);\n        push @rear_indexes, $rear_index;\n    }\n    return @rear_indexes;\n}",
    "    my @result;\n    foreach my $tuple (@$test_tuple) {\n        push @result, $tuple->[1];\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $tuple (@$test_tuple) {\n        my $rear = $tuple->[1];\n        push @result, $rear;\n    }\n    return \\@result;\n}",
    "    my($test_string, $rear_index) = @$test_tuple;\n    my $rear_char = substr($test_string, $rear_index, 1);\n    return $rear_char;\n}",
    "    my @result;\n    foreach my $test (@$test_tuple) {\n        my $rear = $test;\n        $rear =~ s/^.*\\[//;\n        $rear =~ s/\\]$//;\n        push @result, $rear;\n    }\n    return \\@result;\n}",
    "    my($test_string, $rear_index) = @$test_tuple;\n    return substr($test_string, $rear_index);\n}",
    "    my @rear_indexes = map { $_->[1] } @$test_tuple;\n    return \\@rear_indexes;\n}",
    "    my @result = ();\n    foreach my $test_string (@{$test_tuple}) {\n        my $rear_index = $test_string =~ /\\[(\\d+)\\]$/;\n        push @result, $rear_index;\n    }\n    return @result;\n}",
    "    my @result;\n    foreach my $string (@$test_tuple) {\n        my $rear_index = $string =~ /\\[(\\d+)\\]$/ ? $1 : undef;\n        push @result, $rear_index;\n    }\n    return @result;\n}",
    "    my @result = ();\n    foreach my $str (@$test_tuple) {\n        my $rear = substr($str, -1);\n        push @result, $rear;\n    }\n    return \\@result;\n}",
    "    my @rear_index = map {$_ =~ /\\[(\\d+)\\]/} @$test_tuple;\n    return \\@rear_index;\n}",
    "    my @result;\n    foreach my $str (@$test_tuple) {\n        push @result, substr($str, -1);\n    }\n    return \\@result;\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($test_index) = $test_tuple->[1];\n    my($test_length) = length($test_string);\n    my($test_rear) = substr($test_string, $test_length - $test_index, 1);\n    return $test_rear;\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($test_index) = $test_tuple->[1];\n    my($test_length) = length($test_string);\n    my($test_rear_index) = $test_length - $test_index;\n    my($test_rear_element) = substr($test_string, $test_rear_index, 1);\n    return($test_rear_element);\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($test_index) = $test_tuple->[1];\n    my($test_length) = $test_tuple->[2];\n    my($test_rear) = $test_string->[$test_length - $test_index];\n    return $test_rear;\n}",
    "    my @rear_indexes = map {\n        my $str = $_;\n        my $rear_index = rindex($str, ',');\n        $rear_index = length($str) if $rear_index == -1;\n        $rear_index;\n    } @$test_tuple;\n    return \\@rear_indexes;\n}",
    "    my @result;\n    foreach my $test (@$test_tuple) {\n        my $rear = substr($test, -1);\n        push @result, $rear;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $tuple (@$test_tuple) {\n        my $rear = $tuple->[1];\n        push @result, $rear;\n    }\n    return \\@result;\n}",
    "    my @test_tuple = @$test_tuple;\n    my @rear_index;\n    foreach my $string (@test_tuple) {\n        my @string = split(//, $string);\n        push @rear_index, $string[-1];\n    }\n    return \\@rear_index;\n}",
    "    my @test_array = @$test_tuple;\n    my @result;\n    foreach my $test_string (@test_array) {\n        my $rear_index = length($test_string) - 1;\n        my $rear_element = substr($test_string, $rear_index, 1);\n        push @result, $rear_element;\n    }\n    return \\@result;\n}",
    "    my @test_array = @$test_tuple;\n    my @result;\n    foreach my $string (@test_array) {\n        push @result, substr($string, -1);\n    }\n    return @result;\n}",
    "    my @result;\n    foreach my $str (@{$test_tuple}) {\n        my $rear = substr($str, -1);\n        push @result, $rear;\n    }\n    return @result;\n}",
    "    my @test_array = @$test_tuple;\n    my @result;\n    foreach my $test_string (@test_array) {\n        my $result_string = substr($test_string, -1);\n        push @result, $result_string;\n    }\n    return \\@result;\n}",
    "    my @rear_indexes;\n    foreach my $string (@{$test_tuple}) {\n        push @rear_indexes, substr($string, -1);\n    }\n    return @rear_indexes;\n}",
    "    my @result;\n    foreach my $test (@$test_tuple) {\n        my $rear = $test;\n        $rear =~ s/^.*\\[//;\n        $rear =~ s/\\].*$//;\n        push @result, $rear;\n    }\n    return \\@result;\n}",
    "    my @test_array = @{$test_tuple};\n    my @result_array;\n    foreach my $test_string (@test_array) {\n        my $result_string = substr($test_string, -1, 1);\n        push(@result_array, $result_string);\n    }\n    return \\@result_array;\n}",
    "    my($test_array) = $test_tuple->[0];\n    my($expected) = $test_tuple->[1];\n    my($result) = [ map { $_->[-1] } @$test_array ];\n    is_deeply($result, $expected, \"extract_rear\");\n}",
    "    my @result;\n    foreach my $test (@$test_tuple) {\n        my $rear = substr($test, -1);\n        push @result, $rear;\n    }\n    return \\@result;\n}",
    "    my @test_array = @{$test_tuple};\n    my @result_array;\n    foreach my $test_string (@test_array) {\n        my @test_string_array = split(//, $test_string);\n        my $test_string_length = scalar(@test_string_array);\n        my $test_string_rear_index = $test_string_length - 1;\n        my $test_string_rear_element = $test_string_array[$test_string_rear_index];\n        push(@result_array, $test_string_rear_element);\n    }\n    return @result_array;\n}",
    "    my @result;\n    foreach my $tuple (@$test_tuple) {\n        my $rear = $tuple->[1];\n        push @result, $rear;\n    }\n    return \\@result;\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($test_index) = $test_tuple->[1];\n    my($test_length) = length($test_string);\n    my($test_rear_index) = $test_length - $test_index;\n    return(substr($test_string, $test_rear_index, 1));\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($test_index) = $test_tuple->[1];\n    my($test_length) = length($test_string);\n    my($test_rear_index) = $test_length - $test_index - 1;\n    return substr($test_string, $test_rear_index, 1);\n}",
    "    my @rear_indexes = map {\n        my $string = $_;\n        my $rear_index = $string =~ /(?<=\\[)(\\d+)(?=\\])/;\n        $rear_index;\n    } @$test_tuple;\n    return \\@rear_indexes;\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($test_index) = $test_tuple->[1];\n    my($test_length) = length($test_string);\n    my($test_rear) = substr($test_string, $test_length - $test_index, $test_index);\n    return $test_rear;\n}",
    "    my @result;\n    foreach my $test (@$test_tuple) {\n        my $rear_index = rindex($test, '_');\n        push @result, substr($test, $rear_index + 1);\n    }\n    return @result;\n}",
    "    my @rear_indexes = map { $_ =~ /\\d+$/ } @$test_tuple;\n    return \\@rear_indexes;\n}",
    "    my @result = ();\n    foreach my $test (@{$test_tuple}) {\n        my $rear = substr($test, -1);\n        push @result, $rear;\n    }\n    return @result;\n}",
    "    my($test_string, $test_index) = @$test_tuple;\n    return $test_index->[-1];\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($rear_index) = $test_string =~ /(.)$/;\n    return $rear_index;\n}",
    "    my @test_array = @$test_tuple;\n    my @result;\n    foreach my $item (@test_array) {\n        push @result, substr($item, -1);\n    }\n    return \\@result;\n}",
    "    my($test_array) = $test_tuple->[0];\n    my($expected) = $test_tuple->[1];\n    my($result) = [];\n    foreach my $str (@$test_array) {\n        my($rear) = $str->[-1];\n        push @$result, $rear;\n    }\n    is_deeply($result, $expected, \"extract_rear\");\n}",
    "    my($test_array, $expected_array) = @$test_tuple;\n    my($actual_array) = [map {substr($_, -1)} @$test_array];\n    is_deeply($actual_array, $expected_array, 'extract_rear');\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($test_index) = $test_tuple->[1];\n    my($test_rear) = substr($test_string, $test_index, 1);\n    return $test_rear;\n}",
    "    my @test_tuple = @$test_tuple;\n    my @result;\n    foreach my $test_tuple (@test_tuple) {\n        my @test_tuple = @$test_tuple;\n        my $result = $test_tuple[1];\n        push @result, $result;\n    }\n    return \\@result;\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($test_index) = $test_tuple->[1];\n    my($test_length) = length($test_string);\n    my($test_rear_index) = $test_length - $test_index - 1;\n    return substr($test_string, $test_rear_index, 1);\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($test_index) = $test_tuple->[1];\n    my($test_length) = length($test_string);\n    my($test_rear) = substr($test_string, $test_length - $test_index, $test_index);\n    return $test_rear;\n}",
    "    my($test_string, $test_index) = @$test_tuple;\n    return $test_index;\n}",
    "    my @test_array = @$test_tuple;\n    my @result = ();\n    foreach my $test_string (@test_array) {\n        my $rear_index = rindex($test_string, '[');\n        my $rear_element = substr($test_string, $rear_index + 1, -1);\n        push @result, $rear_element;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test_string (@$test_tuple) {\n        my $rear_index = $test_string =~ /\\[(\\d+)\\]$/ ? $1 : undef;\n        push @result, $rear_index;\n    }\n    return @result;\n}",
    "    my @result;\n    foreach my $test (@{$test_tuple}) {\n        push @result, $test->[-1];\n    }\n    return \\@result;\n}",
    "    my @rear_indexes = ();\n    foreach my $test_string (@$test_tuple) {\n        my $rear_index = substr($test_string, -1);\n        push @rear_indexes, $rear_index;\n    }\n    return \\@rear_indexes;\n}",
    "    my @result;\n    foreach my $test (@$test_tuple) {\n        my $rear = $test;\n        $rear =~ s/^.*\\[//;\n        $rear =~ s/\\].*$//;\n        push @result, $rear;\n    }\n    return @result;\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($test_index) = $test_tuple->[1];\n    return substr($test_string, $test_index, 1);\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($test_index) = $test_tuple->[1];\n    my($test_rear) = substr($test_string, $test_index);\n    return $test_rear;\n}",
    "    my @result;\n    foreach my $tuple (@$test_tuple) {\n        my $rear = $tuple->[1];\n        push @result, $rear;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test_string (@$test_tuple) {\n        my $rear_index = $test_string =~ /\\[(\\d+)\\]$/;\n        push @result, $rear_index;\n    }\n    return \\@result;\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($test_index) = $test_tuple->[1];\n    my($test_length) = length($test_string);\n    my($test_rear_index) = $test_length - $test_index - 1;\n    my($test_rear_char) = substr($test_string, $test_rear_index, 1);\n    return $test_rear_char;\n}",
    "    my @result;\n    foreach my $str (@$test_tuple) {\n        $str =~ /(\\d+)$/;\n        push @result, $1;\n    }\n    return \\@result;\n}",
    "    my($test_string, $expected_result) = @$test_tuple;\n    my($result) = extract_rear_index_element($test_string);\n    is($result, $expected_result, \"extract_rear_index_element($test_string)\");\n}",
    "    my @result;\n    foreach my $test (@$test_tuple) {\n        my $rear = $test;\n        $rear =~ s/^.*\\[//;\n        $rear =~ s/\\].*$//;\n        push @result, $rear;\n    }\n    return @result;\n}",
    "\n    my @rear_indices = ();\n    foreach my $test_string (@$test_tuple) {\n        my $rear_index = substr($test_string, -1);\n        push @rear_indices, $rear_index;\n    }",
    "    my($test_string) = $test_tuple->[0];\n    my($test_index) = $test_tuple->[1];\n    my($test_length) = length($test_string);\n    my($test_rear_index) = $test_length - $test_index - 1;\n    return substr($test_string, $test_rear_index, 1);\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($test_index) = $test_tuple->[1];\n    my($test_length) = length($test_string);\n    my($test_rear_index) = $test_length - $test_index - 1;\n    return substr($test_string, $test_rear_index, 1);\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($rear_index) = $test_tuple->[1];\n    my($rear_element) = substr($test_string, $rear_index, 1);\n    return $rear_element;\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($test_index) = $test_tuple->[1];\n    my($test_length) = length($test_string);\n    my($test_rear_index) = $test_length - $test_index;\n    return substr($test_string, $test_rear_index, 1);\n}",
    "    my @result;\n    foreach my $string (@$test_tuple) {\n        push @result, substr($string, -1);\n    }\n    return \\@result;\n}",
    "    my @test_array = @$test_tuple;\n    my @result_array;\n    foreach my $test_string (@test_array) {\n        my @test_string_array = split(//, $test_string);\n        my $rear_index = $#test_string_array;\n        my $rear_element = $test_string_array[$rear_index];\n        push(@result_array, $rear_element);\n    }\n    return @result_array;\n}",
    "    my($test_array) = $test_tuple->[0];\n    my($expected) = $test_tuple->[1];\n    my(@result) = ();\n    foreach my $test_string (@$test_array) {\n        push @result, substr($test_string, -1);\n    }\n    is_deeply(\\@result, $expected, \"extract_rear\");\n}",
    "    my @result;\n    foreach my $tuple (@$test_tuple) {\n        push @result, $tuple->[1];\n    }\n    return \\@result;\n}",
    "    my @test_array = @$test_tuple;\n    my @result;\n    for my $test_string (@test_array) {\n        my $rear_index = rindex($test_string, '[');\n        my $rear_element = substr($test_string, $rear_index + 1, -1);\n        push @result, $rear_element;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test (@$test_tuple) {\n        my $rear = $test;\n        $rear =~ s/^.*\\[//;\n        $rear =~ s/\\].*$//;\n        push(@result, $rear);\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $tuple (@$test_tuple) {\n        my($string, $rear) = @$tuple;\n        push @result, $rear;\n    }\n    return @result;\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($test_index) = $test_tuple->[1];\n    my($test_result) = $test_tuple->[2];\n    my($test_rear_index) = $test_index->[1];\n    my($test_rear_result) = $test_result->[1];\n    return [$test_string, $test_rear_index, $test_rear_result];\n}",
    "    my @rear_indices = ();\n    foreach my $string (@$test_tuple) {\n        my $rear_index = substr($string, -1);\n        push @rear_indices, $rear_index;\n    }\n    return \\@rear_indices;\n}",
    "    my @result = ();\n    foreach my $test_string (@$test_tuple) {\n        my $rear_index = length($test_string) - 1;\n        my $rear_element = substr($test_string, $rear_index, 1);\n        push @result, $rear_element;\n    }\n    return @result;\n}",
    "    my @rear_indexes = ();\n    foreach my $test_string (@$test_tuple) {\n        my $rear_index = substr($test_string, -1);\n        push @rear_indexes, $rear_index;\n    }\n    return \\@rear_indexes;\n}",
    "    my @result;\n    foreach my $test (@$test_tuple) {\n        my $rear_index = $test->[1];\n        push @result, $rear_index;\n    }\n    return \\@result;\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($test_index) = $test_tuple->[1];\n    my($test_length) = $test_tuple->[2];\n    my($test_rear) = $test_tuple->[3];\n    my($test_rear_index) = $test_tuple->[4];\n    my($test_rear_length) = $test_tuple->[5];\n    my($test_rear_rear) = $test_tuple->[6];\n    my($test_rear_rear_index) = $test_tuple->[7];\n    my($test_rear_rear_length) = $test_tuple->[8];\n    my($test_rear_rear_rear) = $test_tuple->[9];\n    my($test_rear_rear_rear_index) = $test_tuple->[10];\n    my($test_rear_rear_rear_length) = $test_tuple->[11];\n    my($test_rear_rear_rear_rear) = $test_tuple->[12];\n    my($test_rear_rear_rear_rear_index) = $test_tuple->[13];\n    my($test_rear_rear_rear_rear_length) = $test_tuple->[14];\n    my($test_rear_rear_rear_rear_rear) = $test_tuple->[15];\n    my($test_rear_rear_rear_rear_rear_index) = $test_tuple->[16];\n    my($test_rear_rear_rear_rear_rear_length) = $test_tuple->[17];\n    my($test_rear_rear_rear_rear_rear_rear) = $test_tuple->[18];\n    my($test_rear_rear_rear_rear_rear_rear_index) = $test",
    "    my @test_array = @$test_tuple;\n    my @result_array = ();\n    foreach my $test_string (@test_array) {\n        my $result_string = substr($test_string, -1);\n        push @result_array, $result_string;\n    }\n    return \\@result_array;\n}",
    "    my($test_string, $rear_index) = @$test_tuple;\n    return substr($test_string, $rear_index);\n}",
    "    my @result;\n    foreach my $test_string (@$test_tuple) {\n        my $rear_index = $test_string =~ /\\[(\\d+)\\]$/;\n        push @result, $rear_index;\n    }\n    return @result;\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($test_index) = $test_tuple->[1];\n    my($rear_index) = $test_index->[-1];\n    return substr($test_string, $rear_index, 1);\n}",
    "    my($test_string, $rear_index) = @$test_tuple;\n    return substr($test_string, $rear_index, 1);\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($test_index) = $test_tuple->[1];\n    my($test_rear) = $test_string->[$test_index];\n    return $test_rear;\n}",
    "    my @result;\n    foreach my $test (@$test_tuple) {\n        my $rear = substr($test, rindex($test, '-') + 1);\n        push @result, $rear;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test (@$test_tuple) {\n        my $rear = substr($test, -1);\n        push @result, $rear;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test (@$test_tuple) {\n        my $rear = substr($test, -1);\n        push @result, $rear;\n    }\n    return \\@result;\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($test_index) = $test_tuple->[1];\n    my($test_rear_index) = $test_index->[-1];\n    return $test_string->[$test_rear_index];\n}",
    "    my($rear_index) = $test_tuple->[1];\n    return $rear_index;\n}",
    "    my(@test_tuple) = @$test_tuple;\n    my(@result);\n    foreach my $test_tuple (@test_tuple) {\n        my($test_string, $test_rear) = @$test_tuple;\n        push(@result, $test_rear);\n    }\n    return \\@result;\n}",
    "    my @rear_index_elements = ();\n    foreach my $string (@$test_tuple) {\n        my $rear_index_element = substr($string, -1);\n        push @rear_index_elements, $rear_index_element;\n    }\n    return \\@rear_index_elements;\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($test_rear) = $test_string;\n    $test_rear =~ s/^.*\\[//;\n    $test_rear =~ s/\\].*$//;\n    return $test_rear;\n}",
    "    my @result;\n    foreach my $test_string (@$test_tuple) {\n        my $rear = $test_string;\n        $rear =~ s/^.*\\[//;\n        $rear =~ s/\\].*$//;\n        push @result, $rear;\n    }\n    return @result;\n}",
    "    my @test_array = @{$test_tuple};\n    my @result_array;\n    foreach my $test_string (@test_array) {\n        my @test_string_array = split(/\\s+/, $test_string);\n        push(@result_array, $test_string_array[-1]);\n    }\n    return @result_array;\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($test_index) = $test_tuple->[1];\n    my($test_rear) = substr($test_string, $test_index);\n    return $test_rear;\n}",
    "    my @rear_index_elements;\n    foreach my $string (@$test_tuple) {\n        my $rear_index_element = substr($string, -1);\n        push @rear_index_elements, $rear_index_element;\n    }\n    return @rear_index_elements;\n}",
    "    my @result;\n    foreach my $tuple (@$test_tuple) {\n        my @tuple = @$tuple;\n        push @result, $tuple[-1];\n    }\n    return \\@result;\n}",
    "    my @result = ();\n    foreach my $test (@$test_tuple) {\n        my $rear = substr($test, -1);\n        push @result, $rear;\n    }\n    return @result;\n}",
    "    my @result;\n    foreach my $tuple (@$test_tuple) {\n        my $rear = $tuple->[1];\n        push @result, $rear;\n    }\n    return \\@result;\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($rear_index) = $test_string =~ /(\\d+)$/;\n    return $rear_index;\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($test_index) = $test_tuple->[1];\n    my($test_length) = length($test_string);\n    my($test_rear) = substr($test_string, $test_length - $test_index, $test_index);\n    return $test_rear;\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($test_index) = $test_tuple->[1];\n    my($test_rear) = $test_string->[$test_index];\n    return $test_rear;\n}",
    "    my @test_array = @$test_tuple;\n    my @result_array;\n    foreach my $test_string (@test_array) {\n        my $result_string = substr($test_string, -1);\n        push @result_array, $result_string;\n    }\n    return \\@result_array;\n}",
    "    my @test_array = @$test_tuple;\n    my @result_array;\n    foreach my $test_string (@test_array) {\n        my $result_string = substr($test_string, -1);\n        push @result_array, $result_string;\n    }\n    return \\@result_array;\n}",
    "    my @result;\n    foreach my $test_string (@$test_tuple) {\n        my $rear_index = $test_string =~ /\\[(\\d+)\\]/;\n        push @result, $rear_index;\n    }\n    return \\@result;\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($test_index) = $test_tuple->[1];\n    my($test_length) = length($test_string);\n    my($test_rear_index) = $test_length - $test_index - 1;\n    return substr($test_string, $test_rear_index, 1);\n}",
    "    my @result;\n    foreach my $tuple (@$test_tuple) {\n        my($input, $expected) = @$tuple;\n        my $actual = extract_rear($input);\n        push @result, [$input, $expected, $actual];\n    }\n    return @result;\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($test_index) = $test_tuple->[1];\n    my($test_length) = length($test_string);\n    my($test_rear_index) = $test_length - $test_index;\n    my($test_rear_element) = substr($test_string, $test_rear_index, 1);\n    return($test_rear_element);\n}",
    "    my($test_string, $rear_index) = @$test_tuple;\n    return substr($test_string, $rear_index);\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($test_index) = $test_tuple->[1];\n    my($test_rear_index) = $test_index->[-1];\n    return $test_string->[$test_rear_index];\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($test_index) = $test_tuple->[1];\n    return $test_string->[$test_index];\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($test_index) = $test_tuple->[1];\n    my($test_rear) = $test_string->[$test_index];\n    return $test_rear;\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($test_index) = $test_tuple->[1];\n    my($test_length) = length($test_string);\n    my($test_rear_index) = $test_length - $test_index;\n    return(substr($test_string, $test_rear_index, 1));\n}",
    "    my @rear_indexes = map { $_ =~ /\\[(\\d+)\\]/; $1 } @$test_tuple;\n    return \\@rear_indexes;\n}",
    "    my @result;\n    foreach my $test (@$test_tuple) {\n        my $rear = substr($test, -1);\n        push @result, $rear;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $tuple (@$test_tuple) {\n        my $rear = $tuple->[1];\n        push @result, $rear;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $tuple (@$test_tuple) {\n        my @tuple = @$tuple;\n        my $rear = pop @tuple;\n        push @result, $rear;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test (@$test_tuple) {\n        my $rear = substr($test, -1);\n        push @result, $rear;\n    }\n    return \\@result;\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($test_index) = $test_tuple->[1];\n    my($test_length) = $test_tuple->[2];\n    my($test_result) = $test_tuple->[3];\n    my($test_rear) = $test_tuple->[4];\n    my($test_rear_index) = $test_tuple->[5];\n    my($test_rear_length) = $test_tuple->[6];\n    my($test_rear_result) = $test_tuple->[7];\n    my($test_rear_rear) = $test_tuple->[8];\n    my($test_rear_rear_index) = $test_tuple->[9];\n    my($test_rear_rear_length) = $test_tuple->[10];\n    my($test_rear_rear_result) = $test_tuple->[11];\n    my($test_rear_rear_rear) = $test_tuple->[12];\n    my($test_rear_rear_rear_index) = $test_tuple->[13];\n    my($test_rear_rear_rear_length) = $test_tuple->[14];\n    my($test_rear_rear_rear_result) = $test_tuple->[15];\n    my($test_rear_rear_rear_rear) = $test_tuple->[16];\n    my($test_rear_rear_rear_rear_index) = $test_tuple->[17];\n    my($test_rear_rear_rear_rear_length) = $test_tuple->[18];\n    my($test_rear_rear_rear_rear_result) = $test_tuple->[19];\n    my($test_rear_rear_rear_rear_rear) = $test_tuple->[20];\n    my($test_rear_",
    "    my @test_array = @{$test_tuple};\n    my @result = ();\n    foreach my $test_string (@test_array) {\n        my @test_string_array = split(/\\s+/, $test_string);\n        push(@result, $test_string_array[-1]);\n    }\n    return @result;\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($rear_index) = $test_tuple->[1];\n    my($rear_element) = substr($test_string, $rear_index, 1);\n    return $rear_element;\n}",
    "    my @test_array = @$test_tuple;\n    my @result_array;\n    foreach my $test_string (@test_array) {\n        my $result_string = substr($test_string, -1);\n        push(@result_array, $result_string);\n    }\n    return @result_array;\n}",
    "    my @rear_index_elements;\n    for my $string (@$test_tuple) {\n        my $rear_index_element = substr($string, -1);\n        push @rear_index_elements, $rear_index_element;\n    }\n    return \\@rear_index_elements;\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($test_index) = $test_tuple->[1];\n    return(substr($test_string, $test_index));\n}",
    "    my @result;\n    foreach my $test (@$test_tuple) {\n        my $rear = $test;\n        $rear =~ s/^.*\\[//;\n        $rear =~ s/\\]$//;\n        push @result, $rear;\n    }\n    return \\@result;\n}",
    "    my @result = map {\n        my $str = $_;\n        my $i = rindex($str, ',');\n        substr($str, $i + 1);\n    } @$test_tuple;\n    return @result;\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($test_index) = $test_tuple->[1];\n    my($test_length) = length($test_string);\n    my($test_rear) = $test_string;\n    if ($test_length > $test_index) {\n        $test_rear = substr($test_string, $test_index);\n    }\n    return $test_rear;\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($test_index) = $test_tuple->[1];\n    my($test_length) = length($test_string);\n    my($test_rear) = substr($test_string, $test_length - $test_index, $test_index);\n    return $test_rear;\n}",
    "    my($test_string, $rear_index) = @$test_tuple;\n    my $rear_element = substr($test_string, $rear_index, 1);\n    return $rear_element;\n}",
    "    my @result;\n    foreach my $tuple (@$test_tuple) {\n        my $rear = $tuple->[1];\n        push @result, $rear;\n    }\n    return \\@result;\n}",
    "    my @rear_index_elements;\n    foreach my $string (@{$test_tuple}) {\n        my $rear_index_element = substr($string, -1);\n        push @rear_index_elements, $rear_index_element;\n    }\n    return \\@rear_index_elements;\n}",
    "    my($test_string, $rear_index) = @$test_tuple;\n    my $rear_element = substr($test_string, $rear_index, 1);\n    return $rear_element;\n}",
    "    my @rear_indices = ();\n    for my $tuple (@$test_tuple) {\n        push @rear_indices, $tuple->[1];\n    }\n    return \\@rear_indices;\n}",
    "    my @result = ();\n    foreach my $test_string (@{$test_tuple}) {\n        my $rear_index = substr($test_string, -1);\n        push @result, $rear_index;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $tuple (@$test_tuple) {\n        push @result, $tuple->[1];\n    }\n    return \\@result;\n}",
    "    my @test_array = @$test_tuple;\n    my @result;\n    foreach my $test_string (@test_array) {\n        my $rear_index = length($test_string) - 1;\n        my $rear_element = substr($test_string, $rear_index, 1);\n        push @result, $rear_element;\n    }\n    return @result;\n}",
    "    my @result;\n    foreach my $item (@$test_tuple) {\n        my $rear_index = $item =~ /\\[(\\d+)\\]/;\n        push @result, $rear_index;\n    }\n    return @result;\n}",
    "    my @result;\n    foreach my $test (@$test_tuple) {\n        my $rear = substr($test, -1);\n        push @result, $rear;\n    }\n    return \\@result;\n}",
    "    my($test_string) = $test_tuple->[0];\n    my($rear_index) = $test_tuple->[1];\n    my($rear_element) = substr($test_string, $rear_index, 1);\n    return($rear_element);\n}",
    "    my($test_string, $expected_result) = @$test_tuple;\n    my($result) = extract_rear_index($test_string);\n    return $result eq $expected_result;\n}",
    "    my @test_array = @$test_tuple;\n    my @result;\n    foreach my $test_string (@test_array) {\n        my $rear_index = length($test_string) - 1;\n        push @result, substr($test_string, $rear_index, 1);\n    }\n    return @result;\n}",
    "    my @test_array = @{$test_tuple};\n    my @result_array;\n    my $test_string;\n    my $test_length;\n    my $test_rear;\n    foreach $test_string (@test_array) {\n        $test_length = length($test_string);\n        $test_rear = substr($test_string, $test_length - 1, 1);\n        push(@result_array, $test_rear);\n    }\n    return @result_array;\n}",
    "    my @result;\n    foreach my $test_string (@$test_tuple) {\n        my $rear_index = $test_string =~ /\\[(\\d+)\\]$/ ? $1 : undef;\n        push @result, $rear_index;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $tuple (@$test_tuple) {\n        my $rear = $tuple->[1];\n        push @result, $rear;\n    }\n    return \\@result;\n}"
  ]
}