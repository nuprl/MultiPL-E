{
  "name": "mbpp_95_Find_Min_Length",
  "language": "pl",
  "prompt": "# Write a plthon function to find the length of the smallest array in an array of arrays.\nsub Find_Min_Length {\n    my($lst) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_95_Find_Min_Length.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Find_Min_Length;\n        if(eq_deeply($candidate->([[1], [1, 2]]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 3, 3], [4, 4, 4, 4]]),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $min_len = scalar(@{$lst->[0]});\n    for my $i (1..$#{$lst}) {\n        if (scalar(@{$lst->[$i]}) < $min_len) {\n            $min_len = scalar(@{$lst->[$i]});\n        }\n    }\n    return $min_len;\n}",
    "    my $min = $lst->[0]->[0];\n    for my $i (0..$#$lst) {\n        for my $j (0..$#{$lst->[$i]}) {\n            if ($lst->[$i]->[$j] < $min) {\n                $min = $lst->[$i]->[$j];\n            }\n        }\n    }\n    return $min;\n}",
    "    my $min = length($lst->[0]);\n    for my $i (1 .. $#$lst) {\n        my $len = length($lst->[$i]);\n        $min = $len if $len < $min;\n    }\n    return $min;\n}",
    "    my $min = scalar @{$lst->[0]};\n    for my $i (1..$#$lst) {\n        my $len = scalar @{$lst->[$i]};\n        $min = $len if $len < $min;\n    }\n    return $min;\n}",
    "    my $min_length = length($lst->[0]);\n    for my $i (1..$#$lst) {\n        my $len = length($lst->[$i]);\n        $min_length = $len if $len < $min_length;\n    }\n    return $min_length;\n}",
    "    my $min = $lst->[0]->[0];\n    foreach my $i (@$lst) {\n        foreach my $j (@$i) {\n            if ($j < $min) {\n                $min = $j;\n            }\n        }\n    }\n    return $min;\n}",
    "    my $min_length = length($lst->[0]);\n    foreach my $item (@$lst) {\n        if (length($item) < $min_length) {\n            $min_length = length($item);\n        }\n    }\n    return $min_length;\n}",
    "    my $min = $lst->[0]->[0];\n    foreach my $i (@$lst) {\n        foreach my $j (@$i) {\n            if ($j < $min) {\n                $min = $j;\n            }\n        }\n    }\n    return $min;\n}",
    "    my $min = $lst->[0]->[0];\n    foreach my $i (@$lst) {\n        foreach my $j (@$i) {\n            if ($j < $min) {\n                $min = $j;\n            }\n        }\n    }\n    return $min;\n}",
    "    my $min = $lst->[0]->[0];\n    foreach my $i (@$lst) {\n        if (scalar(@$i) < $min) {\n            $min = scalar(@$i);\n        }\n    }\n    return $min;\n}",
    "    my $min = @{$lst->[0]};\n    for my $i (1..$#$lst) {\n        my $len = @{$lst->[$i]};\n        $min = $len if $len < $min;\n    }\n    return $min;\n}",
    "    my $min = $lst->[0]->[0];\n    for my $i (0 .. $#$lst) {\n        for my $j (0 .. $#{$lst->[$i]}) {\n            if ($lst->[$i]->[$j] < $min) {\n                $min = $lst->[$i]->[$j];\n            }\n        }\n    }\n    return $min;\n}",
    "    my $min_length = length($lst->[0]);\n    foreach my $item (@$lst) {\n        my $length = length($item);\n        if ($length < $min_length) {\n            $min_length = $length;\n        }\n    }\n    return $min_length;\n}",
    "    my $min = $lst->[0]->[0];\n    foreach my $i (@$lst) {\n        foreach my $j (@$i) {\n            if ($j < $min) {\n                $min = $j;\n            }\n        }\n    }\n    return $min;\n}",
    "    my($min) = $lst->[0]->[0];\n    foreach my $i (@$lst) {\n        if(scalar(@$i) < $min) {\n            $min = scalar(@$i);\n        }\n    }\n    return $min;\n}",
    "    my $min = scalar(@{$lst->[0]});\n    for my $i (1..$#{$lst}) {\n        my $len = scalar(@{$lst->[$i]});\n        if ($len < $min) {\n            $min = $len;\n        }\n    }\n    return $min;\n}",
    "    my $min = scalar(@{$lst->[0]});\n    foreach my $i (1..$#{$lst}) {\n        my $len = scalar(@{$lst->[$i]});\n        if ($len < $min) {\n            $min = $len;\n        }\n    }\n    return $min;\n}",
    "    my $min_length = length($lst->[0]);\n    foreach my $item (@$lst) {\n        my $length = length($item);\n        if ($length < $min_length) {\n            $min_length = $length;\n        }\n    }\n    return $min_length;\n}",
    "    my $min = $lst->[0]->[0];\n    foreach my $i (@$lst) {\n        foreach my $j (@$i) {\n            if ($j < $min) {\n                $min = $j;\n            }\n        }\n    }\n    return $min;\n}",
    "    my $min = $lst->[0];\n    foreach my $i (@$lst) {\n        if(scalar(@$i) < scalar(@$min)) {\n            $min = $i;\n        }\n    }\n    return scalar(@$min);\n}"
  ]
}