{
  "name": "mbpp_622_get_median",
  "language": "pl",
  "prompt": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_622_get_median.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}",
    "    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}",
    "    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}",
    "    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}",
    "    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;",
    "    my $m1 = -1;\n    my $m2 = -1;\n    my $i = 0;\n    my $j = 0;\n    for (my $count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}",
    "    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;",
    "    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;",
    "    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;",
    "    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;",
    "    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;",
    "    my $m1 = -1;\n    my $m2 = -1;\n    my $i = 0;\n    my $j = 0;\n    for (my $count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}",
    "    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}",
    "    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n        elsif ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        }\n        elsif ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        }\n        else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}",
    "    my $m1 = 0;\n    my $m2 = 0;\n    my $i = 0;\n    my $j = 0;\n    my $count = 0;\n    while ($count < $n) {\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n        $count++;\n    }\n    return ($m1 + $m2) / 2;\n}",
    "    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;",
    "    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;",
    "    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;",
    "    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;",
    "    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;"
  ]
}