{
  "name": "mbpp_445_index_multiplication",
  "language": "pl",
  "prompt": "# Write a function to perform index wise multiplication of array elements in the given two arrays.\nsub index_multiplication {\n    my($test_tup1, $test_tup2) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_445_index_multiplication.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&index_multiplication;\n        if(eq_deeply($candidate->([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[6, 21], [12, 45], [2, 9], [7, 30]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[14, 32], [20, 60], [6, 20], [16, 44]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[24, 45], [30, 77], [12, 33], [27, 60]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @test_tup1 = @{$test_tup1};\n    my @test_tup2 = @{$test_tup2};\n    my @result;\n    for my $i (0..$#test_tup1) {\n        push @result, $test_tup1[$i] * $test_tup2[$i];\n    }\n    return @result;\n}",
    "    my @result;\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push @result, $test_tup1->[$i] * $test_tup2->[$i];\n    }\n    return @result;\n}",
    "    my @test_tup1 = @$test_tup1;\n    my @test_tup2 = @$test_tup2;\n    my @result;\n    for (my $i = 0; $i < scalar(@test_tup1); $i++) {\n        push(@result, $test_tup1[$i] * $test_tup2[$i]);\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        push @result, $test_tup1->[$i] * $test_tup2->[$i];\n    }\n    return @result;\n}",
    "    my @result;\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push @result, $test_tup1->[$i] * $test_tup2->[$i];\n    }\n    return @result;\n}",
    "    my @tup1 = @{$test_tup1};\n    my @tup2 = @{$test_tup2};\n    my @result;\n    for my $i (0 .. $#tup1) {\n        push @result, $tup1[$i] * $tup2[$i];\n    }\n    return \\@result;\n}",
    "    my @result = ();\n    for(my $i=0; $i<scalar(@$test_tup1); $i++) {\n        push(@result, $test_tup1->[$i] * $test_tup2->[$i]);\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        push @result, $test_tup1->[$i] * $test_tup2->[$i];\n    }\n    return @result;\n}",
    "    my @result_tup;\n    for (my $i = 0; $i < scalar @$test_tup1; $i++) {\n        push @result_tup, $$test_tup1[$i] * $$test_tup2[$i];\n    }\n    return @result_tup;\n}",
    "    my @result = ();\n    for my $i (0..$#{$test_tup1}) {\n        push @result, $test_tup1->[$i] * $test_tup2->[$i];\n    }\n    return @result;\n}",
    "    my @result;\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@result, $$test_tup1[$i] * $$test_tup2[$i]);\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        push @result, $test_tup1->[$i] * $test_tup2->[$i];\n    }\n    return @result;\n}",
    "    my @result_tup;\n    for my $i (0..$#{$test_tup1}) {\n        push @result_tup, $test_tup1->[$i] * $test_tup2->[$i];\n    }\n    return @result_tup;\n}",
    "    my @test_tup1 = @$test_tup1;\n    my @test_tup2 = @$test_tup2;\n    my @result;\n    for (my $i = 0; $i < scalar @test_tup1; $i++) {\n        push @result, $test_tup1[$i] * $test_tup2[$i];\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        push @result, $test_tup1->[$i] * $test_tup2->[$i];\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        push @result, $test_tup1->[$i] * $test_tup2->[$i];\n    }\n    return @result;\n}",
    "    my @result = ();\n    for(my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push @result, $test_tup1->[$i] * $test_tup2->[$i];\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        push @result, $test_tup1->[$i] * $test_tup2->[$i];\n    }\n    return @result;\n}",
    "    my @test_tup1 = @$test_tup1;\n    my @test_tup2 = @$test_tup2;\n    my @result;\n    for(my $i = 0; $i < scalar(@test_tup1); $i++) {\n        push(@result, $test_tup1[$i] * $test_tup2[$i]);\n    }\n    return @result;\n}",
    "    my @result;\n    my $i = 0;\n    foreach my $elem (@$test_tup1) {\n        $result[$i] = $elem * $test_tup2->[$i];\n        $i++;\n    }\n    return \\@result;\n}"
  ]
}