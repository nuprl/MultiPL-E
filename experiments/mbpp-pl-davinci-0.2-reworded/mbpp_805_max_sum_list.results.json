{
  "name": "mbpp_805_max_sum_list",
  "language": "pl",
  "prompt": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_805_max_sum_list.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    for my $list (@$lists) {\n        my $sum = 0;\n        $sum += $_ for @$list;\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = 0;\n        for my $elem (@$list) {\n            $sum += $elem;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = sum_list($list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum_list called at /tmp/tmp8lwkk9aw.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmpk23rr5jt.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $elem (@$list) {\n            $sum += $elem;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    for my $list (@$lists) {\n        my $sum = 0;\n        $sum += $_ for @$list;\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = sum_list($list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum_list called at /tmp/tmp8lwkk9aw.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = sum_list($list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum_list called at /tmp/tmp8lwkk9aw.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmptai9rmi_.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = sum_list($list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum_list called at /tmp/tmpk6dhb9xj.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = 0;\n        $sum += $_ for @$list;\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    for my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmppgldcoyj.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        $sum += $_ foreach @$list;\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpyy53h8va.pl line 16.\nBEGIN failed--compilation aborted at /tmp/tmpyy53h8va.pl line 16.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpghgjdswx.pl line 19.\nBEGIN failed--compilation aborted at /tmp/tmpghgjdswx.pl line 19.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $item (@$list) {\n            $sum += $item;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp1wb9twa1.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmp1wb9twa1.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $item (@$list) {\n            $sum += $item;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp1wb9twa1.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmp1wb9twa1.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmptai9rmi_.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = 0;\n        $sum += $_ for @$list;\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmptai9rmi_.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    for my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmppgldcoyj.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmptai9rmi_.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    for my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmppgldcoyj.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    for my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmppgldcoyj.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmpk23rr5jt.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    for my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmppgldcoyj.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $elem (@$list) {\n            $sum += $elem;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    for my $list (@$lists) {\n        my $sum = 0;\n        for my $elem (@$list) {\n            $sum += $elem;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpoinrymt2.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpoinrymt2.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    for my $list (@$lists) {\n        my $sum = 0;\n        $sum += $_ for @$list;\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $item (@$list) {\n            $sum += $item;\n        }\n        if ($sum > $max) {\n            $max = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpi6czwc4v.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpi6czwc4v.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmptai9rmi_.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    for my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmppgldcoyj.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = sum_list($list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum_list called at /tmp/tmpk6dhb9xj.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmpk23rr5jt.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    for my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmppgldcoyj.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    for my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmppgldcoyj.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = sum($list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpe4lwoadt.pl line 15.\nBEGIN failed--compilation aborted at /tmp/tmpe4lwoadt.pl line 15.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = 0;\n        $sum += $_ for @$list;\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    for my $list (@$lists) {\n        my $sum = sum_list($list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmps4vj9kb_.pl line 15.\nBEGIN failed--compilation aborted at /tmp/tmps4vj9kb_.pl line 15.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmptai9rmi_.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    for my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmppgldcoyj.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $item (@$list) {\n            $sum += $item;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpwokiv4ec.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpwokiv4ec.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmpk23rr5jt.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = 0;\n        $sum += $_ for @$list;\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    for my $list (@$lists) {\n        my $sum = 0;\n        for my $elem (@$list) {\n            $sum += $elem;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpoinrymt2.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpoinrymt2.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    for my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmppgldcoyj.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    for my $list (@$lists) {\n        my $sum = 0;\n        for my $elem (@$list) {\n            $sum += $elem;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpoinrymt2.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpoinrymt2.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    for my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmppgldcoyj.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmpk23rr5jt.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmpk23rr5jt.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        map { $sum += $_ } @$list;\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpsunjw8e9.pl line 16.\nBEGIN failed--compilation aborted at /tmp/tmpsunjw8e9.pl line 16.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    for my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmppgldcoyj.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    for my $list (@$lists) {\n        my $sum = 0;\n        for my $elem (@$list) {\n            $sum += $elem;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpoinrymt2.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpoinrymt2.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = sum_list($list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum_list called at /tmp/tmpk6dhb9xj.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $item (@$list) {\n            $sum += $item;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpwokiv4ec.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpwokiv4ec.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmpk23rr5jt.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmpk23rr5jt.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmpk23rr5jt.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    for my $list (@$lists) {\n        my $sum = 0;\n        $sum += $_ for @$list;\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    for my $list (@$lists) {\n        my $sum = 0;\n        $sum += $_ for @$list;\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmpk23rr5jt.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    for my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmppgldcoyj.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = 0;\n        for my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpxn4fgfna.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpxn4fgfna.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmpk23rr5jt.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $elem (@$list) {\n            $sum += $elem;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $item (@$list) {\n            $sum += $item;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp1wb9twa1.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmp1wb9twa1.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $elem (@$list) {\n            $sum += $elem;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        $sum += $_ foreach @$list;\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmphl5tz0_1.pl line 16.\nBEGIN failed--compilation aborted at /tmp/tmphl5tz0_1.pl line 16.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    for my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmppgldcoyj.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmpk23rr5jt.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    for my $list (@$lists) {\n        my $sum = 0;\n        $sum += $_ for @$list;\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = 0;\n        for my $e (@$list) {\n            $sum += $e;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpihn4_j_0.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpihn4_j_0.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $elem (@$list) {\n            $sum += $elem;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpvb9sutun.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpvb9sutun.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = sum_list($list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum_list called at /tmp/tmpk6dhb9xj.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $item (@$list) {\n            $sum += $item;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp1wb9twa1.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmp1wb9twa1.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmptai9rmi_.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = 0;\n        $sum += $_ for @$list;\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    for my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmppgldcoyj.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    for my $list (@$lists) {\n        my $sum = 0;\n        for my $elem (@$list) {\n            $sum += $elem;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpoinrymt2.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpoinrymt2.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = sum($list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpe4lwoadt.pl line 15.\nBEGIN failed--compilation aborted at /tmp/tmpe4lwoadt.pl line 15.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    for my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmppgldcoyj.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = undef;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $elem (@$list) {\n            $sum += $elem;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp035lyrtj.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmp035lyrtj.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max = 0;\n    my $max_list = [];\n    for my $list (@$lists) {\n        my $sum = 0;\n        for my $elem (@$list) {\n            $sum += $elem;\n        }\n        if ($sum > $max) {\n            $max = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpi4hu92ko.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpi4hu92ko.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        $sum += $_ foreach @$list;\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpyy53h8va.pl line 16.\nBEGIN failed--compilation aborted at /tmp/tmpyy53h8va.pl line 16.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmpk23rr5jt.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    for my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmppgldcoyj.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmptai9rmi_.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = 0;\n        $sum += $_ for @$list;\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        $sum += $_ foreach @$list;\n        if ($sum > $max) {\n            $max = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp0rhks6mq.pl line 16.\nBEGIN failed--compilation aborted at /tmp/tmp0rhks6mq.pl line 16.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $item (@$list) {\n            $sum += $item;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp1wb9twa1.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmp1wb9twa1.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        $sum += $_ foreach @$list;\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmphl5tz0_1.pl line 16.\nBEGIN failed--compilation aborted at /tmp/tmphl5tz0_1.pl line 16.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmpk23rr5jt.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmpk23rr5jt.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    for my $list (@$lists) {\n        my $sum = 0;\n        for my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp_pemw6_i.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmp_pemw6_i.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmpk23rr5jt.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = undef;\n    foreach my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpdjfokwgw.pl line 15.\nBEGIN failed--compilation aborted at /tmp/tmpdjfokwgw.pl line 15.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpxlb4mhkf.pl line 6.\nBEGIN failed--compilation aborted at /tmp/tmpxlb4mhkf.pl line 6.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $elem (@$list) {\n            $sum += $elem;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmpk23rr5jt.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    for my $list (@$lists) {\n        my $sum = 0;\n        $sum += $_ for @$list;\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    for my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmppgldcoyj.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    for my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmppgldcoyj.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = 0;\n        for my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpxn4fgfna.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpxn4fgfna.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmpk23rr5jt.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max = 0;\n    my $max_list = [];\n    for my $list (@$lists) {\n        my $sum = sum($list);\n        if ($sum > $max) {\n            $max = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmppucilj8w.pl line 15.\nBEGIN failed--compilation aborted at /tmp/tmppucilj8w.pl line 15.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = undef;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        $sum += $_ foreach @$list;\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpk_xhlj1v.pl line 16.\nBEGIN failed--compilation aborted at /tmp/tmpk_xhlj1v.pl line 16.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = 0;\n        $sum += $_ for @$list;\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = 0;\n        for my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpxn4fgfna.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpxn4fgfna.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        $sum += $_ foreach @$list;\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpyy53h8va.pl line 16.\nBEGIN failed--compilation aborted at /tmp/tmpyy53h8va.pl line 16.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $elem (@$list) {\n            $sum += $elem;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpvb9sutun.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpvb9sutun.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = sum($list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpuv1a5x79.pl line 15.\nBEGIN failed--compilation aborted at /tmp/tmpuv1a5x79.pl line 15.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    for my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmppgldcoyj.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        map { $sum += $_ } @$list;\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpsunjw8e9.pl line 16.\nBEGIN failed--compilation aborted at /tmp/tmpsunjw8e9.pl line 16.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = 0;\n        $sum += $_ for @$list;\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $item (@$list) {\n            $sum += $item;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp1wb9twa1.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmp1wb9twa1.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    for my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmppgldcoyj.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = undef;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $elem (@$list) {\n            $sum += $elem;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp035lyrtj.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmp035lyrtj.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $item (@$list) {\n            $sum += $item;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp1wb9twa1.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmp1wb9twa1.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = 0;\n        $sum += $_ for @$list;\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = 0;\n        $sum += $_ for @$list;\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $elem (@$list) {\n            $sum += $elem;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpvb9sutun.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpvb9sutun.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max = 0;\n    my $max_list = [];\n    for my $list (@$lists) {\n        my $sum = 0;\n        for my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max) {\n            $max = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpn3ociwi3.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpn3ociwi3.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    for my $list (@$lists) {\n        my $sum = 0;\n        $sum += $_ for @$list;\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = sum($list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpe4lwoadt.pl line 15.\nBEGIN failed--compilation aborted at /tmp/tmpe4lwoadt.pl line 15.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    for my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmppgldcoyj.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    for my $list (@$lists) {\n        my $sum = 0;\n        $sum += $_ for @$list;\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmptai9rmi_.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = sum($list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpe4lwoadt.pl line 15.\nBEGIN failed--compilation aborted at /tmp/tmpe4lwoadt.pl line 15.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max = 0;\n    my $max_list = [];\n    for my $list (@$lists) {\n        my $sum = 0;\n        for my $i (@$list) {\n            $sum += $i;\n        }\n        if ($sum > $max) {\n            $max = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmplqomvrd5.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmplqomvrd5.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = 0;\n        for my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpxn4fgfna.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpxn4fgfna.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = 0;\n        for my $elem (@$list) {\n            $sum += $elem;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    for my $list (@$lists) {\n        my $sum = sum(@$list);\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "Undefined subroutine &main::sum called at /tmp/tmppgldcoyj.pl line 7.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    for my $list (@$lists) {\n        my $sum = 0;\n        $sum += $_ for @$list;\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    for my $list (@$lists) {\n        my $sum = 0;\n        $sum += $_ for @$list;\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list;\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n    my $max_sum = 0;\n    my $max_list = [];\n    foreach my $list (@$lists) {\n        my $sum = 0;\n        foreach my $element (@$list) {\n            $sum += $element;\n        }\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n            $max_list = $list;\n        }\n    }\n    return $max_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510082,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}