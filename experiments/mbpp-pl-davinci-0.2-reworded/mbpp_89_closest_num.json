{
  "name": "mbpp_89_closest_num",
  "language": "pl",
  "prompt": "# Write a function to find the closest smaller number than n.\nsub closest_num {\n    my($N) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_89_closest_num.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&closest_num;\n        if(eq_deeply($candidate->(11),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),11)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $n = $N;\n    my $c = 0;\n    while ($n) {\n        $c++;\n        $n >>= 1;\n    }\n    my $m = 1 << ($c - 1);\n    my $d = $N - $m;\n    if ($d == 0) {\n        return $N - 1;\n    }\n    return $m + $d - 1;\n}",
    "    my $n = $N;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0",
    "    my $n = $N;\n    my $c = 0;\n    while ($n) {\n        $n &= $n - 1;\n        $c++;\n    }\n    return $N - $c;\n}",
    "    my $str = sprintf(\"%b\", $N);\n    my $len = length($str);\n    my $i = $len - 1;\n    while ($i > 0) {\n        if (substr($str, $i - 1, 1) > substr($str, $i, 1)) {\n            substr($str, $i - 1, 1) = substr($str, $i - 1, 1) - 1;\n            substr($str, $i, 1) = 1;\n            last;\n        }\n        $i--;\n    }\n    return oct(\"0b$str\");\n}",
    "    my $n = $N;\n    my $i = 0;\n    while ($n) {\n        $i++;\n        $n >>= 1;\n    }\n    my $mask = (1 << ($i-1)) - 1;\n    return $N & $mask;\n}",
    "    my $n = $N;\n    my $m = $N;\n    my $i = 0;\n    while ($n > 0) {\n        my $d = $n % 10;\n        if ($d == 0) {\n            $n = int($n / 10);\n        }\n        elsif ($d == 1) {\n            $n = int($n / 10);\n            $m -= $d * 10**$i;\n            $m += (10 + $d - 1) * 10**$i;\n        }\n        else {\n            $n = int($n / 10);\n            $m -= $d * 10**$i;\n            $m += ($d - 1) * 10**$i;\n        }\n        $i++;\n    }\n    return $m;\n}",
    "    my $n = $N;\n    my $i = 0;\n    while ($n > 0) {\n        my $d = $n % 10;\n        if ($d == 0) {\n            $n = int($n / 10);\n        } else {\n            $n = int($n / 10) * 10 + $d - 1;\n        }\n        $i++;\n    }\n    return $i;\n}",
    "    my $bin = sprintf(\"%b\", $N);\n    my $len = length($bin);\n    my $i = $len - 1;\n    my $j = $i - 1;\n    while ($i > 0 && substr($bin, $i, 1) == substr($bin, $j, 1)) {\n        $i--;\n        $j--;\n    }\n    if ($i == 0) {\n        return -1;\n    }\n    my $mask = (1 << ($i + 1)) - 1;\n    my $mask2 = (1 << $i) - 1;\n    my $mask3 = (1 << ($i - 1)) - 1;\n    my $mask4 = (1 << ($i - 1)) - 1;\n    my $mask5 = (1 << ($i - 1)) - 1;\n    my $mask6 = (1 << ($i - 1)) - 1;\n    my $mask7 = (1 << ($i - 1)) - 1;\n    my $mask8 = (1 << ($i - 1)) - 1;\n    my $mask9 = (1 << ($i - 1)) - 1;\n    my $mask10 = (1 << ($i - 1)) - 1;\n    my $mask11 = (1 << ($i - 1)) - 1;\n    my $mask12 = (1 << ($i - 1)) - 1;\n    my $mask13 = (1 << ($i - 1)) - 1;\n    my $mask14 = (1 << ($i - 1)) - 1;\n    my $mask15 = (1 << ($i - 1)) - 1;\n    my $mask16 = (1 << ($i - 1)) - 1;\n    my $mask17 = (1 << ($i - 1)) - 1;\n    my $mask18 = (1 << ($i - 1)) - 1;\n    my $mask19 = (1 << ($i - 1)) - 1;\n    my $mask20 = (1 << ($i - 1)) - 1;\n    my $mask21 = (1 << ($i - 1)) - 1;\n    my $mask22 = (1 << ($i - 1)) - 1;\n    my $mask23 = (1 << ($",
    "    my $n = $N;\n    my $c = 0;\n    while ($n) {\n        $c += ($n & 1);\n        $n >>= 1;\n    }\n    return $N - $c;\n}",
    "    my $n = $N;\n    my $c = 0;\n    while ($n) {\n        $c++;\n        $n >>= 1;\n    }\n    return $N - (1 << ($c - 1));\n}",
    "    my $n = $N;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $A = 0;\n    my $B = 0;\n    my $C = 0;\n    my $D = 0;\n    my $E = 0;\n    my $F = 0;\n    my $G = 0;\n    my $H = 0;\n    my $I = 0;\n    my $J = 0;\n    my $K = 0;\n    my $L = 0;\n    my $M = 0;\n    my $N = 0;\n    my $O = 0;\n    my $P = 0;\n    my $Q = 0;\n    my $R = 0;\n    my $S = 0;\n    my $T = 0;\n    my $U = 0;\n    my $V = 0;\n    my $W = 0;\n    my $X = 0;\n    my $Y = 0;\n    my $Z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0",
    "    my $n = $N;\n    my $c = 0;\n    my $b = 0;\n    my $i = 0;\n    while ($n) {\n        $b = $n & 1;\n        $n >>= 1;\n        if ($b == 1) {\n            $c = $n;\n            $i = 1;\n            last;\n        }\n    }\n    if ($i == 0) {\n        return -1;\n    }\n    $c = $c | ($b << $i);\n    $c = $c << ($N - $i - 1);\n    return $c;\n}",
    "    my $n = $N;\n    my $c = 0;\n    while ($n) {\n        $c++ if $n & 1;\n        $n >>= 1;\n    }\n    return $N - (1 << ($c - 1));\n}",
    "    my $n = $N;\n    my $m = $N;\n    my $i = 0;\n    my $j = 0;\n    while ($n > 0) {\n        my $d = $n % 10;\n        if ($d == 0) {\n            $i++;\n        }\n        elsif ($d == 1) {\n            $j++;\n        }\n        else {\n            last;\n        }\n        $n = int($n / 10);\n    }\n    if ($n == 0) {\n        return 0;\n    }\n    if ($i > $j) {\n        $m -= 1 * 10 ** $i;\n    }\n    else {\n        $m -= 1 * 10 ** $j;\n    }\n    return $m;\n}",
    "    my $n = $N;\n    my $m = $N;\n    my $i = 0;\n    while ($n > 0) {\n        my $d = $n % 10;\n        if ($d == 0) {\n            $m = $m - 10**$i;\n        }\n        elsif ($d == 1) {\n            $m = $m - 10**$i + 1;\n        }\n        elsif ($d > 1) {\n            $m = $m - $d * 10**$i + (10**$i - 1);\n        }\n        $n = int($n / 10);\n        $i++;\n    }\n    return $m;\n}",
    "    my $n = $N;\n    my $i = 0;\n    while ($n) {\n        my $d = $n % 10;\n        if ($d == 0) {\n            $n = int($n / 10);\n        }\n        else {\n            $n = int($n / 10) * 10 + ($d - 1);\n            last;\n        }\n    }\n    return $n;\n}",
    "    my $n = $N;\n    my $c = 0;\n    while ($n) {\n        $c += $n & 1;\n        $n >>= 1;\n    }\n    return $N - $c;\n}",
    "    my $num = $N;\n    my $count = 0;\n    while ($num > 0) {\n        $num = $num >> 1;\n        $count++;\n    }\n    return $N - (1 << ($count - 1));\n}",
    "    my $n = $N;\n    my $i = 0;\n    while ($n) {\n        $n >>= 1;\n        $i++;\n    }\n    my $p = 1 << ($i - 1);\n    my $q = $N - $p;\n    if ($q < $p) {\n        return $N - $q;\n    } else {\n        return $N - $p;\n    }\n}",
    "    my $n = $N;\n    my $c = 0;\n    while ($n) {\n        $n &= $n - 1;\n        $c++;\n    }\n    return $N - $c;\n}"
  ]
}