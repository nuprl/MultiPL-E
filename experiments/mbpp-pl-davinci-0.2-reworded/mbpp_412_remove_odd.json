{
  "name": "mbpp_412_remove_odd",
  "language": "pl",
  "prompt": "# Write a plthon function to remove odd numbers from a given array.\nsub remove_odd {\n    my($l) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_412_remove_odd.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&remove_odd;\n        if(eq_deeply($candidate->([1, 2, 3]),[2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 6]),[2, 4, 6])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 3]),[10, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @new_list = ();\n    foreach my $item (@$l) {\n        if ($item % 2 == 0) {\n            push(@new_list, $item);\n        }\n    }\n    return @new_list;\n}",
    "    my @new_list = ();\n    foreach my $i (@$l) {\n        if ($i % 2 == 0) {\n            push @new_list, $i;\n        }\n    }\n    return @new_list;\n}",
    "    my @new_list = ();\n    foreach my $i (@$l) {\n        if ($i % 2 == 0) {\n            push(@new_list, $i);\n        }\n    }\n    return \\@new_list;\n}",
    "    my @new_l = ();\n    foreach my $i (@$l) {\n        if ($i % 2 == 0) {\n            push @new_l, $i;\n        }\n    }\n    return @new_l;\n}",
    "    my @new_list = ();\n    foreach my $i (@$l) {\n        if ($i % 2 == 0) {\n            push(@new_list, $i);\n        }\n    }\n    return \\@new_list;\n}",
    "    my @a = @$l;\n    my @b = ();\n    for my $i (@a) {\n        if ($i % 2 == 0) {\n            push @b, $i;\n        }\n    }\n    return @b;\n}",
    "    my @new_list = ();\n    foreach my $i (@$l) {\n        if ($i % 2 == 0) {\n            push @new_list, $i;\n        }\n    }\n    return @new_list;\n}",
    "    my @new_list = ();\n    for my $i (@$l) {\n        if ($i % 2 == 0) {\n            push @new_list, $i;\n        }\n    }\n    return \\@new_list;\n}",
    "    my @r;\n    foreach my $i (@$l) {\n        if ($i % 2 == 0) {\n            push @r, $i;\n        }\n    }\n    return \\@r;\n}",
    "    my @new_list = ();\n    foreach my $i (@$l) {\n        if ($i % 2 == 0) {\n            push @new_list, $i;\n        }\n    }\n    return @new_list;\n}",
    "    my @ret;\n    foreach my $i (@$l) {\n        push @ret, $i if $i % 2 == 0;\n    }\n    return @ret;\n}",
    "    my @new_list = ();\n    foreach my $e (@$l) {\n        push(@new_list, $e) if ($e % 2 == 0);\n    }\n    return @new_list;\n}",
    "    my @new_l = ();\n    foreach my $i (@$l) {\n        if ($i % 2 == 0) {\n            push @new_l, $i;\n        }\n    }\n    return \\@new_l;\n}",
    "    my @r = ();\n    foreach my $i (@$l) {\n        if ($i % 2 == 0) {\n            push @r, $i;\n        }\n    }\n    return @r;\n}",
    "    my @new_l = ();\n    foreach my $i (@$l) {\n        if ($i % 2 == 0) {\n            push @new_l, $i;\n        }\n    }\n    return @new_l;\n}",
    "    my @new_l = ();\n    foreach my $e (@$l) {\n        if ($e % 2 == 0) {\n            push @new_l, $e;\n        }\n    }\n    return \\@new_l;\n}",
    "    my @new_l = ();\n    foreach my $i (@$l) {\n        if ($i % 2 == 0) {\n            push @new_l, $i;\n        }\n    }\n    return @new_l;\n}",
    "    my @new_list = ();\n    foreach my $i (@$l) {\n        if ($i % 2 == 0) {\n            push @new_list, $i;\n        }\n    }\n    return \\@new_list;\n}",
    "    my @list = @$l;\n    my @new_list = ();\n    foreach my $i (@list) {\n        if ($i % 2 == 0) {\n            push @new_list, $i;\n        }\n    }\n    return @new_list;\n}",
    "    my @new_l = grep { $_ % 2 == 0 } @$l;\n    return \\@new_l;\n}"
  ]
}