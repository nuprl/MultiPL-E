{
  "name": "mbpp_580_extract_even",
  "language": "pl",
  "prompt": "# Write a function to remove uneven elements in the nested mixed array.\nsub extract_even {\n    my($test_tuple) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_580_extract_even.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&extract_even;\n        if(eq_deeply($candidate->([4, 5, [7, 6, [2, 4]], 6, 8]),[4, [6, [2, 4]], 6, 8])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 6, [8, 7, [4, 8]], 7, 9]),[6, [8, [4, 8]]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 6, [9, 8, [4, 6]], 8, 10]),[6, [8, [4, 6]], 8, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @even_list = ();\n    for my $i (0 .. $#{$test_tuple}) {\n        if (ref $test_tuple->[$i]) {\n            push @even_list, extract_even($test_tuple->[$i]);\n        } else {\n            push @even_list, $test_tuple->[$i] if $test_tuple->[$i] % 2 == 0;\n        }\n    }\n    return @even_list;\n}",
    "    my @even_tuple;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_tuple, extract_even($element);\n        } else {\n            push @even_tuple, $element if $element % 2 == 0;\n        }\n    }\n    return @even_tuple;\n}",
    "    my @even_tuple;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_tuple, extract_even($element);\n        } else {\n            push @even_tuple, $element if $element % 2 == 0;\n        }\n    }\n    return @even_tuple;\n}",
    "    my @even_list = ();\n    foreach my $item (@$test_tuple) {\n        if (ref($item) eq 'ARRAY') {\n            push @even_list, extract_even($item);\n        } elsif ($item % 2 == 0) {\n            push @even_list, $item;\n        }\n    }\n    return @even_list;\n}",
    "    my @even_elements;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_elements, extract_even($element);\n        } elsif ($element % 2 == 0) {\n            push @even_elements, $element;\n        }\n    }\n    return @even_elements;\n}",
    "    my @even_list = ();\n    if (ref($test_tuple) eq 'ARRAY') {\n        foreach my $element (@$test_tuple) {\n            if (ref($element) eq 'ARRAY') {\n                push @even_list, extract_even($element);\n            } elsif ($element % 2 == 0) {\n                push @even_list, $element;\n            }\n        }\n    }\n    return @even_list;\n}",
    "    my @even_array;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_array, extract_even($element);\n        } else {\n            push @even_array, $element if $element % 2 == 0;\n        }\n    }\n    return @even_array;\n}",
    "    my @even_list = ();\n    for my $i (0 .. $#{$test_tuple}) {\n        if (ref($test_tuple->[$i]) eq 'ARRAY') {\n            push @even_list, extract_even($test_tuple->[$i]);\n        }\n        else {\n            push @even_list, $test_tuple->[$i] if ($test_tuple->[$i] % 2 == 0);\n        }\n    }\n    return @even_list;\n}",
    "    my @even_tuple;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_tuple, extract_even($element);\n        } else {\n            push @even_tuple, $element if $element % 2 == 0;\n        }\n    }\n    return \\@even_tuple;\n}",
    "    my @even_numbers;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_numbers, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_numbers, $element;\n        }\n    }\n    return @even_numbers;\n}",
    "    my @even_list = ();\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_list, extract_even($element);\n        } else {\n            push @even_list, $element if $element % 2 == 0;\n        }\n    }\n    return @even_list;\n}",
    "    my @even_elements = ();\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_elements, extract_even($element);\n        } elsif ($element % 2 == 0) {\n            push @even_elements, $element;\n        }\n    }\n    return @even_elements;\n}",
    "    my @result;\n    for my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @result, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @result, $element;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for my $item (@$test_tuple) {\n        if (ref $item eq 'ARRAY') {\n            push @result, extract_even($item);\n        }\n        elsif ($item % 2 == 0) {\n            push @result, $item;\n        }\n    }\n    return @result;\n}",
    "    my @even_tuple = ();\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_tuple, extract_even($element);\n        } else {\n            push @even_tuple, $element if $element % 2 == 0;\n        }\n    }\n    return \\@even_tuple;\n}",
    "    my @even_numbers;\n    foreach my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @even_numbers, extract_even($element);\n        } elsif ($element % 2 == 0) {\n            push @even_numbers, $element;\n        }\n    }\n    return @even_numbers;\n}",
    "    my @result = ();\n    foreach my $item (@$test_tuple) {\n        if (ref($item) eq 'ARRAY') {\n            my @sub_result = extract_even($item);\n            push @result, \\@sub_result;\n        } else {\n            push @result, $item if $item % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for my $elem (@$test_tuple) {\n        if (ref $elem) {\n            push @result, extract_even($elem);\n        } else {\n            push @result, $elem if $elem % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    foreach my $item (@$test_tuple) {\n        if (ref($item) eq 'ARRAY') {\n            my @sub_result = extract_even($item);\n            push @result, \\@sub_result if @sub_result;\n        }\n        else {\n            push @result, $item if $item % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @even_array;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq \"ARRAY\") {\n            push @even_array, extract_even($element);\n        }\n        else {\n            push @even_array, $element if $element % 2 == 0;\n        }\n    }\n    return @even_array;\n}",
    "    my @even_elements;\n    for my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @even_elements, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_elements, $element;\n        }\n    }\n    return @even_elements;\n}",
    "    my @even_list = ();\n    foreach my $item (@$test_tuple) {\n        if (ref($item) eq \"ARRAY\") {\n            push @even_list, extract_even($item);\n        }\n        else {\n            push @even_list, $item if ($item % 2 == 0);\n        }\n    }\n    return @even_list;\n}",
    "    my @result;\n    for my $i (@$test_tuple) {\n        if (ref $i eq 'ARRAY') {\n            push @result, extract_even($i);\n        } elsif ($i % 2 == 0) {\n            push @result, $i;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    foreach my $elem (@$test_tuple) {\n        if (ref($elem) eq 'ARRAY') {\n            push @result, extract_even($elem);\n        } else {\n            push @result, $elem if $elem % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @result = ();\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @result, extract_even($element);\n        } else {\n            push @result, $element if $element % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @even_numbers = ();\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_numbers, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_numbers, $element;\n        }\n    }\n    return @even_numbers;\n}",
    "    my @even_numbers;\n    for my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @even_numbers, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_numbers, $element;\n        }\n    }\n    return @even_numbers;\n}",
    "    my @even_elements = ();\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_elements, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_elements, $element;\n        }\n    }\n    return @even_elements;\n}",
    "    my @even_numbers = ();\n    for my $element (@{$test_tuple}) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_numbers, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_numbers, $element;\n        }\n    }\n    return @even_numbers;\n}",
    "    my @even_numbers;\n    for my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_numbers, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_numbers, $element;\n        }\n    }\n    return @even_numbers;\n}",
    "    my @even_tuple;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_tuple, extract_even($element);\n        } else {\n            push @even_tuple, $element if $element % 2 == 0;\n        }\n    }\n    return @even_tuple;\n}",
    "    my @even_elements;\n    for my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @even_elements, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_elements, $element;\n        }\n    }\n    return @even_elements;\n}",
    "    my @even_tuple;\n    for my $i (0..$#$test_tuple) {\n        if (ref $test_tuple->[$i] eq 'ARRAY') {\n            push @even_tuple, extract_even($test_tuple->[$i]);\n        } else {\n            push @even_tuple, $test_tuple->[$i] if $test_tuple->[$i] % 2 == 0;\n        }\n    }\n    return \\@even_tuple;\n}",
    "    my @result;\n    foreach my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @result, extract_even($element);\n        }\n        else {\n            push @result, $element if $element % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @even_numbers;\n    for my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_numbers, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_numbers, $element;\n        }\n    }\n    return @even_numbers;\n}",
    "    my @even_list = ();\n    foreach my $item (@$test_tuple) {\n        if (ref($item) eq 'ARRAY') {\n            push @even_list, extract_even($item);\n        } elsif ($item % 2 == 0) {\n            push @even_list, $item;\n        }\n    }\n    return @even_list;\n}",
    "    my @result;\n    foreach my $item (@$test_tuple) {\n        if (ref($item) eq 'ARRAY') {\n            push @result, extract_even($item);\n        } else {\n            push @result, $item if $item % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @even_list = ();\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_list, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_list, $element;\n        }\n    }\n    return @even_list;\n}",
    "    my @even_list = ();\n    for my $i (0 .. $#{$test_tuple}) {\n        if (ref($test_tuple->[$i]) eq 'ARRAY') {\n            push @even_list, extract_even($test_tuple->[$i]);\n        } else {\n            push @even_list, $test_tuple->[$i] if $test_tuple->[$i] % 2 == 0;\n        }\n    }\n    return @even_list;\n}",
    "    my @even_tuple;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_tuple, extract_even($element);\n        } else {\n            push @even_tuple, $element if $element % 2 == 0;\n        }\n    }\n    return @even_tuple;\n}",
    "    my @even_elements;\n    foreach my $element (@$test_tuple) {\n        if (ref $element) {\n            push @even_elements, extract_even($element);\n        }\n        else {\n            push @even_elements, $element if $element % 2 == 0;\n        }\n    }\n    return @even_elements;\n}",
    "    my @even_numbers = ();\n    for my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            my $even_numbers = extract_even($element);\n            push @even_numbers, @$even_numbers;\n        }\n        elsif ($element % 2 == 0) {\n            push @even_numbers, $element;\n        }\n    }\n    return \\@even_numbers;\n}",
    "    my @even_elements = ();\n    for my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @even_elements, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_elements, $element;\n        }\n    }\n    return @even_elements;\n}",
    "    my @even_tuple;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_tuple, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_tuple, $element;\n        }\n    }\n    return @even_tuple;\n}",
    "    my @result;\n    for my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @result, extract_even($element);\n        } else {\n            push @result, $element if $element % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @even_tuple = ();\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_tuple, extract_even($element);\n        } elsif ($element % 2 == 0) {\n            push @even_tuple, $element;\n        }\n    }\n    return @even_tuple;\n}",
    "    my @result = ();\n    foreach my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @result, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @result, $element;\n        }\n    }\n    return \\@result;\n}",
    "    my @even_tuple;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_tuple, extract_even($element);\n        } else {\n            push @even_tuple, $element if $element % 2 == 0;\n        }\n    }\n    return @even_tuple;\n}",
    "    my @even_list = ();\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_list, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_list, $element;\n        }\n    }\n    return @even_list;\n}",
    "    my @even_elements = ();\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_elements, extract_even($element);\n        } else {\n            push @even_elements, $element if $element % 2 == 0;\n        }\n    }\n    return @even_elements;\n}",
    "    my @even_list;\n    if (ref($test_tuple) eq 'ARRAY') {\n        foreach my $element (@$test_tuple) {\n            if (ref($element) eq 'ARRAY') {\n                push @even_list, extract_even($element);\n            } else {\n                push @even_list, $element if $element % 2 == 0;\n            }\n        }\n    }\n    return @even_list;\n}",
    "    my @even_numbers;\n    for my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @even_numbers, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_numbers, $element;\n        }\n    }\n    return @even_numbers;\n}",
    "    my @result;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @result, extract_even($element);\n        } else {\n            push @result, $element if $element % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @even_list = ();\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq \"ARRAY\") {\n            push @even_list, extract_even($element);\n        }\n        else {\n            push @even_list, $element if $element % 2 == 0;\n        }\n    }\n    return @even_list;\n}",
    "    my @new_tuple;\n    foreach my $elem (@$test_tuple) {\n        if (ref($elem) eq \"ARRAY\") {\n            push @new_tuple, extract_even($elem);\n        }\n        else {\n            push @new_tuple, $elem if $elem % 2 == 0;\n        }\n    }\n    return \\@new_tuple;\n}",
    "    my @even_numbers;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_numbers, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_numbers, $element;\n        }\n    }\n    return @even_numbers;\n}",
    "    my @result;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @result, extract_even($element);\n        }\n        else {\n            push @result, $element if $element % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for my $item (@$test_tuple) {\n        if (ref $item eq 'ARRAY') {\n            push @result, extract_even($item);\n        }\n        else {\n            push @result, $item if $item % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @new_tuple = ();\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @new_tuple, extract_even($element);\n        } else {\n            push @new_tuple, $element if $element % 2 == 0;\n        }\n    }\n    return @new_tuple;\n}",
    "    my @result;\n    for my $element (@$test_tuple) {\n        if (ref $element) {\n            push @result, extract_even($element);\n        } else {\n            push @result, $element if $element % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for my $elem (@$test_tuple) {\n        if (ref $elem eq 'ARRAY') {\n            push @result, extract_even($elem);\n        } else {\n            push @result, $elem if $elem % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @result = ();\n    foreach my $elem (@$test_tuple) {\n        if (ref($elem) eq 'ARRAY') {\n            push @result, extract_even($elem);\n        }\n        elsif ($elem % 2 == 0) {\n            push @result, $elem;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    foreach my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @result, extract_even($element);\n        } else {\n            push @result, $element if $element % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @result, extract_even($element);\n        } else {\n            push @result, $element if $element % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    foreach my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @result, extract_even($element);\n        } else {\n            push @result, $element if $element % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @even_list = ();\n    for my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_list, extract_even($element);\n        } elsif ($element % 2 == 0) {\n            push @even_list, $element;\n        }\n    }\n    return @even_list;\n}",
    "    my @even_array;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_array, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_array, $element;\n        }\n    }\n    return @even_array;\n}",
    "    my @even_array;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_array, extract_even($element);\n        } else {\n            push @even_array, $element if $element % 2 == 0;\n        }\n    }\n    return @even_array;\n}",
    "    my @even_elements;\n    for my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @even_elements, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_elements, $element;\n        }\n    }\n    return @even_elements;\n}",
    "    my @even_list;\n    foreach my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @even_list, extract_even($element);\n        } else {\n            push @even_list, $element if $element % 2 == 0;\n        }\n    }\n    return @even_list;\n}",
    "    my @even_tuple = ();\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_tuple, extract_even($element);\n        }\n        else {\n            push @even_tuple, $element if $element % 2 == 0;\n        }\n    }\n    return @even_tuple;\n}",
    "    my @even_elements;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_elements, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_elements, $element;\n        }\n    }\n    return @even_elements;\n}",
    "    my @even_list = ();\n    foreach my $element (@{$test_tuple}) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_list, extract_even($element);\n        } else {\n            push @even_list, $element if ($element % 2 == 0);\n        }\n    }\n    return @even_list;\n}",
    "    my @result = ();\n    foreach my $item (@$test_tuple) {\n        if (ref($item) eq 'ARRAY') {\n            push @result, extract_even($item);\n        } else {\n            push @result, $item if $item % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    foreach my $element (@$test_tuple) {\n        if (ref($element)) {\n            push @result, extract_even($element);\n        } else {\n            push @result, $element if $element % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @even_tuple = ();\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_tuple, extract_even($element);\n        } else {\n            push @even_tuple, $element if $element % 2 == 0;\n        }\n    }\n    return @even_tuple;\n}",
    "    my @even_numbers = ();\n    my @odd_numbers = ();\n    my @even_numbers_in_array = ();\n    my @odd_numbers_in_array = ();\n    my @even_numbers_in_hash = ();\n    my @odd_numbers_in_hash = ();\n    my @even_numbers_in_hash_in_array = ();\n    my @odd_numbers_in_hash_in_array = ();\n    my @even_numbers_in_array_in_hash = ();\n    my @odd_numbers_in_array_in_hash = ();\n    my @even_numbers_in_hash_in_hash = ();\n    my @odd_numbers_in_hash_in_hash = ();\n    my @even_numbers_in_array_in_array = ();\n    my @odd_numbers_in_array_in_array = ();\n    my @even_numbers_in_array_in_array_in_array = ();\n    my @odd_numbers_in_array_in_array_in_array = ();\n    my @even_numbers_in_hash_in_array_in_array = ();\n    my @odd_numbers_in_hash_in_array_in_array = ();\n    my @even_numbers_in_array_in_hash_in_array = ();\n    my @odd_numbers_in_array_in_hash_in_array = ();\n    my @even_numbers_in_array_in_array_in_hash = ();\n    my @odd_numbers_in_array_in_array_in_hash = ();\n    my @even_numbers_in_hash_in_hash_in_array = ();\n    my @odd_numbers_in_hash_in_hash_in_array = ();\n    my @even_numbers_in_hash_in_array_in_hash = ();\n    my @odd_numbers_in_hash_in_array_in_hash = ();\n    my @even_numbers_in_array_in_hash_in_hash = ();\n    my @odd_",
    "    my @even_list;\n    foreach my $item (@$test_tuple) {\n        if (ref($item) eq 'ARRAY') {\n            push @even_list, extract_even($item);\n        }\n        elsif ($item % 2 == 0) {\n            push @even_list, $item;\n        }\n    }\n    return @even_list;\n}",
    "    my @even_array;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_array, extract_even($element);\n        } else {\n            push @even_array, $element if $element % 2 == 0;\n        }\n    }\n    return @even_array;\n}",
    "    my @even_numbers;\n    foreach my $element (@{$test_tuple}) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_numbers, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_numbers, $element;\n        }\n    }\n    return @even_numbers;\n}",
    "    my @result = ();\n    foreach my $item (@$test_tuple) {\n        if (ref($item) eq 'ARRAY') {\n            push @result, extract_even($item);\n        } else {\n            push @result, $item if $item % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @even_array;\n    foreach my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @even_array, extract_even($element);\n        }\n        else {\n            push @even_array, $element if $element % 2 == 0;\n        }\n    }\n    return @even_array;\n}",
    "    my @result;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @result, extract_even($element);\n        } else {\n            push @result, $element if $element % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @result, extract_even($element);\n        }\n        else {\n            push @result, $element if $element % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @result, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @result, $element;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    foreach my $element (@$test_tuple) {\n        if (ref $element) {\n            push @result, extract_even($element);\n        } else {\n            push @result, $element if $element % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    foreach my $elem (@$test_tuple) {\n        if (ref $elem) {\n            push @result, extract_even($elem);\n        } else {\n            push @result, $elem if $elem % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @even_elements;\n    for my $element (@$test_tuple) {\n        if (ref $element) {\n            push @even_elements, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_elements, $element;\n        }\n    }\n    return @even_elements;\n}",
    "    my @even_numbers;\n    for my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @even_numbers, extract_even($element);\n        }\n        else {\n            push @even_numbers, $element if $element % 2 == 0;\n        }\n    }\n    return @even_numbers;\n}",
    "    my @result;\n    for my $elem (@$test_tuple) {\n        if (ref $elem eq 'ARRAY') {\n            push @result, extract_even($elem);\n        } else {\n            push @result, $elem if $elem % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @even_list = ();\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_list, extract_even($element);\n        } else {\n            push @even_list, $element if $element % 2 == 0;\n        }\n    }\n    return @even_list;\n}",
    "    my @result = ();\n    for my $i (@$test_tuple) {\n        if (ref($i) eq 'ARRAY') {\n            push @result, extract_even($i);\n        } else {\n            push @result, $i if $i % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    foreach my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @result, extract_even($element);\n        } else {\n            push @result, $element if $element % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @even_tuple;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_tuple, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_tuple, $element;\n        }\n    }\n    return @even_tuple;\n}",
    "    my $result = [];\n    for my $i (0..$#$test_tuple) {\n        my $elem = $test_tuple->[$i];\n        if (ref $elem) {\n            $result->[$i] = extract_even($elem);\n        } else {\n            $result->[$i] = $elem if $elem % 2 == 0;\n        }\n    }\n    return $result;\n}",
    "    my @result;\n    foreach my $elem (@$test_tuple) {\n        if (ref($elem) eq 'ARRAY') {\n            push @result, extract_even($elem);\n        } else {\n            push @result, $elem if $elem % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @result = ();\n    foreach my $elem (@$test_tuple) {\n        if (ref($elem) eq 'ARRAY') {\n            push @result, extract_even($elem);\n        } else {\n            push @result, $elem if $elem % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for my $elem (@$test_tuple) {\n        if (ref $elem) {\n            push @result, extract_even($elem);\n        } else {\n            push @result, $elem if $elem % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @result, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @result, $element;\n        }\n    }\n    return @result;\n}",
    "    my @result = ();\n    foreach my $item (@$test_tuple) {\n        if (ref($item) eq 'ARRAY') {\n            push @result, extract_even($item);\n        } else {\n            push @result, $item if $item % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @even_tuple;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_tuple, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_tuple, $element;\n        }\n    }\n    return @even_tuple;\n}",
    "    my @result = ();\n    foreach my $item (@$test_tuple) {\n        if (ref($item) eq 'ARRAY') {\n            push @result, extract_even($item);\n        }\n        elsif ($item % 2 == 0) {\n            push @result, $item;\n        }\n    }\n    return @result;\n}",
    "    my @even_list;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_list, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_list, $element;\n        }\n    }\n    return @even_list;\n}",
    "    my @even_elements;\n    for my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @even_elements, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_elements, $element;\n        }\n    }\n    return @even_elements;\n}",
    "    my @result = ();\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @result, extract_even($element);\n        } else {\n            push @result, $element if $element % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @even_elements;\n    for my $element (@$test_tuple) {\n        if (ref $element) {\n            push @even_elements, extract_even($element);\n        } else {\n            push @even_elements, $element if $element % 2 == 0;\n        }\n    }\n    return @even_elements;\n}",
    "    my @even_list = ();\n    foreach my $item (@$test_tuple) {\n        if (ref($item) eq 'ARRAY') {\n            push @even_list, extract_even($item);\n        }\n        elsif ($item % 2 == 0) {\n            push @even_list, $item;\n        }\n    }\n    return @even_list;\n}",
    "    my @even_array;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_array, extract_even($element);\n        } else {\n            push @even_array, $element if $element % 2 == 0;\n        }\n    }\n    return @even_array;\n}",
    "    my @even_list = ();\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq \"ARRAY\") {\n            push @even_list, extract_even($element);\n        } else {\n            push @even_list, $element if ($element % 2 == 0);\n        }\n    }\n    return @even_list;\n}",
    "    my @even_list;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_list, extract_even($element);\n        } else {\n            push @even_list, $element if $element % 2 == 0;\n        }\n    }\n    return @even_list;\n}",
    "    my @even_numbers;\n    for my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @even_numbers, extract_even($element);\n        }\n        else {\n            push @even_numbers, $element if $element % 2 == 0;\n        }\n    }\n    return @even_numbers;\n}",
    "    my @even_elements;\n    foreach my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @even_elements, extract_even($element);\n        } else {\n            push @even_elements, $element if $element % 2 == 0;\n        }\n    }\n    return @even_elements;\n}",
    "    my @result = ();\n    foreach my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @result, extract_even($element);\n        } else {\n            push @result, $element if $element % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @even_list = ();\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_list, extract_even($element);\n        } else {\n            push @even_list, $element if $element % 2 == 0;\n        }\n    }\n    return @even_list;\n}",
    "    my @even_elements;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_elements, extract_even($element);\n        }\n        else {\n            push @even_elements, $element if $element % 2 == 0;\n        }\n    }\n    return @even_elements;\n}",
    "    my @result;\n    foreach my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @result, extract_even($element);\n        } else {\n            push @result, $element if $element % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    return [ map {\n        if (ref($_) eq 'ARRAY') {\n            extract_even($_);\n        } else {\n            $_ if $_ % 2 == 0;\n        }\n    } @$test_tuple ];\n}",
    "    my @result;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @result, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @result, $element;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    foreach my $item (@$test_tuple) {\n        if (ref $item) {\n            push @result, extract_even($item);\n        }\n        else {\n            push @result, $item if $item % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @even_elements = ();\n    for my $element (@$test_tuple) {\n        if (ref $element) {\n            push @even_elements, extract_even($element);\n        } else {\n            push @even_elements, $element if $element % 2 == 0;\n        }\n    }\n    return @even_elements;\n}",
    "    my @even_list;\n    foreach my $elem (@$test_tuple) {\n        if (ref $elem eq 'ARRAY') {\n            push @even_list, extract_even($elem);\n        }\n        elsif ($elem % 2 == 0) {\n            push @even_list, $elem;\n        }\n    }\n    return @even_list;\n}",
    "    my @even_tuple;\n    foreach my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @even_tuple, extract_even($element);\n        } else {\n            push @even_tuple, $element if $element % 2 == 0;\n        }\n    }\n    return @even_tuple;\n}",
    "    my @even_tuple = ();\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_tuple, extract_even($element);\n        } else {\n            push @even_tuple, $element if $element % 2 == 0;\n        }\n    }\n    return @even_tuple;\n}",
    "    my @even_numbers;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_numbers, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_numbers, $element;\n        }\n    }\n    return @even_numbers;\n}",
    "    my @even_elements = ();\n    for my $element (@$test_tuple) {\n        if (ref $element) {\n            push @even_elements, extract_even($element);\n        } else {\n            push @even_elements, $element if $element % 2 == 0;\n        }\n    }\n    return @even_elements;\n}",
    "    my @result = ();\n    foreach my $elem (@$test_tuple) {\n        if (ref($elem) eq 'ARRAY') {\n            push @result, extract_even($elem);\n        } else {\n            push @result, $elem if $elem % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @even_array;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            my @sub_array = extract_even($element);\n            push @even_array, \\@sub_array;\n        } elsif ($element % 2 == 0) {\n            push @even_array, $element;\n        }\n    }\n    return @even_array;\n}",
    "    my @even_list = ();\n    my @odd_list = ();\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            my $even_ref = extract_even($element);\n            push @even_list, $even_ref;\n        }\n        elsif ($element % 2 == 0) {\n            push @even_list, $element;\n        }\n        else {\n            push @odd_list, $element;\n        }\n    }\n    return \\@even_list;\n}",
    "    my @result;\n    for my $elem (@$test_tuple) {\n        if (ref $elem eq 'ARRAY') {\n            push @result, extract_even($elem);\n        } else {\n            push @result, $elem if $elem % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @even_list;\n    foreach my $item (@$test_tuple) {\n        if (ref $item eq 'ARRAY') {\n            push @even_list, extract_even($item);\n        } else {\n            push @even_list, $item if $item % 2 == 0;\n        }\n    }\n    return @even_list;\n}",
    "    my @result = ();\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @result, extract_even($element);\n        }\n        else {\n            push @result, $element if $element % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @even_list = ();\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_list, extract_even($element);\n        }\n        else {\n            push @even_list, $element if ($element % 2 == 0);\n        }\n    }\n    return @even_list;\n}",
    "    my @even_tuple;\n    for my $item (@$test_tuple) {\n        if (ref $item eq 'ARRAY') {\n            push @even_tuple, extract_even($item);\n        } else {\n            push @even_tuple, $item if $item % 2 == 0;\n        }\n    }\n    return @even_tuple;\n}",
    "    my @even_elements;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_elements, extract_even($element);\n        }\n        else {\n            push @even_elements, $element if $element % 2 == 0;\n        }\n    }\n    return @even_elements;\n}",
    "    my @even_numbers;\n    for my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @even_numbers, extract_even($element);\n        }\n        else {\n            push @even_numbers, $element if $element % 2 == 0;\n        }\n    }\n    return @even_numbers;\n}",
    "    my @result = ();\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @result, extract_even($element);\n        } else {\n            push @result, $element if ($element % 2 == 0);\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for my $element (@$test_tuple) {\n        if (ref $element) {\n            push @result, extract_even($element);\n        } else {\n            push @result, $element if $element % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @even_array;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            my @sub_even_array = extract_even($element);\n            push @even_array, \\@sub_even_array;\n        } else {\n            if ($element % 2 == 0) {\n                push @even_array, $element;\n            }\n        }\n    }\n    return @even_array;\n}",
    "    my @even_array = ();\n    foreach my $item (@$test_tuple) {\n        if (ref($item) eq 'ARRAY') {\n            push @even_array, extract_even($item);\n        } else {\n            push @even_array, $item if $item % 2 == 0;\n        }\n    }\n    return @even_array;\n}",
    "    my @even_list = ();\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_list, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_list, $element;\n        }\n    }\n    return @even_list;\n}",
    "    my @result = ();\n    foreach my $item (@$test_tuple) {\n        if (ref $item eq 'ARRAY') {\n            push @result, extract_even($item);\n        } else {\n            push @result, $item if $item % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @even_list = ();\n    for my $item (@$test_tuple) {\n        if (ref $item eq 'ARRAY') {\n            push @even_list, extract_even($item);\n        } else {\n            push @even_list, $item if $item % 2 == 0;\n        }\n    }\n    return @even_list;\n}",
    "    my @even_tuple;\n    for my $elem (@$test_tuple) {\n        if (ref $elem) {\n            push @even_tuple, extract_even($elem);\n        } else {\n            push @even_tuple, $elem if $elem % 2 == 0;\n        }\n    }\n    return @even_tuple;\n}",
    "    my @even_numbers;\n    foreach my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @even_numbers, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_numbers, $element;\n        }\n    }\n    return @even_numbers;\n}",
    "    my @result;\n    foreach my $element (@$test_tuple) {\n        if (ref $element) {\n            push @result, extract_even($element);\n        } else {\n            push @result, $element if $element % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @even_tuple = ();\n    foreach my $item (@$test_tuple) {\n        if (ref($item) eq 'ARRAY') {\n            push @even_tuple, extract_even($item);\n        }\n        elsif ($item % 2 == 0) {\n            push @even_tuple, $item;\n        }\n    }\n    return @even_tuple;\n}",
    "    my @result;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @result, extract_even($element);\n        } else {\n            push @result, $element if $element % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @even_tuple;\n    foreach my $item (@$test_tuple) {\n        if (ref $item eq 'ARRAY') {\n            push @even_tuple, extract_even($item);\n        } elsif ($item % 2 == 0) {\n            push @even_tuple, $item;\n        }\n    }\n    return @even_tuple;\n}",
    "    my @result;\n    for my $elem (@$test_tuple) {\n        if (ref $elem eq 'ARRAY') {\n            push @result, extract_even($elem);\n        } else {\n            push @result, $elem if $elem % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for my $element (@$test_tuple) {\n        if (ref $element) {\n            push @result, extract_even($element);\n        } else {\n            push @result, $element if $element % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for my $item (@$test_tuple) {\n        if (ref $item eq 'ARRAY') {\n            push @result, extract_even($item);\n        }\n        elsif ($item % 2 == 0) {\n            push @result, $item;\n        }\n    }\n    return @result;\n}",
    "    my @even_elements;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_elements, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_elements, $element;\n        }\n    }\n    return @even_elements;\n}",
    "    my @even_numbers;\n    for my $i (0 .. $#{$test_tuple}) {\n        if (ref $test_tuple->[$i] eq 'ARRAY') {\n            push @even_numbers, extract_even($test_tuple->[$i]);\n        }\n        else {\n            push @even_numbers, $test_tuple->[$i] if $test_tuple->[$i] % 2 == 0;\n        }\n    }\n    return @even_numbers;\n}",
    "    my @result;\n    for my $elem (@$test_tuple) {\n        if (ref $elem eq 'ARRAY') {\n            push @result, extract_even($elem);\n        } else {\n            push @result, $elem if $elem % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @even_numbers = ();\n    foreach my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @even_numbers, extract_even($element);\n        } else {\n            push @even_numbers, $element if $element % 2 == 0;\n        }\n    }\n    return @even_numbers;\n}",
    "    my @even_list = ();\n    for my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @even_list, extract_even($element);\n        } else {\n            push @even_list, $element if $element % 2 == 0;\n        }\n    }\n    return @even_list;\n}",
    "    my @even_list = ();\n    foreach my $item (@$test_tuple) {\n        if (ref($item) eq 'ARRAY') {\n            push @even_list, extract_even($item);\n        } else {\n            push @even_list, $item if $item % 2 == 0;\n        }\n    }\n    return @even_list;\n}",
    "    my @result = ();\n    foreach my $item (@$test_tuple) {\n        if (ref($item) eq 'ARRAY') {\n            push @result, extract_even($item);\n        }\n        elsif ($item % 2 == 0) {\n            push @result, $item;\n        }\n    }\n    return @result;\n}",
    "    my @result = ();\n    for my $elem (@$test_tuple) {\n        if (ref($elem) eq 'ARRAY') {\n            push @result, extract_even($elem);\n        } else {\n            push @result, $elem if $elem % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @even_nums;\n    for my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @even_nums, extract_even($element);\n        } else {\n            push @even_nums, $element if $element % 2 == 0;\n        }\n    }\n    return @even_nums;\n}",
    "    my @result;\n    foreach my $elem (@$test_tuple) {\n        if (ref($elem) eq 'ARRAY') {\n            push @result, extract_even($elem);\n        }\n        else {\n            push @result, $elem if $elem % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for my $item (@$test_tuple) {\n        if (ref $item eq 'ARRAY') {\n            push @result, extract_even($item);\n        } elsif ($item % 2 == 0) {\n            push @result, $item;\n        }\n    }\n    return @result;\n}",
    "    my @even_elements;\n    foreach my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @even_elements, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_elements, $element;\n        }\n    }\n    return @even_elements;\n}",
    "    my @result;\n    foreach my $elem (@$test_tuple) {\n        if (ref $elem eq 'ARRAY') {\n            push @result, extract_even($elem);\n        } else {\n            push @result, $elem if $elem % 2 == 0;\n        }\n    }\n    return \\@result;\n}",
    "    my @even_tuple = ();\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_tuple, extract_even($element);\n        } else {\n            push @even_tuple, $element if $element % 2 == 0;\n        }\n    }\n    return @even_tuple;\n}",
    "    my @even_elements;\n    foreach my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @even_elements, extract_even($element);\n        } else {\n            push @even_elements, $element if $element % 2 == 0;\n        }\n    }\n    return @even_elements;\n}",
    "    my @result = ();\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @result, extract_even($element);\n        }\n        else {\n            push @result, $element if $element % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @even_array = ();\n    foreach my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @even_array, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_array, $element;\n        }\n    }\n    return @even_array;\n}",
    "    my @even_array;\n    for my $i (0..$#{$test_tuple}) {\n        if (ref($test_tuple->[$i]) eq 'ARRAY') {\n            push @even_array, extract_even($test_tuple->[$i]);\n        }\n        else {\n            push @even_array, $test_tuple->[$i] if $test_tuple->[$i] % 2 == 0;\n        }\n    }\n    return @even_array;\n}",
    "    my @result;\n    for my $elem (@$test_tuple) {\n        if (ref $elem eq 'ARRAY') {\n            push @result, extract_even($elem);\n        }\n        elsif ($elem % 2 == 0) {\n            push @result, $elem;\n        }\n    }\n    return @result;\n}",
    "    my @even_elements;\n    for my $element (@$test_tuple) {\n        if (ref $element) {\n            push @even_elements, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_elements, $element;\n        }\n    }\n    return @even_elements;\n}",
    "    my @even_list;\n    foreach my $elem (@$test_tuple) {\n        if (ref($elem) eq 'ARRAY') {\n            push @even_list, extract_even($elem);\n        } else {\n            push @even_list, $elem if $elem % 2 == 0;\n        }\n    }\n    return @even_list;\n}",
    "    my @even_list = ();\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_list, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_list, $element;\n        }\n    }\n    return @even_list;\n}",
    "    my @even_list = ();\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_list, extract_even($element);\n        }\n        else {\n            push @even_list, $element if ($element % 2 == 0);\n        }\n    }\n    return @even_list;\n}",
    "    my @even_tuple;\n    for my $i (0 .. $#{$test_tuple}) {\n        if (ref $test_tuple->[$i] eq 'ARRAY') {\n            push @even_tuple, extract_even($test_tuple->[$i]);\n        }\n        elsif ($test_tuple->[$i] % 2 == 0) {\n            push @even_tuple, $test_tuple->[$i];\n        }\n    }\n    return @even_tuple;\n}",
    "    my @even_numbers = ();\n    foreach my $i (@$test_tuple) {\n        if (ref($i) eq 'ARRAY') {\n            push @even_numbers, extract_even($i);\n        } else {\n            push @even_numbers, $i if $i % 2 == 0;\n        }\n    }\n    return @even_numbers;\n}",
    "    my @even_list;\n    for my $item (@$test_tuple) {\n        if (ref $item) {\n            push @even_list, extract_even($item);\n        } else {\n            push @even_list, $item if $item % 2 == 0;\n        }\n    }\n    return @even_list;\n}",
    "    my @even_array = ();\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_array, extract_even($element);\n        } else {\n            push @even_array, $element if ($element % 2 == 0);\n        }\n    }\n    return @even_array;\n}",
    "    my @even_list = ();\n    for my $elem (@$test_tuple) {\n        if (ref $elem eq 'ARRAY') {\n            push @even_list, extract_even($elem);\n        }\n        else {\n            push @even_list, $elem if $elem % 2 == 0;\n        }\n    }\n    return @even_list;\n}",
    "    my @even_elements;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_elements, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_elements, $element;\n        }\n    }\n    return @even_elements;\n}",
    "    my @result;\n    for my $elem (@$test_tuple) {\n        if (ref $elem eq 'ARRAY') {\n            push @result, extract_even($elem);\n        } else {\n            push @result, $elem if $elem % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @result = ();\n    foreach my $elem (@$test_tuple) {\n        if (ref($elem) eq 'ARRAY') {\n            my $sub_result = extract_even($elem);\n            push @result, $sub_result if @$sub_result;\n        }\n        elsif ($elem % 2 == 0) {\n            push @result, $elem;\n        }\n    }\n    return \\@result;\n}",
    "    my @even_elements;\n    foreach my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @even_elements, extract_even($element);\n        }\n        else {\n            push @even_elements, $element if $element % 2 == 0;\n        }\n    }\n    return @even_elements;\n}",
    "    my @even_list;\n    foreach my $item (@{$test_tuple}) {\n        if (ref($item) eq 'ARRAY') {\n            push @even_list, extract_even($item);\n        } else {\n            push @even_list, $item if $item % 2 == 0;\n        }\n    }\n    return @even_list;\n}",
    "    my @even_elements = ();\n    for my $element (@$test_tuple) {\n        if (ref $element) {\n            push @even_elements, extract_even($element);\n        }\n        else {\n            push @even_elements, $element if $element % 2 == 0;\n        }\n    }\n    return @even_elements;\n}",
    "    my @result;\n    for my $tuple (@$test_tuple) {\n        my @new_tuple;\n        for my $elem (@$tuple) {\n            if (ref $elem) {\n                push @new_tuple, extract_even($elem);\n            } else {\n                push @new_tuple, $elem if $elem % 2 == 0;\n            }\n        }\n        push @result, \\@new_tuple;\n    }\n    return \\@result;\n}",
    "    my @even_list = ();\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_list, extract_even($element);\n        } else {\n            push @even_list, $element if $element % 2 == 0;\n        }\n    }\n    return @even_list;\n}",
    "    my @even_array;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq \"ARRAY\") {\n            push @even_array, extract_even($element);\n        }\n        else {\n            push @even_array, $element if ($element % 2 == 0);\n        }\n    }\n    return @even_array;\n}",
    "    my @even_array;\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_array, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_array, $element;\n        }\n    }\n    return @even_array;\n}",
    "    my @even_list = ();\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_list, extract_even($element);\n        } elsif ($element % 2 == 0) {\n            push @even_list, $element;\n        }\n    }\n    return @even_list;\n}",
    "    my $result = [];\n    for my $elem (@$test_tuple) {\n        if (ref $elem eq 'ARRAY') {\n            push @$result, extract_even($elem);\n        } else {\n            push @$result, $elem if $elem % 2 == 0;\n        }\n    }\n    return $result;\n}",
    "    my @even_elements;\n    for my $element (@$test_tuple) {\n        if (ref $element) {\n            push @even_elements, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @even_elements, $element;\n        }\n    }\n    return @even_elements;\n}",
    "    my @even_list = ();\n    foreach my $element (@$test_tuple) {\n        if (ref($element) eq 'ARRAY') {\n            push @even_list, extract_even($element);\n        } else {\n            push @even_list, $element if $element % 2 == 0;\n        }\n    }\n    return @even_list;\n}",
    "    my @even_tuple;\n    for my $tuple (@$test_tuple) {\n        if (ref $tuple eq 'ARRAY') {\n            push @even_tuple, extract_even($tuple);\n        } else {\n            push @even_tuple, $tuple if $tuple % 2 == 0;\n        }\n    }\n    return \\@even_tuple;\n}",
    "    my @even_list;\n    my @odd_list;\n    my @result;\n    foreach my $item (@$test_tuple) {\n        if (ref $item eq 'ARRAY') {\n            my @temp_list = extract_even($item);\n            push @result, \\@temp_list;\n        }\n        elsif ($item % 2 == 0) {\n            push @even_list, $item;\n        }\n        else {\n            push @odd_list, $item;\n        }\n    }\n    push @result, \\@even_list;\n    push @result, \\@odd_list;\n    return @result;\n}",
    "    my @result;\n    for my $elem (@$test_tuple) {\n        if (ref $elem) {\n            push @result, extract_even($elem);\n        } else {\n            push @result, $elem if $elem % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @result = ();\n    foreach my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @result, extract_even($element);\n        } else {\n            push @result, $element if $element % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @even_list = ();\n    foreach my $item (@$test_tuple) {\n        if (ref($item) eq 'ARRAY') {\n            push @even_list, extract_even($item);\n        } elsif ($item % 2 == 0) {\n            push @even_list, $item;\n        }\n    }\n    return @even_list;\n}",
    "    my @result = ();\n    foreach my $elem (@$test_tuple) {\n        if (ref $elem eq 'ARRAY') {\n            push @result, extract_even($elem);\n        } else {\n            push @result, $elem if $elem % 2 == 0;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for my $element (@$test_tuple) {\n        if (ref $element eq 'ARRAY') {\n            push @result, extract_even($element);\n        }\n        elsif ($element % 2 == 0) {\n            push @result, $element;\n        }\n    }\n    return @result;\n}"
  ]
}