{
  "name": "mbpp_247_lps",
  "language": "pl",
  "prompt": "# Write a function to find the length of the longest palindromic subsequence in the given string.\nsub lps {\n    my($str) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_247_lps.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&lps;\n        if(eq_deeply($candidate->(\"TENS FOR TENS\"),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"CARDIO FOR CARDS\"),7)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"PART OF THE JOURNEY IS PART\"),9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $n = length($str);\n    my @dp = ();\n    for(my $i = 0; $i < $n; $i++) {\n        $dp[$i][$i] = 1;\n    }\n    for(my $len = 2; $len <= $n; $len++) {\n        for(my $i = 0; $i < $n - $len + 1; $i++) {\n            my $j = $i + $len - 1;\n            if($str->[$i] eq $str->[$j] && $len == 2) {\n                $dp[$i][$j] = 2;\n            }\n            elsif($str->[$i] eq $str->[$j]) {\n                $dp[$i][$j] = $dp[$i + 1][$j - 1] + 2;\n            }\n            else {\n                $dp[$i][$j] = max($dp[$i + 1][$j], $dp[$i][$j - 1]);\n            }\n        }\n    }\n    return $dp[0][$n - 1];\n}",
    "    my @str = split //, $str;\n    my @lps;\n    for my $i (0 .. $#str) {\n        $lps[$i][$i] = 1;\n    }\n    for my $len (2 .. $#str + 1) {\n        for my $i (0 .. $#str - $len + 1) {\n            my $j = $i + $len - 1;\n            if ($str[$i] eq $str[$j] and $len == 2) {\n                $lps[$i][$j] = 2;\n            } elsif ($str[$i] eq $str[$j]) {\n                $lps[$i][$j] = $lps[$i + 1][$j - 1] + 2;\n            } else {\n                $lps[$i][$j] = max($lps[$i][$j - 1], $lps[$i + 1][$j]);\n            }\n        }\n    }\n    return $lps[0][$#str];\n}",
    "    my $n = length($str);\n    my @l = (0) x $n;\n    for my $i (0..$n-1) {\n        $l[$i][$i] = 1;\n    }\n    for my $cl (2..$n) {\n        for my $i (0..$n-$cl) {\n            my $j = $i + $cl - 1;\n            if ($str->[$i] eq $str->[$j] && $cl == 2) {\n                $l[$i][$j] = 2;\n            } elsif ($str->[$i] eq $str->[$j]) {\n                $l[$i][$j] = $l[$i+1][$j-1] + 2;\n            } else {\n                $l[$i][$j] = max($l[$i][$j-1], $l[$i+1][$j]);\n            }\n        }\n    }\n    return $l[0][$n-1];\n}",
    "    my $n = length($str);\n    my @dp = (0) x $n;\n    for my $i (0..$n-1) {\n        $dp[$i][$i] = 1;\n    }\n    for my $len (2..$n) {\n        for my $i (0..$n-$len) {\n            my $j = $i + $len - 1;\n            if ($str->[$i] eq $str->[$j] && $len == 2) {\n                $dp[$i][$j] = 2;\n            } elsif ($str->[$i] eq $str->[$j]) {\n                $dp[$i][$j] = $dp[$i+1][$j-1] + 2;\n            } else {\n                $dp[$i][$j] = max($dp[$i+1][$j], $dp[$i][$j-1]);\n            }\n        }\n    }\n    return $dp[0][$n-1];\n}",
    "    my @arr = split //, $str;\n    my $n = scalar @arr;\n    my @dp = (0) x $n;\n    for my $i (0..$n-1) {\n        $dp[$i][$i] = 1;\n    }\n    for my $len (2..$n) {\n        for my $i (0..$n-$len) {\n            my $j = $i + $len - 1;\n            if ($arr[$i] eq $arr[$j] && $len == 2) {\n                $dp[$i][$j] = 2;\n            } elsif ($arr[$i] eq $arr[$j]) {\n                $dp[$i][$j] = $dp[$i+1][$j-1] + 2;\n            } else {\n                $dp[$i][$j] = max($dp[$i][$j-1], $dp[$i+1][$j]);\n            }\n        }\n    }\n    return $dp[0][$n-1];\n}",
    "    my $n = length($str);\n    my @lps = ();\n    for my $i (0..$n-1) {\n        $lps[$i][$i] = 1;\n    }\n    for my $len (2..$n) {\n        for my $i (0..$n-$len) {\n            my $j = $i + $len - 1;\n            if ($str->[$i] eq $str->[$j] && $len == 2) {\n                $lps[$i][$j] = 2;\n            } elsif ($str->[$i] eq $str->[$j]) {\n                $lps[$i][$j] = $lps[$i+1][$j-1] + 2;\n            } else {\n                $lps[$i][$j] = max($lps[$i][$j-1], $lps[$i+1][$j]);\n            }\n        }\n    }\n    return $lps[0][$n-1];\n}",
    "    my $n = length($str);\n    my @lps = (1) x $n;\n    for my $i (1 .. $n - 1) {\n        my $j = $i - 1;\n        my $k = $i + 1;\n        while ($j >= 0 && $k < $n && substr($str, $j, 1) eq substr($str, $k, 1)) {\n            $lps[$i] += 2;\n            $j--;\n            $k++;\n        }\n    }\n    for my $i (0 .. $n - 2) {\n        my $j = $i;\n        my $k = $i + 1;\n        while ($j >= 0 && $k < $n && substr($str, $j, 1) eq substr($str, $k, 1)) {\n            $lps[$i] = $lps[$k] = $lps[$i] + 2;\n            $j--;\n            $k++;\n        }\n    }\n    return max(@lps);\n}",
    "    my @arr = split //, $str;\n    my $len = scalar @arr;\n    my @lps;\n    for my $i (0..$len-1) {\n        $lps[$i][$i] = 1;\n    }\n    for my $i (0..$len-2) {\n        if ($arr[$i] eq $arr[$i+1]) {\n            $lps[$i][$i+1] = 2;\n        } else {\n            $lps[$i][$i+1] = 1;\n        }\n    }\n    for my $k (2..$len-1) {\n        for my $i (0..$len-$k-1) {\n            my $j = $i + $k;\n            if ($arr[$i] eq $arr[$j]) {\n                $lps[$i][$j] = $lps[$i+1][$j-1] + 2;\n            } else {\n                $lps[$i][$j] = max($lps[$i][$j-1], $lps[$i+1][$j]);\n            }\n        }\n    }\n    return $lps[0][$len-1];\n}",
    "    my $n = length($str);\n    my @lps = (0) x $n;\n    my $i;\n    for ($i = 0; $i < $n; $i++) {\n        $lps[$i][$i] = 1;\n    }\n    my $j;\n    for ($i = 2; $i <= $n; $i++) {\n        for ($j = 0; $j < $n - $i + 1; $j++) {\n            my $k = $j + $i - 1;\n            if ($str->[$j] eq $str->[$k] && $i == 2) {\n                $lps[$j][$k] = 2;\n            } elsif ($str->[$j] eq $str->[$k]) {\n                $lps[$j][$k] = $lps[$j + 1][$k - 1] + 2;\n            } else {\n                $lps[$j][$k] = max($lps[$j][$k - 1], $lps[$j + 1][$k]);\n            }\n        }\n    }\n    return $lps[0][$n - 1];\n}",
    "    my $n = length($str);\n    my @lps;\n    for my $i (0..$n) {\n        $lps[$i][$i] = 1;\n    }\n    for my $len (2..$n) {\n        for my $i (0..$n-$len) {\n            my $j = $i + $len - 1;\n            if ($str->[$i] eq $str->[$j] && $len == 2) {\n                $lps[$i][$j] = 2;\n            } elsif ($str->[$i] eq $str->[$j]) {\n                $lps[$i][$j] = $lps[$i+1][$j-1] + 2;\n            } else {\n                $lps[$i][$j] = max($lps[$i][$j-1], $lps[$i+1][$j]);\n            }\n        }\n    }\n    return $lps[0][$n-1];\n}",
    "    my $n = length($str);\n    my @lps = (1) x $n;\n    for my $i (0 .. $n - 2) {\n        if (substr($str, $i, 1) eq substr($str, $i + 1, 1)) {\n            $lps[$i] = 2;\n        }\n    }\n    for my $k (3 .. $n) {\n        for my $i (0 .. $n - $k) {\n            my $j = $i + $k - 1;\n            if (substr($str, $i, 1) eq substr($str, $j, 1)) {\n                $lps[$i] = $k;\n            }\n        }\n    }\n    return max(@lps);\n}",
    "    my $n = length($str);\n    my @lps = (1) x $n;\n    for my $i (1..$n-1) {\n        my $j = $i-1;\n        my $k = $i+1;\n        while ($j >= 0 && $k < $n && substr($str, $j, 1) eq substr($str, $k, 1)) {\n            $lps[$i] += 2;\n            $j--;\n            $k++;\n        }\n    }\n    for my $i (0..$n-2) {\n        my $j = $i;\n        my $k = $i+1;\n        while ($j >= 0 && $k < $n && substr($str, $j, 1) eq substr($str, $k, 1)) {\n            $lps[$i] = $lps[$k] = $lps[$i] + 2;\n            $j--;\n            $k++;\n        }\n    }\n    return max(@lps);\n}",
    "    my $n = length($str);\n    my @lps = (1) x $n;\n    for my $i (1..$n-1) {\n        my $j = $i-1;\n        while ($j >= 0) {\n            if (substr($str, $i, 1) eq substr($str, $j, 1)) {\n                $lps[$i] = $lps[$j-1] + 2;\n                last;\n            }\n            $j--;\n        }\n    }\n    return max(@lps);\n}",
    "    my $n = length($str);\n    my @dp = ();\n    for (my $i = 0; $i < $n; $i++) {\n        $dp[$i][$i] = 1;\n    }\n    for (my $len = 2; $len <= $n; $len++) {\n        for (my $i = 0; $i < $n - $len + 1; $i++) {\n            my $j = $i + $len - 1;\n            if ($str->[$i] eq $str->[$j] && $len == 2) {\n                $dp[$i][$j] = 2;\n            } elsif ($str->[$i] eq $str->[$j]) {\n                $dp[$i][$j] = $dp[$i + 1][$j - 1] + 2;\n            } else {\n                $dp[$i][$j] = max($dp[$i][$j - 1], $dp[$i + 1][$j]);\n            }\n        }\n    }\n    return $dp[0][$n - 1];\n}",
    "    my $len = length($str);\n    my @dp = ();\n    for (my $i = 0; $i < $len; $i++) {\n        $dp[$i][$i] = 1;\n    }\n    for (my $l = 2; $l <= $len; $l++) {\n        for (my $i = 0; $i < $len - $l + 1; $i++) {\n            my $j = $i + $l - 1;\n            if ($str->[$i] eq $str->[$j] && $l == 2) {\n                $dp[$i][$j] = 2;\n            } elsif ($str->[$i] eq $str->[$j]) {\n                $dp[$i][$j] = $dp[$i + 1][$j - 1] + 2;\n            } else {\n                $dp[$i][$j] = max($dp[$i][$j - 1], $dp[$i + 1][$j]);\n            }\n        }\n    }\n    return $dp[0][$len - 1];\n}",
    "    my $n = length($str);\n    my @dp = ();\n    for (my $i = 0; $i < $n; $i++) {\n        $dp[$i][$i] = 1;\n    }\n    for (my $len = 2; $len <= $n; $len++) {\n        for (my $i = 0; $i < $n - $len + 1; $i++) {\n            my $j = $i + $len - 1;\n            if ($str->[$i] eq $str->[$j] && $len == 2) {\n                $dp[$i][$j] = 2;\n            } elsif ($str->[$i] eq $str->[$j]) {\n                $dp[$i][$j] = $dp[$i + 1][$j - 1] + 2;\n            } else {\n                $dp[$i][$j] = max($dp[$i][$j - 1], $dp[$i + 1][$j]);\n            }\n        }\n    }\n    return $dp[0][$n - 1];\n}",
    "    my $n = length($str);\n    my @dp = map { [ (0) x ($n+1) ] } (0..$n);\n    for my $i (0..$n) {\n        $dp[$i][$i] = 1;\n    }\n    for my $len (2..$n) {\n        for my $i (0..$n-$len+1) {\n            my $j = $i + $len - 1;\n            if ($str->[$i] eq $str->[$j] && $len == 2) {\n                $dp[$i][$j] = 2;\n            } elsif ($str->[$i] eq $str->[$j]) {\n                $dp[$i][$j] = $dp[$i+1][$j-1] + 2;\n            } else {\n                $dp[$i][$j] = max($dp[$i+1][$j], $dp[$i][$j-1]);\n            }\n        }\n    }\n    return $dp[0][$n-1];\n}",
    "    my $n = length($str);\n    my @lps = (0) x $n;\n    my @lps_prev = (0) x $n;\n    for my $i (0..$n-1) {\n        $lps[$i] = 1;\n        for my $j (0..$i-1) {\n            if (substr($str, $j, 1) eq substr($str, $i, 1)) {\n                $lps[$j] = $lps_prev[$j-1] + 2;\n            } else {\n                $lps[$j] = max($lps_prev[$j], $lps[$j-1]);\n            }\n        }\n        @lps_prev = @lps;\n    }\n    return $lps[$n-1];\n}",
    "    my $n = length($str);\n    my @l = (0) x $n;\n    for my $i (0..$n-1) {\n        $l[$i][$i] = 1;\n    }\n    for my $cl (2..$n) {\n        for my $i (0..$n-$cl) {\n            my $j = $i + $cl - 1;\n            if ($str->[$i] eq $str->[$j] && $cl == 2) {\n                $l[$i][$j] = 2;\n            } elsif ($str->[$i] eq $str->[$j]) {\n                $l[$i][$j] = $l[$i+1][$j-1] + 2;\n            } else {\n                $l[$i][$j] = max($l[$i][$j-1], $l[$i+1][$j]);\n            }\n        }\n    }\n    return $l[0][$n-1];\n}",
    "    my $n = length($str);\n    my @lps = (0) x $n;\n    my @lps_rev = (0) x $n;\n    my $max = 0;\n    for(my $i = 0; $i < $n; $i++) {\n        $lps[$i] = 1;\n        $lps_rev[$i] = 1;\n    }\n    for(my $i = 1; $i < $n; $i++) {\n        for(my $j = 0; $j < $i; $j++) {\n            if(substr($str, $i, 1) eq substr($str, $j, 1)) {\n                $lps[$i] = $lps[$j] + 1;\n            }\n            if(substr($str, $n - $i - 1, 1) eq substr($str, $n - $j - 1, 1)) {\n                $lps_rev[$i] = $lps_rev[$j] + 1;\n            }\n        }\n        $max = $lps[$i] if $lps[$i] > $max;\n        $max = $lps_rev[$i] if $lps_rev[$i] > $max;\n    }\n    return $max;\n}"
  ]
}