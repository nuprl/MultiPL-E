{
  "name": "mbpp_635_heap_sort",
  "language": "pl",
  "prompt": "# Write a function to sort the given array.\nsub heap_sort {\n    my($iterable) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_635_heap_sort.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&heap_sort;\n        if(eq_deeply($candidate->([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]),[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([25, 35, 22, 85, 14, 65, 75, 25, 58]),[14, 22, 25, 25, 35, 58, 65, 75, 85])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7, 1, 9, 5]),[1, 5, 7, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $heap = Heap::Fibonacci->new;\n    $heap->add($_) for @$iterable;\n    return [$heap->extract_top foreach 1 .. @$iterable];\n}",
    "    my $heap = Heap::Fibonacci->new;\n    $heap->add($_) for @$iterable;\n    return [$heap->extract_top foreach 1..@$iterable];\n}",
    "    my @array = @$iterable;\n    my $n = scalar @array;\n    for (my $i = int($n / 2) - 1; $i >= 0; $i--) {\n        heapify(\\@array, $n, $i);\n    }\n    for (my $i = $n - 1; $i >= 0; $i--) {\n        swap(\\@array, 0, $i);\n        heapify(\\@array, $i, 0);\n    }\n    return @array;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        type => 'array',\n        elements => $iterable,\n    );\n    my @sorted;\n    while (my $item = $heap->extract_first) {\n        push @sorted, $item;\n    }\n    return @sorted;\n}",
    "    my $heap = Heap::Simple->new(order => '<', type => 'array');\n    $heap->add($iterable);\n    return $heap->extract_all;\n}",
    "    my @array = @$iterable;\n    my $size = scalar @array;\n    my $i;\n    for ($i = $size / 2 - 1; $i >= 0; $i--) {\n        heapify(\\@array, $size, $i);\n    }\n    for ($i = $size - 1; $i >= 0; $i--) {\n        swap(\\@array, 0, $i);\n        heapify(\\@array, $i, 0);\n    }\n    return \\@array;\n}",
    "    my $heap = Heap::Fibonacci->new;\n    $heap->add($_) for @$iterable;\n    return [$heap->extract_top foreach 1 .. @$iterable];\n}",
    "    my $heap = Heap::Fibonacci->new;\n    $heap->add($_) for @$iterable;\n    my @sorted;\n    while (my $item = $heap->extract_top) {\n        push @sorted, $item;\n    }\n    return \\@sorted;\n}",
    "    my $heap = Heap::Fibonacci->new;\n    $heap->add($_) for @$iterable;\n    return [ $heap->extract_top foreach 1 .. @$iterable ];\n}",
    "    my $heap = Heap::Fibonacci->new;\n    for my $item (@$iterable) {\n        $heap->key_insert($item, $item);\n    }\n    my @result;\n    while (my $item = $heap->extract_top) {\n        push @result, $item;\n    }\n    return @result;\n}",
    "    my @array = @$iterable;\n    my $heap = Heap::Simple->new(order => \">\", type => \"num\");\n    $heap->add(@array);\n    my @sorted;\n    while (my $max = $heap->extract_first) {\n        push @sorted, $max;\n    }\n    return \\@sorted;\n}",
    "    my $heap = Heap::Fibonacci->new;\n    $heap->add($_) for @$iterable;\n    my @result;\n    while (my $item = $heap->extract_top) {\n        push @result, $item;\n    }\n    return @result;\n}",
    "\n    my $heap = Heap::Fibonacci->new;\n    $heap->add($_) for @$iterable;",
    "    my $heap = Heap::Fibonacci->new;\n    $heap->add($_) for @$iterable;\n    return [$heap->extract_top foreach 1..@$iterable];\n}",
    "    my @array = @$iterable;\n    my $n = scalar @array;\n    my $i = int($n / 2) - 1;\n    while ($i >= 0) {\n        heapify(\\@array, $n, $i);\n        $i--;\n    }\n    $i = $n - 1;\n    while ($i >= 0) {\n        swap(\\@array, 0, $i);\n        heapify(\\@array, $i, 0);\n        $i--;\n    }\n    return @array;\n}",
    "    my $heap = Heap::Fibonacci->new;\n    $heap->add($_) for @$iterable;\n    return [ $heap->extract_top foreach 1 .. @$iterable ];\n}",
    "    my $heap = Heap::Fibonacci->new;\n    $heap->add($_) for @$iterable;\n    return [$heap->extract_top foreach 1 .. @$iterable];\n}",
    "    my $heap = Heap::Fibonacci->new;\n    $heap->add($_) for @$iterable;\n    return [$heap->extract_top foreach 1..@$iterable];\n}",
    "    my $heap = Heap::Fibonacci->new;\n    $heap->add($_) for @$iterable;\n    return [$heap->extract_top foreach 1..@$iterable];\n}",
    "    my @array = @$iterable;"
  ]
}