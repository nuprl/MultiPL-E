{
  "name": "mbpp_733_find_first_occurrence",
  "language": "pl",
  "prompt": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_733_find_first_occurrence.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $n = scalar @$A;\n    my $l = 0;\n    my $r = $n - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}",
    "    my $n = scalar(@$A);\n    my $left = 0;\n    my $right = $n - 1;\n    my $result = -1;\n    while ($left <= $right) {\n        my $mid = int(($left + $right) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $right = $mid - 1;\n        } elsif ($A->[$mid] < $x) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $m = int(($l + $r) / 2);\n    while ($l <= $r) {\n        if ($A->[$m] == $x) {\n            if ($m == 0 || $A->[$m - 1] != $x) {\n                return $m;\n            }\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n        $m = int(($l + $r) / 2);\n    }\n    return -1;\n}",
    "    my $low = 0;\n    my $high = scalar @$A - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            if ($m == 0 || $A->[$m - 1] != $x) {\n                return $m;\n            } else {\n                $r = $m - 1;\n            }\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return -1;\n}",
    "    my $n = scalar(@$A);\n    my $l = 0;\n    my $r = $n - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $m;\n    while ($l <= $r) {\n        $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            if ($m == 0 || $A->[$m - 1] != $x) {\n                return $m;\n            }\n            $r = $m - 1;\n        }\n        elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        }\n        else {\n            $r = $m - 1;\n        }\n    }\n    return -1;\n}",
    "    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] < $x) {\n            $low = $mid + 1;\n        } else {\n            $high = $mid - 1;\n        }\n    }\n    return $result;\n}",
    "    my $n = scalar(@$A);\n    my $l = 0;\n    my $u = $n - 1;\n    my $result = -1;\n    while ($l <= $u) {\n        my $m = int(($l + $u) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $u = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $u = $m - 1;\n        }\n    }\n    return $result;\n}",
    "    my $left = 0;\n    my $right = scalar(@$A) - 1;\n    my $result = -1;\n    while ($left <= $right) {\n        my $mid = int(($left + $right) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $right = $mid - 1;\n        } elsif ($A->[$mid] < $x) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $result;\n}",
    "    my $n = scalar @$A;\n    my $left = 0;\n    my $right = $n - 1;\n    my $result = -1;\n    while ($left <= $right) {\n        my $mid = int(($left + $right) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $right = $mid - 1;\n        } elsif ($A->[$mid] < $x) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        }\n        elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        }\n        else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $n = scalar(@$A);\n    my $l = 0;\n    my $r = $n - 1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            if ($m == 0 || $A->[$m - 1] != $x) {\n                return $m;\n            } else {\n                $r = $m - 1;\n            }\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return -1;\n}",
    "    my $n = scalar(@$A);\n    my $l = 0;\n    my $u = $n - 1;\n    my $result = -1;\n    while ($l <= $u) {\n        my $m = int(($l + $u) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $u = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $u = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = $#{$A};\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] < $x) {\n            $low = $mid + 1;\n        } else {\n            $high = $mid - 1;\n        }\n    }\n    return $result;\n}",
    "    my $n = scalar(@$A);\n    my $left = 0;\n    my $right = $n - 1;\n    my $result = -1;\n    while ($left <= $right) {\n        my $mid = int(($left + $right) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $right = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $n = scalar(@$A);\n    my $l = 0;\n    my $r = $n - 1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            if ($m == 0 || $A->[$m - 1] != $x) {\n                return $m;\n            }\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return -1;\n}",
    "    my $l = 0;\n    my $u = scalar(@$A) - 1;\n    my $m = 0;\n    my $result = -1;\n    while ($l <= $u) {\n        $m = int(($l + $u) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $u = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $u = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar @$A - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my($l, $r) = (0, scalar(@$A) - 1);\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] < $x) {\n            $l = $m + 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $result = $m;\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $u = scalar(@$A) - 1;\n    my $m;\n    my $result = -1;\n    while ($l <= $u) {\n        $m = int(($l + $u) / 2);\n        if ($A->[$m] < $x) {\n            $l = $m + 1;\n        }\n        elsif ($A->[$m] > $x) {\n            $u = $m - 1;\n        }\n        else {\n            $result = $m;\n            $u = $m - 1;\n        }\n    }\n    return $result;\n}",
    "    my $n = scalar(@$A);\n    my $left = 0;\n    my $right = $n - 1;\n    my $result = -1;\n    while ($left <= $right) {\n        my $mid = int(($left + $right) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $right = $mid - 1;\n        } elsif ($A->[$mid] < $x) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $n = scalar(@$A);\n    my $l = 0;\n    my $u = $n - 1;\n    my $result = -1;\n    while ($l <= $u) {\n        my $m = int(($l + $u) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $u = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $u = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $n = scalar(@$A);\n    my $l = 0;\n    my $u = $n - 1;\n    my $result = -1;\n    while ($l <= $u) {\n        my $m = int(($l + $u) / 2);\n        if ($A->[$m] < $x) {\n            $l = $m + 1;\n        } elsif ($A->[$m] > $x) {\n            $u = $m - 1;\n        } else {\n            $result = $m;\n            $u = $m - 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $u = scalar(@$A) - 1;\n    my $m;\n    my $result = -1;\n    while ($l <= $u) {\n        $m = int(($l + $u) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $u = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $u = $m - 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $m;\n    my $result = -1;\n    while ($l <= $r) {\n        $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}",
    "    my $n = scalar @$A;\n    my $left = 0;\n    my $right = $n - 1;\n    my $result = -1;\n    while ($left <= $right) {\n        my $mid = int(($left + $right) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $right = $mid - 1;\n        } elsif ($A->[$mid] < $x) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $result;\n}",
    "    my $n = scalar @$A;\n    my $left = 0;\n    my $right = $n - 1;\n    my $result = -1;\n    while ($left <= $right) {\n        my $mid = int(($left + $right) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $right = $mid - 1;\n        } elsif ($A->[$mid] < $x) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $result;\n}",
    "    my $left = 0;\n    my $right = scalar(@$A) - 1;\n    my $result = -1;\n    while ($left <= $right) {\n        my $mid = $left + int(($right - $left) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $right = $mid - 1;\n        } elsif ($A->[$mid] < $x) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $m;\n    my $result = -1;\n    while ($l <= $r) {\n        $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $n = scalar @$A;\n    my $l = 0;\n    my $r = $n - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}",
    "    my $n = scalar(@$A);\n    my $l = 0;\n    my $u = $n - 1;\n    my $result = -1;\n    while ($l <= $u) {\n        my $m = int(($l + $u) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $u = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $u = $m - 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $m;\n    while ($l <= $r) {\n        $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            if ($m == 0 || $A->[$m - 1] != $x) {\n                return $m;\n            }\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return -1;\n}",
    "    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $n = scalar @$A;\n    my $l = 0;\n    my $r = $n - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $n = scalar(@$A);\n    my $l = 0;\n    my $r = $n - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}",
    "    my $n = scalar(@$A);\n    my $l = 0;\n    my $u = $n - 1;\n    my $result = -1;\n    while ($l <= $u) {\n        my $m = int(($l + $u) / 2);\n        if ($A->[$m] > $x) {\n            $u = $m - 1;\n        }\n        elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        }\n        else {\n            $result = $m;\n            $u = $m - 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $u = $#{$A};\n    my $m;\n    my $result = -1;\n    while ($l <= $u) {\n        $m = int(($l + $u) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $u = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $u = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}",
    "    my $n = scalar(@$A);\n    my $l = 0;\n    my $u = $n - 1;\n    my $result = -1;\n    while ($l <= $u) {\n        my $m = int(($l + $u) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $u = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $u = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            if ($mid == 0 || $A->[$mid - 1] != $x) {\n                return $mid;\n            }\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return -1;\n}",
    "    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}",
    "    my $left = 0;\n    my $right = scalar(@$A) - 1;\n    my $result = -1;\n    while ($left <= $right) {\n        my $mid = int(($left + $right) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $right = $mid - 1;\n        } elsif ($A->[$mid] < $x) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $u = scalar(@$A) - 1;\n    my $m;\n    while ($l <= $u) {\n        $m = int(($l + $u) / 2);\n        if ($A->[$m] == $x) {\n            if ($m == 0 || $A->[$m - 1] != $x) {\n                return $m;\n            } else {\n                $u = $m - 1;\n            }\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $u = $m - 1;\n        }\n    }\n    return -1;\n}",
    "    my $l = 0;\n    my $h = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $h) {\n        my $m = int(($l + $h) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $h = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $h = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $u = scalar(@$A) - 1;\n    my $m;\n    my $result = -1;\n    while ($l <= $u) {\n        $m = int(($l + $u) / 2);\n        if ($A->[$m] > $x) {\n            $u = $m - 1;\n        }\n        elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        }\n        else {\n            $result = $m;\n            $u = $m - 1;\n        }\n    }\n    return $result;\n}",
    "    my $n = scalar(@$A);\n    my $l = 0;\n    my $r = $n - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}",
    "    my $n = scalar @$A;\n    my $l = 0;\n    my $r = $n - 1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            if ($m == 0 || $A->[$m - 1] != $x) {\n                return $m;\n            }\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return -1;\n}",
    "    my $low = 0;\n    my $high = $#{$A};\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] < $x) {\n            $low = $mid + 1;\n        }\n        elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        }\n        else {\n            $result = $mid;\n            $high = $mid - 1;\n        }\n    }\n    return $result;\n}",
    "    my $n = scalar(@$A);\n    my $l = 0;\n    my $r = $n - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}",
    "    my $n = scalar(@$A);\n    my $left = 0;\n    my $right = $n - 1;\n    my $result = -1;\n    while ($left <= $right) {\n        my $mid = int(($left + $right) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $right = $mid - 1;\n        } elsif ($A->[$mid] < $x) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $u = scalar(@$A) - 1;\n    my $m;\n    my $result = -1;\n    while ($l <= $u) {\n        $m = int(($l + $u) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $u = $m - 1;\n        }\n        elsif ($A->[$m] > $x) {\n            $u = $m - 1;\n        }\n        else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $u = scalar(@$A) - 1;\n    my $m = 0;\n    my $result = -1;\n    while ($l <= $u) {\n        $m = int(($l + $u) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $u = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $u = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}",
    "    my $n = scalar @$A;\n    my $l = 0;\n    my $r = $n - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $left = 0;\n    my $right = scalar(@$A) - 1;\n    my $result = -1;\n    while ($left <= $right) {\n        my $mid = int(($left + $right) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $right = $mid - 1;\n        } elsif ($A->[$mid] < $x) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $result;\n}",
    "    my $n = scalar @$A;\n    my $l = 0;\n    my $r = $n - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}",
    "    my $n = scalar @$A;\n    my $l = 0;\n    my $u = $n - 1;\n    my $result = -1;\n    while ($l <= $u) {\n        my $m = int(($l + $u) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $u = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $u = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}",
    "    my $n = scalar(@$A);\n    my $l = 0;\n    my $u = $n - 1;\n    my $result = -1;\n    while ($l <= $u) {\n        my $m = int(($l + $u) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $u = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $u = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;",
    "    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] < $x) {\n            $low = $mid + 1;\n        } else {\n            $high = $mid - 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $n = scalar(@$A);\n    my $l = 0;\n    my $u = $n - 1;\n    my $result = -1;\n    while ($l <= $u) {\n        my $m = int(($l + $u) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $u = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $u = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $u = $#{$A};\n    my $m;\n    while ($l <= $u) {\n        $m = int(($l + $u) / 2);\n        if ($A->[$m] < $x) {\n            $l = $m + 1;\n        } elsif ($A->[$m] > $x) {\n            $u = $m - 1;\n        } else {\n            if ($m == 0 || $A->[$m - 1] < $x) {\n                return $m;\n            } else {\n                $u = $m - 1;\n            }\n        }\n    }\n    return -1;\n}",
    "    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $m = int(($l + $r) / 2);\n    my $first = -1;\n    while ($l <= $r) {\n        if ($A->[$m] == $x) {\n            $first = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n        $m = int(($l + $r) / 2);\n    }\n    return $first;\n}",
    "    my $left = 0;\n    my $right = scalar(@$A) - 1;\n    my $result = -1;\n    while ($left <= $right) {\n        my $mid = int(($left + $right) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $right = $mid - 1;\n        } elsif ($A->[$mid] < $x) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $result;\n}",
    "    my $left = 0;\n    my $right = scalar(@$A) - 1;\n    my $result = -1;\n    while ($left <= $right) {\n        my $mid = int(($left + $right) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $right = $mid - 1;\n        } elsif ($A->[$mid] < $x) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}",
    "    my $n = scalar(@$A);\n    my $l = 0;\n    my $u = $n - 1;\n    my $result = -1;\n    while ($l <= $u) {\n        my $m = int(($l + $u) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $u = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $u = $m - 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}",
    "    my $n = scalar @$A;\n    my $l = 0;\n    my $r = $n - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $u = scalar(@$A) - 1;\n    my $m;\n    my $result = -1;\n    while ($l <= $u) {\n        $m = int(($l + $u) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $u = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $u = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        }\n        elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        }\n        else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}",
    "    my $n = scalar(@$A);\n    my $l = 0;\n    my $r = $n - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}",
    "    my $n = scalar(@$A);\n    my $l = 0;\n    my $u = $n - 1;\n    my $result = -1;\n    while ($l <= $u) {\n        my $m = int(($l + $u) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $u = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $u = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $m;\n    my $result = -1;\n    while ($l <= $r) {\n        $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}",
    "    my $n = scalar(@$A);\n    my $l = 0;\n    my $r = $n - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $u = scalar(@$A) - 1;\n    my $m;\n    my $result = -1;\n    while ($l <= $u) {\n        $m = int(($l + $u) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $u = $m - 1;\n        }\n        elsif ($A->[$m] > $x) {\n            $u = $m - 1;\n        }\n        else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}",
    "    my $n = scalar(@$A);\n    my $left = 0;\n    my $right = $n - 1;\n    my $result = -1;\n    while ($left <= $right) {\n        my $mid = int(($left + $right) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $right = $mid - 1;\n        } elsif ($A->[$mid] < $x) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $r = $#$A;\n    my $m;\n    while ($l <= $r) {\n        $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            if ($m == 0 || $A->[$m - 1] != $x) {\n                return $m;\n            } else {\n                $r = $m - 1;\n            }\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return -1;\n}",
    "    my $n = scalar @$A;\n    my $l = 0;\n    my $r = $n - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] < $x) {\n            $l = $m + 1;\n        }\n        elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        }\n        else {\n            if ($m == 0 || $A->[$m - 1] < $x) {\n                return $m;\n            }\n            else {\n                $r = $m - 1;\n            }\n        }\n    }\n    return -1;\n}",
    "    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $n = scalar @$A;\n    my $l = 0;\n    my $r = $n - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        }\n        elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        }\n        else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            if ($m == 0 || $A->[$m - 1] != $x) {\n                return $m;\n            } else {\n                $r = $m - 1;\n            }\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return -1;\n}",
    "    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] < $x) {\n            $low = $mid + 1;\n        } else {\n            $high = $mid - 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $m;\n    my $result = -1;\n    while ($l <= $r) {\n        $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}",
    "    my $n = scalar @$A;\n    my $l = 0;\n    my $u = $n - 1;\n    my $result = -1;\n    while ($l <= $u) {\n        my $m = int(($l + $u) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $u = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $u = $m - 1;\n        }\n    }\n    return $result;\n}",
    "    my $n = scalar(@$A);\n    my $l = 0;\n    my $u = $n - 1;\n    my $result = -1;\n    while ($l <= $u) {\n        my $m = int(($l + $u)/2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $u = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $u = $m - 1;\n        }\n    }\n    return $result;\n}",
    "    my $n = scalar @$A;\n    my $l = 0;\n    my $r = $n - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}",
    "    my $n = scalar @$A;\n    my $l = 0;\n    my $r = $n - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($x == $A->[$m]) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($x < $A->[$m]) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}",
    "    my $n = scalar @$A;\n    my $l = 0;\n    my $u = $n - 1;\n    my $result = -1;\n    while ($l <= $u) {\n        my $m = int(($l + $u) / 2);\n        if ($A->[$m] > $x) {\n            $u = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $result = $m;\n            $u = $m - 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $m;\n    my $result = -1;\n    while ($l <= $r) {\n        $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] < $x) {\n            $low = $mid + 1;\n        } else {\n            $high = $mid - 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] < $x) {\n            $low = $mid + 1;\n        } else {\n            $high = $mid - 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $n = scalar(@$A);\n    my $l = 0;\n    my $r = $n - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}",
    "    my $n = scalar @$A;\n    my $l = 0;\n    my $r = $n - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        }\n        elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        }\n        else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $n = scalar(@$A);\n    my $l = 0;\n    my $u = $n - 1;\n    my $result = -1;\n    while ($l <= $u) {\n        my $m = int(($l + $u) / 2);\n        if ($A->[$m] > $x) {\n            $u = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $result = $m;\n            $u = $m - 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $m;\n    my $result = -1;\n    while ($l <= $r) {\n        $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $u = scalar(@$A) - 1;\n    my $m;\n    my $result = -1;\n    while ($l <= $u) {\n        $m = int(($l + $u) / 2);\n        if ($A->[$m] > $x) {\n            $u = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $result = $m;\n            $u = $m - 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] < $x) {\n            $l = $m + 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $result = $m;\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}",
    "    my $n = scalar @$A;\n    my $l = 0;\n    my $r = $n - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $u = scalar(@$A) - 1;\n    my $m;\n    my $result = -1;\n    while ($l <= $u) {\n        $m = int(($l + $u) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $u = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $u = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}",
    "    my $n = scalar(@$A);\n    my $l = 0;\n    my $r = $n - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}",
    "    my $n = scalar(@$A);\n    my $l = 0;\n    my $r = $n - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}",
    "    my $left = 0;\n    my $right = scalar(@$A) - 1;\n    my $result = -1;\n    while ($left <= $right) {\n        my $mid = int(($left + $right) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $right = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $right = $mid - 1;\n        } else {\n            $left = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $n = scalar @$A;\n    my $l = 0;\n    my $u = $n - 1;\n    my $result = -1;\n    while ($l <= $u) {\n        my $m = int(($l + $u) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $u = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $u = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}",
    "    my $lo = 0;\n    my $hi = scalar(@$A) - 1;\n    my $result = -1;\n    while ($lo <= $hi) {\n        my $mid = int(($lo + $hi) / 2);\n        if ($A->[$mid] > $x) {\n            $hi = $mid - 1;\n        } elsif ($A->[$mid] < $x) {\n            $lo = $mid + 1;\n        } else {\n            $result = $mid;\n            $hi = $mid - 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] < $x) {\n            $low = $mid + 1;\n        } else {\n            $high = $mid - 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $r = scalar @$A - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $u = scalar(@$A) - 1;\n    my $m;\n    my $result = -1;\n    while ($l <= $u) {\n        $m = int(($l + $u) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $u = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $u = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}",
    "    my $n = scalar @$A;\n    my $left = 0;\n    my $right = $n - 1;\n    my $result = -1;\n    while ($left <= $right) {\n        my $mid = int(($left + $right) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $right = $mid - 1;\n        } elsif ($A->[$mid] < $x) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $m;\n    my $result = -1;\n    while ($l <= $r) {\n        $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            if ($m == 0 || $A->[$m - 1] != $x) {\n                return $m;\n            } else {\n                $r = $m - 1;\n            }\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return -1;\n}",
    "    my $low = 0;\n    my $high = scalar @$A - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}",
    "    my $n = scalar @$A;\n    my $l = 0;\n    my $r = $n - 1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            if ($m == 0 || $A->[$m - 1] != $x) {\n                return $m;\n            } else {\n                $r = $m - 1;\n            }\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return -1;\n}",
    "    my $n = scalar(@$A);\n    my $left = 0;\n    my $right = $n - 1;\n    my $result = -1;\n    while ($left <= $right) {\n        my $mid = int(($left + $right) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $right = $mid - 1;\n        } elsif ($A->[$mid] < $x) {\n            $left = $mid + 1;\n        } else {\n            $right = $mid - 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $m;\n    my $result = -1;\n    while ($l <= $r) {\n        $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = $#$A;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high)/2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] < $x) {\n            $low = $mid + 1;\n        } else {\n            $high = $mid - 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            if ($m == 0 || $A->[$m - 1] != $x) {\n                return $m;\n            } else {\n                $r = $m - 1;\n            }\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return -1;\n}",
    "    my $low = 0;\n    my $high = $#$A;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            if ($mid == 0 || $A->[$mid - 1] != $x) {\n                return $mid;\n            }\n            $high = $mid - 1;\n        }\n        elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        }\n        else {\n            $low = $mid + 1;\n        }\n    }\n    return -1;\n}",
    "    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] < $x) {\n            $low = $mid + 1;\n        } else {\n            $high = $mid - 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}",
    "    my $n = scalar @$A;\n    my $l = 0;\n    my $r = $n - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $n = scalar @$A;\n    my $l = 0;\n    my $u = $n - 1;\n    my $result = -1;\n    while ($l <= $u) {\n        my $m = int(($l + $u) / 2);\n        if ($A->[$m] < $x) {\n            $l = $m + 1;\n        }\n        elsif ($A->[$m] > $x) {\n            $u = $m - 1;\n        }\n        else {\n            $result = $m;\n            $u = $m - 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] < $x) {\n            $low = $mid + 1;\n        } else {\n            $high = $mid - 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}",
    "    my $n = scalar(@$A);\n    my $l = 0;\n    my $r = $n - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $u = scalar(@$A) - 1;\n    my $m = int(($l + $u) / 2);\n    while ($l <= $u) {\n        if ($A->[$m] == $x) {\n            if ($m == 0 || $A->[$m - 1] != $x) {\n                return $m;\n            } else {\n                $u = $m - 1;\n            }\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $u = $m - 1;\n        }\n        $m = int(($l + $u) / 2);\n    }\n    return -1;\n}",
    "    my($l, $u) = (0, scalar(@$A) - 1);\n    my($m, $result) = (0, -1);\n    while ($l <= $u) {\n        $m = int(($l + $u) / 2);\n        if ($A->[$m] < $x) {\n            $l = $m + 1;\n        } elsif ($A->[$m] > $x) {\n            $u = $m - 1;\n        } else {\n            $result = $m;\n            $u = $m - 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            if ($m == 0 || $A->[$m - 1] != $x) {\n                return $m;\n            }\n            $r = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $r = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return -1;\n}",
    "\n    my $low = 0;\n    my $high = scalar(@$A) - 1;",
    "    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $u = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $u) {\n        my $m = int(($l + $u) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $u = $m - 1;\n        } elsif ($A->[$m] > $x) {\n            $u = $m - 1;\n        } else {\n            $l = $m + 1;\n        }\n    }\n    return $result;\n}",
    "    my $l = 0;\n    my $r = scalar(@$A) - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}",
    "    my $low = 0;\n    my $high = scalar(@$A) - 1;\n    my $result = -1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($A->[$mid] == $x) {\n            $result = $mid;\n            $high = $mid - 1;\n        } elsif ($A->[$mid] > $x) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $result;\n}",
    "    my $n = scalar @$A;\n    my $l = 0;\n    my $r = $n - 1;\n    my $result = -1;\n    while ($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if ($A->[$m] == $x) {\n            $result = $m;\n            $r = $m - 1;\n        } elsif ($A->[$m] < $x) {\n            $l = $m + 1;\n        } else {\n            $r = $m - 1;\n        }\n    }\n    return $result;\n}"
  ]
}