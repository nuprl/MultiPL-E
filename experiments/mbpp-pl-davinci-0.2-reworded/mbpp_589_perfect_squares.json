{
  "name": "mbpp_589_perfect_squares",
  "language": "pl",
  "prompt": "# Write a function to find perfect squares between two given numbers.\nsub perfect_squares {\n    my($a, $b) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_589_perfect_squares.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&perfect_squares;\n        if(eq_deeply($candidate->(1, 30),[1, 4, 9, 16, 25])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(50, 100),[64, 81, 100])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100, 200),[100, 121, 144, 169, 196])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @squares;\n    for my $i ($a..$b) {\n        push @squares, $i if $i == sqrt($i) ** 2;\n    }\n    return @squares;\n}",
    "    my @squares;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}",
    "    my @squares;\n    for my $i ($a .. $b) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}",
    "    my @squares;\n    for my $i ($a..$b) {\n        push @squares, $i if $i == sqrt($i)**2;\n    }\n    return @squares;\n}",
    "    my @result;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @result, $i;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i ($a .. $b) {\n        if (is_perfect_square($i)) {\n            push @result, $i;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt($i);\n        push @result, $i if $sqrt == int($sqrt);\n    }\n    return @result;\n}",
    "    my @squares;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt($i);\n        push @squares, $i if $sqrt == int($sqrt);\n    }\n    return @squares;\n}",
    "    my $n = int(sqrt($b));\n    my @squares;\n    for my $i (1 .. $n) {\n        my $square = $i * $i;\n        if ($square >= $a && $square <= $b) {\n            push @squares, $square;\n        }\n    }\n    return @squares;\n}",
    "    my $n = int(sqrt($b));\n    my @squares = map { $_ * $_ } 1 .. $n;\n    my $i = 0;\n    while ($squares[$i] < $a) {\n        $i++;\n    }\n    return @squares[$i .. $#squares];\n}",
    "    my @result;\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @result, $i;\n        }\n    }\n    return @result;\n}",
    "    my @squares;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}",
    "    my @result;\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @result, $i;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt($i);\n        push @result, $i if $sqrt == int($sqrt);\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i ($a..$b) {\n        my $sqrt = int(sqrt($i));\n        push @result, $i if $sqrt * $sqrt == $i;\n    }\n    return @result;\n}",
    "    my @squares;\n    for my $i ($a..$b) {\n        push @squares, $i if $i == sqrt($i) ** 2;\n    }\n    return @squares;\n}",
    "    my @squares;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt($i);\n        push @squares, $i if $sqrt == int($sqrt);\n    }\n    return @squares;\n}",
    "    my @squares;\n    for my $i ($a..$b) {\n        push @squares, $i if $i == sqrt($i) ** 2;\n    }\n    return @squares;\n}",
    "    my @result = ();\n    for my $i ($a..$b) {\n        push @result, $i if $i == sqrt($i) ** 2;\n    }\n    return @result;\n}",
    "    my @squares;\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}"
  ]
}