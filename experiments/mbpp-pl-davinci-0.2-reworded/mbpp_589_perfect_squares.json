{
  "name": "mbpp_589_perfect_squares",
  "language": "pl",
  "prompt": "# Write a function to find perfect squares between two given numbers.\nsub perfect_squares {\n    my($a, $b) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_589_perfect_squares.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&perfect_squares;\n        if(eq_deeply($candidate->(1, 30),[1, 4, 9, 16, 25])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(50, 100),[64, 81, 100])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100, 200),[100, 121, 144, 169, 196])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @squares;\n    for my $i ($a..$b) {\n        push @squares, $i if $i == sqrt($i) ** 2;\n    }\n    return @squares;\n}",
    "    my @squares;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}",
    "    my @squares;\n    for my $i ($a .. $b) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}",
    "    my @squares;\n    for my $i ($a..$b) {\n        push @squares, $i if $i == sqrt($i)**2;\n    }\n    return @squares;\n}",
    "    my @result;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @result, $i;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i ($a .. $b) {\n        if (is_perfect_square($i)) {\n            push @result, $i;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt($i);\n        push @result, $i if $sqrt == int($sqrt);\n    }\n    return @result;\n}",
    "    my @squares;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt($i);\n        push @squares, $i if $sqrt == int($sqrt);\n    }\n    return @squares;\n}",
    "    my $n = int(sqrt($b));\n    my @squares;\n    for my $i (1 .. $n) {\n        my $square = $i * $i;\n        if ($square >= $a && $square <= $b) {\n            push @squares, $square;\n        }\n    }\n    return @squares;\n}",
    "    my $n = int(sqrt($b));\n    my @squares = map { $_ * $_ } 1 .. $n;\n    my $i = 0;\n    while ($squares[$i] < $a) {\n        $i++;\n    }\n    return @squares[$i .. $#squares];\n}",
    "    my @result;\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @result, $i;\n        }\n    }\n    return @result;\n}",
    "    my @squares;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}",
    "    my @result;\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @result, $i;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt($i);\n        push @result, $i if $sqrt == int($sqrt);\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i ($a..$b) {\n        my $sqrt = int(sqrt($i));\n        push @result, $i if $sqrt * $sqrt == $i;\n    }\n    return @result;\n}",
    "    my @squares;\n    for my $i ($a..$b) {\n        push @squares, $i if $i == sqrt($i) ** 2;\n    }\n    return @squares;\n}",
    "    my @squares;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt($i);\n        push @squares, $i if $sqrt == int($sqrt);\n    }\n    return @squares;\n}",
    "    my @squares;\n    for my $i ($a..$b) {\n        push @squares, $i if $i == sqrt($i) ** 2;\n    }\n    return @squares;\n}",
    "    my @result = ();\n    for my $i ($a..$b) {\n        push @result, $i if $i == sqrt($i) ** 2;\n    }\n    return @result;\n}",
    "    my @squares;\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}",
    "    my @result;\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @result, $i;\n        }\n    }\n    return @result;\n}",
    "    my @perfect_squares;\n    for (my $i = $a; $i <= $b; $i++) {\n        if (is_perfect_square($i)) {\n            push @perfect_squares, $i;\n        }\n    }\n    return @perfect_squares;\n}",
    "    my @result;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt($i);\n        push @result, $i if $sqrt == int($sqrt);\n    }\n    return @result;\n}",
    "    my @squares;\n    for my $i ($a..$b) {\n        push @squares, $i if $i == sqrt($i)**2;\n    }\n    return @squares;\n}",
    "    my @squares;\n    for my $i ($a .. $b) {\n        my $sqrt = sqrt($i);\n        push @squares, $i if $sqrt == int($sqrt);\n    }\n    return @squares;\n}",
    "    my @perfect_squares;\n    for my $i ($a .. $b) {\n        my $sqrt = sqrt $i;\n        push @perfect_squares, $i if $sqrt == int $sqrt;\n    }\n    return @perfect_squares;\n}",
    "    my @perfect_squares;\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @perfect_squares, $i;\n        }\n    }\n    return @perfect_squares;\n}",
    "    my @result;\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @result, $i;\n        }\n    }\n    return @result;\n}",
    "    my @squares = ();\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}",
    "    my @result;\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @result, $i;\n        }\n    }\n    return @result;\n}",
    "    my @squares;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}",
    "    my @result;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt $i;\n        push @result, $i if $sqrt == int $sqrt;\n    }\n    return @result;\n}",
    "    my @squares;\n    for (my $i = $a; $i <= $b; $i++) {\n        if (is_perfect_square($i)) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}",
    "    my @result;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @result, $i;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i ($a .. $b) {\n        my $sqrt = int(sqrt($i));\n        push @result, $i if $sqrt * $sqrt == $i;\n    }\n    return @result;\n}",
    "    my @squares;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt($i);\n        push @squares, $i if $sqrt == int($sqrt);\n    }\n    return @squares;\n}",
    "    my @result;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @result, $i;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @result, $i;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        push @result, $i if $sqrt == int($sqrt);\n    }\n    return @result;\n}",
    "    my @squares;\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}",
    "    my @result;\n    for my $i ($a .. $b) {\n        my $sqrt = sqrt $i;\n        push @result, $i if $sqrt == int $sqrt;\n    }\n    return @result;\n}",
    "    my @squares;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}",
    "    my @squares;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt($i);\n        push @squares, $i if $sqrt == int($sqrt);\n    }\n    return @squares;\n}",
    "    my @squares;\n    my $i = 1;\n    while ($i * $i < $b) {\n        push @squares, $i * $i if $i * $i >= $a;\n        $i++;\n    }\n    return @squares;\n}",
    "    my @squares;\n    for my $i ($a .. $b) {\n        my $sqrt = sqrt($i);\n        push @squares, $i if $sqrt == int($sqrt);\n    }\n    return @squares;\n}",
    "    my @squares;\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}",
    "    my @squares;\n    for my $i ($a .. $b) {\n        my $sqrt = int(sqrt($i));\n        push @squares, $i if $sqrt * $sqrt == $i;\n    }\n    return @squares;\n}",
    "    my $n = int(sqrt($b));\n    my @squares = map { $_ * $_ } 1..$n;\n    my $i = 0;\n    while ($squares[$i] < $a) {\n        $i++;\n    }\n    return @squares[$i..$#squares];\n}",
    "    my @squares;\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}",
    "    my @result;\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @result, $i;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i ($a .. $b) {\n        push @result, $i if $i == sqrt($i) ** 2;\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i ($a .. $b) {\n        my $sqrt = sqrt($i);\n        push @result, $i if $sqrt == int($sqrt);\n    }\n    @result;\n}",
    "    my @squares;\n    for my $i ($a .. $b) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}",
    "    my @squares;\n    for my $i ($a .. $b) {\n        my $sqrt = sqrt($i);\n        push @squares, $i if $sqrt == int($sqrt);\n    }\n    return @squares;\n}",
    "    my @squares;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}",
    "    my $i = int(sqrt($a));\n    my $j = int(sqrt($b));\n    return $j - $i + ($i * $i == $a);\n}",
    "    my @perfect_squares;\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @perfect_squares, $i;\n        }\n    }\n    return @perfect_squares;\n}",
    "    my @result = ();\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @result, $i;\n        }\n    }\n    return @result;\n}",
    "    my @squares;\n    for my $i ($a..$b) {\n        if (is_perfect_square($i)) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}",
    "    my @result = ();\n    for (my $i = $a; $i <= $b; $i++) {\n        if (is_perfect_square($i)) {\n            push @result, $i;\n        }\n    }\n    return @result;\n}",
    "    my @squares;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt($i);\n        push @squares, $i if $sqrt == int($sqrt);\n    }\n    return @squares;\n}",
    "    my @result;\n    for my $i ($a .. $b) {\n        my $sqrt = sqrt($i);\n        push @result, $i if $sqrt == int($sqrt);\n    }\n    return @result;\n}",
    "    my @squares;\n    for my $i ($a..$b) {\n        push @squares, $i if $i == sqrt($i) ** 2;\n    }\n    return @squares;\n}",
    "    my @squares;\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}",
    "    my @result;\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @result, $i;\n        }\n    }\n    return @result;\n}",
    "    my @squares;\n    for my $i ($a..$b) {\n        push @squares, $i if $i == sqrt($i) ** 2;\n    }\n    return @squares;\n}",
    "    my $min = int(sqrt($a));\n    my $max = int(sqrt($b));\n    my @result = ();\n    for (my $i = $min; $i <= $max; $i++) {\n        push @result, $i * $i;\n    }\n    return @result;\n}",
    "    my @squares;\n    for my $i ($a .. $b) {\n        push @squares, $i if is_perfect_square($i);\n    }\n    return @squares;\n}",
    "    my $count = 0;\n    for my $i ($a..$b) {\n        $count++ if is_perfect_square($i);\n    }\n    return $count;\n}",
    "    my @squares;\n    for my $i ($a .. $b) {\n        my $sqrt = sqrt($i);\n        push @squares, $i if $sqrt == int($sqrt);\n    }\n    return @squares;\n}",
    "    my @squares;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt($i);\n        push @squares, $i if $sqrt == int($sqrt);\n    }\n    return @squares;\n}",
    "    my @squares;\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}",
    "    my @squares;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}",
    "    my @squares;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt $i;\n        push @squares, $i if $sqrt == int $sqrt;\n    }\n    return @squares;\n}",
    "    my @squares;\n    for (my $i = $a; $i <= $b; $i++) {\n        push @squares, $i if $i == sqrt($i) ** 2;\n    }\n    return @squares;\n}",
    "    my @squares;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}",
    "    my @squares;\n    for my $n ($a .. $b) {\n        push @squares, $n if $n == sqrt($n) ** 2;\n    }\n    return @squares;\n}",
    "    my @result;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt($i);\n        push @result, $i if $sqrt == int($sqrt);\n    }\n    return @result;\n}",
    "    my @squares;\n    for (my $i = $a; $i <= $b; $i++) {\n        if ($i == sqrt($i) ** 2) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}",
    "    my $count = 0;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            $count++;\n        }\n    }\n    return $count;\n}",
    "    my @squares;\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}",
    "    my @squares;\n    for my $i ($a .. $b) {\n        push @squares, $i if $i == sqrt($i) ** 2;\n    }\n    return @squares;\n}",
    "    my @squares;\n    for my $i ($a .. $b) {\n        my $sqrt = sqrt($i);\n        push @squares, $i if $sqrt == int($sqrt);\n    }\n    return @squares;\n}",
    "    my @result;\n    for my $i ($a..$b) {\n        push @result, $i if $i == sqrt($i)**2;\n    }\n    return @result;\n}",
    "    my @squares;\n    for (my $i = $a; $i <= $b; $i++) {\n        if (is_perfect_square($i)) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}",
    "    my @squares = ();\n    for my $i ($a .. $b) {\n        if (is_perfect_square($i)) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}",
    "    my @perfect_squares;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @perfect_squares, $i;\n        }\n    }\n    return @perfect_squares;\n}",
    "    my @squares;\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}",
    "    my @perfect_squares;\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @perfect_squares, $i;\n        }\n    }\n    return @perfect_squares;\n}",
    "    my @squares;\n    for my $i ($a..$b) {\n        push @squares, $i if $i == sqrt($i)**2;\n    }\n    return @squares;\n}",
    "    my @squares;\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}",
    "    my @result;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt($i);\n        push @result, $i if $sqrt == int($sqrt);\n    }\n    return @result;\n}",
    "    my $n = int(sqrt($b));\n    my @squares;\n    for (my $i = int(sqrt($a)); $i <= $n; $i++) {\n        push @squares, $i * $i;\n    }\n    return @squares;\n}",
    "    my @squares;\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}",
    "    my @result;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt($i);\n        push @result, $i if $sqrt == int($sqrt);\n    }\n    return @result;\n}",
    "    my @squares = ();\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}",
    "    my $i = int(sqrt($a));\n    my $j = int(sqrt($b));\n    return $j - $i + 1;\n}",
    "    my @squares;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}",
    "    my $result = 0;\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            $result++;\n        }\n    }\n    return $result;\n}",
    "    my @squares;\n    for (my $i = $a; $i <= $b; $i++) {\n        push @squares, $i if is_perfect_square($i);\n    }\n    return @squares;\n}",
    "    my @squares;\n    for (my $i = $a; $i <= $b; $i++) {\n        push @squares, $i if is_perfect_square($i);\n    }\n    return @squares;\n}",
    "    my @perfect_squares;\n    for my $i ($a..$b) {\n        push @perfect_squares, $i if $i == sqrt($i) ** 2;\n    }\n    return @perfect_squares;\n}",
    "    my @perfect_squares;\n    for (my $i = $a; $i <= $b; $i++) {\n        if (is_perfect_square($i)) {\n            push @perfect_squares, $i;\n        }\n    }\n    return @perfect_squares;\n}",
    "    my @squares;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt($i);\n        push @squares, $i if $sqrt == int($sqrt);\n    }\n    return @squares;\n}",
    "    my @squares;\n    for my $i ($a..$b) {\n        push @squares, $i if $i == sqrt($i) ** 2;\n    }\n    return @squares;\n}",
    "    my @squares;\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}",
    "    my $c = 0;\n    for (my $i = $a; $i <= $b; $i++) {\n        $c++ if ($i == sqrt($i) * sqrt($i));\n    }\n    return $c;\n}",
    "    my @squares;\n    for my $i ($a..$b) {\n        push @squares, $i if $i == sqrt($i)**2;\n    }\n    return @squares;\n}",
    "    my @result;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt($i);\n        push @result, $i if $sqrt == int($sqrt);\n    }\n    return @result;\n}",
    "    my @result;\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @result, $i;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt($i);\n        push @result, $i if $sqrt == int($sqrt);\n    }\n    return @result;\n}",
    "    my @squares;\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}",
    "    my @squares;\n    for my $i ($a .. $b) {\n        my $sqrt = sqrt $i;\n        push @squares, $i if $sqrt == int $sqrt;\n    }\n    return @squares;\n}",
    "    my @squares;\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        push @squares, $i if ($sqrt == int($sqrt));\n    }\n    return @squares;\n}",
    "    my @squares;\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}",
    "    my @squares;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt($i);\n        push @squares, $i if $sqrt == int $sqrt;\n    }\n    return @squares;\n}",
    "    my @squares;\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}",
    "    my @result = ();\n    for my $i ($a..$b) {\n        push @result, $i if $i == sqrt($i) ** 2;\n    }\n    return @result;\n}",
    "    my @squares;\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}",
    "    my @squares;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt($i);\n        push @squares, $i if $sqrt == int($sqrt);\n    }\n    return @squares;\n}",
    "    my @squares;\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}",
    "    my @result;\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @result, $i;\n        }\n    }\n    return @result;\n}",
    "    my @squares;\n    for my $i ($a .. $b) {\n        my $sqrt = sqrt($i);\n        push @squares, $i if $sqrt == int($sqrt);\n    }\n    return @squares;\n}",
    "    my @result;\n    for my $i ($a .. $b) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @result, $i;\n        }\n    }\n    return @result;\n}",
    "    my @squares;\n    for (my $i = $a; $i <= $b; $i++) {\n        if (is_perfect_square($i)) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}",
    "    my @squares;\n    for (my $i = $a; $i <= $b; $i++) {\n        if ($i == sqrt($i) ** 2) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}",
    "    my @squares;\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        push @squares, $i if $sqrt == int($sqrt);\n    }\n    return @squares;\n}",
    "    my $c = 0;\n    for (my $i = $a; $i <= $b; $i++) {\n        if ($i == sqrt($i) * sqrt($i)) {\n            $c++;\n        }\n    }\n    return $c;\n}",
    "    my @perfect_squares;",
    "    my @perfect_squares;\n    for my $i ($a .. $b) {\n        if (is_perfect_square($i)) {\n            push @perfect_squares, $i;\n        }\n    }\n    return @perfect_squares;\n}",
    "    my @squares;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt($i);\n        push @squares, $i if $sqrt == int($sqrt);\n    }\n    return @squares;\n}",
    "    my @squares = ();\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}",
    "    my $n = int(sqrt($b));\n    my $m = int(sqrt($a));\n    return $n - $m + 1;\n}",
    "    my @perfect_squares;\n    for (my $i = $a; $i <= $b; $i++) {\n        if (is_perfect_square($i)) {\n            push @perfect_squares, $i;\n        }\n    }\n    return @perfect_squares;\n}",
    "    my @squares;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}",
    "    my @squares;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}",
    "    my @result;\n    for ($a .. $b) {\n        push @result, $_ if is_perfect_square($_);\n    }\n    return @result;\n}",
    "    my @squares;\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}",
    "    my @result;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @result, $i;\n        }\n    }\n    return @result;\n}",
    "    my @squares;\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        push @squares, $i if ($sqrt == int($sqrt));\n    }\n    return @squares;\n}",
    "    my @squares;\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}",
    "    my @squares;\n    for (my $i = $a; $i <= $b; $i++) {\n        if (is_perfect_square($i)) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}",
    "    my @result;\n    for my $i ($a..$b) {\n        my $sqrt = int(sqrt($i));\n        push @result, $i if $sqrt * $sqrt == $i;\n    }\n    return @result;\n}",
    "    my @result;\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @result, $i;\n        }\n    }\n    return @result;\n}",
    "    my @squares;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}",
    "    my @squares;\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}",
    "    my @res;\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        push @res, $i if $sqrt == int($sqrt);\n    }\n    return @res;\n}",
    "    my @perfect_squares;\n    for my $i ($a..$b) {\n        push @perfect_squares, $i if $i == sqrt($i)**2;\n    }\n    return @perfect_squares;\n}",
    "    my @result = ();\n    for my $i ($a..$b) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @result, $i;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @result, $i;\n        }\n    }\n    return @result;\n}",
    "    my @squares;\n    for my $i ($a .. $b) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}",
    "    my $count = 0;\n    for my $i ($a .. $b) {\n        $count++ if $i == sqrt($i) ** 2;\n    }\n    return $count;\n}",
    "    my @squares;\n    for (my $i = $a; $i <= $b; $i++) {\n        push @squares, $i if $i == sqrt($i)**2;\n    }\n    return @squares;\n}",
    "    my @result = ();\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @result, $i;\n        }\n    }\n    return @result;\n}",
    "    my @squares;\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}",
    "    my @result;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt $i;\n        push @result, $i if $sqrt == int $sqrt;\n    }\n    return @result;\n}",
    "    my $n = int(sqrt($b));\n    my $m = int(sqrt($a));\n    my @squares = map { $_ * $_ } $m..$n;\n    return @squares;\n}",
    "    my @squares;\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}",
    "    my @squares;\n    my $i = $a;\n    while ($i <= $b) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @squares, $i;\n        }\n        $i++;\n    }\n    return @squares;\n}",
    "    my @squares;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt($i);\n        push @squares, $i if $sqrt == int($sqrt);\n    }\n    return @squares;\n}",
    "    my @squares;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}",
    "    my @squares;\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}",
    "    my @result;\n    for my $i ($a..$b) {\n        my $sqrt = int(sqrt($i));\n        push @result, $i if $sqrt * $sqrt == $i;\n    }\n    return @result;\n}",
    "    my @squares;\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}",
    "    my @squares;\n    for my $i ($a..$b) {\n        push @squares, $i if $i == sqrt($i)**2;\n    }\n    return @squares;\n}",
    "    my @result;\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @result, $i;\n        }\n    }\n    return @result;\n}",
    "    my @squares = ();\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}",
    "    my @squares;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt($i);\n        push @squares, $i if $sqrt == int($sqrt);\n    }\n    return @squares;\n}",
    "    my @squares;\n    my $i = $a;\n    while ($i <= $b) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @squares, $i;\n        }\n        $i++;\n    }\n    return @squares;\n}",
    "    my @squares;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}",
    "    my @squares;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt($i);\n        push @squares, $i if $sqrt == int($sqrt);\n    }\n    return @squares;\n}",
    "    my @result;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt($i);\n        push @result, $i if $sqrt == int($sqrt);\n    }\n    return @result;\n}",
    "    my @result;\n    my $sqrt_a = int(sqrt($a));\n    my $sqrt_b = int(sqrt($b));\n    for my $i ($sqrt_a..$sqrt_b) {\n        my $square = $i * $i;\n        push @result, $square if $square >= $a && $square <= $b;\n    }\n    return @result;\n}",
    "    my @result;\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @result, $i;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        push @result, $i if $sqrt == int($sqrt);\n    }\n    return @result;\n}",
    "    my $n = int(sqrt($b));\n    my @squares = map { $_ * $_ } 1 .. $n;\n    my @result = grep { $a <= $_ && $_ <= $b } @squares;\n    return @result;\n}",
    "    my $min = int(sqrt($a));\n    my $max = int(sqrt($b));\n    return map { $_ * $_ } $min..$max;\n}",
    "    my @squares;\n    for my $i ($a..$b) {\n        push @squares, $i if sqrt($i) == int(sqrt($i));\n    }\n    return @squares;\n}",
    "    my @result;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt($i);\n        push @result, $i if $sqrt == int($sqrt);\n    }\n    return @result;\n}",
    "    my @perfect_squares;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @perfect_squares, $i;\n        }\n    }\n    return @perfect_squares;\n}",
    "    my @squares;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}",
    "    my @result;\n    for my $i ($a .. $b) {\n        my $sqrt = sqrt($i);\n        push @result, $i if $sqrt == int($sqrt);\n    }\n    return @result;\n}",
    "    my @squares;\n    for my $i ($a..$b) {\n        push @squares, $i if $i == sqrt($i)**2;\n    }\n    return @squares;\n}",
    "    my @squares;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt($i);\n        push @squares, $i if $sqrt == int($sqrt);\n    }\n    return @squares;\n}",
    "    my @squares;\n    for my $i ($a .. $b) {\n        my $sqrt = sqrt $i;\n        push @squares, $i if $sqrt == int $sqrt;\n    }\n    return @squares;\n}",
    "    my @result;\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @result, $i;\n        }\n    }\n    return @result;\n}",
    "    my @squares;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt($i);\n        push @squares, $i if $sqrt == int($sqrt);\n    }\n    return @squares;\n}",
    "    my @result;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt($i);\n        push @result, $i if $sqrt == int($sqrt);\n    }\n    return @result;\n}",
    "    my $i = int(sqrt($a));\n    my $j = int(sqrt($b));\n    my @result;\n    for ($i..$j) {\n        push @result, $_ * $_;\n    }\n    return @result;\n}",
    "    my @squares;\n    for my $i ($a..$b) {\n        push @squares, $i if $i == sqrt($i)**2;\n    }\n    return @squares;\n}",
    "    my @result;\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @result, $i;\n        }\n    }\n    return @result;\n}",
    "    my @squares;\n    for (my $i = $a; $i <= $b; $i++) {\n        push @squares, $i if $i == sqrt($i) ** 2;\n    }\n    return @squares;\n}",
    "    my @result;\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        push @result, $i if $sqrt == int($sqrt);\n    }\n    return @result;\n}",
    "    my @result;\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @result, $i;\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @result, $i;\n        }\n    }\n    return @result;\n}",
    "    my @squares;\n    for my $i ($a .. $b) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}",
    "    my @squares;\n    for my $i ($a .. $b) {\n        my $sqrt = sqrt($i);\n        push @squares, $i if $sqrt == int($sqrt);\n    }\n    return @squares;\n}",
    "    my @result;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @result, $i;\n        }\n    }\n    return @result;\n}",
    "    my @squares;\n    for my $i ($a..$b) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @squares, $i;\n        }\n    }\n    return @squares;\n}",
    "    my @result = ();\n    for (my $i = $a; $i <= $b; $i++) {\n        my $sqrt = sqrt($i);\n        if ($sqrt == int($sqrt)) {\n            push @result, $i;\n        }\n    }\n    return @result;\n}"
  ]
}