{
  "name": "mbpp_400_extract_freq",
  "language": "pl",
  "prompt": "# Write a function to extract the number of unique arrays in the given array.\nsub extract_freq {\n    my($test_list) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_400_extract_freq.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&extract_freq;\n        if(eq_deeply($candidate->([[3, 4], [1, 2], [4, 3], [5, 6]]),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[4, 15], [2, 3], [5, 4], [6, 7]]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[5, 16], [2, 3], [6, 5], [6, 9]]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my %freq;\n    foreach my $test (@$test_list) {\n        $freq{$test}++;\n    }\n    return \\%freq;\n}",
    "    my %freq;\n    foreach my $test (@$test_list) {\n        my $key = join(',', @$test);\n        $freq{$key}++;\n    }\n    return \\%freq;\n}",
    "    my %freq;\n    foreach my $item (@$test_list) {\n        $freq{$item}++;\n    }\n    return \\%freq;\n}",
    "    my %freq;\n    foreach my $test (@$test_list) {\n        $freq{$test}++;\n    }\n    return \\%freq;\n}",
    "    my %freq;\n    foreach my $test (@$test_list) {\n        my $test_str = join('', @$test);\n        $freq{$test_str}++;\n    }\n    return \\%freq;\n}",
    "    my %freq;\n    foreach my $test (@$test_list) {\n        $freq{$test}++;\n    }\n    return \\%freq;\n}",
    "    my %freq = ();\n    foreach my $test (@$test_list) {\n        $freq{$test}++;\n    }\n    return \\%freq;\n}",
    "    my %freq = ();\n    foreach my $test (@$test_list) {\n        $freq{$test}++;\n    }\n    return \\%freq;\n}",
    "    my %freq = ();\n    foreach my $item (@$test_list) {\n        $freq{$item}++;\n    }\n    return \\%freq;\n}",
    "    my %freq;\n    foreach my $item (@$test_list) {\n        $freq{$item}++;\n    }\n    return \\%freq;\n}",
    "    my %freq = ();\n    foreach my $test (@$test_list) {\n        $freq{$test}++;\n    }\n    return \\%freq;\n}",
    "    my %freq;\n    foreach my $item (@$test_list) {\n        $freq{$item}++;\n    }\n    return \\%freq;\n}",
    "    my %freq;\n    foreach my $test (@$test_list) {\n        $freq{$test}++;\n    }\n    return \\%freq;\n}",
    "    my %test_hash;\n    foreach my $test (@$test_list) {\n        $test_hash{$test}++;\n    }\n    return \\%test_hash;\n}",
    "    my %freq = ();\n    foreach my $test (@$test_list) {\n        $freq{$test}++;\n    }\n    return \\%freq;\n}",
    "    my %freq;\n    foreach my $test (@$test_list) {\n        $freq{$test}++;\n    }\n    return \\%freq;\n}",
    "    my %count;\n    foreach my $test (@$test_list) {\n        $count{$test}++;\n    }\n    return \\%count;\n}",
    "    my @test_list = @$test_list;\n    my %freq;\n    foreach my $test (@test_list) {\n        $freq{$test}++;\n    }\n    return \\%freq;\n}",
    "    my %freq;\n    foreach my $test (@$test_list) {\n        $freq{$test}++;\n    }\n    return \\%freq;\n}",
    "    my %hash;\n    foreach my $item (@$test_list) {\n        $hash{$item}++;\n    }\n    return \\%hash;\n}"
  ]
}