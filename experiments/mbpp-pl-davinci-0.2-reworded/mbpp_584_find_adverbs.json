{
  "name": "mbpp_584_find_adverbs",
  "language": "pl",
  "prompt": "# Write a function to find the first adverb ending with ly and its positions in a given string.\nsub find_adverbs {\n    my($text) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_584_find_adverbs.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_adverbs;\n        if(eq_deeply($candidate->(\"Clearly, he has no excuse for such behavior.\"),\"0-7: Clearly\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Please handle the situation carefuly\"),\"28-36: carefuly\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Complete the task quickly\"),\"18-25: quickly\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @adverbs = ();\n    my @positions = ();\n    while ($text =~ /(\\w+ly)/g) {\n        push @adverbs, $1;\n        push @positions, pos($text);\n    }\n    return (\\@adverbs, \\@positions);\n}",
    "    my @adverbs;\n    my $pos = 0;\n    while ($text =~ /\\b(\\w+ly)\\b/g) {\n        push @adverbs, $1;\n        $pos = pos($text);\n    }\n    return (\\@adverbs, $pos);\n}",
    "    my @adverbs;\n    while ($text =~ /\\b(\\w+ly)\\b/g) {\n        push @adverbs, [$1, pos($text) - length($1)];\n    }\n    return @adverbs;\n}",
    "    my @adverbs;\n    while ($text =~ /\\b(\\w+ly)\\b/g) {\n        push @adverbs, $1;\n    }\n    return @adverbs;\n}",
    "    my @adverbs = ();\n    while ($text =~ /\\b(\\w+ly)\\b/g) {\n        push @adverbs, [$1, pos($text) - length($1)];\n    }\n    return @adverbs;\n}",
    "    my @adverbs = ();\n    while ($text =~ /\\b(\\w+ly)\\b/g) {\n        my $adverb = $1;\n        my $pos = pos($text);\n        push @adverbs, {\n            word => $adverb,\n            start => $pos - length($adverb),\n            end => $pos - 1,\n        };\n    }\n    return @adverbs;\n}",
    "    my @adverbs;\n    while ($text =~ /\\b(\\w+ly)\\b/g) {\n        push @adverbs, [$1, pos($text) - length($1)];\n    }\n    return @adverbs;\n}",
    "    my @adverbs;\n    while ($text =~ /\\b(\\w+ly)\\b/g) {\n        push @adverbs, [$1, pos($text) - length($1)];\n    }\n    return @adverbs;\n}",
    "    my @adverbs = ();\n    my @positions = ();\n    my $pos = 0;\n    while ($text =~ /\\b(\\w+ly)\\b/g) {\n        push @adverbs, $1;\n        push @positions, $pos + $-[0];\n        $pos += $+[0];\n    }\n    return (\\@adverbs, \\@positions);\n}",
    "    my @adverbs;\n    while ($text =~ /(\\w+ly)/g) {\n        push @adverbs, $1;\n    }\n    return @adverbs;\n}",
    "    my @adverbs = $text =~ /\\b(\\w+ly)\\b/g;\n    return @adverbs;\n}",
    "    my @adverbs;\n    my $pos = 0;\n    while ($text =~ /\\b(\\w+ly)\\b/g) {\n        push @adverbs, [$1, $pos + $-[1], $pos + $+[1] - 1];\n        $pos += $+[0];\n    }\n    return @adverbs;\n}",
    "    my @adverbs;\n    while ($text =~ /\\b(\\w+ly)\\b/g) {\n        push @adverbs, [$1, pos($text) - length($1)];\n    }\n    return @adverbs;\n}",
    "    my @adverbs;\n    while ($text =~ /\\b(\\w+ly)\\b/g) {\n        push @adverbs, [$1, pos $text];\n    }\n    return @adverbs;\n}",
    "    my @adverbs = ();\n    while ($text =~ /\\b(\\w+ly)\\b/g) {\n        push @adverbs, [$1, pos($text) - length($1)];\n    }\n    return @adverbs;\n}",
    "    my @adverbs;\n    while ($text =~ /\\b(\\w+ly)\\b/g) {\n        push @adverbs, [$1, pos($text) - length($1)];\n    }\n    return @adverbs;\n}",
    "    my @adverbs;\n    while ($text =~ /\\b(\\w+ly)\\b/g) {\n        push @adverbs, [$1, pos($text) - length($1)];\n    }\n    return @adverbs;\n}",
    "    my @adverbs = ();\n    my $pos = 0;\n    while ($text =~ /\\b(\\w+ly)\\b/g) {\n        push @adverbs, $1;\n        push @adverbs, $-[1];\n    }\n    return @adverbs;\n}",
    "    my @adverbs;\n    while ($text =~ /\\b(\\w+ly)\\b/g) {\n        push @adverbs, [$1, pos($text) - length($1)];\n    }\n    return @adverbs;\n}",
    "    my $adverbs = {};\n    while ($text =~ /(\\w+ly)/g) {\n        $adverbs->{$1} = [pos($text) - length($1), pos($text) - 1];\n    }\n    return $adverbs;\n}"
  ]
}