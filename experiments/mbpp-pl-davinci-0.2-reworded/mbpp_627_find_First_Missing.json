{
  "name": "mbpp_627_find_First_Missing",
  "language": "pl",
  "prompt": "# Write a plthon function to find the smallest missing number from a sorted array of natural numbers.\nsub find_First_Missing {\n    my($array) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_627_find_First_Missing.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_First_Missing;\n        if(eq_deeply($candidate->([0, 1, 2, 3]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1, 2, 6, 9]),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 8, 9]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $length = scalar(@$array);\n    my $low = 0;\n    my $high = $length - 1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($array->[$mid] != $mid + 1 && $array->[$mid - 1] == $mid) {\n            return $mid + 1;\n        }\n        elsif ($array->[$mid] != $mid + 1) {\n            $high = $mid - 1;\n        }\n        else {\n            $low = $mid + 1;\n        }\n    }\n    return -1;\n}",
    "    my $size = scalar(@$array);\n    my $smallest = 1;\n    for(my $i = 0; $i < $size; $i++) {\n        if($array->[$i] == $smallest) {\n            $smallest++;\n        }\n    }\n    return $smallest;\n}",
    "    my $n = scalar(@$array);\n    my $i = 0;\n    while($i < $n) {\n        if($array->[$i] != $i) {\n            return $i;\n        }\n        $i++;\n    }\n    return $n;\n}",
    "    my $n = scalar(@$array);\n    my $i = 0;\n    while ($i < $n) {\n        if ($array->[$i] != $i) {\n            return $i;\n        }\n        $i++;\n    }\n    return $n;\n}",
    "    my $n = scalar(@$array);\n    my $i = 0;\n    while($i < $n) {\n        if($array->[$i] != $i) {\n            return $i;\n        }\n        $i++;\n    }\n    return $n;\n}",
    "    my $n = scalar(@$array);\n    my $i = 0;\n    while ($i < $n) {\n        if ($array->[$i] != $i) {\n            return $i;\n        }\n        $i++;\n    }\n    return $n;\n}",
    "    my $i = 0;\n    my $n = scalar(@$array);\n    for($i = 0; $i < $n; $i++) {\n        if($array->[$i] != $i) {\n            return $i;\n        }\n    }\n    return $n;\n}",
    "    my $i = 0;\n    my $n = scalar @$array;\n    for ($i = 0; $i < $n; $i++) {\n        if ($array->[$i] != $i) {\n            return $i;\n        }\n    }\n    return $n;\n}",
    "    my $i = 0;\n    my $n = scalar @$array;\n    while ($i < $n) {\n        if ($array->[$i] != $i) {\n            return $i;\n        }\n        $i++;\n    }\n    return $n;\n}",
    "    my $size = @$array;\n    my $i = 0;\n    while($i < $size) {\n        if($array->[$i] != $i) {\n            return $i;\n        }\n        $i++;\n    }\n    return $i;\n}",
    "    my $i = 0;\n    my $n = scalar(@$array);\n    while($i < $n) {\n        if($array->[$i] != $i) {\n            return $i;\n        }\n        $i++;\n    }\n    return $n;\n}",
    "    my $i = 0;\n    my $n = scalar(@$array);\n    while($i < $n) {\n        if($array->[$i] != $i) {\n            return $i;\n        }\n        $i++;\n    }\n    return $n;\n}",
    "    my $n = scalar @$array;\n    my $i = 0;\n    while ($i < $n) {\n        if ($array->[$i] != $i) {\n            return $i;\n        }\n        $i++;\n    }\n    return $n;\n}",
    "    my $i = 0;\n    my $n = scalar @$array;\n    while ($i < $n) {\n        if ($array->[$i] != $i) {\n            return $i;\n        }\n        $i++;\n    }\n    return $i;\n}",
    "    my $size = scalar(@$array);\n    my $low = 0;\n    my $high = $size - 1;\n    while($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if($array->[$mid] != $mid + 1 && $array->[$mid - 1] == $mid) {\n            return $mid + 1;\n        } elsif($array->[$mid] != $mid + 1) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return $size + 1;\n}",
    "    my $len = scalar(@$array);\n    for(my $i = 0; $i < $len; $i++) {\n        if($array->[$i] != $i) {\n            return $i;\n        }\n    }\n    return $len;\n}",
    "    my $i = 0;\n    my $n = scalar @$array;\n    while($i < $n) {\n        if($array->[$i] != $i) {\n            return $i;\n        }\n        $i++;\n    }\n    return $n;\n}",
    "    my $n = scalar(@$array);\n    my $low = 0;\n    my $high = $n - 1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($array->[$mid] != $mid + 1 && $array->[$mid - 1] == $mid) {\n            return $mid + 1;\n        }\n        elsif ($array->[$mid] != $mid + 1) {\n            $high = $mid - 1;\n        }\n        else {\n            $low = $mid + 1;\n        }\n    }\n    if ($low > $high) {\n        return $low + 1;\n    }\n}",
    "    my $i = 0;\n    my $n = scalar(@$array);\n    while($i < $n) {\n        if($array->[$i] != $i) {\n            return $i;\n        }\n        $i++;\n    }\n    return $n;\n}",
    "    my $i = 0;\n    my $n = scalar @$array;\n    for ($i = 0; $i < $n; $i++) {\n        if ($array->[$i] != $i) {\n            return $i;\n        }\n    }\n    return $n;\n}"
  ]
}