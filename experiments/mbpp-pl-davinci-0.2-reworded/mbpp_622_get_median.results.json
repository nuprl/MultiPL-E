{
  "name": "mbpp_622_get_median",
  "language": "pl",
  "prompt": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_622_get_median.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpxd1m6gdq.pl line 28, at end of line\nsyntax error at /tmp/tmpxd1m6gdq.pl line 28, at EOF\nExecution of /tmp/tmpxd1m6gdq.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $m1 = -1;\n    my $m2 = -1;\n    my $i = 0;\n    my $j = 0;\n    for (my $count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpxd1m6gdq.pl line 28, at end of line\nsyntax error at /tmp/tmpxd1m6gdq.pl line 28, at EOF\nExecution of /tmp/tmpxd1m6gdq.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpxd1m6gdq.pl line 28, at end of line\nsyntax error at /tmp/tmpxd1m6gdq.pl line 28, at EOF\nExecution of /tmp/tmpxd1m6gdq.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpxd1m6gdq.pl line 28, at end of line\nsyntax error at /tmp/tmpxd1m6gdq.pl line 28, at EOF\nExecution of /tmp/tmpxd1m6gdq.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpxd1m6gdq.pl line 28, at end of line\nsyntax error at /tmp/tmpxd1m6gdq.pl line 28, at EOF\nExecution of /tmp/tmpxd1m6gdq.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpxd1m6gdq.pl line 28, at end of line\nsyntax error at /tmp/tmpxd1m6gdq.pl line 28, at EOF\nExecution of /tmp/tmpxd1m6gdq.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $m1 = -1;\n    my $m2 = -1;\n    my $i = 0;\n    my $j = 0;\n    for (my $count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n        elsif ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        }\n        elsif ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        }\n        else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $m1 = 0;\n    my $m2 = 0;\n    my $i = 0;\n    my $j = 0;\n    my $count = 0;\n    while ($count < $n) {\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n        $count++;\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpxd1m6gdq.pl line 28, at end of line\nsyntax error at /tmp/tmpxd1m6gdq.pl line 28, at EOF\nExecution of /tmp/tmpxd1m6gdq.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpxd1m6gdq.pl line 28, at end of line\nsyntax error at /tmp/tmpxd1m6gdq.pl line 28, at EOF\nExecution of /tmp/tmpxd1m6gdq.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpxd1m6gdq.pl line 28, at end of line\nsyntax error at /tmp/tmpxd1m6gdq.pl line 28, at EOF\nExecution of /tmp/tmpxd1m6gdq.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpxd1m6gdq.pl line 28, at end of line\nsyntax error at /tmp/tmpxd1m6gdq.pl line 28, at EOF\nExecution of /tmp/tmpxd1m6gdq.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpxd1m6gdq.pl line 28, at end of line\nsyntax error at /tmp/tmpxd1m6gdq.pl line 28, at EOF\nExecution of /tmp/tmpxd1m6gdq.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count = 0;\n    my $m1 = -1;\n    my $m2 = -1;\n    while ($count < $n + 1) {\n        $m1 = $m2;\n        if ($i == $n) {\n            $m2 = $arr2->[$j];\n            $j++;\n        } elsif ($j == $n) {\n            $m2 = $arr1->[$i];\n            $i++;\n        } elsif ($arr1->[$i] < $arr2->[$j]) {\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n        $count++;\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp2boy5e22.pl line 28.\nBEGIN failed--compilation aborted at /tmp/tmp2boy5e22.pl line 28.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpxd1m6gdq.pl line 28, at end of line\nsyntax error at /tmp/tmpxd1m6gdq.pl line 28, at EOF\nExecution of /tmp/tmpxd1m6gdq.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpxd1m6gdq.pl line 28, at end of line\nsyntax error at /tmp/tmpxd1m6gdq.pl line 28, at EOF\nExecution of /tmp/tmpxd1m6gdq.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $m1 = -1;\n    my $m2 = -1;\n    my $count = 0;\n    while ($count < $n + 1) {\n        $m2 = $m1;\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $arr2->[$j];\n            $j++;\n        }\n        $count++;\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmppf088kqq.pl line 22.\nBEGIN failed--compilation aborted at /tmp/tmppf088kqq.pl line 22.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2)/2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpip8ki8d3.pl line 32.\nBEGIN failed--compilation aborted at /tmp/tmpip8ki8d3.pl line 32.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpxd1m6gdq.pl line 28, at end of line\nsyntax error at /tmp/tmpxd1m6gdq.pl line 28, at EOF\nExecution of /tmp/tmpxd1m6gdq.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $median = -1;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    $median = ($m1 + $m2) / 2;\n    return $median;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpx538h9zp.pl line 34.\nBEGIN failed--compilation aborted at /tmp/tmpx538h9zp.pl line 34.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp3e_uhw8u.pl line 10.\nBEGIN failed--compilation aborted at /tmp/tmp3e_uhw8u.pl line 10.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $m1 = 0;\n    my $m2 = 0;\n    my $i = 0;\n    my $j = 0;\n    my $count = 0;\n    while ($count < $n) {\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n        $count++;\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n        elsif ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        }\n        elsif ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        }\n        else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $m1 = -1;\n    my $m2 = -1;\n    my $i = 0;\n    my $j = 0;\n    my $count = 0;\n    while ($count < $n) {\n        $count++;\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp9cahvfe9.pl line 23.\nBEGIN failed--compilation aborted at /tmp/tmp9cahvfe9.pl line 23.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $median = -1;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    $median = ($m1 + $m2) / 2;\n    return $median;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpx538h9zp.pl line 34.\nBEGIN failed--compilation aborted at /tmp/tmpx538h9zp.pl line 34.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $m1 = -1;\n    my $m2 = -1;\n    my $i = 0;\n    my $j = 0;\n    my $count = 0;\n    while ($count < $n) {\n        $count++;\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp9cahvfe9.pl line 23.\nBEGIN failed--compilation aborted at /tmp/tmp9cahvfe9.pl line 23.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp3e_uhw8u.pl line 10.\nBEGIN failed--compilation aborted at /tmp/tmp3e_uhw8u.pl line 10.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpxd1m6gdq.pl line 28, at end of line\nsyntax error at /tmp/tmpxd1m6gdq.pl line 28, at EOF\nExecution of /tmp/tmpxd1m6gdq.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    return -1 if $n <= 0;\n    return -1 if $n != scalar @$arr1 or $n != scalar @$arr2;\n    return ($arr1->[0] + $arr2->[0]) / 2 if $n == 1;\n    return ($arr1->[0] + $arr2->[1]) / 2 if $n == 2;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpltngf48q.pl line 8.\nBEGIN failed--compilation aborted at /tmp/tmpltngf48q.pl line 8.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $m1 = -1;\n    my $m2 = -1;\n    my $i = 0;\n    my $j = 0;\n    for (my $count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $m1 = -1;\n    my $m2 = -1;\n    my $i = 0;\n    my $j = 0;\n    for (my $count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my($i, $j) = (0, 0);\n    my($m1, $m2) = (-1, -1);\n    for (my $count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpd67_qf3v.pl line 29.\nBEGIN failed--compilation aborted at /tmp/tmpd67_qf3v.pl line 29.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpxd1m6gdq.pl line 28, at end of line\nsyntax error at /tmp/tmpxd1m6gdq.pl line 28, at EOF\nExecution of /tmp/tmpxd1m6gdq.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp0kr1j5wr.pl line 7.\nBEGIN failed--compilation aborted at /tmp/tmp0kr1j5wr.pl line 7.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $median = 0;\n    if ($n == 1) {\n        return ($arr1->[0] + $arr2->[0]) / 2;\n    }\n    if ($n == 2) {\n        return ($max($arr1->[0], $arr2->[0]) + $min($arr1->[1], $arr2->[1])) / 2;\n    }\n    my $m1 = median($arr1, $n);\n    my $m2 = median($arr2, $n);\n    if ($m1 == $m2) {\n        return $m1;\n    }\n    if ($m1 < $m2) {\n        if ($n % 2 == 0) {\n            return get_median(\n                [@{$arr1}[$n/2-1 .. $n-1]],\n                [@{$arr2}[0 .. $n/2]],\n                $n/2 + 1\n            );\n        }\n        return get_median(\n            [@{$arr1}[$n/2 .. $n-1]],\n            [@{$arr2}[0 .. $n/2]],\n            $n/2 + 1\n        );\n    }\n    if ($n % 2 == 0) {\n        return get_median(\n            [@{$arr1}[0 .. $n/2]],\n            [@{$arr2}[$n/2-1 .. $n-1]],\n            $n/2 + 1\n        );\n    }\n    return get_median(\n        [@{$arr1}[0 .. $n/2]],\n        [@{$arr2}[$n/2 .. $n-1]],\n        $n/2 + 1\n    );\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmpuh20klib.pl line 9, near \"$max(\"\nBEGIN not safe after errors--compilation aborted at /tmp/tmpuh20klib.pl line 43.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $median = 0;\n    my $i = 0;\n    my $j = 0;\n    my $count = 0;\n    my $m1 = 0;\n    my $m2 = 0;\n    while($count < $n) {\n        if($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n        elsif($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        }\n        elsif($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        }\n        else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n        $count++;\n    }\n    $median = ($m1 + $m2) / 2;\n    return $median;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpfca8xa_x.pl line 36.\nBEGIN failed--compilation aborted at /tmp/tmpfca8xa_x.pl line 36.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpxd1m6gdq.pl line 28, at end of line\nsyntax error at /tmp/tmpxd1m6gdq.pl line 28, at EOF\nExecution of /tmp/tmpxd1m6gdq.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $m1 = 0;\n    my $m2 = 0;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    for($count = 0; $count <= $n; $count++) {\n        if($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $m1 = 0;\n    my $m2 = 0;\n    my $i = 0;\n    my $j = 0;\n    for (my $count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpmkenftir.pl line 31.\nBEGIN failed--compilation aborted at /tmp/tmpmkenftir.pl line 31.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n        elsif ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        }\n        elsif ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        }\n        else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $m1 = -1;\n    my $m2 = -1;\n    my $i = 0;\n    my $j = 0;\n    for (my $count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpxd1m6gdq.pl line 28, at end of line\nsyntax error at /tmp/tmpxd1m6gdq.pl line 28, at EOF\nExecution of /tmp/tmpxd1m6gdq.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpxd1m6gdq.pl line 28, at end of line\nsyntax error at /tmp/tmpxd1m6gdq.pl line 28, at EOF\nExecution of /tmp/tmpxd1m6gdq.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $m1 = 0;\n    my $m2 = 0;\n    my $i = 0;\n    my $j = 0;\n    my $count = 0;\n    while ($count < $n) {\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n        $count++;\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $m1 = 0;\n    my $m2 = 0;\n    my $i = 0;\n    my $j = 0;\n    my $count = 0;\n    while ($count < $n) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n        $count++;\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpjhqeh1xz.pl line 33.\nBEGIN failed--compilation aborted at /tmp/tmpjhqeh1xz.pl line 33.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n        elsif ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        }\n        elsif ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        }\n        else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpxd1m6gdq.pl line 28, at end of line\nsyntax error at /tmp/tmpxd1m6gdq.pl line 28, at EOF\nExecution of /tmp/tmpxd1m6gdq.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $m1 = 0;\n    my $m2 = 0;\n    my $i = 0;\n    my $j = 0;\n    my $count = 0;\n    while ($count < $n) {\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n        $count++;\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my($m1, $m2);\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpw83lmfp_.pl line 5.\nBEGIN failed--compilation aborted at /tmp/tmpw83lmfp_.pl line 5.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $m1 = 0;\n    my $m2 = 0;\n    my $i = 0;\n    my $j = 0;\n    my $count = 0;\n    while ($count < $n) {\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n        $count++;\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $m1 = 0;\n    my $m2 = 0;\n    my $i = 0;\n    my $j = 0;\n    my $count = 0;\n    while ($count < $n) {\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n        $count++;\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $m1 = -1;\n    my $m2 = -1;\n    my $i = 0;\n    my $j = 0;\n    for (my $count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpxd1m6gdq.pl line 28, at end of line\nsyntax error at /tmp/tmpxd1m6gdq.pl line 28, at EOF\nExecution of /tmp/tmpxd1m6gdq.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpxd1m6gdq.pl line 28, at end of line\nsyntax error at /tmp/tmpxd1m6gdq.pl line 28, at EOF\nExecution of /tmp/tmpxd1m6gdq.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpxd1m6gdq.pl line 28, at end of line\nsyntax error at /tmp/tmpxd1m6gdq.pl line 28, at EOF\nExecution of /tmp/tmpxd1m6gdq.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $m1 = 0;\n    my $m2 = 0;\n    my $i = 0;\n    my $j = 0;\n    my $count = 0;\n    while ($count < $n) {\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n        $count++;\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpxd1m6gdq.pl line 28, at end of line\nsyntax error at /tmp/tmpxd1m6gdq.pl line 28, at EOF\nExecution of /tmp/tmpxd1m6gdq.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp3e_uhw8u.pl line 10.\nBEGIN failed--compilation aborted at /tmp/tmp3e_uhw8u.pl line 10.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n\n    my $m1 = 0;\n    my $m2 = 0;\n    my $i = 0;\n    my $j = 0;\n    my $count;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp4g30r_kt.pl line 10.\nBEGIN failed--compilation aborted at /tmp/tmp4g30r_kt.pl line 10.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for($count = 0; $count <= $n; $count++) {\n        if($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n        elsif($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        }\n        elsif($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        }\n        else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpyq68b3bq.pl line 33.\nBEGIN failed--compilation aborted at /tmp/tmpyq68b3bq.pl line 33.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpxd1m6gdq.pl line 28, at end of line\nsyntax error at /tmp/tmpxd1m6gdq.pl line 28, at EOF\nExecution of /tmp/tmpxd1m6gdq.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $m1 = 0;\n    my $m2 = 0;\n    my $i = 0;\n    my $j = 0;\n    for (my $count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpmkenftir.pl line 31.\nBEGIN failed--compilation aborted at /tmp/tmpmkenftir.pl line 31.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $m1 = -1;\n    my $m2 = -1;\n    my $i = 0;\n    my $j = 0;\n    for (my $count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpxd1m6gdq.pl line 28, at end of line\nsyntax error at /tmp/tmpxd1m6gdq.pl line 28, at EOF\nExecution of /tmp/tmpxd1m6gdq.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpxd1m6gdq.pl line 28, at end of line\nsyntax error at /tmp/tmpxd1m6gdq.pl line 28, at EOF\nExecution of /tmp/tmpxd1m6gdq.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $m1 = -1;\n    my $m2 = -1;\n    my $i = 0;\n    my $j = 0;\n    for (my $count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp3e_uhw8u.pl line 10.\nBEGIN failed--compilation aborted at /tmp/tmp3e_uhw8u.pl line 10.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $m1 = -1;\n    my $m2 = -1;\n    my $i = 0;\n    my $j = 0;\n    my $count = 0;\n    while ($count < $n) {\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n        $count++;\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpr0yql3cn.pl line 23.\nBEGIN failed--compilation aborted at /tmp/tmpr0yql3cn.pl line 23.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpxd1m6gdq.pl line 28, at end of line\nsyntax error at /tmp/tmpxd1m6gdq.pl line 28, at EOF\nExecution of /tmp/tmpxd1m6gdq.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $m1 = -1;\n    my $m2 = -1;\n    my $i = 0;\n    my $j = 0;\n    my $count = 0;\n    while ($count < $n) {\n        $count++;\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp9cahvfe9.pl line 23.\nBEGIN failed--compilation aborted at /tmp/tmp9cahvfe9.pl line 23.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n        elsif ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        }\n        elsif ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        }\n        else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $m1 = -1;\n    my $m2 = -1;\n    my $i = 0;\n    my $j = 0;\n    for (my $count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $m1 = -1;\n    my $m2 = -1;\n    my $i = 0;\n    my $j = 0;\n    my $count = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp1fofp2fi.pl line 9.\nBEGIN failed--compilation aborted at /tmp/tmp1fofp2fi.pl line 9.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $m1 = 0;\n    my $m2 = 0;\n    my $i = 0;\n    my $j = 0;\n    my $count = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpg96is60a.pl line 9.\nBEGIN failed--compilation aborted at /tmp/tmpg96is60a.pl line 9.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $m1 = 0;\n    my $m2 = 0;\n    my $i = 0;\n    my $j = 0;\n    my $count = 0;\n    while($count < $n) {\n        if($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n        $count++;\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp0w29eh97.pl line 23.\nBEGIN failed--compilation aborted at /tmp/tmp0w29eh97.pl line 23.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpxd1m6gdq.pl line 28, at end of line\nsyntax error at /tmp/tmpxd1m6gdq.pl line 28, at EOF\nExecution of /tmp/tmpxd1m6gdq.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpxd1m6gdq.pl line 28, at end of line\nsyntax error at /tmp/tmpxd1m6gdq.pl line 28, at EOF\nExecution of /tmp/tmpxd1m6gdq.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpybd2mbqz.pl line 6.\nBEGIN failed--compilation aborted at /tmp/tmpybd2mbqz.pl line 6.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpxd1m6gdq.pl line 28, at end of line\nsyntax error at /tmp/tmpxd1m6gdq.pl line 28, at EOF\nExecution of /tmp/tmpxd1m6gdq.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpxd1m6gdq.pl line 28, at end of line\nsyntax error at /tmp/tmpxd1m6gdq.pl line 28, at EOF\nExecution of /tmp/tmpxd1m6gdq.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $m1 = -1;\n    my $m2 = -1;\n    my $i = 0;\n    my $j = 0;\n    for (my $count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    return -1 if $n <= 0;\n    return -1 if $n != scalar @$arr1;\n    return -1 if $n != scalar @$arr2;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpnswvb_hv.pl line 7.\nBEGIN failed--compilation aborted at /tmp/tmpnswvb_hv.pl line 7.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $m1 = -1;\n    my $m2 = -1;\n    my $i = 0;\n    my $j = 0;\n    for(my $count = 0; $count <= $n; $count++) {\n        if($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpbaodq4mz.pl line 31.\nBEGIN failed--compilation aborted at /tmp/tmpbaodq4mz.pl line 31.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $median = -1;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    $median = ($m1 + $m2) / 2;\n    return $median;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpx538h9zp.pl line 34.\nBEGIN failed--compilation aborted at /tmp/tmpx538h9zp.pl line 34.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count = 0;\n    my $m1 = -1;\n    my $m2 = -1;\n    while ($count < $n) {\n        $count++;\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpqq1rj8vp.pl line 23.\nBEGIN failed--compilation aborted at /tmp/tmpqq1rj8vp.pl line 23.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpxd1m6gdq.pl line 28, at end of line\nsyntax error at /tmp/tmpxd1m6gdq.pl line 28, at EOF\nExecution of /tmp/tmpxd1m6gdq.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my($i, $j) = (0, 0);\n    my($median1, $median2) = (0, 0);\n    for(my $count = 0; $count <= $n; $count++) {\n        if($i == $n) {\n            $median1 = $median2;\n            $median2 = $arr2->[0];\n            last;\n        }\n        if($j == $n) {\n            $median1 = $median2;\n            $median2 = $arr1->[0];\n            last;\n        }\n        if($arr1->[$i] < $arr2->[$j]) {\n            $median1 = $median2;\n            $median2 = $arr1->[$i];\n            $i++;\n        }\n        else {\n            $median1 = $median2;\n            $median2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($median1 + $median2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpakdrq17i.pl line 30.\nBEGIN failed--compilation aborted at /tmp/tmpakdrq17i.pl line 30.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count = 0;\n    my $m1 = -1;\n    my $m2 = -1;\n    while ($count < $n) {\n        $count++;\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpqq1rj8vp.pl line 23.\nBEGIN failed--compilation aborted at /tmp/tmpqq1rj8vp.pl line 23.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpxd1m6gdq.pl line 28, at end of line\nsyntax error at /tmp/tmpxd1m6gdq.pl line 28, at EOF\nExecution of /tmp/tmpxd1m6gdq.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp3e_uhw8u.pl line 10.\nBEGIN failed--compilation aborted at /tmp/tmp3e_uhw8u.pl line 10.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpxd1m6gdq.pl line 28, at end of line\nsyntax error at /tmp/tmpxd1m6gdq.pl line 28, at EOF\nExecution of /tmp/tmpxd1m6gdq.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpxd1m6gdq.pl line 28, at end of line\nsyntax error at /tmp/tmpxd1m6gdq.pl line 28, at EOF\nExecution of /tmp/tmpxd1m6gdq.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count = 0;\n    my $m1 = -1;\n    my $m2 = -1;\n    while ($count < $n) {\n        $m2 = $m1;\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $arr2->[$j];\n            $j++;\n        }\n        $count++;\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpr08qp0sd.pl line 22.\nBEGIN failed--compilation aborted at /tmp/tmpr08qp0sd.pl line 22.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpxd1m6gdq.pl line 28, at end of line\nsyntax error at /tmp/tmpxd1m6gdq.pl line 28, at EOF\nExecution of /tmp/tmpxd1m6gdq.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for($count = 0; $count <= $n; $count++) {\n        if($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpccn6khpw.pl line 32.\nBEGIN failed--compilation aborted at /tmp/tmpccn6khpw.pl line 32.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n        elsif ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        }\n        elsif ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        }\n        else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my($i, $j) = (0, 0);\n    my($m1, $m2) = (-1, -1);\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmppuyn8e63.pl line 6.\nBEGIN failed--compilation aborted at /tmp/tmppuyn8e63.pl line 6.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpxd1m6gdq.pl line 28, at end of line\nsyntax error at /tmp/tmpxd1m6gdq.pl line 28, at EOF\nExecution of /tmp/tmpxd1m6gdq.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n        elsif ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        }\n        elsif ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        }\n        else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count = 0;\n    my $m1 = -1;\n    my $m2 = -1;\n    while ($count < $n) {\n        $count++;\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpqq1rj8vp.pl line 23.\nBEGIN failed--compilation aborted at /tmp/tmpqq1rj8vp.pl line 23.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $m1 = -1;\n    my $m2 = -1;\n    my $i = 0;\n    my $j = 0;\n    my $count = 0;\n    while ($count < $n) {\n        $m1 = $m2;\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n        $count++;\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpqvxyqibu.pl line 22.\nBEGIN failed--compilation aborted at /tmp/tmpqvxyqibu.pl line 22.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n        elsif ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        }\n        elsif ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        }\n        else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpxd1m6gdq.pl line 28, at end of line\nsyntax error at /tmp/tmpxd1m6gdq.pl line 28, at EOF\nExecution of /tmp/tmpxd1m6gdq.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpxd1m6gdq.pl line 28, at end of line\nsyntax error at /tmp/tmpxd1m6gdq.pl line 28, at EOF\nExecution of /tmp/tmpxd1m6gdq.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpxd1m6gdq.pl line 28, at end of line\nsyntax error at /tmp/tmpxd1m6gdq.pl line 28, at EOF\nExecution of /tmp/tmpxd1m6gdq.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my($i, $j, $count, $m1, $m2);\n    for ($count = 0, $i = 0, $j = 0; $count <= $n; $count++) {\n        $m1 = $m2;\n        if ($i == $n) {\n            $m2 = $arr2->[$j];\n            $j++;\n        } elsif ($j == $n) {\n            $m2 = $arr1->[$i];\n            $i++;\n        } elsif ($arr1->[$i] < $arr2->[$j]) {\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp9g_q16id.pl line 23.\nBEGIN failed--compilation aborted at /tmp/tmp9g_q16id.pl line 23.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $m1 = -1;\n    my $m2 = -1;\n    my $i = 0;\n    my $j = 0;\n    for (my $count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $m1 = 0;\n    my $m2 = 0;\n    my $i = 0;\n    my $j = 0;\n    my $count = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpg96is60a.pl line 9.\nBEGIN failed--compilation aborted at /tmp/tmpg96is60a.pl line 9.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $m1 = -1;\n    my $m2 = -1;\n    my $i = 0;\n    my $j = 0;\n    my $count = 0;\n    while ($count < $n) {\n        $count++;\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp9cahvfe9.pl line 23.\nBEGIN failed--compilation aborted at /tmp/tmp9cahvfe9.pl line 23.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp3e_uhw8u.pl line 10.\nBEGIN failed--compilation aborted at /tmp/tmp3e_uhw8u.pl line 10.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    return -1 if $n <= 0;\n    return -1 if $n != scalar @$arr1 or $n != scalar @$arr2;\n    return ($arr1->[0] + $arr2->[0]) / 2 if $n == 1;\n    return ($arr1->[0] + $arr2->[1]) / 2 if $n == 2;\n    my $m1 = median($arr1, $n);\n    my $m2 = median($arr2, $n);\n    if ($m1 == $m2) {\n        return $m1;\n    }\n    elsif ($m1 < $m2) {\n        if ($n % 2 == 0) {\n            return get_median(\n                [@$arr1[$n/2-1..$n-1]],\n                [@$arr2[0..$n/2-1]],\n                $n/2\n            );\n        }\n        else {\n            return get_median(\n                [@$arr1[$n/2..$n-1]],\n                [@$arr2[0..$n/2]],\n                $n/2 + 1\n            );\n        }\n    }\n    else {\n        if ($n % 2 == 0) {\n            return get_median(\n                [@$arr1[0..$n/2-1]],\n                [@$arr2[$n/2-1..$n-1]],\n                $n/2\n            );\n        }\n        else {\n            return get_median(\n                [@$arr1[0..$n/2]],\n                [@$arr2[$n/2..$n-1]],\n                $n/2 + 1\n            );\n        }\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp_t41vgqd.pl line 46.\nBEGIN failed--compilation aborted at /tmp/tmp_t41vgqd.pl line 46.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        }\n        else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp01gcyjop.pl line 33.\nBEGIN failed--compilation aborted at /tmp/tmp01gcyjop.pl line 33.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $m1 = 0;\n    my $m2 = 0;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp0j_cnzfk.pl line 32.\nBEGIN failed--compilation aborted at /tmp/tmp0j_cnzfk.pl line 32.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $m1 = 0;\n    my $m2 = 0;\n    my $i = 0;\n    my $j = 0;\n    my $count = 0;\n    while ($count < $n) {\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n        $count++;\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpxd1m6gdq.pl line 28, at end of line\nsyntax error at /tmp/tmpxd1m6gdq.pl line 28, at EOF\nExecution of /tmp/tmpxd1m6gdq.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp3e_uhw8u.pl line 10.\nBEGIN failed--compilation aborted at /tmp/tmp3e_uhw8u.pl line 10.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for($count = 0; $count <= $n; $count++) {\n        if($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpccn6khpw.pl line 32.\nBEGIN failed--compilation aborted at /tmp/tmpccn6khpw.pl line 32.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $m1 = 0;\n    my $m2 = 0;\n    my $i = 0;\n    my $j = 0;\n    my $count = 0;\n    while ($count < $n) {\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n        $count++;\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my($i, $j) = (0, 0);\n    my($m1, $m2) = (-1, -1);\n    for(my $count = 0; $count <= $n; $count++) {\n        if($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1+$m2)/2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpp5io69h7.pl line 29.\nBEGIN failed--compilation aborted at /tmp/tmpp5io69h7.pl line 29.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n\n    my $m1 = 0;\n    my $m2 = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpzju4vuoa.pl line 7.\nBEGIN failed--compilation aborted at /tmp/tmpzju4vuoa.pl line 7.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $m1 = 0;\n    my $m2 = 0;\n    my $i = 0;\n    my $j = 0;\n    my $count = 0;\n    while ($count < $n) {\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n        $count++;\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n\n    if ($n == 0) {\n        return -1;\n    }\n    if ($n == 1) {\n        return ($arr1->[0] + $arr2->[0]) / 2;\n    }\n    if ($n == 2) {\n        return ($max($arr1->[0], $arr2->[0]) + $min($arr1->[1], $arr2->[1])) / 2;\n    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmp6_h9xu65.pl line 12, near \"$max(\"\nBEGIN not safe after errors--compilation aborted at /tmp/tmp6_h9xu65.pl line 14.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpxd1m6gdq.pl line 28, at end of line\nsyntax error at /tmp/tmpxd1m6gdq.pl line 28, at EOF\nExecution of /tmp/tmpxd1m6gdq.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $m1 = 0;\n    my $m2 = 0;\n    my $i = 0;\n    my $j = 0;\n    my $count = 0;\n    while ($count < $n) {\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n        $count++;\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for($count = 0; $count <= $n; $count++) {\n        if($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        }\n        else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp20xq9t44.pl line 33.\nBEGIN failed--compilation aborted at /tmp/tmp20xq9t44.pl line 33.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpxd1m6gdq.pl line 28, at end of line\nsyntax error at /tmp/tmpxd1m6gdq.pl line 28, at EOF\nExecution of /tmp/tmpxd1m6gdq.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n\n    my $median = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpzfn3e6i2.pl line 6.\nBEGIN failed--compilation aborted at /tmp/tmpzfn3e6i2.pl line 6.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n\n    if ($n == 1) {\n        return ($arr1->[0] + $arr2->[0]) / 2;\n    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpxk_eun4y.pl line 8.\nBEGIN failed--compilation aborted at /tmp/tmpxk_eun4y.pl line 8.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpxd1m6gdq.pl line 28, at end of line\nsyntax error at /tmp/tmpxd1m6gdq.pl line 28, at EOF\nExecution of /tmp/tmpxd1m6gdq.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    return -1 if ($n <= 0);\n    return -1 if ($n != scalar @$arr1 || $n != scalar @$arr2);\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpiz3lx1nn.pl line 6.\nBEGIN failed--compilation aborted at /tmp/tmpiz3lx1nn.pl line 6.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpxd1m6gdq.pl line 28, at end of line\nsyntax error at /tmp/tmpxd1m6gdq.pl line 28, at EOF\nExecution of /tmp/tmpxd1m6gdq.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpxd1m6gdq.pl line 28, at end of line\nsyntax error at /tmp/tmpxd1m6gdq.pl line 28, at EOF\nExecution of /tmp/tmpxd1m6gdq.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpxd1m6gdq.pl line 28, at end of line\nsyntax error at /tmp/tmpxd1m6gdq.pl line 28, at EOF\nExecution of /tmp/tmpxd1m6gdq.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $m1 = -1;\n    my $m2 = -1;\n    my $i = 0;\n    my $j = 0;\n    for (my $count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count = 0;\n    my $m1 = -1;\n    my $m2 = -1;\n    while ($count < $n) {\n        $m1 = $m2;\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m2 = $arr1->[$i];\n            $i++;\n        }\n        else {\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n        $count++;\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp2hl4mk4_.pl line 23.\nBEGIN failed--compilation aborted at /tmp/tmp2hl4mk4_.pl line 23.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpxd1m6gdq.pl line 28, at end of line\nsyntax error at /tmp/tmpxd1m6gdq.pl line 28, at EOF\nExecution of /tmp/tmpxd1m6gdq.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for($count = 0; $count <= $n; $count++) {\n        if($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpccn6khpw.pl line 32.\nBEGIN failed--compilation aborted at /tmp/tmpccn6khpw.pl line 32.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for($count = 0; $count <= $n; $count++) {\n        if($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        }\n        else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp20xq9t44.pl line 33.\nBEGIN failed--compilation aborted at /tmp/tmp20xq9t44.pl line 33.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $m1 = 0;\n    my $m2 = 0;\n    my $i = 0;\n    my $j = 0;\n    my $count = 0;\n    while($count < $n) {\n        if($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n        $count++;\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp0w29eh97.pl line 23.\nBEGIN failed--compilation aborted at /tmp/tmp0w29eh97.pl line 23.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpxd1m6gdq.pl line 28, at end of line\nsyntax error at /tmp/tmpxd1m6gdq.pl line 28, at EOF\nExecution of /tmp/tmpxd1m6gdq.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $m1 = 0;\n    my $m2 = 0;\n    my $i = 0;\n    my $j = 0;\n    my $count = 0;\n    while ($count < $n) {\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n        $count++;\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpxd1m6gdq.pl line 28, at end of line\nsyntax error at /tmp/tmpxd1m6gdq.pl line 28, at EOF\nExecution of /tmp/tmpxd1m6gdq.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpxd1m6gdq.pl line 28, at end of line\nsyntax error at /tmp/tmpxd1m6gdq.pl line 28, at EOF\nExecution of /tmp/tmpxd1m6gdq.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpxd1m6gdq.pl line 28, at end of line\nsyntax error at /tmp/tmpxd1m6gdq.pl line 28, at EOF\nExecution of /tmp/tmpxd1m6gdq.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp3e_uhw8u.pl line 10.\nBEGIN failed--compilation aborted at /tmp/tmp3e_uhw8u.pl line 10.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp3e_uhw8u.pl line 10.\nBEGIN failed--compilation aborted at /tmp/tmp3e_uhw8u.pl line 10.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpxd1m6gdq.pl line 28, at end of line\nsyntax error at /tmp/tmpxd1m6gdq.pl line 28, at EOF\nExecution of /tmp/tmpxd1m6gdq.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $m1 = -1;\n    my $m2 = -1;\n    my $i = 0;\n    my $j = 0;\n    for (my $count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    if ($n <= 0) {\n        return -1;\n    }\n    if ($n == 1) {\n        return ($arr1->[0] + $arr2->[0]) / 2;\n    }\n    if ($n == 2) {\n        return ($max($arr1->[0], $arr2->[0]) + $min($arr1->[1], $arr2->[1])) / 2;\n    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmpiip70rl5.pl line 11, near \"$max(\"\nBEGIN not safe after errors--compilation aborted at /tmp/tmpiip70rl5.pl line 13.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $m1 = -1;\n    my $m2 = -1;\n    my $i = 0;\n    my $j = 0;\n    for(my $count = 0; $count <= $n; $count++) {\n        if($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpbaodq4mz.pl line 31.\nBEGIN failed--compilation aborted at /tmp/tmpbaodq4mz.pl line 31.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\n    for ($count = 0; $count <= $n; $count++) {\n        if ($i == $n) {\n            $m1 = $m2;\n            $m2 = $arr2->[0];\n            last;\n        }\n        if ($j == $n) {\n            $m1 = $m2;\n            $m2 = $arr1->[0];\n            last;\n        }\n        if ($arr1->[$i] < $arr2->[$j]) {\n            $m1 = $m2;\n            $m2 = $arr1->[$i];\n            $i++;\n        } else {\n            $m1 = $m2;\n            $m2 = $arr2->[$j];\n            $j++;\n        }\n    }\n    return ($m1 + $m2) / 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $count;\n    my $m1 = -1;\n    my $m2 = -1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpxd1m6gdq.pl line 28, at end of line\nsyntax error at /tmp/tmpxd1m6gdq.pl line 28, at EOF\nExecution of /tmp/tmpxd1m6gdq.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    }
  ]
}