{
  "name": "mbpp_394_check_distinct",
  "language": "pl",
  "prompt": "# Write a function to check if given array contains no duplicates.\nsub check_distinct {\n    my($test_tup) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_394_check_distinct.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_distinct;\n        if(eq_deeply($candidate->([1, 4, 5, 6, 1, 4]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 4, 5, 6]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 4, 5, 6]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my %seen;\n    foreach my $t (@$test_tup) {\n        return 0 if $seen{$t};\n        $seen{$t} = 1;\n    }\n    return 1;\n}",
    "    my %seen;\n    foreach my $elem (@{$test_tup}) {\n        return 0 if $seen{$elem}++;\n    }\n    return 1;\n}",
    "    my @test_tup = @$test_tup;\n    my %seen;\n    foreach my $item (@test_tup) {\n        return 0 if $seen{$item}++;\n    }\n    return 1;\n}",
    "    my %count;\n    foreach my $elem (@$test_tup) {\n        $count{$elem}++;\n    }\n    foreach my $elem (keys %count) {\n        if ($count{$elem} > 1) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my %seen;\n    foreach my $elem (@$test_tup) {\n        return 0 if $seen{$elem};\n        $seen{$elem} = 1;\n    }\n    return 1;\n}",
    "    my @tup = @$test_tup;\n    my %seen;\n    foreach my $item (@tup) {\n        if ($seen{$item}) {\n            return 0;\n        }\n        $seen{$item} = 1;\n    }\n    return 1;\n}",
    "    my %seen = ();\n    foreach my $elem (@$test_tup) {\n        if ($seen{$elem}) {\n            return 0;\n        }\n        $seen{$elem} = 1;\n    }\n    return 1;\n}",
    "    my %seen;\n    foreach my $item (@$test_tup) {\n        return 0 if $seen{$item}++;\n    }\n    return 1;\n}",
    "    my %seen;\n    foreach my $elem (@$test_tup) {\n        return 0 if $seen{$elem}++;\n    }\n    return 1;\n}",
    "    my @tup = @{$test_tup};\n    my %seen = ();\n    foreach my $item (@tup) {\n        if ($seen{$item}) {\n            return 0;\n        }\n        $seen{$item} = 1;\n    }\n    return 1;\n}",
    "    my %seen;\n    foreach my $elem (@$test_tup) {\n        return 0 if $seen{$elem};\n        $seen{$elem} = 1;\n    }\n    return 1;\n}",
    "    my %seen;\n    foreach my $item (@$test_tup) {\n        return 0 if $seen{$item}++;\n    }\n    return 1;\n}",
    "    my %seen;\n    foreach my $elem (@$test_tup) {\n        return 0 if $seen{$elem};\n        $seen{$elem} = 1;\n    }\n    return 1;\n}",
    "    my %seen;\n    foreach my $item (@$test_tup) {\n        return 0 if $seen{$item}++;\n    }\n    return 1;\n}",
    "    my %seen = ();\n    foreach my $elem (@$test_tup) {\n        if (exists $seen{$elem}) {\n            return 0;\n        }\n        $seen{$elem} = 1;\n    }\n    return 1;\n}",
    "    my %seen = ();\n    foreach my $elem (@$test_tup) {\n        return 0 if $seen{$elem}++;\n    }\n    return 1;\n}",
    "    my @tup = @$test_tup;\n    my %seen = ();\n    foreach my $item (@tup) {\n        if ($seen{$item}) {\n            return 0;\n        }\n        $seen{$item} = 1;\n    }\n    return 1;\n}",
    "    my $n = scalar(@$test_tup);\n    my %seen;\n    for (my $i = 0; $i < $n; $i++) {\n        return 0 if $seen{$test_tup->[$i]};\n        $seen{$test_tup->[$i]} = 1;\n    }\n    return 1;\n}",
    "    my %seen = ();\n    foreach my $item (@$test_tup) {\n        return 0 if $seen{$item}++;\n    }\n    return 1;\n}",
    "    my $distinct = 1;\n    my %seen;\n    foreach my $elem (@$test_tup) {\n        if ($seen{$elem}) {\n            $distinct = 0;\n            last;\n        }\n        $seen{$elem} = 1;\n    }\n    return $distinct;\n}"
  ]
}