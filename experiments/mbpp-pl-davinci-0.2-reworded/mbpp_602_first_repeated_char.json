{
  "name": "mbpp_602_first_repeated_char",
  "language": "pl",
  "prompt": "# Write a plthon function to find the first repeated character in a given string.\nsub first_repeated_char {\n    my($str1) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_602_first_repeated_char.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&first_repeated_char;\n        if(eq_deeply($candidate->(\"abcabc\"),\"a\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abc\"),undef)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123123\"),\"1\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my %hash;\n    my @char = split(//, $str1);\n    foreach my $char (@char) {\n        if (exists($hash{$char})) {\n            return $char;\n        }\n        else {\n            $hash{$char} = 1;\n        }\n    }\n    return -1;\n}",
    "    my %hash = ();\n    foreach my $char (split //, $str1) {\n        if (exists $hash{$char}) {\n            return $char;\n        } else {\n            $hash{$char} = 1;\n        }\n    }\n    return undef;\n}",
    "    my %count;\n    foreach my $char (split //, $str1) {\n        $count{$char}++;\n        if($count{$char} > 1) {\n            return $char;\n        }\n    }\n}",
    "    my %char;\n    foreach my $char (split //, $str1) {\n        if (exists $char{$char}) {\n            return $char;\n        } else {\n            $char{$char} = 1;\n        }\n    }\n    return undef;\n}",
    "    my %char;\n    foreach my $char (split //, $str1) {\n        $char{$char}++;\n        if ($char{$char} == 2) {\n            return $char;\n        }\n    }\n    return undef;\n}",
    "    my %count;\n    foreach my $char (split //, $str1) {\n        $count{$char}++;\n        if ($count{$char} == 2) {\n            return $char;\n        }\n    }\n    return \"No repeated character\";\n}",
    "    my %char;\n    foreach my $char (split //, $str1) {\n        $char{$char}++;\n        if ($char{$char} == 2) {\n            return $char;\n        }\n    }\n    return undef;\n}",
    "    my %hash = ();\n    foreach my $char (split //, $str1) {\n        if (exists $hash{$char}) {\n            return $char;\n        }\n        else {\n            $hash{$char} = 1;\n        }\n    }\n    return undef;\n}",
    "    my(%hash,$ch);\n    foreach $ch(split //,$str1) {\n        if(exists $hash{$ch}) {\n            return $ch;\n        }\n        else {\n            $hash{$ch} = 1;\n        }\n    }\n    return \"No repeated character found\";\n}",
    "    my @str = split('',$str1);\n    my %hash;\n    foreach my $char (@str) {\n        if(exists $hash{$char}) {\n            return $char;\n        }\n        else {\n            $hash{$char} = 1;\n        }\n    }\n    return -1;\n}",
    "    my %char;\n    foreach my $char (split //, $str1) {\n        if(exists($char{$char})) {\n            return $char;\n        } else {\n            $char{$char} = 1;\n        }\n    }\n    return undef;\n}",
    "    my %char;\n    foreach my $char (split //, $str1) {\n        $char{$char}++;\n        if($char{$char} == 2) {\n            return $char;\n        }\n    }\n    return \"No repeated character found\";\n}",
    "    my %char;\n    foreach my $char (split //, $str1) {\n        $char{$char}++;\n        return $char if $char{$char} == 2;\n    }\n}\nprint first_repeated_char(\"the quick brown fox jumps then quickly blow air\");",
    "    my %char;\n    foreach my $char (split //, $str1) {\n        $char{$char}++;\n        if ($char{$char} == 2) {\n            return $char;\n        }\n    }\n    return undef;\n}",
    "    my %char;\n    foreach my $char (split //, $str1) {\n        if (exists $char{$char}) {\n            return $char;\n        }\n        else {\n            $char{$char} = 1;\n        }\n    }\n    return undef;\n}",
    "    my %char;\n    foreach my $char (split //, $str1) {\n        if (exists $char{$char}) {\n            return $char;\n        }\n        else {\n            $char{$char} = 1;\n        }\n    }\n    return undef;\n}",
    "    my %char;\n    foreach my $char(split //, $str1) {\n        $char{$char}++;\n    }\n    foreach my $char(split //, $str1) {\n        if($char{$char} > 1) {\n            return $char;\n        }\n    }\n}",
    "    my %char;\n    foreach my $char (split //, $str1) {\n        if(exists($char{$char})) {\n            return $char;\n        }\n        else {\n            $char{$char} = 1;\n        }\n    }\n    return undef;\n}",
    "    my %char;\n    foreach my $char (split //, $str1) {\n        $char{$char}++;\n        if ($char{$char} > 1) {\n            return $char;\n        }\n    }\n    return undef;\n}",
    "    my %char;\n    foreach my $char (split //, $str1) {\n        $char{$char}++;\n        if($char{$char} == 2) {\n            return $char;\n        }\n    }\n    return undef;\n}"
  ]
}