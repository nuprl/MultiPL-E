{
  "name": "mbpp_604_reverse_words",
  "language": "pl",
  "prompt": "# Write a function to reverse words seperated by spaces in a given string.\nsub reverse_words {\n    my($s) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_604_reverse_words.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&reverse_words;\n        if(eq_deeply($candidate->(\"python program\"),\"program python\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"java language\"),\"language java\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"indian man\"),\"man indian\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @words = split(/\\s+/, $s);\n    my $rev = join(\" \", reverse(@words));\n    return $rev;\n}",
    "    my @words = split /\\s+/, $s;\n    my $reversed = join ' ', reverse @words;\n    return $reversed;\n}",
    "    my @words = split /\\s+/, $s;\n    return join ' ', reverse @words;\n}",
    "    my @words = split(/\\s+/, $s);\n    my $reversed = join(' ', reverse(@words));\n    return $reversed;\n}",
    "    my @words = split /\\s+/, $s;\n    my $rev = '';\n    for my $word (reverse @words) {\n        $rev .= $word . ' ';\n    }\n    return $rev;\n}",
    "    my @words = split /\\s+/, $s;\n    my $reversed = join ' ', reverse @words;\n    return $reversed;\n}",
    "    my @words = split(/\\s+/, $s);\n    my $rev = join(' ', reverse(@words));\n    return $rev;\n}",
    "    my @words = split /\\s+/, $s;\n    my $rev = join ' ', reverse @words;\n    return $rev;\n}",
    "    my @words = split(/\\s+/, $s);\n    my $reversed = join(' ', reverse(@words));\n    return $reversed;\n}",
    "    my @words = split /\\s+/, $s;\n    return join ' ', reverse @words;\n}",
    "    my @words = split /\\s+/, $s;\n    return join ' ', reverse @words;\n}",
    "    my @words = split(/\\s+/, $s);\n    my $r = join(' ', reverse(@words));\n    return $r;\n}",
    "    my @words = split(/\\s+/, $s);\n    my $reversed = join(' ', reverse(@words));\n    return $reversed;\n}",
    "    my @words = split /\\s+/, $s;\n    my $rev = join ' ', reverse @words;\n    return $rev;\n}",
    "    my @words = split(/\\s+/, $s);\n    my $reversed = join(' ', reverse(@words));\n    return $reversed;\n}",
    "    my @words = split(/\\s+/, $s);\n    my $rev = join(' ', reverse(@words));\n    return $rev;\n}",
    "    my @words = split(/\\s+/, $s);\n    my $reversed = join(' ', reverse(@words));\n    return $reversed;\n}",
    "    my @words = split /\\s+/, $s;\n    my $rev = join ' ', reverse @words;\n    return $rev;\n}",
    "    my @words = split(/\\s+/, $s);\n    my @rev_words = reverse(@words);\n    return join(' ', @rev_words);\n}",
    "    my @words = split /\\s+/, $s;\n    my $reversed = join ' ', reverse @words;\n    return $reversed;\n}"
  ]
}