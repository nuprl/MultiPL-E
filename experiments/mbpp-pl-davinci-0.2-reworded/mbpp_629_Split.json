{
  "name": "mbpp_629_Split",
  "language": "pl",
  "prompt": "# Write a plthon function to find even numbers from an array of numbers.\nsub Split {\n    my($list) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_629_Split.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Split;\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5]),[2, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8, 12, 15, 19]),[8, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @evens = ();\n    my @odds = ();\n    foreach my $num (@$list) {\n        if ($num % 2 == 0) {\n            push @evens, $num;\n        } else {\n            push @odds, $num;\n        }\n    }\n    return (\\@evens, \\@odds);\n}",
    "    my @evens = ();\n    my @odds = ();\n    foreach my $num (@$list) {\n        if ($num % 2 == 0) {\n            push @evens, $num;\n        } else {\n            push @odds, $num;\n        }\n    }\n    return (\\@evens, \\@odds);\n}",
    "    my(@list) = split(/,/, $list);\n    my(@even) = ();\n    my($i);\n    for ($i = 0; $i <= $#list; $i++) {\n        if ($list[$i] % 2 == 0) {\n            push(@even, $list[$i]);\n        }\n    }\n    return @even;\n}",
    "    my(@list) = split(/\\s+/,$list);\n    return(@list);\n}",
    "    my(@list) = split(/\\s+/, $list);\n    my(@evens);\n    foreach $item (@list) {\n        if ($item % 2 == 0) {\n            push(@evens, $item);\n        }\n    }\n    return @evens;\n}",
    "    my(@list) = split(/\\s+/, $list);\n    my(@even) = ();\n    foreach $item (@list) {\n        if ($item % 2 == 0) {\n            push(@even, $item);\n        }\n    }\n    return @even;\n}",
    "    my @evens = ();\n    my @odds = ();\n    foreach my $num (@$list) {\n        if ($num % 2 == 0) {\n            push @evens, $num;\n        } else {\n            push @odds, $num;\n        }\n    }\n    return (\\@evens, \\@odds);\n}",
    "    my(@list) = split(/\\s+/, $list);\n    return @list;\n}",
    "    my @even;\n    my @odd;\n    foreach my $num (@$list){\n        if($num % 2 == 0){\n            push @even, $num;\n        }\n        else{\n            push @odd, $num;\n        }\n    }\n    return (\\@even, \\@odd);\n}",
    "    my @numbers = split(/ /, $list);\n    my @even;\n    foreach $number (@numbers) {\n        if ($number % 2 == 0) {\n            push(@even, $number);\n        }\n    }\n    return @even;\n}",
    "    my(@list) = split(/\\s+/, $list);\n    return @list;\n}",
    "    my @even;\n    foreach my $i (@$list) {\n        if ($i % 2 == 0) {\n            push @even, $i;\n        }\n    }\n    return @even;\n}",
    "    my @even;\n    my @odd;\n    foreach my $i (@$list) {\n        if ($i % 2 == 0) {\n            push @even, $i;\n        } else {\n            push @odd, $i;\n        }\n    }\n    return (\\@even, \\@odd);\n}",
    "    my @even;\n    my @odd;\n    foreach my $i (@$list) {\n        if ($i % 2 == 0) {\n            push @even, $i;\n        }\n        else {\n            push @odd, $i;\n        }\n    }\n    return (\\@even, \\@odd);\n}",
    "    my(@list) = split(/\\s+/, $list);\n    return @list;\n}",
    "    my @numbers = split(/\\s+/, $list);\n    my @evens = ();\n    foreach my $number (@numbers) {\n        if ($number % 2 == 0) {\n            push @evens, $number;\n        }\n    }\n    return @evens;\n}\nprint \"Enter the numbers : \";\nmy $list = <STDIN>;\nmy @evens = Split($list);\nprint \"Even numbers are : @evens\\n\";",
    "    my(@list) = split(/\\s+/,$list);\n    return @list;\n}",
    "    my @numbers = split(/,/, $list);\n    my @evens;\n    foreach my $num (@numbers) {\n        if ($num % 2 == 0) {\n            push(@evens, $num);\n        }\n    }\n    return @evens;\n}",
    "    my(@list) = split(/ /,$list);\n    my(@even);\n    foreach my $num (@list) {\n        if ($num % 2 == 0) {\n            push(@even,$num);\n        }\n    }\n    return @even;\n}",
    "    my @numbers = split(/,/, $list);\n    my @even_numbers = ();\n    foreach my $number (@numbers) {\n        if ($number % 2 == 0) {\n            push(@even_numbers, $number);\n        }\n    }\n    return @even_numbers;\n}",
    "    my(@even, @odd);\n    foreach my $item (@$list) {\n        if ($item % 2 == 0) {\n            push @even, $item;\n        } else {\n            push @odd, $item;\n        }\n    }\n    return (\\@even, \\@odd);\n}\nmy @list = (1, 2, 3, 4, 5, 6, 7, 8, 9);\nmy($even, $odd) = Split(\\@list);\nprint \"Even: @$even\\n\";\nprint \"Odd: @$odd\\n\";",
    "    my @even;\n    foreach my $num (@$list) {\n        if ($num % 2 == 0) {\n            push @even, $num;\n        }\n    }\n    return \\@even;\n}",
    "    my @numbers = split(/,/, $list);\n    my @even;\n    foreach my $number (@numbers) {\n        if ($number % 2 == 0) {\n            push @even, $number;\n        }\n    }\n    return @even;\n}",
    "    my @evens = ();\n    my @odds = ();\n    foreach my $num (@$list) {\n        if ($num % 2 == 0) {\n            push @evens, $num;\n        } else {\n            push @odds, $num;\n        }\n    }\n    return (\\@evens, \\@odds);\n}",
    "    my @array = split(/ /, $list);\n    my @even;\n    foreach my $num (@array) {\n        if ($num % 2 == 0) {\n            push(@even, $num);\n        }\n    }\n    return @even;\n}",
    "    my @even_list;\n    my @odd_list;\n    foreach my $num (@$list) {\n        if ($num % 2 == 0) {\n            push @even_list, $num;\n        } else {\n            push @odd_list, $num;\n        }\n    }\n    return (\\@even_list, \\@odd_list);\n}",
    "    my(@list) = split(/\\s+/, $list);\n    return @list;\n}",
    "    my @array = split(/\\s+/, $list);\n    my @even;\n    foreach my $num (@array) {\n        if ($num % 2 == 0) {\n            push @even, $num;\n        }\n    }\n    return @even;\n}",
    "    my @even;\n    my @odd;\n    foreach my $num (@$list) {\n        if ($num % 2 == 0) {\n            push @even, $num;\n        } else {\n            push @odd, $num;\n        }\n    }\n    return (\\@even, \\@odd);\n}",
    "    my(@list) = split(/,/, $list);\n    my(@even);\n    foreach my $i (@list) {\n        if ($i % 2 == 0) {\n            push(@even, $i);\n        }\n    }\n    return @even;\n}",
    "    my @even;\n    my @odd;\n    foreach my $num (@$list) {\n        if ($num % 2 == 0) {\n            push @even, $num;\n        } else {\n            push @odd, $num;\n        }\n    }\n    return (\\@even, \\@odd);\n}",
    "    my @list = split(/ /, $list);\n    my @even;\n    foreach my $num (@list) {\n        if ($num % 2 == 0) {\n            push(@even, $num);\n        }\n    }\n    return @even;\n}",
    "    my @numbers = split(/,/, $list);\n    my @even;\n    foreach my $num (@numbers) {\n        if($num % 2 == 0) {\n            push(@even, $num);\n        }\n    }\n    return @even;\n}",
    "    my @numbers = split(/,/, $list);\n    my @even = ();\n    foreach my $num (@numbers) {\n        if ($num % 2 == 0) {\n            push(@even, $num);\n        }\n    }\n    return @even;\n}",
    "    my(@list) = split(/\\s+/, $list);\n    my(@even) = ();\n    my($i);\n    for($i = 0; $i <= $#list; $i++) {\n        if($list[$i] % 2 == 0) {\n            push(@even, $list[$i]);\n        }\n    }\n    return @even;\n}",
    "    my @even;\n    foreach my $num (@$list) {\n        if ($num % 2 == 0) {\n            push @even, $num;\n        }\n    }\n    return @even;\n}",
    "    my @even = ();\n    my @odd = ();\n    foreach my $num (@$list) {\n        if ($num % 2 == 0) {\n            push @even, $num;\n        } else {\n            push @odd, $num;\n        }\n    }\n    return (\\@even, \\@odd);\n}",
    "    my @even;\n    foreach my $num (@$list) {\n        if ($num % 2 == 0) {\n            push @even, $num;\n        }\n    }\n    return @even;\n}",
    "    my @even;\n    my @odd;\n    foreach my $num (@$list) {\n        if ($num % 2 == 0) {\n            push @even, $num;\n        } else {\n            push @odd, $num;\n        }\n    }\n    return (\\@even, \\@odd);\n}",
    "    my @even;\n    my @odd;\n    foreach my $num (@$list) {\n        if ($num % 2 == 0) {\n            push @even, $num;\n        }\n        else {\n            push @odd, $num;\n        }\n    }\n    return (\\@even, \\@odd);\n}",
    "    my @even;\n    my @odd;\n    foreach my $num (@$list) {\n        if ($num % 2 == 0) {\n            push @even, $num;\n        } else {\n            push @odd, $num;\n        }\n    }\n    return (\\@even, \\@odd);\n}",
    "    my(@list) = split(/\\s+/, $list);\n    my(@even) = ();\n    foreach $item (@list) {\n        if ($item % 2 == 0) {\n            push(@even, $item);\n        }\n    }\n    return @even;\n}",
    "    my @even;\n    my @odd;\n    foreach my $num (@$list) {\n        if ($num % 2 == 0) {\n            push @even, $num;\n        }\n        else {\n            push @odd, $num;\n        }\n    }\n    return (\\@even, \\@odd);\n}",
    "    my @even;\n    foreach my $num (@$list) {\n        if ($num % 2 == 0) {\n            push @even, $num;\n        }\n    }\n    return @even;\n}",
    "    my @even = ();\n    my @odd = ();\n    foreach my $num (@$list) {\n        if ($num % 2 == 0) {\n            push @even, $num;\n        }\n        else {\n            push @odd, $num;\n        }\n    }\n    return (\\@even, \\@odd);\n}",
    "    my(@list) = split(/\\s+/,$list);\n    return @list;\n}",
    "    my(@list) = split(/\\s+/, $list);\n    my(@even) = ();\n    foreach $item (@list) {\n        if ($item % 2 == 0) {\n            push(@even, $item);\n        }\n    }\n    return @even;\n}",
    "    my(@list) = split(/\\s+/, $list);\n    my(@even) = ();\n    foreach $item (@list) {\n        if($item % 2 == 0) {\n            push(@even, $item);\n        }\n    }\n    return @even;\n}",
    "    my(@even) = ();\n    my(@odd) = ();\n    foreach my $element (@$list) {\n        if ($element % 2 == 0) {\n            push(@even, $element);\n        } else {\n            push(@odd, $element);\n        }\n    }\n    return (\\@even, \\@odd);\n}",
    "    my @numbers = split(/\\s+/, $list);\n    my @evens = ();\n    foreach my $number (@numbers) {\n        if ($number % 2 == 0) {\n            push(@evens, $number);\n        }\n    }\n    return @evens;\n}",
    "    my @even;\n    my @odd;\n    foreach my $i (@$list) {\n        if ($i % 2 == 0) {\n            push @even, $i;\n        } else {\n            push @odd, $i;\n        }\n    }\n    return (\\@even, \\@odd);\n}",
    "    my(@list) = split(/\\s+/, $list);\n    my(@even) = ();\n    foreach $item (@list) {\n        if ($item % 2 == 0) {\n            push(@even, $item);\n        }\n    }\n    return @even;\n}",
    "    my @even;\n    my @odd;\n    foreach my $number (@$list) {\n        if ($number % 2 == 0) {\n            push @even, $number;\n        }\n        else {\n            push @odd, $number;\n        }\n    }\n    return (\\@even, \\@odd);\n}",
    "    my @even = ();\n    my @odd = ();\n    foreach my $num (@$list) {\n        if ($num % 2 == 0) {\n            push @even, $num;\n        } else {\n            push @odd, $num;\n        }\n    }\n    return (\\@even, \\@odd);\n}",
    "    my @even;\n    my @odd;\n    foreach my $num (@$list) {\n        if ($num % 2 == 0) {\n            push @even, $num;\n        } else {\n            push @odd, $num;\n        }\n    }\n    return (\\@even, \\@odd);\n}",
    "    my(@list) = split(/\\s+/, $list);\n    my(@even) = ();\n    foreach my $num (@list) {\n        if ($num % 2 == 0) {\n            push(@even, $num);\n        }\n    }\n    return @even;\n}",
    "    my @numbers = split(/\\s+/, $list);\n    my @evens = ();\n    foreach my $number (@numbers) {\n        if ($number % 2 == 0) {\n            push(@evens, $number);\n        }\n    }\n    return @evens;\n}",
    "    my @even;\n    my @odd;\n    foreach my $num (@$list) {\n        if ($num % 2 == 0) {\n            push @even, $num;\n        }\n        else {\n            push @odd, $num;\n        }\n    }\n    return (\\@even, \\@odd);\n}",
    "    my @numbers = split(/\\s+/, $list);\n    my @evens = ();\n    foreach my $num (@numbers) {\n        if ($num % 2 == 0) {\n            push @evens, $num;\n        }\n    }\n    return @evens;\n}",
    "    my(@list) = split(/\\s+/, $list);\n    return @list;\n}",
    "    my @numbers = split(/,/, $list);\n    my @even;\n    foreach my $num (@numbers) {\n        if ($num % 2 == 0) {\n            push @even, $num;\n        }\n    }\n    return @even;\n}",
    "    my(@list) = split(/\\s+/, $list);\n    my(@even) = ();\n    foreach $item (@list) {\n        if ($item % 2 == 0) {\n            push(@even, $item);\n        }\n    }\n    return @even;\n}",
    "    my @even;\n    foreach my $num (@$list) {\n        if ($num % 2 == 0) {\n            push @even, $num;\n        }\n    }\n    return @even;\n}",
    "    my @even_numbers = ();\n    foreach my $number (@$list) {\n        if ($number % 2 == 0) {\n            push(@even_numbers, $number);\n        }\n    }\n    return @even_numbers;\n}",
    "    my(@array) = split(/\\s+/, $list);\n    my(@even);\n    foreach my $num (@array) {\n        if ($num % 2 == 0) {\n            push(@even, $num);\n        }\n    }\n    return @even;\n}",
    "    my(@list) = split(/\\s+/, $list);\n    my(@even) = ();\n    foreach $num (@list) {\n        if ($num % 2 == 0) {\n            push(@even, $num);\n        }\n    }\n    return @even;\n}",
    "    my @numbers = split(/,/, $list);\n    my @evens;\n    foreach my $num (@numbers) {\n        if ($num % 2 == 0) {\n            push(@evens, $num);\n        }\n    }\n    return @evens;\n}",
    "    my @numbers = split(/\\s+/, $list);\n    my @even;\n    foreach my $number (@numbers) {\n        if ($number % 2 == 0) {\n            push @even, $number;\n        }\n    }\n    return @even;\n}",
    "    my @even = ();\n    my @odd = ();\n    foreach my $num (@$list) {\n        if ($num % 2 == 0) {\n            push @even, $num;\n        } else {\n            push @odd, $num;\n        }\n    }\n    return (\\@even, \\@odd);\n}",
    "    my @array = split(/ /, $list);\n    my @even;\n    foreach my $x (@array) {\n        if ($x % 2 == 0) {\n            push @even, $x;\n        }\n    }\n    return @even;\n}",
    "    my @even_list;\n    my @odd_list;\n    foreach my $number (@$list) {\n        if ($number % 2 == 0) {\n            push @even_list, $number;\n        } else {\n            push @odd_list, $number;\n        }\n    }\n    return (\\@even_list, \\@odd_list);\n}",
    "    my @numbers = split(/,/,$list);\n    my @even_numbers = ();\n    foreach my $number (@numbers) {\n        if($number % 2 == 0) {\n            push(@even_numbers,$number);\n        }\n    }\n    return @even_numbers;\n}",
    "    my(@list) = split(/\\s+/, $list);\n    return @list;\n}",
    "    my @numbers = split(/ /,$list);\n    foreach my $num (@numbers) {\n        if($num % 2 == 0) {\n            print \"$num\\n\";\n        }\n    }\n}",
    "    my @numbers = split(/ /, $list);\n    my @even;\n    foreach my $num (@numbers) {\n        if ($num % 2 == 0) {\n            push(@even, $num);\n        }\n    }\n    return @even;\n}",
    "    my @even;\n    my @odd;\n    foreach my $num (@$list) {\n        if ($num % 2 == 0) {\n            push @even, $num;\n        } else {\n            push @odd, $num;\n        }\n    }\n    return (\\@even, \\@odd);\n}",
    "    my @array = split(/ /, $list);\n    my @even_numbers = grep {$_ % 2 == 0} @array;\n    print \"Even numbers: @even_numbers\\n\";\n}",
    "    my(@evens, @odds);\n    foreach my $item (@$list) {\n        if ($item % 2 == 0) {\n            push @evens, $item;\n        } else {\n            push @odds, $item;\n        }\n    }\n    return (\\@evens, \\@odds);\n}\nmy @numbers = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\nmy($evens, $odds) = Split(\\@numbers);\nprint \"Even numbers: @$evens\\n\";\nprint \"Odd numbers: @$odds\\n\";",
    "    my(@list) = split(/\\s+/, $list);\n    return @list;\n}",
    "    my @even;\n    my @odd;\n    foreach my $num (@$list) {\n        if ($num % 2 == 0) {\n            push @even, $num;\n        }\n        else {\n            push @odd, $num;\n        }\n    }\n    return (\\@even, \\@odd);\n}",
    "    my @even_numbers;\n    foreach my $number (@$list) {\n        if ($number % 2 == 0) {\n            push @even_numbers, $number;\n        }\n    }\n    return @even_numbers;\n}",
    "    my @numbers = split(/\\s+/, $list);\n    my @evens = grep { $_ % 2 == 0 } @numbers;\n    return @evens;\n}",
    "    my @even;\n    my @odd;\n    foreach my $item (@$list) {\n        if ($item % 2 == 0) {\n            push @even, $item;\n        } else {\n            push @odd, $item;\n        }\n    }\n    return (\\@even, \\@odd);\n}",
    "    my(@even) = ();\n    my(@odd) = ();\n    foreach my $item (@$list) {\n        if ($item % 2 == 0) {\n            push(@even, $item);\n        } else {\n            push(@odd, $item);\n        }\n    }\n    return (\\@even, \\@odd);\n}",
    "    my @even = ();\n    my @odd = ();\n    foreach my $num (@$list) {\n        if ($num % 2 == 0) {\n            push @even, $num;\n        } else {\n            push @odd, $num;\n        }\n    }\n    return (\\@even, \\@odd);\n}",
    "    my @even;\n    my @odd;\n    foreach my $num (@$list) {\n        if ($num % 2 == 0) {\n            push @even, $num;\n        }\n        else {\n            push @odd, $num;\n        }\n    }\n    return (\\@even, \\@odd);\n}",
    "    my(@list) = split(/,/, $list);\n    my(@even) = ();\n    foreach $num (@list) {\n        if ($num % 2 == 0) {\n            push(@even, $num);\n        }\n    }\n    return @even;\n}",
    "    my @even;\n    my @odd;\n    foreach my $num (@$list) {\n        if ($num % 2 == 0) {\n            push @even, $num;\n        }\n        else {\n            push @odd, $num;\n        }\n    }\n    return (\\@even, \\@odd);\n}",
    "    my @even;\n    my @odd;\n    foreach my $number (@$list) {\n        if ($number % 2 == 0) {\n            push @even, $number;\n        }\n        else {\n            push @odd, $number;\n        }\n    }\n    return (\\@even, \\@odd);\n}",
    "    my @even;\n    my @odd;\n    foreach my $number (@$list) {\n        if ($number % 2 == 0) {\n            push @even, $number;\n        }\n        else {\n            push @odd, $number;\n        }\n    }\n    return (\\@even, \\@odd);\n}",
    "    my @numbers = split(/,/, $list);\n    my @even;\n    foreach my $num (@numbers) {\n        if ($num % 2 == 0) {\n            push @even, $num;\n        }\n    }\n    return @even;\n}",
    "    my @even_numbers = ();\n    foreach my $number (@$list) {\n        if ($number % 2 == 0) {\n            push @even_numbers, $number;\n        }\n    }\n    return \\@even_numbers;\n}",
    "    my(@list) = split(/\\s+/, $list);\n    return @list;\n}",
    "    my @numbers = split(/\\s+/, $list);\n    my @even;\n    foreach my $number (@numbers) {\n        if ($number % 2 == 0) {\n            push @even, $number;\n        }\n    }\n    return @even;\n}",
    "    my @even;\n    foreach my $num (@$list) {\n        if ($num % 2 == 0) {\n            push @even, $num;\n        }\n    }\n    return @even;\n}",
    "    my @numbers = split(/ /,$list);\n    print \"Even numbers are : \";\n    foreach my $num (@numbers) {\n        if($num % 2 == 0) {\n            print \"$num \";\n        }\n    }\n    print \"\\n\";\n}",
    "    my @evens = ();\n    foreach my $item (@$list) {\n        if ($item % 2 == 0) {\n            push @evens, $item;\n        }\n    }\n    return \\@evens;\n}",
    "    my @array = split(/\\s+/, $list);\n    return @array;\n}",
    "    my @evens;\n    foreach my $num (@$list) {\n        if ($num % 2 == 0) {\n            push @evens, $num;\n        }\n    }\n    return @evens;\n}",
    "    my @array = split(/\\s+/, $list);\n    my @even;\n    foreach my $num (@array) {\n        if ($num % 2 == 0) {\n            push @even, $num;\n        }\n    }\n    return @even;\n}",
    "    my @even;\n    foreach my $num (@$list) {\n        if ($num % 2 == 0) {\n            push @even, $num;\n        }\n    }\n    return @even;\n}",
    "    my(@even, @odd);\n    foreach my $item (@$list) {\n        if ($item % 2 == 0) {\n            push @even, $item;\n        }\n        else {\n            push @odd, $item;\n        }\n    }\n    return (\\@even, \\@odd);\n}",
    "    my @numbers = split(/ /,$list);\n    my @even_numbers;\n    foreach my $number (@numbers) {\n        if ($number % 2 == 0) {\n            push(@even_numbers,$number);\n        }\n    }\n    return @even_numbers;\n}",
    "    my @numbers = split(/,/, $list);\n    my @even;\n    foreach my $num (@numbers) {\n        if ($num % 2 == 0) {\n            push(@even, $num);\n        }\n    }\n    return @even;\n}",
    "    my @even;\n    my @odd;\n    foreach my $num (@$list) {\n        if ($num % 2 == 0) {\n            push @even, $num;\n        }\n        else {\n            push @odd, $num;\n        }\n    }\n    return (\\@even, \\@odd);\n}",
    "    my @even_numbers;\n    foreach my $number (@$list) {\n        if($number % 2 == 0) {\n            push(@even_numbers, $number);\n        }\n    }\n    return @even_numbers;\n}",
    "    my @numbers = split(/\\s+/, $list);\n    return @numbers;\n}",
    "    my @numbers = split(/,/, $list);\n    my @even;\n    foreach my $num (@numbers) {\n        if($num % 2 == 0) {\n            push @even, $num;\n        }\n    }\n    return @even;\n}",
    "    my @even;\n    foreach my $i (@$list) {\n        if ($i % 2 == 0) {\n            push @even, $i;\n        }\n    }\n    return @even;\n}",
    "    my @array = split(/\\s+/, $list);\n    my @even_array;\n    foreach my $num (@array) {\n        if ($num % 2 == 0) {\n            push(@even_array, $num);\n        }\n    }\n    return @even_array;\n}",
    "    my(@list) = split(/\\s+/, $list);\n    my(@even);\n    foreach $item (@list) {\n        if ($item % 2 == 0) {\n            push(@even, $item);\n        }\n    }\n    return @even;\n}",
    "    my @even;\n    my @odd;\n    foreach my $num (@$list) {\n        if ($num % 2 == 0) {\n            push @even, $num;\n        }\n        else {\n            push @odd, $num;\n        }\n    }\n    return (\\@even, \\@odd);\n}",
    "    my @numbers = split(/ /, $list);\n    my @evens = ();\n    my @odds = ();\n    foreach my $num (@numbers) {\n        if ($num % 2 == 0) {\n            push @evens, $num;\n        } else {\n            push @odds, $num;\n        }\n    }\n    return (\\@evens, \\@odds);\n}",
    "    my @even = ();\n    my @odd = ();\n    foreach my $number (@$list) {\n        if ($number % 2 == 0) {\n            push @even, $number;\n        }\n        else {\n            push @odd, $number;\n        }\n    }\n    return (\\@even, \\@odd);\n}",
    "    my @even;\n    my @odd;\n    foreach my $num (@$list) {\n        if ($num % 2 == 0) {\n            push @even, $num;\n        }\n        else {\n            push @odd, $num;\n        }\n    }\n    return (\\@even, \\@odd);\n}",
    "    my @numbers = split(/\\s+/, $list);\n    my @even;\n    foreach my $number (@numbers) {\n        if ($number % 2 == 0) {\n            push @even, $number;\n        }\n    }\n    return @even;\n}",
    "    my @even = ();\n    my @odd = ();\n    foreach my $num (@$list) {\n        if ($num % 2 == 0) {\n            push @even, $num;\n        } else {\n            push @odd, $num;\n        }\n    }\n    return (\\@even, \\@odd);\n}",
    "    my @numbers = split(/\\s+/, $list);\n    my @even;\n    foreach my $num (@numbers) {\n        if ($num % 2 == 0) {\n            push(@even, $num);\n        }\n    }\n    return @even;\n}",
    "    my @list = split(/\\s+/, $list);\n    my @even;\n    foreach my $num (@list) {\n        if ($num % 2 == 0) {\n            push @even, $num;\n        }\n    }\n    return @even;\n}",
    "    my @even_list;\n    my @odd_list;\n    my @list = split(/,/,$list);\n    foreach my $num (@list) {\n        if ($num % 2 == 0) {\n            push(@even_list,$num);\n        } else {\n            push(@odd_list,$num);\n        }\n    }\n    return (\\@even_list,\\@odd_list);\n}",
    "    my @even = ();\n    my @odd = ();\n    foreach my $num (@$list) {\n        if ($num % 2 == 0) {\n            push @even, $num;\n        } else {\n            push @odd, $num;\n        }\n    }\n    return (\\@even, \\@odd);\n}",
    "    my @even;\n    my @odd;\n    foreach my $i (@$list) {\n        if ($i % 2 == 0) {\n            push @even, $i;\n        }\n        else {\n            push @odd, $i;\n        }\n    }\n    return (\\@even, \\@odd);\n}",
    "    my @numbers = split(/\\s+/, $list);\n    my @even;\n    foreach my $number (@numbers) {\n        if ($number % 2 == 0) {\n            push @even, $number;\n        }\n    }\n    return @even;\n}",
    "    my @even;\n    my @odd;\n    foreach my $number (@$list) {\n        if ($number % 2 == 0) {\n            push @even, $number;\n        }\n        else {\n            push @odd, $number;\n        }\n    }\n    return (\\@even, \\@odd);\n}",
    "    my @even_numbers;\n    foreach my $number (@$list) {\n        if($number % 2 == 0) {\n            push(@even_numbers, $number);\n        }\n    }\n    return @even_numbers;\n}",
    "    my(@list) = split(/\\s+/, $list);\n    return @list;\n}",
    "    my @numbers = split(/,/, $list);\n    my @even_numbers = ();\n    foreach my $number (@numbers) {\n        if ($number % 2 == 0) {\n            push(@even_numbers, $number);\n        }\n    }\n    return @even_numbers;\n}",
    "    my @even = ();\n    my @odd = ();\n    foreach my $num (@$list) {\n        if ($num % 2 == 0) {\n            push @even, $num;\n        } else {\n            push @odd, $num;\n        }\n    }\n    return (\\@even, \\@odd);\n}",
    "    my @numbers = split(/ /, $list);\n    my @even;\n    foreach my $num (@numbers) {\n        if ($num % 2 == 0) {\n            push(@even, $num);\n        }\n    }\n    return @even;\n}",
    "    my @numbers = split(/,/, $list);\n    my @even;\n    foreach my $num (@numbers) {\n        if($num % 2 == 0) {\n            push(@even, $num);\n        }\n    }\n    return @even;\n}",
    "    my(@array) = split(/,/, $list);\n    my(@even);\n    foreach my $number (@array) {\n        if ($number % 2 == 0) {\n            push(@even, $number);\n        }\n    }\n    return @even;\n}",
    "    my @numbers = split(/ /,$list);\n    my @even;\n    foreach my $num (@numbers) {\n        if($num % 2 == 0) {\n            push(@even,$num);\n        }\n    }\n    return @even;\n}",
    "    my @even;\n    foreach my $i (@$list) {\n        if ($i % 2 == 0) {\n            push @even, $i;\n        }\n    }\n    return @even;\n}",
    "    my @even;\n    foreach my $i (@$list) {\n        if ($i % 2 == 0) {\n            push @even, $i;\n        }\n    }\n    return @even;\n}",
    "    my @numbers = split(/\\s+/, $list);\n    my @even;\n    foreach my $number (@numbers) {\n        if ($number % 2 == 0) {\n            push @even, $number;\n        }\n    }\n    return @even;\n}",
    "    my @even;\n    my @odd;\n    foreach my $num (@$list) {\n        if ($num % 2 == 0) {\n            push @even, $num;\n        } else {\n            push @odd, $num;\n        }\n    }\n    return (\\@even, \\@odd);\n}",
    "    my @even;\n    my @odd;\n    foreach my $i (@$list) {\n        if ($i % 2 == 0) {\n            push @even, $i;\n        } else {\n            push @odd, $i;\n        }\n    }\n    return (\\@even, \\@odd);\n}",
    "    my @even = ();\n    my @odd = ();\n    foreach my $num (@$list) {\n        if ($num % 2 == 0) {\n            push @even, $num;\n        } else {\n            push @odd, $num;\n        }\n    }\n    return (\\@even, \\@odd);\n}",
    "    my @numbers = split(/\\s+/, $list);\n    my @evens = ();\n    foreach my $number (@numbers) {\n        if ($number % 2 == 0) {\n            push @evens, $number;\n        }\n    }\n    return @evens;\n}",
    "    my(@list) = split(/,/, $list);\n    my(@even) = ();\n    my($i);\n    for($i = 0; $i <= $#list; $i++) {\n        if($list[$i] % 2 == 0) {\n            push(@even, $list[$i]);\n        }\n    }\n    return @even;\n}",
    "    my @numbers = split(/ /, $list);\n    my @even;\n    foreach my $num (@numbers) {\n        if ($num % 2 == 0) {\n            push(@even, $num);\n        }\n    }\n    return @even;\n}",
    "    my @array = split(/ /, $list);\n    my @even;\n    foreach my $num (@array) {\n        if ($num % 2 == 0) {\n            push(@even, $num);\n        }\n    }\n    return @even;\n}",
    "    my @array = split(/\\s+/, $list);\n    my @even;\n    foreach my $num (@array) {\n        if ($num % 2 == 0) {\n            push(@even, $num);\n        }\n    }\n    return @even;\n}",
    "    my @numbers = split(/,/, $list);\n    my @even;\n    foreach my $num (@numbers) {\n        if ($num % 2 == 0) {\n            push @even, $num;\n        }\n    }\n    return @even;\n}",
    "    my(@list) = split(/\\s+/, $list);\n    my(@even) = ();\n    foreach $num (@list) {\n        if ($num % 2 == 0) {\n            push(@even, $num);\n        }\n    }\n    return @even;\n}",
    "    my(@array) = split(/,/, $list);\n    my(@even);\n    foreach my $num (@array) {\n        if ($num % 2 == 0) {\n            push(@even, $num);\n        }\n    }\n    return @even;\n}",
    "    my @numbers = split(/ /, $list);\n    my @evens = ();\n    foreach my $num (@numbers) {\n        if ($num % 2 == 0) {\n            push(@evens, $num);\n        }\n    }\n    return @evens;\n}",
    "    my @array = split(/,/,$list);\n    my @even;\n    foreach my $num (@array) {\n        if ($num % 2 == 0) {\n            push(@even,$num);\n        }\n    }\n    return @even;\n}",
    "    my @numbers = split(/\\s+/, $list);\n    my @evens = ();\n    foreach my $number (@numbers) {\n        if ($number % 2 == 0) {\n            push(@evens, $number);\n        }\n    }\n    return @evens;\n}",
    "    my @array = split(/ /, $list);\n    my @even_array;\n    foreach my $number (@array) {\n        if ($number % 2 == 0) {\n            push @even_array, $number;\n        }\n    }\n    return @even_array;\n}",
    "    my @numbers = split(/,/, $list);\n    my @even;\n    foreach my $number (@numbers) {\n        if ($number % 2 == 0) {\n            push(@even, $number);\n        }\n    }\n    return @even;\n}",
    "    my @numbers = split(/\\s+/, $list);\n    my @even;\n    foreach my $num (@numbers) {\n        if ($num % 2 == 0) {\n            push @even, $num;\n        }\n    }\n    return @even;\n}",
    "    my @numbers = split(/,/, $list);\n    my @even_numbers = ();\n    foreach my $number (@numbers) {\n        if ($number % 2 == 0) {\n            push(@even_numbers, $number);\n        }\n    }\n    return @even_numbers;\n}",
    "    my @even = ();\n    my @odd = ();\n    foreach my $num (@$list) {\n        if ($num % 2 == 0) {\n            push @even, $num;\n        } else {\n            push @odd, $num;\n        }\n    }\n    return (\\@even, \\@odd);\n}",
    "    my @even;\n    foreach my $num (@$list) {\n        if ($num % 2 == 0) {\n            push @even, $num;\n        }\n    }\n    return @even;\n}",
    "    my(@list) = split(/\\s+/, $list);\n    my(@even) = ();\n    foreach $item (@list) {\n        if ($item % 2 == 0) {\n            push(@even, $item);\n        }\n    }\n    return @even;\n}",
    "    my @numbers = split(/,/, $list);\n    my @even_numbers = ();\n    foreach my $number (@numbers) {\n        if ($number % 2 == 0) {\n            push(@even_numbers, $number);\n        }\n    }\n    return @even_numbers;\n}",
    "    my(@list) = split(/\\s+/, $list);\n    return @list;\n}",
    "    my(@array) = split(/,/,$list);\n    my(@even);\n    foreach my $i (@array) {\n        if($i % 2 == 0) {\n            push(@even,$i);\n        }\n    }\n    return @even;\n}",
    "    my(@list) = split(/\\s+/, $list);\n    return @list;\n}",
    "    my(@list) = split(/,/, $list);\n    my(@even);\n    foreach my $i (@list) {\n        if($i % 2 == 0) {\n            push(@even, $i);\n        }\n    }\n    return @even;\n}",
    "    my @numbers = split(/,/, $list);\n    my @even_numbers = ();\n    foreach my $number (@numbers) {\n        if($number % 2 == 0) {\n            push(@even_numbers, $number);\n        }\n    }\n    return @even_numbers;\n}",
    "    my(@list) = split(/\\s+/, $list);\n    my(@even) = ();\n    my($i);\n    for ($i = 0; $i <= $#list; $i++) {\n        if ($list[$i] % 2 == 0) {\n            push(@even, $list[$i]);\n        }\n    }\n    return @even;\n}",
    "    my @even;\n    my @odd;\n    foreach my $num (@$list) {\n        if ($num % 2 == 0) {\n            push @even, $num;\n        }\n        else {\n            push @odd, $num;\n        }\n    }\n    return (\\@even, \\@odd);\n}",
    "    my @numbers = split(/\\s+/, $list);\n    my @even_numbers = ();\n    foreach my $number (@numbers) {\n        if ($number % 2 == 0) {\n            push(@even_numbers, $number);\n        }\n    }\n    return @even_numbers;\n}",
    "    my @even;\n    my @odd;\n    foreach my $num (@$list) {\n        if ($num % 2 == 0) {\n            push @even, $num;\n        } else {\n            push @odd, $num;\n        }\n    }\n    return (\\@even, \\@odd);\n}",
    "    my(@list) = split(/\\s+/, $list);\n    my(@even) = ();\n    foreach $num (@list) {\n        if ($num % 2 == 0) {\n            push(@even, $num);\n        }\n    }\n    return @even;\n}",
    "    my @even;\n    foreach my $number (@$list) {\n        if ($number % 2 == 0) {\n            push @even, $number;\n        }\n    }\n    return @even;\n}",
    "    my @even;\n    foreach my $number (@$list) {\n        if ($number % 2 == 0) {\n            push @even, $number;\n        }\n    }\n    return @even;\n}",
    "    my @even_numbers;\n    my @odd_numbers;\n    my @array = split(/ /,$list);\n    foreach my $number (@array) {\n        if($number % 2 == 0) {\n            push(@even_numbers,$number);\n        } else {\n            push(@odd_numbers,$number);\n        }\n    }\n    print \"Even numbers are : @even_numbers\\n\";\n    print \"Odd numbers are : @odd_numbers\\n\";\n}",
    "    my @evens = ();\n    my @odds = ();\n    foreach my $num (@$list) {\n        if ($num % 2 == 0) {\n            push @evens, $num;\n        }\n        else {\n            push @odds, $num;\n        }\n    }\n    return (\\@evens, \\@odds);\n}",
    "    my @evens;\n    my @odds;\n    foreach my $number (@$list) {\n        if ($number % 2 == 0) {\n            push @evens, $number;\n        }\n        else {\n            push @odds, $number;\n        }\n    }\n    return (\\@evens, \\@odds);\n}",
    "    my @evens = ();\n    my @odds = ();\n    foreach my $num (@$list) {\n        if ($num % 2 == 0) {\n            push @evens, $num;\n        } else {\n            push @odds, $num;\n        }\n    }\n    return (\\@evens, \\@odds);\n}",
    "    my(@list) = split(/\\s+/, $list);\n    my(@even);\n    foreach $num (@list) {\n        if ($num % 2 == 0) {\n            push(@even, $num);\n        }\n    }\n    return @even;\n}",
    "    my @array = split(/ /,$list);\n    my @even;\n    foreach my $i (@array) {\n        if($i % 2 == 0) {\n            push(@even,$i);\n        }\n    }\n    return @even;\n}",
    "    my(@list) = split(/\\s+/, $list);\n    my(@even) = ();\n    foreach $item (@list) {\n        if ($item % 2 == 0) {\n            push(@even, $item);\n        }\n    }\n    return @even;\n}",
    "    my @numbers = split(/,/, $list);\n    my @even_numbers = ();\n    foreach my $number (@numbers) {\n        if ($number % 2 == 0) {\n            push(@even_numbers, $number);\n        }\n    }\n    return @even_numbers;\n}",
    "    my @numbers = split(/\\s+/, $list);\n    my @even;\n    foreach my $num (@numbers) {\n        if ($num % 2 == 0) {\n            push @even, $num;\n        }\n    }\n    return @even;\n}",
    "    my(@list) = split(/\\s+/, $list);\n    my(@even) = ();\n    foreach $num (@list) {\n        if ($num % 2 == 0) {\n            push(@even, $num);\n        }\n    }\n    return @even;\n}",
    "    my @even;\n    my @odd;\n    foreach my $number (@$list) {\n        if ($number % 2 == 0) {\n            push @even, $number;\n        } else {\n            push @odd, $number;\n        }\n    }\n    return (\\@even, \\@odd);\n}",
    "    my @even;\n    foreach my $num (@$list) {\n        if ($num % 2 == 0) {\n            push @even, $num;\n        }\n    }\n    return @even;\n}",
    "    my @numbers = split(/\\s+/, $list);\n    my @even;\n    foreach my $number (@numbers) {\n        if ($number % 2 == 0) {\n            push @even, $number;\n        }\n    }\n    return @even;\n}",
    "    my @even = ();\n    my @odd = ();\n    foreach my $num (@$list) {\n        if ($num % 2 == 0) {\n            push @even, $num;\n        } else {\n            push @odd, $num;\n        }\n    }\n    return (\\@even, \\@odd);\n}",
    "    my @even;\n    foreach my $i (@$list) {\n        if ($i % 2 == 0) {\n            push @even, $i;\n        }\n    }\n    return @even;\n}",
    "    my @even;\n    my @odd;\n    foreach my $num (@$list) {\n        if ($num % 2 == 0) {\n            push @even, $num;\n        }\n        else {\n            push @odd, $num;\n        }\n    }\n    return (\\@even, \\@odd);\n}",
    "    my(@list) = split(/,/, $list);\n    return @list;\n}",
    "    my @even;\n    foreach my $num (@$list) {\n        if ($num % 2 == 0) {\n            push @even, $num;\n        }\n    }\n    return @even;\n}",
    "    my @array = split(/,/, $list);\n    my @even;\n    foreach my $num (@array) {\n        if ($num % 2 == 0) {\n            push(@even, $num);\n        }\n    }\n    return @even;\n}",
    "    my @even_numbers = ();\n    my @numbers = split(/ /,$list);\n    foreach my $number (@numbers) {\n        if ($number % 2 == 0) {\n            push(@even_numbers,$number);\n        }\n    }\n    return @even_numbers;\n}",
    "    my @even_list;\n    foreach my $i (@$list) {\n        if($i % 2 == 0) {\n            push(@even_list, $i);\n        }\n    }\n    return @even_list;\n}",
    "    my @array = split(/ /,$list);\n    my @even = ();\n    foreach my $num (@array) {\n        if ($num % 2 == 0) {\n            push(@even,$num);\n        }\n    }\n    return @even;\n}",
    "    my @even;\n    foreach my $item (@$list) {\n        if ($item % 2 == 0) {\n            push @even, $item;\n        }\n    }\n    return @even;\n}",
    "    my(@list) = split(/\\s+/, $list);\n    return @list;\n}",
    "    my @numbers = split(/\\s+/, $list);\n    my @even;\n    foreach my $number (@numbers) {\n        if ($number % 2 == 0) {\n            push @even, $number;\n        }\n    }\n    return @even;\n}",
    "    my @numbers = split(/,/,$list);\n    my @even;\n    foreach my $num (@numbers) {\n        if($num % 2 == 0) {\n            push(@even,$num);\n        }\n    }\n    return @even;\n}",
    "    my @array = split(/\\s+/, $list);\n    my @even;\n    foreach my $num (@array) {\n        if ($num % 2 == 0) {\n            push @even, $num;\n        }\n    }\n    return @even;\n}",
    "    my @numbers = split(/\\s+/, $list);\n    return @numbers;\n}",
    "    my @even;\n    my @odd;\n    foreach my $number (@$list) {\n        if ($number % 2 == 0) {\n            push @even, $number;\n        } else {\n            push @odd, $number;\n        }\n    }\n    return (\\@even, \\@odd);\n}",
    "    my @even = ();\n    my @odd = ();\n    foreach my $num (@$list) {\n        if ($num % 2 == 0) {\n            push @even, $num;\n        } else {\n            push @odd, $num;\n        }\n    }\n    return (\\@even, \\@odd);\n}",
    "    my @even_numbers = ();\n    my @odd_numbers = ();\n    foreach my $number (@$list) {\n        if ($number % 2 == 0) {\n            push @even_numbers, $number;\n        }\n        else {\n            push @odd_numbers, $number;\n        }\n    }\n    return (\\@even_numbers, \\@odd_numbers);\n}"
  ]
}