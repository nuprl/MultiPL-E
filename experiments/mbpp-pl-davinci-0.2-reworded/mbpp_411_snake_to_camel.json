{
  "name": "mbpp_411_snake_to_camel",
  "language": "pl",
  "prompt": "# Write a function to convert the given snake case string to camel case string.\nsub snake_to_camel {\n    my($word) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_411_snake_to_camel.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&snake_to_camel;\n        if(eq_deeply($candidate->(\"android_tv\"),\"AndroidTv\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"google_pixel\"),\"GooglePixel\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"apple_watch\"),\"AppleWatch\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $camel = '';\n    my $capitalize = 0;\n    foreach my $char (split //, $word) {\n        if ($char eq '_') {\n            $capitalize = 1;\n        } else {\n            if ($capitalize) {\n                $camel .= uc $char;\n                $capitalize = 0;\n            } else {\n                $camel .= $char;\n            }\n        }\n    }\n    return $camel;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    foreach my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    my @words = split(/_/, $word);\n    my $camel = shift(@words);\n    foreach my $word (@words) {\n        $camel .= ucfirst($word);\n    }\n    return $camel;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    foreach my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    $word =~ s/_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_([a-z])/uc($1)/eg;\n    return $word;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    $word =~ s/\\_([a-z])/\\u$1/g;\n    return $word;\n}",
    "    my @words = split(/_/, $word);\n    my $camel = shift(@words);\n    foreach my $word (@words) {\n        $camel .= ucfirst($word);\n    }\n    return $camel;\n}",
    "    my @words = split '_', $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    my @words = split(/_/, $word);\n    my $camel = shift(@words);\n    foreach my $word (@words) {\n        $camel .= ucfirst($word);\n    }\n    return $camel;\n}",
    "    my @words = split(/_/, $word);\n    my $camel_word = $words[0];\n    for (my $i = 1; $i < scalar(@words); $i++) {\n        $camel_word .= ucfirst($words[$i]);\n    }\n    return $camel_word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    my @words = split(/_/, $word);\n    my $camel = shift(@words);\n    foreach my $word (@words) {\n        $camel .= ucfirst($word);\n    }\n    return $camel;\n}",
    "    $word =~ s/_([a-z])/\\u$1/g;\n    return $word;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    foreach my $word (@words) {\n        $camel .= ucfirst($word);\n    }\n    return $camel;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    my @words = split(/_/, $word);\n    my $camel = $words[0];\n    for (my $i = 1; $i < scalar(@words); $i++) {\n        $camel .= ucfirst($words[$i]);\n    }\n    return $camel;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\U$1/g;\n    return $word;\n}"
  ]
}