{
  "name": "mbpp_411_snake_to_camel",
  "language": "pl",
  "prompt": "# Write a function to convert the given snake case string to camel case string.\nsub snake_to_camel {\n    my($word) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_411_snake_to_camel.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&snake_to_camel;\n        if(eq_deeply($candidate->(\"android_tv\"),\"AndroidTv\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"google_pixel\"),\"GooglePixel\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"apple_watch\"),\"AppleWatch\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $camel = '';\n    my $capitalize = 0;\n    foreach my $char (split //, $word) {\n        if ($char eq '_') {\n            $capitalize = 1;\n        } else {\n            if ($capitalize) {\n                $camel .= uc $char;\n                $capitalize = 0;\n            } else {\n                $camel .= $char;\n            }\n        }\n    }\n    return $camel;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    foreach my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    my @words = split(/_/, $word);\n    my $camel = shift(@words);\n    foreach my $word (@words) {\n        $camel .= ucfirst($word);\n    }\n    return $camel;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    foreach my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    $word =~ s/_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_([a-z])/uc($1)/eg;\n    return $word;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    $word =~ s/\\_([a-z])/\\u$1/g;\n    return $word;\n}",
    "    my @words = split(/_/, $word);\n    my $camel = shift(@words);\n    foreach my $word (@words) {\n        $camel .= ucfirst($word);\n    }\n    return $camel;\n}",
    "    my @words = split '_', $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    my @words = split(/_/, $word);\n    my $camel = shift(@words);\n    foreach my $word (@words) {\n        $camel .= ucfirst($word);\n    }\n    return $camel;\n}",
    "    my @words = split(/_/, $word);\n    my $camel_word = $words[0];\n    for (my $i = 1; $i < scalar(@words); $i++) {\n        $camel_word .= ucfirst($words[$i]);\n    }\n    return $camel_word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    my @words = split(/_/, $word);\n    my $camel = shift(@words);\n    foreach my $word (@words) {\n        $camel .= ucfirst($word);\n    }\n    return $camel;\n}",
    "    $word =~ s/_([a-z])/\\u$1/g;\n    return $word;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    foreach my $word (@words) {\n        $camel .= ucfirst($word);\n    }\n    return $camel;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    my @words = split(/_/, $word);\n    my $camel = $words[0];\n    for (my $i = 1; $i < scalar(@words); $i++) {\n        $camel .= ucfirst($words[$i]);\n    }\n    return $camel;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\U$1/g;\n    return $word;\n}",
    "    my @words = split(/_/, $word);\n    my $camel = $words[0];\n    for (my $i = 1; $i < scalar(@words); $i++) {\n        $camel .= ucfirst($words[$i]);\n    }\n    return $camel;\n}",
    "    my $camel = '';\n    my $first = 1;\n    for my $part (split /_/, $word) {\n        if ($first) {\n            $camel .= $part;\n            $first = 0;\n        } else {\n            $camel .= ucfirst $part;\n        }\n    }\n    return $camel;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    my $new_word = '';\n    my $i = 0;\n    foreach my $char (split //, $word) {\n        if ($char eq '_') {\n            $i++;\n            next;\n        }\n        if ($i > 0) {\n            $char = uc($char);\n            $i = 0;\n        }\n        $new_word .= $char;\n    }\n    return $new_word;\n}",
    "    my @words = split(/_/, $word);\n    my $camel = $words[0];\n    for my $i (1 .. $#words) {\n        $camel .= ucfirst($words[$i]);\n    }\n    return $camel;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    my $camel = '';\n    for my $part (split /_/, $word) {\n        $camel .= ucfirst $part;\n    }\n    return $camel;\n}",
    "    $word =~ s/\\_(\\w)/\\U$1/g;\n    return $word;\n}",
    "    $word =~ s/_(.)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    my @words = split(/_/, $word);\n    my $camel = shift(@words);\n    foreach my $word (@words) {\n        $camel .= ucfirst($word);\n    }\n    return $camel;\n}",
    "    my @words = split(/_/, $word);\n    my $camel = shift(@words);\n    foreach my $w (@words) {\n        $camel .= ucfirst($w);\n    }\n    return $camel;\n}",
    "    my($camel);\n    my(@words) = split(/_/, $word);\n    foreach my $word (@words) {\n        $camel .= ucfirst($word);\n    }\n    return $camel;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $w (@words) {\n        $camel .= ucfirst $w;\n    }\n    return $camel;\n}",
    "    $word =~ s/_(.)/\\u$1/g;\n    return $word;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    my @words = split(/_/, $word);\n    my $camel = shift(@words);\n    foreach my $word (@words) {\n        $camel .= ucfirst($word);\n    }\n    return $camel;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    my @words = split(/_/, $word);\n    my $camel_word = '';\n    foreach my $word (@words) {\n        $camel_word .= ucfirst($word);\n    }\n    return $camel_word;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    my @words = split(/_/, $word);\n    my $camel = $words[0];\n    for my $i (1..$#words) {\n        $camel .= ucfirst($words[$i]);\n    }\n    return $camel;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    $word =~ s/(^|_)(.)/\\U$2/g;\n    return $word;\n}",
    "    my @words = split(/_/, $word);\n    my $camel = $words[0];\n    for my $i (1..$#words) {\n        $camel .= ucfirst($words[$i]);\n    }\n    return $camel;\n}",
    "    my @words = split(/_/, $word);\n    my $camel = $words[0];\n    for (my $i = 1; $i < scalar(@words); $i++) {\n        $camel .= ucfirst($words[$i]);\n    }\n    return $camel;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    my @words = split(/_/, $word);\n    my $camel = shift(@words);\n    foreach my $word (@words) {\n        $camel .= ucfirst($word);\n    }\n    return $camel;\n}",
    "    my $camel = '';\n    my $first = 1;\n    for my $part (split(/_/, $word)) {\n        if ($first) {\n            $camel .= lc($part);\n            $first = 0;\n        } else {\n            $camel .= ucfirst(lc($part));\n        }\n    }\n    return $camel;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    my @words = split(/_/, $word);\n    my $camel = shift(@words);\n    for my $word (@words) {\n        $camel .= ucfirst($word);\n    }\n    return $camel;\n}",
    "    $word =~ s/_(.)/\\u$1/g;\n    return $word;\n}",
    "    my @words = split /_/, $word;\n    my $camel_word = join '', map { ucfirst $_ } @words;\n    return $camel_word;\n}",
    "    my @words = split('_', $word);\n    my $camel = shift(@words);\n    foreach my $word (@words) {\n        $camel .= ucfirst($word);\n    }\n    return $camel;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    my @words = split(/_/, $word);\n    my $camel = shift(@words);\n    foreach my $word (@words) {\n        $camel .= ucfirst($word);\n    }\n    return $camel;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/_([a-z])/\\u$1/g;\n    return $word;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    $camel .= ucfirst $_ for @words;\n    return $camel;\n}",
    "    my @words = split(/_/, $word);\n    my $camel = join('', map { ucfirst($_) } @words);\n    return $camel;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    my @words = split(/_/, $word);\n    my $camel = shift(@words);\n    foreach my $word (@words) {\n        $camel .= ucfirst($word);\n    }\n    return $camel;\n}",
    "    $word =~ s/\\b(\\w)/\\u$1/g;\n    return $word;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/_(.)/\\u$1/g;\n    return $word;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    $word =~ s/(_)(\\w)/\\u$2/g;\n    return $word;\n}",
    "    $word =~ s/_(.)/\\u$1/g;\n    return $word;\n}",
    "    my $camel = '';\n    my @parts = split(/_/, $word);\n    foreach my $part (@parts) {\n        $camel .= ucfirst($part);\n    }\n    return $camel;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    my @words = split(/_/, $word);\n    my $camel = shift(@words);\n    foreach my $w (@words) {\n        $camel .= ucfirst($w);\n    }\n    return $camel;\n}",
    "    my @words = split(/_/, $word);\n    my $camel_word = shift(@words);\n    foreach my $word (@words) {\n        $camel_word .= ucfirst($word);\n    }\n    return $camel_word;\n}",
    "    $word =~ s/_([a-z])/\\u$1/g;\n    return $word;\n}",
    "    my @words = split(/_/, $word);\n    my $camel = $words[0];\n    for (my $i = 1; $i < scalar(@words); $i++) {\n        $camel .= ucfirst($words[$i]);\n    }\n    return $camel;\n}",
    "    $word =~ s/_([a-z])/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/_(.)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/(\\_\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\U$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/_(.)/\\u$1/g;\n    return $word;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    $word =~ s/_([a-z])/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/_(.)/\\u$1/g;\n    return $word;\n}",
    "    my @words = split(/_/, $word);\n    my $camel = shift(@words);\n    foreach my $word (@words) {\n        $camel .= ucfirst($word);\n    }\n    return $camel;\n}",
    "    my @words = split(/_/, $word);\n    my $camel = shift(@words);\n    foreach my $word (@words) {\n        $camel .= ucfirst($word);\n    }\n    return $camel;\n}",
    "    my @words = split(/_/, $word);\n    my $camel = shift(@words);\n    foreach my $word (@words) {\n        $camel .= ucfirst($word);\n    }\n    return $camel;\n}",
    "    my($camel);\n    my($first) = 1;\n    foreach my $part (split(/_/, $word)) {\n        if ($first) {\n            $camel = $part;\n            $first = 0;\n        } else {\n            $camel .= ucfirst($part);\n        }\n    }\n    return $camel;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    my @words = split(/_/, $word);\n    my $camel = shift @words;\n    foreach my $word (@words) {\n        $camel .= ucfirst($word);\n    }\n    return $camel;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    my @words = split(/_/, $word);\n    my $camel = shift @words;\n    foreach my $word (@words) {\n        $camel .= ucfirst($word);\n    }\n    return $camel;\n}",
    "    my @words = split(/_/, $word);\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst($word);\n    }\n    return $camel;\n}",
    "    $word =~ s/(_)(.)/\\U$2/g;\n    return $word;\n}",
    "    my @words = split(/_/, $word);\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst($word);\n    }\n    return $camel;\n}",
    "    my $result = '';\n    my $first = 1;\n    foreach my $part (split(/_/, $word)) {\n        if ($first) {\n            $result .= $part;\n            $first = 0;\n        } else {\n            $result .= ucfirst($part);\n        }\n    }\n    return $result;\n}",
    "    my @words = split /_/, $word;\n    my $camel_word = join '', map { ucfirst $_ } @words;\n    return $camel_word;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    $word =~ s/\\_([a-z])/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\U$1/g;\n    return $word;\n}",
    "    my $camel = '';\n    for my $part (split /_/, $word) {\n        $camel .= ucfirst $part;\n    }\n    return $camel;\n}",
    "    my @words = split(/_/, $word);\n    my $camel_word = '';\n    for my $w (@words) {\n        $camel_word .= ucfirst($w);\n    }\n    return $camel_word;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    $camel .= ucfirst $_ for @words;\n    return $camel;\n}",
    "    my @words = split(/_/, $word);\n    my $camel = shift(@words);\n    foreach my $word (@words) {\n        $camel .= ucfirst($word);\n    }\n    return $camel;\n}",
    "    $word =~ s/_(.)/\\u$1/g;\n    return $word;\n}",
    "    my @words = split(/_/, $word);\n    my $camel = shift(@words);\n    foreach my $w (@words) {\n        $camel .= ucfirst($w);\n    }\n    return $camel;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    my $camel_case = join '', map { ucfirst $_ } split /_/, $word;\n    return $camel_case;\n}",
    "    $word =~ s/(^|_)(.)/\\U$2/g;\n    return $word;\n}",
    "    $word =~ s/(\\w+)_(\\w)/$1 . uc($2)/ge;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/_(.)/\\u$1/g;\n    return $word;\n}",
    "    my @words = split(/_/, $word);\n    my $camel = shift(@words);\n    foreach my $word (@words) {\n        $camel .= ucfirst($word);\n    }\n    return $camel;\n}",
    "    my @words = split(/_/, $word);\n    my $camel = $words[0];\n    for my $i (1..$#words) {\n        $camel .= ucfirst($words[$i]);\n    }\n    return $camel;\n}",
    "    my $camel = '';\n    for my $part (split /_/, $word) {\n        $camel .= ucfirst $part;\n    }\n    return $camel;\n}",
    "    $word =~ s/_([a-z])/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/(^|_)([a-z])/$2/g;\n    return ucfirst($word);\n}",
    "    my @words = split(/_/, $word);\n    my $camel = $words[0];\n    for (my $i = 1; $i < @words; $i++) {\n        $camel .= ucfirst($words[$i]);\n    }\n    return $camel;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    my @words = split(/_/, $word);\n    my $camel = shift(@words);\n    foreach my $word (@words) {\n        $camel .= ucfirst($word);\n    }\n    return $camel;\n}",
    "    $word =~ s/_(.)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/(^|_)([a-z])/$2/g;\n    return $word;\n}",
    "    my $camel = '';\n    my $flag = 0;\n    for my $char (split //, $word) {\n        if ($char eq '_') {\n            $flag = 1;\n        }\n        else {\n            if ($flag) {\n                $camel .= uc $char;\n                $flag = 0;\n            }\n            else {\n                $camel .= $char;\n            }\n        }\n    }\n    return $camel;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    my @words = split(/_/, $word);\n    my $camel = $words[0];\n    for my $i (1..$#words) {\n        $camel .= ucfirst($words[$i]);\n    }\n    return $camel;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    my @words = split(/_/, $word);\n    my $camel_word = $words[0];\n    for (my $i = 1; $i < scalar(@words); $i++) {\n        $camel_word .= ucfirst($words[$i]);\n    }\n    return $camel_word;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    foreach my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    my @words = split(/_/, $word);\n    my $camel = shift(@words);\n    foreach my $word (@words) {\n        $camel .= ucfirst($word);\n    }\n    return $camel;\n}",
    "    $word =~ s/(\\_\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/(_)(\\w)/\\u$2/g;\n    return $word;\n}",
    "    my $camel = '';\n    my $first = 1;\n    for my $part (split /_/, $word) {\n        if ($first) {\n            $camel .= $part;\n            $first = 0;\n        }\n        else {\n            $camel .= ucfirst $part;\n        }\n    }\n    return $camel;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    foreach my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\U$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_([a-z])/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    my @words = split /_/, $word;\n    my $camel = $words[0];\n    for my $i (1 .. $#words) {\n        $camel .= ucfirst $words[$i];\n    }\n    return $camel;\n}",
    "    $word =~ s/_(.)/\\u$1/g;\n    return $word;\n}",
    "    my($result) = '';\n    my($first) = 1;\n    foreach my $part (split(/_/, $word)) {\n        if ($first) {\n            $first = 0;\n        } else {\n            $part = ucfirst($part);\n        }\n        $result .= $part;\n    }\n    return $result;\n}",
    "    $word =~ s/(_)(\\w)/\\u$2/g;\n    return $word;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    $word =~ s/(_)(\\w)/\\u$2/g;\n    return $word;\n}",
    "    $word =~ s/_(.)/uc($1)/ge;\n    return $word;\n}",
    "    $word =~ s/\\_([a-z])/\\U$1/g;\n    return $word;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    $word =~ s/_(.)/uc($1)/ge;\n    return $word;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_([a-z])/\\u$1/g;\n    return $word;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    $word =~ s/(^|_)([a-z])/$2/g;\n    return $word;\n}",
    "    my $camel = \"\";\n    my @words = split(/_/, $word);\n    foreach my $w (@words) {\n        $camel .= ucfirst($w);\n    }\n    return $camel;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    my @words = split(/_/, $word);\n    my $camel = shift(@words);\n    foreach my $word (@words) {\n        $camel .= ucfirst($word);\n    }\n    return $camel;\n}",
    "    my @words = split(/_/, $word);\n    my $camel = shift(@words);\n    foreach my $word (@words) {\n        $camel .= ucfirst($word);\n    }\n    return $camel;\n}",
    "    $word =~ s/_(.)/uc($1)/eg;\n    return $word;\n}",
    "    my $camel = '';\n    my $i = 0;\n    for my $letter (split //, $word) {\n        if ($letter eq '_') {\n            $i++;\n            next;\n        }\n        if ($i > 0) {\n            $camel .= uc $letter;\n            $i = 0;\n        }\n        else {\n            $camel .= $letter;\n        }\n    }\n    return $camel;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    $word =~ s/(^|_)(.)/uc($2)/ge;\n    return $word;\n}",
    "    my $camel = '';\n    my @words = split(/_/, $word);\n    foreach my $word (@words) {\n        $camel .= ucfirst($word);\n    }\n    return $camel;\n}",
    "    $word =~ s/\\_(\\w)/\\u$1/g;\n    return $word;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    $camel .= ucfirst $_ for @words;\n    return $camel;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    my $camel = '';\n    my $first = 1;\n    foreach my $part (split(/_/, $word)) {\n        if ($first) {\n            $camel .= $part;\n            $first = 0;\n        } else {\n            $camel .= ucfirst($part);\n        }\n    }\n    return $camel;\n}",
    "    $word =~ s/_(.)/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/\\_([a-z])/\\u$1/g;\n    return $word;\n}",
    "    $word =~ s/(^|_)([a-z])/$2/g;\n    return $word;\n}",
    "    my @words = split(/_/, $word);\n    my $camel = shift(@words);\n    foreach my $word (@words) {\n        $camel .= ucfirst($word);\n    }\n    return $camel;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    my $camel = \"\";\n    my @words = split(/_/, $word);\n    foreach my $w (@words) {\n        $camel .= ucfirst($w);\n    }\n    return $camel;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}",
    "    my @words = split /_/, $word;\n    my $camel = shift @words;\n    for my $word (@words) {\n        $camel .= ucfirst $word;\n    }\n    return $camel;\n}"
  ]
}