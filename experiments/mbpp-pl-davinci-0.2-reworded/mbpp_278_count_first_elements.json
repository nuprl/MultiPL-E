{
  "name": "mbpp_278_count_first_elements",
  "language": "pl",
  "prompt": "# Write a function to find the number of elements that occurs before the array element in the given array.\nsub count_first_elements {\n    my($test_tup) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_278_count_first_elements.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_first_elements;\n        if(eq_deeply($candidate->([1, 5, 7, [4, 6], 10]),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 9, [5, 7], 11]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([11, 15, 5, 8, [2, 3], 8]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my($test_arr, $test_elem) = @$test_tup;\n    my $count = 0;\n    for my $elem (@$test_arr) {\n        if ($elem == $test_elem) {\n            return $count;\n        }\n        $count++;\n    }\n    return -1;\n}",
    "    my($arr, $x) = @$test_tup;\n    my $count = 0;\n    for my $i (0 .. $#$arr) {\n        if ($arr->[$i] == $x) {\n            return $count;\n        }\n        $count++;\n    }\n    return -1;\n}",
    "    my($i, $j, $count, $len, $num);\n    $len = scalar(@$test_tup);\n    $count = 0;\n    for($i = 0; $i < $len; $i++) {\n        $num = $test_tup->[$i];\n        for($j = 0; $j < $i; $j++) {\n            if($test_tup->[$j] < $num) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my($i, $j, $k, $count, $n, $m, $t, $tup, $tup_ref, $tup_ref_ref, $tup_ref_ref_ref);\n    $tup_ref_ref_ref = $test_tup;\n    $n = scalar(@$tup_ref_ref_ref);\n    $tup_ref_ref = $tup_ref_ref_ref->[0];\n    $m = scalar(@$tup_ref_ref);\n    $tup_ref = $tup_ref_ref->[0];\n    $t = scalar(@$tup_ref);\n    $count = 0;\n    for($i = 0; $i < $n; $i++) {\n        $tup_ref_ref = $tup_ref_ref_ref->[$i];\n        for($j = 0; $j < $m; $j++) {\n            $tup_ref = $tup_ref_ref->[$j];\n            for($k = 0; $k < $t; $k++) {\n                $tup = $tup_ref->[$k];\n                if($tup == $k) {\n                    $count++;\n                }\n            }\n        }\n    }\n    return $count;\n}",
    "    my($arr, $ele) = @$test_tup;\n    my $count = 0;\n    for my $i (0..$#$arr) {\n        if ($arr->[$i] == $ele) {\n            return $count;\n        }\n        $count++;\n    }\n    return -1;\n}",
    "    my($arr, $n) = @$test_tup;\n    my $count = 0;\n    for my $i (0 .. $#$arr) {\n        $count++ if $arr->[$i] <= $n;\n    }\n    return $count;\n}",
    "    my($arr, $n) = @$test_tup;\n    my $count = 0;\n    for my $i (0 .. $#$arr) {\n        $count++ if $arr->[$i] < $n;\n    }\n    return $count;\n}",
    "    my($count) = 0;\n    my($i);\n    for($i = 0; $i < $#$test_tup; $i++) {\n        if($test_tup->[$i] < $test_tup->[$#$test_tup]) {\n            $count++;\n        }\n    }\n    return $count;\n}",
    "    my($i, $j, $count, $n, $k, $tup);\n    $n = scalar(@{$test_tup});\n    $count = 0;\n    for($i = 0; $i < $n; $i++) {\n        $tup = $test_tup->[$i];\n        $k = scalar(@{$tup});\n        for($j = 0; $j < $k; $j++) {\n            $count += $tup->[$j];\n        }\n    }\n    return $count;\n}",
    "    my($arr, $x) = @$test_tup;\n    my $count = 0;\n    for my $i (0..$#$arr) {\n        if ($arr->[$i] == $x) {\n            return $count;\n        }\n        $count++;\n    }\n    return -1;\n}",
    "    my($i, $j, $count, $n);\n    $n = scalar(@{$test_tup});\n    $count = 0;\n    for($i = 0; $i < $n; $i++) {\n        for($j = 0; $j < $n; $j++) {\n            if($test_tup->[$j] < $test_tup->[$i]) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my($i, $j, $count, $len);\n    $len = scalar(@{$test_tup});\n    $count = 0;\n    for($i = 0; $i < $len; $i++) {\n        for($j = $i + 1; $j < $len; $j++) {\n            if($test_tup->[$i] > $test_tup->[$j]) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my($i, $j, $count);\n    $count = 0;\n    for($i = 0; $i < scalar(@$test_tup); $i++) {\n        for($j = 0; $j < $i; $j++) {\n            if($test_tup->[$j] < $test_tup->[$i]) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    my $test_elem = $test_tup->[0];\n    for my $elem (@$test_tup) {\n        if ($elem < $test_elem) {\n            $count++;\n        }\n    }\n    return $count;\n}",
    "    my($test_arr, $test_elem) = @$test_tup;\n    my $count = 0;\n    foreach my $elem (@$test_arr) {\n        last if $elem == $test_elem;\n        $count++;\n    }\n    return $count;\n}",
    "    my($test_arr, $test_ele) = @$test_tup;\n    my $count = 0;\n    for my $ele (@$test_arr) {\n        if ($ele == $test_ele) {\n            last;\n        }\n        $count++;\n    }\n    return $count;\n}",
    "    my($arr, $n) = @$test_tup;\n    my $count = 0;\n    for my $i (0..$#$arr) {\n        if ($arr->[$i] == $n) {\n            return $count;\n        }\n        $count++;\n    }\n    return $count;\n}",
    "    my($arr, $n) = @$test_tup;\n    my $count = 0;\n    for (my $i = 0; $i < $n; $i++) {\n        if ($arr->[$i] < $arr->[$n]) {\n            $count++;\n        }\n    }\n    return $count;\n}",
    "    my($i, $j, $count, $max_count, $max_elem);\n    $max_count = 0;\n    $max_elem = 0;\n    for($i = 0; $i < scalar(@$test_tup); $i++) {\n        $count = 0;\n        for($j = 0; $j < scalar(@$test_tup); $j++) {\n            if($test_tup->[$i] > $test_tup->[$j]) {\n                $count++;\n            }\n        }\n        if($count > $max_count) {\n            $max_count = $count;\n            $max_elem = $test_tup->[$i];\n        }\n    }\n    return $max_elem;\n}",
    "    my($test_arr, $test_elem) = @$test_tup;\n    my $count = 0;\n    for my $elem (@$test_arr) {\n        if ($elem == $test_elem) {\n            return $count;\n        }\n        $count++;\n    }\n    return -1;\n}"
  ]
}