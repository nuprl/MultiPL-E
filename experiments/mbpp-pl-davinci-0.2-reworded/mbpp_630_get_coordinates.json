{
  "name": "mbpp_630_get_coordinates",
  "language": "pl",
  "prompt": "# Write a function to extract all the adjacent coordinates of the given coordinate array.\nsub get_coordinates {\n    my($test_tup) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_630_get_coordinates.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_coordinates;\n        if(eq_deeply($candidate->([3, 4]),[[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5]),[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 6]),[[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @coordinates = ();\n    my $x = $test_tup->[0];\n    my $y = $test_tup->[1];\n    push @coordinates, [$x-1, $y-1];\n    push @coordinates, [$x-1, $y];\n    push @coordinates, [$x-1, $y+1];\n    push @coordinates, [$x, $y-1];\n    push @coordinates, [$x, $y+1];\n    push @coordinates, [$x+1, $y-1];\n    push @coordinates, [$x+1, $y];\n    push @coordinates, [$x+1, $y+1];\n    return @coordinates;\n}",
    "    my @coordinates;\n    my $x = $test_tup->[0];\n    my $y = $test_tup->[1];\n    my $z = $test_tup->[2];\n    push @coordinates, [$x, $y, $z];\n    push @coordinates, [$x+1, $y, $z];\n    push @coordinates, [$x-1, $y, $z];\n    push @coordinates, [$x, $y+1, $z];\n    push @coordinates, [$x, $y-1, $z];\n    push @coordinates, [$x, $y, $z+1];\n    push @coordinates, [$x, $y, $z-1];\n    return @coordinates;\n}",
    "    my @coordinates;\n    my $x = $test_tup->[0];\n    my $y = $test_tup->[1];\n    push @coordinates, [$x - 1, $y - 1];\n    push @coordinates, [$x - 1, $y];\n    push @coordinates, [$x - 1, $y + 1];\n    push @coordinates, [$x, $y - 1];\n    push @coordinates, [$x, $y + 1];\n    push @coordinates, [$x + 1, $y - 1];\n    push @coordinates, [$x + 1, $y];\n    push @coordinates, [$x + 1, $y + 1];\n    return @coordinates;\n}",
    "    my @coordinates = ();\n    my $x = $test_tup->[0];\n    my $y = $test_tup->[1];\n    push @coordinates, [$x-1, $y-1];\n    push @coordinates, [$x-1, $y];\n    push @coordinates, [$x-1, $y+1];\n    push @coordinates, [$x, $y-1];\n    push @coordinates, [$x, $y+1];\n    push @coordinates, [$x+1, $y-1];\n    push @coordinates, [$x+1, $y];\n    push @coordinates, [$x+1, $y+1];\n    return @coordinates;\n}",
    "    my @coordinates = ();\n    my $x = $test_tup->[0];\n    my $y = $test_tup->[1];\n    push @coordinates, [$x-1, $y-1];\n    push @coordinates, [$x-1, $y];\n    push @coordinates, [$x-1, $y+1];\n    push @coordinates, [$x, $y-1];\n    push @coordinates, [$x, $y+1];\n    push @coordinates, [$x+1, $y-1];\n    push @coordinates, [$x+1, $y];\n    push @coordinates, [$x+1, $y+1];\n    return @coordinates;\n}",
    "    my @coordinates = ();\n    my $x = $test_tup->[0];\n    my $y = $test_tup->[1];\n    push @coordinates, [$x-1, $y-1];\n    push @coordinates, [$x-1, $y];\n    push @coordinates, [$x-1, $y+1];\n    push @coordinates, [$x, $y-1];\n    push @coordinates, [$x, $y+1];\n    push @coordinates, [$x+1, $y-1];\n    push @coordinates, [$x+1, $y];\n    push @coordinates, [$x+1, $y+1];\n    return @coordinates;\n}",
    "    my @coordinates;\n    my $x = $test_tup->[0];\n    my $y = $test_tup->[1];\n    push @coordinates, [$x-1, $y-1];\n    push @coordinates, [$x-1, $y];\n    push @coordinates, [$x-1, $y+1];\n    push @coordinates, [$x, $y-1];\n    push @coordinates, [$x, $y+1];\n    push @coordinates, [$x+1, $y-1];\n    push @coordinates, [$x+1, $y];\n    push @coordinates, [$x+1, $y+1];\n    return @coordinates;\n}",
    "    my($x, $y) = @$test_tup;\n    my @coordinates = ();\n    for my $i (-1..1) {\n        for my $j (-1..1) {\n            if ($i != 0 || $j != 0) {\n                push @coordinates, [$x + $i, $y + $j];\n            }\n        }\n    }\n    return @coordinates;\n}",
    "    my @coordinates;\n    my $x = $test_tup->[0];\n    my $y = $test_tup->[1];\n    my $z = $test_tup->[2];\n    my $w = $test_tup->[3];\n    push @coordinates, [$x+1, $y, $z, $w];\n    push @coordinates, [$x-1, $y, $z, $w];\n    push @coordinates, [$x, $y+1, $z, $w];\n    push @coordinates, [$x, $y-1, $z, $w];\n    push @coordinates, [$x, $y, $z+1, $w];\n    push @coordinates, [$x, $y, $z-1, $w];\n    push @coordinates, [$x, $y, $z, $w+1];\n    push @coordinates, [$x, $y, $z, $w-1];\n    return @coordinates;\n}",
    "    my @coordinates;\n    my @test_tup = @$test_tup;\n    my $x = $test_tup[0];\n    my $y = $test_tup[1];\n    push @coordinates, [$x, $y-1];\n    push @coordinates, [$x, $y+1];\n    push @coordinates, [$x-1, $y];\n    push @coordinates, [$x+1, $y];\n    return @coordinates;\n}",
    "    my @coordinates = ();\n    my $x = $test_tup->[0];\n    my $y = $test_tup->[1];\n    push @coordinates, [$x-1, $y-1];\n    push @coordinates, [$x-1, $y];\n    push @coordinates, [$x-1, $y+1];\n    push @coordinates, [$x, $y-1];\n    push @coordinates, [$x, $y+1];\n    push @coordinates, [$x+1, $y-1];\n    push @coordinates, [$x+1, $y];\n    push @coordinates, [$x+1, $y+1];\n    return @coordinates;\n}",
    "    my @coordinates = ();\n    my $x = $test_tup->[0];\n    my $y = $test_tup->[1];\n    my $z = $test_tup->[2];\n    my $w = $test_tup->[3];\n    my $v = $test_tup->[4];\n    my $u = $test_tup->[5];\n    push(@coordinates, [$x+1, $y, $z, $w, $v, $u]);\n    push(@coordinates, [$x-1, $y, $z, $w, $v, $u]);\n    push(@coordinates, [$x, $y+1, $z, $w, $v, $u]);\n    push(@coordinates, [$x, $y-1, $z, $w, $v, $u]);\n    push(@coordinates, [$x, $y, $z+1, $w, $v, $u]);\n    push(@coordinates, [$x, $y, $z-1, $w, $v, $u]);\n    push(@coordinates, [$x, $y, $z, $w+1, $v, $u]);\n    push(@coordinates, [$x, $y, $z, $w-1, $v, $u]);\n    push(@coordinates, [$x, $y, $z, $w, $v+1, $u]);\n    push(@coordinates, [$x, $y, $z, $w, $v-1, $u]);\n    push(@coordinates, [$x, $y, $z, $w, $v, $u+1]);\n    push(@coordinates, [$x, $y, $z, $w, $v, $u-1]);\n    return @coordinates;\n}",
    "    my @coordinates = ();\n    my $x = $test_tup->[0];\n    my $y = $test_tup->[1];\n    push @coordinates, [$x-1, $y-1];\n    push @coordinates, [$x-1, $y];\n    push @coordinates, [$x-1, $y+1];\n    push @coordinates, [$x, $y-1];\n    push @coordinates, [$x, $y+1];\n    push @coordinates, [$x+1, $y-1];\n    push @coordinates, [$x+1, $y];\n    push @coordinates, [$x+1, $y+1];\n    return @coordinates;\n}",
    "    my @coordinates;\n    my $x = $test_tup->[0];\n    my $y = $test_tup->[1];\n    my $z = $test_tup->[2];\n    my $w = $test_tup->[3];\n    my $v = $test_tup->[4];\n    my $u = $test_tup->[5];\n    my $t = $test_tup->[6];\n    my $s = $test_tup->[7];\n    my $r = $test_tup->[8];\n    my $q = $test_tup->[9];\n    my $p = $test_tup->[10];\n    my $o = $test_tup->[11];\n    my $n = $test_tup->[12];\n    my $m = $test_tup->[13];\n    my $l = $test_tup->[14];\n    my $k = $test_tup->[15];\n    my $j = $test_tup->[16];\n    my $i = $test_tup->[17];\n    my $h = $test_tup->[18];\n    my $g = $test_tup->[19];\n    my $f = $test_tup->[20];\n    my $e = $test_tup->[21];\n    my $d = $test_tup->[22];\n    my $c = $test_tup->[23];\n    my $b = $test_tup->[24];\n    my $a = $test_tup->[25];\n    push @coordinates, [$x, $y, $z, $w, $v, $u, $t, $s, $r, $q, $p, $o, $n, $m, $l, $k, $j, $i, $h, $g, $f, $e, $d, $c, $b, $a];\n    push @coordinates, [$x, $y, $z, $w, $v, $u, $t,",
    "    my @coordinates = ();\n    my $x = $test_tup->[0];\n    my $y = $test_tup->[1];\n    push @coordinates, [$x - 1, $y - 1];\n    push @coordinates, [$x - 1, $y];\n    push @coordinates, [$x - 1, $y + 1];\n    push @coordinates, [$x, $y - 1];\n    push @coordinates, [$x, $y + 1];\n    push @coordinates, [$x + 1, $y - 1];\n    push @coordinates, [$x + 1, $y];\n    push @coordinates, [$x + 1, $y + 1];\n    return @coordinates;\n}",
    "    my @coordinates;\n    my $x = $test_tup->[0];\n    my $y = $test_tup->[1];\n    my $z = $test_tup->[2];\n    push @coordinates, [$x, $y, $z];\n    push @coordinates, [$x, $y, $z+1];\n    push @coordinates, [$x, $y, $z-1];\n    push @coordinates, [$x, $y+1, $z];\n    push @coordinates, [$x, $y-1, $z];\n    push @coordinates, [$x+1, $y, $z];\n    push @coordinates, [$x-1, $y, $z];\n    return @coordinates;\n}",
    "    my @coordinates = ();\n    my $x = $test_tup->[0];\n    my $y = $test_tup->[1];\n    push @coordinates, [$x - 1, $y - 1];\n    push @coordinates, [$x - 1, $y];\n    push @coordinates, [$x - 1, $y + 1];\n    push @coordinates, [$x, $y - 1];\n    push @coordinates, [$x, $y + 1];\n    push @coordinates, [$x + 1, $y - 1];\n    push @coordinates, [$x + 1, $y];\n    push @coordinates, [$x + 1, $y + 1];\n    return @coordinates;\n}",
    "    my @coordinates;\n    my $x = $test_tup->[0];\n    my $y = $test_tup->[1];\n    push @coordinates, [$x-1, $y-1];\n    push @coordinates, [$x-1, $y];\n    push @coordinates, [$x-1, $y+1];\n    push @coordinates, [$x, $y-1];\n    push @coordinates, [$x, $y+1];\n    push @coordinates, [$x+1, $y-1];\n    push @coordinates, [$x+1, $y];\n    push @coordinates, [$x+1, $y+1];\n    return @coordinates;\n}",
    "    my @coordinates;\n    my @test_tup = @$test_tup;\n    my $x = $test_tup[0];\n    my $y = $test_tup[1];\n    push @coordinates, [$x-1,$y-1];\n    push @coordinates, [$x-1,$y];\n    push @coordinates, [$x-1,$y+1];\n    push @coordinates, [$x,$y-1];\n    push @coordinates, [$x,$y+1];\n    push @coordinates, [$x+1,$y-1];\n    push @coordinates, [$x+1,$y];\n    push @coordinates, [$x+1,$y+1];\n    return @coordinates;\n}",
    "    my @coordinates;\n    my $x = $test_tup->[0];\n    my $y = $test_tup->[1];\n    push @coordinates, [$x+1, $y];\n    push @coordinates, [$x-1, $y];\n    push @coordinates, [$x, $y+1];\n    push @coordinates, [$x, $y-1];\n    return @coordinates;\n}"
  ]
}