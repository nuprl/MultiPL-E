{
  "name": "mbpp_265_list_split",
  "language": "pl",
  "prompt": "# Write a function that takes in an array and an integer n and splits an array for every nth element, returning an array of the resulting arrays.\nsub list_split {\n    my($S, $step) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_265_list_split.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&list_split;\n        if(eq_deeply($candidate->([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"], 3),[[\"a\", \"d\", \"g\", \"j\", \"m\"], [\"b\", \"e\", \"h\", \"k\", \"n\"], [\"c\", \"f\", \"i\", \"l\"]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 3),[[1, 4, 7, 10, 13], [2, 5, 8, 11, 14], [3, 6, 9, 12]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\"], 2),[[\"python\", \"C\", \"DBMS\"], [\"java\", \"C++\", \"SQL\"]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @result;\n    my $i = 0;\n    while($i < @$S) {\n        push @result, [@$S[$i..$i+$step-1]];\n        $i += $step;\n    }\n    return @result;\n}",
    "    my @result;\n    my $i = 0;\n    while ($i < @$S) {\n        push @result, [@$S[$i .. $i + $step - 1]];\n        $i += $step;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $i = 0;\n    while ($i < @$S) {\n        push @result, [@$S[$i..$i+$step-1]];\n        $i += $step;\n    }\n    return @result;\n}",
    "    my $i = 0;\n    my @result;\n    while ($i < @$S) {\n        push @result, [@$S[$i..$i+$step-1]];\n        $i += $step;\n    }\n    return @result;\n}",
    "    my @result;\n    my $i = 0;\n    while ($i < @$S) {\n        push @result, [@$S[$i..$i+$step-1]];\n        $i += $step;\n    }\n    return @result;\n}",
    "    my @result;\n    my $i = 0;\n    while ($i < @$S) {\n        push @result, [@$S[$i..$i+$step-1]];\n        $i += $step;\n    }\n    return @result;\n}",
    "    my @result;\n    my $i = 0;\n    while ($i < @$S) {\n        my $j = $i + $step;\n        if ($j > @$S) {\n            $j = @$S;\n        }\n        push @result, [@$S[$i..$j-1]];\n        $i = $j;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $i = 0;\n    while($i < scalar(@$S)) {\n        push @result, [@$S[$i .. $i + $step - 1]];\n        $i += $step;\n    }\n    return @result;\n}",
    "    my @out = ();\n    my $i = 0;\n    while ($i < scalar @$S) {\n        push @out, [@$S[$i .. $i + $step - 1]];\n        $i += $step;\n    }\n    return @out;\n}",
    "    my @result;\n    my $i = 0;\n    while ($i < scalar @$S) {\n        push @result, [ @$S[$i..$i+$step-1] ];\n        $i += $step;\n    }\n    return @result;\n}",
    "    my @result;\n    my $i = 0;\n    while ($i < @$S) {\n        push @result, [@$S[$i .. $i + $step - 1]];\n        $i += $step;\n    }\n    return @result;\n}",
    "    my @result = ();\n    my $i = 0;\n    while ($i < @$S) {\n        push @result, [@$S[$i .. $i + $step - 1]];\n        $i += $step;\n    }\n    return @result;\n}",
    "    my @result;\n    my $i = 0;\n    while ($i < @$S) {\n        push @result, [@$S[$i .. $i + $step - 1]];\n        $i += $step;\n    }\n    return @result;\n}",
    "    my @result;\n    my $i = 0;\n    while ($i < @$S) {\n        push @result, [@$S[$i .. $i + $step - 1]];\n        $i += $step;\n    }\n    return @result;\n}",
    "    my @result;\n    my $i = 0;\n    while ($i < @$S) {\n        push @result, [@$S[$i .. $i + $step - 1]];\n        $i += $step;\n    }\n    return @result;\n}",
    "    my @result;\n    my $i = 0;\n    while ($i < scalar(@$S)) {\n        my $j = $i + $step;\n        push @result, [@$S[$i..$j-1]];\n        $i = $j;\n    }\n    return @result;\n}",
    "    my @result;\n    my $i = 0;\n    while ($i < @$S) {\n        push @result, [@$S[$i..$i+$step-1]];\n        $i += $step;\n    }\n    return @result;\n}",
    "    my @result;\n    my $i = 0;\n    while ($i < @$S) {\n        push @result, [@$S[$i..$i+$step-1]];\n        $i += $step;\n    }\n    return @result;\n}",
    "    my @result;\n    my $i = 0;\n    while ($i < @$S) {\n        push @result, [@$S[$i .. $i + $step - 1]];\n        $i += $step;\n    }\n    return @result;\n}",
    "    my @result;\n    my $i = 0;\n    while ($i < @$S) {\n        my $j = $i + $step;\n        if ($j > @$S) {\n            $j = @$S;\n        }\n        push @result, [@$S[$i..$j-1]];\n        $i = $j;\n    }\n    return @result;\n}"
  ]
}