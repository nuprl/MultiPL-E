{
  "name": "mbpp_395_first_non_repeating_character",
  "language": "pl",
  "prompt": "# Write a plthon function to find the first non-repeated character in a given string.\nsub first_non_repeating_character {\n    my($str1) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_395_first_non_repeating_character.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&first_non_repeating_character;\n        if(eq_deeply($candidate->(\"abcabc\"),undef)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abc\"),\"a\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ababc\"),\"c\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my %count;\n    foreach my $char (split //, $str1) {\n        $count{$char}++;\n    }\n    foreach my $char (split //, $str1) {\n        return $char if $count{$char} == 1;\n    }\n    return undef;\n}",
    "    my %count;\n    foreach my $char (split //, $str1) {\n        $count{$char}++;\n    }\n    foreach my $char (split //, $str1) {\n        return $char if $count{$char} == 1;\n    }\n}",
    "    my %count;\n    my @char = split(//, $str1);\n    foreach my $char (@char) {\n        $count{$char}++;\n    }\n    foreach my $char (@char) {\n        if ($count{$char} == 1) {\n            return $char;\n        }\n    }\n}",
    "    my %count;\n    my @characters = split //, $str1;\n    foreach my $char (@characters) {\n        $count{$char}++;\n    }\n    foreach my $char (@characters) {\n        if ($count{$char} == 1) {\n            return $char;\n        }\n    }\n}",
    "    my @str_array = split(//, $str1);\n    my %count;\n    foreach my $char (@str_array) {\n        $count{$char}++;\n    }\n    foreach my $char (@str_array) {\n        if ($count{$char} == 1) {\n            return $char;\n        }\n    }\n    return \"No non-repeating character found\";\n}",
    "    my %count;\n    foreach my $char (split //, $str1) {\n        $count{$char}++;\n    }\n    foreach my $char (split //, $str1) {\n        return $char if $count{$char} == 1;\n    }\n    return undef;\n}",
    "    my %count;\n    foreach my $char (split //, $str1) {\n        $count{$char}++;\n    }\n    foreach my $char (split //, $str1) {\n        return $char if $count{$char} == 1;\n    }\n    return undef;\n}",
    "    my %count;\n    foreach my $char (split //, $str1) {\n        $count{$char}++;\n    }\n    foreach my $char (split //, $str1) {\n        return $char if $count{$char} == 1;\n    }\n    return undef;\n}",
    "    my %count;\n    foreach my $char (split //, $str1) {\n        $count{$char}++;\n    }\n    foreach my $char (split //, $str1) {\n        return $char if $count{$char} == 1;\n    }\n    return undef;\n}",
    "    my(%count);\n    foreach my $char (split //, $str1) {\n        $count{$char}++;\n    }\n    foreach my $char (split //, $str1) {\n        if ($count{$char} == 1) {\n            return $char;\n        }\n    }\n}",
    "    my %count;\n    my @chars = split(//, $str1);\n    foreach my $char (@chars) {\n        $count{$char}++;\n    }\n    foreach my $char (@chars) {\n        if ($count{$char} == 1) {\n            return $char;\n        }\n    }\n    return undef;\n}",
    "    my(%hash,$chr,$i);\n    for($i=0;$i<length($str1);$i++) {\n        $chr = substr($str1,$i,1);\n        if(exists($hash{$chr})) {\n            $hash{$chr} = $hash{$chr} + 1;\n        }\n        else {\n            $hash{$chr} = 1;\n        }\n    }\n    for($i=0;$i<length($str1);$i++) {\n        $chr = substr($str1,$i,1);\n        if($hash{$chr} == 1) {\n            return $chr;\n        }\n    }\n    return \"\";\n}",
    "    my %count;\n    my @char = split(//, $str1);\n    foreach my $char(@char) {\n        $count{$char}++;\n    }\n    foreach my $char(@char) {\n        if($count{$char} == 1) {\n            return $char;\n        }\n    }\n}",
    "    my %count;\n    my @char = split(//, $str1);\n    foreach my $char(@char) {\n        $count{$char}++;\n    }\n    foreach my $char(@char) {\n        if($count{$char} == 1) {\n            return $char;\n        }\n    }\n}",
    "    my %count;\n    foreach my $char (split //, $str1) {\n        $count{$char}++;\n    }\n    foreach my $char (split //, $str1) {\n        if ($count{$char} == 1) {\n            return $char;\n        }\n    }\n}",
    "    my %count;\n    my @array = split('', $str1);\n    foreach my $char (@array) {\n        $count{$char}++;\n    }\n    foreach my $char (@array) {\n        if ($count{$char} == 1) {\n            return $char;\n        }\n    }\n}",
    "    my %count;\n    foreach my $char (split //, $str1) {\n        $count{$char}++;\n    }\n    foreach my $char (split //, $str1) {\n        return $char if $count{$char} == 1;\n    }\n}\nprint first_non_repeating_character(\"the quick brown fox jumps then quickly blow air\");",
    "    my %count;\n    my @char = split(//, $str1);\n    foreach my $char(@char) {\n        $count{$char}++;\n    }\n    foreach my $char(@char) {\n        if($count{$char} == 1) {\n            return $char;\n        }\n    }\n}",
    "    my %count;\n    foreach my $char (split //, $str1) {\n        $count{$char}++;\n    }\n    foreach my $char (split //, $str1) {\n        return $char if $count{$char} == 1;\n    }\n}",
    "    my %count;\n    my @char = split(//, $str1);\n    foreach my $char(@char) {\n        $count{$char}++;\n    }\n    foreach my $char(@char) {\n        if($count{$char} == 1) {\n            return $char;\n        }\n    }\n}"
  ]
}