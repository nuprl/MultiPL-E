{
  "name": "mbpp_572_two_unique_nums",
  "language": "pl",
  "prompt": "# Write a plthon function to remove duplicate numbers from a given number of arrays.\nsub two_unique_nums {\n    my($nums) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_572_two_unique_nums.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&two_unique_nums;\n        if(eq_deeply($candidate->([1, 2, 3, 2, 3, 4, 5]),[1, 4, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 2, 4, 5]),[1, 3, 4, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5]),[1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my @unique_nums;\n    foreach my $num (keys %count) {\n        if ($count{$num} == 1) {\n            push @unique_nums, $num;\n        }\n    }\n    return @unique_nums;\n}",
    "    my %seen;\n    my @unique;\n    foreach my $num (@$nums) {\n        if(!$seen{$num}) {\n            push @unique, $num;\n            $seen{$num} = 1;\n        }\n    }\n    return @unique;\n}",
    "    my %count;\n    $count{$_}++ for @$nums;\n    my @uniq = grep { $count{$_} == 1 } keys %count;\n    return @uniq;\n}",
    "    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my @unique_nums = grep { $count{$_} == 1 } keys %count;\n    return @unique_nums;\n}",
    "    my $unique = 0;\n    foreach my $num (@$nums) {\n        $unique ^= $num;\n    }\n    return $unique;\n}",
    "    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my @unique;\n    foreach my $num (@$nums) {\n        if ($count{$num} == 1) {\n            push @unique, $num;\n        }\n    }\n    return @unique;\n}",
    "    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my @unique_nums;\n    foreach my $num (keys %count) {\n        if ($count{$num} == 1) {\n            push @unique_nums, $num;\n        }\n    }\n    return @unique_nums;\n}",
    "    my %seen;\n    my @unique;\n    foreach my $num (@$nums) {\n        if (not $seen{$num}) {\n            push @unique, $num;\n            $seen{$num} = 1;\n        }\n    }\n    return @unique;\n}",
    "    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my @unique_nums = grep { $count{$_} == 1 } keys %count;\n    return @unique_nums;\n}",
    "    my %seen;\n    my @unique;\n    foreach my $num (@$nums) {\n        if(!$seen{$num}) {\n            push @unique, $num;\n            $seen{$num} = 1;\n        }\n    }\n    return @unique;\n}",
    "    my %seen;\n    my @unique;\n    foreach my $num (@$nums) {\n        if(!$seen{$num}) {\n            push @unique, $num;\n            $seen{$num} = 1;\n        }\n    }\n    return @unique;\n}",
    "    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my @unique_nums;\n    foreach my $num (keys %count) {\n        if ($count{$num} == 1) {\n            push @unique_nums, $num;\n        }\n    }\n    return @unique_nums;\n}",
    "    my %count;\n    my @unique;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    foreach my $num (@$nums) {\n        if ($count{$num} == 1) {\n            push @unique, $num;\n        }\n    }\n    return @unique;\n}",
    "    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my @unique;\n    foreach my $num (@$nums) {\n        if ($count{$num} == 1) {\n            push @unique, $num;\n        }\n    }\n    return @unique;\n}",
    "    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my @unique;\n    foreach my $num (keys %count) {\n        if ($count{$num} == 1) {\n            push @unique, $num;\n        }\n    }\n    return @unique;\n}",
    "    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my @unique_nums;\n    foreach my $num (keys %count) {\n        if ($count{$num} == 1) {\n            push @unique_nums, $num;\n        }\n    }\n    return @unique_nums;\n}",
    "    my %seen;\n    my @unique;\n    foreach my $num (@$nums) {\n        push @unique, $num unless $seen{$num}++;\n    }\n    return @unique;\n}",
    "    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my @unique_nums;\n    foreach my $num (keys %count) {\n        if ($count{$num} == 1) {\n            push @unique_nums, $num;\n        }\n    }\n    return @unique_nums;\n}",
    "    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my @unique_nums;\n    foreach my $num (keys %count) {\n        if ($count{$num} == 1) {\n            push @unique_nums, $num;\n        }\n    }\n    return @unique_nums;\n}",
    "    my %seen;\n    my @uniq;\n    foreach my $num (@$nums) {\n        if (!$seen{$num}) {\n            push @uniq, $num;\n            $seen{$num} = 1;\n        }\n    }\n    return @uniq;\n}"
  ]
}