{
  "name": "mbpp_12_sort_matrix",
  "language": "pl",
  "prompt": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\nsub sort_matrix {\n    my($M) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_12_sort_matrix.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_matrix;\n        if(eq_deeply($candidate->([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @sorted = sort {\n        my $sum1 = 0;\n        my $sum2 = 0;\n        for my $i (0..$#{$a}) {\n            $sum1 += $a->[$i];\n            $sum2 += $b->[$i];\n        }\n        $sum1 <=> $sum2;\n    } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = map { $_->[0] }\n                 sort { $a->[1] <=> $b->[1] }\n                 map { [$_, sum(@$_)] }\n                 @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @rows = @$M;\n    my @sorted_rows = sort {\n        my $sum_a = 0;\n        my $sum_b = 0;\n        for my $i (0 .. $#{$a}) {\n            $sum_a += $a->[$i];\n            $sum_b += $b->[$i];\n        }\n        $sum_a <=> $sum_b;\n    } @rows;\n    return \\@sorted_rows;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort {\n        my $sum_a = sum(@{$M->[$a]});\n        my $sum_b = sum(@{$M->[$b]});\n        $sum_a <=> $sum_b;\n    } (0..$#{$M});\n    return [@{$M}[@sorted]];\n}",
    "    my @M = @$M;\n    my @sorted = sort { $a->[0] <=> $b->[0] } map { [sum(@$_), $_] } @M;\n    return [map { $_->[1] } @sorted];\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort {\n        my $sum_a = 0;\n        my $sum_b = 0;\n        for my $i (0..$#{$a}) {\n            $sum_a += $a->[$i];\n            $sum_b += $b->[$i];\n        }\n        $sum_a <=> $sum_b;\n    } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @M = @$M;\n    my @sorted = sort { sum(@$a) <=> sum(@$b) } @M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort {\n        my $sum_a = sum(@$a);\n        my $sum_b = sum(@$b);\n        $sum_a <=> $sum_b;\n    } @$M;\n    return \\@sorted;\n}",
    "    my @sorted = sort { sum(@$a) <=> sum(@$b) } @$M;\n    return \\@sorted;\n}",
    "    my @sums = map { sum(@$_) } @$M;\n    my @sorted = sort { $sums[$a] <=> $sums[$b] } 0 .. $#$M;\n    return [ @$M[@sorted] ];\n}",
    "    my $rows = scalar(@$M);\n    my $cols = scalar(@{$M->[0]});\n    my @sums = map { sum(@$_) } @$M;\n    my @sorted = sort { $sums[$a] <=> $sums[$b] } 0..$rows-1;\n    my @sorted_matrix = map { $M->[$_] } @sorted;\n    return \\@sorted_matrix;\n}"
  ]
}